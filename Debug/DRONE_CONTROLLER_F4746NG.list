
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080085f0  080085f0  000185f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f8  080088f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088f8  080088f8  000188f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008900  08008900  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008904  08008904  00018904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001dc  08008ae4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08008ae4  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc4b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e5  00000000  00000000  0003be57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fa5e  00000000  00000000  0003f23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001550  00000000  00000000  0004eca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001428  00000000  00000000  000501f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004620  00000000  00000000  00051618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012789  00000000  00000000  00055c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fdddd  00000000  00000000  000683c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016619e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004834  00000000  00000000  0016621c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085d8 	.word	0x080085d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080085d8 	.word	0x080085d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_InitTick+0x40>)
 8000fce:	7818      	ldrb	r0, [r3, #0]
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <HAL_InitTick+0x44>)
 8000fda:	6810      	ldr	r0, [r2, #0]
 8000fdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe0:	f000 fc64 	bl	80018ac <HAL_SYSTICK_Config>
 8000fe4:	b968      	cbnz	r0, 8001002 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	2c0f      	cmp	r4, #15
 8000fe8:	d901      	bls.n	8000fee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
 8000fec:	e00a      	b.n	8001004 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff6:	f000 fc19 	bl	800182c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_InitTick+0x48>)
 8000ffc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2000      	movs	r0, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
}
 8001004:	bd10      	pop	{r4, pc}
 8001006:	bf00      	nop
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_Init>:
{
 8001014:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x20>)
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 fbf1 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ffce 	bl	8000fc8 <HAL_InitTick>
  HAL_MspInit();
 800102c:	f003 fa82 	bl	8004534 <HAL_MspInit>
}
 8001030:	2000      	movs	r0, #0
 8001032:	bd08      	pop	{r3, pc}
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <HAL_IncTick+0x10>)
 800103a:	6811      	ldr	r1, [r2, #0]
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_IncTick+0x14>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	440b      	add	r3, r1
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000220 	.word	0x20000220
 800104c:	20000000 	.word	0x20000000

08001050 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <HAL_GetTick+0x8>)
 8001052:	6818      	ldr	r0, [r3, #0]
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000220 	.word	0x20000220

0800105c <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800105c:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <ADC_Init+0x12c>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001064:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	6841      	ldr	r1, [r0, #4]
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800106e:	6802      	ldr	r2, [r0, #0]
 8001070:	6853      	ldr	r3, [r2, #4]
 8001072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001076:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	6901      	ldr	r1, [r0, #16]
 800107e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001082:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001084:	6802      	ldr	r2, [r0, #0]
 8001086:	6853      	ldr	r3, [r2, #4]
 8001088:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800108c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800108e:	6802      	ldr	r2, [r0, #0]
 8001090:	6853      	ldr	r3, [r2, #4]
 8001092:	6881      	ldr	r1, [r0, #8]
 8001094:	430b      	orrs	r3, r1
 8001096:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001098:	6802      	ldr	r2, [r0, #0]
 800109a:	6893      	ldr	r3, [r2, #8]
 800109c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010a0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010a2:	6802      	ldr	r2, [r0, #0]
 80010a4:	6893      	ldr	r3, [r2, #8]
 80010a6:	68c1      	ldr	r1, [r0, #12]
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <ADC_Init+0x130>)
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d04b      	beq.n	800114c <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010b4:	6802      	ldr	r2, [r0, #0]
 80010b6:	6893      	ldr	r3, [r2, #8]
 80010b8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010bc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010be:	6802      	ldr	r2, [r0, #0]
 80010c0:	6893      	ldr	r3, [r2, #8]
 80010c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010c8:	6802      	ldr	r2, [r0, #0]
 80010ca:	6893      	ldr	r3, [r2, #8]
 80010cc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010d0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010d2:	6802      	ldr	r2, [r0, #0]
 80010d4:	6893      	ldr	r3, [r2, #8]
 80010d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010d8:	430b      	orrs	r3, r1
 80010da:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010dc:	6802      	ldr	r2, [r0, #0]
 80010de:	6893      	ldr	r3, [r2, #8]
 80010e0:	f023 0302 	bic.w	r3, r3, #2
 80010e4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010e6:	6802      	ldr	r2, [r0, #0]
 80010e8:	6893      	ldr	r3, [r2, #8]
 80010ea:	6981      	ldr	r1, [r0, #24]
 80010ec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80010f0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010f2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d133      	bne.n	8001162 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010fa:	6802      	ldr	r2, [r0, #0]
 80010fc:	6853      	ldr	r3, [r2, #4]
 80010fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001102:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001104:	6802      	ldr	r2, [r0, #0]
 8001106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001108:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800110c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800110e:	6801      	ldr	r1, [r0, #0]
 8001110:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001112:	69c2      	ldr	r2, [r0, #28]
 8001114:	3a01      	subs	r2, #1
 8001116:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800111a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800111c:	6802      	ldr	r2, [r0, #0]
 800111e:	6893      	ldr	r3, [r2, #8]
 8001120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001124:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	6893      	ldr	r3, [r2, #8]
 800112a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800112e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001132:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001134:	6802      	ldr	r2, [r0, #0]
 8001136:	6893      	ldr	r3, [r2, #8]
 8001138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800113c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	6893      	ldr	r3, [r2, #8]
 8001142:	6941      	ldr	r1, [r0, #20]
 8001144:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001148:	6093      	str	r3, [r2, #8]
}
 800114a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800114c:	6802      	ldr	r2, [r0, #0]
 800114e:	6893      	ldr	r3, [r2, #8]
 8001150:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001154:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001156:	6802      	ldr	r2, [r0, #0]
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	e7bc      	b.n	80010dc <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001162:	6802      	ldr	r2, [r0, #0]
 8001164:	6853      	ldr	r3, [r2, #4]
 8001166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800116c:	6802      	ldr	r2, [r0, #0]
 800116e:	6853      	ldr	r3, [r2, #4]
 8001170:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001174:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001176:	6801      	ldr	r1, [r0, #0]
 8001178:	684b      	ldr	r3, [r1, #4]
 800117a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800117c:	3a01      	subs	r2, #1
 800117e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e7be      	b.n	8001104 <ADC_Init+0xa8>
 8001186:	bf00      	nop
 8001188:	40012300 	.word	0x40012300
 800118c:	0f000001 	.word	0x0f000001

08001190 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001190:	b328      	cbz	r0, 80011de <HAL_ADC_Init+0x4e>
{
 8001192:	b510      	push	{r4, lr}
 8001194:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001196:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001198:	b143      	cbz	r3, 80011ac <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800119c:	f013 0f10 	tst.w	r3, #16
 80011a0:	d00b      	beq.n	80011ba <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80011aa:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80011ac:	f003 f9da 	bl	8004564 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	2300      	movs	r3, #0
 80011b2:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80011b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80011b8:	e7ef      	b.n	800119a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_ADC_Init+0x54>)
 80011be:	4013      	ands	r3, r2
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff ff48 	bl	800105c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	2000      	movs	r0, #0
 80011ce:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d2:	f023 0303 	bic.w	r3, r3, #3
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6423      	str	r3, [r4, #64]	; 0x40
 80011dc:	e7e2      	b.n	80011a4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	ffffeefd 	.word	0xffffeefd

080011e8 <HAL_ADC_Start>:
{
 80011e8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d073      	beq.n	80012de <HAL_ADC_Start+0xf6>
 80011f6:	2301      	movs	r3, #1
 80011f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	f012 0f01 	tst.w	r2, #1
 8001204:	d113      	bne.n	800122e <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_ADC_Start+0x10c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <HAL_ADC_Start+0x110>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	0c9b      	lsrs	r3, r3, #18
 800121a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800121e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001220:	e002      	b.n	8001228 <HAL_ADC_Start+0x40>
      counter--;
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	3b01      	subs	r3, #1
 8001226:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800122e:	6802      	ldr	r2, [r0, #0]
 8001230:	6893      	ldr	r3, [r2, #8]
 8001232:	f013 0f01 	tst.w	r3, #1
 8001236:	d054      	beq.n	80012e2 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8001238:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_ADC_Start+0x114>)
 800123c:	400b      	ands	r3, r1
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001244:	6853      	ldr	r3, [r2, #4]
 8001246:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800124a:	d005      	beq.n	8001258 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800124c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800124e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001256:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001258:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800125a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800125e:	d019      	beq.n	8001294 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001260:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001262:	f023 0306 	bic.w	r3, r3, #6
 8001266:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001268:	2300      	movs	r3, #0
 800126a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800126e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001272:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_ADC_Start+0x118>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f013 0f1f 	tst.w	r3, #31
 800127c:	d10d      	bne.n	800129a <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001286:	d12f      	bne.n	80012e8 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800128e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
 8001292:	e027      	b.n	80012e4 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8001294:	2300      	movs	r3, #0
 8001296:	6443      	str	r3, [r0, #68]	; 0x44
 8001298:	e7e6      	b.n	8001268 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129a:	6803      	ldr	r3, [r0, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_ADC_Start+0x11c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00a      	beq.n	80012b8 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_ADC_Start+0x118>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f013 0f10 	tst.w	r3, #16
 80012aa:	d11f      	bne.n	80012ec <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012ac:	6803      	ldr	r3, [r0, #0]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_ADC_Start+0x120>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00a      	beq.n	80012ca <HAL_ADC_Start+0xe2>
  return HAL_OK;
 80012b4:	2000      	movs	r0, #0
 80012b6:	e015      	b.n	80012e4 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012be:	d1f0      	bne.n	80012a2 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	e7eb      	b.n	80012a2 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012d0:	d10e      	bne.n	80012f0 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80012da:	2000      	movs	r0, #0
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 80012de:	2002      	movs	r0, #2
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 80012e2:	2000      	movs	r0, #0
}
 80012e4:	b002      	add	sp, #8
 80012e6:	4770      	bx	lr
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
 80012ea:	e7fb      	b.n	80012e4 <HAL_ADC_Start+0xfc>
 80012ec:	2000      	movs	r0, #0
 80012ee:	e7f9      	b.n	80012e4 <HAL_ADC_Start+0xfc>
 80012f0:	2000      	movs	r0, #0
 80012f2:	e7f7      	b.n	80012e4 <HAL_ADC_Start+0xfc>
 80012f4:	20000008 	.word	0x20000008
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	fffff8fe 	.word	0xfffff8fe
 8001300:	40012300 	.word	0x40012300
 8001304:	40012000 	.word	0x40012000
 8001308:	40012200 	.word	0x40012200

0800130c <HAL_ADC_Start_DMA>:
{
 800130c:	b530      	push	{r4, r5, lr}
 800130e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001318:	2b01      	cmp	r3, #1
 800131a:	f000 8091 	beq.w	8001440 <HAL_ADC_Start_DMA+0x134>
 800131e:	2301      	movs	r3, #1
 8001320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001324:	6804      	ldr	r4, [r0, #0]
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	f013 0f01 	tst.w	r3, #1
 800132c:	d113      	bne.n	8001356 <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 800132e:	68a3      	ldr	r3, [r4, #8]
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_ADC_Start_DMA+0x14c>)
 8001338:	681c      	ldr	r4, [r3, #0]
 800133a:	4b48      	ldr	r3, [pc, #288]	; (800145c <HAL_ADC_Start_DMA+0x150>)
 800133c:	fba3 3404 	umull	r3, r4, r3, r4
 8001340:	0ca4      	lsrs	r4, r4, #18
 8001342:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001346:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start_DMA+0x44>
      counter--;
 800134a:	9c01      	ldr	r4, [sp, #4]
 800134c:	3c01      	subs	r4, #1
 800134e:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8001350:	9c01      	ldr	r4, [sp, #4]
 8001352:	2c00      	cmp	r4, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	6803      	ldr	r3, [r0, #0]
 8001358:	689c      	ldr	r4, [r3, #8]
 800135a:	f014 0f01 	tst.w	r4, #1
 800135e:	d071      	beq.n	8001444 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8001360:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001362:	4c3f      	ldr	r4, [pc, #252]	; (8001460 <HAL_ADC_Start_DMA+0x154>)
 8001364:	402c      	ands	r4, r5
 8001366:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800136a:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001372:	d005      	beq.n	8001380 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001374:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800137a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001380:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001382:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001386:	d036      	beq.n	80013f6 <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001388:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800138a:	f023 0306 	bic.w	r3, r3, #6
 800138e:	6443      	str	r3, [r0, #68]	; 0x44
 8001390:	4613      	mov	r3, r2
 8001392:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8001394:	2200      	movs	r2, #0
 8001396:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800139a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800139c:	4831      	ldr	r0, [pc, #196]	; (8001464 <HAL_ADC_Start_DMA+0x158>)
 800139e:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013a2:	4831      	ldr	r0, [pc, #196]	; (8001468 <HAL_ADC_Start_DMA+0x15c>)
 80013a4:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013a8:	4830      	ldr	r0, [pc, #192]	; (800146c <HAL_ADC_Start_DMA+0x160>)
 80013aa:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80013b2:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013b4:	6825      	ldr	r5, [r4, #0]
 80013b6:	6868      	ldr	r0, [r5, #4]
 80013b8:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80013bc:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013be:	6825      	ldr	r5, [r4, #0]
 80013c0:	68a8      	ldr	r0, [r5, #8]
 80013c2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80013c6:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	460a      	mov	r2, r1
 80013cc:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80013d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013d2:	f000 fbd7 	bl	8001b84 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_ADC_Start_DMA+0x164>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f013 0f1f 	tst.w	r3, #31
 80013de:	d10d      	bne.n	80013fc <HAL_ADC_Start_DMA+0xf0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80013e8:	d12f      	bne.n	800144a <HAL_ADC_Start_DMA+0x13e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80013f2:	2000      	movs	r0, #0
 80013f4:	e027      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
      ADC_CLEAR_ERRORCODE(hadc);
 80013f6:	2300      	movs	r3, #0
 80013f8:	6443      	str	r3, [r0, #68]	; 0x44
 80013fa:	e7c9      	b.n	8001390 <HAL_ADC_Start_DMA+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_ADC_Start_DMA+0x168>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00a      	beq.n	800141a <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_ADC_Start_DMA+0x164>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f013 0f10 	tst.w	r3, #16
 800140c:	d11f      	bne.n	800144e <HAL_ADC_Start_DMA+0x142>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_ADC_Start_DMA+0x16c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00a      	beq.n	800142c <HAL_ADC_Start_DMA+0x120>
  return HAL_OK;
 8001416:	2000      	movs	r0, #0
 8001418:	e015      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001420:	d1f0      	bne.n	8001404 <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	e7eb      	b.n	8001404 <HAL_ADC_Start_DMA+0xf8>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001432:	d10e      	bne.n	8001452 <HAL_ADC_Start_DMA+0x146>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800143a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800143c:	2000      	movs	r0, #0
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
  __HAL_LOCK(hadc);
 8001440:	2002      	movs	r0, #2
 8001442:	e000      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
  return HAL_OK;
 8001444:	2000      	movs	r0, #0
}
 8001446:	b003      	add	sp, #12
 8001448:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	e7fb      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
 800144e:	2000      	movs	r0, #0
 8001450:	e7f9      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
 8001452:	2000      	movs	r0, #0
 8001454:	e7f7      	b.n	8001446 <HAL_ADC_Start_DMA+0x13a>
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	431bde83 	.word	0x431bde83
 8001460:	fffff8fe 	.word	0xfffff8fe
 8001464:	080015e7 	.word	0x080015e7
 8001468:	0800147d 	.word	0x0800147d
 800146c:	080015d1 	.word	0x080015d1
 8001470:	40012300 	.word	0x40012300
 8001474:	40012000 	.word	0x40012000
 8001478:	40012200 	.word	0x40012200

0800147c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800147c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800147e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001480:	f002 fff4 	bl	800446c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001484:	bd08      	pop	{r3, pc}

08001486 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_IRQHandler>:
{
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800148c:	6801      	ldr	r1, [r0, #0]
 800148e:	680a      	ldr	r2, [r1, #0]
 8001490:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001494:	684b      	ldr	r3, [r1, #4]
 8001496:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 800149a:	421a      	tst	r2, r3
 800149c:	d02c      	beq.n	80014f8 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014a0:	f013 0f10 	tst.w	r3, #16
 80014a4:	d103      	bne.n	80014ae <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ac:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ae:	688b      	ldr	r3, [r1, #8]
 80014b0:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80014b4:	d119      	bne.n	80014ea <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014b6:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b8:	b9bb      	cbnz	r3, 80014ea <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014bc:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014c2:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014c8:	d10f      	bne.n	80014ea <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014ca:	684b      	ldr	r3, [r1, #4]
 80014cc:	f023 0320 	bic.w	r3, r3, #32
 80014d0:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d8:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80014e0:	d103      	bne.n	80014ea <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f002 ffbc 	bl	8004468 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	f06f 0212 	mvn.w	r2, #18
 80014f6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 8001506:	4211      	tst	r1, r2
 8001508:	d034      	beq.n	8001574 <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800150c:	f012 0f10 	tst.w	r2, #16
 8001510:	d103      	bne.n	800151a <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001512:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001518:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001520:	d121      	bne.n	8001566 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001524:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001528:	d003      	beq.n	8001532 <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800152a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800152c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001530:	d119      	bne.n	8001566 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001532:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001534:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001538:	d115      	bne.n	8001566 <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800153a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800153c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001540:	d111      	bne.n	8001566 <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001542:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001544:	b97a      	cbnz	r2, 8001566 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800154c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800154e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001554:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001558:	f413 7f80 	tst.w	r3, #256	; 0x100
 800155c:	d103      	bne.n	8001566 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001566:	4620      	mov	r0, r4
 8001568:	f000 f94c 	bl	8001804 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f06f 020c 	mvn.w	r2, #12
 8001572:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001578:	6853      	ldr	r3, [r2, #4]
 800157a:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 800157e:	4219      	tst	r1, r3
 8001580:	d003      	beq.n	800158a <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	f013 0f01 	tst.w	r3, #1
 8001588:	d109      	bne.n	800159e <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800158a:	6821      	ldr	r1, [r4, #0]
 800158c:	680a      	ldr	r2, [r1, #0]
 800158e:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001592:	684b      	ldr	r3, [r1, #4]
 8001594:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 8001598:	421a      	tst	r2, r3
 800159a:	d10c      	bne.n	80015b6 <HAL_ADC_IRQHandler+0x12e>
}
 800159c:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ff6d 	bl	8001486 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	f06f 0201 	mvn.w	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e7e9      	b.n	800158a <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015be:	f06f 0520 	mvn.w	r5, #32
 80015c2:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 80015c4:	4620      	mov	r0, r4
 80015c6:	f002 ff50 	bl	800446a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	601d      	str	r5, [r3, #0]
}
 80015ce:	e7e5      	b.n	800159c <HAL_ADC_IRQHandler+0x114>

080015d0 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015d0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015e0:	f002 ff43 	bl	800446a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e4:	bd08      	pop	{r3, pc}

080015e6 <ADC_DMAConvCplt>:
{
 80015e6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ec:	f012 0f50 	tst.w	r2, #80	; 0x50
 80015f0:	d126      	bne.n	8001640 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	6891      	ldr	r1, [r2, #8]
 80015fe:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001602:	d119      	bne.n	8001638 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001604:	6999      	ldr	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001606:	b9b9      	cbnz	r1, 8001638 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001608:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800160a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800160e:	d003      	beq.n	8001618 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001610:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001612:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001616:	d10f      	bne.n	8001638 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001618:	6851      	ldr	r1, [r2, #4]
 800161a:	f021 0120 	bic.w	r1, r1, #32
 800161e:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800162e:	d103      	bne.n	8001638 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001638:	4618      	mov	r0, r3
 800163a:	f002 ff15 	bl	8004468 <HAL_ADC_ConvCpltCallback>
}
 800163e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001642:	f012 0f10 	tst.w	r2, #16
 8001646:	d103      	bne.n	8001650 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4798      	blx	r3
}
 800164e:	e7f6      	b.n	800163e <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001650:	4618      	mov	r0, r3
 8001652:	f002 ff0a 	bl	800446a <HAL_ADC_ErrorCallback>
 8001656:	e7f2      	b.n	800163e <ADC_DMAConvCplt+0x58>

08001658 <HAL_ADC_ConfigChannel>:
{
 8001658:	b430      	push	{r4, r5}
 800165a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001664:	2b01      	cmp	r3, #1
 8001666:	f000 80c0 	beq.w	80017ea <HAL_ADC_ConfigChannel+0x192>
 800166a:	2301      	movs	r3, #1
 800166c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001670:	680b      	ldr	r3, [r1, #0]
 8001672:	2b09      	cmp	r3, #9
 8001674:	d922      	bls.n	80016bc <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001676:	6805      	ldr	r5, [r0, #0]
 8001678:	68ea      	ldr	r2, [r5, #12]
 800167a:	b29b      	uxth	r3, r3
 800167c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001680:	3b1e      	subs	r3, #30
 8001682:	2407      	movs	r4, #7
 8001684:	fa04 f303 	lsl.w	r3, r4, r3
 8001688:	ea22 0303 	bic.w	r3, r2, r3
 800168c:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168e:	680b      	ldr	r3, [r1, #0]
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_ADC_ConfigChannel+0x198>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00b      	beq.n	80016ae <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001696:	6805      	ldr	r5, [r0, #0]
 8001698:	68ea      	ldr	r2, [r5, #12]
 800169a:	688c      	ldr	r4, [r1, #8]
 800169c:	b29b      	uxth	r3, r3
 800169e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016a2:	3b1e      	subs	r3, #30
 80016a4:	fa04 f303 	lsl.w	r3, r4, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60eb      	str	r3, [r5, #12]
 80016ac:	e01b      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016ae:	6802      	ldr	r2, [r0, #0]
 80016b0:	68d3      	ldr	r3, [r2, #12]
 80016b2:	688c      	ldr	r4, [r1, #8]
 80016b4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80016b8:	60d3      	str	r3, [r2, #12]
 80016ba:	e014      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016bc:	6805      	ldr	r5, [r0, #0]
 80016be:	692a      	ldr	r2, [r5, #16]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016c6:	2407      	movs	r4, #7
 80016c8:	fa04 f303 	lsl.w	r3, r4, r3
 80016cc:	ea22 0303 	bic.w	r3, r2, r3
 80016d0:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d2:	6805      	ldr	r5, [r0, #0]
 80016d4:	692a      	ldr	r2, [r5, #16]
 80016d6:	688c      	ldr	r4, [r1, #8]
 80016d8:	880b      	ldrh	r3, [r1, #0]
 80016da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016de:	fa04 f303 	lsl.w	r3, r4, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80016e6:	684b      	ldr	r3, [r1, #4]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d824      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ec:	6805      	ldr	r5, [r0, #0]
 80016ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80016f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016f4:	3b05      	subs	r3, #5
 80016f6:	241f      	movs	r4, #31
 80016f8:	fa04 f303 	lsl.w	r3, r4, r3
 80016fc:	ea22 0303 	bic.w	r3, r2, r3
 8001700:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001702:	6805      	ldr	r5, [r0, #0]
 8001704:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001706:	684b      	ldr	r3, [r1, #4]
 8001708:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800170c:	3b05      	subs	r3, #5
 800170e:	880c      	ldrh	r4, [r1, #0]
 8001710:	fa04 f303 	lsl.w	r3, r4, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001718:	6802      	ldr	r2, [r0, #0]
 800171a:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_ConfigChannel+0x19c>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d03a      	beq.n	8001796 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_ADC_ConfigChannel+0x19c>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d03f      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8001728:	2300      	movs	r3, #0
 800172a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800172e:	4618      	mov	r0, r3
}
 8001730:	b002      	add	sp, #8
 8001732:	bc30      	pop	{r4, r5}
 8001734:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d816      	bhi.n	8001768 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800173a:	6805      	ldr	r5, [r0, #0]
 800173c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800173e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001742:	3b23      	subs	r3, #35	; 0x23
 8001744:	241f      	movs	r4, #31
 8001746:	fa04 f303 	lsl.w	r3, r4, r3
 800174a:	ea22 0303 	bic.w	r3, r2, r3
 800174e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001750:	6805      	ldr	r5, [r0, #0]
 8001752:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001754:	684b      	ldr	r3, [r1, #4]
 8001756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800175a:	3b23      	subs	r3, #35	; 0x23
 800175c:	880c      	ldrh	r4, [r1, #0]
 800175e:	fa04 f303 	lsl.w	r3, r4, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	632b      	str	r3, [r5, #48]	; 0x30
 8001766:	e7d7      	b.n	8001718 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001768:	6805      	ldr	r5, [r0, #0]
 800176a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800176c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001770:	3b41      	subs	r3, #65	; 0x41
 8001772:	241f      	movs	r4, #31
 8001774:	fa04 f303 	lsl.w	r3, r4, r3
 8001778:	ea22 0303 	bic.w	r3, r2, r3
 800177c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800177e:	6805      	ldr	r5, [r0, #0]
 8001780:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001782:	684b      	ldr	r3, [r1, #4]
 8001784:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	880c      	ldrh	r4, [r1, #0]
 800178c:	fa04 f303 	lsl.w	r3, r4, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001794:	e7c0      	b.n	8001718 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001796:	680b      	ldr	r3, [r1, #0]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d1c1      	bne.n	8001720 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_ADC_ConfigChannel+0x1a0>)
 800179e:	6853      	ldr	r3, [r2, #4]
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a4:	6053      	str	r3, [r2, #4]
 80017a6:	e7bb      	b.n	8001720 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a8:	680b      	ldr	r3, [r1, #0]
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_ADC_ConfigChannel+0x198>)
 80017ac:	2b11      	cmp	r3, #17
 80017ae:	bf18      	it	ne
 80017b0:	4293      	cmpne	r3, r2
 80017b2:	d1b9      	bne.n	8001728 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_ADC_ConfigChannel+0x1a0>)
 80017b6:	6853      	ldr	r3, [r2, #4]
 80017b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017bc:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017be:	680a      	ldr	r2, [r1, #0]
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_ADC_ConfigChannel+0x198>)
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d1b0      	bne.n	8001728 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_ADC_ConfigChannel+0x1a4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_ADC_ConfigChannel+0x1a8>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017d6:	005a      	lsls	r2, r3, #1
 80017d8:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80017da:	e002      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80017e2:	9b01      	ldr	r3, [sp, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f9      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x184>
 80017e8:	e79e      	b.n	8001728 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80017ea:	2002      	movs	r0, #2
 80017ec:	e7a0      	b.n	8001730 <HAL_ADC_ConfigChannel+0xd8>
 80017ee:	bf00      	nop
 80017f0:	10000012 	.word	0x10000012
 80017f4:	40012000 	.word	0x40012000
 80017f8:	40012300 	.word	0x40012300
 80017fc:	20000008 	.word	0x20000008
 8001800:	431bde83 	.word	0x431bde83

08001804 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001804:	4770      	bx	lr
	...

08001808 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800180a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	0200      	lsls	r0, r0, #8
 8001816:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800181e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001820:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	05fa0000 	.word	0x05fa0000

0800182c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_NVIC_SetPriority+0x58>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001836:	f1c3 0407 	rsb	r4, r3, #7
 800183a:	2c04      	cmp	r4, #4
 800183c:	bf28      	it	cs
 800183e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001840:	1d1d      	adds	r5, r3, #4
 8001842:	2d06      	cmp	r5, #6
 8001844:	d914      	bls.n	8001870 <HAL_NVIC_SetPriority+0x44>
 8001846:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800184c:	fa05 f404 	lsl.w	r4, r5, r4
 8001850:	ea21 0104 	bic.w	r1, r1, r4
 8001854:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001856:	fa05 f303 	lsl.w	r3, r5, r3
 800185a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001860:	2800      	cmp	r0, #0
 8001862:	db07      	blt.n	8001874 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	0109      	lsls	r1, r1, #4
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_NVIC_SetPriority+0x5c>)
 800186a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800186c:	bc30      	pop	{r4, r5}
 800186e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001870:	2300      	movs	r3, #0
 8001872:	e7e9      	b.n	8001848 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	f000 000f 	and.w	r0, r0, #15
 8001878:	0109      	lsls	r1, r1, #4
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_NVIC_SetPriority+0x60>)
 800187e:	5419      	strb	r1, [r3, r0]
 8001880:	e7f4      	b.n	800186c <HAL_NVIC_SetPriority+0x40>
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	e000e400 	.word	0xe000e400
 800188c:	e000ed14 	.word	0xe000ed14

08001890 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001890:	2800      	cmp	r0, #0
 8001892:	db07      	blt.n	80018a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001894:	f000 021f 	and.w	r2, r0, #31
 8001898:	0940      	lsrs	r0, r0, #5
 800189a:	2301      	movs	r3, #1
 800189c:	4093      	lsls	r3, r2
 800189e:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <HAL_NVIC_EnableIRQ+0x18>)
 80018a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	3801      	subs	r0, #1
 80018ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018b2:	d20a      	bcs.n	80018ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_SYSTICK_Config+0x24>)
 80018b6:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_SYSTICK_Config+0x28>)
 80018ba:	21f0      	movs	r1, #240	; 0xf0
 80018bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	2000      	movs	r0, #0
 80018c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018d8:	2800      	cmp	r0, #0
 80018da:	d038      	beq.n	800194e <HAL_CRC_Init+0x76>
{
 80018dc:	b510      	push	{r4, lr}
 80018de:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018e0:	7f43      	ldrb	r3, [r0, #29]
 80018e2:	b31b      	cbz	r3, 800192c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80018e8:	7923      	ldrb	r3, [r4, #4]
 80018ea:	bb1b      	cbnz	r3, 8001934 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_CRC_Init+0x7c>)
 80018f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	6893      	ldr	r3, [r2, #8]
 80018f6:	f023 0318 	bic.w	r3, r3, #24
 80018fa:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80018fc:	7963      	ldrb	r3, [r4, #5]
 80018fe:	bb13      	cbnz	r3, 8001946 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001906:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	6893      	ldr	r3, [r2, #8]
 800190c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001910:	6961      	ldr	r1, [r4, #20]
 8001912:	430b      	orrs	r3, r1
 8001914:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	6893      	ldr	r3, [r2, #8]
 800191a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800191e:	69a1      	ldr	r1, [r4, #24]
 8001920:	430b      	orrs	r3, r1
 8001922:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001924:	2301      	movs	r3, #1
 8001926:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8001928:	2000      	movs	r0, #0
}
 800192a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800192c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800192e:	f002 fe89 	bl	8004644 <HAL_CRC_MspInit>
 8001932:	e7d7      	b.n	80018e4 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001934:	68e2      	ldr	r2, [r4, #12]
 8001936:	68a1      	ldr	r1, [r4, #8]
 8001938:	4620      	mov	r0, r4
 800193a:	f000 f80d 	bl	8001958 <HAL_CRCEx_Polynomial_Set>
 800193e:	2800      	cmp	r0, #0
 8001940:	d0dc      	beq.n	80018fc <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e7f1      	b.n	800192a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	6922      	ldr	r2, [r4, #16]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	e7dc      	b.n	8001908 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	04c11db7 	.word	0x04c11db7

08001958 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001958:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800195a:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800195c:	1e65      	subs	r5, r4, #1
 800195e:	b13c      	cbz	r4, 8001970 <HAL_CRCEx_Polynomial_Set+0x18>
 8001960:	f005 031f 	and.w	r3, r5, #31
 8001964:	fa21 f303 	lsr.w	r3, r1, r3
 8001968:	462c      	mov	r4, r5
 800196a:	f013 0f01 	tst.w	r3, #1
 800196e:	d0f5      	beq.n	800195c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001970:	2a18      	cmp	r2, #24
 8001972:	d823      	bhi.n	80019bc <HAL_CRCEx_Polynomial_Set+0x64>
 8001974:	e8df f002 	tbb	[pc, r2]
 8001978:	2222220f 	.word	0x2222220f
 800197c:	22222222 	.word	0x22222222
 8001980:	2222221e 	.word	0x2222221e
 8001984:	22222222 	.word	0x22222222
 8001988:	2222221a 	.word	0x2222221a
 800198c:	22222222 	.word	0x22222222
 8001990:	0d          	.byte	0x0d
 8001991:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001992:	2d06      	cmp	r5, #6
 8001994:	d814      	bhi.n	80019c0 <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001996:	6803      	ldr	r3, [r0, #0]
 8001998:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	688b      	ldr	r3, [r1, #8]
 800199e:	f023 0318 	bic.w	r3, r3, #24
 80019a2:	431a      	orrs	r2, r3
 80019a4:	608a      	str	r2, [r1, #8]
 80019a6:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80019a8:	bc30      	pop	{r4, r5}
 80019aa:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 80019ac:	2d07      	cmp	r5, #7
 80019ae:	d9f2      	bls.n	8001996 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
 80019b2:	e7f9      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 80019b4:	2d0f      	cmp	r5, #15
 80019b6:	d9ee      	bls.n	8001996 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e7f5      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 80019bc:	2001      	movs	r0, #1
 80019be:	e7f3      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e7f1      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0x50>

080019c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019c6:	6805      	ldr	r5, [r0, #0]
 80019c8:	682c      	ldr	r4, [r5, #0]
 80019ca:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80019ce:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019d0:	6804      	ldr	r4, [r0, #0]
 80019d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d4:	6883      	ldr	r3, [r0, #8]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d005      	beq.n	80019e6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	60da      	str	r2, [r3, #12]
  }
}
 80019e2:	bc30      	pop	{r4, r5}
 80019e4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80019e6:	6803      	ldr	r3, [r0, #0]
 80019e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	60d9      	str	r1, [r3, #12]
 80019ee:	e7f8      	b.n	80019e2 <DMA_SetConfig+0x1e>

080019f0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f0:	6802      	ldr	r2, [r0, #0]
 80019f2:	b2d3      	uxtb	r3, r2
 80019f4:	3b10      	subs	r3, #16
 80019f6:	4909      	ldr	r1, [pc, #36]	; (8001a1c <DMA_CalcBaseAndBitshift+0x2c>)
 80019f8:	fba1 1303 	umull	r1, r3, r1, r3
 80019fc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <DMA_CalcBaseAndBitshift+0x30>)
 8001a00:	5cc9      	ldrb	r1, [r1, r3]
 8001a02:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d804      	bhi.n	8001a12 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <DMA_CalcBaseAndBitshift+0x34>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001a0e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a10:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <DMA_CalcBaseAndBitshift+0x34>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	6583      	str	r3, [r0, #88]	; 0x58
 8001a1a:	e7f8      	b.n	8001a0e <DMA_CalcBaseAndBitshift+0x1e>
 8001a1c:	aaaaaaab 	.word	0xaaaaaaab
 8001a20:	080085f0 	.word	0x080085f0
 8001a24:	fffffc00 	.word	0xfffffc00

08001a28 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a2a:	6982      	ldr	r2, [r0, #24]
 8001a2c:	b992      	cbnz	r2, 8001a54 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d00a      	beq.n	8001a48 <DMA_CheckFifoParam+0x20>
 8001a32:	b11b      	cbz	r3, 8001a3c <DMA_CheckFifoParam+0x14>
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d001      	beq.n	8001a3c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a42:	d12c      	bne.n	8001a9e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2000      	movs	r0, #0
 8001a46:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a4e:	d028      	beq.n	8001aa2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2000      	movs	r0, #0
 8001a52:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a54:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a58:	d005      	beq.n	8001a66 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d929      	bls.n	8001ab2 <DMA_CheckFifoParam+0x8a>
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d015      	beq.n	8001a8e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2000      	movs	r0, #0
 8001a64:	4770      	bx	lr
    switch (tmp)
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d803      	bhi.n	8001a72 <DMA_CheckFifoParam+0x4a>
 8001a6a:	e8df f003 	tbb	[pc, r3]
 8001a6e:	041c      	.short	0x041c
 8001a70:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a7c:	d115      	bne.n	8001aaa <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001a7e:	2000      	movs	r0, #0
 8001a80:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a88:	d011      	beq.n	8001aae <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a94:	d001      	beq.n	8001a9a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001a98:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4770      	bx	lr
        status = HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	4770      	bx	lr
      status = HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	4770      	bx	lr
        status = HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
 8001aac:	4770      	bx	lr
        status = HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
 8001ab0:	4770      	bx	lr
      status = HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_DMA_Init>:
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fac8 	bl	8001050 <HAL_GetTick>
  if(hdma == NULL)
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_DMA_Init+0xc4>
 8001ac4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	f012 0f01 	tst.w	r2, #1
 8001ae4:	d00a      	beq.n	8001afc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae6:	f7ff fab3 	bl	8001050 <HAL_GetTick>
 8001aea:	1b40      	subs	r0, r0, r5
 8001aec:	2805      	cmp	r0, #5
 8001aee:	d9f5      	bls.n	8001adc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af0:	2320      	movs	r3, #32
 8001af2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af4:	2003      	movs	r0, #3
 8001af6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001afc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001afe:	4820      	ldr	r0, [pc, #128]	; (8001b80 <HAL_DMA_Init+0xc8>)
 8001b00:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	6861      	ldr	r1, [r4, #4]
 8001b04:	68a2      	ldr	r2, [r4, #8]
 8001b06:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	6921      	ldr	r1, [r4, #16]
 8001b0e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b10:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	69a1      	ldr	r1, [r4, #24]
 8001b16:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b18:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1c:	6a21      	ldr	r1, [r4, #32]
 8001b1e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b20:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b24:	2904      	cmp	r1, #4
 8001b26:	d01e      	beq.n	8001b66 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001b28:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b2a:	6826      	ldr	r6, [r4, #0]
 8001b2c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b2e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b34:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d107      	bne.n	8001b4a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b3c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b40:	b11b      	cbz	r3, 8001b4a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff ff70 	bl	8001a28 <DMA_CheckFifoParam>
 8001b48:	b990      	cbnz	r0, 8001b70 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001b4a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff ff4f 	bl	80019f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b54:	233f      	movs	r3, #63	; 0x3f
 8001b56:	4093      	lsls	r3, r2
 8001b58:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001b64:	e7c9      	b.n	8001afa <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b6a:	4301      	orrs	r1, r0
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	e7db      	b.n	8001b28 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b74:	2001      	movs	r0, #1
 8001b76:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001b7a:	e7be      	b.n	8001afa <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7bc      	b.n	8001afa <HAL_DMA_Init+0x42>
 8001b80:	f010803f 	.word	0xf010803f

08001b84 <HAL_DMA_Start_IT>:
{
 8001b84:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001b88:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001b8c:	2c01      	cmp	r4, #1
 8001b8e:	d031      	beq.n	8001bf4 <HAL_DMA_Start_IT+0x70>
 8001b90:	2401      	movs	r4, #1
 8001b92:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b96:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001b9a:	b2e4      	uxtb	r4, r4
 8001b9c:	2c01      	cmp	r4, #1
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001ba6:	2002      	movs	r0, #2
}
 8001ba8:	bd38      	pop	{r3, r4, r5, pc}
 8001baa:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	2002      	movs	r0, #2
 8001bae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff ff04 	bl	80019c4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bbe:	233f      	movs	r3, #63	; 0x3f
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f043 0316 	orr.w	r3, r3, #22
 8001bcc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6953      	ldr	r3, [r2, #20]
 8001bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd6:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bda:	b123      	cbz	r3, 8001be6 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e7d9      	b.n	8001ba8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	e7d7      	b.n	8001ba8 <HAL_DMA_Start_IT+0x24>

08001bf8 <HAL_DMA_IRQHandler>:
{
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_DMA_IRQHandler+0x1d4>)
 8001c04:	681d      	ldr	r5, [r3, #0]
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_DMA_IRQHandler+0x1d8>)
 8001c08:	fba3 3505 	umull	r3, r5, r3, r5
 8001c0c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001c10:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c14:	2308      	movs	r3, #8
 8001c16:	4093      	lsls	r3, r2
 8001c18:	4233      	tst	r3, r6
 8001c1a:	d010      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1c:	6803      	ldr	r3, [r0, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f012 0f04 	tst.w	r2, #4
 8001c24:	d00b      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f022 0204 	bic.w	r2, r2, #4
 8001c2c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c30:	2308      	movs	r3, #8
 8001c32:	4093      	lsls	r3, r2
 8001c34:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c40:	2301      	movs	r3, #1
 8001c42:	4093      	lsls	r3, r2
 8001c44:	4233      	tst	r3, r6
 8001c46:	d009      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	6952      	ldr	r2, [r2, #20]
 8001c4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c52:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c5e:	2304      	movs	r3, #4
 8001c60:	4093      	lsls	r3, r2
 8001c62:	4233      	tst	r3, r6
 8001c64:	d009      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c66:	6822      	ldr	r2, [r4, #0]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f012 0f02 	tst.w	r2, #2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c70:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	4233      	tst	r3, r6
 8001c82:	d024      	beq.n	8001cce <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f012 0f08 	tst.w	r2, #8
 8001c8c:	d01f      	beq.n	8001cce <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c8e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001c98:	d00d      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ca0:	d104      	bne.n	8001cac <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca4:	b19b      	cbz	r3, 8001cce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4798      	blx	r3
 8001caa:	e010      	b.n	8001cce <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cae:	b173      	cbz	r3, 8001cce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4798      	blx	r3
 8001cb4:	e00b      	b.n	8001cce <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001cbc:	d103      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc8:	b10b      	cbz	r3, 8001cce <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	4233      	tst	r3, r6
 8001cd6:	d055      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f012 0f10 	tst.w	r2, #16
 8001ce0:	d050      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ce2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ce4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001cf6:	d033      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001cfe:	d12a      	bne.n	8001d56 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03e      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001d06:	4620      	mov	r0, r4
 8001d08:	4798      	blx	r3
 8001d0a:	e03b      	b.n	8001d84 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f023 0316 	bic.w	r3, r3, #22
 8001d14:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	6953      	ldr	r3, [r2, #20]
 8001d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d1e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d22:	b1a3      	cbz	r3, 8001d4e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f023 0308 	bic.w	r3, r3, #8
 8001d2c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d30:	233f      	movs	r3, #63	; 0x3f
 8001d32:	4093      	lsls	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001d36:	2300      	movs	r3, #0
 8001d38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001d42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03f      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4798      	blx	r3
 8001d4c:	e03c      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e7      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x12c>
 8001d54:	e7eb      	b.n	8001d2e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001d56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d58:	b1a3      	cbz	r3, 8001d84 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4798      	blx	r3
 8001d5e:	e011      	b.n	8001d84 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d66:	d109      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f022 0210 	bic.w	r2, r2, #16
 8001d6e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001d70:	2300      	movs	r3, #0
 8001d72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d7e:	b10b      	cbz	r3, 8001d84 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001d80:	4620      	mov	r0, r4
 8001d82:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d86:	b1fb      	cbz	r3, 8001dc8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d8a:	f013 0f01 	tst.w	r3, #1
 8001d8e:	d017      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d90:	2305      	movs	r3, #5
 8001d92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001da0:	9b01      	ldr	r3, [sp, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d804      	bhi.n	8001db4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f013 0f01 	tst.w	r3, #1
 8001db2:	d1f5      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001db4:	2300      	movs	r3, #0
 8001db6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001dc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dc2:	b10b      	cbz	r3, 8001dc8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4798      	blx	r3
}
 8001dc8:	b003      	add	sp, #12
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	1b4e81b5 	.word	0x1b4e81b5

08001dd4 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001dd4:	b338      	cbz	r0, 8001e26 <HAL_DMA2D_Init+0x52>
{
 8001dd6:	b510      	push	{r4, lr}
 8001dd8:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001dda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dde:	b1eb      	cbz	r3, 8001e1c <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001de0:	2302      	movs	r3, #2
 8001de2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001dee:	6861      	ldr	r1, [r4, #4]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001df8:	f023 0307 	bic.w	r3, r3, #7
 8001dfc:	68a1      	ldr	r1, [r4, #8]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_DMA2D_Init+0x58>)
 8001e08:	400b      	ands	r3, r1
 8001e0a:	68e1      	ldr	r1, [r4, #12]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e10:	2000      	movs	r0, #0
 8001e12:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001e1a:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001e1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001e20:	f002 fc26 	bl	8004670 <HAL_DMA2D_MspInit>
 8001e24:	e7dc      	b.n	8001de0 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	ffffc000 	.word	0xffffc000

08001e30 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d059      	beq.n	8001eec <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001e38:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e46:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	1c8b      	adds	r3, r1, #2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	58c3      	ldr	r3, [r0, r3]
 8001e52:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e56:	3a09      	subs	r2, #9
 8001e58:	2a01      	cmp	r2, #1
 8001e5a:	d91e      	bls.n	8001e9a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e5c:	1c8a      	adds	r2, r1, #2
 8001e5e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001e62:	6852      	ldr	r2, [r2, #4]
 8001e64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e68:	bb41      	cbnz	r1, 8001ebc <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e6a:	6804      	ldr	r4, [r0, #0]
 8001e6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001e70:	402a      	ands	r2, r5
 8001e72:	4313      	orrs	r3, r2
 8001e74:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e76:	6802      	ldr	r2, [r0, #0]
 8001e78:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001e7c:	699c      	ldr	r4, [r3, #24]
 8001e7e:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	3b09      	subs	r3, #9
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d910      	bls.n	8001eaa <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001e94:	4618      	mov	r0, r3
}
 8001e96:	bc30      	pop	{r4, r5}
 8001e98:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e9a:	1c8a      	adds	r2, r1, #2
 8001e9c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001ea0:	6852      	ldr	r2, [r2, #4]
 8001ea2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	e7de      	b.n	8001e68 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001eaa:	3102      	adds	r1, #2
 8001eac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001eb0:	684b      	ldr	r3, [r1, #4]
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001eb8:	6293      	str	r3, [r2, #40]	; 0x28
 8001eba:	e7e5      	b.n	8001e88 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ebc:	6804      	ldr	r4, [r0, #0]
 8001ebe:	69e5      	ldr	r5, [r4, #28]
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001ec2:	402a      	ands	r2, r5
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001ece:	699c      	ldr	r4, [r3, #24]
 8001ed0:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	3b09      	subs	r3, #9
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d8d6      	bhi.n	8001e88 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001eda:	3102      	adds	r1, #2
 8001edc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001ee0:	684b      	ldr	r3, [r1, #4]
 8001ee2:	6802      	ldr	r2, [r0, #0]
 8001ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	e7cd      	b.n	8001e88 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001eec:	2002      	movs	r0, #2
}
 8001eee:	4770      	bx	lr
 8001ef0:	00fcfff0 	.word	0x00fcfff0

08001ef4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f200 80e2 	bhi.w	80020c0 <HAL_GPIO_Init+0x1cc>
{
 8001efc:	b4f0      	push	{r4, r5, r6, r7}
 8001efe:	b082      	sub	sp, #8
 8001f00:	e039      	b.n	8001f76 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f02:	2209      	movs	r2, #9
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 8001f06:	2200      	movs	r2, #0
 8001f08:	40b2      	lsls	r2, r6
 8001f0a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f0c:	3402      	adds	r4, #2
 8001f0e:	4e6d      	ldr	r6, [pc, #436]	; (80020c4 <HAL_GPIO_Init+0x1d0>)
 8001f10:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f14:	4a6c      	ldr	r2, [pc, #432]	; (80020c8 <HAL_GPIO_Init+0x1d4>)
 8001f16:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	43ea      	mvns	r2, r5
 8001f1a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1e:	684f      	ldr	r7, [r1, #4]
 8001f20:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001f24:	d001      	beq.n	8001f2a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001f26:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001f2a:	4c67      	ldr	r4, [pc, #412]	; (80020c8 <HAL_GPIO_Init+0x1d4>)
 8001f2c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001f2e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f34:	684f      	ldr	r7, [r1, #4]
 8001f36:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001f3a:	d001      	beq.n	8001f40 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001f3c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001f40:	4c61      	ldr	r4, [pc, #388]	; (80020c8 <HAL_GPIO_Init+0x1d4>)
 8001f42:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f44:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4a:	684f      	ldr	r7, [r1, #4]
 8001f4c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001f50:	d001      	beq.n	8001f56 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001f52:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001f56:	4c5c      	ldr	r4, [pc, #368]	; (80020c8 <HAL_GPIO_Init+0x1d4>)
 8001f58:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001f5a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5e:	684e      	ldr	r6, [r1, #4]
 8001f60:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001f64:	d001      	beq.n	8001f6a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001f66:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001f6a:	4c57      	ldr	r4, [pc, #348]	; (80020c8 <HAL_GPIO_Init+0x1d4>)
 8001f6c:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f6e:	3301      	adds	r3, #1
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	f200 80a2 	bhi.w	80020ba <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	680c      	ldr	r4, [r1, #0]
 8001f7c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001f80:	42aa      	cmp	r2, r5
 8001f82:	d1f4      	bne.n	8001f6e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	684c      	ldr	r4, [r1, #4]
 8001f86:	2c12      	cmp	r4, #18
 8001f88:	bf18      	it	ne
 8001f8a:	2c02      	cmpne	r4, #2
 8001f8c:	d110      	bne.n	8001fb0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8001f8e:	08de      	lsrs	r6, r3, #3
 8001f90:	3608      	adds	r6, #8
 8001f92:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f96:	f003 0407 	and.w	r4, r3, #7
 8001f9a:	00a7      	lsls	r7, r4, #2
 8001f9c:	240f      	movs	r4, #15
 8001f9e:	40bc      	lsls	r4, r7
 8001fa0:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fa4:	690c      	ldr	r4, [r1, #16]
 8001fa6:	40bc      	lsls	r4, r7
 8001fa8:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8001fac:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001fb0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb2:	005f      	lsls	r7, r3, #1
 8001fb4:	2603      	movs	r6, #3
 8001fb6:	40be      	lsls	r6, r7
 8001fb8:	43f6      	mvns	r6, r6
 8001fba:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fbe:	684c      	ldr	r4, [r1, #4]
 8001fc0:	f004 0403 	and.w	r4, r4, #3
 8001fc4:	40bc      	lsls	r4, r7
 8001fc6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001fca:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fcc:	684c      	ldr	r4, [r1, #4]
 8001fce:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8001fd2:	2c11      	cmp	r4, #17
 8001fd4:	bf18      	it	ne
 8001fd6:	f1bc 0f01 	cmpne.w	ip, #1
 8001fda:	d901      	bls.n	8001fe0 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fdc:	2c12      	cmp	r4, #18
 8001fde:	d111      	bne.n	8002004 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8001fe0:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe2:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fe6:	68cc      	ldr	r4, [r1, #12]
 8001fe8:	40bc      	lsls	r4, r7
 8001fea:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001fee:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ff0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff2:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ff6:	684c      	ldr	r4, [r1, #4]
 8001ff8:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8002002:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002004:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002006:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002008:	688a      	ldr	r2, [r1, #8]
 800200a:	40ba      	lsls	r2, r7
 800200c:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800200e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002010:	684a      	ldr	r2, [r1, #4]
 8002012:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002016:	d0aa      	beq.n	8001f6e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <HAL_GPIO_Init+0x1d8>)
 800201a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800201c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002020:	6454      	str	r4, [r2, #68]	; 0x44
 8002022:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002024:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800202c:	089c      	lsrs	r4, r3, #2
 800202e:	1ca6      	adds	r6, r4, #2
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <HAL_GPIO_Init+0x1d0>)
 8002032:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002036:	f003 0203 	and.w	r2, r3, #3
 800203a:	0096      	lsls	r6, r2, #2
 800203c:	220f      	movs	r2, #15
 800203e:	40b2      	lsls	r2, r6
 8002040:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_GPIO_Init+0x1dc>)
 8002046:	4290      	cmp	r0, r2
 8002048:	f43f af5d 	beq.w	8001f06 <HAL_GPIO_Init+0x12>
 800204c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002050:	4290      	cmp	r0, r2
 8002052:	d022      	beq.n	800209a <HAL_GPIO_Init+0x1a6>
 8002054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002058:	4290      	cmp	r0, r2
 800205a:	d020      	beq.n	800209e <HAL_GPIO_Init+0x1aa>
 800205c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002060:	4290      	cmp	r0, r2
 8002062:	d01e      	beq.n	80020a2 <HAL_GPIO_Init+0x1ae>
 8002064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002068:	4290      	cmp	r0, r2
 800206a:	d01c      	beq.n	80020a6 <HAL_GPIO_Init+0x1b2>
 800206c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002070:	4290      	cmp	r0, r2
 8002072:	d01a      	beq.n	80020aa <HAL_GPIO_Init+0x1b6>
 8002074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002078:	4290      	cmp	r0, r2
 800207a:	d018      	beq.n	80020ae <HAL_GPIO_Init+0x1ba>
 800207c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002080:	4290      	cmp	r0, r2
 8002082:	d016      	beq.n	80020b2 <HAL_GPIO_Init+0x1be>
 8002084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002088:	4290      	cmp	r0, r2
 800208a:	d014      	beq.n	80020b6 <HAL_GPIO_Init+0x1c2>
 800208c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002090:	4290      	cmp	r0, r2
 8002092:	f43f af36 	beq.w	8001f02 <HAL_GPIO_Init+0xe>
 8002096:	220a      	movs	r2, #10
 8002098:	e736      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 800209a:	2201      	movs	r2, #1
 800209c:	e734      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 800209e:	2202      	movs	r2, #2
 80020a0:	e732      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020a2:	2203      	movs	r2, #3
 80020a4:	e730      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020a6:	2204      	movs	r2, #4
 80020a8:	e72e      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020aa:	2205      	movs	r2, #5
 80020ac:	e72c      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020ae:	2206      	movs	r2, #6
 80020b0:	e72a      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020b2:	2207      	movs	r2, #7
 80020b4:	e728      	b.n	8001f08 <HAL_GPIO_Init+0x14>
 80020b6:	2208      	movs	r2, #8
 80020b8:	e726      	b.n	8001f08 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80020ba:	b002      	add	sp, #8
 80020bc:	bcf0      	pop	{r4, r5, r6, r7}
 80020be:	4770      	bx	lr
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40013c00 	.word	0x40013c00
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d4:	6903      	ldr	r3, [r0, #16]
 80020d6:	4219      	tst	r1, r3
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80020dc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80020de:	2001      	movs	r0, #1
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e2:	b912      	cbnz	r2, 80020ea <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020e4:	0409      	lsls	r1, r1, #16
 80020e6:	6181      	str	r1, [r0, #24]
  }
}
 80020e8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	6181      	str	r1, [r0, #24]
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4203      	tst	r3, r0
 80020f8:	d100      	bne.n	80020fc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80020fa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002100:	f002 f934 	bl	800436c <HAL_GPIO_EXTI_Callback>
}
 8002104:	e7f9      	b.n	80020fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002106:	bf00      	nop
 8002108:	40013c00 	.word	0x40013c00

0800210c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800210c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800210e:	684d      	ldr	r5, [r1, #4]
 8002110:	6804      	ldr	r4, [r0, #0]
 8002112:	68e3      	ldr	r3, [r4, #12]
 8002114:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002118:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800211a:	01d2      	lsls	r2, r2, #7
 800211c:	4414      	add	r4, r2
 800211e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002122:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002126:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800212a:	680b      	ldr	r3, [r1, #0]
 800212c:	6804      	ldr	r4, [r0, #0]
 800212e:	68e6      	ldr	r6, [r4, #12]
 8002130:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002134:	4433      	add	r3, r6
 8002136:	3301      	adds	r3, #1
 8002138:	4414      	add	r4, r2
 800213a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800213e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002142:	68cd      	ldr	r5, [r1, #12]
 8002144:	6804      	ldr	r4, [r0, #0]
 8002146:	68e3      	ldr	r3, [r4, #12]
 8002148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800214e:	4414      	add	r4, r2
 8002150:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002154:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002158:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800215c:	688b      	ldr	r3, [r1, #8]
 800215e:	6804      	ldr	r4, [r0, #0]
 8002160:	68e6      	ldr	r6, [r4, #12]
 8002162:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002166:	4433      	add	r3, r6
 8002168:	3301      	adds	r3, #1
 800216a:	4414      	add	r4, r2
 800216c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002170:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	4413      	add	r3, r2
 8002178:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800217c:	f024 0407 	bic.w	r4, r4, #7
 8002180:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	4413      	add	r3, r2
 8002188:	690c      	ldr	r4, [r1, #16]
 800218a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800218e:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002192:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002196:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002198:	6805      	ldr	r5, [r0, #0]
 800219a:	4415      	add	r5, r2
 800219c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80021a0:	2400      	movs	r4, #0
 80021a2:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80021a6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80021aa:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80021ae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80021b2:	6805      	ldr	r5, [r0, #0]
 80021b4:	4415      	add	r5, r2
 80021b6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80021ba:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80021c6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80021ca:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80021ce:	6803      	ldr	r3, [r0, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	694d      	ldr	r5, [r1, #20]
 80021d4:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80021e0:	4d2d      	ldr	r5, [pc, #180]	; (8002298 <LTDC_SetConfig+0x18c>)
 80021e2:	4035      	ands	r5, r6
 80021e4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80021e8:	69cd      	ldr	r5, [r1, #28]
 80021ea:	6a0e      	ldr	r6, [r1, #32]
 80021ec:	6803      	ldr	r3, [r0, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4335      	orrs	r5, r6
 80021f2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80021fe:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002202:	6803      	ldr	r3, [r0, #0]
 8002204:	4413      	add	r3, r2
 8002206:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002208:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800220c:	690b      	ldr	r3, [r1, #16]
 800220e:	b16b      	cbz	r3, 800222c <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002210:	2b01      	cmp	r3, #1
 8002212:	d03a      	beq.n	800228a <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002214:	2b02      	cmp	r3, #2
 8002216:	bf18      	it	ne
 8002218:	2b04      	cmpne	r3, #4
 800221a:	d038      	beq.n	800228e <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800221c:	2b03      	cmp	r3, #3
 800221e:	d038      	beq.n	8002292 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002220:	2b07      	cmp	r3, #7
 8002222:	d001      	beq.n	8002228 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002224:	2301      	movs	r3, #1
 8002226:	e002      	b.n	800222e <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002228:	2302      	movs	r3, #2
 800222a:	e000      	b.n	800222e <LTDC_SetConfig+0x122>
    tmp = 4U;
 800222c:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800222e:	6804      	ldr	r4, [r0, #0]
 8002230:	4414      	add	r4, r2
 8002232:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8002236:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800223a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800223e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002240:	fb03 f504 	mul.w	r5, r3, r4
 8002244:	684c      	ldr	r4, [r1, #4]
 8002246:	680e      	ldr	r6, [r1, #0]
 8002248:	1ba4      	subs	r4, r4, r6
 800224a:	fb03 f304 	mul.w	r3, r3, r4
 800224e:	3303      	adds	r3, #3
 8002250:	6804      	ldr	r4, [r0, #0]
 8002252:	4414      	add	r4, r2
 8002254:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002258:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	4413      	add	r3, r2
 8002260:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8002264:	4c0d      	ldr	r4, [pc, #52]	; (800229c <LTDC_SetConfig+0x190>)
 8002266:	402c      	ands	r4, r5
 8002268:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800226c:	6803      	ldr	r3, [r0, #0]
 800226e:	4413      	add	r3, r2
 8002270:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002272:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002276:	6803      	ldr	r3, [r0, #0]
 8002278:	441a      	add	r2, r3
 800227a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8002286:	bcf0      	pop	{r4, r5, r6, r7}
 8002288:	4770      	bx	lr
    tmp = 3U;
 800228a:	2303      	movs	r3, #3
 800228c:	e7cf      	b.n	800222e <LTDC_SetConfig+0x122>
    tmp = 2U;
 800228e:	2302      	movs	r3, #2
 8002290:	e7cd      	b.n	800222e <LTDC_SetConfig+0x122>
 8002292:	2302      	movs	r3, #2
 8002294:	e7cb      	b.n	800222e <LTDC_SetConfig+0x122>
 8002296:	bf00      	nop
 8002298:	fffff8f8 	.word	0xfffff8f8
 800229c:	fffff800 	.word	0xfffff800

080022a0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d072      	beq.n	800238a <HAL_LTDC_Init+0xea>
{
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80022a8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d067      	beq.n	8002380 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6993      	ldr	r3, [r2, #24]
 80022ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022be:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022c0:	6821      	ldr	r1, [r4, #0]
 80022c2:	698a      	ldr	r2, [r1, #24]
 80022c4:	6863      	ldr	r3, [r4, #4]
 80022c6:	68a0      	ldr	r0, [r4, #8]
 80022c8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80022ca:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022cc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80022ce:	6920      	ldr	r0, [r4, #16]
 80022d0:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022d2:	4313      	orrs	r3, r2
 80022d4:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80022d6:	6821      	ldr	r1, [r4, #0]
 80022d8:	688a      	ldr	r2, [r1, #8]
 80022da:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_LTDC_Init+0xf0>)
 80022dc:	401a      	ands	r2, r3
 80022de:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80022e0:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	6882      	ldr	r2, [r0, #8]
 80022e6:	69a1      	ldr	r1, [r4, #24]
 80022e8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022ec:	430a      	orrs	r2, r1
 80022ee:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80022f0:	6821      	ldr	r1, [r4, #0]
 80022f2:	68ca      	ldr	r2, [r1, #12]
 80022f4:	401a      	ands	r2, r3
 80022f6:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80022f8:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	68c2      	ldr	r2, [r0, #12]
 80022fe:	6a21      	ldr	r1, [r4, #32]
 8002300:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002304:	430a      	orrs	r2, r1
 8002306:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002308:	6821      	ldr	r1, [r4, #0]
 800230a:	690a      	ldr	r2, [r1, #16]
 800230c:	401a      	ands	r2, r3
 800230e:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002310:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002312:	6820      	ldr	r0, [r4, #0]
 8002314:	6902      	ldr	r2, [r0, #16]
 8002316:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002318:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800231c:	430a      	orrs	r2, r1
 800231e:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002320:	6821      	ldr	r1, [r4, #0]
 8002322:	694a      	ldr	r2, [r1, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002328:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800232a:	6821      	ldr	r1, [r4, #0]
 800232c:	694b      	ldr	r3, [r1, #20]
 800232e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002330:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002334:	4313      	orrs	r3, r2
 8002336:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002338:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800233c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002340:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002342:	6821      	ldr	r1, [r4, #0]
 8002344:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002346:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800234a:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002350:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002354:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002358:	4303      	orrs	r3, r0
 800235a:	4313      	orrs	r3, r2
 800235c:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002362:	f043 0306 	orr.w	r3, r3, #6
 8002366:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	6993      	ldr	r3, [r2, #24]
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002372:	2000      	movs	r0, #0
 8002374:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002378:	2301      	movs	r3, #1
 800237a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800237e:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002380:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002384:	f002 f98a 	bl	800469c <HAL_LTDC_MspInit>
 8002388:	e792      	b.n	80022b0 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800238a:	2001      	movs	r0, #1
}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	f000f800 	.word	0xf000f800

08002394 <HAL_LTDC_ErrorCallback>:
}
 8002394:	4770      	bx	lr

08002396 <HAL_LTDC_LineEventCallback>:
}
 8002396:	4770      	bx	lr

08002398 <HAL_LTDC_ReloadEventCallback>:
}
 8002398:	4770      	bx	lr

0800239a <HAL_LTDC_IRQHandler>:
{
 800239a:	b570      	push	{r4, r5, r6, lr}
 800239c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800239e:	6803      	ldr	r3, [r0, #0]
 80023a0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80023a2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80023a4:	f015 0f04 	tst.w	r5, #4
 80023a8:	d002      	beq.n	80023b0 <HAL_LTDC_IRQHandler+0x16>
 80023aa:	f016 0f04 	tst.w	r6, #4
 80023ae:	d112      	bne.n	80023d6 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80023b0:	f015 0f02 	tst.w	r5, #2
 80023b4:	d002      	beq.n	80023bc <HAL_LTDC_IRQHandler+0x22>
 80023b6:	f016 0f02 	tst.w	r6, #2
 80023ba:	d121      	bne.n	8002400 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80023bc:	f015 0f01 	tst.w	r5, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_LTDC_IRQHandler+0x2e>
 80023c2:	f016 0f01 	tst.w	r6, #1
 80023c6:	d132      	bne.n	800242e <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80023c8:	f015 0f08 	tst.w	r5, #8
 80023cc:	d002      	beq.n	80023d4 <HAL_LTDC_IRQHandler+0x3a>
 80023ce:	f016 0f08 	tst.w	r6, #8
 80023d2:	d13d      	bne.n	8002450 <HAL_LTDC_IRQHandler+0xb6>
}
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80023d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80023de:	6803      	ldr	r3, [r0, #0]
 80023e0:	2204      	movs	r2, #4
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80023e4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80023f0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80023f4:	2300      	movs	r3, #0
 80023f6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80023fa:	f7ff ffcb 	bl	8002394 <HAL_LTDC_ErrorCallback>
 80023fe:	e7d7      	b.n	80023b0 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002404:	f023 0302 	bic.w	r3, r3, #2
 8002408:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	2202      	movs	r2, #2
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002410:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800241a:	2304      	movs	r3, #4
 800241c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002420:	2300      	movs	r3, #0
 8002422:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ffb4 	bl	8002394 <HAL_LTDC_ErrorCallback>
 800242c:	e7c6      	b.n	80023bc <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800242e:	6822      	ldr	r2, [r4, #0]
 8002430:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	2301      	movs	r3, #1
 800243c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800243e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002442:	2300      	movs	r3, #0
 8002444:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ffa4 	bl	8002396 <HAL_LTDC_LineEventCallback>
 800244e:	e7bb      	b.n	80023c8 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002454:	f023 0308 	bic.w	r3, r3, #8
 8002458:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	2208      	movs	r2, #8
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002460:	2301      	movs	r3, #1
 8002462:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002466:	2300      	movs	r3, #0
 8002468:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff ff93 	bl	8002398 <HAL_LTDC_ReloadEventCallback>
}
 8002472:	e7af      	b.n	80023d4 <HAL_LTDC_IRQHandler+0x3a>

08002474 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8002474:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d027      	beq.n	80024cc <HAL_LTDC_ConfigLayer+0x58>
{
 800247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002480:	4694      	mov	ip, r2
 8002482:	460f      	mov	r7, r1
 8002484:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8002486:	f04f 0801 	mov.w	r8, #1
 800248a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002494:	2434      	movs	r4, #52	; 0x34
 8002496:	fb04 0402 	mla	r4, r4, r2, r0
 800249a:	3438      	adds	r4, #56	; 0x38
 800249c:	460d      	mov	r5, r1
 800249e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	682b      	ldr	r3, [r5, #0]
 80024ac:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024ae:	4662      	mov	r2, ip
 80024b0:	4639      	mov	r1, r7
 80024b2:	4630      	mov	r0, r6
 80024b4:	f7ff fe2a 	bl	800210c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024b8:	6833      	ldr	r3, [r6, #0]
 80024ba:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80024be:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80024c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 80024cc:	2002      	movs	r0, #2
}
 80024ce:	4770      	bx	lr

080024d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024d0:	b510      	push	{r4, lr}
 80024d2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_PWREx_EnableOverDrive+0x74>)
 80024d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024e8:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_PWREx_EnableOverDrive+0x78>)
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f2:	f7fe fdad 	bl	8001050 <HAL_GetTick>
 80024f6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_PWREx_EnableOverDrive+0x78>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002502:	f7fe fda5 	bl	8001050 <HAL_GetTick>
 8002506:	1b00      	subs	r0, r0, r4
 8002508:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800250c:	d9f4      	bls.n	80024f8 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800250e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002510:	b002      	add	sp, #8
 8002512:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_PWREx_EnableOverDrive+0x78>)
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800251e:	f7fe fd97 	bl	8001050 <HAL_GetTick>
 8002522:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_PWREx_EnableOverDrive+0x78>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800252c:	d107      	bne.n	800253e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800252e:	f7fe fd8f 	bl	8001050 <HAL_GetTick>
 8002532:	1b00      	subs	r0, r0, r4
 8002534:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002538:	d9f4      	bls.n	8002524 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
 800253c:	e7e8      	b.n	8002510 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	e7e6      	b.n	8002510 <HAL_PWREx_EnableOverDrive+0x40>
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	2800      	cmp	r0, #0
 800254e:	f000 81db 	beq.w	8002908 <HAL_RCC_OscConfig+0x3bc>
{
 8002552:	b570      	push	{r4, r5, r6, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002558:	6803      	ldr	r3, [r0, #0]
 800255a:	f013 0f01 	tst.w	r3, #1
 800255e:	d029      	beq.n	80025b4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	4ba2      	ldr	r3, [pc, #648]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d01a      	beq.n	80025a2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256c:	4b9f      	ldr	r3, [pc, #636]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00f      	beq.n	8002598 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	6863      	ldr	r3, [r4, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d040      	beq.n	8002602 <HAL_RCC_OscConfig+0xb6>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d154      	bne.n	800262e <HAL_RCC_OscConfig+0xe2>
 8002584:	4b99      	ldr	r3, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e039      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002598:	4b94      	ldr	r3, [pc, #592]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80025a0:	d0ea      	beq.n	8002578 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025aa:	d003      	beq.n	80025b4 <HAL_RCC_OscConfig+0x68>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 81ac 	beq.w	800290c <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f013 0f02 	tst.w	r3, #2
 80025ba:	d075      	beq.n	80026a8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025bc:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f013 0f0c 	tst.w	r3, #12
 80025c4:	d05e      	beq.n	8002684 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d053      	beq.n	800267a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d2:	68e3      	ldr	r3, [r4, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 808a 	beq.w	80026ee <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4a84      	ldr	r2, [pc, #528]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fd34 	bl	8001050 <HAL_GetTick>
 80025e8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f013 0f02 	tst.w	r3, #2
 80025f2:	d173      	bne.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fd2c 	bl	8001050 <HAL_GetTick>
 80025f8:	1b40      	subs	r0, r0, r5
 80025fa:	2802      	cmp	r0, #2
 80025fc:	d9f5      	bls.n	80025ea <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80025fe:	2003      	movs	r0, #3
 8002600:	e187      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	b32b      	cbz	r3, 800265c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002610:	f7fe fd1e 	bl	8001050 <HAL_GetTick>
 8002614:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b75      	ldr	r3, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800261e:	d1c9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fd16 	bl	8001050 <HAL_GetTick>
 8002624:	1b40      	subs	r0, r0, r5
 8002626:	2864      	cmp	r0, #100	; 0x64
 8002628:	d9f5      	bls.n	8002616 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
 800262c:	e171      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002632:	d009      	beq.n	8002648 <HAL_RCC_OscConfig+0xfc>
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e7e1      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e7d7      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800265c:	f7fe fcf8 	bl	8001050 <HAL_GetTick>
 8002660:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800266a:	d0a3      	beq.n	80025b4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fcf0 	bl	8001050 <HAL_GetTick>
 8002670:	1b40      	subs	r0, r0, r5
 8002672:	2864      	cmp	r0, #100	; 0x64
 8002674:	d9f5      	bls.n	8002662 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002676:	2003      	movs	r0, #3
 8002678:	e14b      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002682:	d1a6      	bne.n	80025d2 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f013 0f02 	tst.w	r3, #2
 800268c:	d004      	beq.n	8002698 <HAL_RCC_OscConfig+0x14c>
 800268e:	68e3      	ldr	r3, [r4, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
 8002696:	e13c      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026a0:	6921      	ldr	r1, [r4, #16]
 80026a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026a6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	f013 0f08 	tst.w	r3, #8
 80026ae:	d046      	beq.n	800273e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b0:	6963      	ldr	r3, [r4, #20]
 80026b2:	b383      	cbz	r3, 8002716 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80026b6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fcc7 	bl	8001050 <HAL_GetTick>
 80026c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c4:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	f013 0f02 	tst.w	r3, #2
 80026cc:	d137      	bne.n	800273e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7fe fcbf 	bl	8001050 <HAL_GetTick>
 80026d2:	1b40      	subs	r0, r0, r5
 80026d4:	2802      	cmp	r0, #2
 80026d6:	d9f5      	bls.n	80026c4 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80026d8:	2003      	movs	r0, #3
 80026da:	e11a      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026e4:	6921      	ldr	r1, [r4, #16]
 80026e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e7dc      	b.n	80026a8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026f8:	f7fe fcaa 	bl	8001050 <HAL_GetTick>
 80026fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f013 0f02 	tst.w	r3, #2
 8002706:	d0cf      	beq.n	80026a8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fca2 	bl	8001050 <HAL_GetTick>
 800270c:	1b40      	subs	r0, r0, r5
 800270e:	2802      	cmp	r0, #2
 8002710:	d9f5      	bls.n	80026fe <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
 8002714:	e0fd      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4a35      	ldr	r2, [pc, #212]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002718:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fc96 	bl	8001050 <HAL_GetTick>
 8002724:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	f013 0f02 	tst.w	r3, #2
 800272e:	d006      	beq.n	800273e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002730:	f7fe fc8e 	bl	8001050 <HAL_GetTick>
 8002734:	1b40      	subs	r0, r0, r5
 8002736:	2802      	cmp	r0, #2
 8002738:	d9f5      	bls.n	8002726 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
 800273c:	e0e9      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f013 0f04 	tst.w	r3, #4
 8002744:	d07e      	beq.n	8002844 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800274e:	d11e      	bne.n	800278e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002764:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0x2a4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800276e:	d010      	beq.n	8002792 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	68a3      	ldr	r3, [r4, #8]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d021      	beq.n	80027ba <HAL_RCC_OscConfig+0x26e>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2a8>
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 800277c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	671a      	str	r2, [r3, #112]	; 0x70
 8002784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	671a      	str	r2, [r3, #112]	; 0x70
 800278c:	e01a      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800278e:	2500      	movs	r5, #0
 8002790:	e7e9      	b.n	8002766 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_RCC_OscConfig+0x2a4>)
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800279c:	f7fe fc58 	bl	8001050 <HAL_GetTick>
 80027a0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCC_OscConfig+0x2a4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027aa:	d1e1      	bne.n	8002770 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7fe fc50 	bl	8001050 <HAL_GetTick>
 80027b0:	1b80      	subs	r0, r0, r6
 80027b2:	2864      	cmp	r0, #100	; 0x64
 80027b4:	d9f5      	bls.n	80027a2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
 80027b8:	e0ab      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80027bc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c4:	68a3      	ldr	r3, [r4, #8]
 80027c6:	b35b      	cbz	r3, 8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fc42 	bl	8001050 <HAL_GetTick>
 80027cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCC_OscConfig+0x2a0>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f013 0f02 	tst.w	r3, #2
 80027d6:	d134      	bne.n	8002842 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe fc3a 	bl	8001050 <HAL_GetTick>
 80027dc:	1b80      	subs	r0, r0, r6
 80027de:	f241 3388 	movw	r3, #5000	; 0x1388
 80027e2:	4298      	cmp	r0, r3
 80027e4:	d9f3      	bls.n	80027ce <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80027e6:	2003      	movs	r0, #3
 80027e8:	e093      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d009      	beq.n	800280c <HAL_RCC_OscConfig+0x2c0>
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 80027fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	671a      	str	r2, [r3, #112]	; 0x70
 8002802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002804:	f022 0204 	bic.w	r2, r2, #4
 8002808:	671a      	str	r2, [r3, #112]	; 0x70
 800280a:	e7db      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 800280e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002810:	f042 0204 	orr.w	r2, r2, #4
 8002814:	671a      	str	r2, [r3, #112]	; 0x70
 8002816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	671a      	str	r2, [r3, #112]	; 0x70
 800281e:	e7d1      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fc16 	bl	8001050 <HAL_GetTick>
 8002824:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f013 0f02 	tst.w	r3, #2
 800282e:	d008      	beq.n	8002842 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fc0e 	bl	8001050 <HAL_GetTick>
 8002834:	1b80      	subs	r0, r0, r6
 8002836:	f241 3388 	movw	r3, #5000	; 0x1388
 800283a:	4298      	cmp	r0, r3
 800283c:	d9f3      	bls.n	8002826 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800283e:	2003      	movs	r0, #3
 8002840:	e067      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002842:	b9f5      	cbnz	r5, 8002882 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002844:	69a3      	ldr	r3, [r4, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d062      	beq.n	8002910 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	f002 020c 	and.w	r2, r2, #12
 8002852:	2a08      	cmp	r2, #8
 8002854:	d05f      	beq.n	8002916 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	2b02      	cmp	r3, #2
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fbf4 	bl	8001050 <HAL_GetTick>
 8002868:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002872:	d047      	beq.n	8002904 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fbec 	bl	8001050 <HAL_GetTick>
 8002878:	1b00      	subs	r0, r0, r4
 800287a:	2802      	cmp	r0, #2
 800287c:	d9f5      	bls.n	800286a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800287e:	2003      	movs	r0, #3
 8002880:	e047      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002882:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 8002884:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6413      	str	r3, [r2, #64]	; 0x40
 800288c:	e7da      	b.n	8002844 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002898:	f7fe fbda 	bl	8001050 <HAL_GetTick>
 800289c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028a6:	d006      	beq.n	80028b6 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fbd2 	bl	8001050 <HAL_GetTick>
 80028ac:	1b40      	subs	r0, r0, r5
 80028ae:	2802      	cmp	r0, #2
 80028b0:	d9f5      	bls.n	800289e <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80028b2:	2003      	movs	r0, #3
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b6:	69e3      	ldr	r3, [r4, #28]
 80028b8:	6a22      	ldr	r2, [r4, #32]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028c4:	0852      	lsrs	r2, r2, #1
 80028c6:	3a01      	subs	r2, #1
 80028c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d6:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 80028d8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80028da:	6813      	ldr	r3, [r2, #0]
 80028dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028e2:	f7fe fbb5 	bl	8001050 <HAL_GetTick>
 80028e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x3d0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fbad 	bl	8001050 <HAL_GetTick>
 80028f6:	1b00      	subs	r0, r0, r4
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d9f5      	bls.n	80028e8 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002900:	2000      	movs	r0, #0
 8002902:	e006      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
 8002904:	2000      	movs	r0, #0
 8002906:	e004      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8002908:	2001      	movs	r0, #1
}
 800290a:	4770      	bx	lr
        return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8002910:	2000      	movs	r0, #0
}
 8002912:	b002      	add	sp, #8
 8002914:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002916:	2001      	movs	r0, #1
 8002918:	e7fb      	b.n	8002912 <HAL_RCC_OscConfig+0x3c6>
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d044      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x96>
 800292c:	2b08      	cmp	r3, #8
 800292e:	d001      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4823      	ldr	r0, [pc, #140]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002932:	4770      	bx	lr
{
 8002934:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002946:	d013      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002950:	2300      	movs	r3, #0
 8002952:	481c      	ldr	r0, [pc, #112]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002954:	fba1 0100 	umull	r0, r1, r1, r0
 8002958:	f7fe f9b6 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002964:	3301      	adds	r3, #1
 8002966:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002968:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800296c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002978:	461e      	mov	r6, r3
 800297a:	2700      	movs	r7, #0
 800297c:	015c      	lsls	r4, r3, #5
 800297e:	2500      	movs	r5, #0
 8002980:	1ae4      	subs	r4, r4, r3
 8002982:	eb65 0507 	sbc.w	r5, r5, r7
 8002986:	01a9      	lsls	r1, r5, #6
 8002988:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800298c:	01a0      	lsls	r0, r4, #6
 800298e:	1b00      	subs	r0, r0, r4
 8002990:	eb61 0105 	sbc.w	r1, r1, r5
 8002994:	00cb      	lsls	r3, r1, #3
 8002996:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800299a:	00c4      	lsls	r4, r0, #3
 800299c:	19a0      	adds	r0, r4, r6
 800299e:	eb43 0107 	adc.w	r1, r3, r7
 80029a2:	028b      	lsls	r3, r1, #10
 80029a4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80029a8:	0284      	lsls	r4, r0, #10
 80029aa:	4620      	mov	r0, r4
 80029ac:	4619      	mov	r1, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	f7fe f98a 	bl	8000cc8 <__aeabi_uldivmod>
 80029b4:	e7d2      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80029b6:	4803      	ldr	r0, [pc, #12]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	017d7840 	.word	0x017d7840

080029c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 80a2 	beq.w	8002b12 <HAL_RCC_ClockConfig+0x14a>
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
 80029d0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d2:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x154>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	428b      	cmp	r3, r1
 80029dc:	d20c      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_RCC_ClockConfig+0x154>)
 80029e0:	6813      	ldr	r3, [r2, #0]
 80029e2:	f023 030f 	bic.w	r3, r3, #15
 80029e6:	430b      	orrs	r3, r1
 80029e8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
}
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f013 0f02 	tst.w	r3, #2
 80029fe:	d017      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	f013 0f04 	tst.w	r3, #4
 8002a04:	d004      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a06:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a08:	6893      	ldr	r3, [r2, #8]
 8002a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f013 0f08 	tst.w	r3, #8
 8002a16:	d004      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a18:	4a41      	ldr	r2, [pc, #260]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a1a:	6893      	ldr	r3, [r2, #8]
 8002a1c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a20:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a22:	4a3f      	ldr	r2, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a24:	6893      	ldr	r3, [r2, #8]
 8002a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2a:	68a0      	ldr	r0, [r4, #8]
 8002a2c:	4303      	orrs	r3, r0
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	f013 0f01 	tst.w	r3, #1
 8002a38:	d031      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d025      	beq.n	8002a90 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	f012 0f02 	tst.w	r2, #2
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	f022 0203 	bic.w	r2, r2, #3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a5a:	f7fe faf9 	bl	8001050 <HAL_GetTick>
 8002a5e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	6862      	ldr	r2, [r4, #4]
 8002a6a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a6e:	d016      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe faee 	bl	8001050 <HAL_GetTick>
 8002a74:	1b80      	subs	r0, r0, r6
 8002a76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a7a:	4298      	cmp	r0, r3
 8002a7c:	d9f0      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002a7e:	2003      	movs	r0, #3
 8002a80:	e7b9      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002a8a:	d1e0      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e7b2      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a98:	d1d9      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	e7ab      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_ClockConfig+0x154>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	42ab      	cmp	r3, r5
 8002aa8:	d90c      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_RCC_ClockConfig+0x154>)
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	f023 030f 	bic.w	r3, r3, #15
 8002ab2:	432b      	orrs	r3, r5
 8002ab4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	42ab      	cmp	r3, r5
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	e798      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	f013 0f04 	tst.w	r3, #4
 8002aca:	d006      	beq.n	8002ada <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002ace:	6893      	ldr	r3, [r2, #8]
 8002ad0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ad4:	68e1      	ldr	r1, [r4, #12]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f013 0f08 	tst.w	r3, #8
 8002ae0:	d007      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002ae4:	6893      	ldr	r3, [r2, #8]
 8002ae6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002aea:	6921      	ldr	r1, [r4, #16]
 8002aec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002af0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af2:	f7ff ff15 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x15c>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	40d8      	lsrs	r0, r3
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCC_ClockConfig+0x160>)
 8002b06:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe fa5d 	bl	8000fc8 <HAL_InitTick>
  return HAL_OK;
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e771      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002b12:	2001      	movs	r0, #1
}
 8002b14:	4770      	bx	lr
        return HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
 8002b18:	e76d      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08008628 	.word	0x08008628
 8002b28:	20000008 	.word	0x20000008

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <HAL_RCC_GetHCLKFreq+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000008 	.word	0x20000008

08002b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b3a:	f7ff fff7 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b46:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b4a:	40d8      	lsrs	r0, r3
 8002b4c:	bd08      	pop	{r3, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08008638 	.word	0x08008638

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b5a:	f7ff ffe7 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b66:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b6a:	40d8      	lsrs	r0, r3
 8002b6c:	bd08      	pop	{r3, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	08008638 	.word	0x08008638

08002b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	f013 0f01 	tst.w	r3, #1
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b86:	4baf      	ldr	r3, [pc, #700]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b9a:	b1c3      	cbz	r3, 8002bce <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002ba0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002ba8:	d015      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002baa:	4aa6      	ldr	r2, [pc, #664]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002bb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002bb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc2:	d006      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 811b 	beq.w	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e004      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002bce:	2601      	movs	r6, #1
 8002bd0:	e7e7      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002bd2:	2601      	movs	r6, #1
 8002bd4:	e7f6      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8002bd6:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002bde:	d00f      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002be0:	4a98      	ldr	r2, [pc, #608]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002be2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002be6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002bea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bec:	430b      	orrs	r3, r1
 8002bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf8:	f000 8104 	beq.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bfc:	b903      	cbnz	r3, 8002c00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8002bfe:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002c06:	d000      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8002c08:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0a:	f013 0f20 	tst.w	r3, #32
 8002c0e:	f040 80fb 	bne.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f013 0f10 	tst.w	r3, #16
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c1a:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c20:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002c28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3c:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c46:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c56:	4a7b      	ldr	r2, [pc, #492]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c5c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002c60:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002c62:	430b      	orrs	r3, r1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c76:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c7a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c90:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c94:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002c96:	430b      	orrs	r3, r1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca4:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ca6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cbe:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cc0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cc4:	f023 030c 	bic.w	r3, r3, #12
 8002cc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cd6:	d008      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd8:	4a5a      	ldr	r2, [pc, #360]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ce2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf2:	4a54      	ldr	r2, [pc, #336]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cf4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cfc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d0c:	4a4d      	ldr	r2, [pc, #308]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d26:	4a47      	ldr	r2, [pc, #284]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d30:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002d32:	430b      	orrs	r3, r1
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d40:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d5a:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d64:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002d66:	430b      	orrs	r3, r1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d74:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002d80:	430b      	orrs	r3, r1
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002d8c:	d00d      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d94:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002d98:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002da0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da6:	f000 8099 	beq.w	8002edc <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	f013 0f08 	tst.w	r3, #8
 8002db0:	d000      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8002db2:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002db4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dc0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002dc4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002de8:	2e00      	cmp	r6, #0
 8002dea:	d179      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df2:	d075      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	f040 8106 	bne.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002dfa:	2000      	movs	r0, #0
}
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8002e00:	2501      	movs	r5, #1
 8002e02:	e6e9      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002e04:	2601      	movs	r6, #1
 8002e06:	e6f9      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e26:	f7fe f913 	bl	8001050 <HAL_GetTick>
 8002e2a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe f90b 	bl	8001050 <HAL_GetTick>
 8002e3a:	1bc0      	subs	r0, r0, r7
 8002e3c:	2864      	cmp	r0, #100	; 0x64
 8002e3e:	d9f5      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 8002e40:	2003      	movs	r0, #3
 8002e42:	e7db      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4c:	4bb3      	ldr	r3, [pc, #716]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e50:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002e54:	d015      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002e56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e58:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e60:	4bae      	ldr	r3, [pc, #696]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e6a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002e6e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e72:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002e76:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002e78:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f013 0f01 	tst.w	r3, #1
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e84:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002e88:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002e8c:	d01d      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002e8e:	4aa3      	ldr	r2, [pc, #652]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002e90:	6893      	ldr	r3, [r2, #8]
 8002e92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	49a0      	ldr	r1, [pc, #640]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002e9a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002e9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e9e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	670b      	str	r3, [r1, #112]	; 0x70
 8002ea6:	e6b4      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f8d2 	bl	8001050 <HAL_GetTick>
 8002eac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b9b      	ldr	r3, [pc, #620]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f013 0f02 	tst.w	r3, #2
 8002eb6:	d1e4      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f8ca 	bl	8001050 <HAL_GetTick>
 8002ebc:	1bc0      	subs	r0, r0, r7
 8002ebe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ec2:	4298      	cmp	r0, r3
 8002ec4:	d9f3      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	e798      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eca:	4894      	ldr	r0, [pc, #592]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002ecc:	6882      	ldr	r2, [r0, #8]
 8002ece:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002ed2:	4993      	ldr	r1, [pc, #588]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002ed4:	4019      	ands	r1, r3
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	6082      	str	r2, [r0, #8]
 8002eda:	e7dd      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8002edc:	2501      	movs	r5, #1
 8002ede:	e764      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002eea:	f7fe f8b1 	bl	8001050 <HAL_GetTick>
 8002eee:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ef8:	d006      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efa:	f7fe f8a9 	bl	8001050 <HAL_GetTick>
 8002efe:	1b80      	subs	r0, r0, r6
 8002f00:	2864      	cmp	r0, #100	; 0x64
 8002f02:	d9f5      	bls.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8002f04:	2003      	movs	r0, #3
 8002f06:	e779      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	f013 0f01 	tst.w	r3, #1
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f12:	b98b      	cbnz	r3, 8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f14:	4a81      	ldr	r2, [pc, #516]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002f16:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f1a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1e:	6860      	ldr	r0, [r4, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f28:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	68a1      	ldr	r1, [r4, #8]
 8002f30:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002f34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f42:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002f46:	d006      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002f48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002f4c:	d01e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f56:	4a71      	ldr	r2, [pc, #452]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002f58:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f5c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f66:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f6a:	68e0      	ldr	r0, [r4, #12]
 8002f6c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002f70:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002f74:	430b      	orrs	r3, r1
 8002f76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002f7e:	f023 031f 	bic.w	r3, r3, #31
 8002f82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f84:	3901      	subs	r1, #1
 8002f86:	430b      	orrs	r3, r1
 8002f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002f92:	d011      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f94:	4a61      	ldr	r2, [pc, #388]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002f96:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f9a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f9e:	6866      	ldr	r6, [r4, #4]
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002fa8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002fac:	4303      	orrs	r3, r0
 8002fae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc0:	6862      	ldr	r2, [r4, #4]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fca:	68e2      	ldr	r2, [r4, #12]
 8002fcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fd0:	68a2      	ldr	r2, [r4, #8]
 8002fd2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002fd6:	4a51      	ldr	r2, [pc, #324]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002fd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fe4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002fe6:	f7fe f833 	bl	8001050 <HAL_GetTick>
 8002fea:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ff4:	f47f aefe 	bne.w	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ff8:	f7fe f82a 	bl	8001050 <HAL_GetTick>
 8002ffc:	1b80      	subs	r0, r0, r6
 8002ffe:	2864      	cmp	r0, #100	; 0x64
 8003000:	d9f4      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8003002:	2003      	movs	r0, #3
 8003004:	e6fa      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8003006:	4a45      	ldr	r2, [pc, #276]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003010:	f7fe f81e 	bl	8001050 <HAL_GetTick>
 8003014:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800301e:	d006      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003020:	f7fe f816 	bl	8001050 <HAL_GetTick>
 8003024:	1b40      	subs	r0, r0, r5
 8003026:	2864      	cmp	r0, #100	; 0x64
 8003028:	d9f5      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 800302a:	2003      	movs	r0, #3
 800302c:	e6e6      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003034:	d001      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003036:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003038:	b122      	cbz	r2, 8003044 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800303a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800303e:	d01d      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003042:	b9db      	cbnz	r3, 800307c <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003044:	4a35      	ldr	r2, [pc, #212]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003046:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800304a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800304e:	6960      	ldr	r0, [r4, #20]
 8003050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003054:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003058:	69a0      	ldr	r0, [r4, #24]
 800305a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800305e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003062:	430b      	orrs	r3, r1
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003068:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800306c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003070:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003072:	3901      	subs	r1, #1
 8003074:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003078:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003082:	d003      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003084:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308a:	d031      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f013 0f08 	tst.w	r3, #8
 8003092:	d019      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003094:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003096:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800309a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800309e:	6960      	ldr	r0, [r4, #20]
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80030a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80030ac:	430b      	orrs	r3, r1
 80030ae:	69e1      	ldr	r1, [r4, #28]
 80030b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80030bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80030c2:	430b      	orrs	r3, r1
 80030c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030d2:	f7fd ffbd 	bl	8001050 <HAL_GetTick>
 80030d6:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80030e0:	d119      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030e2:	f7fd ffb5 	bl	8001050 <HAL_GetTick>
 80030e6:	1b00      	subs	r0, r0, r4
 80030e8:	2864      	cmp	r0, #100	; 0x64
 80030ea:	d9f5      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 80030ec:	2003      	movs	r0, #3
 80030ee:	e685      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80030f2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030f6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030fa:	6965      	ldr	r5, [r4, #20]
 80030fc:	6a23      	ldr	r3, [r4, #32]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003104:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003108:	4303      	orrs	r3, r0
 800310a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003114:	e7ba      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8003116:	2000      	movs	r0, #0
 8003118:	e670      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	0ffffcff 	.word	0x0ffffcff

08003124 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003124:	b1d8      	cbz	r0, 800315e <HAL_SDRAM_Init+0x3a>
{   
 8003126:	b538      	push	{r3, r4, r5, lr}
 8003128:	4604      	mov	r4, r0
 800312a:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800312c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003130:	b183      	cbz	r3, 8003154 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003138:	1d21      	adds	r1, r4, #4
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	f000 fca2 	bl	8003a84 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003140:	6862      	ldr	r2, [r4, #4]
 8003142:	4629      	mov	r1, r5
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	f000 fcd7 	bl	8003af8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800314a:	2301      	movs	r3, #1
 800314c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003150:	2000      	movs	r0, #0
}
 8003152:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003154:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003158:	f001 fc2c 	bl	80049b4 <HAL_SDRAM_MspInit>
 800315c:	e7e9      	b.n	8003132 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800315e:	2001      	movs	r0, #1
}
 8003160:	4770      	bx	lr

08003162 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003162:	2800      	cmp	r0, #0
 8003164:	d058      	beq.n	8003218 <HAL_SPI_Init+0xb6>
{
 8003166:	b510      	push	{r4, lr}
 8003168:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800316e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003172:	2b00      	cmp	r3, #0
 8003174:	d045      	beq.n	8003202 <HAL_SPI_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003184:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800318c:	d93e      	bls.n	800320c <HAL_SPI_Init+0xaa>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800318e:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003190:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003194:	bf18      	it	ne
 8003196:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 800319a:	d001      	beq.n	80031a0 <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319c:	2100      	movs	r1, #0
 800319e:	62a1      	str	r1, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80031a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031a2:	b921      	cbnz	r1, 80031ae <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a8:	d933      	bls.n	8003212 <HAL_SPI_Init+0xb0>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80031aa:	2302      	movs	r3, #2
 80031ac:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	68a1      	ldr	r1, [r4, #8]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6921      	ldr	r1, [r4, #16]
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6961      	ldr	r1, [r4, #20]
 80031ba:	430b      	orrs	r3, r1
 80031bc:	69a1      	ldr	r1, [r4, #24]
 80031be:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80031c2:	430b      	orrs	r3, r1
 80031c4:	69e1      	ldr	r1, [r4, #28]
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6a21      	ldr	r1, [r4, #32]
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80031ce:	6821      	ldr	r1, [r4, #0]
 80031d0:	4303      	orrs	r3, r0
 80031d2:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031d4:	8b63      	ldrh	r3, [r4, #26]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031dc:	430b      	orrs	r3, r1
 80031de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031e0:	430b      	orrs	r3, r1
 80031e2:	68e1      	ldr	r1, [r4, #12]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	69d3      	ldr	r3, [r2, #28]
 80031f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f6:	2000      	movs	r0, #0
 80031f8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003200:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003202:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003206:	f001 fb29 	bl	800485c <HAL_SPI_MspInit>
 800320a:	e7b4      	b.n	8003176 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800320c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003210:	e7be      	b.n	8003190 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003212:	2301      	movs	r3, #1
 8003214:	6323      	str	r3, [r4, #48]	; 0x30
 8003216:	e7ca      	b.n	80031ae <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
}
 800321a:	4770      	bx	lr

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003220:	6a04      	ldr	r4, [r0, #32]
 8003222:	f024 0401 	bic.w	r4, r4, #1
 8003226:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003228:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800322e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003232:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003236:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003238:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800323a:	6203      	str	r3, [r0, #32]
}
 800323c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003240:	4770      	bx	lr

08003242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003242:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003244:	6a03      	ldr	r3, [r0, #32]
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800324e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003250:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003254:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003260:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003262:	6203      	str	r3, [r0, #32]
}
 8003264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800326a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003270:	4319      	orrs	r1, r3
 8003272:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003276:	6081      	str	r1, [r0, #8]
}
 8003278:	4770      	bx	lr
	...

0800327c <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003282:	6802      	ldr	r2, [r0, #0]
 8003284:	6891      	ldr	r1, [r2, #8]
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_TIM_Base_Start+0x2c>)
 8003288:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	2b06      	cmp	r3, #6
 800328c:	bf18      	it	ne
 800328e:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8003292:	d003      	beq.n	800329c <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800329c:	2301      	movs	r3, #1
 800329e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80032a2:	2000      	movs	r0, #0
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	00010007 	.word	0x00010007

080032ac <TIM_Base_SetConfig>:
{
 80032ac:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80032ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	4c3a      	ldr	r4, [pc, #232]	; (800339c <TIM_Base_SetConfig+0xf0>)
 80032b2:	42a0      	cmp	r0, r4
 80032b4:	bf14      	ite	ne
 80032b6:	2400      	movne	r4, #0
 80032b8:	2401      	moveq	r4, #1
 80032ba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032be:	bf14      	ite	ne
 80032c0:	4622      	movne	r2, r4
 80032c2:	f044 0201 	orreq.w	r2, r4, #1
 80032c6:	b9aa      	cbnz	r2, 80032f4 <TIM_Base_SetConfig+0x48>
 80032c8:	4d35      	ldr	r5, [pc, #212]	; (80033a0 <TIM_Base_SetConfig+0xf4>)
 80032ca:	42a8      	cmp	r0, r5
 80032cc:	bf14      	ite	ne
 80032ce:	2500      	movne	r5, #0
 80032d0:	2501      	moveq	r5, #1
 80032d2:	4e34      	ldr	r6, [pc, #208]	; (80033a4 <TIM_Base_SetConfig+0xf8>)
 80032d4:	42b0      	cmp	r0, r6
 80032d6:	d00d      	beq.n	80032f4 <TIM_Base_SetConfig+0x48>
 80032d8:	b965      	cbnz	r5, 80032f4 <TIM_Base_SetConfig+0x48>
 80032da:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80032de:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80032e2:	42a8      	cmp	r0, r5
 80032e4:	bf14      	ite	ne
 80032e6:	2500      	movne	r5, #0
 80032e8:	2501      	moveq	r5, #1
 80032ea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80032ee:	42b0      	cmp	r0, r6
 80032f0:	d000      	beq.n	80032f4 <TIM_Base_SetConfig+0x48>
 80032f2:	b11d      	cbz	r5, 80032fc <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032f8:	684d      	ldr	r5, [r1, #4]
 80032fa:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fc:	2a00      	cmp	r2, #0
 80032fe:	d133      	bne.n	8003368 <TIM_Base_SetConfig+0xbc>
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <TIM_Base_SetConfig+0xf4>)
 8003302:	4290      	cmp	r0, r2
 8003304:	bf14      	ite	ne
 8003306:	2200      	movne	r2, #0
 8003308:	2201      	moveq	r2, #1
 800330a:	4d26      	ldr	r5, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0xf8>)
 800330c:	42a8      	cmp	r0, r5
 800330e:	d02b      	beq.n	8003368 <TIM_Base_SetConfig+0xbc>
 8003310:	bb52      	cbnz	r2, 8003368 <TIM_Base_SetConfig+0xbc>
 8003312:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003316:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800331a:	4290      	cmp	r0, r2
 800331c:	bf14      	ite	ne
 800331e:	2200      	movne	r2, #0
 8003320:	2201      	moveq	r2, #1
 8003322:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003326:	42a8      	cmp	r0, r5
 8003328:	d01e      	beq.n	8003368 <TIM_Base_SetConfig+0xbc>
 800332a:	b9ea      	cbnz	r2, 8003368 <TIM_Base_SetConfig+0xbc>
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <TIM_Base_SetConfig+0xfc>)
 800332e:	4290      	cmp	r0, r2
 8003330:	bf14      	ite	ne
 8003332:	2200      	movne	r2, #0
 8003334:	2201      	moveq	r2, #1
 8003336:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800333a:	42a8      	cmp	r0, r5
 800333c:	d014      	beq.n	8003368 <TIM_Base_SetConfig+0xbc>
 800333e:	b99a      	cbnz	r2, 8003368 <TIM_Base_SetConfig+0xbc>
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <TIM_Base_SetConfig+0x100>)
 8003342:	4290      	cmp	r0, r2
 8003344:	bf14      	ite	ne
 8003346:	2200      	movne	r2, #0
 8003348:	2201      	moveq	r2, #1
 800334a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800334e:	42a8      	cmp	r0, r5
 8003350:	d00a      	beq.n	8003368 <TIM_Base_SetConfig+0xbc>
 8003352:	b94a      	cbnz	r2, 8003368 <TIM_Base_SetConfig+0xbc>
 8003354:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <TIM_Base_SetConfig+0x104>)
 8003356:	4290      	cmp	r0, r2
 8003358:	bf14      	ite	ne
 800335a:	2200      	movne	r2, #0
 800335c:	2201      	moveq	r2, #1
 800335e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8003362:	42a8      	cmp	r0, r5
 8003364:	d000      	beq.n	8003368 <TIM_Base_SetConfig+0xbc>
 8003366:	b11a      	cbz	r2, 8003370 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336c:	68ca      	ldr	r2, [r1, #12]
 800336e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003374:	694a      	ldr	r2, [r1, #20]
 8003376:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003378:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337a:	688a      	ldr	r2, [r1, #8]
 800337c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800337e:	680a      	ldr	r2, [r1, #0]
 8003380:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x108>)
 8003384:	4298      	cmp	r0, r3
 8003386:	bf14      	ite	ne
 8003388:	4623      	movne	r3, r4
 800338a:	f044 0301 	orreq.w	r3, r4, #1
 800338e:	b10b      	cbz	r3, 8003394 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	690b      	ldr	r3, [r1, #16]
 8003392:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003394:	2301      	movs	r3, #1
 8003396:	6143      	str	r3, [r0, #20]
}
 8003398:	bc70      	pop	{r4, r5, r6}
 800339a:	4770      	bx	lr
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40001800 	.word	0x40001800
 80033b0:	40002000 	.word	0x40002000
 80033b4:	40010400 	.word	0x40010400

080033b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80033b8:	b1a8      	cbz	r0, 80033e6 <HAL_TIM_Base_Init+0x2e>
{
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80033be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033c2:	b15b      	cbz	r3, 80033dc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	1d21      	adds	r1, r4, #4
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	f7ff ff6d 	bl	80032ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033d8:	2000      	movs	r0, #0
}
 80033da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80033dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033e0:	f001 fa86 	bl	80048f0 <HAL_TIM_Base_MspInit>
 80033e4:	e7ee      	b.n	80033c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
}
 80033e8:	4770      	bx	lr

080033ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ea:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ec:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80033f6:	430b      	orrs	r3, r1
 80033f8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fa:	6083      	str	r3, [r0, #8]
}
 80033fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d064      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xd2>
{
 800340c:	b510      	push	{r4, lr}
 800340e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003410:	2301      	movs	r3, #1
 8003412:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800341c:	6802      	ldr	r2, [r0, #0]
 800341e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_TIM_ConfigClockSource+0xd8>)
 8003422:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003424:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003426:	680b      	ldr	r3, [r1, #0]
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d04a      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0xbe>
 800342c:	d913      	bls.n	8003456 <HAL_TIM_ConfigClockSource+0x52>
 800342e:	2b60      	cmp	r3, #96	; 0x60
 8003430:	d03d      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xaa>
 8003432:	d91e      	bls.n	8003472 <HAL_TIM_ConfigClockSource+0x6e>
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d028      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x86>
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343c:	d130      	bne.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	68cb      	ldr	r3, [r1, #12]
 8003440:	684a      	ldr	r2, [r1, #4]
 8003442:	6889      	ldr	r1, [r1, #8]
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	f7ff ffd0 	bl	80033ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	6893      	ldr	r3, [r2, #8]
 800344e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003452:	6093      	str	r3, [r2, #8]
      break;
 8003454:	e024      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8003456:	2b10      	cmp	r3, #16
 8003458:	d006      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0x64>
 800345a:	d904      	bls.n	8003466 <HAL_TIM_ConfigClockSource+0x62>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d003      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0x64>
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d001      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0x64>
 8003464:	e01c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
 8003466:	b9db      	cbnz	r3, 80034a0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003468:	4619      	mov	r1, r3
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	f7ff fefd 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8003470:	e016      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8003472:	2b50      	cmp	r3, #80	; 0x50
 8003474:	d114      	bne.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003476:	68ca      	ldr	r2, [r1, #12]
 8003478:	6849      	ldr	r1, [r1, #4]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f7ff fece 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	2150      	movs	r1, #80	; 0x50
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	f7ff fef1 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8003488:	e00a      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800348a:	68cb      	ldr	r3, [r1, #12]
 800348c:	684a      	ldr	r2, [r1, #4]
 800348e:	6889      	ldr	r1, [r1, #8]
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	f7ff ffaa 	bl	80033ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800349e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034ac:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	68ca      	ldr	r2, [r1, #12]
 80034b0:	6849      	ldr	r1, [r1, #4]
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	f7ff fec5 	bl	8003242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b8:	2160      	movs	r1, #96	; 0x60
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	f7ff fed5 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 80034c0:	e7ee      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	68ca      	ldr	r2, [r1, #12]
 80034c4:	6849      	ldr	r1, [r1, #4]
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	f7ff fea8 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f7ff fecb 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 80034d4:	e7e4      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80034d6:	2002      	movs	r0, #2
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	fffe0088 	.word	0xfffe0088

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d027      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 80034e8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80034ea:	2301      	movs	r3, #1
 80034ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	2302      	movs	r3, #2
 80034f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f6:	6803      	ldr	r3, [r0, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fa:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034fc:	4e0f      	ldr	r6, [pc, #60]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 80034fe:	4c10      	ldr	r4, [pc, #64]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003500:	42a3      	cmp	r3, r4
 8003502:	bf18      	it	ne
 8003504:	42b3      	cmpne	r3, r6
 8003506:	d103      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003508:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800350c:	684c      	ldr	r4, [r1, #4]
 800350e:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003510:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003514:	680c      	ldr	r4, [r1, #0]
 8003516:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003518:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351c:	6889      	ldr	r1, [r1, #8]
 800351e:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003520:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003522:	6803      	ldr	r3, [r0, #0]
 8003524:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003526:	2301      	movs	r3, #1
 8003528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	2300      	movs	r3, #0
 800352e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003532:	4618      	mov	r0, r3
}
 8003534:	bc70      	pop	{r4, r5, r6}
 8003536:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003538:	2002      	movs	r0, #2
}
 800353a:	4770      	bx	lr
 800353c:	40010000 	.word	0x40010000
 8003540:	40010400 	.word	0x40010400

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b510      	push	{r4, lr}
 8003546:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003548:	6883      	ldr	r3, [r0, #8]
 800354a:	6902      	ldr	r2, [r0, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	6942      	ldr	r2, [r0, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	69c2      	ldr	r2, [r0, #28]
 8003554:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003556:	6801      	ldr	r1, [r0, #0]
 8003558:	6808      	ldr	r0, [r1, #0]
 800355a:	4a99      	ldr	r2, [pc, #612]	; (80037c0 <UART_SetConfig+0x27c>)
 800355c:	4002      	ands	r2, r0
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	6853      	ldr	r3, [r2, #4]
 8003566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800356a:	68e1      	ldr	r1, [r4, #12]
 800356c:	430b      	orrs	r3, r1
 800356e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003570:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8003572:	6a23      	ldr	r3, [r4, #32]
 8003574:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003576:	6821      	ldr	r1, [r4, #0]
 8003578:	688b      	ldr	r3, [r1, #8]
 800357a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	4a8f      	ldr	r2, [pc, #572]	; (80037c4 <UART_SetConfig+0x280>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <UART_SetConfig+0x78>
 800358a:	4a8f      	ldr	r2, [pc, #572]	; (80037c8 <UART_SetConfig+0x284>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d028      	beq.n	80035e2 <UART_SetConfig+0x9e>
 8003590:	4a8e      	ldr	r2, [pc, #568]	; (80037cc <UART_SetConfig+0x288>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03d      	beq.n	8003612 <UART_SetConfig+0xce>
 8003596:	4a8e      	ldr	r2, [pc, #568]	; (80037d0 <UART_SetConfig+0x28c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d050      	beq.n	800363e <UART_SetConfig+0xfa>
 800359c:	4a8d      	ldr	r2, [pc, #564]	; (80037d4 <UART_SetConfig+0x290>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d062      	beq.n	8003668 <UART_SetConfig+0x124>
 80035a2:	4a8d      	ldr	r2, [pc, #564]	; (80037d8 <UART_SetConfig+0x294>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d077      	beq.n	8003698 <UART_SetConfig+0x154>
 80035a8:	4a8c      	ldr	r2, [pc, #560]	; (80037dc <UART_SetConfig+0x298>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	f000 808c 	beq.w	80036c8 <UART_SetConfig+0x184>
 80035b0:	4a8b      	ldr	r2, [pc, #556]	; (80037e0 <UART_SetConfig+0x29c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f000 80a0 	beq.w	80036f8 <UART_SetConfig+0x1b4>
 80035b8:	2310      	movs	r3, #16
 80035ba:	e0b6      	b.n	800372a <UART_SetConfig+0x1e6>
 80035bc:	4b89      	ldr	r3, [pc, #548]	; (80037e4 <UART_SetConfig+0x2a0>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d809      	bhi.n	80035de <UART_SetConfig+0x9a>
 80035ca:	e8df f003 	tbb	[pc, r3]
 80035ce:	0402      	.short	0x0402
 80035d0:	06ad      	.short	0x06ad
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0a9      	b.n	800372a <UART_SetConfig+0x1e6>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e0a7      	b.n	800372a <UART_SetConfig+0x1e6>
 80035da:	2308      	movs	r3, #8
 80035dc:	e0a5      	b.n	800372a <UART_SetConfig+0x1e6>
 80035de:	2310      	movs	r3, #16
 80035e0:	e0a3      	b.n	800372a <UART_SetConfig+0x1e6>
 80035e2:	4b80      	ldr	r3, [pc, #512]	; (80037e4 <UART_SetConfig+0x2a0>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d80e      	bhi.n	800360e <UART_SetConfig+0xca>
 80035f0:	e8df f003 	tbb	[pc, r3]
 80035f4:	0d0d0d07 	.word	0x0d0d0d07
 80035f8:	0d0d0d09 	.word	0x0d0d0d09
 80035fc:	0d0d0da9 	.word	0x0d0d0da9
 8003600:	0b          	.byte	0x0b
 8003601:	00          	.byte	0x00
 8003602:	2300      	movs	r3, #0
 8003604:	e091      	b.n	800372a <UART_SetConfig+0x1e6>
 8003606:	2304      	movs	r3, #4
 8003608:	e08f      	b.n	800372a <UART_SetConfig+0x1e6>
 800360a:	2308      	movs	r3, #8
 800360c:	e08d      	b.n	800372a <UART_SetConfig+0x1e6>
 800360e:	2310      	movs	r3, #16
 8003610:	e08b      	b.n	800372a <UART_SetConfig+0x1e6>
 8003612:	4b74      	ldr	r3, [pc, #464]	; (80037e4 <UART_SetConfig+0x2a0>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800361c:	2b10      	cmp	r3, #16
 800361e:	d00a      	beq.n	8003636 <UART_SetConfig+0xf2>
 8003620:	d906      	bls.n	8003630 <UART_SetConfig+0xec>
 8003622:	2b20      	cmp	r3, #32
 8003624:	f000 8091 	beq.w	800374a <UART_SetConfig+0x206>
 8003628:	2b30      	cmp	r3, #48	; 0x30
 800362a:	d106      	bne.n	800363a <UART_SetConfig+0xf6>
 800362c:	2308      	movs	r3, #8
 800362e:	e07c      	b.n	800372a <UART_SetConfig+0x1e6>
 8003630:	b91b      	cbnz	r3, 800363a <UART_SetConfig+0xf6>
 8003632:	2300      	movs	r3, #0
 8003634:	e079      	b.n	800372a <UART_SetConfig+0x1e6>
 8003636:	2304      	movs	r3, #4
 8003638:	e077      	b.n	800372a <UART_SetConfig+0x1e6>
 800363a:	2310      	movs	r3, #16
 800363c:	e075      	b.n	800372a <UART_SetConfig+0x1e6>
 800363e:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <UART_SetConfig+0x2a0>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d009      	beq.n	8003660 <UART_SetConfig+0x11c>
 800364c:	d905      	bls.n	800365a <UART_SetConfig+0x116>
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d07d      	beq.n	800374e <UART_SetConfig+0x20a>
 8003652:	2bc0      	cmp	r3, #192	; 0xc0
 8003654:	d106      	bne.n	8003664 <UART_SetConfig+0x120>
 8003656:	2308      	movs	r3, #8
 8003658:	e067      	b.n	800372a <UART_SetConfig+0x1e6>
 800365a:	b91b      	cbnz	r3, 8003664 <UART_SetConfig+0x120>
 800365c:	2300      	movs	r3, #0
 800365e:	e064      	b.n	800372a <UART_SetConfig+0x1e6>
 8003660:	2304      	movs	r3, #4
 8003662:	e062      	b.n	800372a <UART_SetConfig+0x1e6>
 8003664:	2310      	movs	r3, #16
 8003666:	e060      	b.n	800372a <UART_SetConfig+0x1e6>
 8003668:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <UART_SetConfig+0x2a0>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d00b      	beq.n	8003690 <UART_SetConfig+0x14c>
 8003678:	d907      	bls.n	800368a <UART_SetConfig+0x146>
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d068      	beq.n	8003752 <UART_SetConfig+0x20e>
 8003680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003684:	d106      	bne.n	8003694 <UART_SetConfig+0x150>
 8003686:	2308      	movs	r3, #8
 8003688:	e04f      	b.n	800372a <UART_SetConfig+0x1e6>
 800368a:	b91b      	cbnz	r3, 8003694 <UART_SetConfig+0x150>
 800368c:	2300      	movs	r3, #0
 800368e:	e04c      	b.n	800372a <UART_SetConfig+0x1e6>
 8003690:	2304      	movs	r3, #4
 8003692:	e04a      	b.n	800372a <UART_SetConfig+0x1e6>
 8003694:	2310      	movs	r3, #16
 8003696:	e048      	b.n	800372a <UART_SetConfig+0x1e6>
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <UART_SetConfig+0x2a0>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d00b      	beq.n	80036c0 <UART_SetConfig+0x17c>
 80036a8:	d907      	bls.n	80036ba <UART_SetConfig+0x176>
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d052      	beq.n	8003756 <UART_SetConfig+0x212>
 80036b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b4:	d106      	bne.n	80036c4 <UART_SetConfig+0x180>
 80036b6:	2308      	movs	r3, #8
 80036b8:	e037      	b.n	800372a <UART_SetConfig+0x1e6>
 80036ba:	b91b      	cbnz	r3, 80036c4 <UART_SetConfig+0x180>
 80036bc:	2301      	movs	r3, #1
 80036be:	e034      	b.n	800372a <UART_SetConfig+0x1e6>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e032      	b.n	800372a <UART_SetConfig+0x1e6>
 80036c4:	2310      	movs	r3, #16
 80036c6:	e030      	b.n	800372a <UART_SetConfig+0x1e6>
 80036c8:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <UART_SetConfig+0x2a0>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d00b      	beq.n	80036f0 <UART_SetConfig+0x1ac>
 80036d8:	d907      	bls.n	80036ea <UART_SetConfig+0x1a6>
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	d03c      	beq.n	800375a <UART_SetConfig+0x216>
 80036e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036e4:	d106      	bne.n	80036f4 <UART_SetConfig+0x1b0>
 80036e6:	2308      	movs	r3, #8
 80036e8:	e01f      	b.n	800372a <UART_SetConfig+0x1e6>
 80036ea:	b91b      	cbnz	r3, 80036f4 <UART_SetConfig+0x1b0>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e01c      	b.n	800372a <UART_SetConfig+0x1e6>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e01a      	b.n	800372a <UART_SetConfig+0x1e6>
 80036f4:	2310      	movs	r3, #16
 80036f6:	e018      	b.n	800372a <UART_SetConfig+0x1e6>
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <UART_SetConfig+0x2a0>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003706:	d00b      	beq.n	8003720 <UART_SetConfig+0x1dc>
 8003708:	d907      	bls.n	800371a <UART_SetConfig+0x1d6>
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d026      	beq.n	800375e <UART_SetConfig+0x21a>
 8003710:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003714:	d106      	bne.n	8003724 <UART_SetConfig+0x1e0>
 8003716:	2308      	movs	r3, #8
 8003718:	e007      	b.n	800372a <UART_SetConfig+0x1e6>
 800371a:	b91b      	cbnz	r3, 8003724 <UART_SetConfig+0x1e0>
 800371c:	2300      	movs	r3, #0
 800371e:	e004      	b.n	800372a <UART_SetConfig+0x1e6>
 8003720:	2304      	movs	r3, #4
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x1e6>
 8003724:	2310      	movs	r3, #16
 8003726:	e000      	b.n	800372a <UART_SetConfig+0x1e6>
 8003728:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	69e2      	ldr	r2, [r4, #28]
 800372c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003730:	d017      	beq.n	8003762 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8003732:	2b08      	cmp	r3, #8
 8003734:	f200 80b3 	bhi.w	800389e <UART_SetConfig+0x35a>
 8003738:	e8df f003 	tbb	[pc, r3]
 800373c:	b1958b76 	.word	0xb1958b76
 8003740:	b1b1b19e 	.word	0xb1b1b19e
 8003744:	a8          	.byte	0xa8
 8003745:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003746:	2302      	movs	r3, #2
 8003748:	e7ef      	b.n	800372a <UART_SetConfig+0x1e6>
 800374a:	2302      	movs	r3, #2
 800374c:	e7ed      	b.n	800372a <UART_SetConfig+0x1e6>
 800374e:	2302      	movs	r3, #2
 8003750:	e7eb      	b.n	800372a <UART_SetConfig+0x1e6>
 8003752:	2302      	movs	r3, #2
 8003754:	e7e9      	b.n	800372a <UART_SetConfig+0x1e6>
 8003756:	2302      	movs	r3, #2
 8003758:	e7e7      	b.n	800372a <UART_SetConfig+0x1e6>
 800375a:	2302      	movs	r3, #2
 800375c:	e7e5      	b.n	800372a <UART_SetConfig+0x1e6>
 800375e:	2302      	movs	r3, #2
 8003760:	e7e3      	b.n	800372a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8003762:	2b08      	cmp	r3, #8
 8003764:	d85d      	bhi.n	8003822 <UART_SetConfig+0x2de>
 8003766:	e8df f003 	tbb	[pc, r3]
 800376a:	1f05      	.short	0x1f05
 800376c:	5c485c3f 	.word	0x5c485c3f
 8003770:	5c5c      	.short	0x5c5c
 8003772:	53          	.byte	0x53
 8003773:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003774:	f7ff f9e0 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8003778:	6862      	ldr	r2, [r4, #4]
 800377a:	0853      	lsrs	r3, r2, #1
 800377c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003780:	fbb3 f3f2 	udiv	r3, r3, r2
 8003784:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003786:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003788:	f1a3 0110 	sub.w	r1, r3, #16
 800378c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003790:	4291      	cmp	r1, r2
 8003792:	f200 8087 	bhi.w	80038a4 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003796:	b29a      	uxth	r2, r3
 8003798:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800379c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80037a0:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	60d3      	str	r3, [r2, #12]
 80037a6:	e050      	b.n	800384a <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037a8:	f7ff f9d6 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 80037ac:	6862      	ldr	r2, [r4, #4]
 80037ae:	0853      	lsrs	r3, r2, #1
 80037b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80037b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037b8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ba:	2000      	movs	r0, #0
        break;
 80037bc:	e7e4      	b.n	8003788 <UART_SetConfig+0x244>
 80037be:	bf00      	nop
 80037c0:	efff69f3 	.word	0xefff69f3
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40004400 	.word	0x40004400
 80037cc:	40004800 	.word	0x40004800
 80037d0:	40004c00 	.word	0x40004c00
 80037d4:	40005000 	.word	0x40005000
 80037d8:	40011400 	.word	0x40011400
 80037dc:	40007800 	.word	0x40007800
 80037e0:	40007c00 	.word	0x40007c00
 80037e4:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <UART_SetConfig+0x368>)
 80037ec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80037f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f6:	2000      	movs	r0, #0
        break;
 80037f8:	e7c6      	b.n	8003788 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037fa:	f7ff f891 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	0853      	lsrs	r3, r2, #1
 8003802:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003806:	fbb3 f3f2 	udiv	r3, r3, r2
 800380a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800380c:	2000      	movs	r0, #0
        break;
 800380e:	e7bb      	b.n	8003788 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003810:	6862      	ldr	r2, [r4, #4]
 8003812:	0853      	lsrs	r3, r2, #1
 8003814:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003818:	fbb3 f3f2 	udiv	r3, r3, r2
 800381c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800381e:	2000      	movs	r0, #0
        break;
 8003820:	e7b2      	b.n	8003788 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8003822:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003824:	2300      	movs	r3, #0
 8003826:	e7af      	b.n	8003788 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003828:	f7ff f986 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 800382c:	6862      	ldr	r2, [r4, #4]
 800382e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003832:	fbb3 f3f2 	udiv	r3, r3, r2
 8003836:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003838:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	f1a3 0110 	sub.w	r1, r3, #16
 800383e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003842:	4291      	cmp	r1, r2
 8003844:	d830      	bhi.n	80038a8 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800384e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003850:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003852:	f7ff f981 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8003856:	6862      	ldr	r2, [r4, #4]
 8003858:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800385c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003860:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003862:	2000      	movs	r0, #0
        break;
 8003864:	e7e9      	b.n	800383a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <UART_SetConfig+0x36c>)
 800386a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800386e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003872:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003874:	2000      	movs	r0, #0
        break;
 8003876:	e7e0      	b.n	800383a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003878:	f7ff f852 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800387c:	6862      	ldr	r2, [r4, #4]
 800387e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003882:	fbb3 f3f2 	udiv	r3, r3, r2
 8003886:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003888:	2000      	movs	r0, #0
        break;
 800388a:	e7d6      	b.n	800383a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800388c:	6862      	ldr	r2, [r4, #4]
 800388e:	0853      	lsrs	r3, r2, #1
 8003890:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003894:	fbb3 f3f2 	udiv	r3, r3, r2
 8003898:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800389a:	2000      	movs	r0, #0
        break;
 800389c:	e7cd      	b.n	800383a <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 800389e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e7ca      	b.n	800383a <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80038a4:	2001      	movs	r0, #1
 80038a6:	e7d0      	b.n	800384a <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7ce      	b.n	800384a <UART_SetConfig+0x306>
 80038ac:	01e84800 	.word	0x01e84800
 80038b0:	00f42400 	.word	0x00f42400

080038b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b6:	f013 0f01 	tst.w	r3, #1
 80038ba:	d006      	beq.n	80038ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038bc:	6802      	ldr	r2, [r0, #0]
 80038be:	6853      	ldr	r3, [r2, #4]
 80038c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038cc:	f013 0f02 	tst.w	r3, #2
 80038d0:	d006      	beq.n	80038e0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d2:	6802      	ldr	r2, [r0, #0]
 80038d4:	6853      	ldr	r3, [r2, #4]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80038dc:	430b      	orrs	r3, r1
 80038de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038e2:	f013 0f04 	tst.w	r3, #4
 80038e6:	d006      	beq.n	80038f6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e8:	6802      	ldr	r2, [r0, #0]
 80038ea:	6853      	ldr	r3, [r2, #4]
 80038ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038f8:	f013 0f08 	tst.w	r3, #8
 80038fc:	d006      	beq.n	800390c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	6853      	ldr	r3, [r2, #4]
 8003902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003906:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003908:	430b      	orrs	r3, r1
 800390a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800390c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800390e:	f013 0f10 	tst.w	r3, #16
 8003912:	d006      	beq.n	8003922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003914:	6802      	ldr	r2, [r0, #0]
 8003916:	6893      	ldr	r3, [r2, #8]
 8003918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800391e:	430b      	orrs	r3, r1
 8003920:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003922:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003924:	f013 0f20 	tst.w	r3, #32
 8003928:	d006      	beq.n	8003938 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800392a:	6802      	ldr	r2, [r0, #0]
 800392c:	6893      	ldr	r3, [r2, #8]
 800392e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003932:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003938:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800393a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003940:	6802      	ldr	r2, [r0, #0]
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003948:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800394a:	430b      	orrs	r3, r1
 800394c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003954:	d00b      	beq.n	800396e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003956:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003958:	f013 0f80 	tst.w	r3, #128	; 0x80
 800395c:	d006      	beq.n	800396c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395e:	6802      	ldr	r2, [r0, #0]
 8003960:	6853      	ldr	r3, [r2, #4]
 8003962:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003966:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003968:	430b      	orrs	r3, r1
 800396a:	6053      	str	r3, [r2, #4]
  }
}
 800396c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800396e:	6802      	ldr	r2, [r0, #0]
 8003970:	6853      	ldr	r3, [r2, #4]
 8003972:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003976:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003978:	430b      	orrs	r3, r1
 800397a:	6053      	str	r3, [r2, #4]
 800397c:	e7eb      	b.n	8003956 <UART_AdvFeatureConfig+0xa2>

0800397e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	460f      	mov	r7, r1
 8003986:	4616      	mov	r6, r2
 8003988:	4698      	mov	r8, r3
 800398a:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	ea37 0303 	bics.w	r3, r7, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	42b3      	cmp	r3, r6
 800399c:	d11c      	bne.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80039a2:	d0f3      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a4:	f7fd fb54 	bl	8001050 <HAL_GetTick>
 80039a8:	eba0 0008 	sub.w	r0, r0, r8
 80039ac:	42a0      	cmp	r0, r4
 80039ae:	d801      	bhi.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x36>
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d1eb      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b4:	682a      	ldr	r2, [r5, #0]
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039bc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	682a      	ldr	r2, [r5, #0]
 80039c0:	6893      	ldr	r3, [r2, #8]
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039c8:	2320      	movs	r3, #32
 80039ca:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039cc:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ce:	2300      	movs	r3, #0
 80039d0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 80039d4:	2003      	movs	r0, #3
 80039d6:	e000      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 80039d8:	2000      	movs	r0, #0
}
 80039da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039de <UART_CheckIdleState>:
{
 80039de:	b510      	push	{r4, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80039e8:	f7fd fb32 	bl	8001050 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	f012 0f08 	tst.w	r2, #8
 80039f4:	d107      	bne.n	8003a06 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80039f6:	2320      	movs	r3, #32
 80039f8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039fa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8003a02:	b002      	add	sp, #8
 8003a04:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff ffb2 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0eb      	beq.n	80039f6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003a1e:	2003      	movs	r0, #3
 8003a20:	e7ef      	b.n	8003a02 <UART_CheckIdleState+0x24>

08003a22 <HAL_UART_Init>:
  if (huart == NULL)
 8003a22:	b368      	cbz	r0, 8003a80 <HAL_UART_Init+0x5e>
{
 8003a24:	b510      	push	{r4, lr}
 8003a26:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a28:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003a2a:	b303      	cbz	r3, 8003a6e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	2324      	movs	r3, #36	; 0x24
 8003a2e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff fd82 	bl	8003544 <UART_SetConfig>
 8003a40:	2801      	cmp	r0, #1
 8003a42:	d013      	beq.n	8003a6c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a46:	b9bb      	cbnz	r3, 8003a78 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	6853      	ldr	r3, [r2, #4]
 8003a4c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a50:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	6893      	ldr	r3, [r2, #8]
 8003a56:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003a5a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7ff ffb9 	bl	80039de <UART_CheckIdleState>
}
 8003a6c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a6e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003a72:	f000 ff53 	bl	800491c <HAL_UART_MspInit>
 8003a76:	e7d9      	b.n	8003a2c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff ff1b 	bl	80038b4 <UART_AdvFeatureConfig>
 8003a7e:	e7e3      	b.n	8003a48 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
}
 8003a82:	4770      	bx	lr

08003a84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003a84:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003a86:	680b      	ldr	r3, [r1, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d018      	beq.n	8003abe <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a8c:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <FMC_SDRAM_Init+0x70>)
 8003a90:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a92:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8003a94:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a96:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8003a98:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8003a9a:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8003a9c:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8003a9e:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8003aa0:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8003aa2:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8003aa4:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8003aa6:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8003aa8:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8003aaa:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8003aac:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8003aae:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8003ab0:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003ab2:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ab4:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003ab6:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003ab8:	2000      	movs	r0, #0
 8003aba:	bc30      	pop	{r4, r5}
 8003abc:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003abe:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ac0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ac4:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8003ac6:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ac8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003aca:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003acc:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ace:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003ad0:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003ad2:	4c08      	ldr	r4, [pc, #32]	; (8003af4 <FMC_SDRAM_Init+0x70>)
 8003ad4:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ad6:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8003ad8:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ada:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003adc:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8003ade:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003ae0:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8003ae2:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8003ae4:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8003ae6:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8003ae8:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8003aea:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aec:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003aee:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003af0:	6043      	str	r3, [r0, #4]
 8003af2:	e7e1      	b.n	8003ab8 <FMC_SDRAM_Init+0x34>
 8003af4:	ffff8000 	.word	0xffff8000

08003af8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003af8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003afa:	2a01      	cmp	r2, #1
 8003afc:	d021      	beq.n	8003b42 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003afe:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b00:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b04:	680b      	ldr	r3, [r1, #0]
 8003b06:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003b08:	684c      	ldr	r4, [r1, #4]
 8003b0a:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b0c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003b10:	688c      	ldr	r4, [r1, #8]
 8003b12:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003b14:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003b18:	68cc      	ldr	r4, [r1, #12]
 8003b1a:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003b1c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003b20:	690c      	ldr	r4, [r1, #16]
 8003b22:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003b24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8003b28:	694c      	ldr	r4, [r1, #20]
 8003b2a:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003b2c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003b30:	6989      	ldr	r1, [r1, #24]
 8003b32:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b38:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003b3a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	bc30      	pop	{r4, r5}
 8003b40:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b42:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003b44:	4c11      	ldr	r4, [pc, #68]	; (8003b8c <FMC_SDRAM_Timing_Init+0x94>)
 8003b46:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003b48:	68ca      	ldr	r2, [r1, #12]
 8003b4a:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8003b4c:	694b      	ldr	r3, [r1, #20]
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003b52:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003b56:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003b58:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b5a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b5e:	680b      	ldr	r3, [r1, #0]
 8003b60:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003b62:	684d      	ldr	r5, [r1, #4]
 8003b64:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b66:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003b6a:	688d      	ldr	r5, [r1, #8]
 8003b6c:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003b6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003b72:	690d      	ldr	r5, [r1, #16]
 8003b74:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003b76:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8003b7a:	6989      	ldr	r1, [r1, #24]
 8003b7c:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b82:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003b84:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003b86:	60c3      	str	r3, [r0, #12]
 8003b88:	e7d8      	b.n	8003b3c <FMC_SDRAM_Timing_Init+0x44>
 8003b8a:	bf00      	nop
 8003b8c:	ff0f0fff 	.word	0xff0f0fff

08003b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b94:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b96:	2400      	movs	r4, #0
 8003b98:	940b      	str	r4, [sp, #44]	; 0x2c
 8003b9a:	940c      	str	r4, [sp, #48]	; 0x30
 8003b9c:	940d      	str	r4, [sp, #52]	; 0x34
 8003b9e:	940e      	str	r4, [sp, #56]	; 0x38
 8003ba0:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ba2:	4b5e      	ldr	r3, [pc, #376]	; (8003d1c <MX_GPIO_Init+0x18c>)
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	f042 0210 	orr.w	r2, r2, #16
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	f002 0210 	and.w	r2, r2, #16
 8003bb2:	9200      	str	r2, [sp, #0]
 8003bb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb8:	f042 0202 	orr.w	r2, r2, #2
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc0:	f002 0202 	and.w	r2, r2, #2
 8003bc4:	9201      	str	r2, [sp, #4]
 8003bc6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	f002 0201 	and.w	r2, r2, #1
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003be8:	9203      	str	r2, [sp, #12]
 8003bea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf6:	f002 0208 	and.w	r2, r2, #8
 8003bfa:	9204      	str	r2, [sp, #16]
 8003bfc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003c0c:	9205      	str	r2, [sp, #20]
 8003c0e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
 8003c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003c1e:	9206      	str	r2, [sp, #24]
 8003c20:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c24:	f042 0220 	orr.w	r2, r2, #32
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2c:	f002 0220 	and.w	r2, r2, #32
 8003c30:	9207      	str	r2, [sp, #28]
 8003c32:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003c42:	9208      	str	r2, [sp, #32]
 8003c44:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c48:	f042 0204 	orr.w	r2, r2, #4
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	f002 0204 	and.w	r2, r2, #4
 8003c54:	9209      	str	r2, [sp, #36]	; 0x24
 8003c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	930a      	str	r3, [sp, #40]	; 0x28
 8003c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8003c6a:	4f2d      	ldr	r7, [pc, #180]	; (8003d20 <MX_GPIO_Init+0x190>)
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8003c72:	4638      	mov	r0, r7
 8003c74:	f7fe fa35 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 8003c78:	2310      	movs	r3, #16
 8003c7a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c7c:	4e29      	ldr	r6, [pc, #164]	; (8003d24 <MX_GPIO_Init+0x194>)
 8003c7e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c80:	2501      	movs	r5, #1
 8003c82:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 8003c84:	a90b      	add	r1, sp, #44	; 0x2c
 8003c86:	4828      	ldr	r0, [pc, #160]	; (8003d28 <MX_GPIO_Init+0x198>)
 8003c88:	f7fe f934 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8003c8c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003c90:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c92:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	a90b      	add	r1, sp, #44	; 0x2c
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7fe f929 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC3_B_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 8003ca2:	230d      	movs	r3, #13
 8003ca4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003caa:	a90b      	add	r1, sp, #44	; 0x2c
 8003cac:	481f      	ldr	r0, [pc, #124]	; (8003d2c <MX_GPIO_Init+0x19c>)
 8003cae:	f7fe f921 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 8003cb2:	2740      	movs	r7, #64	; 0x40
 8003cb4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 8003cba:	a90b      	add	r1, sp, #44	; 0x2c
 8003cbc:	481c      	ldr	r0, [pc, #112]	; (8003d30 <MX_GPIO_Init+0x1a0>)
 8003cbe:	f7fe f919 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8003cc2:	f04f 0880 	mov.w	r8, #128	; 0x80
 8003cc6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ccc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8003cce:	a90b      	add	r1, sp, #44	; 0x2c
 8003cd0:	4818      	ldr	r0, [pc, #96]	; (8003d34 <MX_GPIO_Init+0x1a4>)
 8003cd2:	f7fe f90f 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 8003cd6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cda:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cdc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 8003cde:	a90b      	add	r1, sp, #44	; 0x2c
 8003ce0:	4815      	ldr	r0, [pc, #84]	; (8003d38 <MX_GPIO_Init+0x1a8>)
 8003ce2:	f7fe f907 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 8003ce6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ce8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cea:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8003cec:	a90b      	add	r1, sp, #44	; 0x2c
 8003cee:	4813      	ldr	r0, [pc, #76]	; (8003d3c <MX_GPIO_Init+0x1ac>)
 8003cf0:	f7fe f900 	bl	8001ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	200a      	movs	r0, #10
 8003cfa:	f7fd fd97 	bl	800182c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003cfe:	200a      	movs	r0, #10
 8003d00:	f7fd fdc6 	bl	8001890 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d04:	4622      	mov	r2, r4
 8003d06:	4621      	mov	r1, r4
 8003d08:	2017      	movs	r0, #23
 8003d0a:	f7fd fd8f 	bl	800182c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d0e:	2017      	movs	r0, #23
 8003d10:	f7fd fdbe 	bl	8001890 <HAL_NVIC_EnableIRQ>

}
 8003d14:	b010      	add	sp, #64	; 0x40
 8003d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	10110000 	.word	0x10110000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40020800 	.word	0x40020800
 8003d34:	40021800 	.word	0x40021800
 8003d38:	40021400 	.word	0x40021400
 8003d3c:	40021c00 	.word	0x40021c00

08003d40 <MX_DMA_Init>:
{
 8003d40:	b500      	push	{lr}
 8003d42:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <MX_DMA_Init+0x30>)
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	2038      	movs	r0, #56	; 0x38
 8003d5e:	f7fd fd65 	bl	800182c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003d62:	2038      	movs	r0, #56	; 0x38
 8003d64:	f7fd fd94 	bl	8001890 <HAL_NVIC_EnableIRQ>
}
 8003d68:	b003      	add	sp, #12
 8003d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <MX_SPI2_Init>:
{
 8003d74:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8003d76:	480e      	ldr	r0, [pc, #56]	; (8003db0 <MX_SPI2_Init+0x3c>)
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_SPI2_Init+0x40>)
 8003d7a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d7c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003d80:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d82:	2300      	movs	r3, #0
 8003d84:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d8a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d8e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d94:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003d96:	2220      	movs	r2, #32
 8003d98:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d9a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d9c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003da0:	2207      	movs	r2, #7
 8003da2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003da4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003da6:	2308      	movs	r3, #8
 8003da8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003daa:	f7ff f9da 	bl	8003162 <HAL_SPI_Init>
}
 8003dae:	bd08      	pop	{r3, pc}
 8003db0:	20000224 	.word	0x20000224
 8003db4:	40003800 	.word	0x40003800

08003db8 <MX_USART1_UART_Init>:
{
 8003db8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003dba:	4809      	ldr	r0, [pc, #36]	; (8003de0 <MX_USART1_UART_Init+0x28>)
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <MX_USART1_UART_Init+0x2c>)
 8003dbe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003dc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dc4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dcc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dce:	220c      	movs	r2, #12
 8003dd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dd6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dd8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dda:	f7ff fe22 	bl	8003a22 <HAL_UART_Init>
}
 8003dde:	bd08      	pop	{r3, pc}
 8003de0:	2000048c 	.word	0x2000048c
 8003de4:	40011000 	.word	0x40011000

08003de8 <MX_ADC3_Init>:
{
 8003de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dea:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dec:	2500      	movs	r5, #0
 8003dee:	9500      	str	r5, [sp, #0]
 8003df0:	9501      	str	r5, [sp, #4]
 8003df2:	9502      	str	r5, [sp, #8]
 8003df4:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 8003df6:	4c1d      	ldr	r4, [pc, #116]	; (8003e6c <MX_ADC3_Init+0x84>)
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <MX_ADC3_Init+0x88>)
 8003dfa:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e00:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003e02:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8003e04:	2601      	movs	r6, #1
 8003e06:	6126      	str	r6, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003e08:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003e0a:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8003e0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003e12:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8003e14:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
 8003e18:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e1a:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 4;
 8003e1c:	2704      	movs	r7, #4
 8003e1e:	61e7      	str	r7, [r4, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003e20:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003e24:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7fd f9b2 	bl	8001190 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8003e2c:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e2e:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003e30:	2506      	movs	r5, #6
 8003e32:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e34:	4669      	mov	r1, sp
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7fd fc0e 	bl	8001658 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8003e3c:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e42:	4669      	mov	r1, sp
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7fd fc07 	bl	8001658 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e52:	4669      	mov	r1, sp
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7fd fbff 	bl	8001658 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003e5e:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e60:	4669      	mov	r1, sp
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7fd fbf8 	bl	8001658 <HAL_ADC_ConfigChannel>
}
 8003e68:	b005      	add	sp, #20
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6c:	20000444 	.word	0x20000444
 8003e70:	40012200 	.word	0x40012200

08003e74 <MX_CRC_Init>:
{
 8003e74:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8003e76:	4806      	ldr	r0, [pc, #24]	; (8003e90 <MX_CRC_Init+0x1c>)
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <MX_CRC_Init+0x20>)
 8003e7a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003e80:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003e82:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003e84:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003e86:	2301      	movs	r3, #1
 8003e88:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003e8a:	f7fd fd25 	bl	80018d8 <HAL_CRC_Init>
}
 8003e8e:	bd08      	pop	{r3, pc}
 8003e90:	200002b8 	.word	0x200002b8
 8003e94:	40023000 	.word	0x40023000

08003e98 <MX_DMA2D_Init>:
{
 8003e98:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8003e9a:	4c09      	ldr	r4, [pc, #36]	; (8003ec0 <MX_DMA2D_Init+0x28>)
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <MX_DMA2D_Init+0x2c>)
 8003e9e:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003ea4:	60a3      	str	r3, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8003ea6:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003ea8:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003eac:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003eae:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7fd ff8f 	bl	8001dd4 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7fd ffb9 	bl	8001e30 <HAL_DMA2D_ConfigLayer>
}
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	20000574 	.word	0x20000574
 8003ec4:	4002b000 	.word	0x4002b000

08003ec8 <MX_FMC_Init>:
{
 8003ec8:	b500      	push	{lr}
 8003eca:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ecc:	480e      	ldr	r0, [pc, #56]	; (8003f08 <MX_FMC_Init+0x40>)
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <MX_FMC_Init+0x44>)
 8003ed0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003ed6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8003ed8:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003eda:	2310      	movs	r3, #16
 8003edc:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8003ede:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003ee4:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003ee6:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003ee8:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003eea:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8003eec:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8003eee:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8003ef0:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8003ef2:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8003ef4:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 8003ef6:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 8003ef8:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003efa:	a901      	add	r1, sp, #4
 8003efc:	f7ff f912 	bl	8003124 <HAL_SDRAM_Init>
}
 8003f00:	b009      	add	sp, #36	; 0x24
 8003f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f06:	bf00      	nop
 8003f08:	200005b4 	.word	0x200005b4
 8003f0c:	a0000140 	.word	0xa0000140

08003f10 <MX_LTDC_Init>:
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003f14:	2434      	movs	r4, #52	; 0x34
 8003f16:	4622      	mov	r2, r4
 8003f18:	2100      	movs	r1, #0
 8003f1a:	eb0d 0004 	add.w	r0, sp, r4
 8003f1e:	f000 fe24 	bl	8004b6a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003f22:	4622      	mov	r2, r4
 8003f24:	2100      	movs	r1, #0
 8003f26:	4668      	mov	r0, sp
 8003f28:	f000 fe1f 	bl	8004b6a <memset>
  hltdc.Instance = LTDC;
 8003f2c:	4d2b      	ldr	r5, [pc, #172]	; (8003fdc <MX_LTDC_Init+0xcc>)
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	; (8003fe0 <MX_LTDC_Init+0xd0>)
 8003f30:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003f32:	2400      	movs	r4, #0
 8003f34:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003f36:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003f38:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003f3a:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 8003f40:	2303      	movs	r3, #3
 8003f42:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003f44:	230e      	movs	r3, #14
 8003f46:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003f48:	2605      	movs	r6, #5
 8003f4a:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003f4c:	f240 238e 	movw	r3, #654	; 0x28e
 8003f50:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003f52:	f240 13e5 	movw	r3, #485	; 0x1e5
 8003f56:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8003f58:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003f5c:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003f5e:	f240 13e7 	movw	r3, #487	; 0x1e7
 8003f62:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003f64:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003f68:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003f6c:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fe f995 	bl	80022a0 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8003f76:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8003f78:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003f7a:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003f7c:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003f7e:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8003f80:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003f82:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003f84:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003f88:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003f8a:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003f8c:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003f8e:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003f90:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003f92:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003f96:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003f9a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	a90d      	add	r1, sp, #52	; 0x34
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f7fe fa66 	bl	8002474 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 8003fa8:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 8003faa:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8003fac:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 8003fae:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003fb0:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8003fb2:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8003fb4:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003fb6:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003fb8:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003fba:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8003fbc:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003fbe:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003fc0:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003fc4:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003fc8:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4669      	mov	r1, sp
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f7fe fa4f 	bl	8002474 <HAL_LTDC_ConfigLayer>
}
 8003fd6:	b01b      	add	sp, #108	; 0x6c
 8003fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000039c 	.word	0x2000039c
 8003fe0:	40016800 	.word	0x40016800

08003fe4 <MX_TIM1_Init>:
{
 8003fe4:	b530      	push	{r4, r5, lr}
 8003fe6:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fe8:	2400      	movs	r4, #0
 8003fea:	9404      	str	r4, [sp, #16]
 8003fec:	9405      	str	r4, [sp, #20]
 8003fee:	9406      	str	r4, [sp, #24]
 8003ff0:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff2:	9401      	str	r4, [sp, #4]
 8003ff4:	9402      	str	r4, [sp, #8]
 8003ff6:	9403      	str	r4, [sp, #12]
  htim1.Instance = TIM1;
 8003ff8:	4d10      	ldr	r5, [pc, #64]	; (800403c <MX_TIM1_Init+0x58>)
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <MX_TIM1_Init+0x5c>)
 8003ffc:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 100-1;
 8003ffe:	2363      	movs	r3, #99	; 0x63
 8004000:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004002:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 216-1;
 8004004:	23d7      	movs	r3, #215	; 0xd7
 8004006:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004008:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800400a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800400e:	4628      	mov	r0, r5
 8004010:	f7ff f9d2 	bl	80033b8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800401a:	a904      	add	r1, sp, #16
 800401c:	4628      	mov	r0, r5
 800401e:	f7ff f9f1 	bl	8003404 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004022:	2320      	movs	r3, #32
 8004024:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004026:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800402a:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402c:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800402e:	a901      	add	r1, sp, #4
 8004030:	4628      	mov	r0, r5
 8004032:	f7ff fa55 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004036:	b009      	add	sp, #36	; 0x24
 8004038:	bd30      	pop	{r4, r5, pc}
 800403a:	bf00      	nop
 800403c:	20000534 	.word	0x20000534
 8004040:	40010000 	.word	0x40010000

08004044 <SystemClock_Config>:
{
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004048:	2230      	movs	r2, #48	; 0x30
 800404a:	2100      	movs	r1, #0
 800404c:	a828      	add	r0, sp, #160	; 0xa0
 800404e:	f000 fd8c 	bl	8004b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004052:	2400      	movs	r4, #0
 8004054:	9423      	str	r4, [sp, #140]	; 0x8c
 8004056:	9424      	str	r4, [sp, #144]	; 0x90
 8004058:	9425      	str	r4, [sp, #148]	; 0x94
 800405a:	9426      	str	r4, [sp, #152]	; 0x98
 800405c:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800405e:	2284      	movs	r2, #132	; 0x84
 8004060:	4621      	mov	r1, r4
 8004062:	a802      	add	r0, sp, #8
 8004064:	f000 fd81 	bl	8004b6a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <SystemClock_Config+0xc0>)
 800406a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <SystemClock_Config+0xc4>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004090:	2601      	movs	r6, #1
 8004092:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004098:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409a:	2502      	movs	r5, #2
 800409c:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800409e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a2:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80040a4:	2319      	movs	r3, #25
 80040a6:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80040a8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80040ac:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040ae:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80040b0:	2309      	movs	r3, #9
 80040b2:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b4:	a828      	add	r0, sp, #160	; 0xa0
 80040b6:	f7fe fa49 	bl	800254c <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040ba:	f7fe fa09 	bl	80024d0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040be:	230f      	movs	r3, #15
 80040c0:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040c2:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c4:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040ca:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d0:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80040d2:	2107      	movs	r1, #7
 80040d4:	a823      	add	r0, sp, #140	; 0x8c
 80040d6:	f7fe fc77 	bl	80029c8 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 80040da:	2348      	movs	r3, #72	; 0x48
 80040dc:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80040de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040e2:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80040e4:	2305      	movs	r3, #5
 80040e6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80040e8:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80040ea:	2303      	movs	r3, #3
 80040ec:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80040ee:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80040f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f4:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040f6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040f8:	a802      	add	r0, sp, #8
 80040fa:	f7fe fd3d 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
}
 80040fe:	b034      	add	sp, #208	; 0xd0
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000

0800410c <main>:
{
 800410c:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800410e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004112:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <main+0xc4>)
 8004118:	2100      	movs	r1, #0
 800411a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800411e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004122:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800412c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800412e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004132:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004136:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800413a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800413e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004142:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8004146:	e00f      	b.n	8004168 <main+0x5c>
      } while (ways-- != 0U);
 8004148:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800414a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800414e:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8004152:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8004156:	481e      	ldr	r0, [pc, #120]	; (80041d0 <main+0xc4>)
 8004158:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800415c:	1e53      	subs	r3, r2, #1
 800415e:	2a00      	cmp	r2, #0
 8004160:	d1f2      	bne.n	8004148 <main+0x3c>
    } while(sets-- != 0U);
 8004162:	1e4b      	subs	r3, r1, #1
 8004164:	b119      	cbz	r1, 800416e <main+0x62>
 8004166:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004168:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800416c:	e7ed      	b.n	800414a <main+0x3e>
 800416e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004172:	6943      	ldr	r3, [r0, #20]
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	6143      	str	r3, [r0, #20]
 800417a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800417e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004182:	f7fc ff47 	bl	8001014 <HAL_Init>
  SystemClock_Config();
 8004186:	f7ff ff5d 	bl	8004044 <SystemClock_Config>
  MX_GPIO_Init();
 800418a:	f7ff fd01 	bl	8003b90 <MX_GPIO_Init>
  MX_DMA_Init();
 800418e:	f7ff fdd7 	bl	8003d40 <MX_DMA_Init>
  MX_SPI2_Init();
 8004192:	f7ff fdef 	bl	8003d74 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004196:	f7ff fe0f 	bl	8003db8 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 800419a:	f7ff fe25 	bl	8003de8 <MX_ADC3_Init>
  MX_CRC_Init();
 800419e:	f7ff fe69 	bl	8003e74 <MX_CRC_Init>
  MX_DMA2D_Init();
 80041a2:	f7ff fe79 	bl	8003e98 <MX_DMA2D_Init>
  MX_FMC_Init();
 80041a6:	f7ff fe8f 	bl	8003ec8 <MX_FMC_Init>
  MX_LTDC_Init();
 80041aa:	f7ff feb1 	bl	8003f10 <MX_LTDC_Init>
  MX_TIM1_Init();
 80041ae:	f7ff ff19 	bl	8003fe4 <MX_TIM1_Init>
  if( HAL_ADC_Start(&hadc3) == HAL_OK) {
 80041b2:	4808      	ldr	r0, [pc, #32]	; (80041d4 <main+0xc8>)
 80041b4:	f7fd f818 	bl	80011e8 <HAL_ADC_Start>
 80041b8:	b100      	cbz	r0, 80041bc <main+0xb0>
 80041ba:	e7fe      	b.n	80041ba <main+0xae>
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)adcArray, 4);
 80041bc:	2204      	movs	r2, #4
 80041be:	4906      	ldr	r1, [pc, #24]	; (80041d8 <main+0xcc>)
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <main+0xc8>)
 80041c2:	f7fd f8a3 	bl	800130c <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start(&htim1);
 80041c6:	4805      	ldr	r0, [pc, #20]	; (80041dc <main+0xd0>)
 80041c8:	f7ff f858 	bl	800327c <HAL_TIM_Base_Start>
 80041cc:	e7f5      	b.n	80041ba <main+0xae>
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00
 80041d4:	20000444 	.word	0x20000444
 80041d8:	200002a8 	.word	0x200002a8
 80041dc:	20000534 	.word	0x20000534

080041e0 <read_rotary_1>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 80041e0:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_1 <<= 2;
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <read_rotary_1+0x70>)
 80041e4:	7813      	ldrb	r3, [r2, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	4819      	ldr	r0, [pc, #100]	; (8004254 <read_rotary_1+0x74>)
 80041ee:	f7fd ff71 	bl	80020d4 <HAL_GPIO_ReadPin>
 80041f2:	2801      	cmp	r0, #1
 80041f4:	d01a      	beq.n	800422c <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	4817      	ldr	r0, [pc, #92]	; (8004258 <read_rotary_1+0x78>)
 80041fa:	f7fd ff6b 	bl	80020d4 <HAL_GPIO_ReadPin>
 80041fe:	2801      	cmp	r0, #1
 8004200:	d01a      	beq.n	8004238 <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 8004202:	4913      	ldr	r1, [pc, #76]	; (8004250 <read_rotary_1+0x70>)
 8004204:	780b      	ldrb	r3, [r1, #0]
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_1] ) {
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <read_rotary_1+0x7c>)
 800420e:	5698      	ldrsb	r0, [r3, r2]
 8004210:	b158      	cbz	r0, 800422a <read_rotary_1+0x4a>
		store_1 <<= 4;
 8004212:	4913      	ldr	r1, [pc, #76]	; (8004260 <read_rotary_1+0x80>)
 8004214:	880b      	ldrh	r3, [r1, #0]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 800421a:	4313      	orrs	r3, r2
 800421c:	800b      	strh	r3, [r1, #0]
 800421e:	b2db      	uxtb	r3, r3

		if ((store_1&0xff)==0x2b) return -1;
 8004220:	2b2b      	cmp	r3, #43	; 0x2b
 8004222:	d011      	beq.n	8004248 <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 8004224:	2b17      	cmp	r3, #23
 8004226:	d00d      	beq.n	8004244 <read_rotary_1+0x64>
	}
	return 0;
 8004228:	2000      	movs	r0, #0
}
 800422a:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <read_rotary_1+0x70>)
 800422e:	7813      	ldrb	r3, [r2, #0]
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	7013      	strb	r3, [r2, #0]
 8004236:	e7de      	b.n	80041f6 <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8004238:	4a05      	ldr	r2, [pc, #20]	; (8004250 <read_rotary_1+0x70>)
 800423a:	7813      	ldrb	r3, [r2, #0]
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	7013      	strb	r3, [r2, #0]
 8004242:	e7de      	b.n	8004202 <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 8004244:	2001      	movs	r0, #1
 8004246:	e7f0      	b.n	800422a <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8004248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800424c:	e7ed      	b.n	800422a <read_rotary_1+0x4a>
 800424e:	bf00      	nop
 8004250:	200001f8 	.word	0x200001f8
 8004254:	40021400 	.word	0x40021400
 8004258:	40020800 	.word	0x40020800
 800425c:	080085f8 	.word	0x080085f8
 8004260:	20000208 	.word	0x20000208

08004264 <read_rotary_2>:


// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 8004264:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_2 <<= 2;
 8004266:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <read_rotary_2+0x70>)
 8004268:	7813      	ldrb	r3, [r2, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 800426e:	2110      	movs	r1, #16
 8004270:	4819      	ldr	r0, [pc, #100]	; (80042d8 <read_rotary_2+0x74>)
 8004272:	f7fd ff2f 	bl	80020d4 <HAL_GPIO_ReadPin>
 8004276:	2801      	cmp	r0, #1
 8004278:	d01a      	beq.n	80042b0 <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	4817      	ldr	r0, [pc, #92]	; (80042dc <read_rotary_2+0x78>)
 800427e:	f7fd ff29 	bl	80020d4 <HAL_GPIO_ReadPin>
 8004282:	2801      	cmp	r0, #1
 8004284:	d01a      	beq.n	80042bc <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 8004286:	4913      	ldr	r1, [pc, #76]	; (80042d4 <read_rotary_2+0x70>)
 8004288:	780b      	ldrb	r3, [r1, #0]
 800428a:	f003 020f 	and.w	r2, r3, #15
 800428e:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if  (rot_enc_table[prevNextCode_2] ) {
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <read_rotary_2+0x7c>)
 8004292:	5698      	ldrsb	r0, [r3, r2]
 8004294:	b158      	cbz	r0, 80042ae <read_rotary_2+0x4a>
		store_2 <<= 4;
 8004296:	4913      	ldr	r1, [pc, #76]	; (80042e4 <read_rotary_2+0x80>)
 8004298:	880b      	ldrh	r3, [r1, #0]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 800429e:	4313      	orrs	r3, r2
 80042a0:	800b      	strh	r3, [r1, #0]
 80042a2:	b2db      	uxtb	r3, r3

		if ((store_2&0xff)==0x2b) return -1;
 80042a4:	2b2b      	cmp	r3, #43	; 0x2b
 80042a6:	d011      	beq.n	80042cc <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 80042a8:	2b17      	cmp	r3, #23
 80042aa:	d00d      	beq.n	80042c8 <read_rotary_2+0x64>
	}
	return 0;
 80042ac:	2000      	movs	r0, #0
}
 80042ae:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <read_rotary_2+0x70>)
 80042b2:	7813      	ldrb	r3, [r2, #0]
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	7013      	strb	r3, [r2, #0]
 80042ba:	e7de      	b.n	800427a <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 80042bc:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <read_rotary_2+0x70>)
 80042be:	7813      	ldrb	r3, [r2, #0]
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	7013      	strb	r3, [r2, #0]
 80042c6:	e7de      	b.n	8004286 <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 80042c8:	2001      	movs	r0, #1
 80042ca:	e7f0      	b.n	80042ae <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d0:	e7ed      	b.n	80042ae <read_rotary_2+0x4a>
 80042d2:	bf00      	nop
 80042d4:	200001f9 	.word	0x200001f9
 80042d8:	40020400 	.word	0x40020400
 80042dc:	40021800 	.word	0x40021800
 80042e0:	08008608 	.word	0x08008608
 80042e4:	2000020a 	.word	0x2000020a

080042e8 <read_rotary_3>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 80042e8:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_3 <<= 2;
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <read_rotary_3+0x70>)
 80042ec:	7813      	ldrb	r3, [r2, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 80042f2:	2140      	movs	r1, #64	; 0x40
 80042f4:	4819      	ldr	r0, [pc, #100]	; (800435c <read_rotary_3+0x74>)
 80042f6:	f7fd feed 	bl	80020d4 <HAL_GPIO_ReadPin>
 80042fa:	2801      	cmp	r0, #1
 80042fc:	d01a      	beq.n	8004334 <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 80042fe:	2108      	movs	r1, #8
 8004300:	4817      	ldr	r0, [pc, #92]	; (8004360 <read_rotary_3+0x78>)
 8004302:	f7fd fee7 	bl	80020d4 <HAL_GPIO_ReadPin>
 8004306:	2801      	cmp	r0, #1
 8004308:	d01a      	beq.n	8004340 <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 800430a:	4913      	ldr	r1, [pc, #76]	; (8004358 <read_rotary_3+0x70>)
 800430c:	780b      	ldrb	r3, [r1, #0]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_3] ) {
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <read_rotary_3+0x7c>)
 8004316:	5698      	ldrsb	r0, [r3, r2]
 8004318:	b158      	cbz	r0, 8004332 <read_rotary_3+0x4a>
		store_3 <<= 4;
 800431a:	4913      	ldr	r1, [pc, #76]	; (8004368 <read_rotary_3+0x80>)
 800431c:	880b      	ldrh	r3, [r1, #0]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 8004322:	4313      	orrs	r3, r2
 8004324:	800b      	strh	r3, [r1, #0]
 8004326:	b2db      	uxtb	r3, r3

		if ((store_3&0xff)==0x2b) return -1;
 8004328:	2b2b      	cmp	r3, #43	; 0x2b
 800432a:	d011      	beq.n	8004350 <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 800432c:	2b17      	cmp	r3, #23
 800432e:	d00d      	beq.n	800434c <read_rotary_3+0x64>
	}
	return 0;
 8004330:	2000      	movs	r0, #0
}
 8004332:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <read_rotary_3+0x70>)
 8004336:	7813      	ldrb	r3, [r2, #0]
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	7013      	strb	r3, [r2, #0]
 800433e:	e7de      	b.n	80042fe <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8004340:	4a05      	ldr	r2, [pc, #20]	; (8004358 <read_rotary_3+0x70>)
 8004342:	7813      	ldrb	r3, [r2, #0]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	7013      	strb	r3, [r2, #0]
 800434a:	e7de      	b.n	800430a <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 800434c:	2001      	movs	r0, #1
 800434e:	e7f0      	b.n	8004332 <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 8004350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004354:	e7ed      	b.n	8004332 <read_rotary_3+0x4a>
 8004356:	bf00      	nop
 8004358:	200001fa 	.word	0x200001fa
 800435c:	40021c00 	.word	0x40021c00
 8004360:	40022000 	.word	0x40022000
 8004364:	08008618 	.word	0x08008618
 8004368:	2000020c 	.word	0x2000020c

0800436c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800436c:	b510      	push	{r4, lr}
 800436e:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8004370:	2880      	cmp	r0, #128	; 0x80
 8004372:	d004      	beq.n	800437e <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8004374:	2c10      	cmp	r4, #16
 8004376:	d025      	beq.n	80043c4 <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8004378:	2c40      	cmp	r4, #64	; 0x40
 800437a:	d046      	beq.n	800440a <HAL_GPIO_EXTI_Callback+0x9e>
}
 800437c:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 800437e:	f7ff ff2f 	bl	80041e0 <read_rotary_1>
 8004382:	2800      	cmp	r0, #0
 8004384:	d0f6      	beq.n	8004374 <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 8004386:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b0b      	cmp	r3, #11
 800438c:	d00b      	beq.n	80043a6 <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 800438e:	2b07      	cmp	r3, #7
 8004390:	d1f0      	bne.n	8004374 <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_GPIO_EXTI_Callback+0xe8>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800439c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043a0:	edc3 7a00 	vstr	s15, [r3]
 80043a4:	e7e6      	b.n	8004374 <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 80043a6:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <HAL_GPIO_EXTI_Callback+0xe8>)
 80043a8:	edd2 7a00 	vldr	s15, [r2]
 80043ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	ddeb      	ble.n	800438e <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 80043b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043be:	edc2 7a00 	vstr	s15, [r2]
 80043c2:	e7e4      	b.n	800438e <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 80043c4:	f7ff ff4e 	bl	8004264 <read_rotary_2>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d0d5      	beq.n	8004378 <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_GPIO_EXTI_Callback+0xec>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b0b      	cmp	r3, #11
 80043d2:	d00b      	beq.n	80043ec <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 80043d4:	2b07      	cmp	r3, #7
 80043d6:	d1cf      	bne.n	8004378 <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_GPIO_EXTI_Callback+0xf0>)
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043e6:	edc3 7a00 	vstr	s15, [r3]
 80043ea:	e7c5      	b.n	8004378 <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_GPIO_EXTI_Callback+0xf0>)
 80043ee:	edd2 7a00 	vldr	s15, [r2]
 80043f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	ddeb      	ble.n	80043d4 <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 80043fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004404:	edc2 7a00 	vstr	s15, [r2]
 8004408:	e7e4      	b.n	80043d4 <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 800440a:	f7ff ff6d 	bl	80042e8 <read_rotary_3>
 800440e:	2800      	cmp	r0, #0
 8004410:	d0b4      	beq.n	800437c <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b0b      	cmp	r3, #11
 8004418:	d00b      	beq.n	8004432 <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 800441a:	2b07      	cmp	r3, #7
 800441c:	d1ae      	bne.n	800437c <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004420:	edd3 7a00 	vldr	s15, [r3]
 8004424:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800442c:	edc3 7a00 	vstr	s15, [r3]
}
 8004430:	e7a4      	b.n	800437c <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004434:	edd2 7a00 	vldr	s15, [r2]
 8004438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	ddeb      	ble.n	800441a <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 8004442:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444a:	edc2 7a00 	vstr	s15, [r2]
 800444e:	e7e4      	b.n	800441a <HAL_GPIO_EXTI_Callback+0xae>
 8004450:	200001f8 	.word	0x200001f8
 8004454:	200001fc 	.word	0x200001fc
 8004458:	200001f9 	.word	0x200001f9
 800445c:	20000200 	.word	0x20000200
 8004460:	200001fa 	.word	0x200001fa
 8004464:	20000204 	.word	0x20000204

08004468 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){




}
 8004468:	4770      	bx	lr

0800446a <HAL_ADC_ErrorCallback>:





}
 800446a:	4770      	bx	lr

0800446c <HAL_ADC_ConvHalfCpltCallback>:



	    }

}
 800446c:	4770      	bx	lr

0800446e <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800446e:	4770      	bx	lr

08004470 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004474:	2300      	movs	r3, #0
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_FMC_MspInit+0xa8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b10b      	cbz	r3, 800448a <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004486:	b007      	add	sp, #28
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_FMC_MspInit+0xa8>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_FMC_MspInit+0xac>)
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80044a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80044a8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2602      	movs	r6, #2
 80044ac:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2503      	movs	r5, #3
 80044b0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044b2:	240c      	movs	r4, #12
 80044b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044b6:	a901      	add	r1, sp, #4
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <HAL_FMC_MspInit+0xb0>)
 80044ba:	f7fd fd1b 	bl	8001ef4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 80044be:	f248 1311 	movw	r3, #33041	; 0x8111
 80044c2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2700      	movs	r7, #0
 80044c8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044cc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044ce:	a901      	add	r1, sp, #4
 80044d0:	4814      	ldr	r0, [pc, #80]	; (8004524 <HAL_FMC_MspInit+0xb4>)
 80044d2:	f7fd fd0f 	bl	8001ef4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80044d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80044da:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044e2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e4:	a901      	add	r1, sp, #4
 80044e6:	4810      	ldr	r0, [pc, #64]	; (8004528 <HAL_FMC_MspInit+0xb8>)
 80044e8:	f7fd fd04 	bl	8001ef4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80044ec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80044f0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044fa:	a901      	add	r1, sp, #4
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <HAL_FMC_MspInit+0xbc>)
 80044fe:	f7fd fcf9 	bl	8001ef4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8004502:	232c      	movs	r3, #44	; 0x2c
 8004504:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800450c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800450e:	a901      	add	r1, sp, #4
 8004510:	4807      	ldr	r0, [pc, #28]	; (8004530 <HAL_FMC_MspInit+0xc0>)
 8004512:	f7fd fcef 	bl	8001ef4 <HAL_GPIO_Init>
 8004516:	e7b6      	b.n	8004486 <HAL_FMC_MspInit+0x16>
 8004518:	20000210 	.word	0x20000210
 800451c:	40023800 	.word	0x40023800
 8004520:	40021000 	.word	0x40021000
 8004524:	40021800 	.word	0x40021800
 8004528:	40020c00 	.word	0x40020c00
 800452c:	40021400 	.word	0x40021400
 8004530:	40021c00 	.word	0x40021c00

08004534 <HAL_MspInit>:
{
 8004534:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <HAL_MspInit+0x2c>)
 8004538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004546:	9200      	str	r2, [sp, #0]
 8004548:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	9b01      	ldr	r3, [sp, #4]
}
 800455c:	b002      	add	sp, #8
 800455e:	4770      	bx	lr
 8004560:	40023800 	.word	0x40023800

08004564 <HAL_ADC_MspInit>:
{
 8004564:	b530      	push	{r4, r5, lr}
 8004566:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	2300      	movs	r3, #0
 800456a:	9303      	str	r3, [sp, #12]
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	9306      	str	r3, [sp, #24]
 8004572:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8004574:	6802      	ldr	r2, [r0, #0]
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_ADC_MspInit+0xcc>)
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_ADC_MspInit+0x1c>
}
 800457c:	b009      	add	sp, #36	; 0x24
 800457e:	bd30      	pop	{r4, r5, pc}
 8004580:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004582:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8004586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
 800458e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004590:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004594:	9200      	str	r2, [sp, #0]
 8004596:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
 80045a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a2:	f002 0220 	and.w	r2, r2, #32
 80045a6:	9201      	str	r2, [sp, #4]
 80045a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	9302      	str	r3, [sp, #8]
 80045ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 80045bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80045c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c2:	2503      	movs	r5, #3
 80045c4:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045c6:	a903      	add	r1, sp, #12
 80045c8:	481a      	ldr	r0, [pc, #104]	; (8004634 <HAL_ADC_MspInit+0xd0>)
 80045ca:	f7fd fc93 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 80045ce:	2301      	movs	r3, #1
 80045d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2500      	movs	r5, #0
 80045d6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 80045d8:	a903      	add	r1, sp, #12
 80045da:	4817      	ldr	r0, [pc, #92]	; (8004638 <HAL_ADC_MspInit+0xd4>)
 80045dc:	f7fd fc8a 	bl	8001ef4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80045e0:	4816      	ldr	r0, [pc, #88]	; (800463c <HAL_ADC_MspInit+0xd8>)
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <HAL_ADC_MspInit+0xdc>)
 80045e4:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80045e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045ea:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ec:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ee:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80045f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f4:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045fa:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004600:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004606:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004608:	6205      	str	r5, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800460a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800460c:	f7fd fa54 	bl	8001ab8 <HAL_DMA_Init>
 8004610:	b958      	cbnz	r0, 800462a <HAL_ADC_MspInit+0xc6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_ADC_MspInit+0xd8>)
 8004614:	63a3      	str	r3, [r4, #56]	; 0x38
 8004616:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004618:	2200      	movs	r2, #0
 800461a:	4611      	mov	r1, r2
 800461c:	2012      	movs	r0, #18
 800461e:	f7fd f905 	bl	800182c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004622:	2012      	movs	r0, #18
 8004624:	f7fd f934 	bl	8001890 <HAL_NVIC_EnableIRQ>
}
 8004628:	e7a8      	b.n	800457c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800462a:	f7ff ff20 	bl	800446e <Error_Handler>
 800462e:	e7f0      	b.n	8004612 <HAL_ADC_MspInit+0xae>
 8004630:	40012200 	.word	0x40012200
 8004634:	40021400 	.word	0x40021400
 8004638:	40020000 	.word	0x40020000
 800463c:	20000320 	.word	0x20000320
 8004640:	40026410 	.word	0x40026410

08004644 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8004644:	6802      	ldr	r2, [r0, #0]
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_CRC_MspInit+0x28>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d000      	beq.n	800464e <HAL_CRC_MspInit+0xa>
 800464c:	4770      	bx	lr
{
 800464e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	9b01      	ldr	r3, [sp, #4]
}
 8004666:	b002      	add	sp, #8
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023000 	.word	0x40023000

08004670 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8004670:	6802      	ldr	r2, [r0, #0]
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_DMA2D_MspInit+0x28>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d000      	beq.n	800467a <HAL_DMA2D_MspInit+0xa>
 8004678:	4770      	bx	lr
{
 800467a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800467c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	9b01      	ldr	r3, [sp, #4]
}
 8004692:	b002      	add	sp, #8
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	4002b000 	.word	0x4002b000

0800469c <HAL_LTDC_MspInit>:
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	2300      	movs	r3, #0
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	930a      	str	r3, [sp, #40]	; 0x28
 80046a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a8:	930c      	str	r3, [sp, #48]	; 0x30
 80046aa:	930d      	str	r3, [sp, #52]	; 0x34
  if(hltdc->Instance==LTDC)
 80046ac:	6802      	ldr	r2, [r0, #0]
 80046ae:	4b62      	ldr	r3, [pc, #392]	; (8004838 <HAL_LTDC_MspInit+0x19c>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_LTDC_MspInit+0x1c>
}
 80046b4:	b00f      	add	sp, #60	; 0x3c
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80046b8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80046bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d0:	f042 0202 	orr.w	r2, r2, #2
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	f002 0202 	and.w	r2, r2, #2
 80046dc:	9201      	str	r2, [sp, #4]
 80046de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
 80046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80046ee:	9202      	str	r2, [sp, #8]
 80046f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
 80046fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fc:	f002 0201 	and.w	r2, r2, #1
 8004700:	9203      	str	r2, [sp, #12]
 8004702:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
 800470c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004712:	9204      	str	r2, [sp, #16]
 8004714:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004724:	9205      	str	r2, [sp, #20]
 8004726:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
 8004730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004732:	f002 0208 	and.w	r2, r2, #8
 8004736:	9206      	str	r2, [sp, #24]
 8004738:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
 8004742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004744:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004748:	9207      	str	r2, [sp, #28]
 800474a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	9308      	str	r3, [sp, #32]
 800475c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800475e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004762:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2502      	movs	r5, #2
 8004766:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004768:	260e      	movs	r6, #14
 800476a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476c:	a909      	add	r1, sp, #36	; 0x24
 800476e:	4833      	ldr	r0, [pc, #204]	; (800483c <HAL_LTDC_MspInit+0x1a0>)
 8004770:	f7fd fbc0 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8004774:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2400      	movs	r4, #0
 800477e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004780:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004782:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004784:	4f2e      	ldr	r7, [pc, #184]	; (8004840 <HAL_LTDC_MspInit+0x1a4>)
 8004786:	a909      	add	r1, sp, #36	; 0x24
 8004788:	4638      	mov	r0, r7
 800478a:	f7fd fbb3 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800478e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004792:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800479a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	a909      	add	r1, sp, #36	; 0x24
 800479e:	4829      	ldr	r0, [pc, #164]	; (8004844 <HAL_LTDC_MspInit+0x1a8>)
 80047a0:	f7fd fba8 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 80047a4:	f244 6330 	movw	r3, #17968	; 0x4630
 80047a8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ae:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047b0:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047b2:	a909      	add	r1, sp, #36	; 0x24
 80047b4:	4824      	ldr	r0, [pc, #144]	; (8004848 <HAL_LTDC_MspInit+0x1ac>)
 80047b6:	f7fd fb9d 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 80047ba:	2383      	movs	r3, #131	; 0x83
 80047bc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047c4:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80047c6:	a909      	add	r1, sp, #36	; 0x24
 80047c8:	4820      	ldr	r0, [pc, #128]	; (800484c <HAL_LTDC_MspInit+0x1b0>)
 80047ca:	f7fd fb93 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80047da:	2309      	movs	r3, #9
 80047dc:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047de:	a909      	add	r1, sp, #36	; 0x24
 80047e0:	4638      	mov	r0, r7
 80047e2:	f7fd fb87 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047e6:	2308      	movs	r3, #8
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ee:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047f0:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f2:	a909      	add	r1, sp, #36	; 0x24
 80047f4:	4816      	ldr	r0, [pc, #88]	; (8004850 <HAL_LTDC_MspInit+0x1b4>)
 80047f6:	f7fd fb7d 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80047fa:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80047fe:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004804:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004806:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004808:	a909      	add	r1, sp, #36	; 0x24
 800480a:	4812      	ldr	r0, [pc, #72]	; (8004854 <HAL_LTDC_MspInit+0x1b8>)
 800480c:	f7fd fb72 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004810:	2320      	movs	r3, #32
 8004812:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800481a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800481c:	a909      	add	r1, sp, #36	; 0x24
 800481e:	480e      	ldr	r0, [pc, #56]	; (8004858 <HAL_LTDC_MspInit+0x1bc>)
 8004820:	f7fd fb68 	bl	8001ef4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8004824:	4622      	mov	r2, r4
 8004826:	4621      	mov	r1, r4
 8004828:	2058      	movs	r0, #88	; 0x58
 800482a:	f7fc ffff 	bl	800182c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800482e:	2058      	movs	r0, #88	; 0x58
 8004830:	f7fd f82e 	bl	8001890 <HAL_NVIC_EnableIRQ>
}
 8004834:	e73e      	b.n	80046b4 <HAL_LTDC_MspInit+0x18>
 8004836:	bf00      	nop
 8004838:	40016800 	.word	0x40016800
 800483c:	40020400 	.word	0x40020400
 8004840:	40021800 	.word	0x40021800
 8004844:	40020000 	.word	0x40020000
 8004848:	40022000 	.word	0x40022000
 800484c:	40022800 	.word	0x40022800
 8004850:	40020c00 	.word	0x40020c00
 8004854:	40021c00 	.word	0x40021c00
 8004858:	40022400 	.word	0x40022400

0800485c <HAL_SPI_MspInit>:
{
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	2300      	movs	r3, #0
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	9306      	str	r3, [sp, #24]
 800486a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800486c:	6802      	ldr	r2, [r0, #0]
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_SPI_MspInit+0x88>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_SPI_MspInit+0x1c>
}
 8004874:	b008      	add	sp, #32
 8004876:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004878:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800487c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800488a:	9200      	str	r2, [sp, #0]
 800488c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800488e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
 8004896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004898:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800489c:	9201      	str	r2, [sp, #4]
 800489e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a2:	f042 0202 	orr.w	r2, r2, #2
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	9302      	str	r3, [sp, #8]
 80048b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80048b2:	2402      	movs	r4, #2
 80048b4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2603      	movs	r6, #3
 80048ba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048bc:	2505      	movs	r5, #5
 80048be:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048c0:	a903      	add	r1, sp, #12
 80048c2:	4809      	ldr	r0, [pc, #36]	; (80048e8 <HAL_SPI_MspInit+0x8c>)
 80048c4:	f7fd fb16 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80048c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80048cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048d6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d8:	a903      	add	r1, sp, #12
 80048da:	4804      	ldr	r0, [pc, #16]	; (80048ec <HAL_SPI_MspInit+0x90>)
 80048dc:	f7fd fb0a 	bl	8001ef4 <HAL_GPIO_Init>
}
 80048e0:	e7c8      	b.n	8004874 <HAL_SPI_MspInit+0x18>
 80048e2:	bf00      	nop
 80048e4:	40003800 	.word	0x40003800
 80048e8:	40022000 	.word	0x40022000
 80048ec:	40020400 	.word	0x40020400

080048f0 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 80048f0:	6802      	ldr	r2, [r0, #0]
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_TIM_Base_MspInit+0x28>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d000      	beq.n	80048fa <HAL_TIM_Base_MspInit+0xa>
 80048f8:	4770      	bx	lr
{
 80048fa:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048fc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	9b01      	ldr	r3, [sp, #4]
}
 8004912:	b002      	add	sp, #8
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000

0800491c <HAL_UART_MspInit>:
{
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004920:	2300      	movs	r3, #0
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	9304      	str	r3, [sp, #16]
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	9306      	str	r3, [sp, #24]
 800492a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800492c:	6802      	ldr	r2, [r0, #0]
 800492e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004932:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_UART_MspInit+0x22>
}
 800493a:	b008      	add	sp, #32
 800493c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800493e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004944:	f042 0210 	orr.w	r2, r2, #16
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
 800494a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494c:	f002 0210 	and.w	r2, r2, #16
 8004950:	9200      	str	r2, [sp, #0]
 8004952:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004956:	f042 0202 	orr.w	r2, r2, #2
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	f002 0202 	and.w	r2, r2, #2
 8004962:	9201      	str	r2, [sp, #4]
 8004964:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	9302      	str	r3, [sp, #8]
 8004976:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	2602      	movs	r6, #2
 800497e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004980:	2503      	movs	r5, #3
 8004982:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004984:	2407      	movs	r4, #7
 8004986:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004988:	a903      	add	r1, sp, #12
 800498a:	4808      	ldr	r0, [pc, #32]	; (80049ac <HAL_UART_MspInit+0x90>)
 800498c:	f7fd fab2 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004994:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800499e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a0:	a903      	add	r1, sp, #12
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <HAL_UART_MspInit+0x94>)
 80049a4:	f7fd faa6 	bl	8001ef4 <HAL_GPIO_Init>
}
 80049a8:	e7c7      	b.n	800493a <HAL_UART_MspInit+0x1e>
 80049aa:	bf00      	nop
 80049ac:	40020400 	.word	0x40020400
 80049b0:	40020000 	.word	0x40020000

080049b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80049b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80049b6:	f7ff fd5b 	bl	8004470 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80049ba:	bd08      	pop	{r3, pc}

080049bc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049bc:	4770      	bx	lr

080049be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049be:	e7fe      	b.n	80049be <HardFault_Handler>

080049c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c0:	e7fe      	b.n	80049c0 <MemManage_Handler>

080049c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049c2:	e7fe      	b.n	80049c2 <BusFault_Handler>

080049c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c4:	e7fe      	b.n	80049c4 <UsageFault_Handler>

080049c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049c6:	4770      	bx	lr

080049c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	4770      	bx	lr

080049ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049ca:	4770      	bx	lr

080049cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ce:	f7fc fb33 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d2:	bd08      	pop	{r3, pc}

080049d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80049d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80049d6:	2010      	movs	r0, #16
 80049d8:	f7fd fb8a 	bl	80020f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80049dc:	bd08      	pop	{r3, pc}
	...

080049e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80049e2:	4802      	ldr	r0, [pc, #8]	; (80049ec <ADC_IRQHandler+0xc>)
 80049e4:	f7fc fd50 	bl	8001488 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80049e8:	bd08      	pop	{r3, pc}
 80049ea:	bf00      	nop
 80049ec:	20000444 	.word	0x20000444

080049f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80049f2:	2040      	movs	r0, #64	; 0x40
 80049f4:	f7fd fb7c 	bl	80020f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80049f8:	2080      	movs	r0, #128	; 0x80
 80049fa:	f7fd fb79 	bl	80020f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049fe:	bd08      	pop	{r3, pc}

08004a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004a02:	4802      	ldr	r0, [pc, #8]	; (8004a0c <DMA2_Stream0_IRQHandler+0xc>)
 8004a04:	f7fd f8f8 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a08:	bd08      	pop	{r3, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000320 	.word	0x20000320

08004a10 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004a12:	4802      	ldr	r0, [pc, #8]	; (8004a1c <LTDC_IRQHandler+0xc>)
 8004a14:	f7fd fcc1 	bl	800239a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004a18:	bd08      	pop	{r3, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000039c 	.word	0x2000039c

08004a20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a20:	b508      	push	{r3, lr}
 8004a22:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <_sbrk+0x34>)
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	b142      	cbz	r2, 8004a3c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <_sbrk+0x34>)
 8004a2c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004a2e:	4403      	add	r3, r0
 8004a30:	466a      	mov	r2, sp
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d806      	bhi.n	8004a44 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <_sbrk+0x34>)
 8004a38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004a3a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004a3c:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <_sbrk+0x34>)
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <_sbrk+0x38>)
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	e7f2      	b.n	8004a2a <_sbrk+0xa>
		errno = ENOMEM;
 8004a44:	f000 f85c 	bl	8004b00 <__errno>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a50:	e7f3      	b.n	8004a3a <_sbrk+0x1a>
 8004a52:	bf00      	nop
 8004a54:	20000214 	.word	0x20000214
 8004a58:	200005f0 	.word	0x200005f0

08004a5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a5c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <SystemInit+0x40>)
 8004a60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <SystemInit+0x44>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	f041 0101 	orr.w	r1, r1, #1
 8004a74:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a76:	2000      	movs	r0, #0
 8004a78:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a7a:	681c      	ldr	r4, [r3, #0]
 8004a7c:	4909      	ldr	r1, [pc, #36]	; (8004aa4 <SystemInit+0x48>)
 8004a7e:	4021      	ands	r1, r4
 8004a80:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a82:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <SystemInit+0x4c>)
 8004a84:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a86:	6819      	ldr	r1, [r3, #0]
 8004a88:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004a8c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a8e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a94:	6093      	str	r3, [r2, #8]
#endif
}
 8004a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000ed00 	.word	0xe000ed00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	fef6ffff 	.word	0xfef6ffff
 8004aa8:	24003010 	.word	0x24003010

08004aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ae4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ab2:	e003      	b.n	8004abc <LoopCopyDataInit>

08004ab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004aba:	3104      	adds	r1, #4

08004abc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ac4:	d3f6      	bcc.n	8004ab4 <CopyDataInit>
  ldr  r2, =_sbss
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ac8:	e002      	b.n	8004ad0 <LoopFillZerobss>

08004aca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004aca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004acc:	f842 3b04 	str.w	r3, [r2], #4

08004ad0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ad4:	d3f9      	bcc.n	8004aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ad6:	f7ff ffc1 	bl	8004a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ada:	f000 f817 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ade:	f7ff fb15 	bl	800410c <main>
  bx  lr    
 8004ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ae4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004ae8:	08008908 	.word	0x08008908
  ldr  r0, =_sdata
 8004aec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004af0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004af4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004af8:	200005f0 	.word	0x200005f0

08004afc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004afc:	e7fe      	b.n	8004afc <CAN1_RX0_IRQHandler>
	...

08004b00 <__errno>:
 8004b00:	4b01      	ldr	r3, [pc, #4]	; (8004b08 <__errno+0x8>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	2000000c 	.word	0x2000000c

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0d      	ldr	r6, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1ba4      	subs	r4, r4, r6
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2500      	movs	r5, #0
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4e0b      	ldr	r6, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f003 fd5a 	bl	80085d8 <_init>
 8004b24:	1ba4      	subs	r4, r4, r6
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2500      	movs	r5, #0
 8004b2a:	42a5      	cmp	r5, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b34:	4798      	blx	r3
 8004b36:	3501      	adds	r5, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3e:	4798      	blx	r3
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08008900 	.word	0x08008900
 8004b48:	08008900 	.word	0x08008900
 8004b4c:	08008900 	.word	0x08008900
 8004b50:	08008904 	.word	0x08008904

08004b54 <memcpy>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	1e43      	subs	r3, r0, #1
 8004b58:	440a      	add	r2, r1
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	d100      	bne.n	8004b60 <memcpy+0xc>
 8004b5e:	bd10      	pop	{r4, pc}
 8004b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b68:	e7f7      	b.n	8004b5a <memcpy+0x6>

08004b6a <memset>:
 8004b6a:	4402      	add	r2, r0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d100      	bne.n	8004b74 <memset+0xa>
 8004b72:	4770      	bx	lr
 8004b74:	f803 1b01 	strb.w	r1, [r3], #1
 8004b78:	e7f9      	b.n	8004b6e <memset+0x4>

08004b7a <__cvt>:
 8004b7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7e:	ec55 4b10 	vmov	r4, r5, d0
 8004b82:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	460e      	mov	r6, r1
 8004b8c:	4691      	mov	r9, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	bfb8      	it	lt
 8004b92:	4622      	movlt	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	f027 0720 	bic.w	r7, r7, #32
 8004b9a:	bfbb      	ittet	lt
 8004b9c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ba0:	461d      	movlt	r5, r3
 8004ba2:	2300      	movge	r3, #0
 8004ba4:	232d      	movlt	r3, #45	; 0x2d
 8004ba6:	bfb8      	it	lt
 8004ba8:	4614      	movlt	r4, r2
 8004baa:	2f46      	cmp	r7, #70	; 0x46
 8004bac:	700b      	strb	r3, [r1, #0]
 8004bae:	d004      	beq.n	8004bba <__cvt+0x40>
 8004bb0:	2f45      	cmp	r7, #69	; 0x45
 8004bb2:	d100      	bne.n	8004bb6 <__cvt+0x3c>
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	e000      	b.n	8004bbc <__cvt+0x42>
 8004bba:	2103      	movs	r1, #3
 8004bbc:	ab03      	add	r3, sp, #12
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	ab02      	add	r3, sp, #8
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4653      	mov	r3, sl
 8004bc8:	ec45 4b10 	vmov	d0, r4, r5
 8004bcc:	f001 fd78 	bl	80066c0 <_dtoa_r>
 8004bd0:	2f47      	cmp	r7, #71	; 0x47
 8004bd2:	4680      	mov	r8, r0
 8004bd4:	d102      	bne.n	8004bdc <__cvt+0x62>
 8004bd6:	f019 0f01 	tst.w	r9, #1
 8004bda:	d026      	beq.n	8004c2a <__cvt+0xb0>
 8004bdc:	2f46      	cmp	r7, #70	; 0x46
 8004bde:	eb08 0906 	add.w	r9, r8, r6
 8004be2:	d111      	bne.n	8004c08 <__cvt+0x8e>
 8004be4:	f898 3000 	ldrb.w	r3, [r8]
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d10a      	bne.n	8004c02 <__cvt+0x88>
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	f7fb ff88 	bl	8000b08 <__aeabi_dcmpeq>
 8004bf8:	b918      	cbnz	r0, 8004c02 <__cvt+0x88>
 8004bfa:	f1c6 0601 	rsb	r6, r6, #1
 8004bfe:	f8ca 6000 	str.w	r6, [sl]
 8004c02:	f8da 3000 	ldr.w	r3, [sl]
 8004c06:	4499      	add	r9, r3
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f7fb ff7a 	bl	8000b08 <__aeabi_dcmpeq>
 8004c14:	b938      	cbnz	r0, 8004c26 <__cvt+0xac>
 8004c16:	2230      	movs	r2, #48	; 0x30
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	454b      	cmp	r3, r9
 8004c1c:	d205      	bcs.n	8004c2a <__cvt+0xb0>
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e7f8      	b.n	8004c18 <__cvt+0x9e>
 8004c26:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c2e:	eba3 0308 	sub.w	r3, r3, r8
 8004c32:	4640      	mov	r0, r8
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	b004      	add	sp, #16
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c3c <__exponent>:
 8004c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	4604      	mov	r4, r0
 8004c42:	bfba      	itte	lt
 8004c44:	4249      	neglt	r1, r1
 8004c46:	232d      	movlt	r3, #45	; 0x2d
 8004c48:	232b      	movge	r3, #43	; 0x2b
 8004c4a:	2909      	cmp	r1, #9
 8004c4c:	f804 2b02 	strb.w	r2, [r4], #2
 8004c50:	7043      	strb	r3, [r0, #1]
 8004c52:	dd20      	ble.n	8004c96 <__exponent+0x5a>
 8004c54:	f10d 0307 	add.w	r3, sp, #7
 8004c58:	461f      	mov	r7, r3
 8004c5a:	260a      	movs	r6, #10
 8004c5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c60:	fb06 1115 	mls	r1, r6, r5, r1
 8004c64:	3130      	adds	r1, #48	; 0x30
 8004c66:	2d09      	cmp	r5, #9
 8004c68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c6c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004c70:	4629      	mov	r1, r5
 8004c72:	dc09      	bgt.n	8004c88 <__exponent+0x4c>
 8004c74:	3130      	adds	r1, #48	; 0x30
 8004c76:	3b02      	subs	r3, #2
 8004c78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c7c:	42bb      	cmp	r3, r7
 8004c7e:	4622      	mov	r2, r4
 8004c80:	d304      	bcc.n	8004c8c <__exponent+0x50>
 8004c82:	1a10      	subs	r0, r2, r0
 8004c84:	b003      	add	sp, #12
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	4613      	mov	r3, r2
 8004c8a:	e7e7      	b.n	8004c5c <__exponent+0x20>
 8004c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c90:	f804 2b01 	strb.w	r2, [r4], #1
 8004c94:	e7f2      	b.n	8004c7c <__exponent+0x40>
 8004c96:	2330      	movs	r3, #48	; 0x30
 8004c98:	4419      	add	r1, r3
 8004c9a:	7083      	strb	r3, [r0, #2]
 8004c9c:	1d02      	adds	r2, r0, #4
 8004c9e:	70c1      	strb	r1, [r0, #3]
 8004ca0:	e7ef      	b.n	8004c82 <__exponent+0x46>
	...

08004ca4 <_printf_float>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08d      	sub	sp, #52	; 0x34
 8004caa:	460c      	mov	r4, r1
 8004cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	f002 fde7 	bl	8007888 <_localeconv_r>
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb faa6 	bl	8000210 <strlen>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ccc:	9005      	str	r0, [sp, #20]
 8004cce:	3307      	adds	r3, #7
 8004cd0:	f023 0307 	bic.w	r3, r3, #7
 8004cd4:	f103 0208 	add.w	r2, r3, #8
 8004cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004ce0:	f8c8 2000 	str.w	r2, [r8]
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cf4:	9307      	str	r3, [sp, #28]
 8004cf6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cfe:	4ba7      	ldr	r3, [pc, #668]	; (8004f9c <_printf_float+0x2f8>)
 8004d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d04:	f7fb ff32 	bl	8000b6c <__aeabi_dcmpun>
 8004d08:	bb70      	cbnz	r0, 8004d68 <_printf_float+0xc4>
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0e:	4ba3      	ldr	r3, [pc, #652]	; (8004f9c <_printf_float+0x2f8>)
 8004d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d14:	f7fb ff0c 	bl	8000b30 <__aeabi_dcmple>
 8004d18:	bb30      	cbnz	r0, 8004d68 <_printf_float+0xc4>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fefb 	bl	8000b1c <__aeabi_dcmplt>
 8004d26:	b110      	cbz	r0, 8004d2e <_printf_float+0x8a>
 8004d28:	232d      	movs	r3, #45	; 0x2d
 8004d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2e:	4a9c      	ldr	r2, [pc, #624]	; (8004fa0 <_printf_float+0x2fc>)
 8004d30:	4b9c      	ldr	r3, [pc, #624]	; (8004fa4 <_printf_float+0x300>)
 8004d32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d36:	bf8c      	ite	hi
 8004d38:	4690      	movhi	r8, r2
 8004d3a:	4698      	movls	r8, r3
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	f02b 0204 	bic.w	r2, fp, #4
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	6022      	str	r2, [r4, #0]
 8004d46:	f04f 0900 	mov.w	r9, #0
 8004d4a:	9700      	str	r7, [sp, #0]
 8004d4c:	4633      	mov	r3, r6
 8004d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 f9e6 	bl	8005124 <_printf_common>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f040 808d 	bne.w	8004e78 <_printf_float+0x1d4>
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d62:	b00d      	add	sp, #52	; 0x34
 8004d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	f7fb fefc 	bl	8000b6c <__aeabi_dcmpun>
 8004d74:	b110      	cbz	r0, 8004d7c <_printf_float+0xd8>
 8004d76:	4a8c      	ldr	r2, [pc, #560]	; (8004fa8 <_printf_float+0x304>)
 8004d78:	4b8c      	ldr	r3, [pc, #560]	; (8004fac <_printf_float+0x308>)
 8004d7a:	e7da      	b.n	8004d32 <_printf_float+0x8e>
 8004d7c:	6861      	ldr	r1, [r4, #4]
 8004d7e:	1c4b      	adds	r3, r1, #1
 8004d80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d84:	a80a      	add	r0, sp, #40	; 0x28
 8004d86:	d13e      	bne.n	8004e06 <_printf_float+0x162>
 8004d88:	2306      	movs	r3, #6
 8004d8a:	6063      	str	r3, [r4, #4]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d92:	ab09      	add	r3, sp, #36	; 0x24
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	ec49 8b10 	vmov	d0, r8, r9
 8004d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	f8cd a004 	str.w	sl, [sp, #4]
 8004da4:	6861      	ldr	r1, [r4, #4]
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7ff fee7 	bl	8004b7a <__cvt>
 8004dac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004db0:	2b47      	cmp	r3, #71	; 0x47
 8004db2:	4680      	mov	r8, r0
 8004db4:	d109      	bne.n	8004dca <_printf_float+0x126>
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	1cd8      	adds	r0, r3, #3
 8004dba:	db02      	blt.n	8004dc2 <_printf_float+0x11e>
 8004dbc:	6862      	ldr	r2, [r4, #4]
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	dd47      	ble.n	8004e52 <_printf_float+0x1ae>
 8004dc2:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dc6:	fa5f fa8a 	uxtb.w	sl, sl
 8004dca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dd0:	d824      	bhi.n	8004e1c <_printf_float+0x178>
 8004dd2:	3901      	subs	r1, #1
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dda:	9109      	str	r1, [sp, #36]	; 0x24
 8004ddc:	f7ff ff2e 	bl	8004c3c <__exponent>
 8004de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004de2:	1813      	adds	r3, r2, r0
 8004de4:	2a01      	cmp	r2, #1
 8004de6:	4681      	mov	r9, r0
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	dc02      	bgt.n	8004df2 <_printf_float+0x14e>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	07d1      	lsls	r1, r2, #31
 8004df0:	d501      	bpl.n	8004df6 <_printf_float+0x152>
 8004df2:	3301      	adds	r3, #1
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0a5      	beq.n	8004d4a <_printf_float+0xa6>
 8004dfe:	232d      	movs	r3, #45	; 0x2d
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e04:	e7a1      	b.n	8004d4a <_printf_float+0xa6>
 8004e06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e0a:	f000 8177 	beq.w	80050fc <_printf_float+0x458>
 8004e0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e12:	d1bb      	bne.n	8004d8c <_printf_float+0xe8>
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d1b9      	bne.n	8004d8c <_printf_float+0xe8>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e7b6      	b.n	8004d8a <_printf_float+0xe6>
 8004e1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e20:	d119      	bne.n	8004e56 <_printf_float+0x1b2>
 8004e22:	2900      	cmp	r1, #0
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	dd0c      	ble.n	8004e42 <_printf_float+0x19e>
 8004e28:	6121      	str	r1, [r4, #16]
 8004e2a:	b913      	cbnz	r3, 8004e32 <_printf_float+0x18e>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	07d2      	lsls	r2, r2, #31
 8004e30:	d502      	bpl.n	8004e38 <_printf_float+0x194>
 8004e32:	3301      	adds	r3, #1
 8004e34:	440b      	add	r3, r1
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e3c:	f04f 0900 	mov.w	r9, #0
 8004e40:	e7d9      	b.n	8004df6 <_printf_float+0x152>
 8004e42:	b913      	cbnz	r3, 8004e4a <_printf_float+0x1a6>
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	07d0      	lsls	r0, r2, #31
 8004e48:	d501      	bpl.n	8004e4e <_printf_float+0x1aa>
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	e7f3      	b.n	8004e36 <_printf_float+0x192>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e7f1      	b.n	8004e36 <_printf_float+0x192>
 8004e52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	db05      	blt.n	8004e6a <_printf_float+0x1c6>
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	07d1      	lsls	r1, r2, #31
 8004e64:	d5e8      	bpl.n	8004e38 <_printf_float+0x194>
 8004e66:	3301      	adds	r3, #1
 8004e68:	e7e5      	b.n	8004e36 <_printf_float+0x192>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfd4      	ite	le
 8004e6e:	f1c3 0302 	rsble	r3, r3, #2
 8004e72:	2301      	movgt	r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	e7de      	b.n	8004e36 <_printf_float+0x192>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	055a      	lsls	r2, r3, #21
 8004e7c:	d407      	bmi.n	8004e8e <_printf_float+0x1ea>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	4642      	mov	r2, r8
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d12b      	bne.n	8004ee4 <_printf_float+0x240>
 8004e8c:	e767      	b.n	8004d5e <_printf_float+0xba>
 8004e8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e92:	f240 80dc 	bls.w	800504e <_printf_float+0x3aa>
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e9e:	f7fb fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d033      	beq.n	8004f0e <_printf_float+0x26a>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4a41      	ldr	r2, [pc, #260]	; (8004fb0 <_printf_float+0x30c>)
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f af54 	beq.w	8004d5e <_printf_float+0xba>
 8004eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	db02      	blt.n	8004ec4 <_printf_float+0x220>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	07d8      	lsls	r0, r3, #31
 8004ec2:	d50f      	bpl.n	8004ee4 <_printf_float+0x240>
 8004ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f af45 	beq.w	8004d5e <_printf_float+0xba>
 8004ed4:	f04f 0800 	mov.w	r8, #0
 8004ed8:	f104 091a 	add.w	r9, r4, #26
 8004edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4543      	cmp	r3, r8
 8004ee2:	dc09      	bgt.n	8004ef8 <_printf_float+0x254>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	079b      	lsls	r3, r3, #30
 8004ee8:	f100 8103 	bmi.w	80050f2 <_printf_float+0x44e>
 8004eec:	68e0      	ldr	r0, [r4, #12]
 8004eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ef0:	4298      	cmp	r0, r3
 8004ef2:	bfb8      	it	lt
 8004ef4:	4618      	movlt	r0, r3
 8004ef6:	e734      	b.n	8004d62 <_printf_float+0xbe>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	464a      	mov	r2, r9
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af2b 	beq.w	8004d5e <_printf_float+0xba>
 8004f08:	f108 0801 	add.w	r8, r8, #1
 8004f0c:	e7e6      	b.n	8004edc <_printf_float+0x238>
 8004f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dc2b      	bgt.n	8004f6c <_printf_float+0x2c8>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <_printf_float+0x30c>)
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f af1d 	beq.w	8004d5e <_printf_float+0xba>
 8004f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f26:	b923      	cbnz	r3, 8004f32 <_printf_float+0x28e>
 8004f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2a:	b913      	cbnz	r3, 8004f32 <_printf_float+0x28e>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	07d9      	lsls	r1, r3, #31
 8004f30:	d5d8      	bpl.n	8004ee4 <_printf_float+0x240>
 8004f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f af0e 	beq.w	8004d5e <_printf_float+0xba>
 8004f42:	f04f 0900 	mov.w	r9, #0
 8004f46:	f104 0a1a 	add.w	sl, r4, #26
 8004f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4c:	425b      	negs	r3, r3
 8004f4e:	454b      	cmp	r3, r9
 8004f50:	dc01      	bgt.n	8004f56 <_printf_float+0x2b2>
 8004f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f54:	e794      	b.n	8004e80 <_printf_float+0x1dc>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f aefc 	beq.w	8004d5e <_printf_float+0xba>
 8004f66:	f109 0901 	add.w	r9, r9, #1
 8004f6a:	e7ee      	b.n	8004f4a <_printf_float+0x2a6>
 8004f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bfa8      	it	ge
 8004f74:	461a      	movge	r2, r3
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	4691      	mov	r9, r2
 8004f7a:	dd07      	ble.n	8004f8c <_printf_float+0x2e8>
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4642      	mov	r2, r8
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f aee9 	beq.w	8004d5e <_printf_float+0xba>
 8004f8c:	f104 031a 	add.w	r3, r4, #26
 8004f90:	f04f 0b00 	mov.w	fp, #0
 8004f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f98:	9306      	str	r3, [sp, #24]
 8004f9a:	e015      	b.n	8004fc8 <_printf_float+0x324>
 8004f9c:	7fefffff 	.word	0x7fefffff
 8004fa0:	08008644 	.word	0x08008644
 8004fa4:	08008640 	.word	0x08008640
 8004fa8:	0800864c 	.word	0x0800864c
 8004fac:	08008648 	.word	0x08008648
 8004fb0:	08008650 	.word	0x08008650
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	9a06      	ldr	r2, [sp, #24]
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f aecd 	beq.w	8004d5e <_printf_float+0xba>
 8004fc4:	f10b 0b01 	add.w	fp, fp, #1
 8004fc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fcc:	ebaa 0309 	sub.w	r3, sl, r9
 8004fd0:	455b      	cmp	r3, fp
 8004fd2:	dcef      	bgt.n	8004fb4 <_printf_float+0x310>
 8004fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	44d0      	add	r8, sl
 8004fdc:	db15      	blt.n	800500a <_printf_float+0x366>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	07da      	lsls	r2, r3, #31
 8004fe2:	d412      	bmi.n	800500a <_printf_float+0x366>
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fe8:	eba3 020a 	sub.w	r2, r3, sl
 8004fec:	eba3 0a01 	sub.w	sl, r3, r1
 8004ff0:	4592      	cmp	sl, r2
 8004ff2:	bfa8      	it	ge
 8004ff4:	4692      	movge	sl, r2
 8004ff6:	f1ba 0f00 	cmp.w	sl, #0
 8004ffa:	dc0e      	bgt.n	800501a <_printf_float+0x376>
 8004ffc:	f04f 0800 	mov.w	r8, #0
 8005000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005004:	f104 091a 	add.w	r9, r4, #26
 8005008:	e019      	b.n	800503e <_printf_float+0x39a>
 800500a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	d1e5      	bne.n	8004fe4 <_printf_float+0x340>
 8005018:	e6a1      	b.n	8004d5e <_printf_float+0xba>
 800501a:	4653      	mov	r3, sl
 800501c:	4642      	mov	r2, r8
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	d1e9      	bne.n	8004ffc <_printf_float+0x358>
 8005028:	e699      	b.n	8004d5e <_printf_float+0xba>
 800502a:	2301      	movs	r3, #1
 800502c:	464a      	mov	r2, r9
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	f43f ae92 	beq.w	8004d5e <_printf_float+0xba>
 800503a:	f108 0801 	add.w	r8, r8, #1
 800503e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	eba3 030a 	sub.w	r3, r3, sl
 8005048:	4543      	cmp	r3, r8
 800504a:	dcee      	bgt.n	800502a <_printf_float+0x386>
 800504c:	e74a      	b.n	8004ee4 <_printf_float+0x240>
 800504e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005050:	2a01      	cmp	r2, #1
 8005052:	dc01      	bgt.n	8005058 <_printf_float+0x3b4>
 8005054:	07db      	lsls	r3, r3, #31
 8005056:	d53a      	bpl.n	80050ce <_printf_float+0x42a>
 8005058:	2301      	movs	r3, #1
 800505a:	4642      	mov	r2, r8
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f ae7b 	beq.w	8004d5e <_printf_float+0xba>
 8005068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f108 0801 	add.w	r8, r8, #1
 8005078:	f43f ae71 	beq.w	8004d5e <_printf_float+0xba>
 800507c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507e:	2200      	movs	r2, #0
 8005080:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005088:	2300      	movs	r3, #0
 800508a:	f7fb fd3d 	bl	8000b08 <__aeabi_dcmpeq>
 800508e:	b9c8      	cbnz	r0, 80050c4 <_printf_float+0x420>
 8005090:	4653      	mov	r3, sl
 8005092:	4642      	mov	r2, r8
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	d10e      	bne.n	80050bc <_printf_float+0x418>
 800509e:	e65e      	b.n	8004d5e <_printf_float+0xba>
 80050a0:	2301      	movs	r3, #1
 80050a2:	4652      	mov	r2, sl
 80050a4:	4631      	mov	r1, r6
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	f43f ae57 	beq.w	8004d5e <_printf_float+0xba>
 80050b0:	f108 0801 	add.w	r8, r8, #1
 80050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4543      	cmp	r3, r8
 80050ba:	dcf1      	bgt.n	80050a0 <_printf_float+0x3fc>
 80050bc:	464b      	mov	r3, r9
 80050be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050c2:	e6de      	b.n	8004e82 <_printf_float+0x1de>
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	f104 0a1a 	add.w	sl, r4, #26
 80050cc:	e7f2      	b.n	80050b4 <_printf_float+0x410>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7df      	b.n	8005092 <_printf_float+0x3ee>
 80050d2:	2301      	movs	r3, #1
 80050d4:	464a      	mov	r2, r9
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae3e 	beq.w	8004d5e <_printf_float+0xba>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	4543      	cmp	r3, r8
 80050ee:	dcf0      	bgt.n	80050d2 <_printf_float+0x42e>
 80050f0:	e6fc      	b.n	8004eec <_printf_float+0x248>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0919 	add.w	r9, r4, #25
 80050fa:	e7f4      	b.n	80050e6 <_printf_float+0x442>
 80050fc:	2900      	cmp	r1, #0
 80050fe:	f43f ae8b 	beq.w	8004e18 <_printf_float+0x174>
 8005102:	2300      	movs	r3, #0
 8005104:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005108:	ab09      	add	r3, sp, #36	; 0x24
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	ec49 8b10 	vmov	d0, r8, r9
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	f8cd a004 	str.w	sl, [sp, #4]
 8005116:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800511a:	4628      	mov	r0, r5
 800511c:	f7ff fd2d 	bl	8004b7a <__cvt>
 8005120:	4680      	mov	r8, r0
 8005122:	e648      	b.n	8004db6 <_printf_float+0x112>

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4691      	mov	r9, r2
 800512a:	461f      	mov	r7, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005134:	4293      	cmp	r3, r2
 8005136:	bfb8      	it	lt
 8005138:	4613      	movlt	r3, r2
 800513a:	f8c9 3000 	str.w	r3, [r9]
 800513e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005142:	4606      	mov	r6, r0
 8005144:	460c      	mov	r4, r1
 8005146:	b112      	cbz	r2, 800514e <_printf_common+0x2a>
 8005148:	3301      	adds	r3, #1
 800514a:	f8c9 3000 	str.w	r3, [r9]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005158:	3302      	addmi	r3, #2
 800515a:	f8c9 3000 	strmi.w	r3, [r9]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d107      	bne.n	8005176 <_printf_common+0x52>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	f8d9 2000 	ldr.w	r2, [r9]
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	42ab      	cmp	r3, r5
 8005174:	dc28      	bgt.n	80051c8 <_printf_common+0xa4>
 8005176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	3300      	adds	r3, #0
 800517e:	bf18      	it	ne
 8005180:	2301      	movne	r3, #1
 8005182:	0692      	lsls	r2, r2, #26
 8005184:	d42d      	bmi.n	80051e2 <_printf_common+0xbe>
 8005186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	3001      	adds	r0, #1
 8005192:	d020      	beq.n	80051d6 <_printf_common+0xb2>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	68e5      	ldr	r5, [r4, #12]
 8005198:	f8d9 2000 	ldr.w	r2, [r9]
 800519c:	f003 0306 	and.w	r3, r3, #6
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	bf08      	it	eq
 80051a4:	1aad      	subeq	r5, r5, r2
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	6922      	ldr	r2, [r4, #16]
 80051aa:	bf0c      	ite	eq
 80051ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b0:	2500      	movne	r5, #0
 80051b2:	4293      	cmp	r3, r2
 80051b4:	bfc4      	itt	gt
 80051b6:	1a9b      	subgt	r3, r3, r2
 80051b8:	18ed      	addgt	r5, r5, r3
 80051ba:	f04f 0900 	mov.w	r9, #0
 80051be:	341a      	adds	r4, #26
 80051c0:	454d      	cmp	r5, r9
 80051c2:	d11a      	bne.n	80051fa <_printf_common+0xd6>
 80051c4:	2000      	movs	r0, #0
 80051c6:	e008      	b.n	80051da <_printf_common+0xb6>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4652      	mov	r2, sl
 80051cc:	4639      	mov	r1, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d103      	bne.n	80051de <_printf_common+0xba>
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	3501      	adds	r5, #1
 80051e0:	e7c3      	b.n	800516a <_printf_common+0x46>
 80051e2:	18e1      	adds	r1, r4, r3
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	2030      	movs	r0, #48	; 0x30
 80051e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ec:	4422      	add	r2, r4
 80051ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f6:	3302      	adds	r3, #2
 80051f8:	e7c5      	b.n	8005186 <_printf_common+0x62>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4622      	mov	r2, r4
 80051fe:	4639      	mov	r1, r7
 8005200:	4630      	mov	r0, r6
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d0e6      	beq.n	80051d6 <_printf_common+0xb2>
 8005208:	f109 0901 	add.w	r9, r9, #1
 800520c:	e7d8      	b.n	80051c0 <_printf_common+0x9c>
	...

08005210 <_printf_i>:
 8005210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005218:	460c      	mov	r4, r1
 800521a:	7e09      	ldrb	r1, [r1, #24]
 800521c:	b085      	sub	sp, #20
 800521e:	296e      	cmp	r1, #110	; 0x6e
 8005220:	4617      	mov	r7, r2
 8005222:	4606      	mov	r6, r0
 8005224:	4698      	mov	r8, r3
 8005226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005228:	f000 80b3 	beq.w	8005392 <_printf_i+0x182>
 800522c:	d822      	bhi.n	8005274 <_printf_i+0x64>
 800522e:	2963      	cmp	r1, #99	; 0x63
 8005230:	d036      	beq.n	80052a0 <_printf_i+0x90>
 8005232:	d80a      	bhi.n	800524a <_printf_i+0x3a>
 8005234:	2900      	cmp	r1, #0
 8005236:	f000 80b9 	beq.w	80053ac <_printf_i+0x19c>
 800523a:	2958      	cmp	r1, #88	; 0x58
 800523c:	f000 8083 	beq.w	8005346 <_printf_i+0x136>
 8005240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005248:	e032      	b.n	80052b0 <_printf_i+0xa0>
 800524a:	2964      	cmp	r1, #100	; 0x64
 800524c:	d001      	beq.n	8005252 <_printf_i+0x42>
 800524e:	2969      	cmp	r1, #105	; 0x69
 8005250:	d1f6      	bne.n	8005240 <_printf_i+0x30>
 8005252:	6820      	ldr	r0, [r4, #0]
 8005254:	6813      	ldr	r3, [r2, #0]
 8005256:	0605      	lsls	r5, r0, #24
 8005258:	f103 0104 	add.w	r1, r3, #4
 800525c:	d52a      	bpl.n	80052b4 <_printf_i+0xa4>
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	da03      	bge.n	800526e <_printf_i+0x5e>
 8005266:	222d      	movs	r2, #45	; 0x2d
 8005268:	425b      	negs	r3, r3
 800526a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800526e:	486f      	ldr	r0, [pc, #444]	; (800542c <_printf_i+0x21c>)
 8005270:	220a      	movs	r2, #10
 8005272:	e039      	b.n	80052e8 <_printf_i+0xd8>
 8005274:	2973      	cmp	r1, #115	; 0x73
 8005276:	f000 809d 	beq.w	80053b4 <_printf_i+0x1a4>
 800527a:	d808      	bhi.n	800528e <_printf_i+0x7e>
 800527c:	296f      	cmp	r1, #111	; 0x6f
 800527e:	d020      	beq.n	80052c2 <_printf_i+0xb2>
 8005280:	2970      	cmp	r1, #112	; 0x70
 8005282:	d1dd      	bne.n	8005240 <_printf_i+0x30>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	e003      	b.n	8005296 <_printf_i+0x86>
 800528e:	2975      	cmp	r1, #117	; 0x75
 8005290:	d017      	beq.n	80052c2 <_printf_i+0xb2>
 8005292:	2978      	cmp	r1, #120	; 0x78
 8005294:	d1d4      	bne.n	8005240 <_printf_i+0x30>
 8005296:	2378      	movs	r3, #120	; 0x78
 8005298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529c:	4864      	ldr	r0, [pc, #400]	; (8005430 <_printf_i+0x220>)
 800529e:	e055      	b.n	800534c <_printf_i+0x13c>
 80052a0:	6813      	ldr	r3, [r2, #0]
 80052a2:	1d19      	adds	r1, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6011      	str	r1, [r2, #0]
 80052a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e08c      	b.n	80053ce <_printf_i+0x1be>
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6011      	str	r1, [r2, #0]
 80052b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052bc:	bf18      	it	ne
 80052be:	b21b      	sxthne	r3, r3
 80052c0:	e7cf      	b.n	8005262 <_printf_i+0x52>
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1d18      	adds	r0, r3, #4
 80052c8:	6010      	str	r0, [r2, #0]
 80052ca:	0628      	lsls	r0, r5, #24
 80052cc:	d501      	bpl.n	80052d2 <_printf_i+0xc2>
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e002      	b.n	80052d8 <_printf_i+0xc8>
 80052d2:	0668      	lsls	r0, r5, #25
 80052d4:	d5fb      	bpl.n	80052ce <_printf_i+0xbe>
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	4854      	ldr	r0, [pc, #336]	; (800542c <_printf_i+0x21c>)
 80052da:	296f      	cmp	r1, #111	; 0x6f
 80052dc:	bf14      	ite	ne
 80052de:	220a      	movne	r2, #10
 80052e0:	2208      	moveq	r2, #8
 80052e2:	2100      	movs	r1, #0
 80052e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e8:	6865      	ldr	r5, [r4, #4]
 80052ea:	60a5      	str	r5, [r4, #8]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	f2c0 8095 	blt.w	800541c <_printf_i+0x20c>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	f021 0104 	bic.w	r1, r1, #4
 80052f8:	6021      	str	r1, [r4, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d13d      	bne.n	800537a <_printf_i+0x16a>
 80052fe:	2d00      	cmp	r5, #0
 8005300:	f040 808e 	bne.w	8005420 <_printf_i+0x210>
 8005304:	4665      	mov	r5, ip
 8005306:	2a08      	cmp	r2, #8
 8005308:	d10b      	bne.n	8005322 <_printf_i+0x112>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07db      	lsls	r3, r3, #31
 800530e:	d508      	bpl.n	8005322 <_printf_i+0x112>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	bfde      	ittt	le
 8005318:	2330      	movle	r3, #48	; 0x30
 800531a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005322:	ebac 0305 	sub.w	r3, ip, r5
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	f8cd 8000 	str.w	r8, [sp]
 800532c:	463b      	mov	r3, r7
 800532e:	aa03      	add	r2, sp, #12
 8005330:	4621      	mov	r1, r4
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff fef6 	bl	8005124 <_printf_common>
 8005338:	3001      	adds	r0, #1
 800533a:	d14d      	bne.n	80053d8 <_printf_i+0x1c8>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005340:	b005      	add	sp, #20
 8005342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005346:	4839      	ldr	r0, [pc, #228]	; (800542c <_printf_i+0x21c>)
 8005348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800534c:	6813      	ldr	r3, [r2, #0]
 800534e:	6821      	ldr	r1, [r4, #0]
 8005350:	1d1d      	adds	r5, r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6015      	str	r5, [r2, #0]
 8005356:	060a      	lsls	r2, r1, #24
 8005358:	d50b      	bpl.n	8005372 <_printf_i+0x162>
 800535a:	07ca      	lsls	r2, r1, #31
 800535c:	bf44      	itt	mi
 800535e:	f041 0120 	orrmi.w	r1, r1, #32
 8005362:	6021      	strmi	r1, [r4, #0]
 8005364:	b91b      	cbnz	r3, 800536e <_printf_i+0x15e>
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	f022 0220 	bic.w	r2, r2, #32
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	2210      	movs	r2, #16
 8005370:	e7b7      	b.n	80052e2 <_printf_i+0xd2>
 8005372:	064d      	lsls	r5, r1, #25
 8005374:	bf48      	it	mi
 8005376:	b29b      	uxthmi	r3, r3
 8005378:	e7ef      	b.n	800535a <_printf_i+0x14a>
 800537a:	4665      	mov	r5, ip
 800537c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005380:	fb02 3311 	mls	r3, r2, r1, r3
 8005384:	5cc3      	ldrb	r3, [r0, r3]
 8005386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800538a:	460b      	mov	r3, r1
 800538c:	2900      	cmp	r1, #0
 800538e:	d1f5      	bne.n	800537c <_printf_i+0x16c>
 8005390:	e7b9      	b.n	8005306 <_printf_i+0xf6>
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	6961      	ldr	r1, [r4, #20]
 8005398:	1d18      	adds	r0, r3, #4
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	0628      	lsls	r0, r5, #24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	d501      	bpl.n	80053a6 <_printf_i+0x196>
 80053a2:	6019      	str	r1, [r3, #0]
 80053a4:	e002      	b.n	80053ac <_printf_i+0x19c>
 80053a6:	066a      	lsls	r2, r5, #25
 80053a8:	d5fb      	bpl.n	80053a2 <_printf_i+0x192>
 80053aa:	8019      	strh	r1, [r3, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	4665      	mov	r5, ip
 80053b2:	e7b9      	b.n	8005328 <_printf_i+0x118>
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	1d19      	adds	r1, r3, #4
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	681d      	ldr	r5, [r3, #0]
 80053bc:	6862      	ldr	r2, [r4, #4]
 80053be:	2100      	movs	r1, #0
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7fa ff2d 	bl	8000220 <memchr>
 80053c6:	b108      	cbz	r0, 80053cc <_printf_i+0x1bc>
 80053c8:	1b40      	subs	r0, r0, r5
 80053ca:	6060      	str	r0, [r4, #4]
 80053cc:	6863      	ldr	r3, [r4, #4]
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	2300      	movs	r3, #0
 80053d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d6:	e7a7      	b.n	8005328 <_printf_i+0x118>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	462a      	mov	r2, r5
 80053dc:	4639      	mov	r1, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d0aa      	beq.n	800533c <_printf_i+0x12c>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	079b      	lsls	r3, r3, #30
 80053ea:	d413      	bmi.n	8005414 <_printf_i+0x204>
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	4298      	cmp	r0, r3
 80053f2:	bfb8      	it	lt
 80053f4:	4618      	movlt	r0, r3
 80053f6:	e7a3      	b.n	8005340 <_printf_i+0x130>
 80053f8:	2301      	movs	r3, #1
 80053fa:	464a      	mov	r2, r9
 80053fc:	4639      	mov	r1, r7
 80053fe:	4630      	mov	r0, r6
 8005400:	47c0      	blx	r8
 8005402:	3001      	adds	r0, #1
 8005404:	d09a      	beq.n	800533c <_printf_i+0x12c>
 8005406:	3501      	adds	r5, #1
 8005408:	68e3      	ldr	r3, [r4, #12]
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	42ab      	cmp	r3, r5
 8005410:	dcf2      	bgt.n	80053f8 <_printf_i+0x1e8>
 8005412:	e7eb      	b.n	80053ec <_printf_i+0x1dc>
 8005414:	2500      	movs	r5, #0
 8005416:	f104 0919 	add.w	r9, r4, #25
 800541a:	e7f5      	b.n	8005408 <_printf_i+0x1f8>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ac      	bne.n	800537a <_printf_i+0x16a>
 8005420:	7803      	ldrb	r3, [r0, #0]
 8005422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800542a:	e76c      	b.n	8005306 <_printf_i+0xf6>
 800542c:	08008652 	.word	0x08008652
 8005430:	08008663 	.word	0x08008663

08005434 <_scanf_float>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	469a      	mov	sl, r3
 800543a:	688b      	ldr	r3, [r1, #8]
 800543c:	4616      	mov	r6, r2
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005444:	b087      	sub	sp, #28
 8005446:	bf83      	ittte	hi
 8005448:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800544c:	189b      	addhi	r3, r3, r2
 800544e:	9301      	strhi	r3, [sp, #4]
 8005450:	2300      	movls	r3, #0
 8005452:	bf86      	itte	hi
 8005454:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005458:	608b      	strhi	r3, [r1, #8]
 800545a:	9301      	strls	r3, [sp, #4]
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	4688      	mov	r8, r1
 8005460:	f04f 0b00 	mov.w	fp, #0
 8005464:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005468:	f848 3b1c 	str.w	r3, [r8], #28
 800546c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005470:	4607      	mov	r7, r0
 8005472:	460c      	mov	r4, r1
 8005474:	4645      	mov	r5, r8
 8005476:	465a      	mov	r2, fp
 8005478:	46d9      	mov	r9, fp
 800547a:	f8cd b008 	str.w	fp, [sp, #8]
 800547e:	68a1      	ldr	r1, [r4, #8]
 8005480:	b181      	cbz	r1, 80054a4 <_scanf_float+0x70>
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b49      	cmp	r3, #73	; 0x49
 8005488:	d071      	beq.n	800556e <_scanf_float+0x13a>
 800548a:	d84d      	bhi.n	8005528 <_scanf_float+0xf4>
 800548c:	2b39      	cmp	r3, #57	; 0x39
 800548e:	d840      	bhi.n	8005512 <_scanf_float+0xde>
 8005490:	2b31      	cmp	r3, #49	; 0x31
 8005492:	f080 8088 	bcs.w	80055a6 <_scanf_float+0x172>
 8005496:	2b2d      	cmp	r3, #45	; 0x2d
 8005498:	f000 8090 	beq.w	80055bc <_scanf_float+0x188>
 800549c:	d815      	bhi.n	80054ca <_scanf_float+0x96>
 800549e:	2b2b      	cmp	r3, #43	; 0x2b
 80054a0:	f000 808c 	beq.w	80055bc <_scanf_float+0x188>
 80054a4:	f1b9 0f00 	cmp.w	r9, #0
 80054a8:	d003      	beq.n	80054b2 <_scanf_float+0x7e>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	3a01      	subs	r2, #1
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	f200 80ea 	bhi.w	800568e <_scanf_float+0x25a>
 80054ba:	4545      	cmp	r5, r8
 80054bc:	f200 80dc 	bhi.w	8005678 <_scanf_float+0x244>
 80054c0:	2601      	movs	r6, #1
 80054c2:	4630      	mov	r0, r6
 80054c4:	b007      	add	sp, #28
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	2b2e      	cmp	r3, #46	; 0x2e
 80054cc:	f000 809f 	beq.w	800560e <_scanf_float+0x1da>
 80054d0:	2b30      	cmp	r3, #48	; 0x30
 80054d2:	d1e7      	bne.n	80054a4 <_scanf_float+0x70>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80054da:	d064      	beq.n	80055a6 <_scanf_float+0x172>
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80054e2:	6020      	str	r0, [r4, #0]
 80054e4:	f109 0901 	add.w	r9, r9, #1
 80054e8:	b11b      	cbz	r3, 80054f2 <_scanf_float+0xbe>
 80054ea:	3b01      	subs	r3, #1
 80054ec:	3101      	adds	r1, #1
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	60a1      	str	r1, [r4, #8]
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	3301      	adds	r3, #1
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	6873      	ldr	r3, [r6, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	6073      	str	r3, [r6, #4]
 8005506:	f340 80ac 	ble.w	8005662 <_scanf_float+0x22e>
 800550a:	6833      	ldr	r3, [r6, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	e7b5      	b.n	800547e <_scanf_float+0x4a>
 8005512:	2b45      	cmp	r3, #69	; 0x45
 8005514:	f000 8085 	beq.w	8005622 <_scanf_float+0x1ee>
 8005518:	2b46      	cmp	r3, #70	; 0x46
 800551a:	d06a      	beq.n	80055f2 <_scanf_float+0x1be>
 800551c:	2b41      	cmp	r3, #65	; 0x41
 800551e:	d1c1      	bne.n	80054a4 <_scanf_float+0x70>
 8005520:	2a01      	cmp	r2, #1
 8005522:	d1bf      	bne.n	80054a4 <_scanf_float+0x70>
 8005524:	2202      	movs	r2, #2
 8005526:	e046      	b.n	80055b6 <_scanf_float+0x182>
 8005528:	2b65      	cmp	r3, #101	; 0x65
 800552a:	d07a      	beq.n	8005622 <_scanf_float+0x1ee>
 800552c:	d818      	bhi.n	8005560 <_scanf_float+0x12c>
 800552e:	2b54      	cmp	r3, #84	; 0x54
 8005530:	d066      	beq.n	8005600 <_scanf_float+0x1cc>
 8005532:	d811      	bhi.n	8005558 <_scanf_float+0x124>
 8005534:	2b4e      	cmp	r3, #78	; 0x4e
 8005536:	d1b5      	bne.n	80054a4 <_scanf_float+0x70>
 8005538:	2a00      	cmp	r2, #0
 800553a:	d146      	bne.n	80055ca <_scanf_float+0x196>
 800553c:	f1b9 0f00 	cmp.w	r9, #0
 8005540:	d145      	bne.n	80055ce <_scanf_float+0x19a>
 8005542:	6821      	ldr	r1, [r4, #0]
 8005544:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005548:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800554c:	d13f      	bne.n	80055ce <_scanf_float+0x19a>
 800554e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005552:	6021      	str	r1, [r4, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	e02e      	b.n	80055b6 <_scanf_float+0x182>
 8005558:	2b59      	cmp	r3, #89	; 0x59
 800555a:	d01e      	beq.n	800559a <_scanf_float+0x166>
 800555c:	2b61      	cmp	r3, #97	; 0x61
 800555e:	e7de      	b.n	800551e <_scanf_float+0xea>
 8005560:	2b6e      	cmp	r3, #110	; 0x6e
 8005562:	d0e9      	beq.n	8005538 <_scanf_float+0x104>
 8005564:	d815      	bhi.n	8005592 <_scanf_float+0x15e>
 8005566:	2b66      	cmp	r3, #102	; 0x66
 8005568:	d043      	beq.n	80055f2 <_scanf_float+0x1be>
 800556a:	2b69      	cmp	r3, #105	; 0x69
 800556c:	d19a      	bne.n	80054a4 <_scanf_float+0x70>
 800556e:	f1bb 0f00 	cmp.w	fp, #0
 8005572:	d138      	bne.n	80055e6 <_scanf_float+0x1b2>
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	d197      	bne.n	80054aa <_scanf_float+0x76>
 800557a:	6821      	ldr	r1, [r4, #0]
 800557c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005580:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005584:	d195      	bne.n	80054b2 <_scanf_float+0x7e>
 8005586:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800558a:	6021      	str	r1, [r4, #0]
 800558c:	f04f 0b01 	mov.w	fp, #1
 8005590:	e011      	b.n	80055b6 <_scanf_float+0x182>
 8005592:	2b74      	cmp	r3, #116	; 0x74
 8005594:	d034      	beq.n	8005600 <_scanf_float+0x1cc>
 8005596:	2b79      	cmp	r3, #121	; 0x79
 8005598:	d184      	bne.n	80054a4 <_scanf_float+0x70>
 800559a:	f1bb 0f07 	cmp.w	fp, #7
 800559e:	d181      	bne.n	80054a4 <_scanf_float+0x70>
 80055a0:	f04f 0b08 	mov.w	fp, #8
 80055a4:	e007      	b.n	80055b6 <_scanf_float+0x182>
 80055a6:	eb12 0f0b 	cmn.w	r2, fp
 80055aa:	f47f af7b 	bne.w	80054a4 <_scanf_float+0x70>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80055b4:	6021      	str	r1, [r4, #0]
 80055b6:	702b      	strb	r3, [r5, #0]
 80055b8:	3501      	adds	r5, #1
 80055ba:	e79a      	b.n	80054f2 <_scanf_float+0xbe>
 80055bc:	6821      	ldr	r1, [r4, #0]
 80055be:	0608      	lsls	r0, r1, #24
 80055c0:	f57f af70 	bpl.w	80054a4 <_scanf_float+0x70>
 80055c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055c8:	e7f4      	b.n	80055b4 <_scanf_float+0x180>
 80055ca:	2a02      	cmp	r2, #2
 80055cc:	d047      	beq.n	800565e <_scanf_float+0x22a>
 80055ce:	f1bb 0f01 	cmp.w	fp, #1
 80055d2:	d003      	beq.n	80055dc <_scanf_float+0x1a8>
 80055d4:	f1bb 0f04 	cmp.w	fp, #4
 80055d8:	f47f af64 	bne.w	80054a4 <_scanf_float+0x70>
 80055dc:	f10b 0b01 	add.w	fp, fp, #1
 80055e0:	fa5f fb8b 	uxtb.w	fp, fp
 80055e4:	e7e7      	b.n	80055b6 <_scanf_float+0x182>
 80055e6:	f1bb 0f03 	cmp.w	fp, #3
 80055ea:	d0f7      	beq.n	80055dc <_scanf_float+0x1a8>
 80055ec:	f1bb 0f05 	cmp.w	fp, #5
 80055f0:	e7f2      	b.n	80055d8 <_scanf_float+0x1a4>
 80055f2:	f1bb 0f02 	cmp.w	fp, #2
 80055f6:	f47f af55 	bne.w	80054a4 <_scanf_float+0x70>
 80055fa:	f04f 0b03 	mov.w	fp, #3
 80055fe:	e7da      	b.n	80055b6 <_scanf_float+0x182>
 8005600:	f1bb 0f06 	cmp.w	fp, #6
 8005604:	f47f af4e 	bne.w	80054a4 <_scanf_float+0x70>
 8005608:	f04f 0b07 	mov.w	fp, #7
 800560c:	e7d3      	b.n	80055b6 <_scanf_float+0x182>
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	0588      	lsls	r0, r1, #22
 8005612:	f57f af47 	bpl.w	80054a4 <_scanf_float+0x70>
 8005616:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800561a:	6021      	str	r1, [r4, #0]
 800561c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005620:	e7c9      	b.n	80055b6 <_scanf_float+0x182>
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005628:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800562c:	d006      	beq.n	800563c <_scanf_float+0x208>
 800562e:	0548      	lsls	r0, r1, #21
 8005630:	f57f af38 	bpl.w	80054a4 <_scanf_float+0x70>
 8005634:	f1b9 0f00 	cmp.w	r9, #0
 8005638:	f43f af3b 	beq.w	80054b2 <_scanf_float+0x7e>
 800563c:	0588      	lsls	r0, r1, #22
 800563e:	bf58      	it	pl
 8005640:	9802      	ldrpl	r0, [sp, #8]
 8005642:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005646:	bf58      	it	pl
 8005648:	eba9 0000 	subpl.w	r0, r9, r0
 800564c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005650:	bf58      	it	pl
 8005652:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005656:	6021      	str	r1, [r4, #0]
 8005658:	f04f 0900 	mov.w	r9, #0
 800565c:	e7ab      	b.n	80055b6 <_scanf_float+0x182>
 800565e:	2203      	movs	r2, #3
 8005660:	e7a9      	b.n	80055b6 <_scanf_float+0x182>
 8005662:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005666:	9205      	str	r2, [sp, #20]
 8005668:	4631      	mov	r1, r6
 800566a:	4638      	mov	r0, r7
 800566c:	4798      	blx	r3
 800566e:	9a05      	ldr	r2, [sp, #20]
 8005670:	2800      	cmp	r0, #0
 8005672:	f43f af04 	beq.w	800547e <_scanf_float+0x4a>
 8005676:	e715      	b.n	80054a4 <_scanf_float+0x70>
 8005678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800567c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005680:	4632      	mov	r2, r6
 8005682:	4638      	mov	r0, r7
 8005684:	4798      	blx	r3
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	3b01      	subs	r3, #1
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	e715      	b.n	80054ba <_scanf_float+0x86>
 800568e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005692:	2b06      	cmp	r3, #6
 8005694:	d80a      	bhi.n	80056ac <_scanf_float+0x278>
 8005696:	f1bb 0f02 	cmp.w	fp, #2
 800569a:	d968      	bls.n	800576e <_scanf_float+0x33a>
 800569c:	f1ab 0b03 	sub.w	fp, fp, #3
 80056a0:	fa5f fb8b 	uxtb.w	fp, fp
 80056a4:	eba5 0b0b 	sub.w	fp, r5, fp
 80056a8:	455d      	cmp	r5, fp
 80056aa:	d14b      	bne.n	8005744 <_scanf_float+0x310>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	05da      	lsls	r2, r3, #23
 80056b0:	d51f      	bpl.n	80056f2 <_scanf_float+0x2be>
 80056b2:	055b      	lsls	r3, r3, #21
 80056b4:	d468      	bmi.n	8005788 <_scanf_float+0x354>
 80056b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	2965      	cmp	r1, #101	; 0x65
 80056be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80056c2:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	d00d      	beq.n	80056e6 <_scanf_float+0x2b2>
 80056ca:	2945      	cmp	r1, #69	; 0x45
 80056cc:	d00b      	beq.n	80056e6 <_scanf_float+0x2b2>
 80056ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d2:	4632      	mov	r2, r6
 80056d4:	4638      	mov	r0, r7
 80056d6:	4798      	blx	r3
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80056de:	3b01      	subs	r3, #1
 80056e0:	f1a5 0b02 	sub.w	fp, r5, #2
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056ea:	4632      	mov	r2, r6
 80056ec:	4638      	mov	r0, r7
 80056ee:	4798      	blx	r3
 80056f0:	465d      	mov	r5, fp
 80056f2:	6826      	ldr	r6, [r4, #0]
 80056f4:	f016 0610 	ands.w	r6, r6, #16
 80056f8:	d17a      	bne.n	80057f0 <_scanf_float+0x3bc>
 80056fa:	702e      	strb	r6, [r5, #0]
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d142      	bne.n	800578e <_scanf_float+0x35a>
 8005708:	9b02      	ldr	r3, [sp, #8]
 800570a:	eba9 0303 	sub.w	r3, r9, r3
 800570e:	425a      	negs	r2, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d149      	bne.n	80057a8 <_scanf_float+0x374>
 8005714:	2200      	movs	r2, #0
 8005716:	4641      	mov	r1, r8
 8005718:	4638      	mov	r0, r7
 800571a:	f000 fea5 	bl	8006468 <_strtod_r>
 800571e:	6825      	ldr	r5, [r4, #0]
 8005720:	f8da 3000 	ldr.w	r3, [sl]
 8005724:	f015 0f02 	tst.w	r5, #2
 8005728:	f103 0204 	add.w	r2, r3, #4
 800572c:	ec59 8b10 	vmov	r8, r9, d0
 8005730:	f8ca 2000 	str.w	r2, [sl]
 8005734:	d043      	beq.n	80057be <_scanf_float+0x38a>
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	e9c3 8900 	strd	r8, r9, [r3]
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60e3      	str	r3, [r4, #12]
 8005742:	e6be      	b.n	80054c2 <_scanf_float+0x8e>
 8005744:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005748:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800574c:	4632      	mov	r2, r6
 800574e:	4638      	mov	r0, r7
 8005750:	4798      	blx	r3
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	3b01      	subs	r3, #1
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	e7a6      	b.n	80056a8 <_scanf_float+0x274>
 800575a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800575e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005762:	4632      	mov	r2, r6
 8005764:	4638      	mov	r0, r7
 8005766:	4798      	blx	r3
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	3b01      	subs	r3, #1
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	4545      	cmp	r5, r8
 8005770:	d8f3      	bhi.n	800575a <_scanf_float+0x326>
 8005772:	e6a5      	b.n	80054c0 <_scanf_float+0x8c>
 8005774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005778:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800577c:	4632      	mov	r2, r6
 800577e:	4638      	mov	r0, r7
 8005780:	4798      	blx	r3
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	3b01      	subs	r3, #1
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	4545      	cmp	r5, r8
 800578a:	d8f3      	bhi.n	8005774 <_scanf_float+0x340>
 800578c:	e698      	b.n	80054c0 <_scanf_float+0x8c>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0bf      	beq.n	8005714 <_scanf_float+0x2e0>
 8005794:	9904      	ldr	r1, [sp, #16]
 8005796:	230a      	movs	r3, #10
 8005798:	4632      	mov	r2, r6
 800579a:	3101      	adds	r1, #1
 800579c:	4638      	mov	r0, r7
 800579e:	f000 feef 	bl	8006580 <_strtol_r>
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	9d04      	ldr	r5, [sp, #16]
 80057a6:	1ac2      	subs	r2, r0, r3
 80057a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057ac:	429d      	cmp	r5, r3
 80057ae:	bf28      	it	cs
 80057b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80057b4:	490f      	ldr	r1, [pc, #60]	; (80057f4 <_scanf_float+0x3c0>)
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 f824 	bl	8005804 <siprintf>
 80057bc:	e7aa      	b.n	8005714 <_scanf_float+0x2e0>
 80057be:	f015 0504 	ands.w	r5, r5, #4
 80057c2:	d1b8      	bne.n	8005736 <_scanf_float+0x302>
 80057c4:	681f      	ldr	r7, [r3, #0]
 80057c6:	ee10 2a10 	vmov	r2, s0
 80057ca:	464b      	mov	r3, r9
 80057cc:	ee10 0a10 	vmov	r0, s0
 80057d0:	4649      	mov	r1, r9
 80057d2:	f7fb f9cb 	bl	8000b6c <__aeabi_dcmpun>
 80057d6:	b128      	cbz	r0, 80057e4 <_scanf_float+0x3b0>
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 f80d 	bl	80057f8 <nanf>
 80057de:	ed87 0a00 	vstr	s0, [r7]
 80057e2:	e7ab      	b.n	800573c <_scanf_float+0x308>
 80057e4:	4640      	mov	r0, r8
 80057e6:	4649      	mov	r1, r9
 80057e8:	f7fb fa1e 	bl	8000c28 <__aeabi_d2f>
 80057ec:	6038      	str	r0, [r7, #0]
 80057ee:	e7a5      	b.n	800573c <_scanf_float+0x308>
 80057f0:	2600      	movs	r6, #0
 80057f2:	e666      	b.n	80054c2 <_scanf_float+0x8e>
 80057f4:	08008674 	.word	0x08008674

080057f8 <nanf>:
 80057f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005800 <nanf+0x8>
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	7fc00000 	.word	0x7fc00000

08005804 <siprintf>:
 8005804:	b40e      	push	{r1, r2, r3}
 8005806:	b500      	push	{lr}
 8005808:	b09c      	sub	sp, #112	; 0x70
 800580a:	ab1d      	add	r3, sp, #116	; 0x74
 800580c:	9002      	str	r0, [sp, #8]
 800580e:	9006      	str	r0, [sp, #24]
 8005810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005814:	4809      	ldr	r0, [pc, #36]	; (800583c <siprintf+0x38>)
 8005816:	9107      	str	r1, [sp, #28]
 8005818:	9104      	str	r1, [sp, #16]
 800581a:	4909      	ldr	r1, [pc, #36]	; (8005840 <siprintf+0x3c>)
 800581c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	6800      	ldr	r0, [r0, #0]
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	a902      	add	r1, sp, #8
 8005828:	f002 fd66 	bl	80082f8 <_svfiprintf_r>
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	b01c      	add	sp, #112	; 0x70
 8005834:	f85d eb04 	ldr.w	lr, [sp], #4
 8005838:	b003      	add	sp, #12
 800583a:	4770      	bx	lr
 800583c:	2000000c 	.word	0x2000000c
 8005840:	ffff0208 	.word	0xffff0208

08005844 <sulp>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4604      	mov	r4, r0
 8005848:	460d      	mov	r5, r1
 800584a:	ec45 4b10 	vmov	d0, r4, r5
 800584e:	4616      	mov	r6, r2
 8005850:	f002 fb0e 	bl	8007e70 <__ulp>
 8005854:	ec51 0b10 	vmov	r0, r1, d0
 8005858:	b17e      	cbz	r6, 800587a <sulp+0x36>
 800585a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800585e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd09      	ble.n	800587a <sulp+0x36>
 8005866:	051b      	lsls	r3, r3, #20
 8005868:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800586c:	2400      	movs	r4, #0
 800586e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	f7fa fedf 	bl	8000638 <__aeabi_dmul>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	0000      	movs	r0, r0
	...

08005880 <_strtod_l>:
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	461f      	mov	r7, r3
 8005886:	b0a1      	sub	sp, #132	; 0x84
 8005888:	2300      	movs	r3, #0
 800588a:	4681      	mov	r9, r0
 800588c:	4638      	mov	r0, r7
 800588e:	460e      	mov	r6, r1
 8005890:	9217      	str	r2, [sp, #92]	; 0x5c
 8005892:	931c      	str	r3, [sp, #112]	; 0x70
 8005894:	f001 fff5 	bl	8007882 <__localeconv_l>
 8005898:	4680      	mov	r8, r0
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	f7fa fcb8 	bl	8000210 <strlen>
 80058a0:	f04f 0a00 	mov.w	sl, #0
 80058a4:	4604      	mov	r4, r0
 80058a6:	f04f 0b00 	mov.w	fp, #0
 80058aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80058ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	2a0d      	cmp	r2, #13
 80058b2:	d832      	bhi.n	800591a <_strtod_l+0x9a>
 80058b4:	2a09      	cmp	r2, #9
 80058b6:	d236      	bcs.n	8005926 <_strtod_l+0xa6>
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d03e      	beq.n	800593a <_strtod_l+0xba>
 80058bc:	2300      	movs	r3, #0
 80058be:	930d      	str	r3, [sp, #52]	; 0x34
 80058c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058c2:	782b      	ldrb	r3, [r5, #0]
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	f040 80ac 	bne.w	8005a22 <_strtod_l+0x1a2>
 80058ca:	786b      	ldrb	r3, [r5, #1]
 80058cc:	2b58      	cmp	r3, #88	; 0x58
 80058ce:	d001      	beq.n	80058d4 <_strtod_l+0x54>
 80058d0:	2b78      	cmp	r3, #120	; 0x78
 80058d2:	d167      	bne.n	80059a4 <_strtod_l+0x124>
 80058d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	ab1c      	add	r3, sp, #112	; 0x70
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	9702      	str	r7, [sp, #8]
 80058de:	ab1d      	add	r3, sp, #116	; 0x74
 80058e0:	4a88      	ldr	r2, [pc, #544]	; (8005b04 <_strtod_l+0x284>)
 80058e2:	a91b      	add	r1, sp, #108	; 0x6c
 80058e4:	4648      	mov	r0, r9
 80058e6:	f001 fcf2 	bl	80072ce <__gethex>
 80058ea:	f010 0407 	ands.w	r4, r0, #7
 80058ee:	4606      	mov	r6, r0
 80058f0:	d005      	beq.n	80058fe <_strtod_l+0x7e>
 80058f2:	2c06      	cmp	r4, #6
 80058f4:	d12b      	bne.n	800594e <_strtod_l+0xce>
 80058f6:	3501      	adds	r5, #1
 80058f8:	2300      	movs	r3, #0
 80058fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80058fc:	930d      	str	r3, [sp, #52]	; 0x34
 80058fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 859a 	bne.w	800643a <_strtod_l+0xbba>
 8005906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005908:	b1e3      	cbz	r3, 8005944 <_strtod_l+0xc4>
 800590a:	4652      	mov	r2, sl
 800590c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005910:	ec43 2b10 	vmov	d0, r2, r3
 8005914:	b021      	add	sp, #132	; 0x84
 8005916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591a:	2a2b      	cmp	r2, #43	; 0x2b
 800591c:	d015      	beq.n	800594a <_strtod_l+0xca>
 800591e:	2a2d      	cmp	r2, #45	; 0x2d
 8005920:	d004      	beq.n	800592c <_strtod_l+0xac>
 8005922:	2a20      	cmp	r2, #32
 8005924:	d1ca      	bne.n	80058bc <_strtod_l+0x3c>
 8005926:	3301      	adds	r3, #1
 8005928:	931b      	str	r3, [sp, #108]	; 0x6c
 800592a:	e7bf      	b.n	80058ac <_strtod_l+0x2c>
 800592c:	2201      	movs	r2, #1
 800592e:	920d      	str	r2, [sp, #52]	; 0x34
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	921b      	str	r2, [sp, #108]	; 0x6c
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1c2      	bne.n	80058c0 <_strtod_l+0x40>
 800593a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800593c:	961b      	str	r6, [sp, #108]	; 0x6c
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 8579 	bne.w	8006436 <_strtod_l+0xbb6>
 8005944:	4652      	mov	r2, sl
 8005946:	465b      	mov	r3, fp
 8005948:	e7e2      	b.n	8005910 <_strtod_l+0x90>
 800594a:	2200      	movs	r2, #0
 800594c:	e7ef      	b.n	800592e <_strtod_l+0xae>
 800594e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005950:	b13a      	cbz	r2, 8005962 <_strtod_l+0xe2>
 8005952:	2135      	movs	r1, #53	; 0x35
 8005954:	a81e      	add	r0, sp, #120	; 0x78
 8005956:	f002 fb83 	bl	8008060 <__copybits>
 800595a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800595c:	4648      	mov	r0, r9
 800595e:	f001 ffef 	bl	8007940 <_Bfree>
 8005962:	3c01      	subs	r4, #1
 8005964:	2c04      	cmp	r4, #4
 8005966:	d806      	bhi.n	8005976 <_strtod_l+0xf6>
 8005968:	e8df f004 	tbb	[pc, r4]
 800596c:	1714030a 	.word	0x1714030a
 8005970:	0a          	.byte	0x0a
 8005971:	00          	.byte	0x00
 8005972:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005976:	0730      	lsls	r0, r6, #28
 8005978:	d5c1      	bpl.n	80058fe <_strtod_l+0x7e>
 800597a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800597e:	e7be      	b.n	80058fe <_strtod_l+0x7e>
 8005980:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005984:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800598a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800598e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005992:	e7f0      	b.n	8005976 <_strtod_l+0xf6>
 8005994:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005b08 <_strtod_l+0x288>
 8005998:	e7ed      	b.n	8005976 <_strtod_l+0xf6>
 800599a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800599e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80059a2:	e7e8      	b.n	8005976 <_strtod_l+0xf6>
 80059a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d0f9      	beq.n	80059a4 <_strtod_l+0x124>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0a4      	beq.n	80058fe <_strtod_l+0x7e>
 80059b4:	2301      	movs	r3, #1
 80059b6:	2500      	movs	r5, #0
 80059b8:	9306      	str	r3, [sp, #24]
 80059ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	9507      	str	r5, [sp, #28]
 80059c0:	9505      	str	r5, [sp, #20]
 80059c2:	220a      	movs	r2, #10
 80059c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80059c6:	7807      	ldrb	r7, [r0, #0]
 80059c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80059cc:	b2d9      	uxtb	r1, r3
 80059ce:	2909      	cmp	r1, #9
 80059d0:	d929      	bls.n	8005a26 <_strtod_l+0x1a6>
 80059d2:	4622      	mov	r2, r4
 80059d4:	f8d8 1000 	ldr.w	r1, [r8]
 80059d8:	f002 fd96 	bl	8008508 <strncmp>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d031      	beq.n	8005a44 <_strtod_l+0x1c4>
 80059e0:	2000      	movs	r0, #0
 80059e2:	9c05      	ldr	r4, [sp, #20]
 80059e4:	9004      	str	r0, [sp, #16]
 80059e6:	463b      	mov	r3, r7
 80059e8:	4602      	mov	r2, r0
 80059ea:	2b65      	cmp	r3, #101	; 0x65
 80059ec:	d001      	beq.n	80059f2 <_strtod_l+0x172>
 80059ee:	2b45      	cmp	r3, #69	; 0x45
 80059f0:	d114      	bne.n	8005a1c <_strtod_l+0x19c>
 80059f2:	b924      	cbnz	r4, 80059fe <_strtod_l+0x17e>
 80059f4:	b910      	cbnz	r0, 80059fc <_strtod_l+0x17c>
 80059f6:	9b06      	ldr	r3, [sp, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d09e      	beq.n	800593a <_strtod_l+0xba>
 80059fc:	2400      	movs	r4, #0
 80059fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a00:	1c73      	adds	r3, r6, #1
 8005a02:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a04:	7873      	ldrb	r3, [r6, #1]
 8005a06:	2b2b      	cmp	r3, #43	; 0x2b
 8005a08:	d078      	beq.n	8005afc <_strtod_l+0x27c>
 8005a0a:	2b2d      	cmp	r3, #45	; 0x2d
 8005a0c:	d070      	beq.n	8005af0 <_strtod_l+0x270>
 8005a0e:	f04f 0c00 	mov.w	ip, #0
 8005a12:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005a16:	2f09      	cmp	r7, #9
 8005a18:	d97c      	bls.n	8005b14 <_strtod_l+0x294>
 8005a1a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a1c:	f04f 0e00 	mov.w	lr, #0
 8005a20:	e09a      	b.n	8005b58 <_strtod_l+0x2d8>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e7c7      	b.n	80059b6 <_strtod_l+0x136>
 8005a26:	9905      	ldr	r1, [sp, #20]
 8005a28:	2908      	cmp	r1, #8
 8005a2a:	bfdd      	ittte	le
 8005a2c:	9907      	ldrle	r1, [sp, #28]
 8005a2e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a32:	9307      	strle	r3, [sp, #28]
 8005a34:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005a38:	9b05      	ldr	r3, [sp, #20]
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a42:	e7bf      	b.n	80059c4 <_strtod_l+0x144>
 8005a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a46:	191a      	adds	r2, r3, r4
 8005a48:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	5d1b      	ldrb	r3, [r3, r4]
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d037      	beq.n	8005ac2 <_strtod_l+0x242>
 8005a52:	9c05      	ldr	r4, [sp, #20]
 8005a54:	4602      	mov	r2, r0
 8005a56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a5a:	2909      	cmp	r1, #9
 8005a5c:	d913      	bls.n	8005a86 <_strtod_l+0x206>
 8005a5e:	2101      	movs	r1, #1
 8005a60:	9104      	str	r1, [sp, #16]
 8005a62:	e7c2      	b.n	80059ea <_strtod_l+0x16a>
 8005a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	2b30      	cmp	r3, #48	; 0x30
 8005a70:	d0f8      	beq.n	8005a64 <_strtod_l+0x1e4>
 8005a72:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a76:	2a08      	cmp	r2, #8
 8005a78:	f200 84e4 	bhi.w	8006444 <_strtod_l+0xbc4>
 8005a7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a7e:	9208      	str	r2, [sp, #32]
 8005a80:	4602      	mov	r2, r0
 8005a82:	2000      	movs	r0, #0
 8005a84:	4604      	mov	r4, r0
 8005a86:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a8a:	f100 0101 	add.w	r1, r0, #1
 8005a8e:	d012      	beq.n	8005ab6 <_strtod_l+0x236>
 8005a90:	440a      	add	r2, r1
 8005a92:	eb00 0c04 	add.w	ip, r0, r4
 8005a96:	4621      	mov	r1, r4
 8005a98:	270a      	movs	r7, #10
 8005a9a:	458c      	cmp	ip, r1
 8005a9c:	d113      	bne.n	8005ac6 <_strtod_l+0x246>
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	2908      	cmp	r1, #8
 8005aa2:	f104 0401 	add.w	r4, r4, #1
 8005aa6:	4404      	add	r4, r0
 8005aa8:	dc19      	bgt.n	8005ade <_strtod_l+0x25e>
 8005aaa:	9b07      	ldr	r3, [sp, #28]
 8005aac:	210a      	movs	r1, #10
 8005aae:	fb01 e303 	mla	r3, r1, r3, lr
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ab8:	1c58      	adds	r0, r3, #1
 8005aba:	901b      	str	r0, [sp, #108]	; 0x6c
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	4608      	mov	r0, r1
 8005ac0:	e7c9      	b.n	8005a56 <_strtod_l+0x1d6>
 8005ac2:	9805      	ldr	r0, [sp, #20]
 8005ac4:	e7d3      	b.n	8005a6e <_strtod_l+0x1ee>
 8005ac6:	2908      	cmp	r1, #8
 8005ac8:	f101 0101 	add.w	r1, r1, #1
 8005acc:	dc03      	bgt.n	8005ad6 <_strtod_l+0x256>
 8005ace:	9b07      	ldr	r3, [sp, #28]
 8005ad0:	437b      	muls	r3, r7
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	e7e1      	b.n	8005a9a <_strtod_l+0x21a>
 8005ad6:	2910      	cmp	r1, #16
 8005ad8:	bfd8      	it	le
 8005ada:	437d      	mulle	r5, r7
 8005adc:	e7dd      	b.n	8005a9a <_strtod_l+0x21a>
 8005ade:	2c10      	cmp	r4, #16
 8005ae0:	bfdc      	itt	le
 8005ae2:	210a      	movle	r1, #10
 8005ae4:	fb01 e505 	mlale	r5, r1, r5, lr
 8005ae8:	e7e4      	b.n	8005ab4 <_strtod_l+0x234>
 8005aea:	2301      	movs	r3, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	e781      	b.n	80059f4 <_strtod_l+0x174>
 8005af0:	f04f 0c01 	mov.w	ip, #1
 8005af4:	1cb3      	adds	r3, r6, #2
 8005af6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005af8:	78b3      	ldrb	r3, [r6, #2]
 8005afa:	e78a      	b.n	8005a12 <_strtod_l+0x192>
 8005afc:	f04f 0c00 	mov.w	ip, #0
 8005b00:	e7f8      	b.n	8005af4 <_strtod_l+0x274>
 8005b02:	bf00      	nop
 8005b04:	0800867c 	.word	0x0800867c
 8005b08:	7ff00000 	.word	0x7ff00000
 8005b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b0e:	1c5f      	adds	r7, r3, #1
 8005b10:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b30      	cmp	r3, #48	; 0x30
 8005b16:	d0f9      	beq.n	8005b0c <_strtod_l+0x28c>
 8005b18:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005b1c:	2f08      	cmp	r7, #8
 8005b1e:	f63f af7d 	bhi.w	8005a1c <_strtod_l+0x19c>
 8005b22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b28:	930a      	str	r3, [sp, #40]	; 0x28
 8005b2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b2c:	1c5f      	adds	r7, r3, #1
 8005b2e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005b36:	f1b8 0f09 	cmp.w	r8, #9
 8005b3a:	d937      	bls.n	8005bac <_strtod_l+0x32c>
 8005b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b3e:	1a7f      	subs	r7, r7, r1
 8005b40:	2f08      	cmp	r7, #8
 8005b42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005b46:	dc37      	bgt.n	8005bb8 <_strtod_l+0x338>
 8005b48:	45be      	cmp	lr, r7
 8005b4a:	bfa8      	it	ge
 8005b4c:	46be      	movge	lr, r7
 8005b4e:	f1bc 0f00 	cmp.w	ip, #0
 8005b52:	d001      	beq.n	8005b58 <_strtod_l+0x2d8>
 8005b54:	f1ce 0e00 	rsb	lr, lr, #0
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d151      	bne.n	8005c00 <_strtod_l+0x380>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f47f aece 	bne.w	80058fe <_strtod_l+0x7e>
 8005b62:	9a06      	ldr	r2, [sp, #24]
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	f47f aeca 	bne.w	80058fe <_strtod_l+0x7e>
 8005b6a:	9a04      	ldr	r2, [sp, #16]
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	f47f aee4 	bne.w	800593a <_strtod_l+0xba>
 8005b72:	2b4e      	cmp	r3, #78	; 0x4e
 8005b74:	d027      	beq.n	8005bc6 <_strtod_l+0x346>
 8005b76:	dc21      	bgt.n	8005bbc <_strtod_l+0x33c>
 8005b78:	2b49      	cmp	r3, #73	; 0x49
 8005b7a:	f47f aede 	bne.w	800593a <_strtod_l+0xba>
 8005b7e:	49a0      	ldr	r1, [pc, #640]	; (8005e00 <_strtod_l+0x580>)
 8005b80:	a81b      	add	r0, sp, #108	; 0x6c
 8005b82:	f001 fdd7 	bl	8007734 <__match>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f aed7 	beq.w	800593a <_strtod_l+0xba>
 8005b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b8e:	499d      	ldr	r1, [pc, #628]	; (8005e04 <_strtod_l+0x584>)
 8005b90:	3b01      	subs	r3, #1
 8005b92:	a81b      	add	r0, sp, #108	; 0x6c
 8005b94:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b96:	f001 fdcd 	bl	8007734 <__match>
 8005b9a:	b910      	cbnz	r0, 8005ba2 <_strtod_l+0x322>
 8005b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ba2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005e18 <_strtod_l+0x598>
 8005ba6:	f04f 0a00 	mov.w	sl, #0
 8005baa:	e6a8      	b.n	80058fe <_strtod_l+0x7e>
 8005bac:	210a      	movs	r1, #10
 8005bae:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005bb2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bb6:	e7b8      	b.n	8005b2a <_strtod_l+0x2aa>
 8005bb8:	46be      	mov	lr, r7
 8005bba:	e7c8      	b.n	8005b4e <_strtod_l+0x2ce>
 8005bbc:	2b69      	cmp	r3, #105	; 0x69
 8005bbe:	d0de      	beq.n	8005b7e <_strtod_l+0x2fe>
 8005bc0:	2b6e      	cmp	r3, #110	; 0x6e
 8005bc2:	f47f aeba 	bne.w	800593a <_strtod_l+0xba>
 8005bc6:	4990      	ldr	r1, [pc, #576]	; (8005e08 <_strtod_l+0x588>)
 8005bc8:	a81b      	add	r0, sp, #108	; 0x6c
 8005bca:	f001 fdb3 	bl	8007734 <__match>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f43f aeb3 	beq.w	800593a <_strtod_l+0xba>
 8005bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d10e      	bne.n	8005bfa <_strtod_l+0x37a>
 8005bdc:	aa1e      	add	r2, sp, #120	; 0x78
 8005bde:	498b      	ldr	r1, [pc, #556]	; (8005e0c <_strtod_l+0x58c>)
 8005be0:	a81b      	add	r0, sp, #108	; 0x6c
 8005be2:	f001 fdbb 	bl	800775c <__hexnan>
 8005be6:	2805      	cmp	r0, #5
 8005be8:	d107      	bne.n	8005bfa <_strtod_l+0x37a>
 8005bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005bf0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005bf4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005bf8:	e681      	b.n	80058fe <_strtod_l+0x7e>
 8005bfa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005e20 <_strtod_l+0x5a0>
 8005bfe:	e7d2      	b.n	8005ba6 <_strtod_l+0x326>
 8005c00:	ebae 0302 	sub.w	r3, lr, r2
 8005c04:	9306      	str	r3, [sp, #24]
 8005c06:	9b05      	ldr	r3, [sp, #20]
 8005c08:	9807      	ldr	r0, [sp, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf08      	it	eq
 8005c0e:	4623      	moveq	r3, r4
 8005c10:	2c10      	cmp	r4, #16
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	46a0      	mov	r8, r4
 8005c16:	bfa8      	it	ge
 8005c18:	f04f 0810 	movge.w	r8, #16
 8005c1c:	f7fa fc92 	bl	8000544 <__aeabi_ui2d>
 8005c20:	2c09      	cmp	r4, #9
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	dc13      	bgt.n	8005c50 <_strtod_l+0x3d0>
 8005c28:	9b06      	ldr	r3, [sp, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f43f ae67 	beq.w	80058fe <_strtod_l+0x7e>
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	dd7a      	ble.n	8005d2a <_strtod_l+0x4aa>
 8005c34:	2b16      	cmp	r3, #22
 8005c36:	dc61      	bgt.n	8005cfc <_strtod_l+0x47c>
 8005c38:	4a75      	ldr	r2, [pc, #468]	; (8005e10 <_strtod_l+0x590>)
 8005c3a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005c3e:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c42:	4652      	mov	r2, sl
 8005c44:	465b      	mov	r3, fp
 8005c46:	f7fa fcf7 	bl	8000638 <__aeabi_dmul>
 8005c4a:	4682      	mov	sl, r0
 8005c4c:	468b      	mov	fp, r1
 8005c4e:	e656      	b.n	80058fe <_strtod_l+0x7e>
 8005c50:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <_strtod_l+0x590>)
 8005c52:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c5a:	f7fa fced 	bl	8000638 <__aeabi_dmul>
 8005c5e:	4606      	mov	r6, r0
 8005c60:	4628      	mov	r0, r5
 8005c62:	460f      	mov	r7, r1
 8005c64:	f7fa fc6e 	bl	8000544 <__aeabi_ui2d>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fb2c 	bl	80002cc <__adddf3>
 8005c74:	2c0f      	cmp	r4, #15
 8005c76:	4682      	mov	sl, r0
 8005c78:	468b      	mov	fp, r1
 8005c7a:	ddd5      	ble.n	8005c28 <_strtod_l+0x3a8>
 8005c7c:	9b06      	ldr	r3, [sp, #24]
 8005c7e:	eba4 0808 	sub.w	r8, r4, r8
 8005c82:	4498      	add	r8, r3
 8005c84:	f1b8 0f00 	cmp.w	r8, #0
 8005c88:	f340 8096 	ble.w	8005db8 <_strtod_l+0x538>
 8005c8c:	f018 030f 	ands.w	r3, r8, #15
 8005c90:	d00a      	beq.n	8005ca8 <_strtod_l+0x428>
 8005c92:	495f      	ldr	r1, [pc, #380]	; (8005e10 <_strtod_l+0x590>)
 8005c94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c98:	4652      	mov	r2, sl
 8005c9a:	465b      	mov	r3, fp
 8005c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca0:	f7fa fcca 	bl	8000638 <__aeabi_dmul>
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	468b      	mov	fp, r1
 8005ca8:	f038 080f 	bics.w	r8, r8, #15
 8005cac:	d073      	beq.n	8005d96 <_strtod_l+0x516>
 8005cae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005cb2:	dd47      	ble.n	8005d44 <_strtod_l+0x4c4>
 8005cb4:	2400      	movs	r4, #0
 8005cb6:	46a0      	mov	r8, r4
 8005cb8:	9407      	str	r4, [sp, #28]
 8005cba:	9405      	str	r4, [sp, #20]
 8005cbc:	2322      	movs	r3, #34	; 0x22
 8005cbe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005e18 <_strtod_l+0x598>
 8005cc2:	f8c9 3000 	str.w	r3, [r9]
 8005cc6:	f04f 0a00 	mov.w	sl, #0
 8005cca:	9b07      	ldr	r3, [sp, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f43f ae16 	beq.w	80058fe <_strtod_l+0x7e>
 8005cd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cd4:	4648      	mov	r0, r9
 8005cd6:	f001 fe33 	bl	8007940 <_Bfree>
 8005cda:	9905      	ldr	r1, [sp, #20]
 8005cdc:	4648      	mov	r0, r9
 8005cde:	f001 fe2f 	bl	8007940 <_Bfree>
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	4648      	mov	r0, r9
 8005ce6:	f001 fe2b 	bl	8007940 <_Bfree>
 8005cea:	9907      	ldr	r1, [sp, #28]
 8005cec:	4648      	mov	r0, r9
 8005cee:	f001 fe27 	bl	8007940 <_Bfree>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4648      	mov	r0, r9
 8005cf6:	f001 fe23 	bl	8007940 <_Bfree>
 8005cfa:	e600      	b.n	80058fe <_strtod_l+0x7e>
 8005cfc:	9a06      	ldr	r2, [sp, #24]
 8005cfe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d02:	4293      	cmp	r3, r2
 8005d04:	dbba      	blt.n	8005c7c <_strtod_l+0x3fc>
 8005d06:	4d42      	ldr	r5, [pc, #264]	; (8005e10 <_strtod_l+0x590>)
 8005d08:	f1c4 040f 	rsb	r4, r4, #15
 8005d0c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d10:	4652      	mov	r2, sl
 8005d12:	465b      	mov	r3, fp
 8005d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d18:	f7fa fc8e 	bl	8000638 <__aeabi_dmul>
 8005d1c:	9b06      	ldr	r3, [sp, #24]
 8005d1e:	1b1c      	subs	r4, r3, r4
 8005d20:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d28:	e78d      	b.n	8005c46 <_strtod_l+0x3c6>
 8005d2a:	f113 0f16 	cmn.w	r3, #22
 8005d2e:	dba5      	blt.n	8005c7c <_strtod_l+0x3fc>
 8005d30:	4a37      	ldr	r2, [pc, #220]	; (8005e10 <_strtod_l+0x590>)
 8005d32:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005d36:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	f7fa fda5 	bl	800088c <__aeabi_ddiv>
 8005d42:	e782      	b.n	8005c4a <_strtod_l+0x3ca>
 8005d44:	2300      	movs	r3, #0
 8005d46:	4e33      	ldr	r6, [pc, #204]	; (8005e14 <_strtod_l+0x594>)
 8005d48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	461d      	mov	r5, r3
 8005d52:	f1b8 0f01 	cmp.w	r8, #1
 8005d56:	dc21      	bgt.n	8005d9c <_strtod_l+0x51c>
 8005d58:	b10b      	cbz	r3, 8005d5e <_strtod_l+0x4de>
 8005d5a:	4682      	mov	sl, r0
 8005d5c:	468b      	mov	fp, r1
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <_strtod_l+0x594>)
 8005d60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d68:	4652      	mov	r2, sl
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d70:	f7fa fc62 	bl	8000638 <__aeabi_dmul>
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <_strtod_l+0x598>)
 8005d76:	460a      	mov	r2, r1
 8005d78:	400b      	ands	r3, r1
 8005d7a:	4928      	ldr	r1, [pc, #160]	; (8005e1c <_strtod_l+0x59c>)
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	4682      	mov	sl, r0
 8005d80:	d898      	bhi.n	8005cb4 <_strtod_l+0x434>
 8005d82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d86:	428b      	cmp	r3, r1
 8005d88:	bf86      	itte	hi
 8005d8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005e24 <_strtod_l+0x5a4>
 8005d8e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005d92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005d96:	2300      	movs	r3, #0
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	e077      	b.n	8005e8c <_strtod_l+0x60c>
 8005d9c:	f018 0f01 	tst.w	r8, #1
 8005da0:	d006      	beq.n	8005db0 <_strtod_l+0x530>
 8005da2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fc45 	bl	8000638 <__aeabi_dmul>
 8005dae:	2301      	movs	r3, #1
 8005db0:	3501      	adds	r5, #1
 8005db2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005db6:	e7cc      	b.n	8005d52 <_strtod_l+0x4d2>
 8005db8:	d0ed      	beq.n	8005d96 <_strtod_l+0x516>
 8005dba:	f1c8 0800 	rsb	r8, r8, #0
 8005dbe:	f018 020f 	ands.w	r2, r8, #15
 8005dc2:	d00a      	beq.n	8005dda <_strtod_l+0x55a>
 8005dc4:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <_strtod_l+0x590>)
 8005dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dca:	4650      	mov	r0, sl
 8005dcc:	4659      	mov	r1, fp
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fd5b 	bl	800088c <__aeabi_ddiv>
 8005dd6:	4682      	mov	sl, r0
 8005dd8:	468b      	mov	fp, r1
 8005dda:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005dde:	d0da      	beq.n	8005d96 <_strtod_l+0x516>
 8005de0:	f1b8 0f1f 	cmp.w	r8, #31
 8005de4:	dd20      	ble.n	8005e28 <_strtod_l+0x5a8>
 8005de6:	2400      	movs	r4, #0
 8005de8:	46a0      	mov	r8, r4
 8005dea:	9407      	str	r4, [sp, #28]
 8005dec:	9405      	str	r4, [sp, #20]
 8005dee:	2322      	movs	r3, #34	; 0x22
 8005df0:	f04f 0a00 	mov.w	sl, #0
 8005df4:	f04f 0b00 	mov.w	fp, #0
 8005df8:	f8c9 3000 	str.w	r3, [r9]
 8005dfc:	e765      	b.n	8005cca <_strtod_l+0x44a>
 8005dfe:	bf00      	nop
 8005e00:	08008645 	.word	0x08008645
 8005e04:	080086d3 	.word	0x080086d3
 8005e08:	0800864d 	.word	0x0800864d
 8005e0c:	08008690 	.word	0x08008690
 8005e10:	08008710 	.word	0x08008710
 8005e14:	080086e8 	.word	0x080086e8
 8005e18:	7ff00000 	.word	0x7ff00000
 8005e1c:	7ca00000 	.word	0x7ca00000
 8005e20:	fff80000 	.word	0xfff80000
 8005e24:	7fefffff 	.word	0x7fefffff
 8005e28:	f018 0310 	ands.w	r3, r8, #16
 8005e2c:	bf18      	it	ne
 8005e2e:	236a      	movne	r3, #106	; 0x6a
 8005e30:	4da0      	ldr	r5, [pc, #640]	; (80060b4 <_strtod_l+0x834>)
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	4650      	mov	r0, sl
 8005e36:	4659      	mov	r1, fp
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f1b8 0f00 	cmp.w	r8, #0
 8005e3e:	f300 810a 	bgt.w	8006056 <_strtod_l+0x7d6>
 8005e42:	b10b      	cbz	r3, 8005e48 <_strtod_l+0x5c8>
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	b1bb      	cbz	r3, 8005e7c <_strtod_l+0x5fc>
 8005e4c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005e50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	4659      	mov	r1, fp
 8005e58:	dd10      	ble.n	8005e7c <_strtod_l+0x5fc>
 8005e5a:	2b1f      	cmp	r3, #31
 8005e5c:	f340 8107 	ble.w	800606e <_strtod_l+0x7ee>
 8005e60:	2b34      	cmp	r3, #52	; 0x34
 8005e62:	bfde      	ittt	le
 8005e64:	3b20      	suble	r3, #32
 8005e66:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005e6a:	fa02 f303 	lslle.w	r3, r2, r3
 8005e6e:	f04f 0a00 	mov.w	sl, #0
 8005e72:	bfcc      	ite	gt
 8005e74:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e78:	ea03 0b01 	andle.w	fp, r3, r1
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4650      	mov	r0, sl
 8005e82:	4659      	mov	r1, fp
 8005e84:	f7fa fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d1ac      	bne.n	8005de6 <_strtod_l+0x566>
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	9a05      	ldr	r2, [sp, #20]
 8005e92:	9908      	ldr	r1, [sp, #32]
 8005e94:	4623      	mov	r3, r4
 8005e96:	4648      	mov	r0, r9
 8005e98:	f001 fda4 	bl	80079e4 <__s2b>
 8005e9c:	9007      	str	r0, [sp, #28]
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f43f af08 	beq.w	8005cb4 <_strtod_l+0x434>
 8005ea4:	9a06      	ldr	r2, [sp, #24]
 8005ea6:	9b06      	ldr	r3, [sp, #24]
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	f1c3 0300 	rsb	r3, r3, #0
 8005eae:	bfa8      	it	ge
 8005eb0:	2300      	movge	r3, #0
 8005eb2:	930e      	str	r3, [sp, #56]	; 0x38
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005eba:	9316      	str	r3, [sp, #88]	; 0x58
 8005ebc:	46a0      	mov	r8, r4
 8005ebe:	9b07      	ldr	r3, [sp, #28]
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	f001 fd08 	bl	80078d8 <_Balloc>
 8005ec8:	9005      	str	r0, [sp, #20]
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f43f aef6 	beq.w	8005cbc <_strtod_l+0x43c>
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	3202      	adds	r2, #2
 8005ed6:	f103 010c 	add.w	r1, r3, #12
 8005eda:	0092      	lsls	r2, r2, #2
 8005edc:	300c      	adds	r0, #12
 8005ede:	f7fe fe39 	bl	8004b54 <memcpy>
 8005ee2:	aa1e      	add	r2, sp, #120	; 0x78
 8005ee4:	a91d      	add	r1, sp, #116	; 0x74
 8005ee6:	ec4b ab10 	vmov	d0, sl, fp
 8005eea:	4648      	mov	r0, r9
 8005eec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005ef0:	f002 f834 	bl	8007f5c <__d2b>
 8005ef4:	901c      	str	r0, [sp, #112]	; 0x70
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f43f aee0 	beq.w	8005cbc <_strtod_l+0x43c>
 8005efc:	2101      	movs	r1, #1
 8005efe:	4648      	mov	r0, r9
 8005f00:	f001 fdfc 	bl	8007afc <__i2b>
 8005f04:	4680      	mov	r8, r0
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f aed8 	beq.w	8005cbc <_strtod_l+0x43c>
 8005f0c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005f0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	bfab      	itete	ge
 8005f14:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f16:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f18:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005f1a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005f1c:	bfac      	ite	ge
 8005f1e:	18f7      	addge	r7, r6, r3
 8005f20:	1b9d      	sublt	r5, r3, r6
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	1af6      	subs	r6, r6, r3
 8005f26:	4416      	add	r6, r2
 8005f28:	4b63      	ldr	r3, [pc, #396]	; (80060b8 <_strtod_l+0x838>)
 8005f2a:	3e01      	subs	r6, #1
 8005f2c:	429e      	cmp	r6, r3
 8005f2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f32:	f280 80af 	bge.w	8006094 <_strtod_l+0x814>
 8005f36:	1b9b      	subs	r3, r3, r6
 8005f38:	2b1f      	cmp	r3, #31
 8005f3a:	eba2 0203 	sub.w	r2, r2, r3
 8005f3e:	f04f 0101 	mov.w	r1, #1
 8005f42:	f300 809b 	bgt.w	800607c <_strtod_l+0x7fc>
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	18be      	adds	r6, r7, r2
 8005f52:	9b04      	ldr	r3, [sp, #16]
 8005f54:	42b7      	cmp	r7, r6
 8005f56:	4415      	add	r5, r2
 8005f58:	441d      	add	r5, r3
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	bfa8      	it	ge
 8005f5e:	4633      	movge	r3, r6
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	bfa8      	it	ge
 8005f64:	462b      	movge	r3, r5
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bfc2      	ittt	gt
 8005f6a:	1af6      	subgt	r6, r6, r3
 8005f6c:	1aed      	subgt	r5, r5, r3
 8005f6e:	1aff      	subgt	r7, r7, r3
 8005f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f72:	b1bb      	cbz	r3, 8005fa4 <_strtod_l+0x724>
 8005f74:	4641      	mov	r1, r8
 8005f76:	461a      	mov	r2, r3
 8005f78:	4648      	mov	r0, r9
 8005f7a:	f001 fe5f 	bl	8007c3c <__pow5mult>
 8005f7e:	4680      	mov	r8, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f43f ae9b 	beq.w	8005cbc <_strtod_l+0x43c>
 8005f86:	4601      	mov	r1, r0
 8005f88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	f001 fdbf 	bl	8007b0e <__multiply>
 8005f90:	900c      	str	r0, [sp, #48]	; 0x30
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f43f ae92 	beq.w	8005cbc <_strtod_l+0x43c>
 8005f98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	f001 fcd0 	bl	8007940 <_Bfree>
 8005fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa2:	931c      	str	r3, [sp, #112]	; 0x70
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	dc7a      	bgt.n	800609e <_strtod_l+0x81e>
 8005fa8:	9b06      	ldr	r3, [sp, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dd08      	ble.n	8005fc0 <_strtod_l+0x740>
 8005fae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005fb0:	9905      	ldr	r1, [sp, #20]
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	f001 fe42 	bl	8007c3c <__pow5mult>
 8005fb8:	9005      	str	r0, [sp, #20]
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	f43f ae7e 	beq.w	8005cbc <_strtod_l+0x43c>
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	dd08      	ble.n	8005fd6 <_strtod_l+0x756>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	9905      	ldr	r1, [sp, #20]
 8005fc8:	4648      	mov	r0, r9
 8005fca:	f001 fe85 	bl	8007cd8 <__lshift>
 8005fce:	9005      	str	r0, [sp, #20]
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f43f ae73 	beq.w	8005cbc <_strtod_l+0x43c>
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	dd08      	ble.n	8005fec <_strtod_l+0x76c>
 8005fda:	4641      	mov	r1, r8
 8005fdc:	463a      	mov	r2, r7
 8005fde:	4648      	mov	r0, r9
 8005fe0:	f001 fe7a 	bl	8007cd8 <__lshift>
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f43f ae68 	beq.w	8005cbc <_strtod_l+0x43c>
 8005fec:	9a05      	ldr	r2, [sp, #20]
 8005fee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f001 fedf 	bl	8007db4 <__mdiff>
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f43f ae5f 	beq.w	8005cbc <_strtod_l+0x43c>
 8005ffe:	68c3      	ldr	r3, [r0, #12]
 8006000:	930c      	str	r3, [sp, #48]	; 0x30
 8006002:	2300      	movs	r3, #0
 8006004:	60c3      	str	r3, [r0, #12]
 8006006:	4641      	mov	r1, r8
 8006008:	f001 feba 	bl	8007d80 <__mcmp>
 800600c:	2800      	cmp	r0, #0
 800600e:	da55      	bge.n	80060bc <_strtod_l+0x83c>
 8006010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006012:	b9e3      	cbnz	r3, 800604e <_strtod_l+0x7ce>
 8006014:	f1ba 0f00 	cmp.w	sl, #0
 8006018:	d119      	bne.n	800604e <_strtod_l+0x7ce>
 800601a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800601e:	b9b3      	cbnz	r3, 800604e <_strtod_l+0x7ce>
 8006020:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006024:	0d1b      	lsrs	r3, r3, #20
 8006026:	051b      	lsls	r3, r3, #20
 8006028:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800602c:	d90f      	bls.n	800604e <_strtod_l+0x7ce>
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	b913      	cbnz	r3, 8006038 <_strtod_l+0x7b8>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	2b01      	cmp	r3, #1
 8006036:	dd0a      	ble.n	800604e <_strtod_l+0x7ce>
 8006038:	4621      	mov	r1, r4
 800603a:	2201      	movs	r2, #1
 800603c:	4648      	mov	r0, r9
 800603e:	f001 fe4b 	bl	8007cd8 <__lshift>
 8006042:	4641      	mov	r1, r8
 8006044:	4604      	mov	r4, r0
 8006046:	f001 fe9b 	bl	8007d80 <__mcmp>
 800604a:	2800      	cmp	r0, #0
 800604c:	dc67      	bgt.n	800611e <_strtod_l+0x89e>
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d171      	bne.n	8006138 <_strtod_l+0x8b8>
 8006054:	e63d      	b.n	8005cd2 <_strtod_l+0x452>
 8006056:	f018 0f01 	tst.w	r8, #1
 800605a:	d004      	beq.n	8006066 <_strtod_l+0x7e6>
 800605c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006060:	f7fa faea 	bl	8000638 <__aeabi_dmul>
 8006064:	2301      	movs	r3, #1
 8006066:	ea4f 0868 	mov.w	r8, r8, asr #1
 800606a:	3508      	adds	r5, #8
 800606c:	e6e5      	b.n	8005e3a <_strtod_l+0x5ba>
 800606e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	ea03 0a0a 	and.w	sl, r3, sl
 800607a:	e6ff      	b.n	8005e7c <_strtod_l+0x5fc>
 800607c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006080:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006084:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006088:	36e2      	adds	r6, #226	; 0xe2
 800608a:	fa01 f306 	lsl.w	r3, r1, r6
 800608e:	930a      	str	r3, [sp, #40]	; 0x28
 8006090:	910f      	str	r1, [sp, #60]	; 0x3c
 8006092:	e75d      	b.n	8005f50 <_strtod_l+0x6d0>
 8006094:	2300      	movs	r3, #0
 8006096:	930a      	str	r3, [sp, #40]	; 0x28
 8006098:	2301      	movs	r3, #1
 800609a:	930f      	str	r3, [sp, #60]	; 0x3c
 800609c:	e758      	b.n	8005f50 <_strtod_l+0x6d0>
 800609e:	4632      	mov	r2, r6
 80060a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060a2:	4648      	mov	r0, r9
 80060a4:	f001 fe18 	bl	8007cd8 <__lshift>
 80060a8:	901c      	str	r0, [sp, #112]	; 0x70
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f47f af7c 	bne.w	8005fa8 <_strtod_l+0x728>
 80060b0:	e604      	b.n	8005cbc <_strtod_l+0x43c>
 80060b2:	bf00      	nop
 80060b4:	080086a8 	.word	0x080086a8
 80060b8:	fffffc02 	.word	0xfffffc02
 80060bc:	465d      	mov	r5, fp
 80060be:	f040 8086 	bne.w	80061ce <_strtod_l+0x94e>
 80060c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060c8:	b32a      	cbz	r2, 8006116 <_strtod_l+0x896>
 80060ca:	4aaf      	ldr	r2, [pc, #700]	; (8006388 <_strtod_l+0xb08>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d153      	bne.n	8006178 <_strtod_l+0x8f8>
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	4650      	mov	r0, sl
 80060d4:	b1d3      	cbz	r3, 800610c <_strtod_l+0x88c>
 80060d6:	4aad      	ldr	r2, [pc, #692]	; (800638c <_strtod_l+0xb0c>)
 80060d8:	402a      	ands	r2, r5
 80060da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80060de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060e2:	d816      	bhi.n	8006112 <_strtod_l+0x892>
 80060e4:	0d12      	lsrs	r2, r2, #20
 80060e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	4298      	cmp	r0, r3
 80060f0:	d142      	bne.n	8006178 <_strtod_l+0x8f8>
 80060f2:	4ba7      	ldr	r3, [pc, #668]	; (8006390 <_strtod_l+0xb10>)
 80060f4:	429d      	cmp	r5, r3
 80060f6:	d102      	bne.n	80060fe <_strtod_l+0x87e>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f addf 	beq.w	8005cbc <_strtod_l+0x43c>
 80060fe:	4ba3      	ldr	r3, [pc, #652]	; (800638c <_strtod_l+0xb0c>)
 8006100:	402b      	ands	r3, r5
 8006102:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006106:	f04f 0a00 	mov.w	sl, #0
 800610a:	e7a0      	b.n	800604e <_strtod_l+0x7ce>
 800610c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006110:	e7ed      	b.n	80060ee <_strtod_l+0x86e>
 8006112:	460b      	mov	r3, r1
 8006114:	e7eb      	b.n	80060ee <_strtod_l+0x86e>
 8006116:	bb7b      	cbnz	r3, 8006178 <_strtod_l+0x8f8>
 8006118:	f1ba 0f00 	cmp.w	sl, #0
 800611c:	d12c      	bne.n	8006178 <_strtod_l+0x8f8>
 800611e:	9904      	ldr	r1, [sp, #16]
 8006120:	4a9a      	ldr	r2, [pc, #616]	; (800638c <_strtod_l+0xb0c>)
 8006122:	465b      	mov	r3, fp
 8006124:	b1f1      	cbz	r1, 8006164 <_strtod_l+0x8e4>
 8006126:	ea02 010b 	and.w	r1, r2, fp
 800612a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800612e:	dc19      	bgt.n	8006164 <_strtod_l+0x8e4>
 8006130:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006134:	f77f ae5b 	ble.w	8005dee <_strtod_l+0x56e>
 8006138:	4a96      	ldr	r2, [pc, #600]	; (8006394 <_strtod_l+0xb14>)
 800613a:	2300      	movs	r3, #0
 800613c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006140:	4650      	mov	r0, sl
 8006142:	4659      	mov	r1, fp
 8006144:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006148:	f7fa fa76 	bl	8000638 <__aeabi_dmul>
 800614c:	4682      	mov	sl, r0
 800614e:	468b      	mov	fp, r1
 8006150:	2900      	cmp	r1, #0
 8006152:	f47f adbe 	bne.w	8005cd2 <_strtod_l+0x452>
 8006156:	2800      	cmp	r0, #0
 8006158:	f47f adbb 	bne.w	8005cd2 <_strtod_l+0x452>
 800615c:	2322      	movs	r3, #34	; 0x22
 800615e:	f8c9 3000 	str.w	r3, [r9]
 8006162:	e5b6      	b.n	8005cd2 <_strtod_l+0x452>
 8006164:	4013      	ands	r3, r2
 8006166:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800616a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800616e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006172:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006176:	e76a      	b.n	800604e <_strtod_l+0x7ce>
 8006178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617a:	b193      	cbz	r3, 80061a2 <_strtod_l+0x922>
 800617c:	422b      	tst	r3, r5
 800617e:	f43f af66 	beq.w	800604e <_strtod_l+0x7ce>
 8006182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006184:	9a04      	ldr	r2, [sp, #16]
 8006186:	4650      	mov	r0, sl
 8006188:	4659      	mov	r1, fp
 800618a:	b173      	cbz	r3, 80061aa <_strtod_l+0x92a>
 800618c:	f7ff fb5a 	bl	8005844 <sulp>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006198:	f7fa f898 	bl	80002cc <__adddf3>
 800619c:	4682      	mov	sl, r0
 800619e:	468b      	mov	fp, r1
 80061a0:	e755      	b.n	800604e <_strtod_l+0x7ce>
 80061a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061a4:	ea13 0f0a 	tst.w	r3, sl
 80061a8:	e7e9      	b.n	800617e <_strtod_l+0x8fe>
 80061aa:	f7ff fb4b 	bl	8005844 <sulp>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061b6:	f7fa f887 	bl	80002c8 <__aeabi_dsub>
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	f7fa fca1 	bl	8000b08 <__aeabi_dcmpeq>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f47f ae11 	bne.w	8005dee <_strtod_l+0x56e>
 80061cc:	e73f      	b.n	800604e <_strtod_l+0x7ce>
 80061ce:	4641      	mov	r1, r8
 80061d0:	4620      	mov	r0, r4
 80061d2:	f001 ff12 	bl	8007ffa <__ratio>
 80061d6:	ec57 6b10 	vmov	r6, r7, d0
 80061da:	2200      	movs	r2, #0
 80061dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061e0:	ee10 0a10 	vmov	r0, s0
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa fca3 	bl	8000b30 <__aeabi_dcmple>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d077      	beq.n	80062de <_strtod_l+0xa5e>
 80061ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d04a      	beq.n	800628a <_strtod_l+0xa0a>
 80061f4:	4b68      	ldr	r3, [pc, #416]	; (8006398 <_strtod_l+0xb18>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061fc:	4f66      	ldr	r7, [pc, #408]	; (8006398 <_strtod_l+0xb18>)
 80061fe:	2600      	movs	r6, #0
 8006200:	4b62      	ldr	r3, [pc, #392]	; (800638c <_strtod_l+0xb0c>)
 8006202:	402b      	ands	r3, r5
 8006204:	930f      	str	r3, [sp, #60]	; 0x3c
 8006206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006208:	4b64      	ldr	r3, [pc, #400]	; (800639c <_strtod_l+0xb1c>)
 800620a:	429a      	cmp	r2, r3
 800620c:	f040 80ce 	bne.w	80063ac <_strtod_l+0xb2c>
 8006210:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006214:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006218:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800621c:	ec4b ab10 	vmov	d0, sl, fp
 8006220:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006224:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006228:	f001 fe22 	bl	8007e70 <__ulp>
 800622c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006230:	ec53 2b10 	vmov	r2, r3, d0
 8006234:	f7fa fa00 	bl	8000638 <__aeabi_dmul>
 8006238:	4652      	mov	r2, sl
 800623a:	465b      	mov	r3, fp
 800623c:	f7fa f846 	bl	80002cc <__adddf3>
 8006240:	460b      	mov	r3, r1
 8006242:	4952      	ldr	r1, [pc, #328]	; (800638c <_strtod_l+0xb0c>)
 8006244:	4a56      	ldr	r2, [pc, #344]	; (80063a0 <_strtod_l+0xb20>)
 8006246:	4019      	ands	r1, r3
 8006248:	4291      	cmp	r1, r2
 800624a:	4682      	mov	sl, r0
 800624c:	d95b      	bls.n	8006306 <_strtod_l+0xa86>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006254:	4293      	cmp	r3, r2
 8006256:	d103      	bne.n	8006260 <_strtod_l+0x9e0>
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	3301      	adds	r3, #1
 800625c:	f43f ad2e 	beq.w	8005cbc <_strtod_l+0x43c>
 8006260:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006390 <_strtod_l+0xb10>
 8006264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006268:	991c      	ldr	r1, [sp, #112]	; 0x70
 800626a:	4648      	mov	r0, r9
 800626c:	f001 fb68 	bl	8007940 <_Bfree>
 8006270:	9905      	ldr	r1, [sp, #20]
 8006272:	4648      	mov	r0, r9
 8006274:	f001 fb64 	bl	8007940 <_Bfree>
 8006278:	4641      	mov	r1, r8
 800627a:	4648      	mov	r0, r9
 800627c:	f001 fb60 	bl	8007940 <_Bfree>
 8006280:	4621      	mov	r1, r4
 8006282:	4648      	mov	r0, r9
 8006284:	f001 fb5c 	bl	8007940 <_Bfree>
 8006288:	e619      	b.n	8005ebe <_strtod_l+0x63e>
 800628a:	f1ba 0f00 	cmp.w	sl, #0
 800628e:	d11a      	bne.n	80062c6 <_strtod_l+0xa46>
 8006290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006294:	b9eb      	cbnz	r3, 80062d2 <_strtod_l+0xa52>
 8006296:	2200      	movs	r2, #0
 8006298:	4b3f      	ldr	r3, [pc, #252]	; (8006398 <_strtod_l+0xb18>)
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa fc3d 	bl	8000b1c <__aeabi_dcmplt>
 80062a2:	b9c8      	cbnz	r0, 80062d8 <_strtod_l+0xa58>
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	2200      	movs	r2, #0
 80062aa:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <_strtod_l+0xb24>)
 80062ac:	f7fa f9c4 	bl	8000638 <__aeabi_dmul>
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80062b8:	9618      	str	r6, [sp, #96]	; 0x60
 80062ba:	9319      	str	r3, [sp, #100]	; 0x64
 80062bc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80062c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062c4:	e79c      	b.n	8006200 <_strtod_l+0x980>
 80062c6:	f1ba 0f01 	cmp.w	sl, #1
 80062ca:	d102      	bne.n	80062d2 <_strtod_l+0xa52>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	f43f ad8e 	beq.w	8005dee <_strtod_l+0x56e>
 80062d2:	2200      	movs	r2, #0
 80062d4:	4b34      	ldr	r3, [pc, #208]	; (80063a8 <_strtod_l+0xb28>)
 80062d6:	e78f      	b.n	80061f8 <_strtod_l+0x978>
 80062d8:	2600      	movs	r6, #0
 80062da:	4f32      	ldr	r7, [pc, #200]	; (80063a4 <_strtod_l+0xb24>)
 80062dc:	e7ea      	b.n	80062b4 <_strtod_l+0xa34>
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <_strtod_l+0xb24>)
 80062e0:	4630      	mov	r0, r6
 80062e2:	4639      	mov	r1, r7
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7fa f9a7 	bl	8000638 <__aeabi_dmul>
 80062ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062ec:	4606      	mov	r6, r0
 80062ee:	460f      	mov	r7, r1
 80062f0:	b933      	cbnz	r3, 8006300 <_strtod_l+0xa80>
 80062f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062f6:	9010      	str	r0, [sp, #64]	; 0x40
 80062f8:	9311      	str	r3, [sp, #68]	; 0x44
 80062fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062fe:	e7df      	b.n	80062c0 <_strtod_l+0xa40>
 8006300:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006304:	e7f9      	b.n	80062fa <_strtod_l+0xa7a>
 8006306:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ab      	bne.n	8006268 <_strtod_l+0x9e8>
 8006310:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006314:	0d1b      	lsrs	r3, r3, #20
 8006316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006318:	051b      	lsls	r3, r3, #20
 800631a:	429a      	cmp	r2, r3
 800631c:	465d      	mov	r5, fp
 800631e:	d1a3      	bne.n	8006268 <_strtod_l+0x9e8>
 8006320:	4639      	mov	r1, r7
 8006322:	4630      	mov	r0, r6
 8006324:	f7fa fc38 	bl	8000b98 <__aeabi_d2iz>
 8006328:	f7fa f91c 	bl	8000564 <__aeabi_i2d>
 800632c:	460b      	mov	r3, r1
 800632e:	4602      	mov	r2, r0
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	f7f9 ffc8 	bl	80002c8 <__aeabi_dsub>
 8006338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633a:	4606      	mov	r6, r0
 800633c:	460f      	mov	r7, r1
 800633e:	b933      	cbnz	r3, 800634e <_strtod_l+0xace>
 8006340:	f1ba 0f00 	cmp.w	sl, #0
 8006344:	d103      	bne.n	800634e <_strtod_l+0xace>
 8006346:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800634a:	2d00      	cmp	r5, #0
 800634c:	d06d      	beq.n	800642a <_strtod_l+0xbaa>
 800634e:	a30a      	add	r3, pc, #40	; (adr r3, 8006378 <_strtod_l+0xaf8>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7fa fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800635c:	2800      	cmp	r0, #0
 800635e:	f47f acb8 	bne.w	8005cd2 <_strtod_l+0x452>
 8006362:	a307      	add	r3, pc, #28	; (adr r3, 8006380 <_strtod_l+0xb00>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	4630      	mov	r0, r6
 800636a:	4639      	mov	r1, r7
 800636c:	f7fa fbf4 	bl	8000b58 <__aeabi_dcmpgt>
 8006370:	2800      	cmp	r0, #0
 8006372:	f43f af79 	beq.w	8006268 <_strtod_l+0x9e8>
 8006376:	e4ac      	b.n	8005cd2 <_strtod_l+0x452>
 8006378:	94a03595 	.word	0x94a03595
 800637c:	3fdfffff 	.word	0x3fdfffff
 8006380:	35afe535 	.word	0x35afe535
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	000fffff 	.word	0x000fffff
 800638c:	7ff00000 	.word	0x7ff00000
 8006390:	7fefffff 	.word	0x7fefffff
 8006394:	39500000 	.word	0x39500000
 8006398:	3ff00000 	.word	0x3ff00000
 800639c:	7fe00000 	.word	0x7fe00000
 80063a0:	7c9fffff 	.word	0x7c9fffff
 80063a4:	3fe00000 	.word	0x3fe00000
 80063a8:	bff00000 	.word	0xbff00000
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	b333      	cbz	r3, 80063fe <_strtod_l+0xb7e>
 80063b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063b6:	d822      	bhi.n	80063fe <_strtod_l+0xb7e>
 80063b8:	a327      	add	r3, pc, #156	; (adr r3, 8006458 <_strtod_l+0xbd8>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	f7fa fbb5 	bl	8000b30 <__aeabi_dcmple>
 80063c6:	b1a0      	cbz	r0, 80063f2 <_strtod_l+0xb72>
 80063c8:	4639      	mov	r1, r7
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7fa fc0c 	bl	8000be8 <__aeabi_d2uiz>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	bf08      	it	eq
 80063d4:	2001      	moveq	r0, #1
 80063d6:	f7fa f8b5 	bl	8000544 <__aeabi_ui2d>
 80063da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063dc:	4606      	mov	r6, r0
 80063de:	460f      	mov	r7, r1
 80063e0:	bb03      	cbnz	r3, 8006424 <_strtod_l+0xba4>
 80063e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e6:	9012      	str	r0, [sp, #72]	; 0x48
 80063e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80063ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063f6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80063fe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006402:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006406:	f001 fd33 	bl	8007e70 <__ulp>
 800640a:	4650      	mov	r0, sl
 800640c:	ec53 2b10 	vmov	r2, r3, d0
 8006410:	4659      	mov	r1, fp
 8006412:	f7fa f911 	bl	8000638 <__aeabi_dmul>
 8006416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800641a:	f7f9 ff57 	bl	80002cc <__adddf3>
 800641e:	4682      	mov	sl, r0
 8006420:	468b      	mov	fp, r1
 8006422:	e772      	b.n	800630a <_strtod_l+0xa8a>
 8006424:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006428:	e7df      	b.n	80063ea <_strtod_l+0xb6a>
 800642a:	a30d      	add	r3, pc, #52	; (adr r3, 8006460 <_strtod_l+0xbe0>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7fa fb74 	bl	8000b1c <__aeabi_dcmplt>
 8006434:	e79c      	b.n	8006370 <_strtod_l+0xaf0>
 8006436:	2300      	movs	r3, #0
 8006438:	930d      	str	r3, [sp, #52]	; 0x34
 800643a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800643c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	f7ff ba61 	b.w	8005906 <_strtod_l+0x86>
 8006444:	2b65      	cmp	r3, #101	; 0x65
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f43f ab4e 	beq.w	8005aea <_strtod_l+0x26a>
 800644e:	2101      	movs	r1, #1
 8006450:	4614      	mov	r4, r2
 8006452:	9104      	str	r1, [sp, #16]
 8006454:	f7ff bacb 	b.w	80059ee <_strtod_l+0x16e>
 8006458:	ffc00000 	.word	0xffc00000
 800645c:	41dfffff 	.word	0x41dfffff
 8006460:	94a03595 	.word	0x94a03595
 8006464:	3fcfffff 	.word	0x3fcfffff

08006468 <_strtod_r>:
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <_strtod_r+0x18>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	b410      	push	{r4}
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	4c04      	ldr	r4, [pc, #16]	; (8006484 <_strtod_r+0x1c>)
 8006472:	2b00      	cmp	r3, #0
 8006474:	bf08      	it	eq
 8006476:	4623      	moveq	r3, r4
 8006478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647c:	f7ff ba00 	b.w	8005880 <_strtod_l>
 8006480:	2000000c 	.word	0x2000000c
 8006484:	20000070 	.word	0x20000070

08006488 <_strtol_l.isra.0>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	4680      	mov	r8, r0
 800648e:	4689      	mov	r9, r1
 8006490:	4692      	mov	sl, r2
 8006492:	461e      	mov	r6, r3
 8006494:	460f      	mov	r7, r1
 8006496:	463d      	mov	r5, r7
 8006498:	9808      	ldr	r0, [sp, #32]
 800649a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800649e:	f001 f9ed 	bl	800787c <__locale_ctype_ptr_l>
 80064a2:	4420      	add	r0, r4
 80064a4:	7843      	ldrb	r3, [r0, #1]
 80064a6:	f013 0308 	ands.w	r3, r3, #8
 80064aa:	d132      	bne.n	8006512 <_strtol_l.isra.0+0x8a>
 80064ac:	2c2d      	cmp	r4, #45	; 0x2d
 80064ae:	d132      	bne.n	8006516 <_strtol_l.isra.0+0x8e>
 80064b0:	787c      	ldrb	r4, [r7, #1]
 80064b2:	1cbd      	adds	r5, r7, #2
 80064b4:	2201      	movs	r2, #1
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d05d      	beq.n	8006576 <_strtol_l.isra.0+0xee>
 80064ba:	2e10      	cmp	r6, #16
 80064bc:	d109      	bne.n	80064d2 <_strtol_l.isra.0+0x4a>
 80064be:	2c30      	cmp	r4, #48	; 0x30
 80064c0:	d107      	bne.n	80064d2 <_strtol_l.isra.0+0x4a>
 80064c2:	782b      	ldrb	r3, [r5, #0]
 80064c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064c8:	2b58      	cmp	r3, #88	; 0x58
 80064ca:	d14f      	bne.n	800656c <_strtol_l.isra.0+0xe4>
 80064cc:	786c      	ldrb	r4, [r5, #1]
 80064ce:	2610      	movs	r6, #16
 80064d0:	3502      	adds	r5, #2
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	bf14      	ite	ne
 80064d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80064da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80064de:	2700      	movs	r7, #0
 80064e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80064e4:	4638      	mov	r0, r7
 80064e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80064ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d817      	bhi.n	8006522 <_strtol_l.isra.0+0x9a>
 80064f2:	461c      	mov	r4, r3
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	dd23      	ble.n	8006540 <_strtol_l.isra.0+0xb8>
 80064f8:	1c7b      	adds	r3, r7, #1
 80064fa:	d007      	beq.n	800650c <_strtol_l.isra.0+0x84>
 80064fc:	4584      	cmp	ip, r0
 80064fe:	d31c      	bcc.n	800653a <_strtol_l.isra.0+0xb2>
 8006500:	d101      	bne.n	8006506 <_strtol_l.isra.0+0x7e>
 8006502:	45a6      	cmp	lr, r4
 8006504:	db19      	blt.n	800653a <_strtol_l.isra.0+0xb2>
 8006506:	fb00 4006 	mla	r0, r0, r6, r4
 800650a:	2701      	movs	r7, #1
 800650c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006510:	e7eb      	b.n	80064ea <_strtol_l.isra.0+0x62>
 8006512:	462f      	mov	r7, r5
 8006514:	e7bf      	b.n	8006496 <_strtol_l.isra.0+0xe>
 8006516:	2c2b      	cmp	r4, #43	; 0x2b
 8006518:	bf04      	itt	eq
 800651a:	1cbd      	addeq	r5, r7, #2
 800651c:	787c      	ldrbeq	r4, [r7, #1]
 800651e:	461a      	mov	r2, r3
 8006520:	e7c9      	b.n	80064b6 <_strtol_l.isra.0+0x2e>
 8006522:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006526:	2b19      	cmp	r3, #25
 8006528:	d801      	bhi.n	800652e <_strtol_l.isra.0+0xa6>
 800652a:	3c37      	subs	r4, #55	; 0x37
 800652c:	e7e2      	b.n	80064f4 <_strtol_l.isra.0+0x6c>
 800652e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006532:	2b19      	cmp	r3, #25
 8006534:	d804      	bhi.n	8006540 <_strtol_l.isra.0+0xb8>
 8006536:	3c57      	subs	r4, #87	; 0x57
 8006538:	e7dc      	b.n	80064f4 <_strtol_l.isra.0+0x6c>
 800653a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800653e:	e7e5      	b.n	800650c <_strtol_l.isra.0+0x84>
 8006540:	1c7b      	adds	r3, r7, #1
 8006542:	d108      	bne.n	8006556 <_strtol_l.isra.0+0xce>
 8006544:	2322      	movs	r3, #34	; 0x22
 8006546:	f8c8 3000 	str.w	r3, [r8]
 800654a:	4608      	mov	r0, r1
 800654c:	f1ba 0f00 	cmp.w	sl, #0
 8006550:	d107      	bne.n	8006562 <_strtol_l.isra.0+0xda>
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006556:	b102      	cbz	r2, 800655a <_strtol_l.isra.0+0xd2>
 8006558:	4240      	negs	r0, r0
 800655a:	f1ba 0f00 	cmp.w	sl, #0
 800655e:	d0f8      	beq.n	8006552 <_strtol_l.isra.0+0xca>
 8006560:	b10f      	cbz	r7, 8006566 <_strtol_l.isra.0+0xde>
 8006562:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006566:	f8ca 9000 	str.w	r9, [sl]
 800656a:	e7f2      	b.n	8006552 <_strtol_l.isra.0+0xca>
 800656c:	2430      	movs	r4, #48	; 0x30
 800656e:	2e00      	cmp	r6, #0
 8006570:	d1af      	bne.n	80064d2 <_strtol_l.isra.0+0x4a>
 8006572:	2608      	movs	r6, #8
 8006574:	e7ad      	b.n	80064d2 <_strtol_l.isra.0+0x4a>
 8006576:	2c30      	cmp	r4, #48	; 0x30
 8006578:	d0a3      	beq.n	80064c2 <_strtol_l.isra.0+0x3a>
 800657a:	260a      	movs	r6, #10
 800657c:	e7a9      	b.n	80064d2 <_strtol_l.isra.0+0x4a>
	...

08006580 <_strtol_r>:
 8006580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006582:	4c06      	ldr	r4, [pc, #24]	; (800659c <_strtol_r+0x1c>)
 8006584:	4d06      	ldr	r5, [pc, #24]	; (80065a0 <_strtol_r+0x20>)
 8006586:	6824      	ldr	r4, [r4, #0]
 8006588:	6a24      	ldr	r4, [r4, #32]
 800658a:	2c00      	cmp	r4, #0
 800658c:	bf08      	it	eq
 800658e:	462c      	moveq	r4, r5
 8006590:	9400      	str	r4, [sp, #0]
 8006592:	f7ff ff79 	bl	8006488 <_strtol_l.isra.0>
 8006596:	b003      	add	sp, #12
 8006598:	bd30      	pop	{r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	2000000c 	.word	0x2000000c
 80065a0:	20000070 	.word	0x20000070

080065a4 <quorem>:
 80065a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	6903      	ldr	r3, [r0, #16]
 80065aa:	690c      	ldr	r4, [r1, #16]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	4680      	mov	r8, r0
 80065b0:	f2c0 8082 	blt.w	80066b8 <quorem+0x114>
 80065b4:	3c01      	subs	r4, #1
 80065b6:	f101 0714 	add.w	r7, r1, #20
 80065ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80065be:	f100 0614 	add.w	r6, r0, #20
 80065c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80065c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80065ca:	eb06 030c 	add.w	r3, r6, ip
 80065ce:	3501      	adds	r5, #1
 80065d0:	eb07 090c 	add.w	r9, r7, ip
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80065da:	b395      	cbz	r5, 8006642 <quorem+0x9e>
 80065dc:	f04f 0a00 	mov.w	sl, #0
 80065e0:	4638      	mov	r0, r7
 80065e2:	46b6      	mov	lr, r6
 80065e4:	46d3      	mov	fp, sl
 80065e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80065ea:	b293      	uxth	r3, r2
 80065ec:	fb05 a303 	mla	r3, r5, r3, sl
 80065f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ebab 0303 	sub.w	r3, fp, r3
 80065fa:	0c12      	lsrs	r2, r2, #16
 80065fc:	f8de b000 	ldr.w	fp, [lr]
 8006600:	fb05 a202 	mla	r2, r5, r2, sl
 8006604:	fa13 f38b 	uxtah	r3, r3, fp
 8006608:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800660c:	fa1f fb82 	uxth.w	fp, r2
 8006610:	f8de 2000 	ldr.w	r2, [lr]
 8006614:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006622:	4581      	cmp	r9, r0
 8006624:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006628:	f84e 3b04 	str.w	r3, [lr], #4
 800662c:	d2db      	bcs.n	80065e6 <quorem+0x42>
 800662e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006632:	b933      	cbnz	r3, 8006642 <quorem+0x9e>
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	3b04      	subs	r3, #4
 8006638:	429e      	cmp	r6, r3
 800663a:	461a      	mov	r2, r3
 800663c:	d330      	bcc.n	80066a0 <quorem+0xfc>
 800663e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006642:	4640      	mov	r0, r8
 8006644:	f001 fb9c 	bl	8007d80 <__mcmp>
 8006648:	2800      	cmp	r0, #0
 800664a:	db25      	blt.n	8006698 <quorem+0xf4>
 800664c:	3501      	adds	r5, #1
 800664e:	4630      	mov	r0, r6
 8006650:	f04f 0c00 	mov.w	ip, #0
 8006654:	f857 2b04 	ldr.w	r2, [r7], #4
 8006658:	f8d0 e000 	ldr.w	lr, [r0]
 800665c:	b293      	uxth	r3, r2
 800665e:	ebac 0303 	sub.w	r3, ip, r3
 8006662:	0c12      	lsrs	r2, r2, #16
 8006664:	fa13 f38e 	uxtah	r3, r3, lr
 8006668:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800666c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006676:	45b9      	cmp	r9, r7
 8006678:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800667c:	f840 3b04 	str.w	r3, [r0], #4
 8006680:	d2e8      	bcs.n	8006654 <quorem+0xb0>
 8006682:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006686:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800668a:	b92a      	cbnz	r2, 8006698 <quorem+0xf4>
 800668c:	3b04      	subs	r3, #4
 800668e:	429e      	cmp	r6, r3
 8006690:	461a      	mov	r2, r3
 8006692:	d30b      	bcc.n	80066ac <quorem+0x108>
 8006694:	f8c8 4010 	str.w	r4, [r8, #16]
 8006698:	4628      	mov	r0, r5
 800669a:	b003      	add	sp, #12
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	3b04      	subs	r3, #4
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	d1ca      	bne.n	800663e <quorem+0x9a>
 80066a8:	3c01      	subs	r4, #1
 80066aa:	e7c5      	b.n	8006638 <quorem+0x94>
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	3b04      	subs	r3, #4
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	d1ef      	bne.n	8006694 <quorem+0xf0>
 80066b4:	3c01      	subs	r4, #1
 80066b6:	e7ea      	b.n	800668e <quorem+0xea>
 80066b8:	2000      	movs	r0, #0
 80066ba:	e7ee      	b.n	800669a <quorem+0xf6>
 80066bc:	0000      	movs	r0, r0
	...

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	ec57 6b10 	vmov	r6, r7, d0
 80066c8:	b097      	sub	sp, #92	; 0x5c
 80066ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066cc:	9106      	str	r1, [sp, #24]
 80066ce:	4604      	mov	r4, r0
 80066d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80066d2:	9312      	str	r3, [sp, #72]	; 0x48
 80066d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066d8:	e9cd 6700 	strd	r6, r7, [sp]
 80066dc:	b93d      	cbnz	r5, 80066ee <_dtoa_r+0x2e>
 80066de:	2010      	movs	r0, #16
 80066e0:	f001 f8e0 	bl	80078a4 <malloc>
 80066e4:	6260      	str	r0, [r4, #36]	; 0x24
 80066e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066ea:	6005      	str	r5, [r0, #0]
 80066ec:	60c5      	str	r5, [r0, #12]
 80066ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	b151      	cbz	r1, 800670a <_dtoa_r+0x4a>
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	604a      	str	r2, [r1, #4]
 80066f8:	2301      	movs	r3, #1
 80066fa:	4093      	lsls	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	4620      	mov	r0, r4
 8006700:	f001 f91e 	bl	8007940 <_Bfree>
 8006704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	1e3b      	subs	r3, r7, #0
 800670c:	bfbb      	ittet	lt
 800670e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006712:	9301      	strlt	r3, [sp, #4]
 8006714:	2300      	movge	r3, #0
 8006716:	2201      	movlt	r2, #1
 8006718:	bfac      	ite	ge
 800671a:	f8c8 3000 	strge.w	r3, [r8]
 800671e:	f8c8 2000 	strlt.w	r2, [r8]
 8006722:	4baf      	ldr	r3, [pc, #700]	; (80069e0 <_dtoa_r+0x320>)
 8006724:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006728:	ea33 0308 	bics.w	r3, r3, r8
 800672c:	d114      	bne.n	8006758 <_dtoa_r+0x98>
 800672e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006730:	f242 730f 	movw	r3, #9999	; 0x270f
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	9b00      	ldr	r3, [sp, #0]
 8006738:	b923      	cbnz	r3, 8006744 <_dtoa_r+0x84>
 800673a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800673e:	2800      	cmp	r0, #0
 8006740:	f000 8542 	beq.w	80071c8 <_dtoa_r+0xb08>
 8006744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006746:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80069f4 <_dtoa_r+0x334>
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8544 	beq.w	80071d8 <_dtoa_r+0xb18>
 8006750:	f10b 0303 	add.w	r3, fp, #3
 8006754:	f000 bd3e 	b.w	80071d4 <_dtoa_r+0xb14>
 8006758:	e9dd 6700 	ldrd	r6, r7, [sp]
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7fa f9d0 	bl	8000b08 <__aeabi_dcmpeq>
 8006768:	4681      	mov	r9, r0
 800676a:	b168      	cbz	r0, 8006788 <_dtoa_r+0xc8>
 800676c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800676e:	2301      	movs	r3, #1
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8524 	beq.w	80071c2 <_dtoa_r+0xb02>
 800677a:	4b9a      	ldr	r3, [pc, #616]	; (80069e4 <_dtoa_r+0x324>)
 800677c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800677e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	f000 bd28 	b.w	80071d8 <_dtoa_r+0xb18>
 8006788:	aa14      	add	r2, sp, #80	; 0x50
 800678a:	a915      	add	r1, sp, #84	; 0x54
 800678c:	ec47 6b10 	vmov	d0, r6, r7
 8006790:	4620      	mov	r0, r4
 8006792:	f001 fbe3 	bl	8007f5c <__d2b>
 8006796:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800679a:	9004      	str	r0, [sp, #16]
 800679c:	2d00      	cmp	r5, #0
 800679e:	d07c      	beq.n	800689a <_dtoa_r+0x1da>
 80067a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80067a8:	46b2      	mov	sl, r6
 80067aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80067ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80067b6:	2200      	movs	r2, #0
 80067b8:	4b8b      	ldr	r3, [pc, #556]	; (80069e8 <_dtoa_r+0x328>)
 80067ba:	4650      	mov	r0, sl
 80067bc:	4659      	mov	r1, fp
 80067be:	f7f9 fd83 	bl	80002c8 <__aeabi_dsub>
 80067c2:	a381      	add	r3, pc, #516	; (adr r3, 80069c8 <_dtoa_r+0x308>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	a380      	add	r3, pc, #512	; (adr r3, 80069d0 <_dtoa_r+0x310>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd7b 	bl	80002cc <__adddf3>
 80067d6:	4606      	mov	r6, r0
 80067d8:	4628      	mov	r0, r5
 80067da:	460f      	mov	r7, r1
 80067dc:	f7f9 fec2 	bl	8000564 <__aeabi_i2d>
 80067e0:	a37d      	add	r3, pc, #500	; (adr r3, 80069d8 <_dtoa_r+0x318>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 ff27 	bl	8000638 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4630      	mov	r0, r6
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7f9 fd6b 	bl	80002cc <__adddf3>
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	f7fa f9cd 	bl	8000b98 <__aeabi_d2iz>
 80067fe:	2200      	movs	r2, #0
 8006800:	4682      	mov	sl, r0
 8006802:	2300      	movs	r3, #0
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7fa f988 	bl	8000b1c <__aeabi_dcmplt>
 800680c:	b148      	cbz	r0, 8006822 <_dtoa_r+0x162>
 800680e:	4650      	mov	r0, sl
 8006810:	f7f9 fea8 	bl	8000564 <__aeabi_i2d>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	f7fa f976 	bl	8000b08 <__aeabi_dcmpeq>
 800681c:	b908      	cbnz	r0, 8006822 <_dtoa_r+0x162>
 800681e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006822:	f1ba 0f16 	cmp.w	sl, #22
 8006826:	d859      	bhi.n	80068dc <_dtoa_r+0x21c>
 8006828:	4970      	ldr	r1, [pc, #448]	; (80069ec <_dtoa_r+0x32c>)
 800682a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800682e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006836:	f7fa f98f 	bl	8000b58 <__aeabi_dcmpgt>
 800683a:	2800      	cmp	r0, #0
 800683c:	d050      	beq.n	80068e0 <_dtoa_r+0x220>
 800683e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006842:	2300      	movs	r3, #0
 8006844:	930f      	str	r3, [sp, #60]	; 0x3c
 8006846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006848:	1b5d      	subs	r5, r3, r5
 800684a:	f1b5 0801 	subs.w	r8, r5, #1
 800684e:	bf49      	itett	mi
 8006850:	f1c5 0301 	rsbmi	r3, r5, #1
 8006854:	2300      	movpl	r3, #0
 8006856:	9305      	strmi	r3, [sp, #20]
 8006858:	f04f 0800 	movmi.w	r8, #0
 800685c:	bf58      	it	pl
 800685e:	9305      	strpl	r3, [sp, #20]
 8006860:	f1ba 0f00 	cmp.w	sl, #0
 8006864:	db3e      	blt.n	80068e4 <_dtoa_r+0x224>
 8006866:	2300      	movs	r3, #0
 8006868:	44d0      	add	r8, sl
 800686a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800686e:	9307      	str	r3, [sp, #28]
 8006870:	9b06      	ldr	r3, [sp, #24]
 8006872:	2b09      	cmp	r3, #9
 8006874:	f200 8090 	bhi.w	8006998 <_dtoa_r+0x2d8>
 8006878:	2b05      	cmp	r3, #5
 800687a:	bfc4      	itt	gt
 800687c:	3b04      	subgt	r3, #4
 800687e:	9306      	strgt	r3, [sp, #24]
 8006880:	9b06      	ldr	r3, [sp, #24]
 8006882:	f1a3 0302 	sub.w	r3, r3, #2
 8006886:	bfcc      	ite	gt
 8006888:	2500      	movgt	r5, #0
 800688a:	2501      	movle	r5, #1
 800688c:	2b03      	cmp	r3, #3
 800688e:	f200 808f 	bhi.w	80069b0 <_dtoa_r+0x2f0>
 8006892:	e8df f003 	tbb	[pc, r3]
 8006896:	7f7d      	.short	0x7f7d
 8006898:	7131      	.short	0x7131
 800689a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800689e:	441d      	add	r5, r3
 80068a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80068a4:	2820      	cmp	r0, #32
 80068a6:	dd13      	ble.n	80068d0 <_dtoa_r+0x210>
 80068a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	fa08 f800 	lsl.w	r8, r8, r0
 80068b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80068b6:	fa23 f000 	lsr.w	r0, r3, r0
 80068ba:	ea48 0000 	orr.w	r0, r8, r0
 80068be:	f7f9 fe41 	bl	8000544 <__aeabi_ui2d>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4682      	mov	sl, r0
 80068c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80068ca:	3d01      	subs	r5, #1
 80068cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80068ce:	e772      	b.n	80067b6 <_dtoa_r+0xf6>
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	f1c0 0020 	rsb	r0, r0, #32
 80068d6:	fa03 f000 	lsl.w	r0, r3, r0
 80068da:	e7f0      	b.n	80068be <_dtoa_r+0x1fe>
 80068dc:	2301      	movs	r3, #1
 80068de:	e7b1      	b.n	8006844 <_dtoa_r+0x184>
 80068e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80068e2:	e7b0      	b.n	8006846 <_dtoa_r+0x186>
 80068e4:	9b05      	ldr	r3, [sp, #20]
 80068e6:	eba3 030a 	sub.w	r3, r3, sl
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	f1ca 0300 	rsb	r3, sl, #0
 80068f0:	9307      	str	r3, [sp, #28]
 80068f2:	2300      	movs	r3, #0
 80068f4:	930e      	str	r3, [sp, #56]	; 0x38
 80068f6:	e7bb      	b.n	8006870 <_dtoa_r+0x1b0>
 80068f8:	2301      	movs	r3, #1
 80068fa:	930a      	str	r3, [sp, #40]	; 0x28
 80068fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dd59      	ble.n	80069b6 <_dtoa_r+0x2f6>
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	4699      	mov	r9, r3
 8006906:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006908:	2200      	movs	r2, #0
 800690a:	6072      	str	r2, [r6, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	f102 0014 	add.w	r0, r2, #20
 8006912:	4298      	cmp	r0, r3
 8006914:	6871      	ldr	r1, [r6, #4]
 8006916:	d953      	bls.n	80069c0 <_dtoa_r+0x300>
 8006918:	4620      	mov	r0, r4
 800691a:	f000 ffdd 	bl	80078d8 <_Balloc>
 800691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006920:	6030      	str	r0, [r6, #0]
 8006922:	f1b9 0f0e 	cmp.w	r9, #14
 8006926:	f8d3 b000 	ldr.w	fp, [r3]
 800692a:	f200 80e6 	bhi.w	8006afa <_dtoa_r+0x43a>
 800692e:	2d00      	cmp	r5, #0
 8006930:	f000 80e3 	beq.w	8006afa <_dtoa_r+0x43a>
 8006934:	ed9d 7b00 	vldr	d7, [sp]
 8006938:	f1ba 0f00 	cmp.w	sl, #0
 800693c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006940:	dd74      	ble.n	8006a2c <_dtoa_r+0x36c>
 8006942:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <_dtoa_r+0x32c>)
 8006944:	f00a 030f 	and.w	r3, sl, #15
 8006948:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800694c:	ed93 7b00 	vldr	d7, [r3]
 8006950:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006954:	06f0      	lsls	r0, r6, #27
 8006956:	ed8d 7b08 	vstr	d7, [sp, #32]
 800695a:	d565      	bpl.n	8006a28 <_dtoa_r+0x368>
 800695c:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <_dtoa_r+0x330>)
 800695e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006962:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006966:	f7f9 ff91 	bl	800088c <__aeabi_ddiv>
 800696a:	e9cd 0100 	strd	r0, r1, [sp]
 800696e:	f006 060f 	and.w	r6, r6, #15
 8006972:	2503      	movs	r5, #3
 8006974:	4f1e      	ldr	r7, [pc, #120]	; (80069f0 <_dtoa_r+0x330>)
 8006976:	e04c      	b.n	8006a12 <_dtoa_r+0x352>
 8006978:	2301      	movs	r3, #1
 800697a:	930a      	str	r3, [sp, #40]	; 0x28
 800697c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697e:	4453      	add	r3, sl
 8006980:	f103 0901 	add.w	r9, r3, #1
 8006984:	9302      	str	r3, [sp, #8]
 8006986:	464b      	mov	r3, r9
 8006988:	2b01      	cmp	r3, #1
 800698a:	bfb8      	it	lt
 800698c:	2301      	movlt	r3, #1
 800698e:	e7ba      	b.n	8006906 <_dtoa_r+0x246>
 8006990:	2300      	movs	r3, #0
 8006992:	e7b2      	b.n	80068fa <_dtoa_r+0x23a>
 8006994:	2300      	movs	r3, #0
 8006996:	e7f0      	b.n	800697a <_dtoa_r+0x2ba>
 8006998:	2501      	movs	r5, #1
 800699a:	2300      	movs	r3, #0
 800699c:	9306      	str	r3, [sp, #24]
 800699e:	950a      	str	r5, [sp, #40]	; 0x28
 80069a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a4:	9302      	str	r3, [sp, #8]
 80069a6:	4699      	mov	r9, r3
 80069a8:	2200      	movs	r2, #0
 80069aa:	2312      	movs	r3, #18
 80069ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80069ae:	e7aa      	b.n	8006906 <_dtoa_r+0x246>
 80069b0:	2301      	movs	r3, #1
 80069b2:	930a      	str	r3, [sp, #40]	; 0x28
 80069b4:	e7f4      	b.n	80069a0 <_dtoa_r+0x2e0>
 80069b6:	2301      	movs	r3, #1
 80069b8:	9302      	str	r3, [sp, #8]
 80069ba:	4699      	mov	r9, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	e7f5      	b.n	80069ac <_dtoa_r+0x2ec>
 80069c0:	3101      	adds	r1, #1
 80069c2:	6071      	str	r1, [r6, #4]
 80069c4:	0052      	lsls	r2, r2, #1
 80069c6:	e7a2      	b.n	800690e <_dtoa_r+0x24e>
 80069c8:	636f4361 	.word	0x636f4361
 80069cc:	3fd287a7 	.word	0x3fd287a7
 80069d0:	8b60c8b3 	.word	0x8b60c8b3
 80069d4:	3fc68a28 	.word	0x3fc68a28
 80069d8:	509f79fb 	.word	0x509f79fb
 80069dc:	3fd34413 	.word	0x3fd34413
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	08008651 	.word	0x08008651
 80069e8:	3ff80000 	.word	0x3ff80000
 80069ec:	08008710 	.word	0x08008710
 80069f0:	080086e8 	.word	0x080086e8
 80069f4:	080086d9 	.word	0x080086d9
 80069f8:	07f1      	lsls	r1, r6, #31
 80069fa:	d508      	bpl.n	8006a0e <_dtoa_r+0x34e>
 80069fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a04:	f7f9 fe18 	bl	8000638 <__aeabi_dmul>
 8006a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	1076      	asrs	r6, r6, #1
 8006a10:	3708      	adds	r7, #8
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d1f0      	bne.n	80069f8 <_dtoa_r+0x338>
 8006a16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a1e:	f7f9 ff35 	bl	800088c <__aeabi_ddiv>
 8006a22:	e9cd 0100 	strd	r0, r1, [sp]
 8006a26:	e01a      	b.n	8006a5e <_dtoa_r+0x39e>
 8006a28:	2502      	movs	r5, #2
 8006a2a:	e7a3      	b.n	8006974 <_dtoa_r+0x2b4>
 8006a2c:	f000 80a0 	beq.w	8006b70 <_dtoa_r+0x4b0>
 8006a30:	f1ca 0600 	rsb	r6, sl, #0
 8006a34:	4b9f      	ldr	r3, [pc, #636]	; (8006cb4 <_dtoa_r+0x5f4>)
 8006a36:	4fa0      	ldr	r7, [pc, #640]	; (8006cb8 <_dtoa_r+0x5f8>)
 8006a38:	f006 020f 	and.w	r2, r6, #15
 8006a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a48:	f7f9 fdf6 	bl	8000638 <__aeabi_dmul>
 8006a4c:	e9cd 0100 	strd	r0, r1, [sp]
 8006a50:	1136      	asrs	r6, r6, #4
 8006a52:	2300      	movs	r3, #0
 8006a54:	2502      	movs	r5, #2
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	d17f      	bne.n	8006b5a <_dtoa_r+0x49a>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e1      	bne.n	8006a22 <_dtoa_r+0x362>
 8006a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8087 	beq.w	8006b74 <_dtoa_r+0x4b4>
 8006a66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4b93      	ldr	r3, [pc, #588]	; (8006cbc <_dtoa_r+0x5fc>)
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	f7fa f853 	bl	8000b1c <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d07c      	beq.n	8006b74 <_dtoa_r+0x4b4>
 8006a7a:	f1b9 0f00 	cmp.w	r9, #0
 8006a7e:	d079      	beq.n	8006b74 <_dtoa_r+0x4b4>
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dd35      	ble.n	8006af2 <_dtoa_r+0x432>
 8006a86:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006a8a:	9308      	str	r3, [sp, #32]
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4b8b      	ldr	r3, [pc, #556]	; (8006cc0 <_dtoa_r+0x600>)
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7f9 fdd0 	bl	8000638 <__aeabi_dmul>
 8006a98:	e9cd 0100 	strd	r0, r1, [sp]
 8006a9c:	9f02      	ldr	r7, [sp, #8]
 8006a9e:	3501      	adds	r5, #1
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7f9 fd5f 	bl	8000564 <__aeabi_i2d>
 8006aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aaa:	f7f9 fdc5 	bl	8000638 <__aeabi_dmul>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b84      	ldr	r3, [pc, #528]	; (8006cc4 <_dtoa_r+0x604>)
 8006ab2:	f7f9 fc0b 	bl	80002cc <__adddf3>
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d15d      	bne.n	8006b7c <_dtoa_r+0x4bc>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4b81      	ldr	r3, [pc, #516]	; (8006cc8 <_dtoa_r+0x608>)
 8006ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac8:	f7f9 fbfe 	bl	80002c8 <__aeabi_dsub>
 8006acc:	462a      	mov	r2, r5
 8006ace:	4633      	mov	r3, r6
 8006ad0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ad4:	f7fa f840 	bl	8000b58 <__aeabi_dcmpgt>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	f040 8288 	bne.w	8006fee <_dtoa_r+0x92e>
 8006ade:	462a      	mov	r2, r5
 8006ae0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ae8:	f7fa f818 	bl	8000b1c <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f040 827c 	bne.w	8006fea <_dtoa_r+0x92a>
 8006af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006af6:	e9cd 2300 	strd	r2, r3, [sp]
 8006afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f2c0 8150 	blt.w	8006da2 <_dtoa_r+0x6e2>
 8006b02:	f1ba 0f0e 	cmp.w	sl, #14
 8006b06:	f300 814c 	bgt.w	8006da2 <_dtoa_r+0x6e2>
 8006b0a:	4b6a      	ldr	r3, [pc, #424]	; (8006cb4 <_dtoa_r+0x5f4>)
 8006b0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b10:	ed93 7b00 	vldr	d7, [r3]
 8006b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b1c:	f280 80d8 	bge.w	8006cd0 <_dtoa_r+0x610>
 8006b20:	f1b9 0f00 	cmp.w	r9, #0
 8006b24:	f300 80d4 	bgt.w	8006cd0 <_dtoa_r+0x610>
 8006b28:	f040 825e 	bne.w	8006fe8 <_dtoa_r+0x928>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4b66      	ldr	r3, [pc, #408]	; (8006cc8 <_dtoa_r+0x608>)
 8006b30:	ec51 0b17 	vmov	r0, r1, d7
 8006b34:	f7f9 fd80 	bl	8000638 <__aeabi_dmul>
 8006b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b3c:	f7fa f802 	bl	8000b44 <__aeabi_dcmpge>
 8006b40:	464f      	mov	r7, r9
 8006b42:	464e      	mov	r6, r9
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 8234 	bne.w	8006fb2 <_dtoa_r+0x8f2>
 8006b4a:	2331      	movs	r3, #49	; 0x31
 8006b4c:	f10b 0501 	add.w	r5, fp, #1
 8006b50:	f88b 3000 	strb.w	r3, [fp]
 8006b54:	f10a 0a01 	add.w	sl, sl, #1
 8006b58:	e22f      	b.n	8006fba <_dtoa_r+0x8fa>
 8006b5a:	07f2      	lsls	r2, r6, #31
 8006b5c:	d505      	bpl.n	8006b6a <_dtoa_r+0x4aa>
 8006b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b62:	f7f9 fd69 	bl	8000638 <__aeabi_dmul>
 8006b66:	3501      	adds	r5, #1
 8006b68:	2301      	movs	r3, #1
 8006b6a:	1076      	asrs	r6, r6, #1
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	e772      	b.n	8006a56 <_dtoa_r+0x396>
 8006b70:	2502      	movs	r5, #2
 8006b72:	e774      	b.n	8006a5e <_dtoa_r+0x39e>
 8006b74:	f8cd a020 	str.w	sl, [sp, #32]
 8006b78:	464f      	mov	r7, r9
 8006b7a:	e791      	b.n	8006aa0 <_dtoa_r+0x3e0>
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <_dtoa_r+0x5f4>)
 8006b7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d047      	beq.n	8006c1c <_dtoa_r+0x55c>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	2000      	movs	r0, #0
 8006b92:	494e      	ldr	r1, [pc, #312]	; (8006ccc <_dtoa_r+0x60c>)
 8006b94:	f7f9 fe7a 	bl	800088c <__aeabi_ddiv>
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4633      	mov	r3, r6
 8006b9c:	f7f9 fb94 	bl	80002c8 <__aeabi_dsub>
 8006ba0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ba4:	465d      	mov	r5, fp
 8006ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006baa:	f7f9 fff5 	bl	8000b98 <__aeabi_d2iz>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	f7f9 fcd8 	bl	8000564 <__aeabi_i2d>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bbc:	f7f9 fb84 	bl	80002c8 <__aeabi_dsub>
 8006bc0:	3630      	adds	r6, #48	; 0x30
 8006bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8006bc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bca:	e9cd 0100 	strd	r0, r1, [sp]
 8006bce:	f7f9 ffa5 	bl	8000b1c <__aeabi_dcmplt>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d163      	bne.n	8006c9e <_dtoa_r+0x5de>
 8006bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	4937      	ldr	r1, [pc, #220]	; (8006cbc <_dtoa_r+0x5fc>)
 8006bde:	f7f9 fb73 	bl	80002c8 <__aeabi_dsub>
 8006be2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006be6:	f7f9 ff99 	bl	8000b1c <__aeabi_dcmplt>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f040 80b7 	bne.w	8006d5e <_dtoa_r+0x69e>
 8006bf0:	eba5 030b 	sub.w	r3, r5, fp
 8006bf4:	429f      	cmp	r7, r3
 8006bf6:	f77f af7c 	ble.w	8006af2 <_dtoa_r+0x432>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <_dtoa_r+0x600>)
 8006bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c02:	f7f9 fd19 	bl	8000638 <__aeabi_dmul>
 8006c06:	2200      	movs	r2, #0
 8006c08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <_dtoa_r+0x600>)
 8006c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c12:	f7f9 fd11 	bl	8000638 <__aeabi_dmul>
 8006c16:	e9cd 0100 	strd	r0, r1, [sp]
 8006c1a:	e7c4      	b.n	8006ba6 <_dtoa_r+0x4e6>
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4633      	mov	r3, r6
 8006c20:	f7f9 fd0a 	bl	8000638 <__aeabi_dmul>
 8006c24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c28:	eb0b 0507 	add.w	r5, fp, r7
 8006c2c:	465e      	mov	r6, fp
 8006c2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c32:	f7f9 ffb1 	bl	8000b98 <__aeabi_d2iz>
 8006c36:	4607      	mov	r7, r0
 8006c38:	f7f9 fc94 	bl	8000564 <__aeabi_i2d>
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c46:	f7f9 fb3f 	bl	80002c8 <__aeabi_dsub>
 8006c4a:	f806 7b01 	strb.w	r7, [r6], #1
 8006c4e:	42ae      	cmp	r6, r5
 8006c50:	e9cd 0100 	strd	r0, r1, [sp]
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	d126      	bne.n	8006ca8 <_dtoa_r+0x5e8>
 8006c5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <_dtoa_r+0x60c>)
 8006c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c60:	f7f9 fb34 	bl	80002cc <__adddf3>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6c:	f7f9 ff74 	bl	8000b58 <__aeabi_dcmpgt>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d174      	bne.n	8006d5e <_dtoa_r+0x69e>
 8006c74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c78:	2000      	movs	r0, #0
 8006c7a:	4914      	ldr	r1, [pc, #80]	; (8006ccc <_dtoa_r+0x60c>)
 8006c7c:	f7f9 fb24 	bl	80002c8 <__aeabi_dsub>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c88:	f7f9 ff48 	bl	8000b1c <__aeabi_dcmplt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f af30 	beq.w	8006af2 <_dtoa_r+0x432>
 8006c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c96:	2b30      	cmp	r3, #48	; 0x30
 8006c98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006c9c:	d002      	beq.n	8006ca4 <_dtoa_r+0x5e4>
 8006c9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ca2:	e04a      	b.n	8006d3a <_dtoa_r+0x67a>
 8006ca4:	4615      	mov	r5, r2
 8006ca6:	e7f4      	b.n	8006c92 <_dtoa_r+0x5d2>
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <_dtoa_r+0x600>)
 8006caa:	f7f9 fcc5 	bl	8000638 <__aeabi_dmul>
 8006cae:	e9cd 0100 	strd	r0, r1, [sp]
 8006cb2:	e7bc      	b.n	8006c2e <_dtoa_r+0x56e>
 8006cb4:	08008710 	.word	0x08008710
 8006cb8:	080086e8 	.word	0x080086e8
 8006cbc:	3ff00000 	.word	0x3ff00000
 8006cc0:	40240000 	.word	0x40240000
 8006cc4:	401c0000 	.word	0x401c0000
 8006cc8:	40140000 	.word	0x40140000
 8006ccc:	3fe00000 	.word	0x3fe00000
 8006cd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cd4:	465d      	mov	r5, fp
 8006cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	f7f9 fdd5 	bl	800088c <__aeabi_ddiv>
 8006ce2:	f7f9 ff59 	bl	8000b98 <__aeabi_d2iz>
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	f7f9 fc3c 	bl	8000564 <__aeabi_i2d>
 8006cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cf0:	f7f9 fca2 	bl	8000638 <__aeabi_dmul>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006d00:	f7f9 fae2 	bl	80002c8 <__aeabi_dsub>
 8006d04:	f805 6b01 	strb.w	r6, [r5], #1
 8006d08:	eba5 060b 	sub.w	r6, r5, fp
 8006d0c:	45b1      	cmp	r9, r6
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	d139      	bne.n	8006d88 <_dtoa_r+0x6c8>
 8006d14:	f7f9 fada 	bl	80002cc <__adddf3>
 8006d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	f7f9 ff1a 	bl	8000b58 <__aeabi_dcmpgt>
 8006d24:	b9c8      	cbnz	r0, 8006d5a <_dtoa_r+0x69a>
 8006d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 8006d32:	b110      	cbz	r0, 8006d3a <_dtoa_r+0x67a>
 8006d34:	f018 0f01 	tst.w	r8, #1
 8006d38:	d10f      	bne.n	8006d5a <_dtoa_r+0x69a>
 8006d3a:	9904      	ldr	r1, [sp, #16]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fdff 	bl	8007940 <_Bfree>
 8006d42:	2300      	movs	r3, #0
 8006d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d46:	702b      	strb	r3, [r5, #0]
 8006d48:	f10a 0301 	add.w	r3, sl, #1
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8241 	beq.w	80071d8 <_dtoa_r+0xb18>
 8006d56:	601d      	str	r5, [r3, #0]
 8006d58:	e23e      	b.n	80071d8 <_dtoa_r+0xb18>
 8006d5a:	f8cd a020 	str.w	sl, [sp, #32]
 8006d5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d62:	2a39      	cmp	r2, #57	; 0x39
 8006d64:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006d68:	d108      	bne.n	8006d7c <_dtoa_r+0x6bc>
 8006d6a:	459b      	cmp	fp, r3
 8006d6c:	d10a      	bne.n	8006d84 <_dtoa_r+0x6c4>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	2330      	movs	r3, #48	; 0x30
 8006d76:	f88b 3000 	strb.w	r3, [fp]
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	781a      	ldrb	r2, [r3, #0]
 8006d7e:	3201      	adds	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e78c      	b.n	8006c9e <_dtoa_r+0x5de>
 8006d84:	461d      	mov	r5, r3
 8006d86:	e7ea      	b.n	8006d5e <_dtoa_r+0x69e>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <_dtoa_r+0x938>)
 8006d8c:	f7f9 fc54 	bl	8000638 <__aeabi_dmul>
 8006d90:	2200      	movs	r2, #0
 8006d92:	2300      	movs	r3, #0
 8006d94:	4606      	mov	r6, r0
 8006d96:	460f      	mov	r7, r1
 8006d98:	f7f9 feb6 	bl	8000b08 <__aeabi_dcmpeq>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d09a      	beq.n	8006cd6 <_dtoa_r+0x616>
 8006da0:	e7cb      	b.n	8006d3a <_dtoa_r+0x67a>
 8006da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	f000 808b 	beq.w	8006ec0 <_dtoa_r+0x800>
 8006daa:	9a06      	ldr	r2, [sp, #24]
 8006dac:	2a01      	cmp	r2, #1
 8006dae:	dc6e      	bgt.n	8006e8e <_dtoa_r+0x7ce>
 8006db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	d067      	beq.n	8006e86 <_dtoa_r+0x7c6>
 8006db6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dba:	9f07      	ldr	r7, [sp, #28]
 8006dbc:	9d05      	ldr	r5, [sp, #20]
 8006dbe:	9a05      	ldr	r2, [sp, #20]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	441a      	add	r2, r3
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	9205      	str	r2, [sp, #20]
 8006dc8:	4498      	add	r8, r3
 8006dca:	f000 fe97 	bl	8007afc <__i2b>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	dd0c      	ble.n	8006dee <_dtoa_r+0x72e>
 8006dd4:	f1b8 0f00 	cmp.w	r8, #0
 8006dd8:	dd09      	ble.n	8006dee <_dtoa_r+0x72e>
 8006dda:	4545      	cmp	r5, r8
 8006ddc:	9a05      	ldr	r2, [sp, #20]
 8006dde:	462b      	mov	r3, r5
 8006de0:	bfa8      	it	ge
 8006de2:	4643      	movge	r3, r8
 8006de4:	1ad2      	subs	r2, r2, r3
 8006de6:	9205      	str	r2, [sp, #20]
 8006de8:	1aed      	subs	r5, r5, r3
 8006dea:	eba8 0803 	sub.w	r8, r8, r3
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	b1eb      	cbz	r3, 8006e2e <_dtoa_r+0x76e>
 8006df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d067      	beq.n	8006ec8 <_dtoa_r+0x808>
 8006df8:	b18f      	cbz	r7, 8006e1e <_dtoa_r+0x75e>
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	463a      	mov	r2, r7
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 ff1c 	bl	8007c3c <__pow5mult>
 8006e04:	9a04      	ldr	r2, [sp, #16]
 8006e06:	4601      	mov	r1, r0
 8006e08:	4606      	mov	r6, r0
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fe7f 	bl	8007b0e <__multiply>
 8006e10:	9904      	ldr	r1, [sp, #16]
 8006e12:	9008      	str	r0, [sp, #32]
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fd93 	bl	8007940 <_Bfree>
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	9b07      	ldr	r3, [sp, #28]
 8006e20:	1bda      	subs	r2, r3, r7
 8006e22:	d004      	beq.n	8006e2e <_dtoa_r+0x76e>
 8006e24:	9904      	ldr	r1, [sp, #16]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 ff08 	bl	8007c3c <__pow5mult>
 8006e2c:	9004      	str	r0, [sp, #16]
 8006e2e:	2101      	movs	r1, #1
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fe63 	bl	8007afc <__i2b>
 8006e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e38:	4607      	mov	r7, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 81d0 	beq.w	80071e0 <_dtoa_r+0xb20>
 8006e40:	461a      	mov	r2, r3
 8006e42:	4601      	mov	r1, r0
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fef9 	bl	8007c3c <__pow5mult>
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	4607      	mov	r7, r0
 8006e50:	dc40      	bgt.n	8006ed4 <_dtoa_r+0x814>
 8006e52:	9b00      	ldr	r3, [sp, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d139      	bne.n	8006ecc <_dtoa_r+0x80c>
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d136      	bne.n	8006ed0 <_dtoa_r+0x810>
 8006e62:	9b01      	ldr	r3, [sp, #4]
 8006e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	0d1b      	lsrs	r3, r3, #20
 8006e6a:	051b      	lsls	r3, r3, #20
 8006e6c:	b12b      	cbz	r3, 8006e7a <_dtoa_r+0x7ba>
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	3301      	adds	r3, #1
 8006e72:	9305      	str	r3, [sp, #20]
 8006e74:	f108 0801 	add.w	r8, r8, #1
 8006e78:	2301      	movs	r3, #1
 8006e7a:	9307      	str	r3, [sp, #28]
 8006e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d12a      	bne.n	8006ed8 <_dtoa_r+0x818>
 8006e82:	2001      	movs	r0, #1
 8006e84:	e030      	b.n	8006ee8 <_dtoa_r+0x828>
 8006e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e8c:	e795      	b.n	8006dba <_dtoa_r+0x6fa>
 8006e8e:	9b07      	ldr	r3, [sp, #28]
 8006e90:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006e94:	42bb      	cmp	r3, r7
 8006e96:	bfbf      	itttt	lt
 8006e98:	9b07      	ldrlt	r3, [sp, #28]
 8006e9a:	9707      	strlt	r7, [sp, #28]
 8006e9c:	1afa      	sublt	r2, r7, r3
 8006e9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ea0:	bfbb      	ittet	lt
 8006ea2:	189b      	addlt	r3, r3, r2
 8006ea4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ea6:	1bdf      	subge	r7, r3, r7
 8006ea8:	2700      	movlt	r7, #0
 8006eaa:	f1b9 0f00 	cmp.w	r9, #0
 8006eae:	bfb5      	itete	lt
 8006eb0:	9b05      	ldrlt	r3, [sp, #20]
 8006eb2:	9d05      	ldrge	r5, [sp, #20]
 8006eb4:	eba3 0509 	sublt.w	r5, r3, r9
 8006eb8:	464b      	movge	r3, r9
 8006eba:	bfb8      	it	lt
 8006ebc:	2300      	movlt	r3, #0
 8006ebe:	e77e      	b.n	8006dbe <_dtoa_r+0x6fe>
 8006ec0:	9f07      	ldr	r7, [sp, #28]
 8006ec2:	9d05      	ldr	r5, [sp, #20]
 8006ec4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006ec6:	e783      	b.n	8006dd0 <_dtoa_r+0x710>
 8006ec8:	9a07      	ldr	r2, [sp, #28]
 8006eca:	e7ab      	b.n	8006e24 <_dtoa_r+0x764>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e7d4      	b.n	8006e7a <_dtoa_r+0x7ba>
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	e7d2      	b.n	8006e7a <_dtoa_r+0x7ba>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006ede:	6918      	ldr	r0, [r3, #16]
 8006ee0:	f000 fdbe 	bl	8007a60 <__hi0bits>
 8006ee4:	f1c0 0020 	rsb	r0, r0, #32
 8006ee8:	4440      	add	r0, r8
 8006eea:	f010 001f 	ands.w	r0, r0, #31
 8006eee:	d047      	beq.n	8006f80 <_dtoa_r+0x8c0>
 8006ef0:	f1c0 0320 	rsb	r3, r0, #32
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	dd3b      	ble.n	8006f70 <_dtoa_r+0x8b0>
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	f1c0 001c 	rsb	r0, r0, #28
 8006efe:	4403      	add	r3, r0
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	4405      	add	r5, r0
 8006f04:	4480      	add	r8, r0
 8006f06:	9b05      	ldr	r3, [sp, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dd05      	ble.n	8006f18 <_dtoa_r+0x858>
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	9904      	ldr	r1, [sp, #16]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fee1 	bl	8007cd8 <__lshift>
 8006f16:	9004      	str	r0, [sp, #16]
 8006f18:	f1b8 0f00 	cmp.w	r8, #0
 8006f1c:	dd05      	ble.n	8006f2a <_dtoa_r+0x86a>
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4642      	mov	r2, r8
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 fed8 	bl	8007cd8 <__lshift>
 8006f28:	4607      	mov	r7, r0
 8006f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f2c:	b353      	cbz	r3, 8006f84 <_dtoa_r+0x8c4>
 8006f2e:	4639      	mov	r1, r7
 8006f30:	9804      	ldr	r0, [sp, #16]
 8006f32:	f000 ff25 	bl	8007d80 <__mcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	da24      	bge.n	8006f84 <_dtoa_r+0x8c4>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	9904      	ldr	r1, [sp, #16]
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fd14 	bl	800796e <__multadd>
 8006f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f48:	9004      	str	r0, [sp, #16]
 8006f4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 814d 	beq.w	80071ee <_dtoa_r+0xb2e>
 8006f54:	2300      	movs	r3, #0
 8006f56:	4631      	mov	r1, r6
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fd07 	bl	800796e <__multadd>
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	4606      	mov	r6, r0
 8006f66:	dc4f      	bgt.n	8007008 <_dtoa_r+0x948>
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	dd4c      	ble.n	8007008 <_dtoa_r+0x948>
 8006f6e:	e011      	b.n	8006f94 <_dtoa_r+0x8d4>
 8006f70:	d0c9      	beq.n	8006f06 <_dtoa_r+0x846>
 8006f72:	9a05      	ldr	r2, [sp, #20]
 8006f74:	331c      	adds	r3, #28
 8006f76:	441a      	add	r2, r3
 8006f78:	9205      	str	r2, [sp, #20]
 8006f7a:	441d      	add	r5, r3
 8006f7c:	4498      	add	r8, r3
 8006f7e:	e7c2      	b.n	8006f06 <_dtoa_r+0x846>
 8006f80:	4603      	mov	r3, r0
 8006f82:	e7f6      	b.n	8006f72 <_dtoa_r+0x8b2>
 8006f84:	f1b9 0f00 	cmp.w	r9, #0
 8006f88:	dc38      	bgt.n	8006ffc <_dtoa_r+0x93c>
 8006f8a:	9b06      	ldr	r3, [sp, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	dd35      	ble.n	8006ffc <_dtoa_r+0x93c>
 8006f90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f94:	9b02      	ldr	r3, [sp, #8]
 8006f96:	b963      	cbnz	r3, 8006fb2 <_dtoa_r+0x8f2>
 8006f98:	4639      	mov	r1, r7
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fce6 	bl	800796e <__multadd>
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	9804      	ldr	r0, [sp, #16]
 8006fa8:	f000 feea 	bl	8007d80 <__mcmp>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f73f adcc 	bgt.w	8006b4a <_dtoa_r+0x48a>
 8006fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb4:	465d      	mov	r5, fp
 8006fb6:	ea6f 0a03 	mvn.w	sl, r3
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 fcbd 	bl	8007940 <_Bfree>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	f43f aeb7 	beq.w	8006d3a <_dtoa_r+0x67a>
 8006fcc:	f1b9 0f00 	cmp.w	r9, #0
 8006fd0:	d005      	beq.n	8006fde <_dtoa_r+0x91e>
 8006fd2:	45b1      	cmp	r9, r6
 8006fd4:	d003      	beq.n	8006fde <_dtoa_r+0x91e>
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fcb1 	bl	8007940 <_Bfree>
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fcad 	bl	8007940 <_Bfree>
 8006fe6:	e6a8      	b.n	8006d3a <_dtoa_r+0x67a>
 8006fe8:	2700      	movs	r7, #0
 8006fea:	463e      	mov	r6, r7
 8006fec:	e7e1      	b.n	8006fb2 <_dtoa_r+0x8f2>
 8006fee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ff2:	463e      	mov	r6, r7
 8006ff4:	e5a9      	b.n	8006b4a <_dtoa_r+0x48a>
 8006ff6:	bf00      	nop
 8006ff8:	40240000 	.word	0x40240000
 8006ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffe:	f8cd 9008 	str.w	r9, [sp, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80fa 	beq.w	80071fc <_dtoa_r+0xb3c>
 8007008:	2d00      	cmp	r5, #0
 800700a:	dd05      	ble.n	8007018 <_dtoa_r+0x958>
 800700c:	4631      	mov	r1, r6
 800700e:	462a      	mov	r2, r5
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fe61 	bl	8007cd8 <__lshift>
 8007016:	4606      	mov	r6, r0
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d04c      	beq.n	80070b8 <_dtoa_r+0x9f8>
 800701e:	6871      	ldr	r1, [r6, #4]
 8007020:	4620      	mov	r0, r4
 8007022:	f000 fc59 	bl	80078d8 <_Balloc>
 8007026:	6932      	ldr	r2, [r6, #16]
 8007028:	3202      	adds	r2, #2
 800702a:	4605      	mov	r5, r0
 800702c:	0092      	lsls	r2, r2, #2
 800702e:	f106 010c 	add.w	r1, r6, #12
 8007032:	300c      	adds	r0, #12
 8007034:	f7fd fd8e 	bl	8004b54 <memcpy>
 8007038:	2201      	movs	r2, #1
 800703a:	4629      	mov	r1, r5
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fe4b 	bl	8007cd8 <__lshift>
 8007042:	9b00      	ldr	r3, [sp, #0]
 8007044:	f8cd b014 	str.w	fp, [sp, #20]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	46b1      	mov	r9, r6
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	4606      	mov	r6, r0
 8007052:	4639      	mov	r1, r7
 8007054:	9804      	ldr	r0, [sp, #16]
 8007056:	f7ff faa5 	bl	80065a4 <quorem>
 800705a:	4649      	mov	r1, r9
 800705c:	4605      	mov	r5, r0
 800705e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007062:	9804      	ldr	r0, [sp, #16]
 8007064:	f000 fe8c 	bl	8007d80 <__mcmp>
 8007068:	4632      	mov	r2, r6
 800706a:	9000      	str	r0, [sp, #0]
 800706c:	4639      	mov	r1, r7
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fea0 	bl	8007db4 <__mdiff>
 8007074:	68c3      	ldr	r3, [r0, #12]
 8007076:	4602      	mov	r2, r0
 8007078:	bb03      	cbnz	r3, 80070bc <_dtoa_r+0x9fc>
 800707a:	4601      	mov	r1, r0
 800707c:	9008      	str	r0, [sp, #32]
 800707e:	9804      	ldr	r0, [sp, #16]
 8007080:	f000 fe7e 	bl	8007d80 <__mcmp>
 8007084:	9a08      	ldr	r2, [sp, #32]
 8007086:	4603      	mov	r3, r0
 8007088:	4611      	mov	r1, r2
 800708a:	4620      	mov	r0, r4
 800708c:	9308      	str	r3, [sp, #32]
 800708e:	f000 fc57 	bl	8007940 <_Bfree>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	b9a3      	cbnz	r3, 80070c0 <_dtoa_r+0xa00>
 8007096:	9a06      	ldr	r2, [sp, #24]
 8007098:	b992      	cbnz	r2, 80070c0 <_dtoa_r+0xa00>
 800709a:	9a07      	ldr	r2, [sp, #28]
 800709c:	b982      	cbnz	r2, 80070c0 <_dtoa_r+0xa00>
 800709e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070a2:	d029      	beq.n	80070f8 <_dtoa_r+0xa38>
 80070a4:	9b00      	ldr	r3, [sp, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd01      	ble.n	80070ae <_dtoa_r+0x9ee>
 80070aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	1c5d      	adds	r5, r3, #1
 80070b2:	f883 8000 	strb.w	r8, [r3]
 80070b6:	e782      	b.n	8006fbe <_dtoa_r+0x8fe>
 80070b8:	4630      	mov	r0, r6
 80070ba:	e7c2      	b.n	8007042 <_dtoa_r+0x982>
 80070bc:	2301      	movs	r3, #1
 80070be:	e7e3      	b.n	8007088 <_dtoa_r+0x9c8>
 80070c0:	9a00      	ldr	r2, [sp, #0]
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	db04      	blt.n	80070d0 <_dtoa_r+0xa10>
 80070c6:	d125      	bne.n	8007114 <_dtoa_r+0xa54>
 80070c8:	9a06      	ldr	r2, [sp, #24]
 80070ca:	bb1a      	cbnz	r2, 8007114 <_dtoa_r+0xa54>
 80070cc:	9a07      	ldr	r2, [sp, #28]
 80070ce:	bb0a      	cbnz	r2, 8007114 <_dtoa_r+0xa54>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	ddec      	ble.n	80070ae <_dtoa_r+0x9ee>
 80070d4:	2201      	movs	r2, #1
 80070d6:	9904      	ldr	r1, [sp, #16]
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 fdfd 	bl	8007cd8 <__lshift>
 80070de:	4639      	mov	r1, r7
 80070e0:	9004      	str	r0, [sp, #16]
 80070e2:	f000 fe4d 	bl	8007d80 <__mcmp>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	dc03      	bgt.n	80070f2 <_dtoa_r+0xa32>
 80070ea:	d1e0      	bne.n	80070ae <_dtoa_r+0x9ee>
 80070ec:	f018 0f01 	tst.w	r8, #1
 80070f0:	d0dd      	beq.n	80070ae <_dtoa_r+0x9ee>
 80070f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070f6:	d1d8      	bne.n	80070aa <_dtoa_r+0x9ea>
 80070f8:	9b05      	ldr	r3, [sp, #20]
 80070fa:	9a05      	ldr	r2, [sp, #20]
 80070fc:	1c5d      	adds	r5, r3, #1
 80070fe:	2339      	movs	r3, #57	; 0x39
 8007100:	7013      	strb	r3, [r2, #0]
 8007102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007106:	2b39      	cmp	r3, #57	; 0x39
 8007108:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800710c:	d04f      	beq.n	80071ae <_dtoa_r+0xaee>
 800710e:	3301      	adds	r3, #1
 8007110:	7013      	strb	r3, [r2, #0]
 8007112:	e754      	b.n	8006fbe <_dtoa_r+0x8fe>
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f102 0501 	add.w	r5, r2, #1
 800711c:	dd06      	ble.n	800712c <_dtoa_r+0xa6c>
 800711e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007122:	d0e9      	beq.n	80070f8 <_dtoa_r+0xa38>
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	9b05      	ldr	r3, [sp, #20]
 800712a:	e7c2      	b.n	80070b2 <_dtoa_r+0x9f2>
 800712c:	9a02      	ldr	r2, [sp, #8]
 800712e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007132:	eba5 030b 	sub.w	r3, r5, fp
 8007136:	4293      	cmp	r3, r2
 8007138:	d021      	beq.n	800717e <_dtoa_r+0xabe>
 800713a:	2300      	movs	r3, #0
 800713c:	220a      	movs	r2, #10
 800713e:	9904      	ldr	r1, [sp, #16]
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fc14 	bl	800796e <__multadd>
 8007146:	45b1      	cmp	r9, r6
 8007148:	9004      	str	r0, [sp, #16]
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	f04f 020a 	mov.w	r2, #10
 8007152:	4649      	mov	r1, r9
 8007154:	4620      	mov	r0, r4
 8007156:	d105      	bne.n	8007164 <_dtoa_r+0xaa4>
 8007158:	f000 fc09 	bl	800796e <__multadd>
 800715c:	4681      	mov	r9, r0
 800715e:	4606      	mov	r6, r0
 8007160:	9505      	str	r5, [sp, #20]
 8007162:	e776      	b.n	8007052 <_dtoa_r+0x992>
 8007164:	f000 fc03 	bl	800796e <__multadd>
 8007168:	4631      	mov	r1, r6
 800716a:	4681      	mov	r9, r0
 800716c:	2300      	movs	r3, #0
 800716e:	220a      	movs	r2, #10
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fbfc 	bl	800796e <__multadd>
 8007176:	4606      	mov	r6, r0
 8007178:	e7f2      	b.n	8007160 <_dtoa_r+0xaa0>
 800717a:	f04f 0900 	mov.w	r9, #0
 800717e:	2201      	movs	r2, #1
 8007180:	9904      	ldr	r1, [sp, #16]
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fda8 	bl	8007cd8 <__lshift>
 8007188:	4639      	mov	r1, r7
 800718a:	9004      	str	r0, [sp, #16]
 800718c:	f000 fdf8 	bl	8007d80 <__mcmp>
 8007190:	2800      	cmp	r0, #0
 8007192:	dcb6      	bgt.n	8007102 <_dtoa_r+0xa42>
 8007194:	d102      	bne.n	800719c <_dtoa_r+0xadc>
 8007196:	f018 0f01 	tst.w	r8, #1
 800719a:	d1b2      	bne.n	8007102 <_dtoa_r+0xa42>
 800719c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071a0:	2b30      	cmp	r3, #48	; 0x30
 80071a2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80071a6:	f47f af0a 	bne.w	8006fbe <_dtoa_r+0x8fe>
 80071aa:	4615      	mov	r5, r2
 80071ac:	e7f6      	b.n	800719c <_dtoa_r+0xadc>
 80071ae:	4593      	cmp	fp, r2
 80071b0:	d105      	bne.n	80071be <_dtoa_r+0xafe>
 80071b2:	2331      	movs	r3, #49	; 0x31
 80071b4:	f10a 0a01 	add.w	sl, sl, #1
 80071b8:	f88b 3000 	strb.w	r3, [fp]
 80071bc:	e6ff      	b.n	8006fbe <_dtoa_r+0x8fe>
 80071be:	4615      	mov	r5, r2
 80071c0:	e79f      	b.n	8007102 <_dtoa_r+0xa42>
 80071c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007228 <_dtoa_r+0xb68>
 80071c6:	e007      	b.n	80071d8 <_dtoa_r+0xb18>
 80071c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800722c <_dtoa_r+0xb6c>
 80071ce:	b11b      	cbz	r3, 80071d8 <_dtoa_r+0xb18>
 80071d0:	f10b 0308 	add.w	r3, fp, #8
 80071d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4658      	mov	r0, fp
 80071da:	b017      	add	sp, #92	; 0x5c
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	f77f ae35 	ble.w	8006e52 <_dtoa_r+0x792>
 80071e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	e649      	b.n	8006e82 <_dtoa_r+0x7c2>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dc03      	bgt.n	80071fc <_dtoa_r+0xb3c>
 80071f4:	9b06      	ldr	r3, [sp, #24]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	f73f aecc 	bgt.w	8006f94 <_dtoa_r+0x8d4>
 80071fc:	465d      	mov	r5, fp
 80071fe:	4639      	mov	r1, r7
 8007200:	9804      	ldr	r0, [sp, #16]
 8007202:	f7ff f9cf 	bl	80065a4 <quorem>
 8007206:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800720a:	f805 8b01 	strb.w	r8, [r5], #1
 800720e:	9a02      	ldr	r2, [sp, #8]
 8007210:	eba5 030b 	sub.w	r3, r5, fp
 8007214:	429a      	cmp	r2, r3
 8007216:	ddb0      	ble.n	800717a <_dtoa_r+0xaba>
 8007218:	2300      	movs	r3, #0
 800721a:	220a      	movs	r2, #10
 800721c:	9904      	ldr	r1, [sp, #16]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fba5 	bl	800796e <__multadd>
 8007224:	9004      	str	r0, [sp, #16]
 8007226:	e7ea      	b.n	80071fe <_dtoa_r+0xb3e>
 8007228:	08008650 	.word	0x08008650
 800722c:	080086d0 	.word	0x080086d0

08007230 <rshift>:
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	6906      	ldr	r6, [r0, #16]
 8007234:	114b      	asrs	r3, r1, #5
 8007236:	429e      	cmp	r6, r3
 8007238:	f100 0414 	add.w	r4, r0, #20
 800723c:	dd30      	ble.n	80072a0 <rshift+0x70>
 800723e:	f011 011f 	ands.w	r1, r1, #31
 8007242:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007246:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800724a:	d108      	bne.n	800725e <rshift+0x2e>
 800724c:	4621      	mov	r1, r4
 800724e:	42b2      	cmp	r2, r6
 8007250:	460b      	mov	r3, r1
 8007252:	d211      	bcs.n	8007278 <rshift+0x48>
 8007254:	f852 3b04 	ldr.w	r3, [r2], #4
 8007258:	f841 3b04 	str.w	r3, [r1], #4
 800725c:	e7f7      	b.n	800724e <rshift+0x1e>
 800725e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007262:	f1c1 0c20 	rsb	ip, r1, #32
 8007266:	40cd      	lsrs	r5, r1
 8007268:	3204      	adds	r2, #4
 800726a:	4623      	mov	r3, r4
 800726c:	42b2      	cmp	r2, r6
 800726e:	4617      	mov	r7, r2
 8007270:	d30c      	bcc.n	800728c <rshift+0x5c>
 8007272:	601d      	str	r5, [r3, #0]
 8007274:	b105      	cbz	r5, 8007278 <rshift+0x48>
 8007276:	3304      	adds	r3, #4
 8007278:	1b1a      	subs	r2, r3, r4
 800727a:	42a3      	cmp	r3, r4
 800727c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007280:	bf08      	it	eq
 8007282:	2300      	moveq	r3, #0
 8007284:	6102      	str	r2, [r0, #16]
 8007286:	bf08      	it	eq
 8007288:	6143      	streq	r3, [r0, #20]
 800728a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728c:	683f      	ldr	r7, [r7, #0]
 800728e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007292:	433d      	orrs	r5, r7
 8007294:	f843 5b04 	str.w	r5, [r3], #4
 8007298:	f852 5b04 	ldr.w	r5, [r2], #4
 800729c:	40cd      	lsrs	r5, r1
 800729e:	e7e5      	b.n	800726c <rshift+0x3c>
 80072a0:	4623      	mov	r3, r4
 80072a2:	e7e9      	b.n	8007278 <rshift+0x48>

080072a4 <__hexdig_fun>:
 80072a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072a8:	2b09      	cmp	r3, #9
 80072aa:	d802      	bhi.n	80072b2 <__hexdig_fun+0xe>
 80072ac:	3820      	subs	r0, #32
 80072ae:	b2c0      	uxtb	r0, r0
 80072b0:	4770      	bx	lr
 80072b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d801      	bhi.n	80072be <__hexdig_fun+0x1a>
 80072ba:	3847      	subs	r0, #71	; 0x47
 80072bc:	e7f7      	b.n	80072ae <__hexdig_fun+0xa>
 80072be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d801      	bhi.n	80072ca <__hexdig_fun+0x26>
 80072c6:	3827      	subs	r0, #39	; 0x27
 80072c8:	e7f1      	b.n	80072ae <__hexdig_fun+0xa>
 80072ca:	2000      	movs	r0, #0
 80072cc:	4770      	bx	lr

080072ce <__gethex>:
 80072ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d2:	b08b      	sub	sp, #44	; 0x2c
 80072d4:	468a      	mov	sl, r1
 80072d6:	9002      	str	r0, [sp, #8]
 80072d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80072da:	9306      	str	r3, [sp, #24]
 80072dc:	4690      	mov	r8, r2
 80072de:	f000 fad0 	bl	8007882 <__localeconv_l>
 80072e2:	6803      	ldr	r3, [r0, #0]
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f8 ff92 	bl	8000210 <strlen>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	9001      	str	r0, [sp, #4]
 80072f0:	4403      	add	r3, r0
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	f8da 3000 	ldr.w	r3, [sl]
 8007300:	3302      	adds	r3, #2
 8007302:	461f      	mov	r7, r3
 8007304:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007308:	2830      	cmp	r0, #48	; 0x30
 800730a:	d06c      	beq.n	80073e6 <__gethex+0x118>
 800730c:	f7ff ffca 	bl	80072a4 <__hexdig_fun>
 8007310:	4604      	mov	r4, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d16a      	bne.n	80073ec <__gethex+0x11e>
 8007316:	9a01      	ldr	r2, [sp, #4]
 8007318:	9903      	ldr	r1, [sp, #12]
 800731a:	4638      	mov	r0, r7
 800731c:	f001 f8f4 	bl	8008508 <strncmp>
 8007320:	2800      	cmp	r0, #0
 8007322:	d166      	bne.n	80073f2 <__gethex+0x124>
 8007324:	9b01      	ldr	r3, [sp, #4]
 8007326:	5cf8      	ldrb	r0, [r7, r3]
 8007328:	18fe      	adds	r6, r7, r3
 800732a:	f7ff ffbb 	bl	80072a4 <__hexdig_fun>
 800732e:	2800      	cmp	r0, #0
 8007330:	d062      	beq.n	80073f8 <__gethex+0x12a>
 8007332:	4633      	mov	r3, r6
 8007334:	7818      	ldrb	r0, [r3, #0]
 8007336:	2830      	cmp	r0, #48	; 0x30
 8007338:	461f      	mov	r7, r3
 800733a:	f103 0301 	add.w	r3, r3, #1
 800733e:	d0f9      	beq.n	8007334 <__gethex+0x66>
 8007340:	f7ff ffb0 	bl	80072a4 <__hexdig_fun>
 8007344:	fab0 f580 	clz	r5, r0
 8007348:	096d      	lsrs	r5, r5, #5
 800734a:	4634      	mov	r4, r6
 800734c:	f04f 0b01 	mov.w	fp, #1
 8007350:	463a      	mov	r2, r7
 8007352:	4616      	mov	r6, r2
 8007354:	3201      	adds	r2, #1
 8007356:	7830      	ldrb	r0, [r6, #0]
 8007358:	f7ff ffa4 	bl	80072a4 <__hexdig_fun>
 800735c:	2800      	cmp	r0, #0
 800735e:	d1f8      	bne.n	8007352 <__gethex+0x84>
 8007360:	9a01      	ldr	r2, [sp, #4]
 8007362:	9903      	ldr	r1, [sp, #12]
 8007364:	4630      	mov	r0, r6
 8007366:	f001 f8cf 	bl	8008508 <strncmp>
 800736a:	b950      	cbnz	r0, 8007382 <__gethex+0xb4>
 800736c:	b954      	cbnz	r4, 8007384 <__gethex+0xb6>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	18f4      	adds	r4, r6, r3
 8007372:	4622      	mov	r2, r4
 8007374:	4616      	mov	r6, r2
 8007376:	3201      	adds	r2, #1
 8007378:	7830      	ldrb	r0, [r6, #0]
 800737a:	f7ff ff93 	bl	80072a4 <__hexdig_fun>
 800737e:	2800      	cmp	r0, #0
 8007380:	d1f8      	bne.n	8007374 <__gethex+0xa6>
 8007382:	b10c      	cbz	r4, 8007388 <__gethex+0xba>
 8007384:	1ba4      	subs	r4, r4, r6
 8007386:	00a4      	lsls	r4, r4, #2
 8007388:	7833      	ldrb	r3, [r6, #0]
 800738a:	2b50      	cmp	r3, #80	; 0x50
 800738c:	d001      	beq.n	8007392 <__gethex+0xc4>
 800738e:	2b70      	cmp	r3, #112	; 0x70
 8007390:	d140      	bne.n	8007414 <__gethex+0x146>
 8007392:	7873      	ldrb	r3, [r6, #1]
 8007394:	2b2b      	cmp	r3, #43	; 0x2b
 8007396:	d031      	beq.n	80073fc <__gethex+0x12e>
 8007398:	2b2d      	cmp	r3, #45	; 0x2d
 800739a:	d033      	beq.n	8007404 <__gethex+0x136>
 800739c:	1c71      	adds	r1, r6, #1
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	7808      	ldrb	r0, [r1, #0]
 80073a4:	f7ff ff7e 	bl	80072a4 <__hexdig_fun>
 80073a8:	1e43      	subs	r3, r0, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b18      	cmp	r3, #24
 80073ae:	d831      	bhi.n	8007414 <__gethex+0x146>
 80073b0:	f1a0 0210 	sub.w	r2, r0, #16
 80073b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073b8:	f7ff ff74 	bl	80072a4 <__hexdig_fun>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b18      	cmp	r3, #24
 80073c2:	d922      	bls.n	800740a <__gethex+0x13c>
 80073c4:	f1b9 0f00 	cmp.w	r9, #0
 80073c8:	d000      	beq.n	80073cc <__gethex+0xfe>
 80073ca:	4252      	negs	r2, r2
 80073cc:	4414      	add	r4, r2
 80073ce:	f8ca 1000 	str.w	r1, [sl]
 80073d2:	b30d      	cbz	r5, 8007418 <__gethex+0x14a>
 80073d4:	f1bb 0f00 	cmp.w	fp, #0
 80073d8:	bf0c      	ite	eq
 80073da:	2706      	moveq	r7, #6
 80073dc:	2700      	movne	r7, #0
 80073de:	4638      	mov	r0, r7
 80073e0:	b00b      	add	sp, #44	; 0x2c
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e6:	f10b 0b01 	add.w	fp, fp, #1
 80073ea:	e78a      	b.n	8007302 <__gethex+0x34>
 80073ec:	2500      	movs	r5, #0
 80073ee:	462c      	mov	r4, r5
 80073f0:	e7ae      	b.n	8007350 <__gethex+0x82>
 80073f2:	463e      	mov	r6, r7
 80073f4:	2501      	movs	r5, #1
 80073f6:	e7c7      	b.n	8007388 <__gethex+0xba>
 80073f8:	4604      	mov	r4, r0
 80073fa:	e7fb      	b.n	80073f4 <__gethex+0x126>
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	1cb1      	adds	r1, r6, #2
 8007402:	e7ce      	b.n	80073a2 <__gethex+0xd4>
 8007404:	f04f 0901 	mov.w	r9, #1
 8007408:	e7fa      	b.n	8007400 <__gethex+0x132>
 800740a:	230a      	movs	r3, #10
 800740c:	fb03 0202 	mla	r2, r3, r2, r0
 8007410:	3a10      	subs	r2, #16
 8007412:	e7cf      	b.n	80073b4 <__gethex+0xe6>
 8007414:	4631      	mov	r1, r6
 8007416:	e7da      	b.n	80073ce <__gethex+0x100>
 8007418:	1bf3      	subs	r3, r6, r7
 800741a:	3b01      	subs	r3, #1
 800741c:	4629      	mov	r1, r5
 800741e:	2b07      	cmp	r3, #7
 8007420:	dc49      	bgt.n	80074b6 <__gethex+0x1e8>
 8007422:	9802      	ldr	r0, [sp, #8]
 8007424:	f000 fa58 	bl	80078d8 <_Balloc>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	f100 0914 	add.w	r9, r0, #20
 800742e:	f04f 0b00 	mov.w	fp, #0
 8007432:	f1c3 0301 	rsb	r3, r3, #1
 8007436:	4605      	mov	r5, r0
 8007438:	f8cd 9010 	str.w	r9, [sp, #16]
 800743c:	46da      	mov	sl, fp
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	42b7      	cmp	r7, r6
 8007442:	d33b      	bcc.n	80074bc <__gethex+0x1ee>
 8007444:	9804      	ldr	r0, [sp, #16]
 8007446:	f840 ab04 	str.w	sl, [r0], #4
 800744a:	eba0 0009 	sub.w	r0, r0, r9
 800744e:	1080      	asrs	r0, r0, #2
 8007450:	6128      	str	r0, [r5, #16]
 8007452:	0147      	lsls	r7, r0, #5
 8007454:	4650      	mov	r0, sl
 8007456:	f000 fb03 	bl	8007a60 <__hi0bits>
 800745a:	f8d8 6000 	ldr.w	r6, [r8]
 800745e:	1a3f      	subs	r7, r7, r0
 8007460:	42b7      	cmp	r7, r6
 8007462:	dd64      	ble.n	800752e <__gethex+0x260>
 8007464:	1bbf      	subs	r7, r7, r6
 8007466:	4639      	mov	r1, r7
 8007468:	4628      	mov	r0, r5
 800746a:	f000 fe13 	bl	8008094 <__any_on>
 800746e:	4682      	mov	sl, r0
 8007470:	b178      	cbz	r0, 8007492 <__gethex+0x1c4>
 8007472:	1e7b      	subs	r3, r7, #1
 8007474:	1159      	asrs	r1, r3, #5
 8007476:	f003 021f 	and.w	r2, r3, #31
 800747a:	f04f 0a01 	mov.w	sl, #1
 800747e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007482:	fa0a f202 	lsl.w	r2, sl, r2
 8007486:	420a      	tst	r2, r1
 8007488:	d003      	beq.n	8007492 <__gethex+0x1c4>
 800748a:	4553      	cmp	r3, sl
 800748c:	dc46      	bgt.n	800751c <__gethex+0x24e>
 800748e:	f04f 0a02 	mov.w	sl, #2
 8007492:	4639      	mov	r1, r7
 8007494:	4628      	mov	r0, r5
 8007496:	f7ff fecb 	bl	8007230 <rshift>
 800749a:	443c      	add	r4, r7
 800749c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	da52      	bge.n	800754a <__gethex+0x27c>
 80074a4:	4629      	mov	r1, r5
 80074a6:	9802      	ldr	r0, [sp, #8]
 80074a8:	f000 fa4a 	bl	8007940 <_Bfree>
 80074ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074ae:	2300      	movs	r3, #0
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	27a3      	movs	r7, #163	; 0xa3
 80074b4:	e793      	b.n	80073de <__gethex+0x110>
 80074b6:	3101      	adds	r1, #1
 80074b8:	105b      	asrs	r3, r3, #1
 80074ba:	e7b0      	b.n	800741e <__gethex+0x150>
 80074bc:	1e73      	subs	r3, r6, #1
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <__gethex+0x22e>
 80074ca:	f1bb 0f20 	cmp.w	fp, #32
 80074ce:	d107      	bne.n	80074e0 <__gethex+0x212>
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	f8c3 a000 	str.w	sl, [r3]
 80074d6:	3304      	adds	r3, #4
 80074d8:	f04f 0a00 	mov.w	sl, #0
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	46d3      	mov	fp, sl
 80074e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074e4:	f7ff fede 	bl	80072a4 <__hexdig_fun>
 80074e8:	f000 000f 	and.w	r0, r0, #15
 80074ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80074f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80074f4:	f10b 0b04 	add.w	fp, fp, #4
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	e00d      	b.n	8007518 <__gethex+0x24a>
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	4413      	add	r3, r2
 8007502:	42bb      	cmp	r3, r7
 8007504:	d3e1      	bcc.n	80074ca <__gethex+0x1fc>
 8007506:	4618      	mov	r0, r3
 8007508:	9a01      	ldr	r2, [sp, #4]
 800750a:	9903      	ldr	r1, [sp, #12]
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	f000 fffb 	bl	8008508 <strncmp>
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	2800      	cmp	r0, #0
 8007516:	d1d8      	bne.n	80074ca <__gethex+0x1fc>
 8007518:	461e      	mov	r6, r3
 800751a:	e791      	b.n	8007440 <__gethex+0x172>
 800751c:	1eb9      	subs	r1, r7, #2
 800751e:	4628      	mov	r0, r5
 8007520:	f000 fdb8 	bl	8008094 <__any_on>
 8007524:	2800      	cmp	r0, #0
 8007526:	d0b2      	beq.n	800748e <__gethex+0x1c0>
 8007528:	f04f 0a03 	mov.w	sl, #3
 800752c:	e7b1      	b.n	8007492 <__gethex+0x1c4>
 800752e:	da09      	bge.n	8007544 <__gethex+0x276>
 8007530:	1bf7      	subs	r7, r6, r7
 8007532:	4629      	mov	r1, r5
 8007534:	463a      	mov	r2, r7
 8007536:	9802      	ldr	r0, [sp, #8]
 8007538:	f000 fbce 	bl	8007cd8 <__lshift>
 800753c:	1be4      	subs	r4, r4, r7
 800753e:	4605      	mov	r5, r0
 8007540:	f100 0914 	add.w	r9, r0, #20
 8007544:	f04f 0a00 	mov.w	sl, #0
 8007548:	e7a8      	b.n	800749c <__gethex+0x1ce>
 800754a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800754e:	42a0      	cmp	r0, r4
 8007550:	dd6a      	ble.n	8007628 <__gethex+0x35a>
 8007552:	1b04      	subs	r4, r0, r4
 8007554:	42a6      	cmp	r6, r4
 8007556:	dc2e      	bgt.n	80075b6 <__gethex+0x2e8>
 8007558:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d022      	beq.n	80075a6 <__gethex+0x2d8>
 8007560:	2b03      	cmp	r3, #3
 8007562:	d024      	beq.n	80075ae <__gethex+0x2e0>
 8007564:	2b01      	cmp	r3, #1
 8007566:	d115      	bne.n	8007594 <__gethex+0x2c6>
 8007568:	42a6      	cmp	r6, r4
 800756a:	d113      	bne.n	8007594 <__gethex+0x2c6>
 800756c:	2e01      	cmp	r6, #1
 800756e:	dc0b      	bgt.n	8007588 <__gethex+0x2ba>
 8007570:	9a06      	ldr	r2, [sp, #24]
 8007572:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	2301      	movs	r3, #1
 800757a:	612b      	str	r3, [r5, #16]
 800757c:	f8c9 3000 	str.w	r3, [r9]
 8007580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007582:	2762      	movs	r7, #98	; 0x62
 8007584:	601d      	str	r5, [r3, #0]
 8007586:	e72a      	b.n	80073de <__gethex+0x110>
 8007588:	1e71      	subs	r1, r6, #1
 800758a:	4628      	mov	r0, r5
 800758c:	f000 fd82 	bl	8008094 <__any_on>
 8007590:	2800      	cmp	r0, #0
 8007592:	d1ed      	bne.n	8007570 <__gethex+0x2a2>
 8007594:	4629      	mov	r1, r5
 8007596:	9802      	ldr	r0, [sp, #8]
 8007598:	f000 f9d2 	bl	8007940 <_Bfree>
 800759c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800759e:	2300      	movs	r3, #0
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	2750      	movs	r7, #80	; 0x50
 80075a4:	e71b      	b.n	80073de <__gethex+0x110>
 80075a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0e1      	beq.n	8007570 <__gethex+0x2a2>
 80075ac:	e7f2      	b.n	8007594 <__gethex+0x2c6>
 80075ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1dd      	bne.n	8007570 <__gethex+0x2a2>
 80075b4:	e7ee      	b.n	8007594 <__gethex+0x2c6>
 80075b6:	1e67      	subs	r7, r4, #1
 80075b8:	f1ba 0f00 	cmp.w	sl, #0
 80075bc:	d131      	bne.n	8007622 <__gethex+0x354>
 80075be:	b127      	cbz	r7, 80075ca <__gethex+0x2fc>
 80075c0:	4639      	mov	r1, r7
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 fd66 	bl	8008094 <__any_on>
 80075c8:	4682      	mov	sl, r0
 80075ca:	117a      	asrs	r2, r7, #5
 80075cc:	2301      	movs	r3, #1
 80075ce:	f007 071f 	and.w	r7, r7, #31
 80075d2:	fa03 f707 	lsl.w	r7, r3, r7
 80075d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80075da:	4621      	mov	r1, r4
 80075dc:	421f      	tst	r7, r3
 80075de:	4628      	mov	r0, r5
 80075e0:	bf18      	it	ne
 80075e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80075e6:	1b36      	subs	r6, r6, r4
 80075e8:	f7ff fe22 	bl	8007230 <rshift>
 80075ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80075f0:	2702      	movs	r7, #2
 80075f2:	f1ba 0f00 	cmp.w	sl, #0
 80075f6:	d048      	beq.n	800768a <__gethex+0x3bc>
 80075f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d015      	beq.n	800762c <__gethex+0x35e>
 8007600:	2b03      	cmp	r3, #3
 8007602:	d017      	beq.n	8007634 <__gethex+0x366>
 8007604:	2b01      	cmp	r3, #1
 8007606:	d109      	bne.n	800761c <__gethex+0x34e>
 8007608:	f01a 0f02 	tst.w	sl, #2
 800760c:	d006      	beq.n	800761c <__gethex+0x34e>
 800760e:	f8d9 3000 	ldr.w	r3, [r9]
 8007612:	ea4a 0a03 	orr.w	sl, sl, r3
 8007616:	f01a 0f01 	tst.w	sl, #1
 800761a:	d10e      	bne.n	800763a <__gethex+0x36c>
 800761c:	f047 0710 	orr.w	r7, r7, #16
 8007620:	e033      	b.n	800768a <__gethex+0x3bc>
 8007622:	f04f 0a01 	mov.w	sl, #1
 8007626:	e7d0      	b.n	80075ca <__gethex+0x2fc>
 8007628:	2701      	movs	r7, #1
 800762a:	e7e2      	b.n	80075f2 <__gethex+0x324>
 800762c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800762e:	f1c3 0301 	rsb	r3, r3, #1
 8007632:	9315      	str	r3, [sp, #84]	; 0x54
 8007634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0f0      	beq.n	800761c <__gethex+0x34e>
 800763a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800763e:	f105 0314 	add.w	r3, r5, #20
 8007642:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007646:	eb03 010a 	add.w	r1, r3, sl
 800764a:	f04f 0c00 	mov.w	ip, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f853 2b04 	ldr.w	r2, [r3], #4
 8007654:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007658:	d01c      	beq.n	8007694 <__gethex+0x3c6>
 800765a:	3201      	adds	r2, #1
 800765c:	6002      	str	r2, [r0, #0]
 800765e:	2f02      	cmp	r7, #2
 8007660:	f105 0314 	add.w	r3, r5, #20
 8007664:	d138      	bne.n	80076d8 <__gethex+0x40a>
 8007666:	f8d8 2000 	ldr.w	r2, [r8]
 800766a:	3a01      	subs	r2, #1
 800766c:	42b2      	cmp	r2, r6
 800766e:	d10a      	bne.n	8007686 <__gethex+0x3b8>
 8007670:	1171      	asrs	r1, r6, #5
 8007672:	2201      	movs	r2, #1
 8007674:	f006 061f 	and.w	r6, r6, #31
 8007678:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800767c:	fa02 f606 	lsl.w	r6, r2, r6
 8007680:	421e      	tst	r6, r3
 8007682:	bf18      	it	ne
 8007684:	4617      	movne	r7, r2
 8007686:	f047 0720 	orr.w	r7, r7, #32
 800768a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800768c:	601d      	str	r5, [r3, #0]
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	601c      	str	r4, [r3, #0]
 8007692:	e6a4      	b.n	80073de <__gethex+0x110>
 8007694:	4299      	cmp	r1, r3
 8007696:	f843 cc04 	str.w	ip, [r3, #-4]
 800769a:	d8d8      	bhi.n	800764e <__gethex+0x380>
 800769c:	68ab      	ldr	r3, [r5, #8]
 800769e:	4599      	cmp	r9, r3
 80076a0:	db12      	blt.n	80076c8 <__gethex+0x3fa>
 80076a2:	6869      	ldr	r1, [r5, #4]
 80076a4:	9802      	ldr	r0, [sp, #8]
 80076a6:	3101      	adds	r1, #1
 80076a8:	f000 f916 	bl	80078d8 <_Balloc>
 80076ac:	692a      	ldr	r2, [r5, #16]
 80076ae:	3202      	adds	r2, #2
 80076b0:	f105 010c 	add.w	r1, r5, #12
 80076b4:	4683      	mov	fp, r0
 80076b6:	0092      	lsls	r2, r2, #2
 80076b8:	300c      	adds	r0, #12
 80076ba:	f7fd fa4b 	bl	8004b54 <memcpy>
 80076be:	4629      	mov	r1, r5
 80076c0:	9802      	ldr	r0, [sp, #8]
 80076c2:	f000 f93d 	bl	8007940 <_Bfree>
 80076c6:	465d      	mov	r5, fp
 80076c8:	692b      	ldr	r3, [r5, #16]
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80076d0:	612a      	str	r2, [r5, #16]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
 80076d6:	e7c2      	b.n	800765e <__gethex+0x390>
 80076d8:	692a      	ldr	r2, [r5, #16]
 80076da:	454a      	cmp	r2, r9
 80076dc:	dd0b      	ble.n	80076f6 <__gethex+0x428>
 80076de:	2101      	movs	r1, #1
 80076e0:	4628      	mov	r0, r5
 80076e2:	f7ff fda5 	bl	8007230 <rshift>
 80076e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076ea:	3401      	adds	r4, #1
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	f6ff aed9 	blt.w	80074a4 <__gethex+0x1d6>
 80076f2:	2701      	movs	r7, #1
 80076f4:	e7c7      	b.n	8007686 <__gethex+0x3b8>
 80076f6:	f016 061f 	ands.w	r6, r6, #31
 80076fa:	d0fa      	beq.n	80076f2 <__gethex+0x424>
 80076fc:	449a      	add	sl, r3
 80076fe:	f1c6 0620 	rsb	r6, r6, #32
 8007702:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007706:	f000 f9ab 	bl	8007a60 <__hi0bits>
 800770a:	42b0      	cmp	r0, r6
 800770c:	dbe7      	blt.n	80076de <__gethex+0x410>
 800770e:	e7f0      	b.n	80076f2 <__gethex+0x424>

08007710 <L_shift>:
 8007710:	f1c2 0208 	rsb	r2, r2, #8
 8007714:	0092      	lsls	r2, r2, #2
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	f1c2 0620 	rsb	r6, r2, #32
 800771c:	6843      	ldr	r3, [r0, #4]
 800771e:	6804      	ldr	r4, [r0, #0]
 8007720:	fa03 f506 	lsl.w	r5, r3, r6
 8007724:	432c      	orrs	r4, r5
 8007726:	40d3      	lsrs	r3, r2
 8007728:	6004      	str	r4, [r0, #0]
 800772a:	f840 3f04 	str.w	r3, [r0, #4]!
 800772e:	4288      	cmp	r0, r1
 8007730:	d3f4      	bcc.n	800771c <L_shift+0xc>
 8007732:	bd70      	pop	{r4, r5, r6, pc}

08007734 <__match>:
 8007734:	b530      	push	{r4, r5, lr}
 8007736:	6803      	ldr	r3, [r0, #0]
 8007738:	3301      	adds	r3, #1
 800773a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800773e:	b914      	cbnz	r4, 8007746 <__match+0x12>
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	2001      	movs	r0, #1
 8007744:	bd30      	pop	{r4, r5, pc}
 8007746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800774a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800774e:	2d19      	cmp	r5, #25
 8007750:	bf98      	it	ls
 8007752:	3220      	addls	r2, #32
 8007754:	42a2      	cmp	r2, r4
 8007756:	d0f0      	beq.n	800773a <__match+0x6>
 8007758:	2000      	movs	r0, #0
 800775a:	e7f3      	b.n	8007744 <__match+0x10>

0800775c <__hexnan>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	680b      	ldr	r3, [r1, #0]
 8007762:	6801      	ldr	r1, [r0, #0]
 8007764:	115f      	asrs	r7, r3, #5
 8007766:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800776a:	f013 031f 	ands.w	r3, r3, #31
 800776e:	b087      	sub	sp, #28
 8007770:	bf18      	it	ne
 8007772:	3704      	addne	r7, #4
 8007774:	2500      	movs	r5, #0
 8007776:	1f3e      	subs	r6, r7, #4
 8007778:	4682      	mov	sl, r0
 800777a:	4690      	mov	r8, r2
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007782:	46b1      	mov	r9, r6
 8007784:	4634      	mov	r4, r6
 8007786:	9502      	str	r5, [sp, #8]
 8007788:	46ab      	mov	fp, r5
 800778a:	784a      	ldrb	r2, [r1, #1]
 800778c:	1c4b      	adds	r3, r1, #1
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	b342      	cbz	r2, 80077e4 <__hexnan+0x88>
 8007792:	4610      	mov	r0, r2
 8007794:	9105      	str	r1, [sp, #20]
 8007796:	9204      	str	r2, [sp, #16]
 8007798:	f7ff fd84 	bl	80072a4 <__hexdig_fun>
 800779c:	2800      	cmp	r0, #0
 800779e:	d143      	bne.n	8007828 <__hexnan+0xcc>
 80077a0:	9a04      	ldr	r2, [sp, #16]
 80077a2:	9905      	ldr	r1, [sp, #20]
 80077a4:	2a20      	cmp	r2, #32
 80077a6:	d818      	bhi.n	80077da <__hexnan+0x7e>
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	459b      	cmp	fp, r3
 80077ac:	dd13      	ble.n	80077d6 <__hexnan+0x7a>
 80077ae:	454c      	cmp	r4, r9
 80077b0:	d206      	bcs.n	80077c0 <__hexnan+0x64>
 80077b2:	2d07      	cmp	r5, #7
 80077b4:	dc04      	bgt.n	80077c0 <__hexnan+0x64>
 80077b6:	462a      	mov	r2, r5
 80077b8:	4649      	mov	r1, r9
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff ffa8 	bl	8007710 <L_shift>
 80077c0:	4544      	cmp	r4, r8
 80077c2:	d944      	bls.n	800784e <__hexnan+0xf2>
 80077c4:	2300      	movs	r3, #0
 80077c6:	f1a4 0904 	sub.w	r9, r4, #4
 80077ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80077ce:	f8cd b008 	str.w	fp, [sp, #8]
 80077d2:	464c      	mov	r4, r9
 80077d4:	461d      	mov	r5, r3
 80077d6:	9903      	ldr	r1, [sp, #12]
 80077d8:	e7d7      	b.n	800778a <__hexnan+0x2e>
 80077da:	2a29      	cmp	r2, #41	; 0x29
 80077dc:	d14a      	bne.n	8007874 <__hexnan+0x118>
 80077de:	3102      	adds	r1, #2
 80077e0:	f8ca 1000 	str.w	r1, [sl]
 80077e4:	f1bb 0f00 	cmp.w	fp, #0
 80077e8:	d044      	beq.n	8007874 <__hexnan+0x118>
 80077ea:	454c      	cmp	r4, r9
 80077ec:	d206      	bcs.n	80077fc <__hexnan+0xa0>
 80077ee:	2d07      	cmp	r5, #7
 80077f0:	dc04      	bgt.n	80077fc <__hexnan+0xa0>
 80077f2:	462a      	mov	r2, r5
 80077f4:	4649      	mov	r1, r9
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7ff ff8a 	bl	8007710 <L_shift>
 80077fc:	4544      	cmp	r4, r8
 80077fe:	d928      	bls.n	8007852 <__hexnan+0xf6>
 8007800:	4643      	mov	r3, r8
 8007802:	f854 2b04 	ldr.w	r2, [r4], #4
 8007806:	f843 2b04 	str.w	r2, [r3], #4
 800780a:	42a6      	cmp	r6, r4
 800780c:	d2f9      	bcs.n	8007802 <__hexnan+0xa6>
 800780e:	2200      	movs	r2, #0
 8007810:	f843 2b04 	str.w	r2, [r3], #4
 8007814:	429e      	cmp	r6, r3
 8007816:	d2fb      	bcs.n	8007810 <__hexnan+0xb4>
 8007818:	6833      	ldr	r3, [r6, #0]
 800781a:	b91b      	cbnz	r3, 8007824 <__hexnan+0xc8>
 800781c:	4546      	cmp	r6, r8
 800781e:	d127      	bne.n	8007870 <__hexnan+0x114>
 8007820:	2301      	movs	r3, #1
 8007822:	6033      	str	r3, [r6, #0]
 8007824:	2005      	movs	r0, #5
 8007826:	e026      	b.n	8007876 <__hexnan+0x11a>
 8007828:	3501      	adds	r5, #1
 800782a:	2d08      	cmp	r5, #8
 800782c:	f10b 0b01 	add.w	fp, fp, #1
 8007830:	dd06      	ble.n	8007840 <__hexnan+0xe4>
 8007832:	4544      	cmp	r4, r8
 8007834:	d9cf      	bls.n	80077d6 <__hexnan+0x7a>
 8007836:	2300      	movs	r3, #0
 8007838:	f844 3c04 	str.w	r3, [r4, #-4]
 800783c:	2501      	movs	r5, #1
 800783e:	3c04      	subs	r4, #4
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	f000 000f 	and.w	r0, r0, #15
 8007846:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800784a:	6020      	str	r0, [r4, #0]
 800784c:	e7c3      	b.n	80077d6 <__hexnan+0x7a>
 800784e:	2508      	movs	r5, #8
 8007850:	e7c1      	b.n	80077d6 <__hexnan+0x7a>
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0df      	beq.n	8007818 <__hexnan+0xbc>
 8007858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800785c:	f1c3 0320 	rsb	r3, r3, #32
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007868:	401a      	ands	r2, r3
 800786a:	f847 2c04 	str.w	r2, [r7, #-4]
 800786e:	e7d3      	b.n	8007818 <__hexnan+0xbc>
 8007870:	3e04      	subs	r6, #4
 8007872:	e7d1      	b.n	8007818 <__hexnan+0xbc>
 8007874:	2004      	movs	r0, #4
 8007876:	b007      	add	sp, #28
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800787c <__locale_ctype_ptr_l>:
 800787c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007880:	4770      	bx	lr

08007882 <__localeconv_l>:
 8007882:	30f0      	adds	r0, #240	; 0xf0
 8007884:	4770      	bx	lr
	...

08007888 <_localeconv_r>:
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <_localeconv_r+0x14>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6a18      	ldr	r0, [r3, #32]
 800788e:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <_localeconv_r+0x18>)
 8007890:	2800      	cmp	r0, #0
 8007892:	bf08      	it	eq
 8007894:	4618      	moveq	r0, r3
 8007896:	30f0      	adds	r0, #240	; 0xf0
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	2000000c 	.word	0x2000000c
 80078a0:	20000070 	.word	0x20000070

080078a4 <malloc>:
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <malloc+0xc>)
 80078a6:	4601      	mov	r1, r0
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f000 bc71 	b.w	8008190 <_malloc_r>
 80078ae:	bf00      	nop
 80078b0:	2000000c 	.word	0x2000000c

080078b4 <__ascii_mbtowc>:
 80078b4:	b082      	sub	sp, #8
 80078b6:	b901      	cbnz	r1, 80078ba <__ascii_mbtowc+0x6>
 80078b8:	a901      	add	r1, sp, #4
 80078ba:	b142      	cbz	r2, 80078ce <__ascii_mbtowc+0x1a>
 80078bc:	b14b      	cbz	r3, 80078d2 <__ascii_mbtowc+0x1e>
 80078be:	7813      	ldrb	r3, [r2, #0]
 80078c0:	600b      	str	r3, [r1, #0]
 80078c2:	7812      	ldrb	r2, [r2, #0]
 80078c4:	1c10      	adds	r0, r2, #0
 80078c6:	bf18      	it	ne
 80078c8:	2001      	movne	r0, #1
 80078ca:	b002      	add	sp, #8
 80078cc:	4770      	bx	lr
 80078ce:	4610      	mov	r0, r2
 80078d0:	e7fb      	b.n	80078ca <__ascii_mbtowc+0x16>
 80078d2:	f06f 0001 	mvn.w	r0, #1
 80078d6:	e7f8      	b.n	80078ca <__ascii_mbtowc+0x16>

080078d8 <_Balloc>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078dc:	4604      	mov	r4, r0
 80078de:	460e      	mov	r6, r1
 80078e0:	b93d      	cbnz	r5, 80078f2 <_Balloc+0x1a>
 80078e2:	2010      	movs	r0, #16
 80078e4:	f7ff ffde 	bl	80078a4 <malloc>
 80078e8:	6260      	str	r0, [r4, #36]	; 0x24
 80078ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078ee:	6005      	str	r5, [r0, #0]
 80078f0:	60c5      	str	r5, [r0, #12]
 80078f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80078f4:	68eb      	ldr	r3, [r5, #12]
 80078f6:	b183      	cbz	r3, 800791a <_Balloc+0x42>
 80078f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007900:	b9b8      	cbnz	r0, 8007932 <_Balloc+0x5a>
 8007902:	2101      	movs	r1, #1
 8007904:	fa01 f506 	lsl.w	r5, r1, r6
 8007908:	1d6a      	adds	r2, r5, #5
 800790a:	0092      	lsls	r2, r2, #2
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fbe2 	bl	80080d6 <_calloc_r>
 8007912:	b160      	cbz	r0, 800792e <_Balloc+0x56>
 8007914:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007918:	e00e      	b.n	8007938 <_Balloc+0x60>
 800791a:	2221      	movs	r2, #33	; 0x21
 800791c:	2104      	movs	r1, #4
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fbd9 	bl	80080d6 <_calloc_r>
 8007924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007926:	60e8      	str	r0, [r5, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e4      	bne.n	80078f8 <_Balloc+0x20>
 800792e:	2000      	movs	r0, #0
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	6802      	ldr	r2, [r0, #0]
 8007934:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007938:	2300      	movs	r3, #0
 800793a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800793e:	e7f7      	b.n	8007930 <_Balloc+0x58>

08007940 <_Bfree>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007944:	4606      	mov	r6, r0
 8007946:	460d      	mov	r5, r1
 8007948:	b93c      	cbnz	r4, 800795a <_Bfree+0x1a>
 800794a:	2010      	movs	r0, #16
 800794c:	f7ff ffaa 	bl	80078a4 <malloc>
 8007950:	6270      	str	r0, [r6, #36]	; 0x24
 8007952:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007956:	6004      	str	r4, [r0, #0]
 8007958:	60c4      	str	r4, [r0, #12]
 800795a:	b13d      	cbz	r5, 800796c <_Bfree+0x2c>
 800795c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800795e:	686a      	ldr	r2, [r5, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007966:	6029      	str	r1, [r5, #0]
 8007968:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800796c:	bd70      	pop	{r4, r5, r6, pc}

0800796e <__multadd>:
 800796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	690d      	ldr	r5, [r1, #16]
 8007974:	461f      	mov	r7, r3
 8007976:	4606      	mov	r6, r0
 8007978:	460c      	mov	r4, r1
 800797a:	f101 0c14 	add.w	ip, r1, #20
 800797e:	2300      	movs	r3, #0
 8007980:	f8dc 0000 	ldr.w	r0, [ip]
 8007984:	b281      	uxth	r1, r0
 8007986:	fb02 7101 	mla	r1, r2, r1, r7
 800798a:	0c0f      	lsrs	r7, r1, #16
 800798c:	0c00      	lsrs	r0, r0, #16
 800798e:	fb02 7000 	mla	r0, r2, r0, r7
 8007992:	b289      	uxth	r1, r1
 8007994:	3301      	adds	r3, #1
 8007996:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800799a:	429d      	cmp	r5, r3
 800799c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079a0:	f84c 1b04 	str.w	r1, [ip], #4
 80079a4:	dcec      	bgt.n	8007980 <__multadd+0x12>
 80079a6:	b1d7      	cbz	r7, 80079de <__multadd+0x70>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	42ab      	cmp	r3, r5
 80079ac:	dc12      	bgt.n	80079d4 <__multadd+0x66>
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	4630      	mov	r0, r6
 80079b2:	3101      	adds	r1, #1
 80079b4:	f7ff ff90 	bl	80078d8 <_Balloc>
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	3202      	adds	r2, #2
 80079bc:	f104 010c 	add.w	r1, r4, #12
 80079c0:	4680      	mov	r8, r0
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	300c      	adds	r0, #12
 80079c6:	f7fd f8c5 	bl	8004b54 <memcpy>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ffb7 	bl	8007940 <_Bfree>
 80079d2:	4644      	mov	r4, r8
 80079d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079d8:	3501      	adds	r5, #1
 80079da:	615f      	str	r7, [r3, #20]
 80079dc:	6125      	str	r5, [r4, #16]
 80079de:	4620      	mov	r0, r4
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079e4 <__s2b>:
 80079e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e8:	460c      	mov	r4, r1
 80079ea:	4615      	mov	r5, r2
 80079ec:	461f      	mov	r7, r3
 80079ee:	2209      	movs	r2, #9
 80079f0:	3308      	adds	r3, #8
 80079f2:	4606      	mov	r6, r0
 80079f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079f8:	2100      	movs	r1, #0
 80079fa:	2201      	movs	r2, #1
 80079fc:	429a      	cmp	r2, r3
 80079fe:	db20      	blt.n	8007a42 <__s2b+0x5e>
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff ff69 	bl	80078d8 <_Balloc>
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	6143      	str	r3, [r0, #20]
 8007a0a:	2d09      	cmp	r5, #9
 8007a0c:	f04f 0301 	mov.w	r3, #1
 8007a10:	6103      	str	r3, [r0, #16]
 8007a12:	dd19      	ble.n	8007a48 <__s2b+0x64>
 8007a14:	f104 0809 	add.w	r8, r4, #9
 8007a18:	46c1      	mov	r9, r8
 8007a1a:	442c      	add	r4, r5
 8007a1c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007a20:	4601      	mov	r1, r0
 8007a22:	3b30      	subs	r3, #48	; 0x30
 8007a24:	220a      	movs	r2, #10
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7ff ffa1 	bl	800796e <__multadd>
 8007a2c:	45a1      	cmp	r9, r4
 8007a2e:	d1f5      	bne.n	8007a1c <__s2b+0x38>
 8007a30:	eb08 0405 	add.w	r4, r8, r5
 8007a34:	3c08      	subs	r4, #8
 8007a36:	1b2d      	subs	r5, r5, r4
 8007a38:	1963      	adds	r3, r4, r5
 8007a3a:	42bb      	cmp	r3, r7
 8007a3c:	db07      	blt.n	8007a4e <__s2b+0x6a>
 8007a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a42:	0052      	lsls	r2, r2, #1
 8007a44:	3101      	adds	r1, #1
 8007a46:	e7d9      	b.n	80079fc <__s2b+0x18>
 8007a48:	340a      	adds	r4, #10
 8007a4a:	2509      	movs	r5, #9
 8007a4c:	e7f3      	b.n	8007a36 <__s2b+0x52>
 8007a4e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a52:	4601      	mov	r1, r0
 8007a54:	3b30      	subs	r3, #48	; 0x30
 8007a56:	220a      	movs	r2, #10
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff ff88 	bl	800796e <__multadd>
 8007a5e:	e7eb      	b.n	8007a38 <__s2b+0x54>

08007a60 <__hi0bits>:
 8007a60:	0c02      	lsrs	r2, r0, #16
 8007a62:	0412      	lsls	r2, r2, #16
 8007a64:	4603      	mov	r3, r0
 8007a66:	b9b2      	cbnz	r2, 8007a96 <__hi0bits+0x36>
 8007a68:	0403      	lsls	r3, r0, #16
 8007a6a:	2010      	movs	r0, #16
 8007a6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a70:	bf04      	itt	eq
 8007a72:	021b      	lsleq	r3, r3, #8
 8007a74:	3008      	addeq	r0, #8
 8007a76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a7a:	bf04      	itt	eq
 8007a7c:	011b      	lsleq	r3, r3, #4
 8007a7e:	3004      	addeq	r0, #4
 8007a80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a84:	bf04      	itt	eq
 8007a86:	009b      	lsleq	r3, r3, #2
 8007a88:	3002      	addeq	r0, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	db06      	blt.n	8007a9c <__hi0bits+0x3c>
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	d503      	bpl.n	8007a9a <__hi0bits+0x3a>
 8007a92:	3001      	adds	r0, #1
 8007a94:	4770      	bx	lr
 8007a96:	2000      	movs	r0, #0
 8007a98:	e7e8      	b.n	8007a6c <__hi0bits+0xc>
 8007a9a:	2020      	movs	r0, #32
 8007a9c:	4770      	bx	lr

08007a9e <__lo0bits>:
 8007a9e:	6803      	ldr	r3, [r0, #0]
 8007aa0:	f013 0207 	ands.w	r2, r3, #7
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	d00b      	beq.n	8007ac0 <__lo0bits+0x22>
 8007aa8:	07da      	lsls	r2, r3, #31
 8007aaa:	d423      	bmi.n	8007af4 <__lo0bits+0x56>
 8007aac:	0798      	lsls	r0, r3, #30
 8007aae:	bf49      	itett	mi
 8007ab0:	085b      	lsrmi	r3, r3, #1
 8007ab2:	089b      	lsrpl	r3, r3, #2
 8007ab4:	2001      	movmi	r0, #1
 8007ab6:	600b      	strmi	r3, [r1, #0]
 8007ab8:	bf5c      	itt	pl
 8007aba:	600b      	strpl	r3, [r1, #0]
 8007abc:	2002      	movpl	r0, #2
 8007abe:	4770      	bx	lr
 8007ac0:	b298      	uxth	r0, r3
 8007ac2:	b9a8      	cbnz	r0, 8007af0 <__lo0bits+0x52>
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	2010      	movs	r0, #16
 8007ac8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007acc:	bf04      	itt	eq
 8007ace:	0a1b      	lsreq	r3, r3, #8
 8007ad0:	3008      	addeq	r0, #8
 8007ad2:	071a      	lsls	r2, r3, #28
 8007ad4:	bf04      	itt	eq
 8007ad6:	091b      	lsreq	r3, r3, #4
 8007ad8:	3004      	addeq	r0, #4
 8007ada:	079a      	lsls	r2, r3, #30
 8007adc:	bf04      	itt	eq
 8007ade:	089b      	lsreq	r3, r3, #2
 8007ae0:	3002      	addeq	r0, #2
 8007ae2:	07da      	lsls	r2, r3, #31
 8007ae4:	d402      	bmi.n	8007aec <__lo0bits+0x4e>
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	d006      	beq.n	8007af8 <__lo0bits+0x5a>
 8007aea:	3001      	adds	r0, #1
 8007aec:	600b      	str	r3, [r1, #0]
 8007aee:	4770      	bx	lr
 8007af0:	4610      	mov	r0, r2
 8007af2:	e7e9      	b.n	8007ac8 <__lo0bits+0x2a>
 8007af4:	2000      	movs	r0, #0
 8007af6:	4770      	bx	lr
 8007af8:	2020      	movs	r0, #32
 8007afa:	4770      	bx	lr

08007afc <__i2b>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460c      	mov	r4, r1
 8007b00:	2101      	movs	r1, #1
 8007b02:	f7ff fee9 	bl	80078d8 <_Balloc>
 8007b06:	2201      	movs	r2, #1
 8007b08:	6144      	str	r4, [r0, #20]
 8007b0a:	6102      	str	r2, [r0, #16]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__multiply>:
 8007b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	4614      	mov	r4, r2
 8007b14:	690a      	ldr	r2, [r1, #16]
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	bfb8      	it	lt
 8007b1c:	460b      	movlt	r3, r1
 8007b1e:	4688      	mov	r8, r1
 8007b20:	bfbc      	itt	lt
 8007b22:	46a0      	movlt	r8, r4
 8007b24:	461c      	movlt	r4, r3
 8007b26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b36:	eb07 0609 	add.w	r6, r7, r9
 8007b3a:	42b3      	cmp	r3, r6
 8007b3c:	bfb8      	it	lt
 8007b3e:	3101      	addlt	r1, #1
 8007b40:	f7ff feca 	bl	80078d8 <_Balloc>
 8007b44:	f100 0514 	add.w	r5, r0, #20
 8007b48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4573      	cmp	r3, lr
 8007b52:	d316      	bcc.n	8007b82 <__multiply+0x74>
 8007b54:	f104 0214 	add.w	r2, r4, #20
 8007b58:	f108 0114 	add.w	r1, r8, #20
 8007b5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007b60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	9201      	str	r2, [sp, #4]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d80c      	bhi.n	8007b88 <__multiply+0x7a>
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	dd03      	ble.n	8007b7a <__multiply+0x6c>
 8007b72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d05d      	beq.n	8007c36 <__multiply+0x128>
 8007b7a:	6106      	str	r6, [r0, #16]
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	f843 2b04 	str.w	r2, [r3], #4
 8007b86:	e7e3      	b.n	8007b50 <__multiply+0x42>
 8007b88:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b8c:	f1bb 0f00 	cmp.w	fp, #0
 8007b90:	d023      	beq.n	8007bda <__multiply+0xcc>
 8007b92:	4689      	mov	r9, r1
 8007b94:	46ac      	mov	ip, r5
 8007b96:	f04f 0800 	mov.w	r8, #0
 8007b9a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b9e:	f8dc a000 	ldr.w	sl, [ip]
 8007ba2:	b2a3      	uxth	r3, r4
 8007ba4:	fa1f fa8a 	uxth.w	sl, sl
 8007ba8:	fb0b a303 	mla	r3, fp, r3, sl
 8007bac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007bb0:	f8dc 4000 	ldr.w	r4, [ip]
 8007bb4:	4443      	add	r3, r8
 8007bb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007bba:	fb0b 840a 	mla	r4, fp, sl, r8
 8007bbe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007bc2:	46e2      	mov	sl, ip
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007bca:	454f      	cmp	r7, r9
 8007bcc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007bd0:	f84a 3b04 	str.w	r3, [sl], #4
 8007bd4:	d82b      	bhi.n	8007c2e <__multiply+0x120>
 8007bd6:	f8cc 8004 	str.w	r8, [ip, #4]
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007be0:	3204      	adds	r2, #4
 8007be2:	f1ba 0f00 	cmp.w	sl, #0
 8007be6:	d020      	beq.n	8007c2a <__multiply+0x11c>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	4689      	mov	r9, r1
 8007bec:	46a8      	mov	r8, r5
 8007bee:	f04f 0b00 	mov.w	fp, #0
 8007bf2:	f8b9 c000 	ldrh.w	ip, [r9]
 8007bf6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007bfa:	fb0a 440c 	mla	r4, sl, ip, r4
 8007bfe:	445c      	add	r4, fp
 8007c00:	46c4      	mov	ip, r8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c08:	f84c 3b04 	str.w	r3, [ip], #4
 8007c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c10:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	fb0a b303 	mla	r3, sl, r3, fp
 8007c1a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c1e:	454f      	cmp	r7, r9
 8007c20:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007c24:	d805      	bhi.n	8007c32 <__multiply+0x124>
 8007c26:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c2a:	3504      	adds	r5, #4
 8007c2c:	e79b      	b.n	8007b66 <__multiply+0x58>
 8007c2e:	46d4      	mov	ip, sl
 8007c30:	e7b3      	b.n	8007b9a <__multiply+0x8c>
 8007c32:	46e0      	mov	r8, ip
 8007c34:	e7dd      	b.n	8007bf2 <__multiply+0xe4>
 8007c36:	3e01      	subs	r6, #1
 8007c38:	e799      	b.n	8007b6e <__multiply+0x60>
	...

08007c3c <__pow5mult>:
 8007c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	4615      	mov	r5, r2
 8007c42:	f012 0203 	ands.w	r2, r2, #3
 8007c46:	4606      	mov	r6, r0
 8007c48:	460f      	mov	r7, r1
 8007c4a:	d007      	beq.n	8007c5c <__pow5mult+0x20>
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	4c21      	ldr	r4, [pc, #132]	; (8007cd4 <__pow5mult+0x98>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c56:	f7ff fe8a 	bl	800796e <__multadd>
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	10ad      	asrs	r5, r5, #2
 8007c5e:	d035      	beq.n	8007ccc <__pow5mult+0x90>
 8007c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c62:	b93c      	cbnz	r4, 8007c74 <__pow5mult+0x38>
 8007c64:	2010      	movs	r0, #16
 8007c66:	f7ff fe1d 	bl	80078a4 <malloc>
 8007c6a:	6270      	str	r0, [r6, #36]	; 0x24
 8007c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c70:	6004      	str	r4, [r0, #0]
 8007c72:	60c4      	str	r4, [r0, #12]
 8007c74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c7c:	b94c      	cbnz	r4, 8007c92 <__pow5mult+0x56>
 8007c7e:	f240 2171 	movw	r1, #625	; 0x271
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ff3a 	bl	8007afc <__i2b>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c8e:	4604      	mov	r4, r0
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	07eb      	lsls	r3, r5, #31
 8007c98:	d50a      	bpl.n	8007cb0 <__pow5mult+0x74>
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ff35 	bl	8007b0e <__multiply>
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4681      	mov	r9, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff fe49 	bl	8007940 <_Bfree>
 8007cae:	464f      	mov	r7, r9
 8007cb0:	106d      	asrs	r5, r5, #1
 8007cb2:	d00b      	beq.n	8007ccc <__pow5mult+0x90>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	b938      	cbnz	r0, 8007cc8 <__pow5mult+0x8c>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ff26 	bl	8007b0e <__multiply>
 8007cc2:	6020      	str	r0, [r4, #0]
 8007cc4:	f8c0 8000 	str.w	r8, [r0]
 8007cc8:	4604      	mov	r4, r0
 8007cca:	e7e4      	b.n	8007c96 <__pow5mult+0x5a>
 8007ccc:	4638      	mov	r0, r7
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	bf00      	nop
 8007cd4:	080087d8 	.word	0x080087d8

08007cd8 <__lshift>:
 8007cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	460c      	mov	r4, r1
 8007cde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6849      	ldr	r1, [r1, #4]
 8007ce6:	eb0a 0903 	add.w	r9, sl, r3
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	4607      	mov	r7, r0
 8007cee:	4616      	mov	r6, r2
 8007cf0:	f109 0501 	add.w	r5, r9, #1
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	db32      	blt.n	8007d5e <__lshift+0x86>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff fded 	bl	80078d8 <_Balloc>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4680      	mov	r8, r0
 8007d02:	f100 0114 	add.w	r1, r0, #20
 8007d06:	461a      	mov	r2, r3
 8007d08:	4553      	cmp	r3, sl
 8007d0a:	db2b      	blt.n	8007d64 <__lshift+0x8c>
 8007d0c:	6920      	ldr	r0, [r4, #16]
 8007d0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d12:	f104 0314 	add.w	r3, r4, #20
 8007d16:	f016 021f 	ands.w	r2, r6, #31
 8007d1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d22:	d025      	beq.n	8007d70 <__lshift+0x98>
 8007d24:	f1c2 0e20 	rsb	lr, r2, #32
 8007d28:	2000      	movs	r0, #0
 8007d2a:	681e      	ldr	r6, [r3, #0]
 8007d2c:	468a      	mov	sl, r1
 8007d2e:	4096      	lsls	r6, r2
 8007d30:	4330      	orrs	r0, r6
 8007d32:	f84a 0b04 	str.w	r0, [sl], #4
 8007d36:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d3a:	459c      	cmp	ip, r3
 8007d3c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007d40:	d814      	bhi.n	8007d6c <__lshift+0x94>
 8007d42:	6048      	str	r0, [r1, #4]
 8007d44:	b108      	cbz	r0, 8007d4a <__lshift+0x72>
 8007d46:	f109 0502 	add.w	r5, r9, #2
 8007d4a:	3d01      	subs	r5, #1
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d52:	4621      	mov	r1, r4
 8007d54:	f7ff fdf4 	bl	8007940 <_Bfree>
 8007d58:	4640      	mov	r0, r8
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	3101      	adds	r1, #1
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	e7c7      	b.n	8007cf4 <__lshift+0x1c>
 8007d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	e7cd      	b.n	8007d08 <__lshift+0x30>
 8007d6c:	4651      	mov	r1, sl
 8007d6e:	e7dc      	b.n	8007d2a <__lshift+0x52>
 8007d70:	3904      	subs	r1, #4
 8007d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d7a:	459c      	cmp	ip, r3
 8007d7c:	d8f9      	bhi.n	8007d72 <__lshift+0x9a>
 8007d7e:	e7e4      	b.n	8007d4a <__lshift+0x72>

08007d80 <__mcmp>:
 8007d80:	6903      	ldr	r3, [r0, #16]
 8007d82:	690a      	ldr	r2, [r1, #16]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	b530      	push	{r4, r5, lr}
 8007d88:	d10c      	bne.n	8007da4 <__mcmp+0x24>
 8007d8a:	0092      	lsls	r2, r2, #2
 8007d8c:	3014      	adds	r0, #20
 8007d8e:	3114      	adds	r1, #20
 8007d90:	1884      	adds	r4, r0, r2
 8007d92:	4411      	add	r1, r2
 8007d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d9c:	4295      	cmp	r5, r2
 8007d9e:	d003      	beq.n	8007da8 <__mcmp+0x28>
 8007da0:	d305      	bcc.n	8007dae <__mcmp+0x2e>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	bd30      	pop	{r4, r5, pc}
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d3f3      	bcc.n	8007d94 <__mcmp+0x14>
 8007dac:	e7fa      	b.n	8007da4 <__mcmp+0x24>
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007db2:	e7f7      	b.n	8007da4 <__mcmp+0x24>

08007db4 <__mdiff>:
 8007db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db8:	460d      	mov	r5, r1
 8007dba:	4607      	mov	r7, r0
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	f7ff ffdd 	bl	8007d80 <__mcmp>
 8007dc6:	1e06      	subs	r6, r0, #0
 8007dc8:	d108      	bne.n	8007ddc <__mdiff+0x28>
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff fd83 	bl	80078d8 <_Balloc>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	bfa4      	itt	ge
 8007dde:	4623      	movge	r3, r4
 8007de0:	462c      	movge	r4, r5
 8007de2:	4638      	mov	r0, r7
 8007de4:	6861      	ldr	r1, [r4, #4]
 8007de6:	bfa6      	itte	ge
 8007de8:	461d      	movge	r5, r3
 8007dea:	2600      	movge	r6, #0
 8007dec:	2601      	movlt	r6, #1
 8007dee:	f7ff fd73 	bl	80078d8 <_Balloc>
 8007df2:	692b      	ldr	r3, [r5, #16]
 8007df4:	60c6      	str	r6, [r0, #12]
 8007df6:	6926      	ldr	r6, [r4, #16]
 8007df8:	f105 0914 	add.w	r9, r5, #20
 8007dfc:	f104 0214 	add.w	r2, r4, #20
 8007e00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e08:	f100 0514 	add.w	r5, r0, #20
 8007e0c:	f04f 0e00 	mov.w	lr, #0
 8007e10:	f852 ab04 	ldr.w	sl, [r2], #4
 8007e14:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e18:	fa1e f18a 	uxtah	r1, lr, sl
 8007e1c:	b2a3      	uxth	r3, r4
 8007e1e:	1ac9      	subs	r1, r1, r3
 8007e20:	0c23      	lsrs	r3, r4, #16
 8007e22:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007e26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e2a:	b289      	uxth	r1, r1
 8007e2c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007e30:	45c8      	cmp	r8, r9
 8007e32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e36:	4694      	mov	ip, r2
 8007e38:	f845 3b04 	str.w	r3, [r5], #4
 8007e3c:	d8e8      	bhi.n	8007e10 <__mdiff+0x5c>
 8007e3e:	45bc      	cmp	ip, r7
 8007e40:	d304      	bcc.n	8007e4c <__mdiff+0x98>
 8007e42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007e46:	b183      	cbz	r3, 8007e6a <__mdiff+0xb6>
 8007e48:	6106      	str	r6, [r0, #16]
 8007e4a:	e7c5      	b.n	8007dd8 <__mdiff+0x24>
 8007e4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e50:	fa1e f381 	uxtah	r3, lr, r1
 8007e54:	141a      	asrs	r2, r3, #16
 8007e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007e64:	f845 3b04 	str.w	r3, [r5], #4
 8007e68:	e7e9      	b.n	8007e3e <__mdiff+0x8a>
 8007e6a:	3e01      	subs	r6, #1
 8007e6c:	e7e9      	b.n	8007e42 <__mdiff+0x8e>
	...

08007e70 <__ulp>:
 8007e70:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <__ulp+0x4c>)
 8007e72:	ee10 2a90 	vmov	r2, s1
 8007e76:	401a      	ands	r2, r3
 8007e78:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd04      	ble.n	8007e8a <__ulp+0x1a>
 8007e80:	2000      	movs	r0, #0
 8007e82:	4619      	mov	r1, r3
 8007e84:	ec41 0b10 	vmov	d0, r0, r1
 8007e88:	4770      	bx	lr
 8007e8a:	425b      	negs	r3, r3
 8007e8c:	151b      	asrs	r3, r3, #20
 8007e8e:	2b13      	cmp	r3, #19
 8007e90:	f04f 0000 	mov.w	r0, #0
 8007e94:	f04f 0100 	mov.w	r1, #0
 8007e98:	dc04      	bgt.n	8007ea4 <__ulp+0x34>
 8007e9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007e9e:	fa42 f103 	asr.w	r1, r2, r3
 8007ea2:	e7ef      	b.n	8007e84 <__ulp+0x14>
 8007ea4:	3b14      	subs	r3, #20
 8007ea6:	2b1e      	cmp	r3, #30
 8007ea8:	f04f 0201 	mov.w	r2, #1
 8007eac:	bfda      	itte	le
 8007eae:	f1c3 031f 	rsble	r3, r3, #31
 8007eb2:	fa02 f303 	lslle.w	r3, r2, r3
 8007eb6:	4613      	movgt	r3, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	e7e3      	b.n	8007e84 <__ulp+0x14>
 8007ebc:	7ff00000 	.word	0x7ff00000

08007ec0 <__b2d>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	6905      	ldr	r5, [r0, #16]
 8007ec4:	f100 0714 	add.w	r7, r0, #20
 8007ec8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007ecc:	1f2e      	subs	r6, r5, #4
 8007ece:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fdc4 	bl	8007a60 <__hi0bits>
 8007ed8:	f1c0 0320 	rsb	r3, r0, #32
 8007edc:	280a      	cmp	r0, #10
 8007ede:	600b      	str	r3, [r1, #0]
 8007ee0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007f58 <__b2d+0x98>
 8007ee4:	dc14      	bgt.n	8007f10 <__b2d+0x50>
 8007ee6:	f1c0 0e0b 	rsb	lr, r0, #11
 8007eea:	fa24 f10e 	lsr.w	r1, r4, lr
 8007eee:	42b7      	cmp	r7, r6
 8007ef0:	ea41 030c 	orr.w	r3, r1, ip
 8007ef4:	bf34      	ite	cc
 8007ef6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007efa:	2100      	movcs	r1, #0
 8007efc:	3015      	adds	r0, #21
 8007efe:	fa04 f000 	lsl.w	r0, r4, r0
 8007f02:	fa21 f10e 	lsr.w	r1, r1, lr
 8007f06:	ea40 0201 	orr.w	r2, r0, r1
 8007f0a:	ec43 2b10 	vmov	d0, r2, r3
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f10:	42b7      	cmp	r7, r6
 8007f12:	bf3a      	itte	cc
 8007f14:	f1a5 0608 	subcc.w	r6, r5, #8
 8007f18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f1c:	2100      	movcs	r1, #0
 8007f1e:	380b      	subs	r0, #11
 8007f20:	d015      	beq.n	8007f4e <__b2d+0x8e>
 8007f22:	4084      	lsls	r4, r0
 8007f24:	f1c0 0520 	rsb	r5, r0, #32
 8007f28:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007f2c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007f30:	42be      	cmp	r6, r7
 8007f32:	fa21 fc05 	lsr.w	ip, r1, r5
 8007f36:	ea44 030c 	orr.w	r3, r4, ip
 8007f3a:	bf8c      	ite	hi
 8007f3c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007f40:	2400      	movls	r4, #0
 8007f42:	fa01 f000 	lsl.w	r0, r1, r0
 8007f46:	40ec      	lsrs	r4, r5
 8007f48:	ea40 0204 	orr.w	r2, r0, r4
 8007f4c:	e7dd      	b.n	8007f0a <__b2d+0x4a>
 8007f4e:	ea44 030c 	orr.w	r3, r4, ip
 8007f52:	460a      	mov	r2, r1
 8007f54:	e7d9      	b.n	8007f0a <__b2d+0x4a>
 8007f56:	bf00      	nop
 8007f58:	3ff00000 	.word	0x3ff00000

08007f5c <__d2b>:
 8007f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f60:	460e      	mov	r6, r1
 8007f62:	2101      	movs	r1, #1
 8007f64:	ec59 8b10 	vmov	r8, r9, d0
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f7ff fcb5 	bl	80078d8 <_Balloc>
 8007f6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f72:	4607      	mov	r7, r0
 8007f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f78:	bb34      	cbnz	r4, 8007fc8 <__d2b+0x6c>
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f80:	d027      	beq.n	8007fd2 <__d2b+0x76>
 8007f82:	a802      	add	r0, sp, #8
 8007f84:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007f88:	f7ff fd89 	bl	8007a9e <__lo0bits>
 8007f8c:	9900      	ldr	r1, [sp, #0]
 8007f8e:	b1f0      	cbz	r0, 8007fce <__d2b+0x72>
 8007f90:	9a01      	ldr	r2, [sp, #4]
 8007f92:	f1c0 0320 	rsb	r3, r0, #32
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	40c2      	lsrs	r2, r0
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	9201      	str	r2, [sp, #4]
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bf14      	ite	ne
 8007faa:	2102      	movne	r1, #2
 8007fac:	2101      	moveq	r1, #1
 8007fae:	6139      	str	r1, [r7, #16]
 8007fb0:	b1c4      	cbz	r4, 8007fe4 <__d2b+0x88>
 8007fb2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007fb6:	4404      	add	r4, r0
 8007fb8:	6034      	str	r4, [r6, #0]
 8007fba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fbe:	6028      	str	r0, [r5, #0]
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	b003      	add	sp, #12
 8007fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fcc:	e7d5      	b.n	8007f7a <__d2b+0x1e>
 8007fce:	6179      	str	r1, [r7, #20]
 8007fd0:	e7e7      	b.n	8007fa2 <__d2b+0x46>
 8007fd2:	a801      	add	r0, sp, #4
 8007fd4:	f7ff fd63 	bl	8007a9e <__lo0bits>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6139      	str	r1, [r7, #16]
 8007fe0:	3020      	adds	r0, #32
 8007fe2:	e7e5      	b.n	8007fb0 <__d2b+0x54>
 8007fe4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fec:	6030      	str	r0, [r6, #0]
 8007fee:	6918      	ldr	r0, [r3, #16]
 8007ff0:	f7ff fd36 	bl	8007a60 <__hi0bits>
 8007ff4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ff8:	e7e1      	b.n	8007fbe <__d2b+0x62>

08007ffa <__ratio>:
 8007ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffe:	4688      	mov	r8, r1
 8008000:	4669      	mov	r1, sp
 8008002:	4681      	mov	r9, r0
 8008004:	f7ff ff5c 	bl	8007ec0 <__b2d>
 8008008:	a901      	add	r1, sp, #4
 800800a:	4640      	mov	r0, r8
 800800c:	ec57 6b10 	vmov	r6, r7, d0
 8008010:	f7ff ff56 	bl	8007ec0 <__b2d>
 8008014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008018:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800801c:	eba3 0c02 	sub.w	ip, r3, r2
 8008020:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800802a:	ec5b ab10 	vmov	sl, fp, d0
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfce      	itee	gt
 8008032:	463a      	movgt	r2, r7
 8008034:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008038:	465a      	movle	r2, fp
 800803a:	4659      	mov	r1, fp
 800803c:	463d      	mov	r5, r7
 800803e:	bfd4      	ite	le
 8008040:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008044:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008048:	4630      	mov	r0, r6
 800804a:	ee10 2a10 	vmov	r2, s0
 800804e:	460b      	mov	r3, r1
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fc1b 	bl	800088c <__aeabi_ddiv>
 8008056:	ec41 0b10 	vmov	d0, r0, r1
 800805a:	b003      	add	sp, #12
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008060 <__copybits>:
 8008060:	3901      	subs	r1, #1
 8008062:	b510      	push	{r4, lr}
 8008064:	1149      	asrs	r1, r1, #5
 8008066:	6914      	ldr	r4, [r2, #16]
 8008068:	3101      	adds	r1, #1
 800806a:	f102 0314 	add.w	r3, r2, #20
 800806e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008076:	42a3      	cmp	r3, r4
 8008078:	4602      	mov	r2, r0
 800807a:	d303      	bcc.n	8008084 <__copybits+0x24>
 800807c:	2300      	movs	r3, #0
 800807e:	428a      	cmp	r2, r1
 8008080:	d305      	bcc.n	800808e <__copybits+0x2e>
 8008082:	bd10      	pop	{r4, pc}
 8008084:	f853 2b04 	ldr.w	r2, [r3], #4
 8008088:	f840 2b04 	str.w	r2, [r0], #4
 800808c:	e7f3      	b.n	8008076 <__copybits+0x16>
 800808e:	f842 3b04 	str.w	r3, [r2], #4
 8008092:	e7f4      	b.n	800807e <__copybits+0x1e>

08008094 <__any_on>:
 8008094:	f100 0214 	add.w	r2, r0, #20
 8008098:	6900      	ldr	r0, [r0, #16]
 800809a:	114b      	asrs	r3, r1, #5
 800809c:	4298      	cmp	r0, r3
 800809e:	b510      	push	{r4, lr}
 80080a0:	db11      	blt.n	80080c6 <__any_on+0x32>
 80080a2:	dd0a      	ble.n	80080ba <__any_on+0x26>
 80080a4:	f011 011f 	ands.w	r1, r1, #31
 80080a8:	d007      	beq.n	80080ba <__any_on+0x26>
 80080aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080ae:	fa24 f001 	lsr.w	r0, r4, r1
 80080b2:	fa00 f101 	lsl.w	r1, r0, r1
 80080b6:	428c      	cmp	r4, r1
 80080b8:	d10b      	bne.n	80080d2 <__any_on+0x3e>
 80080ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080be:	4293      	cmp	r3, r2
 80080c0:	d803      	bhi.n	80080ca <__any_on+0x36>
 80080c2:	2000      	movs	r0, #0
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	4603      	mov	r3, r0
 80080c8:	e7f7      	b.n	80080ba <__any_on+0x26>
 80080ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d0f5      	beq.n	80080be <__any_on+0x2a>
 80080d2:	2001      	movs	r0, #1
 80080d4:	e7f6      	b.n	80080c4 <__any_on+0x30>

080080d6 <_calloc_r>:
 80080d6:	b538      	push	{r3, r4, r5, lr}
 80080d8:	fb02 f401 	mul.w	r4, r2, r1
 80080dc:	4621      	mov	r1, r4
 80080de:	f000 f857 	bl	8008190 <_malloc_r>
 80080e2:	4605      	mov	r5, r0
 80080e4:	b118      	cbz	r0, 80080ee <_calloc_r+0x18>
 80080e6:	4622      	mov	r2, r4
 80080e8:	2100      	movs	r1, #0
 80080ea:	f7fc fd3e 	bl	8004b6a <memset>
 80080ee:	4628      	mov	r0, r5
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080080f4 <_free_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4605      	mov	r5, r0
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d045      	beq.n	8008188 <_free_r+0x94>
 80080fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008100:	1f0c      	subs	r4, r1, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	bfb8      	it	lt
 8008106:	18e4      	addlt	r4, r4, r3
 8008108:	f000 fa36 	bl	8008578 <__malloc_lock>
 800810c:	4a1f      	ldr	r2, [pc, #124]	; (800818c <_free_r+0x98>)
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	4610      	mov	r0, r2
 8008112:	b933      	cbnz	r3, 8008122 <_free_r+0x2e>
 8008114:	6063      	str	r3, [r4, #4]
 8008116:	6014      	str	r4, [r2, #0]
 8008118:	4628      	mov	r0, r5
 800811a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811e:	f000 ba2c 	b.w	800857a <__malloc_unlock>
 8008122:	42a3      	cmp	r3, r4
 8008124:	d90c      	bls.n	8008140 <_free_r+0x4c>
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	1862      	adds	r2, r4, r1
 800812a:	4293      	cmp	r3, r2
 800812c:	bf04      	itt	eq
 800812e:	681a      	ldreq	r2, [r3, #0]
 8008130:	685b      	ldreq	r3, [r3, #4]
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	bf04      	itt	eq
 8008136:	1852      	addeq	r2, r2, r1
 8008138:	6022      	streq	r2, [r4, #0]
 800813a:	6004      	str	r4, [r0, #0]
 800813c:	e7ec      	b.n	8008118 <_free_r+0x24>
 800813e:	4613      	mov	r3, r2
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	b10a      	cbz	r2, 8008148 <_free_r+0x54>
 8008144:	42a2      	cmp	r2, r4
 8008146:	d9fa      	bls.n	800813e <_free_r+0x4a>
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	1858      	adds	r0, r3, r1
 800814c:	42a0      	cmp	r0, r4
 800814e:	d10b      	bne.n	8008168 <_free_r+0x74>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	4401      	add	r1, r0
 8008154:	1858      	adds	r0, r3, r1
 8008156:	4282      	cmp	r2, r0
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	d1dd      	bne.n	8008118 <_free_r+0x24>
 800815c:	6810      	ldr	r0, [r2, #0]
 800815e:	6852      	ldr	r2, [r2, #4]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	4401      	add	r1, r0
 8008164:	6019      	str	r1, [r3, #0]
 8008166:	e7d7      	b.n	8008118 <_free_r+0x24>
 8008168:	d902      	bls.n	8008170 <_free_r+0x7c>
 800816a:	230c      	movs	r3, #12
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	e7d3      	b.n	8008118 <_free_r+0x24>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	1821      	adds	r1, r4, r0
 8008174:	428a      	cmp	r2, r1
 8008176:	bf04      	itt	eq
 8008178:	6811      	ldreq	r1, [r2, #0]
 800817a:	6852      	ldreq	r2, [r2, #4]
 800817c:	6062      	str	r2, [r4, #4]
 800817e:	bf04      	itt	eq
 8008180:	1809      	addeq	r1, r1, r0
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	605c      	str	r4, [r3, #4]
 8008186:	e7c7      	b.n	8008118 <_free_r+0x24>
 8008188:	bd38      	pop	{r3, r4, r5, pc}
 800818a:	bf00      	nop
 800818c:	20000218 	.word	0x20000218

08008190 <_malloc_r>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	1ccd      	adds	r5, r1, #3
 8008194:	f025 0503 	bic.w	r5, r5, #3
 8008198:	3508      	adds	r5, #8
 800819a:	2d0c      	cmp	r5, #12
 800819c:	bf38      	it	cc
 800819e:	250c      	movcc	r5, #12
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	4606      	mov	r6, r0
 80081a4:	db01      	blt.n	80081aa <_malloc_r+0x1a>
 80081a6:	42a9      	cmp	r1, r5
 80081a8:	d903      	bls.n	80081b2 <_malloc_r+0x22>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	2000      	movs	r0, #0
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	f000 f9e1 	bl	8008578 <__malloc_lock>
 80081b6:	4a21      	ldr	r2, [pc, #132]	; (800823c <_malloc_r+0xac>)
 80081b8:	6814      	ldr	r4, [r2, #0]
 80081ba:	4621      	mov	r1, r4
 80081bc:	b991      	cbnz	r1, 80081e4 <_malloc_r+0x54>
 80081be:	4c20      	ldr	r4, [pc, #128]	; (8008240 <_malloc_r+0xb0>)
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	b91b      	cbnz	r3, 80081cc <_malloc_r+0x3c>
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f98f 	bl	80084e8 <_sbrk_r>
 80081ca:	6020      	str	r0, [r4, #0]
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f98a 	bl	80084e8 <_sbrk_r>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d124      	bne.n	8008222 <_malloc_r+0x92>
 80081d8:	230c      	movs	r3, #12
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f9cc 	bl	800857a <__malloc_unlock>
 80081e2:	e7e4      	b.n	80081ae <_malloc_r+0x1e>
 80081e4:	680b      	ldr	r3, [r1, #0]
 80081e6:	1b5b      	subs	r3, r3, r5
 80081e8:	d418      	bmi.n	800821c <_malloc_r+0x8c>
 80081ea:	2b0b      	cmp	r3, #11
 80081ec:	d90f      	bls.n	800820e <_malloc_r+0x7e>
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	50cd      	str	r5, [r1, r3]
 80081f2:	18cc      	adds	r4, r1, r3
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 f9c0 	bl	800857a <__malloc_unlock>
 80081fa:	f104 000b 	add.w	r0, r4, #11
 80081fe:	1d23      	adds	r3, r4, #4
 8008200:	f020 0007 	bic.w	r0, r0, #7
 8008204:	1ac3      	subs	r3, r0, r3
 8008206:	d0d3      	beq.n	80081b0 <_malloc_r+0x20>
 8008208:	425a      	negs	r2, r3
 800820a:	50e2      	str	r2, [r4, r3]
 800820c:	e7d0      	b.n	80081b0 <_malloc_r+0x20>
 800820e:	428c      	cmp	r4, r1
 8008210:	684b      	ldr	r3, [r1, #4]
 8008212:	bf16      	itet	ne
 8008214:	6063      	strne	r3, [r4, #4]
 8008216:	6013      	streq	r3, [r2, #0]
 8008218:	460c      	movne	r4, r1
 800821a:	e7eb      	b.n	80081f4 <_malloc_r+0x64>
 800821c:	460c      	mov	r4, r1
 800821e:	6849      	ldr	r1, [r1, #4]
 8008220:	e7cc      	b.n	80081bc <_malloc_r+0x2c>
 8008222:	1cc4      	adds	r4, r0, #3
 8008224:	f024 0403 	bic.w	r4, r4, #3
 8008228:	42a0      	cmp	r0, r4
 800822a:	d005      	beq.n	8008238 <_malloc_r+0xa8>
 800822c:	1a21      	subs	r1, r4, r0
 800822e:	4630      	mov	r0, r6
 8008230:	f000 f95a 	bl	80084e8 <_sbrk_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d0cf      	beq.n	80081d8 <_malloc_r+0x48>
 8008238:	6025      	str	r5, [r4, #0]
 800823a:	e7db      	b.n	80081f4 <_malloc_r+0x64>
 800823c:	20000218 	.word	0x20000218
 8008240:	2000021c 	.word	0x2000021c

08008244 <__ssputs_r>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	688e      	ldr	r6, [r1, #8]
 800824a:	429e      	cmp	r6, r3
 800824c:	4682      	mov	sl, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4690      	mov	r8, r2
 8008252:	4699      	mov	r9, r3
 8008254:	d837      	bhi.n	80082c6 <__ssputs_r+0x82>
 8008256:	898a      	ldrh	r2, [r1, #12]
 8008258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800825c:	d031      	beq.n	80082c2 <__ssputs_r+0x7e>
 800825e:	6825      	ldr	r5, [r4, #0]
 8008260:	6909      	ldr	r1, [r1, #16]
 8008262:	1a6f      	subs	r7, r5, r1
 8008264:	6965      	ldr	r5, [r4, #20]
 8008266:	2302      	movs	r3, #2
 8008268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800826c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008270:	f109 0301 	add.w	r3, r9, #1
 8008274:	443b      	add	r3, r7
 8008276:	429d      	cmp	r5, r3
 8008278:	bf38      	it	cc
 800827a:	461d      	movcc	r5, r3
 800827c:	0553      	lsls	r3, r2, #21
 800827e:	d530      	bpl.n	80082e2 <__ssputs_r+0x9e>
 8008280:	4629      	mov	r1, r5
 8008282:	f7ff ff85 	bl	8008190 <_malloc_r>
 8008286:	4606      	mov	r6, r0
 8008288:	b950      	cbnz	r0, 80082a0 <__ssputs_r+0x5c>
 800828a:	230c      	movs	r3, #12
 800828c:	f8ca 3000 	str.w	r3, [sl]
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a0:	463a      	mov	r2, r7
 80082a2:	6921      	ldr	r1, [r4, #16]
 80082a4:	f7fc fc56 	bl	8004b54 <memcpy>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	6126      	str	r6, [r4, #16]
 80082b6:	6165      	str	r5, [r4, #20]
 80082b8:	443e      	add	r6, r7
 80082ba:	1bed      	subs	r5, r5, r7
 80082bc:	6026      	str	r6, [r4, #0]
 80082be:	60a5      	str	r5, [r4, #8]
 80082c0:	464e      	mov	r6, r9
 80082c2:	454e      	cmp	r6, r9
 80082c4:	d900      	bls.n	80082c8 <__ssputs_r+0x84>
 80082c6:	464e      	mov	r6, r9
 80082c8:	4632      	mov	r2, r6
 80082ca:	4641      	mov	r1, r8
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	f000 f93a 	bl	8008546 <memmove>
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	1b9b      	subs	r3, r3, r6
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	441e      	add	r6, r3
 80082dc:	6026      	str	r6, [r4, #0]
 80082de:	2000      	movs	r0, #0
 80082e0:	e7dc      	b.n	800829c <__ssputs_r+0x58>
 80082e2:	462a      	mov	r2, r5
 80082e4:	f000 f94a 	bl	800857c <_realloc_r>
 80082e8:	4606      	mov	r6, r0
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d1e2      	bne.n	80082b4 <__ssputs_r+0x70>
 80082ee:	6921      	ldr	r1, [r4, #16]
 80082f0:	4650      	mov	r0, sl
 80082f2:	f7ff feff 	bl	80080f4 <_free_r>
 80082f6:	e7c8      	b.n	800828a <__ssputs_r+0x46>

080082f8 <_svfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	461d      	mov	r5, r3
 80082fe:	898b      	ldrh	r3, [r1, #12]
 8008300:	061f      	lsls	r7, r3, #24
 8008302:	b09d      	sub	sp, #116	; 0x74
 8008304:	4680      	mov	r8, r0
 8008306:	460c      	mov	r4, r1
 8008308:	4616      	mov	r6, r2
 800830a:	d50f      	bpl.n	800832c <_svfiprintf_r+0x34>
 800830c:	690b      	ldr	r3, [r1, #16]
 800830e:	b96b      	cbnz	r3, 800832c <_svfiprintf_r+0x34>
 8008310:	2140      	movs	r1, #64	; 0x40
 8008312:	f7ff ff3d 	bl	8008190 <_malloc_r>
 8008316:	6020      	str	r0, [r4, #0]
 8008318:	6120      	str	r0, [r4, #16]
 800831a:	b928      	cbnz	r0, 8008328 <_svfiprintf_r+0x30>
 800831c:	230c      	movs	r3, #12
 800831e:	f8c8 3000 	str.w	r3, [r8]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008326:	e0c8      	b.n	80084ba <_svfiprintf_r+0x1c2>
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	6163      	str	r3, [r4, #20]
 800832c:	2300      	movs	r3, #0
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	2320      	movs	r3, #32
 8008332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008336:	2330      	movs	r3, #48	; 0x30
 8008338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833c:	9503      	str	r5, [sp, #12]
 800833e:	f04f 0b01 	mov.w	fp, #1
 8008342:	4637      	mov	r7, r6
 8008344:	463d      	mov	r5, r7
 8008346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800834a:	b10b      	cbz	r3, 8008350 <_svfiprintf_r+0x58>
 800834c:	2b25      	cmp	r3, #37	; 0x25
 800834e:	d13e      	bne.n	80083ce <_svfiprintf_r+0xd6>
 8008350:	ebb7 0a06 	subs.w	sl, r7, r6
 8008354:	d00b      	beq.n	800836e <_svfiprintf_r+0x76>
 8008356:	4653      	mov	r3, sl
 8008358:	4632      	mov	r2, r6
 800835a:	4621      	mov	r1, r4
 800835c:	4640      	mov	r0, r8
 800835e:	f7ff ff71 	bl	8008244 <__ssputs_r>
 8008362:	3001      	adds	r0, #1
 8008364:	f000 80a4 	beq.w	80084b0 <_svfiprintf_r+0x1b8>
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	4453      	add	r3, sl
 800836c:	9309      	str	r3, [sp, #36]	; 0x24
 800836e:	783b      	ldrb	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 809d 	beq.w	80084b0 <_svfiprintf_r+0x1b8>
 8008376:	2300      	movs	r3, #0
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008388:	931a      	str	r3, [sp, #104]	; 0x68
 800838a:	462f      	mov	r7, r5
 800838c:	2205      	movs	r2, #5
 800838e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008392:	4850      	ldr	r0, [pc, #320]	; (80084d4 <_svfiprintf_r+0x1dc>)
 8008394:	f7f7 ff44 	bl	8000220 <memchr>
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	b9d0      	cbnz	r0, 80083d2 <_svfiprintf_r+0xda>
 800839c:	06d9      	lsls	r1, r3, #27
 800839e:	bf44      	itt	mi
 80083a0:	2220      	movmi	r2, #32
 80083a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083a6:	071a      	lsls	r2, r3, #28
 80083a8:	bf44      	itt	mi
 80083aa:	222b      	movmi	r2, #43	; 0x2b
 80083ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083b0:	782a      	ldrb	r2, [r5, #0]
 80083b2:	2a2a      	cmp	r2, #42	; 0x2a
 80083b4:	d015      	beq.n	80083e2 <_svfiprintf_r+0xea>
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	462f      	mov	r7, r5
 80083ba:	2000      	movs	r0, #0
 80083bc:	250a      	movs	r5, #10
 80083be:	4639      	mov	r1, r7
 80083c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c4:	3b30      	subs	r3, #48	; 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d94d      	bls.n	8008466 <_svfiprintf_r+0x16e>
 80083ca:	b1b8      	cbz	r0, 80083fc <_svfiprintf_r+0x104>
 80083cc:	e00f      	b.n	80083ee <_svfiprintf_r+0xf6>
 80083ce:	462f      	mov	r7, r5
 80083d0:	e7b8      	b.n	8008344 <_svfiprintf_r+0x4c>
 80083d2:	4a40      	ldr	r2, [pc, #256]	; (80084d4 <_svfiprintf_r+0x1dc>)
 80083d4:	1a80      	subs	r0, r0, r2
 80083d6:	fa0b f000 	lsl.w	r0, fp, r0
 80083da:	4318      	orrs	r0, r3
 80083dc:	9004      	str	r0, [sp, #16]
 80083de:	463d      	mov	r5, r7
 80083e0:	e7d3      	b.n	800838a <_svfiprintf_r+0x92>
 80083e2:	9a03      	ldr	r2, [sp, #12]
 80083e4:	1d11      	adds	r1, r2, #4
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	9103      	str	r1, [sp, #12]
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	db01      	blt.n	80083f2 <_svfiprintf_r+0xfa>
 80083ee:	9207      	str	r2, [sp, #28]
 80083f0:	e004      	b.n	80083fc <_svfiprintf_r+0x104>
 80083f2:	4252      	negs	r2, r2
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	9207      	str	r2, [sp, #28]
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	783b      	ldrb	r3, [r7, #0]
 80083fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008400:	d10c      	bne.n	800841c <_svfiprintf_r+0x124>
 8008402:	787b      	ldrb	r3, [r7, #1]
 8008404:	2b2a      	cmp	r3, #42	; 0x2a
 8008406:	d133      	bne.n	8008470 <_svfiprintf_r+0x178>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9203      	str	r2, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb8      	it	lt
 8008414:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008418:	3702      	adds	r7, #2
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	4d2e      	ldr	r5, [pc, #184]	; (80084d8 <_svfiprintf_r+0x1e0>)
 800841e:	7839      	ldrb	r1, [r7, #0]
 8008420:	2203      	movs	r2, #3
 8008422:	4628      	mov	r0, r5
 8008424:	f7f7 fefc 	bl	8000220 <memchr>
 8008428:	b138      	cbz	r0, 800843a <_svfiprintf_r+0x142>
 800842a:	2340      	movs	r3, #64	; 0x40
 800842c:	1b40      	subs	r0, r0, r5
 800842e:	fa03 f000 	lsl.w	r0, r3, r0
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	4303      	orrs	r3, r0
 8008436:	3701      	adds	r7, #1
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	7839      	ldrb	r1, [r7, #0]
 800843c:	4827      	ldr	r0, [pc, #156]	; (80084dc <_svfiprintf_r+0x1e4>)
 800843e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008442:	2206      	movs	r2, #6
 8008444:	1c7e      	adds	r6, r7, #1
 8008446:	f7f7 feeb 	bl	8000220 <memchr>
 800844a:	2800      	cmp	r0, #0
 800844c:	d038      	beq.n	80084c0 <_svfiprintf_r+0x1c8>
 800844e:	4b24      	ldr	r3, [pc, #144]	; (80084e0 <_svfiprintf_r+0x1e8>)
 8008450:	bb13      	cbnz	r3, 8008498 <_svfiprintf_r+0x1a0>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	3307      	adds	r3, #7
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	3308      	adds	r3, #8
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	444b      	add	r3, r9
 8008462:	9309      	str	r3, [sp, #36]	; 0x24
 8008464:	e76d      	b.n	8008342 <_svfiprintf_r+0x4a>
 8008466:	fb05 3202 	mla	r2, r5, r2, r3
 800846a:	2001      	movs	r0, #1
 800846c:	460f      	mov	r7, r1
 800846e:	e7a6      	b.n	80083be <_svfiprintf_r+0xc6>
 8008470:	2300      	movs	r3, #0
 8008472:	3701      	adds	r7, #1
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	4619      	mov	r1, r3
 8008478:	250a      	movs	r5, #10
 800847a:	4638      	mov	r0, r7
 800847c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008480:	3a30      	subs	r2, #48	; 0x30
 8008482:	2a09      	cmp	r2, #9
 8008484:	d903      	bls.n	800848e <_svfiprintf_r+0x196>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0c8      	beq.n	800841c <_svfiprintf_r+0x124>
 800848a:	9105      	str	r1, [sp, #20]
 800848c:	e7c6      	b.n	800841c <_svfiprintf_r+0x124>
 800848e:	fb05 2101 	mla	r1, r5, r1, r2
 8008492:	2301      	movs	r3, #1
 8008494:	4607      	mov	r7, r0
 8008496:	e7f0      	b.n	800847a <_svfiprintf_r+0x182>
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4622      	mov	r2, r4
 800849e:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <_svfiprintf_r+0x1ec>)
 80084a0:	a904      	add	r1, sp, #16
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7fc fbfe 	bl	8004ca4 <_printf_float>
 80084a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084ac:	4681      	mov	r9, r0
 80084ae:	d1d6      	bne.n	800845e <_svfiprintf_r+0x166>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	065b      	lsls	r3, r3, #25
 80084b4:	f53f af35 	bmi.w	8008322 <_svfiprintf_r+0x2a>
 80084b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ba:	b01d      	add	sp, #116	; 0x74
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	ab03      	add	r3, sp, #12
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	4622      	mov	r2, r4
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <_svfiprintf_r+0x1ec>)
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7fc fea0 	bl	8005210 <_printf_i>
 80084d0:	e7ea      	b.n	80084a8 <_svfiprintf_r+0x1b0>
 80084d2:	bf00      	nop
 80084d4:	080087e4 	.word	0x080087e4
 80084d8:	080087ea 	.word	0x080087ea
 80084dc:	080087ee 	.word	0x080087ee
 80084e0:	08004ca5 	.word	0x08004ca5
 80084e4:	08008245 	.word	0x08008245

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4c06      	ldr	r4, [pc, #24]	; (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4605      	mov	r5, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	f7fc fa94 	bl	8004a20 <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200005ec 	.word	0x200005ec

08008508 <strncmp>:
 8008508:	b510      	push	{r4, lr}
 800850a:	b16a      	cbz	r2, 8008528 <strncmp+0x20>
 800850c:	3901      	subs	r1, #1
 800850e:	1884      	adds	r4, r0, r2
 8008510:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008514:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008518:	4293      	cmp	r3, r2
 800851a:	d103      	bne.n	8008524 <strncmp+0x1c>
 800851c:	42a0      	cmp	r0, r4
 800851e:	d001      	beq.n	8008524 <strncmp+0x1c>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f5      	bne.n	8008510 <strncmp+0x8>
 8008524:	1a98      	subs	r0, r3, r2
 8008526:	bd10      	pop	{r4, pc}
 8008528:	4610      	mov	r0, r2
 800852a:	e7fc      	b.n	8008526 <strncmp+0x1e>

0800852c <__ascii_wctomb>:
 800852c:	b149      	cbz	r1, 8008542 <__ascii_wctomb+0x16>
 800852e:	2aff      	cmp	r2, #255	; 0xff
 8008530:	bf85      	ittet	hi
 8008532:	238a      	movhi	r3, #138	; 0x8a
 8008534:	6003      	strhi	r3, [r0, #0]
 8008536:	700a      	strbls	r2, [r1, #0]
 8008538:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800853c:	bf98      	it	ls
 800853e:	2001      	movls	r0, #1
 8008540:	4770      	bx	lr
 8008542:	4608      	mov	r0, r1
 8008544:	4770      	bx	lr

08008546 <memmove>:
 8008546:	4288      	cmp	r0, r1
 8008548:	b510      	push	{r4, lr}
 800854a:	eb01 0302 	add.w	r3, r1, r2
 800854e:	d807      	bhi.n	8008560 <memmove+0x1a>
 8008550:	1e42      	subs	r2, r0, #1
 8008552:	4299      	cmp	r1, r3
 8008554:	d00a      	beq.n	800856c <memmove+0x26>
 8008556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800855e:	e7f8      	b.n	8008552 <memmove+0xc>
 8008560:	4283      	cmp	r3, r0
 8008562:	d9f5      	bls.n	8008550 <memmove+0xa>
 8008564:	1881      	adds	r1, r0, r2
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	42d3      	cmn	r3, r2
 800856a:	d100      	bne.n	800856e <memmove+0x28>
 800856c:	bd10      	pop	{r4, pc}
 800856e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008572:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008576:	e7f7      	b.n	8008568 <memmove+0x22>

08008578 <__malloc_lock>:
 8008578:	4770      	bx	lr

0800857a <__malloc_unlock>:
 800857a:	4770      	bx	lr

0800857c <_realloc_r>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	4607      	mov	r7, r0
 8008580:	4614      	mov	r4, r2
 8008582:	460e      	mov	r6, r1
 8008584:	b921      	cbnz	r1, 8008590 <_realloc_r+0x14>
 8008586:	4611      	mov	r1, r2
 8008588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858c:	f7ff be00 	b.w	8008190 <_malloc_r>
 8008590:	b922      	cbnz	r2, 800859c <_realloc_r+0x20>
 8008592:	f7ff fdaf 	bl	80080f4 <_free_r>
 8008596:	4625      	mov	r5, r4
 8008598:	4628      	mov	r0, r5
 800859a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859c:	f000 f814 	bl	80085c8 <_malloc_usable_size_r>
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d20f      	bcs.n	80085c4 <_realloc_r+0x48>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7ff fdf2 	bl	8008190 <_malloc_r>
 80085ac:	4605      	mov	r5, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d0f2      	beq.n	8008598 <_realloc_r+0x1c>
 80085b2:	4631      	mov	r1, r6
 80085b4:	4622      	mov	r2, r4
 80085b6:	f7fc facd 	bl	8004b54 <memcpy>
 80085ba:	4631      	mov	r1, r6
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff fd99 	bl	80080f4 <_free_r>
 80085c2:	e7e9      	b.n	8008598 <_realloc_r+0x1c>
 80085c4:	4635      	mov	r5, r6
 80085c6:	e7e7      	b.n	8008598 <_realloc_r+0x1c>

080085c8 <_malloc_usable_size_r>:
 80085c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085cc:	1f18      	subs	r0, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbc      	itt	lt
 80085d2:	580b      	ldrlt	r3, [r1, r0]
 80085d4:	18c0      	addlt	r0, r0, r3
 80085d6:	4770      	bx	lr

080085d8 <_init>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	bf00      	nop
 80085dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085de:	bc08      	pop	{r3}
 80085e0:	469e      	mov	lr, r3
 80085e2:	4770      	bx	lr

080085e4 <_fini>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr
