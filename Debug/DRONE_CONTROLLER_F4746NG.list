
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f580  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a44  0800f750  0800f750  0001f750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013194  08013194  00030294  2**0
                  CONTENTS
  4 .ARM          00000008  08013194  08013194  00023194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801319c  0801319c  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801319c  0801319c  0002319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131a0  080131a0  000231a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  080131a4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004774  20000294  08013438  00030294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  08013438  00034a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eb25  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007720  00000000  00000000  0006ede9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c66f  00000000  00000000  00076509  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002628  00000000  00000000  00092b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002478  00000000  00000000  000951a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002fdc3  00000000  00000000  00097618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00025e27  00000000  00000000  000c73db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001098d1  00000000  00000000  000ed202  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001f6ad3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081c0  00000000  00000000  001f6b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000294 	.word	0x20000294
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f738 	.word	0x0800f738

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000298 	.word	0x20000298
 800020c:	0800f738 	.word	0x0800f738

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000412:	f1a4 0401 	sub.w	r4, r4, #1
 8000416:	d1e9      	bne.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2f>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c44:	bf24      	itt	cs
 8000c46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_d2f+0x30>
 8000c50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c64:	bf08      	it	eq
 8000c66:	f020 0001 	biceq.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
 8000c6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c70:	d121      	bne.n	8000cb6 <__aeabi_d2f+0x7a>
 8000c72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c76:	bfbc      	itt	lt
 8000c78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	4770      	bxlt	lr
 8000c7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c86:	f1c2 0218 	rsb	r2, r2, #24
 8000c8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c92:	fa20 f002 	lsr.w	r0, r0, r2
 8000c96:	bf18      	it	ne
 8000c98:	f040 0001 	orrne.w	r0, r0, #1
 8000c9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca8:	ea40 000c 	orr.w	r0, r0, ip
 8000cac:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb4:	e7cc      	b.n	8000c50 <__aeabi_d2f+0x14>
 8000cb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cba:	d107      	bne.n	8000ccc <__aeabi_d2f+0x90>
 8000cbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cca:	4770      	bxne	lr
 8000ccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_frsub>:
 8000cdc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	e002      	b.n	8000ce8 <__addsf3>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_fsub>:
 8000ce4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce8 <__addsf3>:
 8000ce8:	0042      	lsls	r2, r0, #1
 8000cea:	bf1f      	itttt	ne
 8000cec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cf0:	ea92 0f03 	teqne	r2, r3
 8000cf4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfc:	d06a      	beq.n	8000dd4 <__addsf3+0xec>
 8000cfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d06:	bfc1      	itttt	gt
 8000d08:	18d2      	addgt	r2, r2, r3
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	4048      	eorgt	r0, r1
 8000d0e:	4041      	eorgt	r1, r0
 8000d10:	bfb8      	it	lt
 8000d12:	425b      	neglt	r3, r3
 8000d14:	2b19      	cmp	r3, #25
 8000d16:	bf88      	it	hi
 8000d18:	4770      	bxhi	lr
 8000d1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d26:	bf18      	it	ne
 8000d28:	4240      	negne	r0, r0
 8000d2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d36:	bf18      	it	ne
 8000d38:	4249      	negne	r1, r1
 8000d3a:	ea92 0f03 	teq	r2, r3
 8000d3e:	d03f      	beq.n	8000dc0 <__addsf3+0xd8>
 8000d40:	f1a2 0201 	sub.w	r2, r2, #1
 8000d44:	fa41 fc03 	asr.w	ip, r1, r3
 8000d48:	eb10 000c 	adds.w	r0, r0, ip
 8000d4c:	f1c3 0320 	rsb	r3, r3, #32
 8000d50:	fa01 f103 	lsl.w	r1, r1, r3
 8000d54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__addsf3+0x78>
 8000d5a:	4249      	negs	r1, r1
 8000d5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d64:	d313      	bcc.n	8000d8e <__addsf3+0xa6>
 8000d66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d6a:	d306      	bcc.n	8000d7a <__addsf3+0x92>
 8000d6c:	0840      	lsrs	r0, r0, #1
 8000d6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d72:	f102 0201 	add.w	r2, r2, #1
 8000d76:	2afe      	cmp	r2, #254	; 0xfe
 8000d78:	d251      	bcs.n	8000e1e <__addsf3+0x136>
 8000d7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	ea40 0003 	orr.w	r0, r0, r3
 8000d8c:	4770      	bx	lr
 8000d8e:	0049      	lsls	r1, r1, #1
 8000d90:	eb40 0000 	adc.w	r0, r0, r0
 8000d94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d98:	f1a2 0201 	sub.w	r2, r2, #1
 8000d9c:	d1ed      	bne.n	8000d7a <__addsf3+0x92>
 8000d9e:	fab0 fc80 	clz	ip, r0
 8000da2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da6:	ebb2 020c 	subs.w	r2, r2, ip
 8000daa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dae:	bfaa      	itet	ge
 8000db0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db4:	4252      	neglt	r2, r2
 8000db6:	4318      	orrge	r0, r3
 8000db8:	bfbc      	itt	lt
 8000dba:	40d0      	lsrlt	r0, r2
 8000dbc:	4318      	orrlt	r0, r3
 8000dbe:	4770      	bx	lr
 8000dc0:	f092 0f00 	teq	r2, #0
 8000dc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc8:	bf06      	itte	eq
 8000dca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dce:	3201      	addeq	r2, #1
 8000dd0:	3b01      	subne	r3, #1
 8000dd2:	e7b5      	b.n	8000d40 <__addsf3+0x58>
 8000dd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	bf18      	it	ne
 8000dde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de2:	d021      	beq.n	8000e28 <__addsf3+0x140>
 8000de4:	ea92 0f03 	teq	r2, r3
 8000de8:	d004      	beq.n	8000df4 <__addsf3+0x10c>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	bf08      	it	eq
 8000df0:	4608      	moveq	r0, r1
 8000df2:	4770      	bx	lr
 8000df4:	ea90 0f01 	teq	r0, r1
 8000df8:	bf1c      	itt	ne
 8000dfa:	2000      	movne	r0, #0
 8000dfc:	4770      	bxne	lr
 8000dfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e02:	d104      	bne.n	8000e0e <__addsf3+0x126>
 8000e04:	0040      	lsls	r0, r0, #1
 8000e06:	bf28      	it	cs
 8000e08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	4770      	bx	lr
 8000e0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e12:	bf3c      	itt	cc
 8000e14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e18:	4770      	bxcc	lr
 8000e1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e26:	4770      	bx	lr
 8000e28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e2c:	bf16      	itet	ne
 8000e2e:	4608      	movne	r0, r1
 8000e30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e34:	4601      	movne	r1, r0
 8000e36:	0242      	lsls	r2, r0, #9
 8000e38:	bf06      	itte	eq
 8000e3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3e:	ea90 0f01 	teqeq	r0, r1
 8000e42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_ui2f>:
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e004      	b.n	8000e58 <__aeabi_i2f+0x8>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_i2f>:
 8000e50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e54:	bf48      	it	mi
 8000e56:	4240      	negmi	r0, r0
 8000e58:	ea5f 0c00 	movs.w	ip, r0
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e64:	4601      	mov	r1, r0
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	e01c      	b.n	8000ea6 <__aeabi_l2f+0x2a>

08000e6c <__aeabi_ul2f>:
 8000e6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000e70:	bf08      	it	eq
 8000e72:	4770      	bxeq	lr
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e00a      	b.n	8000e90 <__aeabi_l2f+0x14>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_l2f>:
 8000e7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000e80:	bf08      	it	eq
 8000e82:	4770      	bxeq	lr
 8000e84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e88:	d502      	bpl.n	8000e90 <__aeabi_l2f+0x14>
 8000e8a:	4240      	negs	r0, r0
 8000e8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e90:	ea5f 0c01 	movs.w	ip, r1
 8000e94:	bf02      	ittt	eq
 8000e96:	4684      	moveq	ip, r0
 8000e98:	4601      	moveq	r1, r0
 8000e9a:	2000      	moveq	r0, #0
 8000e9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ea0:	bf08      	it	eq
 8000ea2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eaa:	fabc f28c 	clz	r2, ip
 8000eae:	3a08      	subs	r2, #8
 8000eb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb4:	db10      	blt.n	8000ed8 <__aeabi_l2f+0x5c>
 8000eb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eba:	4463      	add	r3, ip
 8000ebc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec0:	f1c2 0220 	rsb	r2, r2, #32
 8000ec4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	eb43 0002 	adc.w	r0, r3, r2
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f102 0220 	add.w	r2, r2, #32
 8000edc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee0:	f1c2 0220 	rsb	r2, r2, #32
 8000ee4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee8:	fa21 f202 	lsr.w	r2, r1, r2
 8000eec:	eb43 0002 	adc.w	r0, r3, r2
 8000ef0:	bf08      	it	eq
 8000ef2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_ldivmod>:
 8000ef8:	b97b      	cbnz	r3, 8000f1a <__aeabi_ldivmod+0x22>
 8000efa:	b972      	cbnz	r2, 8000f1a <__aeabi_ldivmod+0x22>
 8000efc:	2900      	cmp	r1, #0
 8000efe:	bfbe      	ittt	lt
 8000f00:	2000      	movlt	r0, #0
 8000f02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f06:	e006      	blt.n	8000f16 <__aeabi_ldivmod+0x1e>
 8000f08:	bf08      	it	eq
 8000f0a:	2800      	cmpeq	r0, #0
 8000f0c:	bf1c      	itt	ne
 8000f0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f16:	f000 b9f3 	b.w	8001300 <__aeabi_idiv0>
 8000f1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f22:	2900      	cmp	r1, #0
 8000f24:	db09      	blt.n	8000f3a <__aeabi_ldivmod+0x42>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db1a      	blt.n	8000f60 <__aeabi_ldivmod+0x68>
 8000f2a:	f000 f883 	bl	8001034 <__udivmoddi4>
 8000f2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f36:	b004      	add	sp, #16
 8000f38:	4770      	bx	lr
 8000f3a:	4240      	negs	r0, r0
 8000f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db1b      	blt.n	8000f7c <__aeabi_ldivmod+0x84>
 8000f44:	f000 f876 	bl	8001034 <__udivmoddi4>
 8000f48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f50:	b004      	add	sp, #16
 8000f52:	4240      	negs	r0, r0
 8000f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	4770      	bx	lr
 8000f60:	4252      	negs	r2, r2
 8000f62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f66:	f000 f865 	bl	8001034 <__udivmoddi4>
 8000f6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f72:	b004      	add	sp, #16
 8000f74:	4240      	negs	r0, r0
 8000f76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f7a:	4770      	bx	lr
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	f000 f857 	bl	8001034 <__udivmoddi4>
 8000f86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f8e:	b004      	add	sp, #16
 8000f90:	4252      	negs	r2, r2
 8000f92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f96:	4770      	bx	lr

08000f98 <__aeabi_uldivmod>:
 8000f98:	b953      	cbnz	r3, 8000fb0 <__aeabi_uldivmod+0x18>
 8000f9a:	b94a      	cbnz	r2, 8000fb0 <__aeabi_uldivmod+0x18>
 8000f9c:	2900      	cmp	r1, #0
 8000f9e:	bf08      	it	eq
 8000fa0:	2800      	cmpeq	r0, #0
 8000fa2:	bf1c      	itt	ne
 8000fa4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000fa8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000fac:	f000 b9a8 	b.w	8001300 <__aeabi_idiv0>
 8000fb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fb8:	f000 f83c 	bl	8001034 <__udivmoddi4>
 8000fbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fc4:	b004      	add	sp, #16
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_f2lz>:
 8000fc8:	ee07 0a90 	vmov	s15, r0
 8000fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d401      	bmi.n	8000fda <__aeabi_f2lz+0x12>
 8000fd6:	f000 b809 	b.w	8000fec <__aeabi_f2ulz>
 8000fda:	b508      	push	{r3, lr}
 8000fdc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000fe0:	f000 f804 	bl	8000fec <__aeabi_f2ulz>
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fea:	bd08      	pop	{r3, pc}

08000fec <__aeabi_f2ulz>:
 8000fec:	b5d0      	push	{r4, r6, r7, lr}
 8000fee:	f7ff fad5 	bl	800059c <__aeabi_f2d>
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <__aeabi_f2ulz+0x40>)
 8000ff6:	4606      	mov	r6, r0
 8000ff8:	460f      	mov	r7, r1
 8000ffa:	f7ff fb27 	bl	800064c <__aeabi_dmul>
 8000ffe:	f7ff fdfd 	bl	8000bfc <__aeabi_d2uiz>
 8001002:	4604      	mov	r4, r0
 8001004:	f7ff faa8 	bl	8000558 <__aeabi_ui2d>
 8001008:	2200      	movs	r2, #0
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <__aeabi_f2ulz+0x44>)
 800100c:	f7ff fb1e 	bl	800064c <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4630      	mov	r0, r6
 8001016:	4639      	mov	r1, r7
 8001018:	f7ff f960 	bl	80002dc <__aeabi_dsub>
 800101c:	f7ff fdee 	bl	8000bfc <__aeabi_d2uiz>
 8001020:	2200      	movs	r2, #0
 8001022:	4623      	mov	r3, r4
 8001024:	4310      	orrs	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	bdd0      	pop	{r4, r6, r7, pc}
 800102a:	bf00      	nop
 800102c:	3df00000 	.word	0x3df00000
 8001030:	41f00000 	.word	0x41f00000

08001034 <__udivmoddi4>:
 8001034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001038:	9e08      	ldr	r6, [sp, #32]
 800103a:	4604      	mov	r4, r0
 800103c:	4688      	mov	r8, r1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d14b      	bne.n	80010da <__udivmoddi4+0xa6>
 8001042:	428a      	cmp	r2, r1
 8001044:	4615      	mov	r5, r2
 8001046:	d967      	bls.n	8001118 <__udivmoddi4+0xe4>
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	b14a      	cbz	r2, 8001062 <__udivmoddi4+0x2e>
 800104e:	f1c2 0720 	rsb	r7, r2, #32
 8001052:	fa01 f302 	lsl.w	r3, r1, r2
 8001056:	fa20 f707 	lsr.w	r7, r0, r7
 800105a:	4095      	lsls	r5, r2
 800105c:	ea47 0803 	orr.w	r8, r7, r3
 8001060:	4094      	lsls	r4, r2
 8001062:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001066:	0c23      	lsrs	r3, r4, #16
 8001068:	fbb8 f7fe 	udiv	r7, r8, lr
 800106c:	fa1f fc85 	uxth.w	ip, r5
 8001070:	fb0e 8817 	mls	r8, lr, r7, r8
 8001074:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001078:	fb07 f10c 	mul.w	r1, r7, ip
 800107c:	4299      	cmp	r1, r3
 800107e:	d909      	bls.n	8001094 <__udivmoddi4+0x60>
 8001080:	18eb      	adds	r3, r5, r3
 8001082:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001086:	f080 811b 	bcs.w	80012c0 <__udivmoddi4+0x28c>
 800108a:	4299      	cmp	r1, r3
 800108c:	f240 8118 	bls.w	80012c0 <__udivmoddi4+0x28c>
 8001090:	3f02      	subs	r7, #2
 8001092:	442b      	add	r3, r5
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f0fe 	udiv	r0, r3, lr
 800109c:	fb0e 3310 	mls	r3, lr, r0, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80010a8:	45a4      	cmp	ip, r4
 80010aa:	d909      	bls.n	80010c0 <__udivmoddi4+0x8c>
 80010ac:	192c      	adds	r4, r5, r4
 80010ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010b2:	f080 8107 	bcs.w	80012c4 <__udivmoddi4+0x290>
 80010b6:	45a4      	cmp	ip, r4
 80010b8:	f240 8104 	bls.w	80012c4 <__udivmoddi4+0x290>
 80010bc:	3802      	subs	r0, #2
 80010be:	442c      	add	r4, r5
 80010c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010c4:	eba4 040c 	sub.w	r4, r4, ip
 80010c8:	2700      	movs	r7, #0
 80010ca:	b11e      	cbz	r6, 80010d4 <__udivmoddi4+0xa0>
 80010cc:	40d4      	lsrs	r4, r2
 80010ce:	2300      	movs	r3, #0
 80010d0:	e9c6 4300 	strd	r4, r3, [r6]
 80010d4:	4639      	mov	r1, r7
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010da:	428b      	cmp	r3, r1
 80010dc:	d909      	bls.n	80010f2 <__udivmoddi4+0xbe>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	f000 80eb 	beq.w	80012ba <__udivmoddi4+0x286>
 80010e4:	2700      	movs	r7, #0
 80010e6:	e9c6 0100 	strd	r0, r1, [r6]
 80010ea:	4638      	mov	r0, r7
 80010ec:	4639      	mov	r1, r7
 80010ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f2:	fab3 f783 	clz	r7, r3
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d147      	bne.n	800118a <__udivmoddi4+0x156>
 80010fa:	428b      	cmp	r3, r1
 80010fc:	d302      	bcc.n	8001104 <__udivmoddi4+0xd0>
 80010fe:	4282      	cmp	r2, r0
 8001100:	f200 80fa 	bhi.w	80012f8 <__udivmoddi4+0x2c4>
 8001104:	1a84      	subs	r4, r0, r2
 8001106:	eb61 0303 	sbc.w	r3, r1, r3
 800110a:	2001      	movs	r0, #1
 800110c:	4698      	mov	r8, r3
 800110e:	2e00      	cmp	r6, #0
 8001110:	d0e0      	beq.n	80010d4 <__udivmoddi4+0xa0>
 8001112:	e9c6 4800 	strd	r4, r8, [r6]
 8001116:	e7dd      	b.n	80010d4 <__udivmoddi4+0xa0>
 8001118:	b902      	cbnz	r2, 800111c <__udivmoddi4+0xe8>
 800111a:	deff      	udf	#255	; 0xff
 800111c:	fab2 f282 	clz	r2, r2
 8001120:	2a00      	cmp	r2, #0
 8001122:	f040 808f 	bne.w	8001244 <__udivmoddi4+0x210>
 8001126:	1b49      	subs	r1, r1, r5
 8001128:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800112c:	fa1f f885 	uxth.w	r8, r5
 8001130:	2701      	movs	r7, #1
 8001132:	fbb1 fcfe 	udiv	ip, r1, lr
 8001136:	0c23      	lsrs	r3, r4, #16
 8001138:	fb0e 111c 	mls	r1, lr, ip, r1
 800113c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001140:	fb08 f10c 	mul.w	r1, r8, ip
 8001144:	4299      	cmp	r1, r3
 8001146:	d907      	bls.n	8001158 <__udivmoddi4+0x124>
 8001148:	18eb      	adds	r3, r5, r3
 800114a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800114e:	d202      	bcs.n	8001156 <__udivmoddi4+0x122>
 8001150:	4299      	cmp	r1, r3
 8001152:	f200 80cd 	bhi.w	80012f0 <__udivmoddi4+0x2bc>
 8001156:	4684      	mov	ip, r0
 8001158:	1a59      	subs	r1, r3, r1
 800115a:	b2a3      	uxth	r3, r4
 800115c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001160:	fb0e 1410 	mls	r4, lr, r0, r1
 8001164:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001168:	fb08 f800 	mul.w	r8, r8, r0
 800116c:	45a0      	cmp	r8, r4
 800116e:	d907      	bls.n	8001180 <__udivmoddi4+0x14c>
 8001170:	192c      	adds	r4, r5, r4
 8001172:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001176:	d202      	bcs.n	800117e <__udivmoddi4+0x14a>
 8001178:	45a0      	cmp	r8, r4
 800117a:	f200 80b6 	bhi.w	80012ea <__udivmoddi4+0x2b6>
 800117e:	4618      	mov	r0, r3
 8001180:	eba4 0408 	sub.w	r4, r4, r8
 8001184:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001188:	e79f      	b.n	80010ca <__udivmoddi4+0x96>
 800118a:	f1c7 0c20 	rsb	ip, r7, #32
 800118e:	40bb      	lsls	r3, r7
 8001190:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001194:	ea4e 0e03 	orr.w	lr, lr, r3
 8001198:	fa01 f407 	lsl.w	r4, r1, r7
 800119c:	fa20 f50c 	lsr.w	r5, r0, ip
 80011a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80011a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80011a8:	4325      	orrs	r5, r4
 80011aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80011ae:	0c2c      	lsrs	r4, r5, #16
 80011b0:	fb08 3319 	mls	r3, r8, r9, r3
 80011b4:	fa1f fa8e 	uxth.w	sl, lr
 80011b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80011bc:	fb09 f40a 	mul.w	r4, r9, sl
 80011c0:	429c      	cmp	r4, r3
 80011c2:	fa02 f207 	lsl.w	r2, r2, r7
 80011c6:	fa00 f107 	lsl.w	r1, r0, r7
 80011ca:	d90b      	bls.n	80011e4 <__udivmoddi4+0x1b0>
 80011cc:	eb1e 0303 	adds.w	r3, lr, r3
 80011d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80011d4:	f080 8087 	bcs.w	80012e6 <__udivmoddi4+0x2b2>
 80011d8:	429c      	cmp	r4, r3
 80011da:	f240 8084 	bls.w	80012e6 <__udivmoddi4+0x2b2>
 80011de:	f1a9 0902 	sub.w	r9, r9, #2
 80011e2:	4473      	add	r3, lr
 80011e4:	1b1b      	subs	r3, r3, r4
 80011e6:	b2ad      	uxth	r5, r5
 80011e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011ec:	fb08 3310 	mls	r3, r8, r0, r3
 80011f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80011f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80011f8:	45a2      	cmp	sl, r4
 80011fa:	d908      	bls.n	800120e <__udivmoddi4+0x1da>
 80011fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001200:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001204:	d26b      	bcs.n	80012de <__udivmoddi4+0x2aa>
 8001206:	45a2      	cmp	sl, r4
 8001208:	d969      	bls.n	80012de <__udivmoddi4+0x2aa>
 800120a:	3802      	subs	r0, #2
 800120c:	4474      	add	r4, lr
 800120e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001212:	fba0 8902 	umull	r8, r9, r0, r2
 8001216:	eba4 040a 	sub.w	r4, r4, sl
 800121a:	454c      	cmp	r4, r9
 800121c:	46c2      	mov	sl, r8
 800121e:	464b      	mov	r3, r9
 8001220:	d354      	bcc.n	80012cc <__udivmoddi4+0x298>
 8001222:	d051      	beq.n	80012c8 <__udivmoddi4+0x294>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d069      	beq.n	80012fc <__udivmoddi4+0x2c8>
 8001228:	ebb1 050a 	subs.w	r5, r1, sl
 800122c:	eb64 0403 	sbc.w	r4, r4, r3
 8001230:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001234:	40fd      	lsrs	r5, r7
 8001236:	40fc      	lsrs	r4, r7
 8001238:	ea4c 0505 	orr.w	r5, ip, r5
 800123c:	e9c6 5400 	strd	r5, r4, [r6]
 8001240:	2700      	movs	r7, #0
 8001242:	e747      	b.n	80010d4 <__udivmoddi4+0xa0>
 8001244:	f1c2 0320 	rsb	r3, r2, #32
 8001248:	fa20 f703 	lsr.w	r7, r0, r3
 800124c:	4095      	lsls	r5, r2
 800124e:	fa01 f002 	lsl.w	r0, r1, r2
 8001252:	fa21 f303 	lsr.w	r3, r1, r3
 8001256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800125a:	4338      	orrs	r0, r7
 800125c:	0c01      	lsrs	r1, r0, #16
 800125e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001262:	fa1f f885 	uxth.w	r8, r5
 8001266:	fb0e 3317 	mls	r3, lr, r7, r3
 800126a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800126e:	fb07 f308 	mul.w	r3, r7, r8
 8001272:	428b      	cmp	r3, r1
 8001274:	fa04 f402 	lsl.w	r4, r4, r2
 8001278:	d907      	bls.n	800128a <__udivmoddi4+0x256>
 800127a:	1869      	adds	r1, r5, r1
 800127c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001280:	d22f      	bcs.n	80012e2 <__udivmoddi4+0x2ae>
 8001282:	428b      	cmp	r3, r1
 8001284:	d92d      	bls.n	80012e2 <__udivmoddi4+0x2ae>
 8001286:	3f02      	subs	r7, #2
 8001288:	4429      	add	r1, r5
 800128a:	1acb      	subs	r3, r1, r3
 800128c:	b281      	uxth	r1, r0
 800128e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001292:	fb0e 3310 	mls	r3, lr, r0, r3
 8001296:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800129a:	fb00 f308 	mul.w	r3, r0, r8
 800129e:	428b      	cmp	r3, r1
 80012a0:	d907      	bls.n	80012b2 <__udivmoddi4+0x27e>
 80012a2:	1869      	adds	r1, r5, r1
 80012a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80012a8:	d217      	bcs.n	80012da <__udivmoddi4+0x2a6>
 80012aa:	428b      	cmp	r3, r1
 80012ac:	d915      	bls.n	80012da <__udivmoddi4+0x2a6>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4429      	add	r1, r5
 80012b2:	1ac9      	subs	r1, r1, r3
 80012b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80012b8:	e73b      	b.n	8001132 <__udivmoddi4+0xfe>
 80012ba:	4637      	mov	r7, r6
 80012bc:	4630      	mov	r0, r6
 80012be:	e709      	b.n	80010d4 <__udivmoddi4+0xa0>
 80012c0:	4607      	mov	r7, r0
 80012c2:	e6e7      	b.n	8001094 <__udivmoddi4+0x60>
 80012c4:	4618      	mov	r0, r3
 80012c6:	e6fb      	b.n	80010c0 <__udivmoddi4+0x8c>
 80012c8:	4541      	cmp	r1, r8
 80012ca:	d2ab      	bcs.n	8001224 <__udivmoddi4+0x1f0>
 80012cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80012d0:	eb69 020e 	sbc.w	r2, r9, lr
 80012d4:	3801      	subs	r0, #1
 80012d6:	4613      	mov	r3, r2
 80012d8:	e7a4      	b.n	8001224 <__udivmoddi4+0x1f0>
 80012da:	4660      	mov	r0, ip
 80012dc:	e7e9      	b.n	80012b2 <__udivmoddi4+0x27e>
 80012de:	4618      	mov	r0, r3
 80012e0:	e795      	b.n	800120e <__udivmoddi4+0x1da>
 80012e2:	4667      	mov	r7, ip
 80012e4:	e7d1      	b.n	800128a <__udivmoddi4+0x256>
 80012e6:	4681      	mov	r9, r0
 80012e8:	e77c      	b.n	80011e4 <__udivmoddi4+0x1b0>
 80012ea:	3802      	subs	r0, #2
 80012ec:	442c      	add	r4, r5
 80012ee:	e747      	b.n	8001180 <__udivmoddi4+0x14c>
 80012f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012f4:	442b      	add	r3, r5
 80012f6:	e72f      	b.n	8001158 <__udivmoddi4+0x124>
 80012f8:	4638      	mov	r0, r7
 80012fa:	e708      	b.n	800110e <__udivmoddi4+0xda>
 80012fc:	4637      	mov	r7, r6
 80012fe:	e6e9      	b.n	80010d4 <__udivmoddi4+0xa0>

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001304:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8001306:	f000 fecd 	bl	80020a4 <DWT_Delay>

}
 800130a:	bd08      	pop	{r3, pc}

0800130c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800130c:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800130e:	b938      	cbnz	r0, 8001320 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <NRF24_csn+0x24>)
 8001314:	8819      	ldrh	r1, [r3, #0]
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <NRF24_csn+0x28>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	f002 f876 	bl	800340a <HAL_GPIO_WritePin>
}
 800131e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <NRF24_csn+0x24>)
 8001324:	8819      	ldrh	r1, [r3, #0]
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <NRF24_csn+0x28>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f002 f86e 	bl	800340a <HAL_GPIO_WritePin>
 800132e:	e7f6      	b.n	800131e <NRF24_csn+0x12>
 8001330:	200002b4 	.word	0x200002b4
 8001334:	200002b8 	.word	0x200002b8

08001338 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001338:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800133a:	b938      	cbnz	r0, 800134c <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <NRF24_ce+0x24>)
 8001340:	8819      	ldrh	r1, [r3, #0]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <NRF24_ce+0x28>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	f002 f860 	bl	800340a <HAL_GPIO_WritePin>
}
 800134a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <NRF24_ce+0x24>)
 8001350:	8819      	ldrh	r1, [r3, #0]
 8001352:	4b03      	ldr	r3, [pc, #12]	; (8001360 <NRF24_ce+0x28>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	f002 f858 	bl	800340a <HAL_GPIO_WritePin>
 800135a:	e7f6      	b.n	800134a <NRF24_ce+0x12>
 800135c:	200002b2 	.word	0x200002b2
 8001360:	200002b8 	.word	0x200002b8

08001364 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001364:	b510      	push	{r4, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ffce 	bl	800130c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001370:	f004 041f 	and.w	r4, r4, #31
 8001374:	a902      	add	r1, sp, #8
 8001376:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800137a:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <NRF24_read_register+0x40>)
 800137c:	2302      	movs	r3, #2
 800137e:	2201      	movs	r2, #1
 8001380:	4620      	mov	r0, r4
 8001382:	f003 fdcf 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8001386:	2302      	movs	r3, #2
 8001388:	2201      	movs	r2, #1
 800138a:	f10d 0105 	add.w	r1, sp, #5
 800138e:	4620      	mov	r0, r4
 8001390:	f004 f81f 	bl	80053d2 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8001394:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ffb7 	bl	800130c <NRF24_csn>
	return retData;
}
 800139e:	4620      	mov	r0, r4
 80013a0:	b002      	add	sp, #8
 80013a2:	bd10      	pop	{r4, pc}
 80013a4:	200002bc 	.word	0x200002bc

080013a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ffaa 	bl	800130c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80013b8:	f004 041f 	and.w	r4, r4, #31
 80013bc:	a902      	add	r1, sp, #8
 80013be:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80013c2:	4c08      	ldr	r4, [pc, #32]	; (80013e4 <NRF24_read_registerN+0x3c>)
 80013c4:	2302      	movs	r3, #2
 80013c6:	2201      	movs	r2, #1
 80013c8:	4620      	mov	r0, r4
 80013ca:	f003 fdab 	bl	8004f24 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80013ce:	2302      	movs	r3, #2
 80013d0:	4632      	mov	r2, r6
 80013d2:	4629      	mov	r1, r5
 80013d4:	4620      	mov	r0, r4
 80013d6:	f003 fffc 	bl	80053d2 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff ff96 	bl	800130c <NRF24_csn>
}
 80013e0:	b002      	add	sp, #8
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	200002bc 	.word	0x200002bc

080013e8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80013e8:	b530      	push	{r4, r5, lr}
 80013ea:	b083      	sub	sp, #12
 80013ec:	4604      	mov	r4, r0
 80013ee:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff8b 	bl	800130c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80013f6:	f044 0420 	orr.w	r4, r4, #32
 80013fa:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80013fe:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,2);
 8001402:	2302      	movs	r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	a901      	add	r1, sp, #4
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <NRF24_write_register+0x30>)
 800140a:	f003 fd8b 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ff7c 	bl	800130c <NRF24_csn>
}
 8001414:	b003      	add	sp, #12
 8001416:	bd30      	pop	{r4, r5, pc}
 8001418:	200002bc 	.word	0x200002bc

0800141c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff70 	bl	800130c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800142c:	f044 0420 	orr.w	r4, r4, #32
 8001430:	a902      	add	r1, sp, #8
 8001432:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001436:	4c08      	ldr	r4, [pc, #32]	; (8001458 <NRF24_write_registerN+0x3c>)
 8001438:	2302      	movs	r3, #2
 800143a:	2201      	movs	r2, #1
 800143c:	4620      	mov	r0, r4
 800143e:	f003 fd71 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 8001442:	2302      	movs	r3, #2
 8001444:	4632      	mov	r2, r6
 8001446:	4629      	mov	r1, r5
 8001448:	4620      	mov	r0, r4
 800144a:	f003 fd6b 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff ff5c 	bl	800130c <NRF24_csn>
}
 8001454:	b002      	add	sp, #8
 8001456:	bd70      	pop	{r4, r5, r6, pc}
 8001458:	200002bc 	.word	0x200002bc

0800145c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	4605      	mov	r5, r0
 8001462:	460e      	mov	r6, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ff51 	bl	800130c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800146a:	a902      	add	r1, sp, #8
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1,2);
 8001472:	4c08      	ldr	r4, [pc, #32]	; (8001494 <NRF24_write_payload+0x38>)
 8001474:	2302      	movs	r3, #2
 8001476:	2201      	movs	r2, #1
 8001478:	4620      	mov	r0, r4
 800147a:	f003 fd53 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len,2);
 800147e:	2302      	movs	r3, #2
 8001480:	4632      	mov	r2, r6
 8001482:	4629      	mov	r1, r5
 8001484:	4620      	mov	r0, r4
 8001486:	f003 fd4d 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff ff3e 	bl	800130c <NRF24_csn>
}
 8001490:	b002      	add	sp, #8
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	200002bc 	.word	0x200002bc

08001498 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001498:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800149a:	21ff      	movs	r1, #255	; 0xff
 800149c:	20e1      	movs	r0, #225	; 0xe1
 800149e:	f7ff ffa3 	bl	80013e8 <NRF24_write_register>
}
 80014a2:	bd08      	pop	{r3, pc}

080014a4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80014a4:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	20e2      	movs	r0, #226	; 0xe2
 80014aa:	f7ff ff9d 	bl	80013e8 <NRF24_write_register>
}
 80014ae:	bd08      	pop	{r3, pc}

080014b0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80014b0:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80014b2:	2007      	movs	r0, #7
 80014b4:	f7ff ff56 	bl	8001364 <NRF24_read_register>
	return statReg;
}
 80014b8:	bd08      	pop	{r3, pc}

080014ba <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014ba:	b508      	push	{r3, lr}
	NRF24_ce(0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff ff3b 	bl	8001338 <NRF24_ce>
	NRF24_flush_tx();
 80014c2:	f7ff ffe9 	bl	8001498 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014c6:	f7ff ffed 	bl	80014a4 <NRF24_flush_rx>
}
 80014ca:	bd08      	pop	{r3, pc}

080014cc <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80014cc:	b510      	push	{r4, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	ac02      	add	r4, sp, #8
 80014d2:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80014d6:	2205      	movs	r2, #5
 80014d8:	4621      	mov	r1, r4
 80014da:	200a      	movs	r0, #10
 80014dc:	f7ff ff9e 	bl	800141c <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80014e0:	2205      	movs	r2, #5
 80014e2:	4621      	mov	r1, r4
 80014e4:	2010      	movs	r0, #16
 80014e6:	f7ff ff99 	bl	800141c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <NRF24_openWritingPipe+0x34>)
 80014ec:	7819      	ldrb	r1, [r3, #0]
 80014ee:	2920      	cmp	r1, #32
 80014f0:	bf28      	it	cs
 80014f2:	2120      	movcs	r1, #32
 80014f4:	2011      	movs	r0, #17
 80014f6:	f7ff ff77 	bl	80013e8 <NRF24_write_register>
}
 80014fa:	b002      	add	sp, #8
 80014fc:	bd10      	pop	{r4, pc}
 80014fe:	bf00      	nop
 8001500:	200003a0 	.word	0x200003a0

08001504 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001504:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001506:	f001 010f 	and.w	r1, r1, #15
 800150a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	2004      	movs	r0, #4
 8001512:	f7ff ff69 	bl	80013e8 <NRF24_write_register>
}
 8001516:	bd08      	pop	{r3, pc}

08001518 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001518:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800151a:	4601      	mov	r1, r0
 800151c:	287f      	cmp	r0, #127	; 0x7f
 800151e:	bf28      	it	cs
 8001520:	217f      	movcs	r1, #127	; 0x7f
 8001522:	2005      	movs	r0, #5
 8001524:	f7ff ff60 	bl	80013e8 <NRF24_write_register>
}
 8001528:	bd08      	pop	{r3, pc}
	...

0800152c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 800152c:	2820      	cmp	r0, #32
 800152e:	bf28      	it	cs
 8001530:	2020      	movcs	r0, #32
 8001532:	4b01      	ldr	r3, [pc, #4]	; (8001538 <NRF24_setPayloadSize+0xc>)
 8001534:	7018      	strb	r0, [r3, #0]
}
 8001536:	4770      	bx	lr
 8001538:	200003a0 	.word	0x200003a0

0800153c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 800153c:	4b01      	ldr	r3, [pc, #4]	; (8001544 <NRF24_getPayloadSize+0x8>)
 800153e:	7818      	ldrb	r0, [r3, #0]
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200003a0 	.word	0x200003a0

08001548 <NRF24_read_payload>:
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	4606      	mov	r6, r0
 800154e:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001550:	f7ff fff4 	bl	800153c <NRF24_getPayloadSize>
 8001554:	4604      	mov	r4, r0
 8001556:	42a8      	cmp	r0, r5
 8001558:	d817      	bhi.n	800158a <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fed6 	bl	800130c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001560:	a902      	add	r1, sp, #8
 8001562:	2361      	movs	r3, #97	; 0x61
 8001564:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,2);
 8001568:	4d09      	ldr	r5, [pc, #36]	; (8001590 <NRF24_read_payload+0x48>)
 800156a:	2302      	movs	r3, #2
 800156c:	2201      	movs	r2, #1
 800156e:	4628      	mov	r0, r5
 8001570:	f003 fcd8 	bl	8004f24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,2);
 8001574:	2302      	movs	r3, #2
 8001576:	b2a2      	uxth	r2, r4
 8001578:	4631      	mov	r1, r6
 800157a:	4628      	mov	r0, r5
 800157c:	f003 ff29 	bl	80053d2 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fec3 	bl	800130c <NRF24_csn>
}
 8001586:	b002      	add	sp, #8
 8001588:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800158a:	462c      	mov	r4, r5
 800158c:	e7e5      	b.n	800155a <NRF24_read_payload+0x12>
 800158e:	bf00      	nop
 8001590:	200002bc 	.word	0x200002bc

08001594 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001594:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001596:	2060      	movs	r0, #96	; 0x60
 8001598:	f7ff fee4 	bl	8001364 <NRF24_read_register>
}
 800159c:	bd08      	pop	{r3, pc}

0800159e <NRF24_read>:
{
 800159e:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 80015a0:	f7ff ffd2 	bl	8001548 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80015a4:	2017      	movs	r0, #23
 80015a6:	f7ff fedd 	bl	8001364 <NRF24_read_register>
 80015aa:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 80015ae:	f7ff ff79 	bl	80014a4 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80015b2:	f7ff ffef 	bl	8001594 <NRF24_getDynamicPayloadSize>
}
 80015b6:	4620      	mov	r0, r4
 80015b8:	bd10      	pop	{r4, pc}

080015ba <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80015ba:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015bc:	201d      	movs	r0, #29
 80015be:	f7ff fed1 	bl	8001364 <NRF24_read_register>
 80015c2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80015c6:	201d      	movs	r0, #29
 80015c8:	f7ff ff0e 	bl	80013e8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	201c      	movs	r0, #28
 80015d0:	f7ff ff0a 	bl	80013e8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80015d4:	bd08      	pop	{r3, pc}

080015d6 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80015d6:	b508      	push	{r3, lr}
	if ( enable )
 80015d8:	b920      	cbnz	r0, 80015e4 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80015da:	2100      	movs	r1, #0
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff ff03 	bl	80013e8 <NRF24_write_register>
}
 80015e2:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80015e4:	213f      	movs	r1, #63	; 0x3f
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fefe 	bl	80013e8 <NRF24_write_register>
 80015ec:	e7f9      	b.n	80015e2 <NRF24_setAutoAck+0xc>

080015ee <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80015f2:	2006      	movs	r0, #6
 80015f4:	f7ff feb6 	bl	8001364 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015f8:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80015fc:	2c03      	cmp	r4, #3
 80015fe:	d009      	beq.n	8001614 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8001600:	2c02      	cmp	r4, #2
 8001602:	d00d      	beq.n	8001620 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 8001604:	2c01      	cmp	r4, #1
 8001606:	d00e      	beq.n	8001626 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 8001608:	b134      	cbz	r4, 8001618 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 800160a:	2c04      	cmp	r4, #4
 800160c:	d104      	bne.n	8001618 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800160e:	f041 0106 	orr.w	r1, r1, #6
 8001612:	e001      	b.n	8001618 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001614:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001618:	2006      	movs	r0, #6
 800161a:	f7ff fee5 	bl	80013e8 <NRF24_write_register>
}
 800161e:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8001620:	f041 0104 	orr.w	r1, r1, #4
 8001624:	e7f8      	b.n	8001618 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 8001626:	f041 0102 	orr.w	r1, r1, #2
 800162a:	e7f5      	b.n	8001618 <NRF24_setPALevel+0x2a>

0800162c <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fe97 	bl	8001364 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001636:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 800163a:	2d02      	cmp	r5, #2
 800163c:	d00c      	beq.n	8001658 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 800163e:	2d01      	cmp	r5, #1
 8001640:	d00d      	beq.n	800165e <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8001642:	4621      	mov	r1, r4
 8001644:	2006      	movs	r0, #6
 8001646:	f7ff fecf 	bl	80013e8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800164a:	2006      	movs	r0, #6
 800164c:	f7ff fe8a 	bl	8001364 <NRF24_read_register>
 8001650:	42a0      	cmp	r0, r4
 8001652:	d007      	beq.n	8001664 <NRF24_setDataRate+0x38>
	bool result = false;
 8001654:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 8001656:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 8001658:	f044 0420 	orr.w	r4, r4, #32
 800165c:	e7f1      	b.n	8001642 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 800165e:	f044 0408 	orr.w	r4, r4, #8
 8001662:	e7ee      	b.n	8001642 <NRF24_setDataRate+0x16>
		result = true;
 8001664:	2001      	movs	r0, #1
 8001666:	e7f6      	b.n	8001656 <NRF24_setDataRate+0x2a>

08001668 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001668:	b510      	push	{r4, lr}
 800166a:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fe79 	bl	8001364 <NRF24_read_register>
 8001672:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001676:	b11c      	cbz	r4, 8001680 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8001678:	2c01      	cmp	r4, #1
 800167a:	d005      	beq.n	8001688 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 800167c:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff feb1 	bl	80013e8 <NRF24_write_register>
}
 8001686:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 8001688:	f041 0108 	orr.w	r1, r1, #8
 800168c:	e7f8      	b.n	8001680 <NRF24_setCRCLength+0x18>

0800168e <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800168e:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fe67 	bl	8001364 <NRF24_read_register>
 8001696:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fea4 	bl	80013e8 <NRF24_write_register>
}
 80016a0:	bd08      	pop	{r3, pc}

080016a2 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80016a2:	b570      	push	{r4, r5, r6, lr}
 80016a4:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 80016a6:	f7ff ff03 	bl	80014b0 <NRF24_get_status>
 80016aa:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2501      	movne	r5, #1
 80016b4:	2500      	moveq	r5, #0

	if (result)
 80016b6:	d00b      	beq.n	80016d0 <NRF24_availablePipe+0x2e>
 80016b8:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80016ba:	b116      	cbz	r6, 80016c2 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80016bc:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80016c0:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	2007      	movs	r0, #7
 80016c6:	f7ff fe8f 	bl	80013e8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80016ca:	f014 0f20 	tst.w	r4, #32
 80016ce:	d101      	bne.n	80016d4 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80016d0:	4628      	mov	r0, r5
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80016d4:	2120      	movs	r1, #32
 80016d6:	2007      	movs	r0, #7
 80016d8:	f7ff fe86 	bl	80013e8 <NRF24_write_register>
 80016dc:	e7f8      	b.n	80016d0 <NRF24_availablePipe+0x2e>

080016de <NRF24_available>:
{
 80016de:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffde 	bl	80016a2 <NRF24_availablePipe>
}
 80016e6:	bd08      	pop	{r3, pc}

080016e8 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe38 	bl	8001364 <NRF24_read_register>
 80016f4:	f020 0101 	bic.w	r1, r0, #1
 80016f8:	f041 0102 	orr.w	r1, r1, #2
 80016fc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fe71 	bl	80013e8 <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 8001706:	2096      	movs	r0, #150	; 0x96
 8001708:	f7ff fdfc 	bl	8001304 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 800170c:	4629      	mov	r1, r5
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff fea4 	bl	800145c <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fe0f 	bl	8001338 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 800171a:	200f      	movs	r0, #15
 800171c:	f7ff fdf2 	bl	8001304 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fe09 	bl	8001338 <NRF24_ce>
}
 8001726:	bd38      	pop	{r3, r4, r5, pc}

08001728 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	4605      	mov	r5, r0
 800172c:	460f      	mov	r7, r1
 800172e:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 8001730:	f7ff febe 	bl	80014b0 <NRF24_get_status>
 8001734:	4604      	mov	r4, r0
	*tx_ok = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800173a:	2170      	movs	r1, #112	; 0x70
 800173c:	2007      	movs	r0, #7
 800173e:	f7ff fe53 	bl	80013e8 <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8001742:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8001746:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8001748:	f3c4 1300 	ubfx	r3, r4, #4, #1
 800174c:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 800174e:	f3c4 1480 	ubfx	r4, r4, #6, #1
 8001752:	7034      	strb	r4, [r6, #0]
}
 8001754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001756 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001756:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001758:	2170      	movs	r1, #112	; 0x70
 800175a:	2007      	movs	r0, #7
 800175c:	f7ff fe44 	bl	80013e8 <NRF24_write_register>
}
 8001760:	bd08      	pop	{r3, pc}
	...

08001764 <NRF24_write>:
{
 8001764:	b530      	push	{r4, r5, lr}
 8001766:	b083      	sub	sp, #12
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
	NRF24_resetStatus();
 800176c:	f7ff fff3 	bl	8001756 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001770:	4629      	mov	r1, r5
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff ffb8 	bl	80016e8 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 8001778:	f000 fcc8 	bl	800210c <HAL_GetTick>
 800177c:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800177e:	2201      	movs	r2, #1
 8001780:	f10d 0107 	add.w	r1, sp, #7
 8001784:	2008      	movs	r0, #8
 8001786:	f7ff fe0f 	bl	80013a8 <NRF24_read_registerN>
		status = NRF24_get_status();
 800178a:	f7ff fe91 	bl	80014b0 <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800178e:	f010 0f30 	tst.w	r0, #48	; 0x30
 8001792:	d104      	bne.n	800179e <NRF24_write+0x3a>
 8001794:	f000 fcba 	bl	800210c <HAL_GetTick>
 8001798:	1b00      	subs	r0, r0, r4
 800179a:	2809      	cmp	r0, #9
 800179c:	d9ef      	bls.n	800177e <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800179e:	4c0c      	ldr	r4, [pc, #48]	; (80017d0 <NRF24_write+0x6c>)
 80017a0:	4622      	mov	r2, r4
 80017a2:	f10d 0105 	add.w	r1, sp, #5
 80017a6:	f10d 0006 	add.w	r0, sp, #6
 80017aa:	f7ff ffbd 	bl	8001728 <NRF24_whatHappened>
	retStatus = tx_ok;
 80017ae:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 80017b2:	7823      	ldrb	r3, [r4, #0]
 80017b4:	b933      	cbnz	r3, 80017c4 <NRF24_write+0x60>
	NRF24_available();
 80017b6:	f7ff ff92 	bl	80016de <NRF24_available>
	NRF24_flush_tx();
 80017ba:	f7ff fe6d 	bl	8001498 <NRF24_flush_tx>
}
 80017be:	4628      	mov	r0, r5
 80017c0:	b003      	add	sp, #12
 80017c2:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 80017c4:	f7ff fee6 	bl	8001594 <NRF24_getDynamicPayloadSize>
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <NRF24_write+0x70>)
 80017ca:	7018      	strb	r0, [r3, #0]
 80017cc:	e7f3      	b.n	80017b6 <NRF24_write+0x52>
 80017ce:	bf00      	nop
 80017d0:	200002b0 	.word	0x200002b0
 80017d4:	200002b1 	.word	0x200002b1

080017d8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80017d8:	b500      	push	{lr}
 80017da:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fd95 	bl	800130c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80017e2:	2350      	movs	r3, #80	; 0x50
 80017e4:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80017e8:	2373      	movs	r3, #115	; 0x73
 80017ea:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80017ee:	2302      	movs	r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	a901      	add	r1, sp, #4
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <NRF24_ACTIVATE_cmd+0x30>)
 80017f6:	f003 fb95 	bl	8004f24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fd86 	bl	800130c <NRF24_csn>
}
 8001800:	b003      	add	sp, #12
 8001802:	f85d fb04 	ldr.w	pc, [sp], #4
 8001806:	bf00      	nop
 8001808:	200002bc 	.word	0x200002bc

0800180c <NRF24_enableAckPayload>:
{
 800180c:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800180e:	201d      	movs	r0, #29
 8001810:	f7ff fda8 	bl	8001364 <NRF24_read_register>
 8001814:	f040 0106 	orr.w	r1, r0, #6
 8001818:	b2c9      	uxtb	r1, r1
 800181a:	201d      	movs	r0, #29
 800181c:	f7ff fde4 	bl	80013e8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001820:	201d      	movs	r0, #29
 8001822:	f7ff fd9f 	bl	8001364 <NRF24_read_register>
 8001826:	b148      	cbz	r0, 800183c <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001828:	201c      	movs	r0, #28
 800182a:	f7ff fd9b 	bl	8001364 <NRF24_read_register>
 800182e:	f040 0103 	orr.w	r1, r0, #3
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	201c      	movs	r0, #28
 8001836:	f7ff fdd7 	bl	80013e8 <NRF24_write_register>
}
 800183a:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 800183c:	f7ff ffcc 	bl	80017d8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001840:	201d      	movs	r0, #29
 8001842:	f7ff fd8f 	bl	8001364 <NRF24_read_register>
 8001846:	f040 0106 	orr.w	r1, r0, #6
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	201d      	movs	r0, #29
 800184e:	f7ff fdcb 	bl	80013e8 <NRF24_write_register>
 8001852:	e7e9      	b.n	8001828 <NRF24_enableAckPayload+0x1c>

08001854 <NRF24_begin>:
{
 8001854:	b082      	sub	sp, #8
 8001856:	b570      	push	{r4, r5, r6, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	4606      	mov	r6, r0
 800185c:	460d      	mov	r5, r1
 800185e:	4614      	mov	r4, r2
 8001860:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 8001862:	2264      	movs	r2, #100	; 0x64
 8001864:	4961      	ldr	r1, [pc, #388]	; (80019ec <NRF24_begin+0x198>)
 8001866:	4862      	ldr	r0, [pc, #392]	; (80019f0 <NRF24_begin+0x19c>)
 8001868:	f008 fd1a 	bl	800a2a0 <memcpy>
	nrf24_PORT = nrf24PORT;
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <NRF24_begin+0x1a0>)
 800186e:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <NRF24_begin+0x1a4>)
 8001872:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <NRF24_begin+0x1a8>)
 8001876:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff fd47 	bl	800130c <NRF24_csn>
	NRF24_ce(0);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fd5a 	bl	8001338 <NRF24_ce>
	HAL_Delay(5);
 8001884:	2005      	movs	r0, #5
 8001886:	f000 fc47 	bl	8002118 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800188a:	2108      	movs	r1, #8
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fdab 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001892:	213f      	movs	r1, #63	; 0x3f
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fda7 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800189a:	2103      	movs	r1, #3
 800189c:	2002      	movs	r0, #2
 800189e:	f7ff fda3 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80018a2:	2103      	movs	r1, #3
 80018a4:	4608      	mov	r0, r1
 80018a6:	f7ff fd9f 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80018aa:	2103      	movs	r1, #3
 80018ac:	2004      	movs	r0, #4
 80018ae:	f7ff fd9b 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80018b2:	2102      	movs	r1, #2
 80018b4:	2005      	movs	r0, #5
 80018b6:	f7ff fd97 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80018ba:	210f      	movs	r1, #15
 80018bc:	2006      	movs	r0, #6
 80018be:	f7ff fd93 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80018c2:	210e      	movs	r1, #14
 80018c4:	2007      	movs	r0, #7
 80018c6:	f7ff fd8f 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80018ca:	2100      	movs	r1, #0
 80018cc:	2008      	movs	r0, #8
 80018ce:	f7ff fd8b 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80018d2:	2100      	movs	r1, #0
 80018d4:	2009      	movs	r0, #9
 80018d6:	f7ff fd87 	bl	80013e8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80018da:	24e7      	movs	r4, #231	; 0xe7
 80018dc:	f88d 4004 	strb.w	r4, [sp, #4]
 80018e0:	f88d 4003 	strb.w	r4, [sp, #3]
 80018e4:	f88d 4002 	strb.w	r4, [sp, #2]
 80018e8:	f88d 4001 	strb.w	r4, [sp, #1]
 80018ec:	ad02      	add	r5, sp, #8
 80018ee:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80018f2:	2205      	movs	r2, #5
 80018f4:	4629      	mov	r1, r5
 80018f6:	200a      	movs	r0, #10
 80018f8:	f7ff fd90 	bl	800141c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80018fc:	23c2      	movs	r3, #194	; 0xc2
 80018fe:	f88d 3004 	strb.w	r3, [sp, #4]
 8001902:	f88d 3003 	strb.w	r3, [sp, #3]
 8001906:	f88d 3002 	strb.w	r3, [sp, #2]
 800190a:	f88d 3001 	strb.w	r3, [sp, #1]
 800190e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001912:	2205      	movs	r2, #5
 8001914:	4629      	mov	r1, r5
 8001916:	200b      	movs	r0, #11
 8001918:	f7ff fd80 	bl	800141c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800191c:	21c3      	movs	r1, #195	; 0xc3
 800191e:	200c      	movs	r0, #12
 8001920:	f7ff fd62 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001924:	21c4      	movs	r1, #196	; 0xc4
 8001926:	200d      	movs	r0, #13
 8001928:	f7ff fd5e 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800192c:	21c5      	movs	r1, #197	; 0xc5
 800192e:	200e      	movs	r0, #14
 8001930:	f7ff fd5a 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001934:	21c6      	movs	r1, #198	; 0xc6
 8001936:	200f      	movs	r0, #15
 8001938:	f7ff fd56 	bl	80013e8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800193c:	f88d 4004 	strb.w	r4, [sp, #4]
 8001940:	f88d 4003 	strb.w	r4, [sp, #3]
 8001944:	f88d 4002 	strb.w	r4, [sp, #2]
 8001948:	f88d 4001 	strb.w	r4, [sp, #1]
 800194c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001950:	2205      	movs	r2, #5
 8001952:	4629      	mov	r1, r5
 8001954:	2010      	movs	r0, #16
 8001956:	f7ff fd61 	bl	800141c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800195a:	2100      	movs	r1, #0
 800195c:	2011      	movs	r0, #17
 800195e:	f7ff fd43 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001962:	2100      	movs	r1, #0
 8001964:	2012      	movs	r0, #18
 8001966:	f7ff fd3f 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800196a:	2100      	movs	r1, #0
 800196c:	2013      	movs	r0, #19
 800196e:	f7ff fd3b 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001972:	2100      	movs	r1, #0
 8001974:	2014      	movs	r0, #20
 8001976:	f7ff fd37 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	2015      	movs	r0, #21
 800197e:	f7ff fd33 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2016      	movs	r0, #22
 8001986:	f7ff fd2f 	bl	80013e8 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800198a:	f7ff ff25 	bl	80017d8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800198e:	2100      	movs	r1, #0
 8001990:	201c      	movs	r0, #28
 8001992:	f7ff fd29 	bl	80013e8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001996:	2100      	movs	r1, #0
 8001998:	201d      	movs	r0, #29
 800199a:	f7ff fd25 	bl	80013e8 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 800199e:	210f      	movs	r1, #15
 80019a0:	4608      	mov	r0, r1
 80019a2:	f7ff fdaf 	bl	8001504 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 80019a6:	2002      	movs	r0, #2
 80019a8:	f7ff fe21 	bl	80015ee <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fe3d 	bl	800162c <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7ff fe58 	bl	8001668 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80019b8:	f7ff fdff 	bl	80015ba <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80019bc:	2020      	movs	r0, #32
 80019be:	f7ff fdb5 	bl	800152c <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fe07 	bl	80015d6 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80019c8:	f7ff ff20 	bl	800180c <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80019cc:	f7ff fec3 	bl	8001756 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80019d0:	204c      	movs	r0, #76	; 0x4c
 80019d2:	f7ff fda1 	bl	8001518 <NRF24_setChannel>
	NRF24_flush_tx();
 80019d6:	f7ff fd5f 	bl	8001498 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019da:	f7ff fd63 	bl	80014a4 <NRF24_flush_rx>
	NRF24_powerDown();
 80019de:	f7ff fe56 	bl	800168e <NRF24_powerDown>
}
 80019e2:	b002      	add	sp, #8
 80019e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80019e8:	b002      	add	sp, #8
 80019ea:	4770      	bx	lr
 80019ec:	200048a0 	.word	0x200048a0
 80019f0:	200002bc 	.word	0x200002bc
 80019f4:	200002b8 	.word	0x200002b8
 80019f8:	200002b4 	.word	0x200002b4
 80019fc:	200002b2 	.word	0x200002b2

08001a00 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001a00:	b084      	sub	sp, #16
 8001a02:	b508      	push	{r3, lr}
 8001a04:	f10d 0c08 	add.w	ip, sp, #8
 8001a08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	4661      	mov	r1, ip
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <nrf24_DebugUART_Init+0x20>)
 8001a12:	f008 fc45 	bl	800a2a0 <memcpy>
}
 8001a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a1a:	b004      	add	sp, #16
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000320 	.word	0x20000320

08001a24 <initLCD>:

char time_buffer[8];
char date_buffer[12];


void initLCD(struct GPS_str GPS) {
 8001a24:	b084      	sub	sp, #16
 8001a26:	b500      	push	{lr}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	f10d 0c10 	add.w	ip, sp, #16
 8001a2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8001a32:	f005 fbe5 	bl	8007200 <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE()
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <initLCD+0x70>)
 8001a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	9b01      	ldr	r3, [sp, #4]
	; /* Enable the CRC Module */

	BSP_TS_Init(480, 272);
 8001a4a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a4e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a52:	f005 fc15 	bl	8007280 <BSP_TS_Init>

	BSP_LCD_Init();
 8001a56:	f005 fa71 	bl	8006f3c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001a5a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f004 fe6c 	bl	800673c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8001a64:	f005 f99c 	bl	8006da0 <BSP_LCD_DisplayOn>

	BSP_LCD_SelectLayer(0);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f004 fea7 	bl	80067bc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001a6e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a72:	f004 fed1 	bl	8006818 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <initLCD+0x74>)
 8001a78:	f004 fea6 	bl	80067c8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 40);
 8001a7c:	2328      	movs	r3, #40	; 0x28
 8001a7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a82:	2100      	movs	r1, #0
 8001a84:	4608      	mov	r0, r1
 8001a86:	f005 f8d7 	bl	8006c38 <BSP_LCD_FillRect>
	GPS.Speed = 0.00;
	GPS.Year = 0;
	GPS.fix_quality = 0;
	GPS.sattelite_no = 0;

}
 8001a8a:	b003      	add	sp, #12
 8001a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a90:	b004      	add	sp, #16
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800
 8001a98:	ff000080 	.word	0xff000080

08001a9c <n_tu>:
}

/** Number on countu **/

int n_tu(int number, int count) {
	int result = 1;
 8001a9c:	2301      	movs	r3, #1
	while (count-- > 0)
 8001a9e:	e002      	b.n	8001aa6 <n_tu+0xa>
		result *= number;
 8001aa0:	fb00 f303 	mul.w	r3, r0, r3
	while (count-- > 0)
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	1e4a      	subs	r2, r1, #1
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	dcf9      	bgt.n	8001aa0 <n_tu+0x4>

	return result;
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	4770      	bx	lr

08001ab0 <float_to_string>:
bool float_to_string(float f, char r[]) {
 8001ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab4:	ed2d 8b02 	vpush	{d8}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	9003      	str	r0, [sp, #12]
	if (isnan(f)) {
 8001abc:	eeb4 0a40 	vcmp.f32	s0, s0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	f180 80bb 	bvs.w	8001c3e <float_to_string+0x18e>
 8001ac8:	eef0 8a40 	vmov.f32	s17, s0
	if (f < 0) {
 8001acc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d40e      	bmi.n	8001af4 <float_to_string+0x44>
	sign = -1;   // -1 == positive number
 8001ad6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001ada:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	number = f;
 8001ade:	ee18 0a90 	vmov	r0, s17
 8001ae2:	f7ff fa71 	bl	8000fc8 <__aeabi_f2lz>
	number2 = f;
 8001ae6:	eeb0 8a68 	vmov.f32	s16, s17
	length2 = 0; // Size of tenth
 8001aea:	2200      	movs	r2, #0
 8001aec:	2300      	movs	r3, #0
 8001aee:	4690      	mov	r8, r2
 8001af0:	4699      	mov	r9, r3
	while ((number2 - (float) number) != 0.0
 8001af2:	e019      	b.n	8001b28 <float_to_string+0x78>
		f *= -1;
 8001af4:	eef1 8a40 	vneg.f32	s17, s0
		sign = '-';
 8001af8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8001afc:	f04f 0b00 	mov.w	fp, #0
 8001b00:	e7ed      	b.n	8001ade <float_to_string+0x2e>
		number2 = f * (n_tu(10.0, length2 + 1));
 8001b02:	f108 0101 	add.w	r1, r8, #1
 8001b06:	200a      	movs	r0, #10
 8001b08:	f7ff ffc8 	bl	8001a9c <n_tu>
 8001b0c:	ee07 0a90 	vmov	s15, r0
 8001b10:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b14:	ee28 8a28 	vmul.f32	s16, s16, s17
		number = number2;
 8001b18:	ee18 0a10 	vmov	r0, s16
 8001b1c:	f7ff fa54 	bl	8000fc8 <__aeabi_f2lz>
		length2++;
 8001b20:	f118 0801 	adds.w	r8, r8, #1
 8001b24:	f149 0900 	adc.w	r9, r9, #0
	while ((number2 - (float) number) != 0.0
 8001b28:	f7ff f9a8 	bl	8000e7c <__aeabi_l2f>
 8001b2c:	ee07 0a90 	vmov	s15, r0
 8001b30:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	d004      	beq.n	8001b48 <float_to_string+0x98>
			&& !((number2 - (float) number) < 0.0)) {
 8001b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d5dc      	bpl.n	8001b02 <float_to_string+0x52>
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b4c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	bfd4      	ite	le
 8001b56:	2401      	movle	r4, #1
 8001b58:	2400      	movgt	r4, #0
 8001b5a:	b2e4      	uxtb	r4, r4
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	e006      	b.n	8001b6e <float_to_string+0xbe>
		f /= 10;
 8001b60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001b64:	eec8 8aa7 	vdiv.f32	s17, s17, s15
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b68:	3401      	adds	r4, #1
 8001b6a:	f145 0500 	adc.w	r5, r5, #0
 8001b6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b72:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dcf1      	bgt.n	8001b60 <float_to_string+0xb0>
	length = length + 1 + length2;
 8001b7c:	1c66      	adds	r6, r4, #1
 8001b7e:	f145 0700 	adc.w	r7, r5, #0
 8001b82:	eb18 0806 	adds.w	r8, r8, r6
 8001b86:	eb49 0907 	adc.w	r9, r9, r7
	number = number2;
 8001b8a:	ee18 0a10 	vmov	r0, s16
 8001b8e:	f7ff fa1b 	bl	8000fc8 <__aeabi_f2lz>
 8001b92:	e9cd 0100 	strd	r0, r1, [sp]
	if (sign == '-') {
 8001b96:	f1bb 0f00 	cmp.w	fp, #0
 8001b9a:	bf08      	it	eq
 8001b9c:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001ba0:	d002      	beq.n	8001ba8 <float_to_string+0xf8>
	for (i = length; i >= 0; i--) {
 8001ba2:	4646      	mov	r6, r8
 8001ba4:	464f      	mov	r7, r9
 8001ba6:	e026      	b.n	8001bf6 <float_to_string+0x146>
		length++;
 8001ba8:	f118 0801 	adds.w	r8, r8, #1
 8001bac:	f149 0900 	adc.w	r9, r9, #0
		position++;
 8001bb0:	4634      	mov	r4, r6
 8001bb2:	463d      	mov	r5, r7
 8001bb4:	e7f5      	b.n	8001ba2 <float_to_string+0xf2>
			r[i] = '\0';
 8001bb6:	9b03      	ldr	r3, [sp, #12]
 8001bb8:	4433      	add	r3, r6
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e016      	b.n	8001bee <float_to_string+0x13e>
			r[i] = '.';
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	4433      	add	r3, r6
 8001bc4:	222e      	movs	r2, #46	; 0x2e
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e011      	b.n	8001bee <float_to_string+0x13e>
			r[i] = (number % 10) + '0';
 8001bca:	220a      	movs	r2, #10
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bd2:	f7ff f991 	bl	8000ef8 <__aeabi_ldivmod>
 8001bd6:	9b03      	ldr	r3, [sp, #12]
 8001bd8:	4433      	add	r3, r6
 8001bda:	3230      	adds	r2, #48	; 0x30
 8001bdc:	701a      	strb	r2, [r3, #0]
			number /= 10;
 8001bde:	220a      	movs	r2, #10
 8001be0:	2300      	movs	r3, #0
 8001be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001be6:	f7ff f987 	bl	8000ef8 <__aeabi_ldivmod>
 8001bea:	e9cd 0100 	strd	r0, r1, [sp]
	for (i = length; i >= 0; i--) {
 8001bee:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8001bf2:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	f177 0300 	sbcs.w	r3, r7, #0
 8001bfc:	db19      	blt.n	8001c32 <float_to_string+0x182>
		if (i == (length))
 8001bfe:	45b9      	cmp	r9, r7
 8001c00:	bf08      	it	eq
 8001c02:	45b0      	cmpeq	r8, r6
 8001c04:	d0d7      	beq.n	8001bb6 <float_to_string+0x106>
		else if (i == (position))
 8001c06:	42af      	cmp	r7, r5
 8001c08:	bf08      	it	eq
 8001c0a:	42a6      	cmpeq	r6, r4
 8001c0c:	d0d8      	beq.n	8001bc0 <float_to_string+0x110>
		else if (sign == '-' && i == 0)
 8001c0e:	f1bb 0f00 	cmp.w	fp, #0
 8001c12:	bf06      	itte	eq
 8001c14:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	ea56 0207 	orrs.w	r2, r6, r7
 8001c20:	bf18      	it	ne
 8001c22:	2300      	movne	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0d0      	beq.n	8001bca <float_to_string+0x11a>
			r[i] = '-';
 8001c28:	9b03      	ldr	r3, [sp, #12]
 8001c2a:	4433      	add	r3, r6
 8001c2c:	222d      	movs	r2, #45	; 0x2d
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e7dd      	b.n	8001bee <float_to_string+0x13e>
	return 1;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	b005      	add	sp, #20
 8001c36:	ecbd 8b02 	vpop	{d8}
 8001c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e7f8      	b.n	8001c34 <float_to_string+0x184>
	...

08001c44 <drawMainScreen>:
		struct Misc_str Misc, float *enc_pid) {
 8001c44:	b084      	sub	sp, #16
 8001c46:	b570      	push	{r4, r5, r6, lr}
 8001c48:	b08a      	sub	sp, #40	; 0x28
 8001c4a:	ac0e      	add	r4, sp, #56	; 0x38
 8001c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001c50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c54:	f004 fdc4 	bl	80067e0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f004 fdb4 	bl	80067c8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&FontAvenir12);
 8001c60:	48d8      	ldr	r0, [pc, #864]	; (8001fc4 <drawMainScreen+0x380>)
 8001c62:	f004 fdcb 	bl	80067fc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30, 50, (uint8_t *) "GPS", LEFT_MODE);
 8001c66:	2303      	movs	r3, #3
 8001c68:	4ad7      	ldr	r2, [pc, #860]	; (8001fc8 <drawMainScreen+0x384>)
 8001c6a:	2132      	movs	r1, #50	; 0x32
 8001c6c:	201e      	movs	r0, #30
 8001c6e:	f004 fee7 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 80, (uint8_t *) "LONG.", LEFT_MODE);
 8001c72:	2303      	movs	r3, #3
 8001c74:	4ad5      	ldr	r2, [pc, #852]	; (8001fcc <drawMainScreen+0x388>)
 8001c76:	2150      	movs	r1, #80	; 0x50
 8001c78:	200e      	movs	r0, #14
 8001c7a:	f004 fee1 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 100, (uint8_t *) "LAT.", LEFT_MODE);
 8001c7e:	2303      	movs	r3, #3
 8001c80:	4ad3      	ldr	r2, [pc, #844]	; (8001fd0 <drawMainScreen+0x38c>)
 8001c82:	2164      	movs	r1, #100	; 0x64
 8001c84:	200e      	movs	r0, #14
 8001c86:	f004 fedb 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 140, (uint8_t *) "SPEED.", LEFT_MODE);
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	4ad1      	ldr	r2, [pc, #836]	; (8001fd4 <drawMainScreen+0x390>)
 8001c8e:	218c      	movs	r1, #140	; 0x8c
 8001c90:	200e      	movs	r0, #14
 8001c92:	f004 fed5 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 120, (uint8_t *) "ALT.", LEFT_MODE);
 8001c96:	2303      	movs	r3, #3
 8001c98:	4acf      	ldr	r2, [pc, #828]	; (8001fd8 <drawMainScreen+0x394>)
 8001c9a:	2178      	movs	r1, #120	; 0x78
 8001c9c:	200e      	movs	r0, #14
 8001c9e:	f004 fecf 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 160, (uint8_t *) "SATS.", LEFT_MODE);
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	4acd      	ldr	r2, [pc, #820]	; (8001fdc <drawMainScreen+0x398>)
 8001ca6:	21a0      	movs	r1, #160	; 0xa0
 8001ca8:	200e      	movs	r0, #14
 8001caa:	f004 fec9 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 180, (uint8_t *) "FIX", LEFT_MODE);
 8001cae:	2303      	movs	r3, #3
 8001cb0:	4acb      	ldr	r2, [pc, #812]	; (8001fe0 <drawMainScreen+0x39c>)
 8001cb2:	21b4      	movs	r1, #180	; 0xb4
 8001cb4:	200e      	movs	r0, #14
 8001cb6:	f004 fec3 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 240, (uint8_t *) "THRT", LEFT_MODE);
 8001cba:	2303      	movs	r3, #3
 8001cbc:	4ac9      	ldr	r2, [pc, #804]	; (8001fe4 <drawMainScreen+0x3a0>)
 8001cbe:	21f0      	movs	r1, #240	; 0xf0
 8001cc0:	200e      	movs	r0, #14
 8001cc2:	f004 febd 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(100, 240, (uint8_t *) throttle_str, LEFT_MODE);
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	4ac7      	ldr	r2, [pc, #796]	; (8001fe8 <drawMainScreen+0x3a4>)
 8001cca:	21f0      	movs	r1, #240	; 0xf0
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	f004 feb7 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Longitude, long_str);
 8001cd2:	4cc6      	ldr	r4, [pc, #792]	; (8001fec <drawMainScreen+0x3a8>)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8001cda:	f7ff fee9 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 80, (uint8_t *) long_str, LEFT_MODE);
 8001cde:	2303      	movs	r3, #3
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	2150      	movs	r1, #80	; 0x50
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	f004 feab 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Latitude, latt_str);
 8001cea:	4cc1      	ldr	r4, [pc, #772]	; (8001ff0 <drawMainScreen+0x3ac>)
 8001cec:	4620      	mov	r0, r4
 8001cee:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
 8001cf2:	f7ff fedd 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 100, (uint8_t *) latt_str, LEFT_MODE);
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	2164      	movs	r1, #100	; 0x64
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	f004 fe9f 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Speed, speed_str);
 8001d02:	4cbc      	ldr	r4, [pc, #752]	; (8001ff4 <drawMainScreen+0x3b0>)
 8001d04:	4620      	mov	r0, r4
 8001d06:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 8001d0a:	f7ff fed1 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 140, (uint8_t *) speed_str, LEFT_MODE);
 8001d0e:	2303      	movs	r3, #3
 8001d10:	4622      	mov	r2, r4
 8001d12:	218c      	movs	r1, #140	; 0x8c
 8001d14:	2064      	movs	r0, #100	; 0x64
 8001d16:	f004 fe93 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Altitude, alt_str);
 8001d1a:	4cb7      	ldr	r4, [pc, #732]	; (8001ff8 <drawMainScreen+0x3b4>)
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 8001d22:	f7ff fec5 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 120, (uint8_t *) alt_str, LEFT_MODE);
 8001d26:	2303      	movs	r3, #3
 8001d28:	4622      	mov	r2, r4
 8001d2a:	2178      	movs	r1, #120	; 0x78
 8001d2c:	2064      	movs	r0, #100	; 0x64
 8001d2e:	f004 fe87 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	snprintf(sattelite_no_str, sizeof(sattelite_no_str), "%d",
 8001d32:	4cb2      	ldr	r4, [pc, #712]	; (8001ffc <drawMainScreen+0x3b8>)
 8001d34:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8001d38:	4ab1      	ldr	r2, [pc, #708]	; (8002000 <drawMainScreen+0x3bc>)
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f009 f907 	bl	800af50 <sniprintf>
	BSP_LCD_DisplayStringAt(100, 160, (uint8_t *) sattelite_no_str, LEFT_MODE);
 8001d42:	2303      	movs	r3, #3
 8001d44:	4622      	mov	r2, r4
 8001d46:	21a0      	movs	r1, #160	; 0xa0
 8001d48:	2064      	movs	r0, #100	; 0x64
 8001d4a:	f004 fe79 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.fix_quality, fix_str);
 8001d4e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8001d52:	ee00 3a10 	vmov	s0, r3
 8001d56:	4cab      	ldr	r4, [pc, #684]	; (8002004 <drawMainScreen+0x3c0>)
 8001d58:	4620      	mov	r0, r4
 8001d5a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001d5e:	f7ff fea7 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 180, (uint8_t *) fix_str, LEFT_MODE);
 8001d62:	2303      	movs	r3, #3
 8001d64:	4622      	mov	r2, r4
 8001d66:	21b4      	movs	r1, #180	; 0xb4
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	f004 fe69 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8001d6e:	48a6      	ldr	r0, [pc, #664]	; (8002008 <drawMainScreen+0x3c4>)
 8001d70:	f004 fd36 	bl	80067e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(80, 10, (uint8_t *) "QUAD", RIGHT_MODE);
 8001d74:	2302      	movs	r3, #2
 8001d76:	4aa5      	ldr	r2, [pc, #660]	; (800200c <drawMainScreen+0x3c8>)
 8001d78:	210a      	movs	r1, #10
 8001d7a:	2050      	movs	r0, #80	; 0x50
 8001d7c:	f004 fe60 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 10, (uint8_t *) "%", RIGHT_MODE);
 8001d80:	4ca3      	ldr	r4, [pc, #652]	; (8002010 <drawMainScreen+0x3cc>)
 8001d82:	2302      	movs	r3, #2
 8001d84:	4622      	mov	r2, r4
 8001d86:	210a      	movs	r1, #10
 8001d88:	201e      	movs	r0, #30
 8001d8a:	f004 fe59 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 10, (uint8_t *) "TX", LEFT_MODE);
 8001d8e:	2303      	movs	r3, #3
 8001d90:	4aa0      	ldr	r2, [pc, #640]	; (8002014 <drawMainScreen+0x3d0>)
 8001d92:	210a      	movs	r1, #10
 8001d94:	200e      	movs	r0, #14
 8001d96:	f004 fe53 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(70, 10, (uint8_t *) "%", LEFT_MODE);
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	210a      	movs	r1, #10
 8001da0:	2046      	movs	r0, #70	; 0x46
 8001da2:	f004 fe4d 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.batteryLevel, quad_battery_str);
 8001da6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8001daa:	ee00 3a10 	vmov	s0, r3
 8001dae:	4c9a      	ldr	r4, [pc, #616]	; (8002018 <drawMainScreen+0x3d4>)
 8001db0:	4620      	mov	r0, r4
 8001db2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001db6:	f7ff fe7b 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(45, 10, (uint8_t *) quad_battery_str, RIGHT_MODE);
 8001dba:	2302      	movs	r3, #2
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	210a      	movs	r1, #10
 8001dc0:	202d      	movs	r0, #45	; 0x2d
 8001dc2:	f004 fe3d 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	itoa(69, tx_battery_str, 10);
 8001dc6:	4c95      	ldr	r4, [pc, #596]	; (800201c <drawMainScreen+0x3d8>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	4621      	mov	r1, r4
 8001dcc:	2045      	movs	r0, #69	; 0x45
 8001dce:	f008 fa65 	bl	800a29c <itoa>
	BSP_LCD_DisplayStringAt(44, 10, (uint8_t *) tx_battery_str, LEFT_MODE);
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	210a      	movs	r1, #10
 8001dd8:	202c      	movs	r0, #44	; 0x2c
 8001dda:	f004 fe31 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	time.tm_hour = GPS.Hours + 1;
 8001dde:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8001de2:	3301      	adds	r3, #1
 8001de4:	9303      	str	r3, [sp, #12]
	time.tm_min = GPS.Minutes;
 8001de6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001dea:	9302      	str	r3, [sp, #8]
	time.tm_sec = GPS.Seconds;
 8001dec:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8001df0:	9301      	str	r3, [sp, #4]
	time.tm_mday = GPS.Day;
 8001df2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001df6:	9304      	str	r3, [sp, #16]
	time.tm_mon = GPS.Month - 1;
 8001df8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	9305      	str	r3, [sp, #20]
	time.tm_isdst = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	9309      	str	r3, [sp, #36]	; 0x24
	strftime(time_buffer, 12, "%H:%M:%S", &time);
 8001e04:	4c86      	ldr	r4, [pc, #536]	; (8002020 <drawMainScreen+0x3dc>)
 8001e06:	ab01      	add	r3, sp, #4
 8001e08:	4a86      	ldr	r2, [pc, #536]	; (8002024 <drawMainScreen+0x3e0>)
 8001e0a:	210c      	movs	r1, #12
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f009 fe59 	bl	800bac4 <strftime>
	strftime(date_buffer, 8, "%d/%m", &time);
 8001e12:	ab01      	add	r3, sp, #4
 8001e14:	4a84      	ldr	r2, [pc, #528]	; (8002028 <drawMainScreen+0x3e4>)
 8001e16:	2108      	movs	r1, #8
 8001e18:	4884      	ldr	r0, [pc, #528]	; (800202c <drawMainScreen+0x3e8>)
 8001e1a:	f009 fe53 	bl	800bac4 <strftime>
	BSP_LCD_DisplayStringAt(140, 10, (uint8_t *) time_buffer, LEFT_MODE);
 8001e1e:	2303      	movs	r3, #3
 8001e20:	4622      	mov	r2, r4
 8001e22:	210a      	movs	r1, #10
 8001e24:	208c      	movs	r0, #140	; 0x8c
 8001e26:	f004 fe0b 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	if (Misc.connection) {
 8001e2a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8096 	beq.w	8001f60 <drawMainScreen+0x31c>
		BSP_LCD_DisplayStringAt(250, 10, (uint8_t *) "CON", LEFT_MODE);
 8001e34:	2303      	movs	r3, #3
 8001e36:	4a7e      	ldr	r2, [pc, #504]	; (8002030 <drawMainScreen+0x3ec>)
 8001e38:	210a      	movs	r1, #10
 8001e3a:	20fa      	movs	r0, #250	; 0xfa
 8001e3c:	f004 fe00 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	if (Misc.airmode) {
 8001e40:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8092 	beq.w	8001f6e <drawMainScreen+0x32a>
		BSP_LCD_DisplayStringAt(300, 10, (uint8_t *) "AIR", LEFT_MODE);
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	4a79      	ldr	r2, [pc, #484]	; (8002034 <drawMainScreen+0x3f0>)
 8001e4e:	210a      	movs	r1, #10
 8001e50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e54:	f004 fdf4 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawCircle(400, 120, 40);
 8001e58:	2228      	movs	r2, #40	; 0x28
 8001e5a:	2178      	movs	r1, #120	; 0x78
 8001e5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e60:	f004 fe56 	bl	8006b10 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8001e64:	4874      	ldr	r0, [pc, #464]	; (8002038 <drawMainScreen+0x3f4>)
 8001e66:	f004 fcaf 	bl	80067c8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 39);
 8001e6a:	2227      	movs	r2, #39	; 0x27
 8001e6c:	2178      	movs	r1, #120	; 0x78
 8001e6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e72:	f004 ff29 	bl	8006cc8 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e7a:	f004 fca5 	bl	80067c8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 5);
 8001e7e:	2205      	movs	r2, #5
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e86:	f004 ff1f 	bl	8006cc8 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001e8a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e8e:	f004 fca7 	bl	80067e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(200, 90, (uint8_t *) "ROLL", LEFT_MODE);
 8001e92:	2303      	movs	r3, #3
 8001e94:	4a69      	ldr	r2, [pc, #420]	; (800203c <drawMainScreen+0x3f8>)
 8001e96:	215a      	movs	r1, #90	; 0x5a
 8001e98:	20c8      	movs	r0, #200	; 0xc8
 8001e9a:	f004 fdd1 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(200, 110, (uint8_t *) "PITCH", LEFT_MODE);
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <drawMainScreen+0x3fc>)
 8001ea2:	216e      	movs	r1, #110	; 0x6e
 8001ea4:	20c8      	movs	r0, #200	; 0xc8
 8001ea6:	f004 fdcb 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(200, 130, (uint8_t *) "YAW", LEFT_MODE);
 8001eaa:	2303      	movs	r3, #3
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <drawMainScreen+0x400>)
 8001eae:	2182      	movs	r1, #130	; 0x82
 8001eb0:	20c8      	movs	r0, #200	; 0xc8
 8001eb2:	f004 fdc5 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.roll, roll_str);
 8001eb6:	4e64      	ldr	r6, [pc, #400]	; (8002048 <drawMainScreen+0x404>)
 8001eb8:	4630      	mov	r0, r6
 8001eba:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
 8001ebe:	f7ff fdf7 	bl	8001ab0 <float_to_string>
	float_to_string(IMU.pitch, pitch_str);
 8001ec2:	4d62      	ldr	r5, [pc, #392]	; (800204c <drawMainScreen+0x408>)
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
 8001eca:	f7ff fdf1 	bl	8001ab0 <float_to_string>
	float_to_string(IMU.yaw, yaw_str);
 8001ece:	4c60      	ldr	r4, [pc, #384]	; (8002050 <drawMainScreen+0x40c>)
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 8001ed6:	f7ff fdeb 	bl	8001ab0 <float_to_string>
	BSP_LCD_DisplayStringAt(300, 90, (uint8_t *) roll_str, LEFT_MODE);
 8001eda:	2303      	movs	r3, #3
 8001edc:	4632      	mov	r2, r6
 8001ede:	215a      	movs	r1, #90	; 0x5a
 8001ee0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ee4:	f004 fdac 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(300, 110, (uint8_t *) pitch_str, LEFT_MODE);
 8001ee8:	2303      	movs	r3, #3
 8001eea:	462a      	mov	r2, r5
 8001eec:	216e      	movs	r1, #110	; 0x6e
 8001eee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef2:	f004 fda5 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(300, 130, (uint8_t *) yaw_str, LEFT_MODE);
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	4622      	mov	r2, r4
 8001efa:	2182      	movs	r1, #130	; 0x82
 8001efc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f00:	f004 fd9e 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	if (Misc.kill) {
 8001f04:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d138      	bne.n	8001f7e <drawMainScreen+0x33a>
		if (!cleared) {
 8001f0c:	4b51      	ldr	r3, [pc, #324]	; (8002054 <drawMainScreen+0x410>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d048      	beq.n	8001fa6 <drawMainScreen+0x362>
		cleared = 1;
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <drawMainScreen+0x410>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
	  BSP_TS_GetState(&ts);
 8001f1a:	4d4f      	ldr	r5, [pc, #316]	; (8002058 <drawMainScreen+0x414>)
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f005 fa11 	bl	8007344 <BSP_TS_GetState>
	  sprintf(xTouchStr, "X: %3d", ts.touchX[0]);
 8001f22:	4c4e      	ldr	r4, [pc, #312]	; (800205c <drawMainScreen+0x418>)
 8001f24:	886a      	ldrh	r2, [r5, #2]
 8001f26:	494e      	ldr	r1, [pc, #312]	; (8002060 <drawMainScreen+0x41c>)
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f009 f845 	bl	800afb8 <siprintf>
	  BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)xTouchStr, LEFT_MODE);
 8001f2e:	2303      	movs	r3, #3
 8001f30:	4622      	mov	r2, r4
 8001f32:	2114      	movs	r1, #20
 8001f34:	4608      	mov	r0, r1
 8001f36:	f004 fd83 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	  sprintf(xTouchStr, "Y: %3d", ts.touchY[0]);
 8001f3a:	89aa      	ldrh	r2, [r5, #12]
 8001f3c:	4949      	ldr	r1, [pc, #292]	; (8002064 <drawMainScreen+0x420>)
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f009 f83a 	bl	800afb8 <siprintf>
	  BSP_LCD_DisplayStringAt(20, 60, (uint8_t *)xTouchStr, LEFT_MODE);
 8001f44:	2303      	movs	r3, #3
 8001f46:	4622      	mov	r2, r4
 8001f48:	213c      	movs	r1, #60	; 0x3c
 8001f4a:	2014      	movs	r0, #20
 8001f4c:	f004 fd78 	bl	8006a40 <BSP_LCD_DisplayStringAt>
	  HAL_Delay(50);
 8001f50:	2032      	movs	r0, #50	; 0x32
 8001f52:	f000 f8e1 	bl	8002118 <HAL_Delay>
}
 8001f56:	b00a      	add	sp, #40	; 0x28
 8001f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f5c:	b004      	add	sp, #16
 8001f5e:	4770      	bx	lr
		BSP_LCD_DisplayStringAt(250, 10, (uint8_t *) "    ", LEFT_MODE);
 8001f60:	2303      	movs	r3, #3
 8001f62:	4a41      	ldr	r2, [pc, #260]	; (8002068 <drawMainScreen+0x424>)
 8001f64:	210a      	movs	r1, #10
 8001f66:	20fa      	movs	r0, #250	; 0xfa
 8001f68:	f004 fd6a 	bl	8006a40 <BSP_LCD_DisplayStringAt>
 8001f6c:	e768      	b.n	8001e40 <drawMainScreen+0x1fc>
		BSP_LCD_DisplayStringAt(300, 10, (uint8_t *) "    ", LEFT_MODE);
 8001f6e:	2303      	movs	r3, #3
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <drawMainScreen+0x424>)
 8001f72:	210a      	movs	r1, #10
 8001f74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f78:	f004 fd62 	bl	8006a40 <BSP_LCD_DisplayStringAt>
 8001f7c:	e76c      	b.n	8001e58 <drawMainScreen+0x214>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f82:	f004 fc2d 	bl	80067e0 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f86:	4839      	ldr	r0, [pc, #228]	; (800206c <drawMainScreen+0x428>)
 8001f88:	f004 fc1e 	bl	80067c8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font20);
 8001f8c:	4838      	ldr	r0, [pc, #224]	; (8002070 <drawMainScreen+0x42c>)
 8001f8e:	f004 fc35 	bl	80067fc <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t *) "EMERGENCY KILL ON",
 8001f92:	2301      	movs	r3, #1
 8001f94:	4a37      	ldr	r2, [pc, #220]	; (8002074 <drawMainScreen+0x430>)
 8001f96:	2150      	movs	r1, #80	; 0x50
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f004 fd51 	bl	8006a40 <BSP_LCD_DisplayStringAt>
		cleared = 0;
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <drawMainScreen+0x410>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e7b9      	b.n	8001f1a <drawMainScreen+0x2d6>
			BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001fa6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001faa:	f004 fc35 	bl	8006818 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001fae:	4816      	ldr	r0, [pc, #88]	; (8002008 <drawMainScreen+0x3c4>)
 8001fb0:	f004 fc0a 	bl	80067c8 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0, 480, 40);
 8001fb4:	2328      	movs	r3, #40	; 0x28
 8001fb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	f004 fe3b 	bl	8006c38 <BSP_LCD_FillRect>
 8001fc2:	e7a7      	b.n	8001f14 <drawMainScreen+0x2d0>
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	0800f798 	.word	0x0800f798
 8001fcc:	0800f79c 	.word	0x0800f79c
 8001fd0:	0800f7a4 	.word	0x0800f7a4
 8001fd4:	0800f7ac 	.word	0x0800f7ac
 8001fd8:	0800f7b4 	.word	0x0800f7b4
 8001fdc:	0800f7bc 	.word	0x0800f7bc
 8001fe0:	0800f7c4 	.word	0x0800f7c4
 8001fe4:	0800f7c8 	.word	0x0800f7c8
 8001fe8:	20004420 	.word	0x20004420
 8001fec:	200044f8 	.word	0x200044f8
 8001ff0:	20004370 	.word	0x20004370
 8001ff4:	20004468 	.word	0x20004468
 8001ff8:	200044c8 	.word	0x200044c8
 8001ffc:	20004424 	.word	0x20004424
 8002000:	0800f7d0 	.word	0x0800f7d0
 8002004:	20004434 	.word	0x20004434
 8002008:	ff000080 	.word	0xff000080
 800200c:	0800f7d4 	.word	0x0800f7d4
 8002010:	0800f7dc 	.word	0x0800f7dc
 8002014:	0800f7e0 	.word	0x0800f7e0
 8002018:	20004498 	.word	0x20004498
 800201c:	20004340 	.word	0x20004340
 8002020:	200043ec 	.word	0x200043ec
 8002024:	0800f7e4 	.word	0x0800f7e4
 8002028:	0800f7f0 	.word	0x0800f7f0
 800202c:	20004334 	.word	0x20004334
 8002030:	0800f7f8 	.word	0x0800f7f8
 8002034:	0800f804 	.word	0x0800f804
 8002038:	ff800000 	.word	0xff800000
 800203c:	0800f808 	.word	0x0800f808
 8002040:	0800f810 	.word	0x0800f810
 8002044:	0800f818 	.word	0x0800f818
 8002048:	2000442c 	.word	0x2000442c
 800204c:	200043f4 	.word	0x200043f4
 8002050:	20004418 	.word	0x20004418
 8002054:	200003a1 	.word	0x200003a1
 8002058:	200043b0 	.word	0x200043b0
 800205c:	200043e0 	.word	0x200043e0
 8002060:	0800f830 	.word	0x0800f830
 8002064:	0800f838 	.word	0x0800f838
 8002068:	0800f7fc 	.word	0x0800f7fc
 800206c:	ffff0000 	.word	0xffff0000
 8002070:	2000000c 	.word	0x2000000c
 8002074:	0800f81c 	.word	0x0800f81c

08002078 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <DWT_Init+0x20>)
 800207a:	68d3      	ldr	r3, [r2, #12]
 800207c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002080:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <DWT_Init+0x24>)
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <DWT_Init+0x28>)
 8002086:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

}
 8002096:	4770      	bx	lr
 8002098:	e000edf0 	.word	0xe000edf0
 800209c:	e0001000 	.word	0xe0001000
 80020a0:	c5acce55 	.word	0xc5acce55

080020a4 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <DWT_Delay+0x20>)
 80020a6:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <DWT_Delay+0x24>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <DWT_Delay+0x28>)
 80020ae:	fba1 1303 	umull	r1, r3, r1, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <DWT_Delay+0x20>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	4283      	cmp	r3, r0
 80020c0:	d3fa      	bcc.n	80020b8 <DWT_Delay+0x14>
}
 80020c2:	4770      	bx	lr
 80020c4:	e0001000 	.word	0xe0001000
 80020c8:	2000005c 	.word	0x2000005c
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_Init+0x20>)
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 fc07 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f007 fee8 	bl	8009eb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f007 fec6 	bl	8009e78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80020ec:	2000      	movs	r0, #0
 80020ee:	bd08      	pop	{r3, pc}
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_IncTick+0x10>)
 80020f6:	6811      	ldr	r1, [r2, #0]
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_IncTick+0x14>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	440b      	add	r3, r1
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20004504 	.word	0x20004504
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800210c:	4b01      	ldr	r3, [pc, #4]	; (8002114 <HAL_GetTick+0x8>)
 800210e:	6818      	ldr	r0, [r3, #0]
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20004504 	.word	0x20004504

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fff6 	bl	800210c <HAL_GetTick>
 8002120:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002126:	d002      	beq.n	800212e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_Delay+0x24>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212e:	f7ff ffed 	bl	800210c <HAL_GetTick>
 8002132:	1b40      	subs	r0, r0, r5
 8002134:	42a0      	cmp	r0, r4
 8002136:	d3fa      	bcc.n	800212e <HAL_Delay+0x16>
  {
  }
}
 8002138:	bd38      	pop	{r3, r4, r5, pc}
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <ADC_Init+0x12c>)
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002148:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	6841      	ldr	r1, [r0, #4]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	6802      	ldr	r2, [r0, #0]
 8002154:	6853      	ldr	r3, [r2, #4]
 8002156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800215a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800215c:	6802      	ldr	r2, [r0, #0]
 800215e:	6853      	ldr	r3, [r2, #4]
 8002160:	6901      	ldr	r1, [r0, #16]
 8002162:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002166:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002168:	6802      	ldr	r2, [r0, #0]
 800216a:	6853      	ldr	r3, [r2, #4]
 800216c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002170:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6853      	ldr	r3, [r2, #4]
 8002176:	6881      	ldr	r1, [r0, #8]
 8002178:	430b      	orrs	r3, r1
 800217a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	6893      	ldr	r3, [r2, #8]
 8002180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002184:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	6893      	ldr	r3, [r2, #8]
 800218a:	68c1      	ldr	r1, [r0, #12]
 800218c:	430b      	orrs	r3, r1
 800218e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002190:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <ADC_Init+0x130>)
 8002194:	429a      	cmp	r2, r3
 8002196:	d04b      	beq.n	8002230 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6893      	ldr	r3, [r2, #8]
 800219c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80021a0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6893      	ldr	r3, [r2, #8]
 80021a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	6893      	ldr	r3, [r2, #8]
 80021b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021b4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b6:	6802      	ldr	r2, [r0, #0]
 80021b8:	6893      	ldr	r3, [r2, #8]
 80021ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021c0:	6802      	ldr	r2, [r0, #0]
 80021c2:	6893      	ldr	r3, [r2, #8]
 80021c4:	f023 0302 	bic.w	r3, r3, #2
 80021c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	6893      	ldr	r3, [r2, #8]
 80021ce:	6981      	ldr	r1, [r0, #24]
 80021d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80021d4:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d133      	bne.n	8002246 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021de:	6802      	ldr	r2, [r0, #0]
 80021e0:	6853      	ldr	r3, [r2, #4]
 80021e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021e6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e8:	6802      	ldr	r2, [r0, #0]
 80021ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f2:	6801      	ldr	r1, [r0, #0]
 80021f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80021f6:	69c2      	ldr	r2, [r0, #28]
 80021f8:	3a01      	subs	r2, #1
 80021fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80021fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002200:	6802      	ldr	r2, [r0, #0]
 8002202:	6893      	ldr	r3, [r2, #8]
 8002204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002208:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800220a:	6802      	ldr	r2, [r0, #0]
 800220c:	6893      	ldr	r3, [r2, #8]
 800220e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8002212:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002216:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002218:	6802      	ldr	r2, [r0, #0]
 800221a:	6893      	ldr	r3, [r2, #8]
 800221c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002220:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002222:	6802      	ldr	r2, [r0, #0]
 8002224:	6893      	ldr	r3, [r2, #8]
 8002226:	6941      	ldr	r1, [r0, #20]
 8002228:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800222c:	6093      	str	r3, [r2, #8]
}
 800222e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002230:	6802      	ldr	r2, [r0, #0]
 8002232:	6893      	ldr	r3, [r2, #8]
 8002234:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002238:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	6802      	ldr	r2, [r0, #0]
 800223c:	6893      	ldr	r3, [r2, #8]
 800223e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	e7bc      	b.n	80021c0 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002246:	6802      	ldr	r2, [r0, #0]
 8002248:	6853      	ldr	r3, [r2, #4]
 800224a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800224e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002250:	6802      	ldr	r2, [r0, #0]
 8002252:	6853      	ldr	r3, [r2, #4]
 8002254:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002258:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800225a:	6801      	ldr	r1, [r0, #0]
 800225c:	684b      	ldr	r3, [r1, #4]
 800225e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002260:	3a01      	subs	r2, #1
 8002262:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e7be      	b.n	80021e8 <ADC_Init+0xa8>
 800226a:	bf00      	nop
 800226c:	40012300 	.word	0x40012300
 8002270:	0f000001 	.word	0x0f000001

08002274 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002274:	b328      	cbz	r0, 80022c2 <HAL_ADC_Init+0x4e>
{
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800227a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800227c:	b143      	cbz	r3, 8002290 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002280:	f013 0f10 	tst.w	r3, #16
 8002284:	d00b      	beq.n	800229e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002286:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002288:	2300      	movs	r3, #0
 800228a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800228e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002290:	f006 fcd6 	bl	8008c40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	2300      	movs	r3, #0
 8002296:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800229c:	e7ef      	b.n	800227e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800229e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_ADC_Init+0x54>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ff48 	bl	8002140 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	2000      	movs	r0, #0
 80022b2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80022b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6423      	str	r3, [r4, #64]	; 0x40
 80022c0:	e7e2      	b.n	8002288 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	ffffeefd 	.word	0xffffeefd

080022cc <HAL_ADC_Start>:
{
 80022cc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80022d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d073      	beq.n	80023c2 <HAL_ADC_Start+0xf6>
 80022da:	2301      	movs	r3, #1
 80022dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	f012 0f01 	tst.w	r2, #1
 80022e8:	d113      	bne.n	8002312 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_ADC_Start+0x10c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_ADC_Start+0x110>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9b      	lsrs	r3, r3, #18
 80022fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002302:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8002304:	e002      	b.n	800230c <HAL_ADC_Start+0x40>
      counter--;
 8002306:	9b01      	ldr	r3, [sp, #4]
 8002308:	3b01      	subs	r3, #1
 800230a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800230c:	9b01      	ldr	r3, [sp, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002312:	6802      	ldr	r2, [r0, #0]
 8002314:	6893      	ldr	r3, [r2, #8]
 8002316:	f013 0f01 	tst.w	r3, #1
 800231a:	d054      	beq.n	80023c6 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_ADC_Start+0x114>)
 8002320:	400b      	ands	r3, r1
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002328:	6853      	ldr	r3, [r2, #4]
 800232a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800232e:	d005      	beq.n	800233c <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002330:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800233a:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800233e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002342:	d019      	beq.n	8002378 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002344:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002346:	f023 0306 	bic.w	r3, r3, #6
 800234a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800234c:	2300      	movs	r3, #0
 800234e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002352:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8002356:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_ADC_Start+0x118>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f013 0f1f 	tst.w	r3, #31
 8002360:	d10d      	bne.n	800237e <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800236a:	d12f      	bne.n	80023cc <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002374:	2000      	movs	r0, #0
 8002376:	e027      	b.n	80023c8 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8002378:	2300      	movs	r3, #0
 800237a:	6443      	str	r3, [r0, #68]	; 0x44
 800237c:	e7e6      	b.n	800234c <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800237e:	6803      	ldr	r3, [r0, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_ADC_Start+0x11c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00a      	beq.n	800239c <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_ADC_Start+0x118>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f013 0f10 	tst.w	r3, #16
 800238e:	d11f      	bne.n	80023d0 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002390:	6803      	ldr	r3, [r0, #0]
 8002392:	4a16      	ldr	r2, [pc, #88]	; (80023ec <HAL_ADC_Start+0x120>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00a      	beq.n	80023ae <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
 800239a:	e015      	b.n	80023c8 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023a2:	d1f0      	bne.n	8002386 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e7eb      	b.n	8002386 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023b4:	d10e      	bne.n	80023d4 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80023be:	2000      	movs	r0, #0
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 80023c2:	2002      	movs	r0, #2
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 80023c6:	2000      	movs	r0, #0
}
 80023c8:	b002      	add	sp, #8
 80023ca:	4770      	bx	lr
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
 80023ce:	e7fb      	b.n	80023c8 <HAL_ADC_Start+0xfc>
 80023d0:	2000      	movs	r0, #0
 80023d2:	e7f9      	b.n	80023c8 <HAL_ADC_Start+0xfc>
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7f7      	b.n	80023c8 <HAL_ADC_Start+0xfc>
 80023d8:	2000005c 	.word	0x2000005c
 80023dc:	431bde83 	.word	0x431bde83
 80023e0:	fffff8fe 	.word	0xfffff8fe
 80023e4:	40012300 	.word	0x40012300
 80023e8:	40012000 	.word	0x40012000
 80023ec:	40012200 	.word	0x40012200

080023f0 <HAL_ADC_Start_DMA>:
{
 80023f0:	b530      	push	{r4, r5, lr}
 80023f2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80023f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	f000 8091 	beq.w	8002524 <HAL_ADC_Start_DMA+0x134>
 8002402:	2301      	movs	r3, #1
 8002404:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002408:	6804      	ldr	r4, [r0, #0]
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	f013 0f01 	tst.w	r3, #1
 8002410:	d113      	bne.n	800243a <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8002412:	68a3      	ldr	r3, [r4, #8]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800241a:	4b48      	ldr	r3, [pc, #288]	; (800253c <HAL_ADC_Start_DMA+0x14c>)
 800241c:	681c      	ldr	r4, [r3, #0]
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_ADC_Start_DMA+0x150>)
 8002420:	fba3 3404 	umull	r3, r4, r3, r4
 8002424:	0ca4      	lsrs	r4, r4, #18
 8002426:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800242a:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 800242c:	e002      	b.n	8002434 <HAL_ADC_Start_DMA+0x44>
      counter--;
 800242e:	9c01      	ldr	r4, [sp, #4]
 8002430:	3c01      	subs	r4, #1
 8002432:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8002434:	9c01      	ldr	r4, [sp, #4]
 8002436:	2c00      	cmp	r4, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	689c      	ldr	r4, [r3, #8]
 800243e:	f014 0f01 	tst.w	r4, #1
 8002442:	d071      	beq.n	8002528 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8002444:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002446:	4c3f      	ldr	r4, [pc, #252]	; (8002544 <HAL_ADC_Start_DMA+0x154>)
 8002448:	402c      	ands	r4, r5
 800244a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800244e:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002456:	d005      	beq.n	8002464 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002458:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002462:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002466:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800246a:	d036      	beq.n	80024da <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800246c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800246e:	f023 0306 	bic.w	r3, r3, #6
 8002472:	6443      	str	r3, [r0, #68]	; 0x44
 8002474:	4613      	mov	r3, r2
 8002476:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8002478:	2200      	movs	r2, #0
 800247a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002480:	4831      	ldr	r0, [pc, #196]	; (8002548 <HAL_ADC_Start_DMA+0x158>)
 8002482:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002484:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002486:	4831      	ldr	r0, [pc, #196]	; (800254c <HAL_ADC_Start_DMA+0x15c>)
 8002488:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800248a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800248c:	4830      	ldr	r0, [pc, #192]	; (8002550 <HAL_ADC_Start_DMA+0x160>)
 800248e:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002496:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002498:	6825      	ldr	r5, [r4, #0]
 800249a:	6868      	ldr	r0, [r5, #4]
 800249c:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80024a0:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024a2:	6825      	ldr	r5, [r4, #0]
 80024a4:	68a8      	ldr	r0, [r5, #8]
 80024a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80024aa:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	460a      	mov	r2, r1
 80024b0:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80024b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024b6:	f000 fbf6 	bl	8002ca6 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_ADC_Start_DMA+0x164>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f013 0f1f 	tst.w	r3, #31
 80024c2:	d10d      	bne.n	80024e0 <HAL_ADC_Start_DMA+0xf0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80024cc:	d12f      	bne.n	800252e <HAL_ADC_Start_DMA+0x13e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80024d6:	2000      	movs	r0, #0
 80024d8:	e027      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
      ADC_CLEAR_ERRORCODE(hadc);
 80024da:	2300      	movs	r3, #0
 80024dc:	6443      	str	r3, [r0, #68]	; 0x44
 80024de:	e7c9      	b.n	8002474 <HAL_ADC_Start_DMA+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_ADC_Start_DMA+0x168>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00a      	beq.n	80024fe <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_ADC_Start_DMA+0x164>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f013 0f10 	tst.w	r3, #16
 80024f0:	d11f      	bne.n	8002532 <HAL_ADC_Start_DMA+0x142>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_ADC_Start_DMA+0x16c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00a      	beq.n	8002510 <HAL_ADC_Start_DMA+0x120>
  return HAL_OK;
 80024fa:	2000      	movs	r0, #0
 80024fc:	e015      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002504:	d1f0      	bne.n	80024e8 <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	e7eb      	b.n	80024e8 <HAL_ADC_Start_DMA+0xf8>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002516:	d10e      	bne.n	8002536 <HAL_ADC_Start_DMA+0x146>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800251e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
 8002522:	e002      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
  __HAL_LOCK(hadc);
 8002524:	2002      	movs	r0, #2
 8002526:	e000      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
  return HAL_OK;
 8002528:	2000      	movs	r0, #0
}
 800252a:	b003      	add	sp, #12
 800252c:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 800252e:	2000      	movs	r0, #0
 8002530:	e7fb      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
 8002532:	2000      	movs	r0, #0
 8002534:	e7f9      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
 8002536:	2000      	movs	r0, #0
 8002538:	e7f7      	b.n	800252a <HAL_ADC_Start_DMA+0x13a>
 800253a:	bf00      	nop
 800253c:	2000005c 	.word	0x2000005c
 8002540:	431bde83 	.word	0x431bde83
 8002544:	fffff8fe 	.word	0xfffff8fe
 8002548:	080026cf 	.word	0x080026cf
 800254c:	08002563 	.word	0x08002563
 8002550:	080026b9 	.word	0x080026b9
 8002554:	40012300 	.word	0x40012300
 8002558:	40012000 	.word	0x40012000
 800255c:	40012200 	.word	0x40012200

08002560 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002560:	4770      	bx	lr

08002562 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002562:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002564:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002566:	f7ff fffb 	bl	8002560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800256a:	bd08      	pop	{r3, pc}

0800256c <HAL_ADC_LevelOutOfWindowCallback>:
}
 800256c:	4770      	bx	lr

0800256e <HAL_ADC_ErrorCallback>:
}
 800256e:	4770      	bx	lr

08002570 <HAL_ADC_IRQHandler>:
{
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002574:	6801      	ldr	r1, [r0, #0]
 8002576:	680a      	ldr	r2, [r1, #0]
 8002578:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800257c:	684b      	ldr	r3, [r1, #4]
 800257e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 8002582:	421a      	tst	r2, r3
 8002584:	d02c      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002586:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002588:	f013 0f10 	tst.w	r3, #16
 800258c:	d103      	bne.n	8002596 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800258e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002594:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002596:	688b      	ldr	r3, [r1, #8]
 8002598:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800259c:	d119      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259e:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a0:	b9bb      	cbnz	r3, 80025d2 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a4:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80025a8:	d003      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025aa:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025b0:	d10f      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025b2:	684b      	ldr	r3, [r1, #4]
 80025b4:	f023 0320 	bic.w	r3, r3, #32
 80025b8:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80025c8:	d103      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80025d2:	4620      	mov	r0, r4
 80025d4:	f007 fbd0 	bl	8009d78 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	f06f 0212 	mvn.w	r2, #18
 80025de:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 80025ee:	4211      	tst	r1, r2
 80025f0:	d034      	beq.n	800265c <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025f4:	f012 0f10 	tst.w	r2, #16
 80025f8:	d103      	bne.n	8002602 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002600:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002608:	d121      	bne.n	800264e <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800260a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800260c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002610:	d003      	beq.n	800261a <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002612:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002614:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002618:	d119      	bne.n	800264e <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800261a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800261c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002620:	d115      	bne.n	800264e <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002622:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002624:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002628:	d111      	bne.n	800264e <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800262a:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800262c:	b97a      	cbnz	r2, 800264e <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002634:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800263e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002640:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002644:	d103      	bne.n	800264e <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800264e:	4620      	mov	r0, r4
 8002650:	f000 f94c 	bl	80028ec <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f06f 020c 	mvn.w	r2, #12
 800265a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002660:	6853      	ldr	r3, [r2, #4]
 8002662:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8002666:	4219      	tst	r1, r3
 8002668:	d003      	beq.n	8002672 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	f013 0f01 	tst.w	r3, #1
 8002670:	d109      	bne.n	8002686 <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002672:	6821      	ldr	r1, [r4, #0]
 8002674:	680a      	ldr	r2, [r1, #0]
 8002676:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800267a:	684b      	ldr	r3, [r1, #4]
 800267c:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 8002680:	421a      	tst	r2, r3
 8002682:	d10c      	bne.n	800269e <HAL_ADC_IRQHandler+0x12e>
}
 8002684:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff ff6c 	bl	800256c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f06f 0201 	mvn.w	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e7e9      	b.n	8002672 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800269e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026a6:	f06f 0520 	mvn.w	r5, #32
 80026aa:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff5e 	bl	800256e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	601d      	str	r5, [r3, #0]
}
 80026b6:	e7e5      	b.n	8002684 <HAL_ADC_IRQHandler+0x114>

080026b8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026b8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026bc:	2340      	movs	r3, #64	; 0x40
 80026be:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026c8:	f7ff ff51 	bl	800256e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026cc:	bd08      	pop	{r3, pc}

080026ce <ADC_DMAConvCplt>:
{
 80026ce:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80026d8:	d126      	bne.n	8002728 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	6891      	ldr	r1, [r2, #8]
 80026e6:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80026ea:	d119      	bne.n	8002720 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ec:	6999      	ldr	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026ee:	b9b9      	cbnz	r1, 8002720 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026f2:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80026f6:	d003      	beq.n	8002700 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026f8:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026fa:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80026fe:	d10f      	bne.n	8002720 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002700:	6851      	ldr	r1, [r2, #4]
 8002702:	f021 0120 	bic.w	r1, r1, #32
 8002706:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002716:	d103      	bne.n	8002720 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002720:	4618      	mov	r0, r3
 8002722:	f007 fb29 	bl	8009d78 <HAL_ADC_ConvCpltCallback>
}
 8002726:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	f012 0f10 	tst.w	r2, #16
 800272e:	d103      	bne.n	8002738 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	4798      	blx	r3
}
 8002736:	e7f6      	b.n	8002726 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff18 	bl	800256e <HAL_ADC_ErrorCallback>
 800273e:	e7f2      	b.n	8002726 <ADC_DMAConvCplt+0x58>

08002740 <HAL_ADC_ConfigChannel>:
{
 8002740:	b430      	push	{r4, r5}
 8002742:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002748:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	f000 80c0 	beq.w	80028d2 <HAL_ADC_ConfigChannel+0x192>
 8002752:	2301      	movs	r3, #1
 8002754:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002758:	680b      	ldr	r3, [r1, #0]
 800275a:	2b09      	cmp	r3, #9
 800275c:	d922      	bls.n	80027a4 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800275e:	6805      	ldr	r5, [r0, #0]
 8002760:	68ea      	ldr	r2, [r5, #12]
 8002762:	b29b      	uxth	r3, r3
 8002764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002768:	3b1e      	subs	r3, #30
 800276a:	2407      	movs	r4, #7
 800276c:	fa04 f303 	lsl.w	r3, r4, r3
 8002770:	ea22 0303 	bic.w	r3, r2, r3
 8002774:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002776:	680b      	ldr	r3, [r1, #0]
 8002778:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_ADC_ConfigChannel+0x198>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00b      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800277e:	6805      	ldr	r5, [r0, #0]
 8002780:	68ea      	ldr	r2, [r5, #12]
 8002782:	688c      	ldr	r4, [r1, #8]
 8002784:	b29b      	uxth	r3, r3
 8002786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800278a:	3b1e      	subs	r3, #30
 800278c:	fa04 f303 	lsl.w	r3, r4, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	60eb      	str	r3, [r5, #12]
 8002794:	e01b      	b.n	80027ce <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002796:	6802      	ldr	r2, [r0, #0]
 8002798:	68d3      	ldr	r3, [r2, #12]
 800279a:	688c      	ldr	r4, [r1, #8]
 800279c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80027a0:	60d3      	str	r3, [r2, #12]
 80027a2:	e014      	b.n	80027ce <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027a4:	6805      	ldr	r5, [r0, #0]
 80027a6:	692a      	ldr	r2, [r5, #16]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027ae:	2407      	movs	r4, #7
 80027b0:	fa04 f303 	lsl.w	r3, r4, r3
 80027b4:	ea22 0303 	bic.w	r3, r2, r3
 80027b8:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ba:	6805      	ldr	r5, [r0, #0]
 80027bc:	692a      	ldr	r2, [r5, #16]
 80027be:	688c      	ldr	r4, [r1, #8]
 80027c0:	880b      	ldrh	r3, [r1, #0]
 80027c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027c6:	fa04 f303 	lsl.w	r3, r4, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80027ce:	684b      	ldr	r3, [r1, #4]
 80027d0:	2b06      	cmp	r3, #6
 80027d2:	d824      	bhi.n	800281e <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027d4:	6805      	ldr	r5, [r0, #0]
 80027d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80027d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027dc:	3b05      	subs	r3, #5
 80027de:	241f      	movs	r4, #31
 80027e0:	fa04 f303 	lsl.w	r3, r4, r3
 80027e4:	ea22 0303 	bic.w	r3, r2, r3
 80027e8:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	6805      	ldr	r5, [r0, #0]
 80027ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80027ee:	684b      	ldr	r3, [r1, #4]
 80027f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027f4:	3b05      	subs	r3, #5
 80027f6:	880c      	ldrh	r4, [r1, #0]
 80027f8:	fa04 f303 	lsl.w	r3, r4, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002800:	6802      	ldr	r2, [r0, #0]
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_ADC_ConfigChannel+0x19c>)
 8002804:	429a      	cmp	r2, r3
 8002806:	d03a      	beq.n	800287e <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002808:	6802      	ldr	r2, [r0, #0]
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <HAL_ADC_ConfigChannel+0x19c>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d03f      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002810:	2300      	movs	r3, #0
 8002812:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002816:	4618      	mov	r0, r3
}
 8002818:	b002      	add	sp, #8
 800281a:	bc30      	pop	{r4, r5}
 800281c:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d816      	bhi.n	8002850 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002822:	6805      	ldr	r5, [r0, #0]
 8002824:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800282a:	3b23      	subs	r3, #35	; 0x23
 800282c:	241f      	movs	r4, #31
 800282e:	fa04 f303 	lsl.w	r3, r4, r3
 8002832:	ea22 0303 	bic.w	r3, r2, r3
 8002836:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002838:	6805      	ldr	r5, [r0, #0]
 800283a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800283c:	684b      	ldr	r3, [r1, #4]
 800283e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002842:	3b23      	subs	r3, #35	; 0x23
 8002844:	880c      	ldrh	r4, [r1, #0]
 8002846:	fa04 f303 	lsl.w	r3, r4, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	632b      	str	r3, [r5, #48]	; 0x30
 800284e:	e7d7      	b.n	8002800 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002850:	6805      	ldr	r5, [r0, #0]
 8002852:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002854:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002858:	3b41      	subs	r3, #65	; 0x41
 800285a:	241f      	movs	r4, #31
 800285c:	fa04 f303 	lsl.w	r3, r4, r3
 8002860:	ea22 0303 	bic.w	r3, r2, r3
 8002864:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002866:	6805      	ldr	r5, [r0, #0]
 8002868:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800286a:	684b      	ldr	r3, [r1, #4]
 800286c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002870:	3b41      	subs	r3, #65	; 0x41
 8002872:	880c      	ldrh	r4, [r1, #0]
 8002874:	fa04 f303 	lsl.w	r3, r4, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800287c:	e7c0      	b.n	8002800 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800287e:	680b      	ldr	r3, [r1, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d1c1      	bne.n	8002808 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8002884:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <HAL_ADC_ConfigChannel+0x1a0>)
 8002886:	6853      	ldr	r3, [r2, #4]
 8002888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800288c:	6053      	str	r3, [r2, #4]
 800288e:	e7bb      	b.n	8002808 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_ADC_ConfigChannel+0x198>)
 8002894:	2b11      	cmp	r3, #17
 8002896:	bf18      	it	ne
 8002898:	4293      	cmpne	r3, r2
 800289a:	d1b9      	bne.n	8002810 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800289c:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_ADC_ConfigChannel+0x1a0>)
 800289e:	6853      	ldr	r3, [r2, #4]
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a6:	680a      	ldr	r2, [r1, #0]
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_ADC_ConfigChannel+0x198>)
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1b0      	bne.n	8002810 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_ADC_ConfigChannel+0x1a4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_ADC_ConfigChannel+0x1a8>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028be:	005a      	lsls	r2, r3, #1
 80028c0:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80028c2:	e002      	b.n	80028ca <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80028c4:	9b01      	ldr	r3, [sp, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x184>
 80028d0:	e79e      	b.n	8002810 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80028d2:	2002      	movs	r0, #2
 80028d4:	e7a0      	b.n	8002818 <HAL_ADC_ConfigChannel+0xd8>
 80028d6:	bf00      	nop
 80028d8:	10000012 	.word	0x10000012
 80028dc:	40012000 	.word	0x40012000
 80028e0:	40012300 	.word	0x40012300
 80028e4:	2000005c 	.word	0x2000005c
 80028e8:	431bde83 	.word	0x431bde83

080028ec <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80028f2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	0200      	lsls	r0, r0, #8
 80028fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002902:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002904:	4a02      	ldr	r2, [pc, #8]	; (8002910 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002906:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002908:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	05fa0000 	.word	0x05fa0000

08002914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_NVIC_SetPriority+0x58>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291e:	f1c3 0407 	rsb	r4, r3, #7
 8002922:	2c04      	cmp	r4, #4
 8002924:	bf28      	it	cs
 8002926:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002928:	1d1d      	adds	r5, r3, #4
 800292a:	2d06      	cmp	r5, #6
 800292c:	d914      	bls.n	8002958 <HAL_NVIC_SetPriority+0x44>
 800292e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002934:	fa05 f404 	lsl.w	r4, r5, r4
 8002938:	ea21 0104 	bic.w	r1, r1, r4
 800293c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293e:	fa05 f303 	lsl.w	r3, r5, r3
 8002942:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002946:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002948:	2800      	cmp	r0, #0
 800294a:	db07      	blt.n	800295c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	0109      	lsls	r1, r1, #4
 800294e:	b2c9      	uxtb	r1, r1
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_NVIC_SetPriority+0x5c>)
 8002952:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002954:	bc30      	pop	{r4, r5}
 8002956:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002958:	2300      	movs	r3, #0
 800295a:	e7e9      	b.n	8002930 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	f000 000f 	and.w	r0, r0, #15
 8002960:	0109      	lsls	r1, r1, #4
 8002962:	b2c9      	uxtb	r1, r1
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_NVIC_SetPriority+0x60>)
 8002966:	5419      	strb	r1, [r3, r0]
 8002968:	e7f4      	b.n	8002954 <HAL_NVIC_SetPriority+0x40>
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	e000e400 	.word	0xe000e400
 8002974:	e000ed14 	.word	0xe000ed14

08002978 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002978:	2800      	cmp	r0, #0
 800297a:	db07      	blt.n	800298c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297c:	f000 021f 	and.w	r2, r0, #31
 8002980:	0940      	lsrs	r0, r0, #5
 8002982:	2301      	movs	r3, #1
 8002984:	4093      	lsls	r3, r2
 8002986:	4a02      	ldr	r2, [pc, #8]	; (8002990 <HAL_NVIC_EnableIRQ+0x18>)
 8002988:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002994:	2800      	cmp	r0, #0
 8002996:	d038      	beq.n	8002a0a <HAL_CRC_Init+0x76>
{
 8002998:	b510      	push	{r4, lr}
 800299a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800299c:	7f43      	ldrb	r3, [r0, #29]
 800299e:	b31b      	cbz	r3, 80029e8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029a0:	2302      	movs	r3, #2
 80029a2:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029a4:	7923      	ldrb	r3, [r4, #4]
 80029a6:	bb1b      	cbnz	r3, 80029f0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_CRC_Init+0x7c>)
 80029ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6893      	ldr	r3, [r2, #8]
 80029b2:	f023 0318 	bic.w	r3, r3, #24
 80029b6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029b8:	7963      	ldrb	r3, [r4, #5]
 80029ba:	bb13      	cbnz	r3, 8002a02 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029c4:	6822      	ldr	r2, [r4, #0]
 80029c6:	6893      	ldr	r3, [r2, #8]
 80029c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80029cc:	6961      	ldr	r1, [r4, #20]
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	6893      	ldr	r3, [r2, #8]
 80029d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029da:	69a1      	ldr	r1, [r4, #24]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029e0:	2301      	movs	r3, #1
 80029e2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80029e4:	2000      	movs	r0, #0
}
 80029e6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80029e8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80029ea:	f006 f9b1 	bl	8008d50 <HAL_CRC_MspInit>
 80029ee:	e7d7      	b.n	80029a0 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029f0:	68e2      	ldr	r2, [r4, #12]
 80029f2:	68a1      	ldr	r1, [r4, #8]
 80029f4:	4620      	mov	r0, r4
 80029f6:	f000 f80d 	bl	8002a14 <HAL_CRCEx_Polynomial_Set>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d0dc      	beq.n	80029b8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
 8002a00:	e7f1      	b.n	80029e6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	6922      	ldr	r2, [r4, #16]
 8002a06:	611a      	str	r2, [r3, #16]
 8002a08:	e7dc      	b.n	80029c4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	04c11db7 	.word	0x04c11db7

08002a14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a14:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a16:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a18:	1e65      	subs	r5, r4, #1
 8002a1a:	b13c      	cbz	r4, 8002a2c <HAL_CRCEx_Polynomial_Set+0x18>
 8002a1c:	f005 031f 	and.w	r3, r5, #31
 8002a20:	fa21 f303 	lsr.w	r3, r1, r3
 8002a24:	462c      	mov	r4, r5
 8002a26:	f013 0f01 	tst.w	r3, #1
 8002a2a:	d0f5      	beq.n	8002a18 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002a2c:	2a18      	cmp	r2, #24
 8002a2e:	d823      	bhi.n	8002a78 <HAL_CRCEx_Polynomial_Set+0x64>
 8002a30:	e8df f002 	tbb	[pc, r2]
 8002a34:	2222220f 	.word	0x2222220f
 8002a38:	22222222 	.word	0x22222222
 8002a3c:	2222221e 	.word	0x2222221e
 8002a40:	22222222 	.word	0x22222222
 8002a44:	2222221a 	.word	0x2222221a
 8002a48:	22222222 	.word	0x22222222
 8002a4c:	0d          	.byte	0x0d
 8002a4d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002a4e:	2d06      	cmp	r5, #6
 8002a50:	d814      	bhi.n	8002a7c <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a56:	6801      	ldr	r1, [r0, #0]
 8002a58:	688b      	ldr	r3, [r1, #8]
 8002a5a:	f023 0318 	bic.w	r3, r3, #24
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	608a      	str	r2, [r1, #8]
 8002a62:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8002a64:	bc30      	pop	{r4, r5}
 8002a66:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a68:	2d07      	cmp	r5, #7
 8002a6a:	d9f2      	bls.n	8002a52 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e7f9      	b.n	8002a64 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a70:	2d0f      	cmp	r5, #15
 8002a72:	d9ee      	bls.n	8002a52 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
 8002a76:	e7f5      	b.n	8002a64 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e7f3      	b.n	8002a64 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e7f1      	b.n	8002a64 <HAL_CRCEx_Polynomial_Set+0x50>

08002a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a82:	6805      	ldr	r5, [r0, #0]
 8002a84:	682c      	ldr	r4, [r5, #0]
 8002a86:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002a8a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a8c:	6804      	ldr	r4, [r0, #0]
 8002a8e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a90:	6883      	ldr	r3, [r0, #8]
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d005      	beq.n	8002aa2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002a96:	6803      	ldr	r3, [r0, #0]
 8002a98:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002a9a:	6803      	ldr	r3, [r0, #0]
 8002a9c:	60da      	str	r2, [r3, #12]
  }
}
 8002a9e:	bc30      	pop	{r4, r5}
 8002aa0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002aa2:	6803      	ldr	r3, [r0, #0]
 8002aa4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	60d9      	str	r1, [r3, #12]
 8002aaa:	e7f8      	b.n	8002a9e <DMA_SetConfig+0x1e>

08002aac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aac:	6802      	ldr	r2, [r0, #0]
 8002aae:	b2d3      	uxtb	r3, r2
 8002ab0:	3b10      	subs	r3, #16
 8002ab2:	4909      	ldr	r1, [pc, #36]	; (8002ad8 <DMA_CalcBaseAndBitshift+0x2c>)
 8002ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8002ab8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aba:	4908      	ldr	r1, [pc, #32]	; (8002adc <DMA_CalcBaseAndBitshift+0x30>)
 8002abc:	5cc9      	ldrb	r1, [r1, r3]
 8002abe:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d804      	bhi.n	8002ace <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x34>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002aca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002acc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x34>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	6583      	str	r3, [r0, #88]	; 0x58
 8002ad6:	e7f8      	b.n	8002aca <DMA_CalcBaseAndBitshift+0x1e>
 8002ad8:	aaaaaaab 	.word	0xaaaaaaab
 8002adc:	0800f840 	.word	0x0800f840
 8002ae0:	fffffc00 	.word	0xfffffc00

08002ae4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae6:	6982      	ldr	r2, [r0, #24]
 8002ae8:	b992      	cbnz	r2, 8002b10 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d00a      	beq.n	8002b04 <DMA_CheckFifoParam+0x20>
 8002aee:	b11b      	cbz	r3, 8002af8 <DMA_CheckFifoParam+0x14>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d001      	beq.n	8002af8 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002afa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002afe:	d12c      	bne.n	8002b5a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2000      	movs	r0, #0
 8002b02:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0a:	d028      	beq.n	8002b5e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b14:	d005      	beq.n	8002b22 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d929      	bls.n	8002b6e <DMA_CheckFifoParam+0x8a>
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d015      	beq.n	8002b4a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2000      	movs	r0, #0
 8002b20:	4770      	bx	lr
    switch (tmp)
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d803      	bhi.n	8002b2e <DMA_CheckFifoParam+0x4a>
 8002b26:	e8df f003 	tbb	[pc, r3]
 8002b2a:	041c      	.short	0x041c
 8002b2c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2000      	movs	r0, #0
 8002b30:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b38:	d115      	bne.n	8002b66 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b44:	d011      	beq.n	8002b6a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2000      	movs	r0, #0
 8002b48:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b50:	d001      	beq.n	8002b56 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002b54:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2000      	movs	r0, #0
 8002b58:	4770      	bx	lr
        status = HAL_ERROR;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	4770      	bx	lr
        status = HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
 8002b60:	4770      	bx	lr
      status = HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	4770      	bx	lr
        status = HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr
        status = HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	4770      	bx	lr
      status = HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_DMA_Init>:
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fac8 	bl	800210c <HAL_GetTick>
  if(hdma == NULL)
 8002b7c:	2c00      	cmp	r4, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_DMA_Init+0xc4>
 8002b80:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002b82:	2300      	movs	r3, #0
 8002b84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f012 0f01 	tst.w	r2, #1
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba2:	f7ff fab3 	bl	800210c <HAL_GetTick>
 8002ba6:	1b40      	subs	r0, r0, r5
 8002ba8:	2805      	cmp	r0, #5
 8002baa:	d9f5      	bls.n	8002b98 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	2320      	movs	r3, #32
 8002bae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002bb8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bba:	4820      	ldr	r0, [pc, #128]	; (8002c3c <HAL_DMA_Init+0xc8>)
 8002bbc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bbe:	6861      	ldr	r1, [r4, #4]
 8002bc0:	68a2      	ldr	r2, [r4, #8]
 8002bc2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	6921      	ldr	r1, [r4, #16]
 8002bca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bcc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	69a1      	ldr	r1, [r4, #24]
 8002bd2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd8:	6a21      	ldr	r1, [r4, #32]
 8002bda:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002be0:	2904      	cmp	r1, #4
 8002be2:	d01e      	beq.n	8002c22 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002be4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002be6:	6826      	ldr	r6, [r4, #0]
 8002be8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bf0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bf8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bfc:	b11b      	cbz	r3, 8002c06 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f7ff ff70 	bl	8002ae4 <DMA_CheckFifoParam>
 8002c04:	b990      	cbnz	r0, 8002c2c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002c06:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7ff ff4f 	bl	8002aac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c10:	233f      	movs	r3, #63	; 0x3f
 8002c12:	4093      	lsls	r3, r2
 8002c14:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	2000      	movs	r0, #0
 8002c18:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c20:	e7c9      	b.n	8002bb6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c26:	4301      	orrs	r1, r0
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	e7db      	b.n	8002be4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c2c:	2340      	movs	r3, #64	; 0x40
 8002c2e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c30:	2001      	movs	r0, #1
 8002c32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002c36:	e7be      	b.n	8002bb6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002c38:	2001      	movs	r0, #1
 8002c3a:	e7bc      	b.n	8002bb6 <HAL_DMA_Init+0x42>
 8002c3c:	f010803f 	.word	0xf010803f

08002c40 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d02c      	beq.n	8002c9e <HAL_DMA_DeInit+0x5e>
{
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002c48:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_DeInit+0x62>
  __HAL_DMA_DISABLE(hdma);
 8002c52:	6802      	ldr	r2, [r0, #0]
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002c5c:	6803      	ldr	r3, [r0, #0]
 8002c5e:	2500      	movs	r5, #0
 8002c60:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002c62:	6803      	ldr	r3, [r0, #0]
 8002c64:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002c66:	6803      	ldr	r3, [r0, #0]
 8002c68:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002c6a:	6803      	ldr	r3, [r0, #0]
 8002c6c:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002c6e:	6803      	ldr	r3, [r0, #0]
 8002c70:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c78:	f7ff ff18 	bl	8002aac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c7e:	233f      	movs	r3, #63	; 0x3f
 8002c80:	4093      	lsls	r3, r2
 8002c82:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8002c84:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002c86:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002c88:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002c8a:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002c8c:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002c8e:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002c92:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002c96:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8002c9a:	4628      	mov	r0, r5
}
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
}
 8002ca0:	4770      	bx	lr
    return HAL_BUSY;
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	e7fa      	b.n	8002c9c <HAL_DMA_DeInit+0x5c>

08002ca6 <HAL_DMA_Start_IT>:
{
 8002ca6:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002caa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002cae:	2c01      	cmp	r4, #1
 8002cb0:	d031      	beq.n	8002d16 <HAL_DMA_Start_IT+0x70>
 8002cb2:	2401      	movs	r4, #1
 8002cb4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002cbc:	b2e4      	uxtb	r4, r4
 8002cbe:	2c01      	cmp	r4, #1
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002cc8:	2002      	movs	r0, #2
}
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff fed1 	bl	8002a80 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ce0:	233f      	movs	r3, #63	; 0x3f
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	f043 0316 	orr.w	r3, r3, #22
 8002cee:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	6953      	ldr	r3, [r2, #20]
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cfc:	b123      	cbz	r3, 8002d08 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6813      	ldr	r3, [r2, #0]
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	6813      	ldr	r3, [r2, #0]
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2000      	movs	r0, #0
 8002d14:	e7d9      	b.n	8002cca <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002d16:	2002      	movs	r0, #2
 8002d18:	e7d7      	b.n	8002cca <HAL_DMA_Start_IT+0x24>
	...

08002d1c <HAL_DMA_IRQHandler>:
{
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <HAL_DMA_IRQHandler+0x1d4>)
 8002d28:	681d      	ldr	r5, [r3, #0]
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d2c:	fba3 3505 	umull	r3, r5, r3, r5
 8002d30:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d32:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002d34:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002d38:	2308      	movs	r3, #8
 8002d3a:	4093      	lsls	r3, r2
 8002d3c:	4233      	tst	r3, r6
 8002d3e:	d010      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f012 0f04 	tst.w	r2, #4
 8002d48:	d00b      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d52:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002d54:	2308      	movs	r3, #8
 8002d56:	4093      	lsls	r3, r2
 8002d58:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d5a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d64:	2301      	movs	r3, #1
 8002d66:	4093      	lsls	r3, r2
 8002d68:	4233      	tst	r3, r6
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d6c:	6822      	ldr	r2, [r4, #0]
 8002d6e:	6952      	ldr	r2, [r2, #20]
 8002d70:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d82:	2304      	movs	r3, #4
 8002d84:	4093      	lsls	r3, r2
 8002d86:	4233      	tst	r3, r6
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	f012 0f02 	tst.w	r2, #2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d94:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002da0:	2310      	movs	r3, #16
 8002da2:	4093      	lsls	r3, r2
 8002da4:	4233      	tst	r3, r6
 8002da6:	d024      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da8:	6822      	ldr	r2, [r4, #0]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	f012 0f08 	tst.w	r2, #8
 8002db0:	d01f      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002dbc:	d00d      	beq.n	8002dda <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002dc4:	d104      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dc8:	b19b      	cbz	r3, 8002df2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4798      	blx	r3
 8002dce:	e010      	b.n	8002df2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dd2:	b173      	cbz	r3, 8002df2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4798      	blx	r3
 8002dd8:	e00b      	b.n	8002df2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002de0:	d103      	bne.n	8002dea <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dec:	b10b      	cbz	r3, 8002df2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002dee:	4620      	mov	r0, r4
 8002df0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002df4:	2320      	movs	r3, #32
 8002df6:	4093      	lsls	r3, r2
 8002df8:	4233      	tst	r3, r6
 8002dfa:	d055      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	f012 0f10 	tst.w	r2, #16
 8002e04:	d050      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e06:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e08:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002e1a:	d033      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002e22:	d12a      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002e24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d03e      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4798      	blx	r3
 8002e2e:	e03b      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	f023 0316 	bic.w	r3, r3, #22
 8002e38:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	6953      	ldr	r3, [r2, #20]
 8002e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e42:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e46:	b1a3      	cbz	r3, 8002e72 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	f023 0308 	bic.w	r3, r3, #8
 8002e50:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e54:	233f      	movs	r3, #63	; 0x3f
 8002e56:	4093      	lsls	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03f      	beq.n	8002eec <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4798      	blx	r3
 8002e70:	e03c      	b.n	8002eec <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e7      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x12c>
 8002e78:	e7eb      	b.n	8002e52 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e7c:	b1a3      	cbz	r3, 8002ea8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4798      	blx	r3
 8002e82:	e011      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002e8a:	d109      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f022 0210 	bic.w	r2, r2, #16
 8002e92:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002e94:	2300      	movs	r3, #0
 8002e96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ea2:	b10b      	cbz	r3, 8002ea8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ea8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eaa:	b1fb      	cbz	r3, 8002eec <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eae:	f013 0f01 	tst.w	r3, #1
 8002eb2:	d017      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	6813      	ldr	r3, [r2, #0]
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002ec4:	9b01      	ldr	r3, [sp, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	42ab      	cmp	r3, r5
 8002ecc:	d804      	bhi.n	8002ed8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f013 0f01 	tst.w	r3, #1
 8002ed6:	d1f5      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002ee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ee6:	b10b      	cbz	r3, 8002eec <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4798      	blx	r3
}
 8002eec:	b003      	add	sp, #12
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef0:	2000005c 	.word	0x2000005c
 8002ef4:	1b4e81b5 	.word	0x1b4e81b5

08002ef8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002ef8:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002efa:	6806      	ldr	r6, [r0, #0]
 8002efc:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002efe:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002f02:	9d03      	ldr	r5, [sp, #12]
 8002f04:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002f08:	431c      	orrs	r4, r3
 8002f0a:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f10:	6843      	ldr	r3, [r0, #4]
 8002f12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f16:	d003      	beq.n	8002f20 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f18:	6803      	ldr	r3, [r0, #0]
 8002f1a:	60d9      	str	r1, [r3, #12]
  }
}
 8002f1c:	bc70      	pop	{r4, r5, r6}
 8002f1e:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002f20:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002f24:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002f28:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002f2c:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f2e:	6884      	ldr	r4, [r0, #8]
 8002f30:	b194      	cbz	r4, 8002f58 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f32:	2c01      	cmp	r4, #1
 8002f34:	d00e      	beq.n	8002f54 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f36:	2c02      	cmp	r4, #2
 8002f38:	d011      	beq.n	8002f5e <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f3a:	2c03      	cmp	r4, #3
 8002f3c:	d017      	beq.n	8002f6e <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002f3e:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002f40:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002f42:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002f44:	0219      	lsls	r1, r3, #8
 8002f46:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002f4a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002f4e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002f52:	e001      	b.n	8002f58 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002f54:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f58:	6803      	ldr	r3, [r0, #0]
 8002f5a:	6399      	str	r1, [r3, #56]	; 0x38
 8002f5c:	e7de      	b.n	8002f1c <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002f5e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002f60:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f62:	02d9      	lsls	r1, r3, #11
 8002f64:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002f68:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002f6c:	e7f4      	b.n	8002f58 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002f6e:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002f70:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002f72:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f74:	0299      	lsls	r1, r3, #10
 8002f76:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002f7a:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002f7e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002f82:	e7e9      	b.n	8002f58 <DMA2D_SetConfig+0x60>

08002f84 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8002f84:	b338      	cbz	r0, 8002fd6 <HAL_DMA2D_Init+0x52>
{
 8002f86:	b510      	push	{r4, lr}
 8002f88:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f8e:	b1eb      	cbz	r3, 8002fcc <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f9e:	6861      	ldr	r1, [r4, #4]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fa8:	f023 0307 	bic.w	r3, r3, #7
 8002fac:	68a1      	ldr	r1, [r4, #8]
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_DMA2D_Init+0x58>)
 8002fb8:	400b      	ands	r3, r1
 8002fba:	68e1      	ldr	r1, [r4, #12]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002fca:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002fcc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002fd0:	f005 ff0e 	bl	8008df0 <HAL_DMA2D_MspInit>
 8002fd4:	e7dc      	b.n	8002f90 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	ffffc000 	.word	0xffffc000

08002fe0 <HAL_DMA2D_Start>:
{
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8002fe4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002fe8:	2c01      	cmp	r4, #1
 8002fea:	d013      	beq.n	8003014 <HAL_DMA2D_Start+0x34>
 8002fec:	4604      	mov	r4, r0
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ffa:	9804      	ldr	r0, [sp, #16]
 8002ffc:	9000      	str	r0, [sp, #0]
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff ff7a 	bl	8002ef8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800300e:	2000      	movs	r0, #0
}
 8003010:	b002      	add	sp, #8
 8003012:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8003014:	2002      	movs	r0, #2
 8003016:	e7fb      	b.n	8003010 <HAL_DMA2D_Start+0x30>

08003018 <HAL_DMA2D_PollForTransfer>:
{
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	4604      	mov	r4, r0
 800301e:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8003020:	2300      	movs	r3, #0
 8003022:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003024:	6803      	ldr	r3, [r0, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f013 0f01 	tst.w	r3, #1
 800302c:	d111      	bne.n	8003052 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003034:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8003036:	f013 0f20 	tst.w	r3, #32
 800303a:	d147      	bne.n	80030cc <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	2212      	movs	r2, #18
 8003040:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003042:	2301      	movs	r3, #1
 8003044:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003048:	2000      	movs	r0, #0
 800304a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800304e:	b002      	add	sp, #8
 8003050:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8003052:	f7ff f85b 	bl	800210c <HAL_GetTick>
 8003056:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	f012 0f02 	tst.w	r2, #2
 8003060:	d1e5      	bne.n	800302e <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003066:	9a01      	ldr	r2, [sp, #4]
 8003068:	f012 0f21 	tst.w	r2, #33	; 0x21
 800306c:	d114      	bne.n	8003098 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 800306e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003072:	d0f1      	beq.n	8003058 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003074:	f7ff f84a 	bl	800210c <HAL_GetTick>
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	42a8      	cmp	r0, r5
 800307c:	d801      	bhi.n	8003082 <HAL_DMA2D_PollForTransfer+0x6a>
 800307e:	2d00      	cmp	r5, #0
 8003080:	d1ea      	bne.n	8003058 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003084:	f043 0320 	orr.w	r3, r3, #32
 8003088:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800308a:	2003      	movs	r0, #3
 800308c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003090:	2300      	movs	r3, #0
 8003092:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003096:	e7da      	b.n	800304e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003098:	9a01      	ldr	r2, [sp, #4]
 800309a:	f012 0f20 	tst.w	r2, #32
 800309e:	d003      	beq.n	80030a8 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80030a8:	9a01      	ldr	r2, [sp, #4]
 80030aa:	f012 0f01 	tst.w	r2, #1
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030bc:	2304      	movs	r3, #4
 80030be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80030c2:	2300      	movs	r3, #0
 80030c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
 80030ca:	e7c0      	b.n	800304e <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 80030cc:	f7ff f81e 	bl	800210c <HAL_GetTick>
 80030d0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	f012 0f10 	tst.w	r2, #16
 80030da:	d1af      	bne.n	800303c <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80030e0:	9a01      	ldr	r2, [sp, #4]
 80030e2:	f012 0f29 	tst.w	r2, #41	; 0x29
 80030e6:	d114      	bne.n	8003112 <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 80030e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80030ec:	d0f1      	beq.n	80030d2 <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80030ee:	f7ff f80d 	bl	800210c <HAL_GetTick>
 80030f2:	1b80      	subs	r0, r0, r6
 80030f4:	42a8      	cmp	r0, r5
 80030f6:	d801      	bhi.n	80030fc <HAL_DMA2D_PollForTransfer+0xe4>
 80030f8:	2d00      	cmp	r5, #0
 80030fa:	d1ea      	bne.n	80030d2 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80030fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003104:	2003      	movs	r0, #3
 8003106:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800310a:	2300      	movs	r3, #0
 800310c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003110:	e79d      	b.n	800304e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003112:	9a01      	ldr	r2, [sp, #4]
 8003114:	f012 0f08 	tst.w	r2, #8
 8003118:	d003      	beq.n	8003122 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800311a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003122:	9a01      	ldr	r2, [sp, #4]
 8003124:	f012 0f20 	tst.w	r2, #32
 8003128:	d003      	beq.n	8003132 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800312a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800312c:	f042 0202 	orr.w	r2, r2, #2
 8003130:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003132:	9a01      	ldr	r2, [sp, #4]
 8003134:	f012 0f01 	tst.w	r2, #1
 8003138:	d003      	beq.n	8003142 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800313a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003142:	2229      	movs	r2, #41	; 0x29
 8003144:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003146:	2304      	movs	r3, #4
 8003148:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800314c:	2300      	movs	r3, #0
 800314e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003152:	2001      	movs	r0, #1
 8003154:	e77b      	b.n	800304e <HAL_DMA2D_PollForTransfer+0x36>
	...

08003158 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003158:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800315c:	2b01      	cmp	r3, #1
 800315e:	d059      	beq.n	8003214 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8003160:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8003162:	2301      	movs	r3, #1
 8003164:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800316e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	1c8b      	adds	r3, r1, #2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	58c3      	ldr	r3, [r0, r3]
 800317a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800317e:	3a09      	subs	r2, #9
 8003180:	2a01      	cmp	r2, #1
 8003182:	d91e      	bls.n	80031c2 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003184:	1c8a      	adds	r2, r1, #2
 8003186:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800318a:	6852      	ldr	r2, [r2, #4]
 800318c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003190:	bb41      	cbnz	r1, 80031e4 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003192:	6804      	ldr	r4, [r0, #0]
 8003194:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_DMA2D_ConfigLayer+0xc0>)
 8003198:	402a      	ands	r2, r5
 800319a:	4313      	orrs	r3, r2
 800319c:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800319e:	6802      	ldr	r2, [r0, #0]
 80031a0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80031a4:	699c      	ldr	r4, [r3, #24]
 80031a6:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	3b09      	subs	r3, #9
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d910      	bls.n	80031d2 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80031b6:	2300      	movs	r3, #0
 80031b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80031bc:	4618      	mov	r0, r3
}
 80031be:	bc30      	pop	{r4, r5}
 80031c0:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031c2:	1c8a      	adds	r2, r1, #2
 80031c4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80031c8:	6852      	ldr	r2, [r2, #4]
 80031ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80031ce:	4313      	orrs	r3, r2
 80031d0:	e7de      	b.n	8003190 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80031d2:	3102      	adds	r1, #2
 80031d4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80031d8:	684b      	ldr	r3, [r1, #4]
 80031da:	6802      	ldr	r2, [r0, #0]
 80031dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031e0:	6293      	str	r3, [r2, #40]	; 0x28
 80031e2:	e7e5      	b.n	80031b0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031e4:	6804      	ldr	r4, [r0, #0]
 80031e6:	69e5      	ldr	r5, [r4, #28]
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <HAL_DMA2D_ConfigLayer+0xc0>)
 80031ea:	402a      	ands	r2, r5
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031f0:	6802      	ldr	r2, [r0, #0]
 80031f2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80031f6:	699c      	ldr	r4, [r3, #24]
 80031f8:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	3b09      	subs	r3, #9
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d8d6      	bhi.n	80031b0 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003202:	3102      	adds	r1, #2
 8003204:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003208:	684b      	ldr	r3, [r1, #4]
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	e7cd      	b.n	80031b0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8003214:	2002      	movs	r0, #2
}
 8003216:	4770      	bx	lr
 8003218:	00fcfff0 	.word	0x00fcfff0

0800321c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800321c:	2300      	movs	r3, #0
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f200 80e2 	bhi.w	80033e8 <HAL_GPIO_Init+0x1cc>
{
 8003224:	b4f0      	push	{r4, r5, r6, r7}
 8003226:	b082      	sub	sp, #8
 8003228:	e039      	b.n	800329e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800322a:	2209      	movs	r2, #9
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x14>
 800322e:	2200      	movs	r2, #0
 8003230:	40b2      	lsls	r2, r6
 8003232:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003234:	3402      	adds	r4, #2
 8003236:	4e6d      	ldr	r6, [pc, #436]	; (80033ec <HAL_GPIO_Init+0x1d0>)
 8003238:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323c:	4a6c      	ldr	r2, [pc, #432]	; (80033f0 <HAL_GPIO_Init+0x1d4>)
 800323e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003240:	43ea      	mvns	r2, r5
 8003242:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003246:	684f      	ldr	r7, [r1, #4]
 8003248:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800324c:	d001      	beq.n	8003252 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800324e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003252:	4c67      	ldr	r4, [pc, #412]	; (80033f0 <HAL_GPIO_Init+0x1d4>)
 8003254:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003256:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003258:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800325c:	684f      	ldr	r7, [r1, #4]
 800325e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003262:	d001      	beq.n	8003268 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003264:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003268:	4c61      	ldr	r4, [pc, #388]	; (80033f0 <HAL_GPIO_Init+0x1d4>)
 800326a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800326e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003272:	684f      	ldr	r7, [r1, #4]
 8003274:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003278:	d001      	beq.n	800327e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800327a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800327e:	4c5c      	ldr	r4, [pc, #368]	; (80033f0 <HAL_GPIO_Init+0x1d4>)
 8003280:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003282:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003284:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003286:	684e      	ldr	r6, [r1, #4]
 8003288:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800328c:	d001      	beq.n	8003292 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800328e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003292:	4c57      	ldr	r4, [pc, #348]	; (80033f0 <HAL_GPIO_Init+0x1d4>)
 8003294:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003296:	3301      	adds	r3, #1
 8003298:	2b0f      	cmp	r3, #15
 800329a:	f200 80a2 	bhi.w	80033e2 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 800329e:	2201      	movs	r2, #1
 80032a0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032a2:	680c      	ldr	r4, [r1, #0]
 80032a4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80032a8:	42aa      	cmp	r2, r5
 80032aa:	d1f4      	bne.n	8003296 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ac:	684c      	ldr	r4, [r1, #4]
 80032ae:	2c12      	cmp	r4, #18
 80032b0:	bf18      	it	ne
 80032b2:	2c02      	cmpne	r4, #2
 80032b4:	d110      	bne.n	80032d8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80032b6:	08de      	lsrs	r6, r3, #3
 80032b8:	3608      	adds	r6, #8
 80032ba:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032be:	f003 0407 	and.w	r4, r3, #7
 80032c2:	00a7      	lsls	r7, r4, #2
 80032c4:	240f      	movs	r4, #15
 80032c6:	40bc      	lsls	r4, r7
 80032c8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032cc:	690c      	ldr	r4, [r1, #16]
 80032ce:	40bc      	lsls	r4, r7
 80032d0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 80032d4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80032d8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032da:	005f      	lsls	r7, r3, #1
 80032dc:	2603      	movs	r6, #3
 80032de:	40be      	lsls	r6, r7
 80032e0:	43f6      	mvns	r6, r6
 80032e2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032e6:	684c      	ldr	r4, [r1, #4]
 80032e8:	f004 0403 	and.w	r4, r4, #3
 80032ec:	40bc      	lsls	r4, r7
 80032ee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80032f2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f4:	684c      	ldr	r4, [r1, #4]
 80032f6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80032fa:	2c11      	cmp	r4, #17
 80032fc:	bf18      	it	ne
 80032fe:	f1bc 0f01 	cmpne.w	ip, #1
 8003302:	d901      	bls.n	8003308 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003304:	2c12      	cmp	r4, #18
 8003306:	d111      	bne.n	800332c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003308:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800330a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800330e:	68cc      	ldr	r4, [r1, #12]
 8003310:	40bc      	lsls	r4, r7
 8003312:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003316:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003318:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800331e:	684c      	ldr	r4, [r1, #4]
 8003320:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003324:	409a      	lsls	r2, r3
 8003326:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 800332a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800332c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800332e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003330:	688a      	ldr	r2, [r1, #8]
 8003332:	40ba      	lsls	r2, r7
 8003334:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003336:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003338:	684a      	ldr	r2, [r1, #4]
 800333a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800333e:	d0aa      	beq.n	8003296 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003340:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <HAL_GPIO_Init+0x1d8>)
 8003342:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003344:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003348:	6454      	str	r4, [r2, #68]	; 0x44
 800334a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800334c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003350:	9201      	str	r2, [sp, #4]
 8003352:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003354:	089c      	lsrs	r4, r3, #2
 8003356:	1ca6      	adds	r6, r4, #2
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_GPIO_Init+0x1d0>)
 800335a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800335e:	f003 0203 	and.w	r2, r3, #3
 8003362:	0096      	lsls	r6, r2, #2
 8003364:	220f      	movs	r2, #15
 8003366:	40b2      	lsls	r2, r6
 8003368:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <HAL_GPIO_Init+0x1dc>)
 800336e:	4290      	cmp	r0, r2
 8003370:	f43f af5d 	beq.w	800322e <HAL_GPIO_Init+0x12>
 8003374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003378:	4290      	cmp	r0, r2
 800337a:	d022      	beq.n	80033c2 <HAL_GPIO_Init+0x1a6>
 800337c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003380:	4290      	cmp	r0, r2
 8003382:	d020      	beq.n	80033c6 <HAL_GPIO_Init+0x1aa>
 8003384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003388:	4290      	cmp	r0, r2
 800338a:	d01e      	beq.n	80033ca <HAL_GPIO_Init+0x1ae>
 800338c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003390:	4290      	cmp	r0, r2
 8003392:	d01c      	beq.n	80033ce <HAL_GPIO_Init+0x1b2>
 8003394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003398:	4290      	cmp	r0, r2
 800339a:	d01a      	beq.n	80033d2 <HAL_GPIO_Init+0x1b6>
 800339c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a0:	4290      	cmp	r0, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_GPIO_Init+0x1ba>
 80033a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a8:	4290      	cmp	r0, r2
 80033aa:	d016      	beq.n	80033da <HAL_GPIO_Init+0x1be>
 80033ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b0:	4290      	cmp	r0, r2
 80033b2:	d014      	beq.n	80033de <HAL_GPIO_Init+0x1c2>
 80033b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b8:	4290      	cmp	r0, r2
 80033ba:	f43f af36 	beq.w	800322a <HAL_GPIO_Init+0xe>
 80033be:	220a      	movs	r2, #10
 80033c0:	e736      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033c2:	2201      	movs	r2, #1
 80033c4:	e734      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033c6:	2202      	movs	r2, #2
 80033c8:	e732      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033ca:	2203      	movs	r2, #3
 80033cc:	e730      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033ce:	2204      	movs	r2, #4
 80033d0:	e72e      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033d2:	2205      	movs	r2, #5
 80033d4:	e72c      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033d6:	2206      	movs	r2, #6
 80033d8:	e72a      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033da:	2207      	movs	r2, #7
 80033dc:	e728      	b.n	8003230 <HAL_GPIO_Init+0x14>
 80033de:	2208      	movs	r2, #8
 80033e0:	e726      	b.n	8003230 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80033e2:	b002      	add	sp, #8
 80033e4:	bcf0      	pop	{r4, r5, r6, r7}
 80033e6:	4770      	bx	lr
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40013800 	.word	0x40013800
 80033f0:	40013c00 	.word	0x40013c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000

080033fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033fc:	6903      	ldr	r3, [r0, #16]
 80033fe:	4219      	tst	r1, r3
 8003400:	d101      	bne.n	8003406 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003402:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003404:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003406:	2001      	movs	r0, #1
 8003408:	4770      	bx	lr

0800340a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340a:	b912      	cbnz	r2, 8003412 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800340c:	0409      	lsls	r1, r1, #16
 800340e:	6181      	str	r1, [r0, #24]
  }
}
 8003410:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003412:	6181      	str	r1, [r0, #24]
 8003414:	4770      	bx	lr
	...

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4203      	tst	r3, r0
 8003420:	d100      	bne.n	8003424 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003422:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003426:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003428:	f006 f91a 	bl	8009660 <HAL_GPIO_EXTI_Callback>
}
 800342c:	e7f9      	b.n	8003422 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800342e:	bf00      	nop
 8003430:	40013c00 	.word	0x40013c00

08003434 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003434:	6803      	ldr	r3, [r0, #0]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	f012 0f02 	tst.w	r2, #2
 800343c:	d001      	beq.n	8003442 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003442:	6803      	ldr	r3, [r0, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	f012 0f01 	tst.w	r2, #1
 800344a:	d103      	bne.n	8003454 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	619a      	str	r2, [r3, #24]
  }
}
 8003454:	4770      	bx	lr

08003456 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003456:	b470      	push	{r4, r5, r6}
 8003458:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800345a:	6805      	ldr	r5, [r0, #0]
 800345c:	6868      	ldr	r0, [r5, #4]
 800345e:	0d74      	lsrs	r4, r6, #21
 8003460:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003464:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003468:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800346c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003470:	f044 0403 	orr.w	r4, r4, #3
 8003474:	ea20 0004 	bic.w	r0, r0, r4
 8003478:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800347c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003480:	4319      	orrs	r1, r3
 8003482:	4331      	orrs	r1, r6
 8003484:	4301      	orrs	r1, r0
 8003486:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003488:	bc70      	pop	{r4, r5, r6}
 800348a:	4770      	bx	lr

0800348c <I2C_IsAcknowledgeFailed>:
{
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
 8003492:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f013 0f10 	tst.w	r3, #16
 800349c:	d01c      	beq.n	80034d8 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	f012 0f20 	tst.w	r2, #32
 80034a6:	d119      	bne.n	80034dc <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80034a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80034ac:	d0f7      	beq.n	800349e <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fe2d 	bl	800210c <HAL_GetTick>
 80034b2:	1b80      	subs	r0, r0, r6
 80034b4:	42a8      	cmp	r0, r5
 80034b6:	d801      	bhi.n	80034bc <I2C_IsAcknowledgeFailed+0x30>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	d1f0      	bne.n	800349e <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034be:	f043 0320 	orr.w	r3, r3, #32
 80034c2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	2320      	movs	r3, #32
 80034c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80034d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e020      	b.n	800351a <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80034d8:	2000      	movs	r0, #0
 80034da:	e01e      	b.n	800351a <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	2210      	movs	r2, #16
 80034de:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	2520      	movs	r5, #32
 80034e4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7ff ffa4 	bl	8003434 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	6853      	ldr	r3, [r2, #4]
 80034f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80034f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80034f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800350a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003514:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003518:	2001      	movs	r0, #1
}
 800351a:	bd70      	pop	{r4, r5, r6, pc}

0800351c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4604      	mov	r4, r0
 8003520:	460d      	mov	r5, r1
 8003522:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f013 0f02 	tst.w	r3, #2
 800352c:	d11d      	bne.n	800356a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	4632      	mov	r2, r6
 8003530:	4629      	mov	r1, r5
 8003532:	4620      	mov	r0, r4
 8003534:	f7ff ffaa 	bl	800348c <I2C_IsAcknowledgeFailed>
 8003538:	b9c8      	cbnz	r0, 800356e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800353a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800353e:	d0f1      	beq.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe fde4 	bl	800210c <HAL_GetTick>
 8003544:	1b80      	subs	r0, r0, r6
 8003546:	42a8      	cmp	r0, r5
 8003548:	d801      	bhi.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800354a:	2d00      	cmp	r5, #0
 800354c:	d1ea      	bne.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003550:	f043 0320 	orr.w	r3, r3, #32
 8003554:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003556:	2320      	movs	r3, #32
 8003558:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	2300      	movs	r3, #0
 800355e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003562:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
 8003568:	e000      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800356a:	2000      	movs	r0, #0
}
 800356c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800356e:	2001      	movs	r0, #1
 8003570:	e7fc      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003572 <I2C_WaitOnFlagUntilTimeout>:
{
 8003572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003574:	4605      	mov	r5, r0
 8003576:	460f      	mov	r7, r1
 8003578:	4616      	mov	r6, r2
 800357a:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	ea37 0303 	bics.w	r3, r7, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	42b3      	cmp	r3, r6
 800358c:	d118      	bne.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800358e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003592:	d0f3      	beq.n	800357c <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fe fdba 	bl	800210c <HAL_GetTick>
 8003598:	9b06      	ldr	r3, [sp, #24]
 800359a:	1ac0      	subs	r0, r0, r3
 800359c:	42a0      	cmp	r0, r4
 800359e:	d801      	bhi.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x32>
 80035a0:	2c00      	cmp	r4, #0
 80035a2:	d1eb      	bne.n	800357c <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	2320      	movs	r3, #32
 80035ae:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80035b8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
 80035be:	e000      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80035c0:	2000      	movs	r0, #0
}
 80035c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035c4 <I2C_RequestMemoryWrite>:
{
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	4604      	mov	r4, r0
 80035ca:	4616      	mov	r6, r2
 80035cc:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <I2C_RequestMemoryWrite+0x6c>)
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d6:	b2ea      	uxtb	r2, r5
 80035d8:	f7ff ff3d 	bl	8003456 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035dc:	9a07      	ldr	r2, [sp, #28]
 80035de:	9906      	ldr	r1, [sp, #24]
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff ff9b 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 80035e6:	b9e8      	cbnz	r0, 8003624 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e8:	2d01      	cmp	r5, #1
 80035ea:	d10e      	bne.n	800360a <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	b2f6      	uxtb	r6, r6
 80035f0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	9b07      	ldr	r3, [sp, #28]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	9b06      	ldr	r3, [sp, #24]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7ff ffb8 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	b178      	cbz	r0, 8003626 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e00d      	b.n	8003626 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	0a32      	lsrs	r2, r6, #8
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003610:	9a07      	ldr	r2, [sp, #28]
 8003612:	9906      	ldr	r1, [sp, #24]
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ff81 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 800361a:	b938      	cbnz	r0, 800362c <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	b2f6      	uxtb	r6, r6
 8003620:	629e      	str	r6, [r3, #40]	; 0x28
 8003622:	e7e6      	b.n	80035f2 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
}
 8003626:	4618      	mov	r0, r3
 8003628:	b002      	add	sp, #8
 800362a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e7fa      	b.n	8003626 <I2C_RequestMemoryWrite+0x62>
 8003630:	80002000 	.word	0x80002000

08003634 <I2C_RequestMemoryRead>:
{
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	4604      	mov	r4, r0
 800363a:	4616      	mov	r6, r2
 800363c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <I2C_RequestMemoryRead+0x6c>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	b2ea      	uxtb	r2, r5
 8003646:	f7ff ff06 	bl	8003456 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	9a07      	ldr	r2, [sp, #28]
 800364c:	9906      	ldr	r1, [sp, #24]
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff ff64 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 8003654:	b9e8      	cbnz	r0, 8003692 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003656:	2d01      	cmp	r5, #1
 8003658:	d10e      	bne.n	8003678 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	b2f6      	uxtb	r6, r6
 800365e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	9b07      	ldr	r3, [sp, #28]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	9b06      	ldr	r3, [sp, #24]
 8003666:	2200      	movs	r2, #0
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4620      	mov	r0, r4
 800366c:	f7ff ff81 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	b178      	cbz	r0, 8003694 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e00d      	b.n	8003694 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	0a32      	lsrs	r2, r6, #8
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	9a07      	ldr	r2, [sp, #28]
 8003680:	9906      	ldr	r1, [sp, #24]
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff ff4a 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 8003688:	b938      	cbnz	r0, 800369a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	b2f6      	uxtb	r6, r6
 800368e:	629e      	str	r6, [r3, #40]	; 0x28
 8003690:	e7e6      	b.n	8003660 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	b002      	add	sp, #8
 8003698:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e7fa      	b.n	8003694 <I2C_RequestMemoryRead+0x60>
 800369e:	bf00      	nop
 80036a0:	80002000 	.word	0x80002000

080036a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f013 0f20 	tst.w	r3, #32
 80036b4:	d11a      	bne.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	4632      	mov	r2, r6
 80036b8:	4621      	mov	r1, r4
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7ff fee6 	bl	800348c <I2C_IsAcknowledgeFailed>
 80036c0:	b9b0      	cbnz	r0, 80036f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fd23 	bl	800210c <HAL_GetTick>
 80036c6:	1b80      	subs	r0, r0, r6
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d801      	bhi.n	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80036cc:	2c00      	cmp	r4, #0
 80036ce:	d1ed      	bne.n	80036ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	2320      	movs	r3, #32
 80036da:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80036e4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
}
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e7fc      	b.n	80036ea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80036f0:	2001      	movs	r0, #1
 80036f2:	e7fa      	b.n	80036ea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080036f4 <HAL_I2C_MspInit>:
}
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d057      	beq.n	80037ac <HAL_I2C_Init+0xb4>
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003700:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003704:	2b00      	cmp	r3, #0
 8003706:	d041      	beq.n	800378c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	2324      	movs	r3, #36	; 0x24
 800370a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6813      	ldr	r3, [r2, #0]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003718:	6863      	ldr	r3, [r4, #4]
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003720:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	6893      	ldr	r3, [r2, #8]
 8003726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800372a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372c:	68e3      	ldr	r3, [r4, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d031      	beq.n	8003796 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003732:	68a3      	ldr	r3, [r4, #8]
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800373a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800373c:	68e3      	ldr	r3, [r4, #12]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d02f      	beq.n	80037a2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	6851      	ldr	r1, [r2, #4]
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_I2C_Init+0xb8>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	68d3      	ldr	r3, [r2, #12]
 8003750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003754:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	6962      	ldr	r2, [r4, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	69a1      	ldr	r1, [r4, #24]
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003764:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003766:	69e3      	ldr	r3, [r4, #28]
 8003768:	6a21      	ldr	r1, [r4, #32]
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	2000      	movs	r0, #0
 800377c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800377e:	2320      	movs	r3, #32
 8003780:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003784:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800378a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800378c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003790:	f7ff ffb0 	bl	80036f4 <HAL_I2C_MspInit>
 8003794:	e7b8      	b.n	8003708 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003796:	68a3      	ldr	r3, [r4, #8]
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	6093      	str	r3, [r2, #8]
 80037a0:	e7cc      	b.n	800373c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e7ca      	b.n	8003742 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
}
 80037ae:	4770      	bx	lr
 80037b0:	02008000 	.word	0x02008000

080037b4 <HAL_I2C_MspDeInit>:
}
 80037b4:	4770      	bx	lr

080037b6 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80037b6:	b1a8      	cbz	r0, 80037e4 <HAL_I2C_DeInit+0x2e>
{
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	2324      	movs	r3, #36	; 0x24
 80037be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80037c2:	6802      	ldr	r2, [r0, #0]
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80037cc:	f7ff fff2 	bl	80037b4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	2000      	movs	r0, #0
 80037d2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037d4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80037de:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80037e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037e4:	2001      	movs	r0, #1
}
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_Mem_Write>:
{
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80037f6:	b2ed      	uxtb	r5, r5
 80037f8:	2d20      	cmp	r5, #32
 80037fa:	f040 80bf 	bne.w	800397c <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 80037fe:	fab6 f586 	clz	r5, r6
 8003802:	096d      	lsrs	r5, r5, #5
 8003804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003806:	2c00      	cmp	r4, #0
 8003808:	bf08      	it	eq
 800380a:	2501      	moveq	r5, #1
 800380c:	b9d5      	cbnz	r5, 8003844 <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 800380e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003812:	2c01      	cmp	r4, #1
 8003814:	f000 80b7 	beq.w	8003986 <HAL_I2C_Mem_Write+0x19e>
 8003818:	4698      	mov	r8, r3
 800381a:	4691      	mov	r9, r2
 800381c:	460d      	mov	r5, r1
 800381e:	4604      	mov	r4, r0
 8003820:	f04f 0a01 	mov.w	sl, #1
 8003824:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003828:	f7fe fc70 	bl	800210c <HAL_GetTick>
 800382c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800382e:	9000      	str	r0, [sp, #0]
 8003830:	2319      	movs	r3, #25
 8003832:	4652      	mov	r2, sl
 8003834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff fe9a 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 800383e:	b130      	cbz	r0, 800384e <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e09c      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003848:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e097      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800384e:	2321      	movs	r3, #33	; 0x21
 8003850:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	2300      	movs	r3, #0
 800385c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800385e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003860:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003862:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003864:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003866:	9701      	str	r7, [sp, #4]
 8003868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4643      	mov	r3, r8
 800386e:	464a      	mov	r2, r9
 8003870:	4629      	mov	r1, r5
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff fea6 	bl	80035c4 <I2C_RequestMemoryWrite>
 8003878:	b970      	cbnz	r0, 8003898 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800387a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d90f      	bls.n	80038a2 <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	22ff      	movs	r2, #255	; 0xff
 8003884:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800388e:	4629      	mov	r1, r5
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fde0 	bl	8003456 <I2C_TransferConfig>
 8003896:	e021      	b.n	80038dc <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003898:	2300      	movs	r3, #0
 800389a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800389e:	4653      	mov	r3, sl
 80038a0:	e06d      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80038a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038a4:	b292      	uxth	r2, r2
 80038a6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	4629      	mov	r1, r5
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7ff fdce 	bl	8003456 <I2C_TransferConfig>
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038be:	b292      	uxth	r2, r2
 80038c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4629      	mov	r1, r5
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff fdc1 	bl	8003456 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80038d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d032      	beq.n	8003942 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038dc:	463a      	mov	r2, r7
 80038de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff fe1b 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d14f      	bne.n	800398a <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80038f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80038f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003908:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800390a:	b292      	uxth	r2, r2
 800390c:	2a00      	cmp	r2, #0
 800390e:	d0e1      	beq.n	80038d4 <HAL_I2C_Mem_Write+0xec>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1df      	bne.n	80038d4 <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003914:	9700      	str	r7, [sp, #0]
 8003916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff fe28 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 8003922:	bba0      	cbnz	r0, 800398e <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003924:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2bff      	cmp	r3, #255	; 0xff
 800392a:	d9c7      	bls.n	80038bc <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003938:	4629      	mov	r1, r5
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fd8b 	bl	8003456 <I2C_TransferConfig>
 8003940:	e7c8      	b.n	80038d4 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	463a      	mov	r2, r7
 8003944:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff feac 	bl	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	bb00      	cbnz	r0, 8003992 <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	2120      	movs	r1, #32
 8003954:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	6842      	ldr	r2, [r0, #4]
 800395a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800395e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003962:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003970:	2200      	movs	r2, #0
 8003972:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003976:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800397a:	e000      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
}
 800397e:	4618      	mov	r0, r3
 8003980:	b002      	add	sp, #8
 8003982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003986:	2302      	movs	r3, #2
 8003988:	e7f9      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e7f7      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e7f5      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e7f3      	b.n	800397e <HAL_I2C_Mem_Write+0x196>
	...

08003998 <HAL_I2C_Mem_Read>:
{
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80039a6:	b2ed      	uxtb	r5, r5
 80039a8:	2d20      	cmp	r5, #32
 80039aa:	f040 80c1 	bne.w	8003b30 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 80039ae:	fab6 f586 	clz	r5, r6
 80039b2:	096d      	lsrs	r5, r5, #5
 80039b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	bf08      	it	eq
 80039ba:	2501      	moveq	r5, #1
 80039bc:	b9d5      	cbnz	r5, 80039f4 <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 80039be:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80039c2:	2c01      	cmp	r4, #1
 80039c4:	f000 80b9 	beq.w	8003b3a <HAL_I2C_Mem_Read+0x1a2>
 80039c8:	4698      	mov	r8, r3
 80039ca:	4691      	mov	r9, r2
 80039cc:	460d      	mov	r5, r1
 80039ce:	4604      	mov	r4, r0
 80039d0:	f04f 0a01 	mov.w	sl, #1
 80039d4:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80039d8:	f7fe fb98 	bl	800210c <HAL_GetTick>
 80039dc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039de:	9000      	str	r0, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	4652      	mov	r2, sl
 80039e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff fdc2 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 80039ee:	b130      	cbz	r0, 80039fe <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e09e      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f8:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e099      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039fe:	2322      	movs	r3, #34	; 0x22
 8003a00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a10:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a12:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a14:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a16:	9701      	str	r7, [sp, #4]
 8003a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	464a      	mov	r2, r9
 8003a20:	4629      	mov	r1, r5
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7ff fe06 	bl	8003634 <I2C_RequestMemoryRead>
 8003a28:	b970      	cbnz	r0, 8003a48 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2bff      	cmp	r3, #255	; 0xff
 8003a30:	d90f      	bls.n	8003a52 <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <HAL_I2C_Mem_Read+0x1b4>)
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3e:	4629      	mov	r1, r5
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7ff fd08 	bl	8003456 <I2C_TransferConfig>
 8003a46:	e021      	b.n	8003a8c <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a4e:	4653      	mov	r3, sl
 8003a50:	e06f      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8003a52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a54:	b292      	uxth	r2, r2
 8003a56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a58:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_I2C_Mem_Read+0x1b4>)
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	4629      	mov	r1, r5
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff fcf6 	bl	8003456 <I2C_TransferConfig>
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff fce9 	bl	8003456 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d034      	beq.n	8003af6 <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a8c:	9700      	str	r7, [sp, #0]
 8003a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	2104      	movs	r1, #4
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fd6c 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d14f      	bne.n	8003b3e <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003aac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ab6:	3a01      	subs	r2, #1
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	d0df      	beq.n	8003a84 <HAL_I2C_Mem_Read+0xec>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1dd      	bne.n	8003a84 <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac8:	9700      	str	r7, [sp, #0]
 8003aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff fd4e 	bl	8003572 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	bba0      	cbnz	r0, 8003b42 <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2bff      	cmp	r3, #255	; 0xff
 8003ade:	d9c5      	bls.n	8003a6c <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aec:	4629      	mov	r1, r5
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fcb1 	bl	8003456 <I2C_TransferConfig>
 8003af4:	e7c6      	b.n	8003a84 <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af6:	463a      	mov	r2, r7
 8003af8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff fdd2 	bl	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	bb00      	cbnz	r0, 8003b46 <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	2120      	movs	r1, #32
 8003b08:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	6842      	ldr	r2, [r0, #4]
 8003b0e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003b12:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003b16:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b24:	2200      	movs	r2, #0
 8003b26:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003b2a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003b2e:	e000      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	b002      	add	sp, #8
 8003b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e7f9      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e7f7      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e7f5      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e7f3      	b.n	8003b32 <HAL_I2C_Mem_Read+0x19a>
 8003b4a:	bf00      	nop
 8003b4c:	80002400 	.word	0x80002400

08003b50 <HAL_I2C_GetState>:
  return hi2c->State;
 8003b50:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003b54:	4770      	bx	lr
	...

08003b58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b58:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b5a:	684d      	ldr	r5, [r1, #4]
 8003b5c:	6804      	ldr	r4, [r0, #0]
 8003b5e:	68e3      	ldr	r3, [r4, #12]
 8003b60:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003b64:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b66:	01d2      	lsls	r2, r2, #7
 8003b68:	4414      	add	r4, r2
 8003b6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b76:	680b      	ldr	r3, [r1, #0]
 8003b78:	6804      	ldr	r4, [r0, #0]
 8003b7a:	68e6      	ldr	r6, [r4, #12]
 8003b7c:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003b80:	4433      	add	r3, r6
 8003b82:	3301      	adds	r3, #1
 8003b84:	4414      	add	r4, r2
 8003b86:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003b8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b8e:	68cd      	ldr	r5, [r1, #12]
 8003b90:	6804      	ldr	r4, [r0, #0]
 8003b92:	68e3      	ldr	r3, [r4, #12]
 8003b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b98:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b9a:	4414      	add	r4, r2
 8003b9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003ba0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ba4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ba8:	688b      	ldr	r3, [r1, #8]
 8003baa:	6804      	ldr	r4, [r0, #0]
 8003bac:	68e6      	ldr	r6, [r4, #12]
 8003bae:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003bb2:	4433      	add	r3, r6
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4414      	add	r4, r2
 8003bb8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003bbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bc0:	6803      	ldr	r3, [r0, #0]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003bc8:	f024 0407 	bic.w	r4, r4, #7
 8003bcc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003bd0:	6803      	ldr	r3, [r0, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	690c      	ldr	r4, [r1, #16]
 8003bd6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bda:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003bde:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003be2:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003be4:	6805      	ldr	r5, [r0, #0]
 8003be6:	4415      	add	r5, r2
 8003be8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003bec:	2400      	movs	r4, #0
 8003bee:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bf2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003bf6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003bfa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003bfe:	6805      	ldr	r5, [r0, #0]
 8003c00:	4415      	add	r5, r2
 8003c02:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003c06:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c0a:	6803      	ldr	r3, [r0, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8003c12:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003c16:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c1a:	6803      	ldr	r3, [r0, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	694d      	ldr	r5, [r1, #20]
 8003c20:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c24:	6803      	ldr	r3, [r0, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003c2c:	4d2d      	ldr	r5, [pc, #180]	; (8003ce4 <LTDC_SetConfig+0x18c>)
 8003c2e:	4035      	ands	r5, r6
 8003c30:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c34:	69cd      	ldr	r5, [r1, #28]
 8003c36:	6a0e      	ldr	r6, [r1, #32]
 8003c38:	6803      	ldr	r3, [r0, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4335      	orrs	r5, r6
 8003c3e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c42:	6803      	ldr	r3, [r0, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8003c4a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c4e:	6803      	ldr	r3, [r0, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003c54:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c58:	690b      	ldr	r3, [r1, #16]
 8003c5a:	b16b      	cbz	r3, 8003c78 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d03a      	beq.n	8003cd6 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	bf18      	it	ne
 8003c64:	2b04      	cmpne	r3, #4
 8003c66:	d038      	beq.n	8003cda <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d038      	beq.n	8003cde <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c6c:	2b07      	cmp	r3, #7
 8003c6e:	d001      	beq.n	8003c74 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e002      	b.n	8003c7a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003c74:	2302      	movs	r3, #2
 8003c76:	e000      	b.n	8003c7a <LTDC_SetConfig+0x122>
    tmp = 4U;
 8003c78:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c7a:	6804      	ldr	r4, [r0, #0]
 8003c7c:	4414      	add	r4, r2
 8003c7e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8003c82:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003c86:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c8a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003c8c:	fb03 f504 	mul.w	r5, r3, r4
 8003c90:	684c      	ldr	r4, [r1, #4]
 8003c92:	680e      	ldr	r6, [r1, #0]
 8003c94:	1ba4      	subs	r4, r4, r6
 8003c96:	fb03 f304 	mul.w	r3, r3, r4
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	6804      	ldr	r4, [r0, #0]
 8003c9e:	4414      	add	r4, r2
 8003ca0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003ca4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8003cb0:	4c0d      	ldr	r4, [pc, #52]	; (8003ce8 <LTDC_SetConfig+0x190>)
 8003cb2:	402c      	ands	r4, r5
 8003cb4:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003cbe:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003cc2:	6803      	ldr	r3, [r0, #0]
 8003cc4:	441a      	add	r2, r3
 8003cc6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8003cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8003cd4:	4770      	bx	lr
    tmp = 3U;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e7cf      	b.n	8003c7a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e7cd      	b.n	8003c7a <LTDC_SetConfig+0x122>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e7cb      	b.n	8003c7a <LTDC_SetConfig+0x122>
 8003ce2:	bf00      	nop
 8003ce4:	fffff8f8 	.word	0xfffff8f8
 8003ce8:	fffff800 	.word	0xfffff800

08003cec <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d072      	beq.n	8003dd6 <HAL_LTDC_Init+0xea>
{
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cf4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d067      	beq.n	8003dcc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	6993      	ldr	r3, [r2, #24]
 8003d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d0a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d0c:	6821      	ldr	r1, [r4, #0]
 8003d0e:	698a      	ldr	r2, [r1, #24]
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	68a0      	ldr	r0, [r4, #8]
 8003d14:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d16:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d18:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d1a:	6920      	ldr	r0, [r4, #16]
 8003d1c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	688a      	ldr	r2, [r1, #8]
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_LTDC_Init+0xf0>)
 8003d28:	401a      	ands	r2, r3
 8003d2a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d2c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	6882      	ldr	r2, [r0, #8]
 8003d32:	69a1      	ldr	r1, [r4, #24]
 8003d34:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	68ca      	ldr	r2, [r1, #12]
 8003d40:	401a      	ands	r2, r3
 8003d42:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d44:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	68c2      	ldr	r2, [r0, #12]
 8003d4a:	6a21      	ldr	r1, [r4, #32]
 8003d4c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003d50:	430a      	orrs	r2, r1
 8003d52:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d54:	6821      	ldr	r1, [r4, #0]
 8003d56:	690a      	ldr	r2, [r1, #16]
 8003d58:	401a      	ands	r2, r3
 8003d5a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d5c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	6902      	ldr	r2, [r0, #16]
 8003d62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003d64:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d6c:	6821      	ldr	r1, [r4, #0]
 8003d6e:	694a      	ldr	r2, [r1, #20]
 8003d70:	4013      	ands	r3, r2
 8003d72:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d76:	6821      	ldr	r1, [r4, #0]
 8003d78:	694b      	ldr	r3, [r1, #20]
 8003d7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d80:	4313      	orrs	r3, r2
 8003d82:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d84:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d88:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003d8c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d96:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d98:	6821      	ldr	r1, [r4, #0]
 8003d9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d9c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003da0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003da4:	4303      	orrs	r3, r0
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003dae:	f043 0306 	orr.w	r3, r3, #6
 8003db2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	6993      	ldr	r3, [r2, #24]
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003dcc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003dd0:	f005 fe34 	bl	8009a3c <HAL_LTDC_MspInit>
 8003dd4:	e792      	b.n	8003cfc <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8003dd6:	2001      	movs	r0, #1
}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f000f800 	.word	0xf000f800

08003de0 <HAL_LTDC_ErrorCallback>:
}
 8003de0:	4770      	bx	lr

08003de2 <HAL_LTDC_LineEventCallback>:
}
 8003de2:	4770      	bx	lr

08003de4 <HAL_LTDC_ReloadEventCallback>:
}
 8003de4:	4770      	bx	lr

08003de6 <HAL_LTDC_IRQHandler>:
{
 8003de6:	b570      	push	{r4, r5, r6, lr}
 8003de8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003dea:	6803      	ldr	r3, [r0, #0]
 8003dec:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003dee:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003df0:	f015 0f04 	tst.w	r5, #4
 8003df4:	d002      	beq.n	8003dfc <HAL_LTDC_IRQHandler+0x16>
 8003df6:	f016 0f04 	tst.w	r6, #4
 8003dfa:	d112      	bne.n	8003e22 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003dfc:	f015 0f02 	tst.w	r5, #2
 8003e00:	d002      	beq.n	8003e08 <HAL_LTDC_IRQHandler+0x22>
 8003e02:	f016 0f02 	tst.w	r6, #2
 8003e06:	d121      	bne.n	8003e4c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e08:	f015 0f01 	tst.w	r5, #1
 8003e0c:	d002      	beq.n	8003e14 <HAL_LTDC_IRQHandler+0x2e>
 8003e0e:	f016 0f01 	tst.w	r6, #1
 8003e12:	d132      	bne.n	8003e7a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e14:	f015 0f08 	tst.w	r5, #8
 8003e18:	d002      	beq.n	8003e20 <HAL_LTDC_IRQHandler+0x3a>
 8003e1a:	f016 0f08 	tst.w	r6, #8
 8003e1e:	d13d      	bne.n	8003e9c <HAL_LTDC_IRQHandler+0xb6>
}
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e2a:	6803      	ldr	r3, [r0, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e30:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e3c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003e40:	2300      	movs	r3, #0
 8003e42:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003e46:	f7ff ffcb 	bl	8003de0 <HAL_LTDC_ErrorCallback>
 8003e4a:	e7d7      	b.n	8003dfc <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e5c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e66:	2304      	movs	r3, #4
 8003e68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003e72:	4620      	mov	r0, r4
 8003e74:	f7ff ffb4 	bl	8003de0 <HAL_LTDC_ErrorCallback>
 8003e78:	e7c6      	b.n	8003e08 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	2301      	movs	r3, #1
 8003e88:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e8a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff ffa4 	bl	8003de2 <HAL_LTDC_LineEventCallback>
 8003e9a:	e7bb      	b.n	8003e14 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003ea0:	f023 0308 	bic.w	r3, r3, #8
 8003ea4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7ff ff93 	bl	8003de4 <HAL_LTDC_ReloadEventCallback>
}
 8003ebe:	e7af      	b.n	8003e20 <HAL_LTDC_IRQHandler+0x3a>

08003ec0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003ec0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d027      	beq.n	8003f18 <HAL_LTDC_ConfigLayer+0x58>
{
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	4694      	mov	ip, r2
 8003ece:	460f      	mov	r7, r1
 8003ed0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003ed2:	f04f 0801 	mov.w	r8, #1
 8003ed6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eda:	2302      	movs	r3, #2
 8003edc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ee0:	2434      	movs	r4, #52	; 0x34
 8003ee2:	fb04 0402 	mla	r4, r4, r2, r0
 8003ee6:	3438      	adds	r4, #56	; 0x38
 8003ee8:	460d      	mov	r5, r1
 8003eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003efa:	4662      	mov	r2, ip
 8003efc:	4639      	mov	r1, r7
 8003efe:	4630      	mov	r0, r6
 8003f00:	f7ff fe2a 	bl	8003b58 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f04:	6833      	ldr	r3, [r6, #0]
 8003f06:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f0a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003f18:	2002      	movs	r0, #2
}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_LTDC_GetState>:
  return hltdc->State;
 8003f1c:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f24:	b510      	push	{r4, lr}
 8003f26:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_PWREx_EnableOverDrive+0x74>)
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_PWREx_EnableOverDrive+0x78>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f46:	f7fe f8e1 	bl	800210c <HAL_GetTick>
 8003f4a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_PWREx_EnableOverDrive+0x78>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f54:	d108      	bne.n	8003f68 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f56:	f7fe f8d9 	bl	800210c <HAL_GetTick>
 8003f5a:	1b00      	subs	r0, r0, r4
 8003f5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f60:	d9f4      	bls.n	8003f4c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003f62:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003f64:	b002      	add	sp, #8
 8003f66:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f68:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <HAL_PWREx_EnableOverDrive+0x78>)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003f72:	f7fe f8cb 	bl	800210c <HAL_GetTick>
 8003f76:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_PWREx_EnableOverDrive+0x78>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f80:	d107      	bne.n	8003f92 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f82:	f7fe f8c3 	bl	800210c <HAL_GetTick>
 8003f86:	1b00      	subs	r0, r0, r4
 8003f88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f8c:	d9f4      	bls.n	8003f78 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003f8e:	2003      	movs	r0, #3
 8003f90:	e7e8      	b.n	8003f64 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003f92:	2000      	movs	r0, #0
 8003f94:	e7e6      	b.n	8003f64 <HAL_PWREx_EnableOverDrive+0x40>
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	f000 81db 	beq.w	800435c <HAL_RCC_OscConfig+0x3bc>
{
 8003fa6:	b570      	push	{r4, r5, r6, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fac:	6803      	ldr	r3, [r0, #0]
 8003fae:	f013 0f01 	tst.w	r3, #1
 8003fb2:	d029      	beq.n	8004008 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb4:	4ba2      	ldr	r3, [pc, #648]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc0:	4b9f      	ldr	r3, [pc, #636]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00f      	beq.n	8003fec <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d040      	beq.n	8004056 <HAL_RCC_OscConfig+0xb6>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d154      	bne.n	8004082 <HAL_RCC_OscConfig+0xe2>
 8003fd8:	4b99      	ldr	r3, [pc, #612]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e039      	b.n	8004060 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fec:	4b94      	ldr	r3, [pc, #592]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003ff4:	d0ea      	beq.n	8003fcc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff6:	4b92      	ldr	r3, [pc, #584]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ffe:	d003      	beq.n	8004008 <HAL_RCC_OscConfig+0x68>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81ac 	beq.w	8004360 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	f013 0f02 	tst.w	r3, #2
 800400e:	d075      	beq.n	80040fc <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004010:	4b8b      	ldr	r3, [pc, #556]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f013 0f0c 	tst.w	r3, #12
 8004018:	d05e      	beq.n	80040d8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401a:	4b89      	ldr	r3, [pc, #548]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d053      	beq.n	80040ce <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 808a 	beq.w	8004142 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402e:	4a84      	ldr	r2, [pc, #528]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe f868 	bl	800210c <HAL_GetTick>
 800403c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b80      	ldr	r3, [pc, #512]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f013 0f02 	tst.w	r3, #2
 8004046:	d173      	bne.n	8004130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004048:	f7fe f860 	bl	800210c <HAL_GetTick>
 800404c:	1b40      	subs	r0, r0, r5
 800404e:	2802      	cmp	r0, #2
 8004050:	d9f5      	bls.n	800403e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8004052:	2003      	movs	r0, #3
 8004054:	e187      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	4a7a      	ldr	r2, [pc, #488]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	b32b      	cbz	r3, 80040b0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004064:	f7fe f852 	bl	800210c <HAL_GetTick>
 8004068:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004072:	d1c9      	bne.n	8004008 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe f84a 	bl	800210c <HAL_GetTick>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	2864      	cmp	r0, #100	; 0x64
 800407c:	d9f5      	bls.n	800406a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800407e:	2003      	movs	r0, #3
 8004080:	e171      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004086:	d009      	beq.n	800409c <HAL_RCC_OscConfig+0xfc>
 8004088:	4b6d      	ldr	r3, [pc, #436]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e7e1      	b.n	8004060 <HAL_RCC_OscConfig+0xc0>
 800409c:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e7d7      	b.n	8004060 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80040b0:	f7fe f82c 	bl	800210c <HAL_GetTick>
 80040b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b62      	ldr	r3, [pc, #392]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040be:	d0a3      	beq.n	8004008 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe f824 	bl	800210c <HAL_GetTick>
 80040c4:	1b40      	subs	r0, r0, r5
 80040c6:	2864      	cmp	r0, #100	; 0x64
 80040c8:	d9f5      	bls.n	80040b6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80040ca:	2003      	movs	r0, #3
 80040cc:	e14b      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80040d6:	d1a6      	bne.n	8004026 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f013 0f02 	tst.w	r3, #2
 80040e0:	d004      	beq.n	80040ec <HAL_RCC_OscConfig+0x14c>
 80040e2:	68e3      	ldr	r3, [r4, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80040e8:	2001      	movs	r0, #1
 80040ea:	e13c      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4a54      	ldr	r2, [pc, #336]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040f4:	6921      	ldr	r1, [r4, #16]
 80040f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040fa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f013 0f08 	tst.w	r3, #8
 8004102:	d046      	beq.n	8004192 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004104:	6963      	ldr	r3, [r4, #20]
 8004106:	b383      	cbz	r3, 800416a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004108:	4a4d      	ldr	r2, [pc, #308]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800410a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd fffb 	bl	800210c <HAL_GetTick>
 8004116:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004118:	4b49      	ldr	r3, [pc, #292]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	f013 0f02 	tst.w	r3, #2
 8004120:	d137      	bne.n	8004192 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004122:	f7fd fff3 	bl	800210c <HAL_GetTick>
 8004126:	1b40      	subs	r0, r0, r5
 8004128:	2802      	cmp	r0, #2
 800412a:	d9f5      	bls.n	8004118 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800412c:	2003      	movs	r0, #3
 800412e:	e11a      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4a43      	ldr	r2, [pc, #268]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004138:	6921      	ldr	r1, [r4, #16]
 800413a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e7dc      	b.n	80040fc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8004142:	4a3f      	ldr	r2, [pc, #252]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800414c:	f7fd ffde 	bl	800210c <HAL_GetTick>
 8004150:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f013 0f02 	tst.w	r3, #2
 800415a:	d0cf      	beq.n	80040fc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415c:	f7fd ffd6 	bl	800210c <HAL_GetTick>
 8004160:	1b40      	subs	r0, r0, r5
 8004162:	2802      	cmp	r0, #2
 8004164:	d9f5      	bls.n	8004152 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8004166:	2003      	movs	r0, #3
 8004168:	e0fd      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800416c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd ffca 	bl	800210c <HAL_GetTick>
 8004178:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f013 0f02 	tst.w	r3, #2
 8004182:	d006      	beq.n	8004192 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd ffc2 	bl	800210c <HAL_GetTick>
 8004188:	1b40      	subs	r0, r0, r5
 800418a:	2802      	cmp	r0, #2
 800418c:	d9f5      	bls.n	800417a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800418e:	2003      	movs	r0, #3
 8004190:	e0e9      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f013 0f04 	tst.w	r3, #4
 8004198:	d07e      	beq.n	8004298 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4b29      	ldr	r3, [pc, #164]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80041a2:	d11e      	bne.n	80041e2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b26      	ldr	r3, [pc, #152]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80041a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041b8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_OscConfig+0x2a4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d021      	beq.n	800420e <HAL_RCC_OscConfig+0x26e>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d13c      	bne.n	8004248 <HAL_RCC_OscConfig+0x2a8>
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 80041d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	671a      	str	r2, [r3, #112]	; 0x70
 80041d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	671a      	str	r2, [r3, #112]	; 0x70
 80041e0:	e01a      	b.n	8004218 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80041e2:	2500      	movs	r5, #0
 80041e4:	e7e9      	b.n	80041ba <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_RCC_OscConfig+0x2a4>)
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041f0:	f7fd ff8c 	bl	800210c <HAL_GetTick>
 80041f4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCC_OscConfig+0x2a4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041fe:	d1e1      	bne.n	80041c4 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fd ff84 	bl	800210c <HAL_GetTick>
 8004204:	1b80      	subs	r0, r0, r6
 8004206:	2864      	cmp	r0, #100	; 0x64
 8004208:	d9f5      	bls.n	80041f6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800420a:	2003      	movs	r0, #3
 800420c:	e0ab      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420e:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004210:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	b35b      	cbz	r3, 8004274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd ff76 	bl	800210c <HAL_GetTick>
 8004220:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_RCC_OscConfig+0x2a0>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	f013 0f02 	tst.w	r3, #2
 800422a:	d134      	bne.n	8004296 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd ff6e 	bl	800210c <HAL_GetTick>
 8004230:	1b80      	subs	r0, r0, r6
 8004232:	f241 3388 	movw	r3, #5000	; 0x1388
 8004236:	4298      	cmp	r0, r3
 8004238:	d9f3      	bls.n	8004222 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800423a:	2003      	movs	r0, #3
 800423c:	e093      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	2b05      	cmp	r3, #5
 800424a:	d009      	beq.n	8004260 <HAL_RCC_OscConfig+0x2c0>
 800424c:	4b48      	ldr	r3, [pc, #288]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 800424e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	671a      	str	r2, [r3, #112]	; 0x70
 8004256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
 800425e:	e7db      	b.n	8004218 <HAL_RCC_OscConfig+0x278>
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 8004262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004264:	f042 0204 	orr.w	r2, r2, #4
 8004268:	671a      	str	r2, [r3, #112]	; 0x70
 800426a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	671a      	str	r2, [r3, #112]	; 0x70
 8004272:	e7d1      	b.n	8004218 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd ff4a 	bl	800210c <HAL_GetTick>
 8004278:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f013 0f02 	tst.w	r3, #2
 8004282:	d008      	beq.n	8004296 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd ff42 	bl	800210c <HAL_GetTick>
 8004288:	1b80      	subs	r0, r0, r6
 800428a:	f241 3388 	movw	r3, #5000	; 0x1388
 800428e:	4298      	cmp	r0, r3
 8004290:	d9f3      	bls.n	800427a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
 8004294:	e067      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004296:	b9f5      	cbnz	r5, 80042d6 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004298:	69a3      	ldr	r3, [r4, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d062      	beq.n	8004364 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042a0:	6892      	ldr	r2, [r2, #8]
 80042a2:	f002 020c 	and.w	r2, r2, #12
 80042a6:	2a08      	cmp	r2, #8
 80042a8:	d05f      	beq.n	800436a <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d019      	beq.n	80042e2 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd ff28 	bl	800210c <HAL_GetTick>
 80042bc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042c6:	d047      	beq.n	8004358 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd ff20 	bl	800210c <HAL_GetTick>
 80042cc:	1b00      	subs	r0, r0, r4
 80042ce:	2802      	cmp	r0, #2
 80042d0:	d9f5      	bls.n	80042be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80042d2:	2003      	movs	r0, #3
 80042d4:	e047      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	e7da      	b.n	8004298 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042ec:	f7fd ff0e 	bl	800210c <HAL_GetTick>
 80042f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042fa:	d006      	beq.n	800430a <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd ff06 	bl	800210c <HAL_GetTick>
 8004300:	1b40      	subs	r0, r0, r5
 8004302:	2802      	cmp	r0, #2
 8004304:	d9f5      	bls.n	80042f2 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
 8004308:	e02d      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	69e3      	ldr	r3, [r4, #28]
 800430c:	6a22      	ldr	r2, [r4, #32]
 800430e:	4313      	orrs	r3, r2
 8004310:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004312:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004316:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004318:	0852      	lsrs	r2, r2, #1
 800431a:	3a01      	subs	r2, #1
 800431c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004320:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004322:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 800432c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004334:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004336:	f7fd fee9 	bl	800210c <HAL_GetTick>
 800433a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x3d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd fee1 	bl	800210c <HAL_GetTick>
 800434a:	1b00      	subs	r0, r0, r4
 800434c:	2802      	cmp	r0, #2
 800434e:	d9f5      	bls.n	800433c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8004350:	2003      	movs	r0, #3
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004354:	2000      	movs	r0, #0
 8004356:	e006      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
 8004358:	2000      	movs	r0, #0
 800435a:	e004      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 800435c:	2001      	movs	r0, #1
}
 800435e:	4770      	bx	lr
        return HAL_ERROR;
 8004360:	2001      	movs	r0, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8004364:	2000      	movs	r0, #0
}
 8004366:	b002      	add	sp, #8
 8004368:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800436a:	2001      	movs	r0, #1
 800436c:	e7fb      	b.n	8004366 <HAL_RCC_OscConfig+0x3c6>
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b04      	cmp	r3, #4
 800437e:	d044      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x96>
 8004380:	2b08      	cmp	r3, #8
 8004382:	d001      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4823      	ldr	r0, [pc, #140]	; (8004414 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004386:	4770      	bx	lr
{
 8004388:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4b20      	ldr	r3, [pc, #128]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80043a4:	2300      	movs	r3, #0
 80043a6:	481c      	ldr	r0, [pc, #112]	; (8004418 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043a8:	fba1 0100 	umull	r0, r1, r1, r0
 80043ac:	f7fc fdf4 	bl	8000f98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80043b8:	3301      	adds	r3, #1
 80043ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80043bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80043c0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80043cc:	461e      	mov	r6, r3
 80043ce:	2700      	movs	r7, #0
 80043d0:	015c      	lsls	r4, r3, #5
 80043d2:	2500      	movs	r5, #0
 80043d4:	1ae4      	subs	r4, r4, r3
 80043d6:	eb65 0507 	sbc.w	r5, r5, r7
 80043da:	01a9      	lsls	r1, r5, #6
 80043dc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80043e0:	01a0      	lsls	r0, r4, #6
 80043e2:	1b00      	subs	r0, r0, r4
 80043e4:	eb61 0105 	sbc.w	r1, r1, r5
 80043e8:	00cb      	lsls	r3, r1, #3
 80043ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80043ee:	00c4      	lsls	r4, r0, #3
 80043f0:	19a0      	adds	r0, r4, r6
 80043f2:	eb43 0107 	adc.w	r1, r3, r7
 80043f6:	028b      	lsls	r3, r1, #10
 80043f8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80043fc:	0284      	lsls	r4, r0, #10
 80043fe:	4620      	mov	r0, r4
 8004400:	4619      	mov	r1, r3
 8004402:	2300      	movs	r3, #0
 8004404:	f7fc fdc8 	bl	8000f98 <__aeabi_uldivmod>
 8004408:	e7d2      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800440a:	4803      	ldr	r0, [pc, #12]	; (8004418 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	017d7840 	.word	0x017d7840

0800441c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800441c:	2800      	cmp	r0, #0
 800441e:	f000 80a2 	beq.w	8004566 <HAL_RCC_ClockConfig+0x14a>
{
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004426:	4b52      	ldr	r3, [pc, #328]	; (8004570 <HAL_RCC_ClockConfig+0x154>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	428b      	cmp	r3, r1
 8004430:	d20c      	bcs.n	800444c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4a4f      	ldr	r2, [pc, #316]	; (8004570 <HAL_RCC_ClockConfig+0x154>)
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	f023 030f 	bic.w	r3, r3, #15
 800443a:	430b      	orrs	r3, r1
 800443c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	428b      	cmp	r3, r1
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004448:	2001      	movs	r0, #1
}
 800444a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f013 0f02 	tst.w	r3, #2
 8004452:	d017      	beq.n	8004484 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	f013 0f04 	tst.w	r3, #4
 8004458:	d004      	beq.n	8004464 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800445a:	4a46      	ldr	r2, [pc, #280]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004462:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	f013 0f08 	tst.w	r3, #8
 800446a:	d004      	beq.n	8004476 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800446c:	4a41      	ldr	r2, [pc, #260]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 800446e:	6893      	ldr	r3, [r2, #8]
 8004470:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004474:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004476:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 8004478:	6893      	ldr	r3, [r2, #8]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	68a0      	ldr	r0, [r4, #8]
 8004480:	4303      	orrs	r3, r0
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f013 0f01 	tst.w	r3, #1
 800448c:	d031      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004494:	2b02      	cmp	r3, #2
 8004496:	d025      	beq.n	80044e4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4a36      	ldr	r2, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	f012 0f02 	tst.w	r2, #2
 80044a0:	d063      	beq.n	800456a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4934      	ldr	r1, [pc, #208]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	f022 0203 	bic.w	r2, r2, #3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80044ae:	f7fd fe2d 	bl	800210c <HAL_GetTick>
 80044b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b4:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044c2:	d016      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fd fe22 	bl	800210c <HAL_GetTick>
 80044c8:	1b80      	subs	r0, r0, r6
 80044ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80044ce:	4298      	cmp	r0, r3
 80044d0:	d9f0      	bls.n	80044b4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80044d2:	2003      	movs	r0, #3
 80044d4:	e7b9      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80044de:	d1e0      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80044e0:	2001      	movs	r0, #1
 80044e2:	e7b2      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80044ec:	d1d9      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
 80044f0:	e7ab      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f2:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_ClockConfig+0x154>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	42ab      	cmp	r3, r5
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_RCC_ClockConfig+0x154>)
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	f023 030f 	bic.w	r3, r3, #15
 8004506:	432b      	orrs	r3, r5
 8004508:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	42ab      	cmp	r3, r5
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8004514:	2001      	movs	r0, #1
 8004516:	e798      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f013 0f04 	tst.w	r3, #4
 800451e:	d006      	beq.n	800452e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 8004522:	6893      	ldr	r3, [r2, #8]
 8004524:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004528:	68e1      	ldr	r1, [r4, #12]
 800452a:	430b      	orrs	r3, r1
 800452c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	f013 0f08 	tst.w	r3, #8
 8004534:	d007      	beq.n	8004546 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004536:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 8004538:	6893      	ldr	r3, [r2, #8]
 800453a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800453e:	6921      	ldr	r1, [r4, #16]
 8004540:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004544:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004546:	f7ff ff15 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x158>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x15c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	40d8      	lsrs	r0, r3
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCC_ClockConfig+0x160>)
 800455a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800455c:	2000      	movs	r0, #0
 800455e:	f005 fcab 	bl	8009eb8 <HAL_InitTick>
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
 8004564:	e771      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004566:	2001      	movs	r0, #1
}
 8004568:	4770      	bx	lr
        return HAL_ERROR;
 800456a:	2001      	movs	r0, #1
 800456c:	e76d      	b.n	800444a <HAL_RCC_ClockConfig+0x2e>
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00
 8004574:	40023800 	.word	0x40023800
 8004578:	08012b0c 	.word	0x08012b0c
 800457c:	2000005c 	.word	0x2000005c

08004580 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004580:	4b01      	ldr	r3, [pc, #4]	; (8004588 <HAL_RCC_GetHCLKFreq+0x8>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000005c 	.word	0x2000005c

0800458c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800458c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800458e:	f7ff fff7 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800459a:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
}
 800459e:	40d8      	lsrs	r0, r3
 80045a0:	bd08      	pop	{r3, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	08012b1c 	.word	0x08012b1c

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045ae:	f7ff ffe7 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80045ba:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80045be:	40d8      	lsrs	r0, r3
 80045c0:	bd08      	pop	{r3, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08012b1c 	.word	0x08012b1c

080045cc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045cc:	230f      	movs	r3, #15
 80045ce:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetClockConfig+0x34>)
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80045e0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80045e8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80045f2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_RCC_GetClockConfig+0x38>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	600b      	str	r3, [r1, #0]
}
 80045fe:	4770      	bx	lr
 8004600:	40023800 	.word	0x40023800
 8004604:	40023c00 	.word	0x40023c00

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800460e:	6803      	ldr	r3, [r0, #0]
 8004610:	f013 0f01 	tst.w	r3, #1
 8004614:	d00c      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004616:	4baf      	ldr	r3, [pc, #700]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004628:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800462a:	b1c3      	cbz	r3, 800465e <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800462c:	2600      	movs	r6, #0
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004630:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004638:	d015      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800463a:	4aa6      	ldr	r2, [pc, #664]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800463c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004640:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004644:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004646:	430b      	orrs	r3, r1
 8004648:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800464c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d006      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 811b 	beq.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 800465a:	2500      	movs	r5, #0
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800465e:	2601      	movs	r6, #1
 8004660:	e7e7      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8004662:	2601      	movs	r6, #1
 8004664:	e7f6      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8004666:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800466e:	d00f      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004670:	4a98      	ldr	r2, [pc, #608]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004672:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004676:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800467a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800467c:	430b      	orrs	r3, r1
 800467e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004688:	f000 8104 	beq.w	8004894 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800468c:	b903      	cbnz	r3, 8004690 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800468e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004696:	d000      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8004698:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469a:	f013 0f20 	tst.w	r3, #32
 800469e:	f040 80fb 	bne.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	f013 0f10 	tst.w	r3, #16
 80046a8:	d00c      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046aa:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80046b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80046b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046be:	430a      	orrs	r2, r1
 80046c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046cc:	4a81      	ldr	r2, [pc, #516]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80046d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80046e4:	d008      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e6:	4a7b      	ldr	r2, [pc, #492]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046ec:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80046f0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80046f2:	430b      	orrs	r3, r1
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80046fe:	d008      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004700:	4a74      	ldr	r2, [pc, #464]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004702:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004706:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800470a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800470c:	430b      	orrs	r3, r1
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800471a:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800471c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004720:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004724:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004726:	430b      	orrs	r3, r1
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004734:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004736:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004740:	430b      	orrs	r3, r1
 8004742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f013 0f80 	tst.w	r3, #128	; 0x80
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474e:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004750:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004754:	f023 030c 	bic.w	r3, r3, #12
 8004758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800475a:	430b      	orrs	r3, r1
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004768:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800476a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800476e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004772:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004774:	430b      	orrs	r3, r1
 8004776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004780:	d008      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004782:	4a54      	ldr	r2, [pc, #336]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004784:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800478c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800478e:	430b      	orrs	r3, r1
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800479a:	d008      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479c:	4a4d      	ldr	r2, [pc, #308]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800479e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80047a8:	430b      	orrs	r3, r1
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047b4:	d008      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047b6:	4a47      	ldr	r2, [pc, #284]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047c0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80047c2:	430b      	orrs	r3, r1
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80047ce:	d008      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047d0:	4a40      	ldr	r2, [pc, #256]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80047dc:	430b      	orrs	r3, r1
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ea:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047f4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80047f6:	430b      	orrs	r3, r1
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004804:	4a33      	ldr	r2, [pc, #204]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004806:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800480a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800480e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004810:	430b      	orrs	r3, r1
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800481c:	d00d      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800481e:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004820:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004824:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004828:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800482a:	430b      	orrs	r3, r1
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004830:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004836:	f000 8099 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f013 0f08 	tst.w	r3, #8
 8004840:	d000      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8004842:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004844:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800484c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004850:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004854:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004856:	430b      	orrs	r3, r1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004862:	d009      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004864:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004866:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004872:	430b      	orrs	r3, r1
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004878:	2e00      	cmp	r6, #0
 800487a:	d179      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004882:	d075      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004884:	2d00      	cmp	r5, #0
 8004886:	f040 8106 	bne.w	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800488a:	2000      	movs	r0, #0
}
 800488c:	b003      	add	sp, #12
 800488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8004890:	2501      	movs	r5, #1
 8004892:	e6e9      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8004894:	2601      	movs	r6, #1
 8004896:	e6f9      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800489a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048b6:	f7fd fc29 	bl	800210c <HAL_GetTick>
 80048ba:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048c4:	d10a      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fd fc21 	bl	800210c <HAL_GetTick>
 80048ca:	1bc0      	subs	r0, r0, r7
 80048cc:	2864      	cmp	r0, #100	; 0x64
 80048ce:	d9f5      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 80048d0:	2003      	movs	r0, #3
 80048d2:	e7db      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048dc:	4bb3      	ldr	r3, [pc, #716]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048e4:	d015      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80048e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d010      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f0:	4bae      	ldr	r3, [pc, #696]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048fa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80048fe:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004900:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004902:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004906:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004908:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	f013 0f01 	tst.w	r3, #1
 8004910:	d112      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004914:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004918:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800491c:	d01d      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x352>
 800491e:	4aa3      	ldr	r2, [pc, #652]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004920:	6893      	ldr	r3, [r2, #8]
 8004922:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004926:	6093      	str	r3, [r2, #8]
 8004928:	49a0      	ldr	r1, [pc, #640]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800492a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800492c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800492e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004932:	4313      	orrs	r3, r2
 8004934:	670b      	str	r3, [r1, #112]	; 0x70
 8004936:	e6b4      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8004938:	f7fd fbe8 	bl	800210c <HAL_GetTick>
 800493c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	4b9b      	ldr	r3, [pc, #620]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f013 0f02 	tst.w	r3, #2
 8004946:	d1e4      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd fbe0 	bl	800210c <HAL_GetTick>
 800494c:	1bc0      	subs	r0, r0, r7
 800494e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004952:	4298      	cmp	r0, r3
 8004954:	d9f3      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8004956:	2003      	movs	r0, #3
 8004958:	e798      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800495a:	4894      	ldr	r0, [pc, #592]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800495c:	6882      	ldr	r2, [r0, #8]
 800495e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004962:	4993      	ldr	r1, [pc, #588]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8004964:	4019      	ands	r1, r3
 8004966:	430a      	orrs	r2, r1
 8004968:	6082      	str	r2, [r0, #8]
 800496a:	e7dd      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 800496c:	2501      	movs	r5, #1
 800496e:	e764      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8004970:	4a8e      	ldr	r2, [pc, #568]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004978:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800497a:	f7fd fbc7 	bl	800210c <HAL_GetTick>
 800497e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004980:	4b8a      	ldr	r3, [pc, #552]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004988:	d006      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800498a:	f7fd fbbf 	bl	800210c <HAL_GetTick>
 800498e:	1b80      	subs	r0, r0, r6
 8004990:	2864      	cmp	r0, #100	; 0x64
 8004992:	d9f5      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8004994:	2003      	movs	r0, #3
 8004996:	e779      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f013 0f01 	tst.w	r3, #1
 800499e:	d013      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80049a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a2:	b98b      	cbnz	r3, 80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a4:	4a81      	ldr	r2, [pc, #516]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049a6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049aa:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ae:	6860      	ldr	r0, [r4, #4]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80049b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80049bc:	430b      	orrs	r3, r1
 80049be:	68a1      	ldr	r1, [r4, #8]
 80049c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80049c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80049ce:	d003      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80049d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80049d2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80049d6:	d006      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80049dc:	d01e      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e4:	d11a      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e6:	4a71      	ldr	r2, [pc, #452]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049e8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ec:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049f0:	6860      	ldr	r0, [r4, #4]
 80049f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80049fa:	68e0      	ldr	r0, [r4, #12]
 80049fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004a00:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004a04:	430b      	orrs	r3, r1
 8004a06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a0a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004a0e:	f023 031f 	bic.w	r3, r3, #31
 8004a12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a14:	3901      	subs	r1, #1
 8004a16:	430b      	orrs	r3, r1
 8004a18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004a22:	d011      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a24:	4a61      	ldr	r2, [pc, #388]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a26:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a2e:	6866      	ldr	r6, [r4, #4]
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004a38:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004a3c:	4303      	orrs	r3, r0
 8004a3e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a50:	6862      	ldr	r2, [r4, #4]
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004a5a:	68e2      	ldr	r2, [r4, #12]
 8004a5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a60:	68a2      	ldr	r2, [r4, #8]
 8004a62:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004a66:	4a51      	ldr	r2, [pc, #324]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004a6c:	4a4f      	ldr	r2, [pc, #316]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a74:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a76:	f7fd fb49 	bl	800210c <HAL_GetTick>
 8004a7a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004a84:	f47f aefe 	bne.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a88:	f7fd fb40 	bl	800210c <HAL_GetTick>
 8004a8c:	1b80      	subs	r0, r0, r6
 8004a8e:	2864      	cmp	r0, #100	; 0x64
 8004a90:	d9f4      	bls.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8004a92:	2003      	movs	r0, #3
 8004a94:	e6fa      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8004a96:	4a45      	ldr	r2, [pc, #276]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fb34 	bl	800210c <HAL_GetTick>
 8004aa4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa6:	4b41      	ldr	r3, [pc, #260]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004aae:	d006      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ab0:	f7fd fb2c 	bl	800210c <HAL_GetTick>
 8004ab4:	1b40      	subs	r0, r0, r5
 8004ab6:	2864      	cmp	r0, #100	; 0x64
 8004ab8:	d9f5      	bls.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8004aba:	2003      	movs	r0, #3
 8004abc:	e6e6      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004ac4:	d001      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ac6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ac8:	b122      	cbz	r2, 8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004aca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004ace:	d01d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad2:	b9db      	cbnz	r3, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ad6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ada:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ade:	6960      	ldr	r0, [r4, #20]
 8004ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ae4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004ae8:	69a0      	ldr	r0, [r4, #24]
 8004aea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004aee:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004af2:	430b      	orrs	r3, r1
 8004af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004af8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004afc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004b00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b02:	3901      	subs	r1, #1
 8004b04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b14:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1a:	d031      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	f013 0f08 	tst.w	r3, #8
 8004b22:	d019      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b26:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b2e:	6960      	ldr	r0, [r4, #20]
 8004b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b34:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004b38:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	69e1      	ldr	r1, [r4, #28]
 8004b40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b48:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004b4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b52:	430b      	orrs	r3, r1
 8004b54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004b62:	f7fd fad3 	bl	800210c <HAL_GetTick>
 8004b66:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004b70:	d119      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b72:	f7fd facb 	bl	800210c <HAL_GetTick>
 8004b76:	1b00      	subs	r0, r0, r4
 8004b78:	2864      	cmp	r0, #100	; 0x64
 8004b7a:	d9f5      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	e685      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b82:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b86:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b8a:	6965      	ldr	r5, [r4, #20]
 8004b8c:	6a23      	ldr	r3, [r4, #32]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004b94:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004b98:	4303      	orrs	r3, r0
 8004b9a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004ba4:	e7ba      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e670      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	0ffffcff 	.word	0x0ffffcff

08004bb4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004bb4:	b1d8      	cbz	r0, 8004bee <HAL_SDRAM_Init+0x3a>
{   
 8004bb6:	b538      	push	{r3, r4, r5, lr}
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004bbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004bc0:	b183      	cbz	r3, 8004be4 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004bc8:	1d21      	adds	r1, r4, #4
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	f001 f9ec 	bl	8005fa8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	f001 fa21 	bl	800601c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004be0:	2000      	movs	r0, #0
}
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004be4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004be8:	f004 f9a2 	bl	8008f30 <HAL_SDRAM_MspInit>
 8004bec:	e7e9      	b.n	8004bc2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
}
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004bf2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004bf4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d014      	beq.n	8004c28 <HAL_SDRAM_SendCommand+0x36>
 8004bfe:	460d      	mov	r5, r1
 8004c00:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004c08:	6800      	ldr	r0, [r0, #0]
 8004c0a:	f001 fa53 	bl	80060b4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d004      	beq.n	8004c1e <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004c1a:	2000      	movs	r0, #0
}
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004c1e:	2305      	movs	r3, #5
 8004c20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004c24:	2000      	movs	r0, #0
 8004c26:	e7f9      	b.n	8004c1c <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8004c28:	2002      	movs	r0, #2
 8004c2a:	e7f7      	b.n	8004c1c <HAL_SDRAM_SendCommand+0x2a>

08004c2c <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004c2c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d00c      	beq.n	8004c50 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004c36:	b510      	push	{r4, lr}
 8004c38:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004c40:	6800      	ldr	r0, [r0, #0]
 8004c42:	f001 fa4d 	bl	80060e0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004c4c:	2000      	movs	r0, #0
}
 8004c4e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004c50:	2002      	movs	r0, #2
}
 8004c52:	4770      	bx	lr

08004c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	4605      	mov	r5, r0
 8004c58:	460f      	mov	r7, r1
 8004c5a:	4616      	mov	r6, r2
 8004c5c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	ea37 0303 	bics.w	r3, r7, r3
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	42b3      	cmp	r3, r6
 8004c6e:	d037      	beq.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c70:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004c74:	d0f3      	beq.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c76:	f7fd fa49 	bl	800210c <HAL_GetTick>
 8004c7a:	9b06      	ldr	r3, [sp, #24]
 8004c7c:	1ac0      	subs	r0, r0, r3
 8004c7e:	42a0      	cmp	r0, r4
 8004c80:	d201      	bcs.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004c82:	2c00      	cmp	r4, #0
 8004c84:	d1eb      	bne.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c86:	682a      	ldr	r2, [r5, #0]
 8004c88:	6853      	ldr	r3, [r2, #4]
 8004c8a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c8e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c90:	686b      	ldr	r3, [r5, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d00b      	beq.n	8004cb0 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d014      	beq.n	8004cca <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cac:	2003      	movs	r0, #3
 8004cae:	e018      	b.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb0:	68ab      	ldr	r3, [r5, #8]
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	bf18      	it	ne
 8004cb8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004cbc:	d1ec      	bne.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004cbe:	682a      	ldr	r2, [r5, #0]
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e7e6      	b.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004cca:	682a      	ldr	r2, [r5, #0]
 8004ccc:	6813      	ldr	r3, [r2, #0]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	682a      	ldr	r2, [r5, #0]
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e7df      	b.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004ce0:	2000      	movs	r0, #0
}
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ce4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	460d      	mov	r5, r1
 8004cea:	4614      	mov	r4, r2
 8004cec:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004cee:	e002      	b.n	8004cf6 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cf0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004cf4:	d10b      	bne.n	8004d0e <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	6893      	ldr	r3, [r2, #8]
 8004cfa:	402b      	ands	r3, r5
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d03b      	beq.n	8004d78 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d00:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004d04:	bf08      	it	eq
 8004d06:	2c00      	cmpeq	r4, #0
 8004d08:	d1f2      	bne.n	8004cf0 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d0a:	7b13      	ldrb	r3, [r2, #12]
 8004d0c:	e7f0      	b.n	8004cf0 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d0e:	f7fd f9fd 	bl	800210c <HAL_GetTick>
 8004d12:	9b06      	ldr	r3, [sp, #24]
 8004d14:	1ac0      	subs	r0, r0, r3
 8004d16:	42b0      	cmp	r0, r6
 8004d18:	d201      	bcs.n	8004d1e <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004d1a:	2e00      	cmp	r6, #0
 8004d1c:	d1eb      	bne.n	8004cf6 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	6853      	ldr	r3, [r2, #4]
 8004d22:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004d26:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2e:	d00b      	beq.n	8004d48 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d36:	d014      	beq.n	8004d62 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d44:	2003      	movs	r0, #3
 8004d46:	e018      	b.n	8004d7a <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	bf18      	it	ne
 8004d50:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004d54:	d1ec      	bne.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	6813      	ldr	r3, [r2, #0]
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e7e6      	b.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	6813      	ldr	r3, [r2, #0]
 8004d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e7df      	b.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004d78:	2000      	movs	r0, #0
}
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	4604      	mov	r4, r0
 8004d82:	460d      	mov	r5, r1
 8004d84:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d86:	9200      	str	r2, [sp, #0]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d90:	f7ff ffa8 	bl	8004ce4 <SPI_WaitFifoStateUntilTimeout>
 8004d94:	b9b8      	cbnz	r0, 8004dc6 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	9600      	str	r6, [sp, #0]
 8004d98:	462b      	mov	r3, r5
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff ff58 	bl	8004c54 <SPI_WaitFlagStateUntilTimeout>
 8004da4:	b9b8      	cbnz	r0, 8004dd6 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da6:	9600      	str	r6, [sp, #0]
 8004da8:	462b      	mov	r3, r5
 8004daa:	2200      	movs	r2, #0
 8004dac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7ff ff97 	bl	8004ce4 <SPI_WaitFifoStateUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	b150      	cbz	r0, 8004dd0 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dbc:	f043 0320 	orr.w	r3, r3, #32
 8004dc0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e004      	b.n	8004dd0 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dd8:	f043 0320 	orr.w	r3, r3, #32
 8004ddc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e7f6      	b.n	8004dd0 <SPI_EndRxTxTransaction+0x54>

08004de2 <SPI_EndRxTransaction>:
{
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	4604      	mov	r4, r0
 8004de8:	460d      	mov	r5, r1
 8004dea:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dec:	6843      	ldr	r3, [r0, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df2:	d00f      	beq.n	8004e14 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	9600      	str	r6, [sp, #0]
 8004df6:	462b      	mov	r3, r5
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff ff29 	bl	8004c54 <SPI_WaitFlagStateUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	b998      	cbnz	r0, 8004e2e <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004e0c:	d015      	beq.n	8004e3a <SPI_EndRxTransaction+0x58>
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	b002      	add	sp, #8
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e14:	6883      	ldr	r3, [r0, #8]
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	bf18      	it	ne
 8004e1c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004e20:	d1e8      	bne.n	8004df4 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004e22:	6802      	ldr	r2, [r0, #0]
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e7e2      	b.n	8004df4 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e30:	f043 0320 	orr.w	r3, r3, #32
 8004e34:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e7e9      	b.n	8004e0e <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68a2      	ldr	r2, [r4, #8]
 8004e3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004e40:	bf18      	it	ne
 8004e42:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 8004e46:	d1e2      	bne.n	8004e0e <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e48:	9600      	str	r6, [sp, #0]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff ff46 	bl	8004ce4 <SPI_WaitFifoStateUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d0d7      	beq.n	8004e0e <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e60:	f043 0320 	orr.w	r3, r3, #32
 8004e64:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e7d1      	b.n	8004e0e <SPI_EndRxTransaction+0x2c>

08004e6a <HAL_SPI_Init>:
  if (hspi == NULL)
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d058      	beq.n	8004f20 <HAL_SPI_Init+0xb6>
{
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e76:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d045      	beq.n	8004f0a <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e94:	d93e      	bls.n	8004f14 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e96:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e9c:	bf18      	it	ne
 8004e9e:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8004ea2:	d001      	beq.n	8004ea8 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004ea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004eaa:	b921      	cbnz	r1, 8004eb6 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb0:	d933      	bls.n	8004f1a <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004eb6:	6863      	ldr	r3, [r4, #4]
 8004eb8:	68a1      	ldr	r1, [r4, #8]
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6961      	ldr	r1, [r4, #20]
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	69a1      	ldr	r1, [r4, #24]
 8004ec6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	69e1      	ldr	r1, [r4, #28]
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6a21      	ldr	r1, [r4, #32]
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ed6:	6821      	ldr	r1, [r4, #0]
 8004ed8:	4303      	orrs	r3, r0
 8004eda:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004edc:	8b63      	ldrh	r3, [r4, #26]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	68e1      	ldr	r1, [r4, #12]
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	69d3      	ldr	r3, [r2, #28]
 8004ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004efc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004efe:	2000      	movs	r0, #0
 8004f00:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004f08:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f0a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004f0e:	f004 ff69 	bl	8009de4 <HAL_SPI_MspInit>
 8004f12:	e7b4      	b.n	8004e7e <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f18:	e7be      	b.n	8004e98 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	6323      	str	r3, [r4, #48]	; 0x30
 8004f1e:	e7ca      	b.n	8004eb6 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004f20:	2001      	movs	r0, #1
}
 8004f22:	4770      	bx	lr

08004f24 <HAL_SPI_Transmit>:
{
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004f2a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004f2e:	2c01      	cmp	r4, #1
 8004f30:	f000 80e5 	beq.w	80050fe <HAL_SPI_Transmit+0x1da>
 8004f34:	461d      	mov	r5, r3
 8004f36:	4617      	mov	r7, r2
 8004f38:	4688      	mov	r8, r1
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f42:	f7fd f8e3 	bl	800210c <HAL_GetTick>
 8004f46:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004f48:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d009      	beq.n	8004f66 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004f52:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004f60:	b002      	add	sp, #8
 8004f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004f66:	fab7 f387 	clz	r3, r7
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f1b8 0f00 	cmp.w	r8, #0
 8004f70:	bf08      	it	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 80b6 	bne.w	80050e6 <HAL_SPI_Transmit+0x1c2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f84:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f88:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f8a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f8c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f8e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f92:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f96:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f98:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa0:	d01c      	beq.n	8004fdc <HAL_SPI_Transmit+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004faa:	d103      	bne.n	8004fb4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fb4:	68e3      	ldr	r3, [r4, #12]
 8004fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fba:	d933      	bls.n	8005024 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <HAL_SPI_Transmit+0xa0>
 8004fc0:	2f01      	cmp	r7, #1
 8004fc2:	d11b      	bne.n	8004ffc <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fce:	3302      	adds	r3, #2
 8004fd0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fda:	e00f      	b.n	8004ffc <HAL_SPI_Transmit+0xd8>
    SPI_1LINE_TX(hspi);
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e7dc      	b.n	8004fa2 <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe8:	f7fd f890 	bl	800210c <HAL_GetTick>
 8004fec:	1b80      	subs	r0, r0, r6
 8004fee:	42a8      	cmp	r0, r5
 8004ff0:	d302      	bcc.n	8004ff8 <HAL_SPI_Transmit+0xd4>
 8004ff2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004ff6:	d178      	bne.n	80050ea <HAL_SPI_Transmit+0x1c6>
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	d078      	beq.n	80050ee <HAL_SPI_Transmit+0x1ca>
    while (hspi->TxXferCount > 0U)
 8004ffc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05b      	beq.n	80050bc <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	f012 0f02 	tst.w	r2, #2
 800500c:	d0ec      	beq.n	8004fe8 <HAL_SPI_Transmit+0xc4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005016:	3302      	adds	r3, #2
 8005018:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800501a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501c:	3b01      	subs	r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005022:	e7eb      	b.n	8004ffc <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	b10b      	cbz	r3, 800502c <HAL_SPI_Transmit+0x108>
 8005028:	2f01      	cmp	r7, #1
 800502a:	d130      	bne.n	800508e <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800502c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d90b      	bls.n	800504c <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800503e:	3302      	adds	r3, #2
 8005040:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005042:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005044:	3b02      	subs	r3, #2
 8005046:	b29b      	uxth	r3, r3
 8005048:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800504a:	e020      	b.n	800508e <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800504c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005056:	3301      	adds	r3, #1
 8005058:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800505a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800505c:	3b01      	subs	r3, #1
 800505e:	b29b      	uxth	r3, r3
 8005060:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005062:	e014      	b.n	800508e <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800506a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800506c:	3301      	adds	r3, #1
 800506e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005070:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005072:	3b01      	subs	r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005078:	e009      	b.n	800508e <HAL_SPI_Transmit+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507a:	f7fd f847 	bl	800210c <HAL_GetTick>
 800507e:	1b80      	subs	r0, r0, r6
 8005080:	42a8      	cmp	r0, r5
 8005082:	d302      	bcc.n	800508a <HAL_SPI_Transmit+0x166>
 8005084:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005088:	d133      	bne.n	80050f2 <HAL_SPI_Transmit+0x1ce>
 800508a:	2d00      	cmp	r5, #0
 800508c:	d033      	beq.n	80050f6 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 800508e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	b19b      	cbz	r3, 80050bc <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005094:	6822      	ldr	r2, [r4, #0]
 8005096:	6893      	ldr	r3, [r2, #8]
 8005098:	f013 0f02 	tst.w	r3, #2
 800509c:	d0ed      	beq.n	800507a <HAL_SPI_Transmit+0x156>
        if (hspi->TxXferCount > 1U)
 800509e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d9de      	bls.n	8005064 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ae:	3302      	adds	r3, #2
 80050b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050b4:	3b02      	subs	r3, #2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050ba:	e7e8      	b.n	800508e <HAL_SPI_Transmit+0x16a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050bc:	4632      	mov	r2, r6
 80050be:	4629      	mov	r1, r5
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff fe5b 	bl	8004d7c <SPI_EndRxTxTransaction>
 80050c6:	b108      	cbz	r0, 80050cc <HAL_SPI_Transmit+0x1a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c8:	2320      	movs	r3, #32
 80050ca:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	b933      	cbnz	r3, 80050de <HAL_SPI_Transmit+0x1ba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	9201      	str	r2, [sp, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050e0:	b95b      	cbnz	r3, 80050fa <HAL_SPI_Transmit+0x1d6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050e2:	2000      	movs	r0, #0
 80050e4:	e736      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80050e6:	2001      	movs	r0, #1
 80050e8:	e734      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80050ea:	2003      	movs	r0, #3
 80050ec:	e732      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
 80050ee:	2003      	movs	r0, #3
 80050f0:	e730      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80050f2:	2003      	movs	r0, #3
 80050f4:	e72e      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
 80050f6:	2003      	movs	r0, #3
 80050f8:	e72c      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
 80050fc:	e72a      	b.n	8004f54 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80050fe:	2002      	movs	r0, #2
 8005100:	e72e      	b.n	8004f60 <HAL_SPI_Transmit+0x3c>

08005102 <HAL_SPI_TransmitReceive>:
{
 8005102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005106:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800510a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800510e:	2c01      	cmp	r4, #1
 8005110:	f000 815d 	beq.w	80053ce <HAL_SPI_TransmitReceive+0x2cc>
 8005114:	461d      	mov	r5, r3
 8005116:	4617      	mov	r7, r2
 8005118:	460e      	mov	r6, r1
 800511a:	4604      	mov	r4, r0
 800511c:	2301      	movs	r3, #1
 800511e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005122:	f7fc fff3 	bl	800210c <HAL_GetTick>
 8005126:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005128:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800512c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800512e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005130:	2801      	cmp	r0, #1
 8005132:	d014      	beq.n	800515e <HAL_SPI_TransmitReceive+0x5c>
 8005134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005138:	d009      	beq.n	800514e <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 800513a:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800513c:	2201      	movs	r2, #1
 800513e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005142:	2200      	movs	r2, #0
 8005144:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005148:	4618      	mov	r0, r3
 800514a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 8130 	bne.w	80053b6 <HAL_SPI_TransmitReceive+0x2b4>
 8005156:	2804      	cmp	r0, #4
 8005158:	d001      	beq.n	800515e <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	e7ee      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800515e:	fab7 f387 	clz	r3, r7
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2e00      	cmp	r6, #0
 8005166:	bf08      	it	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 8125 	bne.w	80053ba <HAL_SPI_TransmitReceive+0x2b8>
 8005170:	2d00      	cmp	r5, #0
 8005172:	f000 8124 	beq.w	80053be <HAL_SPI_TransmitReceive+0x2bc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005176:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b04      	cmp	r3, #4
 800517e:	d002      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x84>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005180:	2305      	movs	r3, #5
 8005182:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005186:	2300      	movs	r3, #0
 8005188:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800518a:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800518c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005190:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005194:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005196:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005198:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800519a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800519c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a4:	d801      	bhi.n	80051aa <HAL_SPI_TransmitReceive+0xa8>
 80051a6:	2d01      	cmp	r5, #1
 80051a8:	d922      	bls.n	80051f0 <HAL_SPI_TransmitReceive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	6853      	ldr	r3, [r2, #4]
 80051ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051bc:	d103      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051cc:	d956      	bls.n	800527c <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	b10b      	cbz	r3, 80051d6 <HAL_SPI_TransmitReceive+0xd4>
 80051d2:	2d01      	cmp	r5, #1
 80051d4:	d10a      	bne.n	80051ec <HAL_SPI_TransmitReceive+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051e0:	3302      	adds	r3, #2
 80051e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80051e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051ec:	2501      	movs	r5, #1
 80051ee:	e025      	b.n	800523c <HAL_SPI_TransmitReceive+0x13a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	6853      	ldr	r3, [r2, #4]
 80051f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051f8:	6053      	str	r3, [r2, #4]
 80051fa:	e7db      	b.n	80051b4 <HAL_SPI_TransmitReceive+0xb2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	f012 0f01 	tst.w	r2, #1
 8005204:	d010      	beq.n	8005228 <HAL_SPI_TransmitReceive+0x126>
 8005206:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800520a:	b292      	uxth	r2, r2
 800520c:	b162      	cbz	r2, 8005228 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005216:	3302      	adds	r3, #2
 8005218:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800521a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005226:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005228:	f7fc ff70 	bl	800210c <HAL_GetTick>
 800522c:	eba0 0009 	sub.w	r0, r0, r9
 8005230:	4540      	cmp	r0, r8
 8005232:	d303      	bcc.n	800523c <HAL_SPI_TransmitReceive+0x13a>
 8005234:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005238:	f040 80c3 	bne.w	80053c2 <HAL_SPI_TransmitReceive+0x2c0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	b92b      	cbnz	r3, 800524e <HAL_SPI_TransmitReceive+0x14c>
 8005242:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80a7 	beq.w	800539c <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	f012 0f02 	tst.w	r2, #2
 8005256:	d0d1      	beq.n	80051fc <HAL_SPI_TransmitReceive+0xfa>
 8005258:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800525a:	b292      	uxth	r2, r2
 800525c:	2a00      	cmp	r2, #0
 800525e:	d0cd      	beq.n	80051fc <HAL_SPI_TransmitReceive+0xfa>
 8005260:	2d00      	cmp	r5, #0
 8005262:	d0cb      	beq.n	80051fc <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005264:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005266:	8812      	ldrh	r2, [r2, #0]
 8005268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800526a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800526c:	3302      	adds	r3, #2
 800526e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005272:	3b01      	subs	r3, #1
 8005274:	b29b      	uxth	r3, r3
 8005276:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005278:	2500      	movs	r5, #0
 800527a:	e7bf      	b.n	80051fc <HAL_SPI_TransmitReceive+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	b10b      	cbz	r3, 8005284 <HAL_SPI_TransmitReceive+0x182>
 8005280:	2d01      	cmp	r5, #1
 8005282:	d10e      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 8005284:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d90c      	bls.n	80052a6 <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005296:	3302      	adds	r3, #2
 8005298:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800529a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800529c:	3b02      	subs	r3, #2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80052a2:	2501      	movs	r5, #1
 80052a4:	e047      	b.n	8005336 <HAL_SPI_TransmitReceive+0x234>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80052ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052b0:	3301      	adds	r3, #1
 80052b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80052b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80052bc:	e7f1      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 80052be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80052c0:	b292      	uxth	r2, r2
 80052c2:	2a01      	cmp	r2, #1
 80052c4:	d90b      	bls.n	80052de <HAL_SPI_TransmitReceive+0x1dc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052c8:	8812      	ldrh	r2, [r2, #0]
 80052ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052ce:	3302      	adds	r3, #2
 80052d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052d4:	3b02      	subs	r3, #2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80052da:	2500      	movs	r5, #0
 80052dc:	e03c      	b.n	8005358 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80052e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052e6:	3301      	adds	r3, #1
 80052e8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80052ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80052f2:	2500      	movs	r5, #0
 80052f4:	e030      	b.n	8005358 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	6853      	ldr	r3, [r2, #4]
 80052fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052fe:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005300:	2501      	movs	r5, #1
 8005302:	e00c      	b.n	800531e <HAL_SPI_TransmitReceive+0x21c>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005304:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800530a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800530c:	3301      	adds	r3, #1
 800530e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005310:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005314:	3b01      	subs	r3, #1
 8005316:	b29b      	uxth	r3, r3
 8005318:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800531c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800531e:	f7fc fef5 	bl	800210c <HAL_GetTick>
 8005322:	eba0 0009 	sub.w	r0, r0, r9
 8005326:	4540      	cmp	r0, r8
 8005328:	d302      	bcc.n	8005330 <HAL_SPI_TransmitReceive+0x22e>
 800532a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800532e:	d14a      	bne.n	80053c6 <HAL_SPI_TransmitReceive+0x2c4>
 8005330:	f1b8 0f00 	cmp.w	r8, #0
 8005334:	d049      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005336:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	b91b      	cbnz	r3, 8005344 <HAL_SPI_TransmitReceive+0x242>
 800533c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005340:	b29b      	uxth	r3, r3
 8005342:	b35b      	cbz	r3, 800539c <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	f012 0f02 	tst.w	r2, #2
 800534c:	d004      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x256>
 800534e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005350:	b292      	uxth	r2, r2
 8005352:	b10a      	cbz	r2, 8005358 <HAL_SPI_TransmitReceive+0x256>
 8005354:	2d00      	cmp	r5, #0
 8005356:	d1b2      	bne.n	80052be <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	f012 0f01 	tst.w	r2, #1
 8005360:	d0dd      	beq.n	800531e <HAL_SPI_TransmitReceive+0x21c>
 8005362:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005366:	b292      	uxth	r2, r2
 8005368:	2a00      	cmp	r2, #0
 800536a:	d0d8      	beq.n	800531e <HAL_SPI_TransmitReceive+0x21c>
        if (hspi->RxXferCount > 1U)
 800536c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005370:	b292      	uxth	r2, r2
 8005372:	2a01      	cmp	r2, #1
 8005374:	d9c6      	bls.n	8005304 <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800537c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537e:	3302      	adds	r3, #2
 8005380:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005382:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005386:	3b02      	subs	r3, #2
 8005388:	b29b      	uxth	r3, r3
 800538a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800538e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d9ae      	bls.n	80052f6 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8005398:	2501      	movs	r5, #1
 800539a:	e7c0      	b.n	800531e <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800539c:	464a      	mov	r2, r9
 800539e:	4641      	mov	r1, r8
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7ff fceb 	bl	8004d7c <SPI_EndRxTxTransaction>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f43f aec7 	beq.w	800513c <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ae:	2320      	movs	r3, #32
 80053b0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e6c2      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	e6c0      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e6be      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e6bc      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e6ba      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e6b8      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
 80053ca:	2303      	movs	r3, #3
 80053cc:	e6b6      	b.n	800513c <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80053ce:	2302      	movs	r3, #2
 80053d0:	e6ba      	b.n	8005148 <HAL_SPI_TransmitReceive+0x46>

080053d2 <HAL_SPI_Receive>:
{
 80053d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	4604      	mov	r4, r0
 80053da:	4688      	mov	r8, r1
 80053dc:	4617      	mov	r7, r2
 80053de:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053e0:	6843      	ldr	r3, [r0, #4]
 80053e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e6:	d019      	beq.n	800541c <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80053e8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	f000 80ba 	beq.w	8005566 <HAL_SPI_Receive+0x194>
 80053f2:	2301      	movs	r3, #1
 80053f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80053f8:	f7fc fe88 	bl	800210c <HAL_GetTick>
 80053fc:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80053fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d015      	beq.n	8005434 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8005408:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800540a:	2301      	movs	r3, #1
 800540c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005410:	2300      	movs	r3, #0
 8005412:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005416:	b002      	add	sp, #8
 8005418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800541c:	6883      	ldr	r3, [r0, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e2      	bne.n	80053e8 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005422:	2304      	movs	r3, #4
 8005424:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005428:	9500      	str	r5, [sp, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	460a      	mov	r2, r1
 800542e:	f7ff fe68 	bl	8005102 <HAL_SPI_TransmitReceive>
 8005432:	e7f0      	b.n	8005416 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8005434:	fab7 f387 	clz	r3, r7
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f1b8 0f00 	cmp.w	r8, #0
 800543e:	bf08      	it	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 8083 	bne.w	800554e <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005448:	2304      	movs	r3, #4
 800544a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
 8005450:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005452:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005456:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800545a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800545e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005460:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005462:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005464:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005466:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005468:	68e3      	ldr	r3, [r4, #12]
 800546a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800546e:	d916      	bls.n	800549e <HAL_SPI_Receive+0xcc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	6853      	ldr	r3, [r2, #4]
 8005474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005478:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d013      	beq.n	80054aa <HAL_SPI_Receive+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f012 0f40 	tst.w	r2, #64	; 0x40
 800548a:	d103      	bne.n	8005494 <HAL_SPI_Receive+0xc2>
    __HAL_SPI_ENABLE(hspi);
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005492:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800549a:	d916      	bls.n	80054ca <HAL_SPI_Receive+0xf8>
 800549c:	e035      	b.n	800550a <HAL_SPI_Receive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	6853      	ldr	r3, [r2, #4]
 80054a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a6:	6053      	str	r3, [r2, #4]
 80054a8:	e7e7      	b.n	800547a <HAL_SPI_Receive+0xa8>
    SPI_1LINE_RX(hspi);
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	e7e5      	b.n	8005482 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b6:	f7fc fe29 	bl	800210c <HAL_GetTick>
 80054ba:	1b80      	subs	r0, r0, r6
 80054bc:	42a8      	cmp	r0, r5
 80054be:	d302      	bcc.n	80054c6 <HAL_SPI_Receive+0xf4>
 80054c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80054c4:	d145      	bne.n	8005552 <HAL_SPI_Receive+0x180>
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	d045      	beq.n	8005556 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 80054ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d030      	beq.n	8005536 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	f012 0f01 	tst.w	r2, #1
 80054dc:	d0eb      	beq.n	80054b6 <HAL_SPI_Receive+0xe4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054e0:	7b1b      	ldrb	r3, [r3, #12]
 80054e2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054e6:	3301      	adds	r3, #1
 80054e8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80054ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80054f6:	e7e8      	b.n	80054ca <HAL_SPI_Receive+0xf8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f8:	f7fc fe08 	bl	800210c <HAL_GetTick>
 80054fc:	1b80      	subs	r0, r0, r6
 80054fe:	42a8      	cmp	r0, r5
 8005500:	d302      	bcc.n	8005508 <HAL_SPI_Receive+0x136>
 8005502:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005506:	d128      	bne.n	800555a <HAL_SPI_Receive+0x188>
 8005508:	b34d      	cbz	r5, 800555e <HAL_SPI_Receive+0x18c>
    while (hspi->RxXferCount > 0U)
 800550a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800550e:	b29b      	uxth	r3, r3
 8005510:	b18b      	cbz	r3, 8005536 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	f012 0f01 	tst.w	r2, #1
 800551a:	d0ed      	beq.n	80054f8 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005524:	3302      	adds	r3, #2
 8005526:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005528:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800552c:	3b01      	subs	r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005534:	e7e9      	b.n	800550a <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005536:	4632      	mov	r2, r6
 8005538:	4629      	mov	r1, r5
 800553a:	4620      	mov	r0, r4
 800553c:	f7ff fc51 	bl	8004de2 <SPI_EndRxTransaction>
 8005540:	b108      	cbz	r0, 8005546 <HAL_SPI_Receive+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005542:	2320      	movs	r3, #32
 8005544:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005546:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005548:	b95b      	cbnz	r3, 8005562 <HAL_SPI_Receive+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2000      	movs	r0, #0
 800554c:	e75d      	b.n	800540a <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800554e:	2001      	movs	r0, #1
 8005550:	e75b      	b.n	800540a <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005552:	2003      	movs	r0, #3
 8005554:	e759      	b.n	800540a <HAL_SPI_Receive+0x38>
 8005556:	2003      	movs	r0, #3
 8005558:	e757      	b.n	800540a <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800555a:	2003      	movs	r0, #3
 800555c:	e755      	b.n	800540a <HAL_SPI_Receive+0x38>
 800555e:	2003      	movs	r0, #3
 8005560:	e753      	b.n	800540a <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8005562:	2001      	movs	r0, #1
 8005564:	e751      	b.n	800540a <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8005566:	2002      	movs	r0, #2
 8005568:	e755      	b.n	8005416 <HAL_SPI_Receive+0x44>

0800556a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800556c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	6a04      	ldr	r4, [r0, #32]
 8005570:	f024 0401 	bic.w	r4, r4, #1
 8005574:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005578:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800557c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005580:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005584:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005586:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005588:	6203      	str	r3, [r0, #32]
}
 800558a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005590:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005592:	6a03      	ldr	r3, [r0, #32]
 8005594:	f023 0310 	bic.w	r3, r3, #16
 8005598:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800559c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80055aa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80055b0:	6203      	str	r3, [r0, #32]
}
 80055b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055be:	4319      	orrs	r1, r3
 80055c0:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c4:	6081      	str	r1, [r0, #8]
}
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	2302      	movs	r3, #2
 80055ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ce:	6802      	ldr	r2, [r0, #0]
 80055d0:	6891      	ldr	r1, [r2, #8]
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <HAL_TIM_Base_Start+0x2c>)
 80055d4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	bf18      	it	ne
 80055da:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80055de:	d003      	beq.n	80055e8 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80055ee:	2000      	movs	r0, #0
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	00010007 	.word	0x00010007

080055f8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f8:	6802      	ldr	r2, [r0, #0]
 80055fa:	68d3      	ldr	r3, [r2, #12]
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005602:	6802      	ldr	r2, [r0, #0]
 8005604:	6891      	ldr	r1, [r2, #8]
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <HAL_TIM_Base_Start_IT+0x28>)
 8005608:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560a:	2b06      	cmp	r3, #6
 800560c:	bf18      	it	ne
 800560e:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8005612:	d003      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	2000      	movs	r0, #0
 800561e:	4770      	bx	lr
 8005620:	00010007 	.word	0x00010007

08005624 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_IC_CaptureCallback>:
}
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_TriggerCallback>:
}
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_IRQHandler>:
{
 800562c:	b510      	push	{r4, lr}
 800562e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005630:	6803      	ldr	r3, [r0, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	f012 0f02 	tst.w	r2, #2
 8005638:	d011      	beq.n	800565e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	f012 0f02 	tst.w	r2, #2
 8005640:	d00d      	beq.n	800565e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005642:	f06f 0202 	mvn.w	r2, #2
 8005646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005648:	2301      	movs	r3, #1
 800564a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f013 0f03 	tst.w	r3, #3
 8005654:	d079      	beq.n	800574a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005656:	f7ff ffe6 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	2300      	movs	r3, #0
 800565c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	f012 0f04 	tst.w	r2, #4
 8005666:	d012      	beq.n	800568e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	f012 0f04 	tst.w	r2, #4
 800566e:	d00e      	beq.n	800568e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005670:	f06f 0204 	mvn.w	r2, #4
 8005674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005676:	2302      	movs	r3, #2
 8005678:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005682:	d068      	beq.n	8005756 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff ffce 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	2300      	movs	r3, #0
 800568c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	f012 0f08 	tst.w	r2, #8
 8005696:	d012      	beq.n	80056be <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	f012 0f08 	tst.w	r2, #8
 800569e:	d00e      	beq.n	80056be <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a0:	f06f 0208 	mvn.w	r2, #8
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a6:	2304      	movs	r3, #4
 80056a8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f013 0f03 	tst.w	r3, #3
 80056b2:	d057      	beq.n	8005764 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ffb6 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	2300      	movs	r3, #0
 80056bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	f012 0f10 	tst.w	r2, #16
 80056c6:	d012      	beq.n	80056ee <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	f012 0f10 	tst.w	r2, #16
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	2308      	movs	r3, #8
 80056d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80056e2:	d046      	beq.n	8005772 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff ff9e 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	2300      	movs	r3, #0
 80056ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	f012 0f01 	tst.w	r2, #1
 80056f6:	d003      	beq.n	8005700 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	f012 0f01 	tst.w	r2, #1
 80056fe:	d13f      	bne.n	8005780 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005710:	d13d      	bne.n	800578e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	f412 7f80 	tst.w	r2, #256	; 0x100
 800571a:	d003      	beq.n	8005724 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005722:	d13b      	bne.n	800579c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	f012 0f40 	tst.w	r2, #64	; 0x40
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005734:	d139      	bne.n	80057aa <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	f012 0f20 	tst.w	r2, #32
 800573e:	d003      	beq.n	8005748 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	f012 0f20 	tst.w	r2, #32
 8005746:	d137      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x18c>
}
 8005748:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	f7ff ff6b 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574e:	4620      	mov	r0, r4
 8005750:	f7ff ff6a 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
 8005754:	e781      	b.n	800565a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	4620      	mov	r0, r4
 8005758:	f7ff ff64 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	4620      	mov	r0, r4
 800575e:	f7ff ff63 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
 8005762:	e792      	b.n	800568a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff5d 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576a:	4620      	mov	r0, r4
 800576c:	f7ff ff5c 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
 8005770:	e7a3      	b.n	80056ba <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff ff56 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff ff55 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
 800577e:	e7b4      	b.n	80056ea <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005780:	f06f 0201 	mvn.w	r2, #1
 8005784:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005786:	4620      	mov	r0, r4
 8005788:	f004 faf8 	bl	8009d7c <HAL_TIM_PeriodElapsedCallback>
 800578c:	e7b8      	b.n	8005700 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005792:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005794:	4620      	mov	r0, r4
 8005796:	f000 f964 	bl	8005a62 <HAL_TIMEx_BreakCallback>
 800579a:	e7ba      	b.n	8005712 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800579c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f95e 	bl	8005a64 <HAL_TIMEx_Break2Callback>
 80057a8:	e7bc      	b.n	8005724 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff ff3a 	bl	800562a <HAL_TIM_TriggerCallback>
 80057b6:	e7be      	b.n	8005736 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b8:	f06f 0220 	mvn.w	r2, #32
 80057bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f94e 	bl	8005a60 <HAL_TIMEx_CommutCallback>
}
 80057c4:	e7c0      	b.n	8005748 <HAL_TIM_IRQHandler+0x11c>
	...

080057c8 <TIM_Base_SetConfig>:
{
 80057c8:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80057ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057cc:	4c3a      	ldr	r4, [pc, #232]	; (80058b8 <TIM_Base_SetConfig+0xf0>)
 80057ce:	42a0      	cmp	r0, r4
 80057d0:	bf14      	ite	ne
 80057d2:	2400      	movne	r4, #0
 80057d4:	2401      	moveq	r4, #1
 80057d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80057da:	bf14      	ite	ne
 80057dc:	4622      	movne	r2, r4
 80057de:	f044 0201 	orreq.w	r2, r4, #1
 80057e2:	b9aa      	cbnz	r2, 8005810 <TIM_Base_SetConfig+0x48>
 80057e4:	4d35      	ldr	r5, [pc, #212]	; (80058bc <TIM_Base_SetConfig+0xf4>)
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	bf14      	ite	ne
 80057ea:	2500      	movne	r5, #0
 80057ec:	2501      	moveq	r5, #1
 80057ee:	4e34      	ldr	r6, [pc, #208]	; (80058c0 <TIM_Base_SetConfig+0xf8>)
 80057f0:	42b0      	cmp	r0, r6
 80057f2:	d00d      	beq.n	8005810 <TIM_Base_SetConfig+0x48>
 80057f4:	b965      	cbnz	r5, 8005810 <TIM_Base_SetConfig+0x48>
 80057f6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80057fa:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80057fe:	42a8      	cmp	r0, r5
 8005800:	bf14      	ite	ne
 8005802:	2500      	movne	r5, #0
 8005804:	2501      	moveq	r5, #1
 8005806:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800580a:	42b0      	cmp	r0, r6
 800580c:	d000      	beq.n	8005810 <TIM_Base_SetConfig+0x48>
 800580e:	b11d      	cbz	r5, 8005818 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005814:	684d      	ldr	r5, [r1, #4]
 8005816:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005818:	2a00      	cmp	r2, #0
 800581a:	d133      	bne.n	8005884 <TIM_Base_SetConfig+0xbc>
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <TIM_Base_SetConfig+0xf4>)
 800581e:	4290      	cmp	r0, r2
 8005820:	bf14      	ite	ne
 8005822:	2200      	movne	r2, #0
 8005824:	2201      	moveq	r2, #1
 8005826:	4d26      	ldr	r5, [pc, #152]	; (80058c0 <TIM_Base_SetConfig+0xf8>)
 8005828:	42a8      	cmp	r0, r5
 800582a:	d02b      	beq.n	8005884 <TIM_Base_SetConfig+0xbc>
 800582c:	bb52      	cbnz	r2, 8005884 <TIM_Base_SetConfig+0xbc>
 800582e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005832:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005836:	4290      	cmp	r0, r2
 8005838:	bf14      	ite	ne
 800583a:	2200      	movne	r2, #0
 800583c:	2201      	moveq	r2, #1
 800583e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005842:	42a8      	cmp	r0, r5
 8005844:	d01e      	beq.n	8005884 <TIM_Base_SetConfig+0xbc>
 8005846:	b9ea      	cbnz	r2, 8005884 <TIM_Base_SetConfig+0xbc>
 8005848:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <TIM_Base_SetConfig+0xfc>)
 800584a:	4290      	cmp	r0, r2
 800584c:	bf14      	ite	ne
 800584e:	2200      	movne	r2, #0
 8005850:	2201      	moveq	r2, #1
 8005852:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8005856:	42a8      	cmp	r0, r5
 8005858:	d014      	beq.n	8005884 <TIM_Base_SetConfig+0xbc>
 800585a:	b99a      	cbnz	r2, 8005884 <TIM_Base_SetConfig+0xbc>
 800585c:	4a1a      	ldr	r2, [pc, #104]	; (80058c8 <TIM_Base_SetConfig+0x100>)
 800585e:	4290      	cmp	r0, r2
 8005860:	bf14      	ite	ne
 8005862:	2200      	movne	r2, #0
 8005864:	2201      	moveq	r2, #1
 8005866:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800586a:	42a8      	cmp	r0, r5
 800586c:	d00a      	beq.n	8005884 <TIM_Base_SetConfig+0xbc>
 800586e:	b94a      	cbnz	r2, 8005884 <TIM_Base_SetConfig+0xbc>
 8005870:	4a16      	ldr	r2, [pc, #88]	; (80058cc <TIM_Base_SetConfig+0x104>)
 8005872:	4290      	cmp	r0, r2
 8005874:	bf14      	ite	ne
 8005876:	2200      	movne	r2, #0
 8005878:	2201      	moveq	r2, #1
 800587a:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800587e:	42a8      	cmp	r0, r5
 8005880:	d000      	beq.n	8005884 <TIM_Base_SetConfig+0xbc>
 8005882:	b11a      	cbz	r2, 800588c <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005888:	68ca      	ldr	r2, [r1, #12]
 800588a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	694a      	ldr	r2, [r1, #20]
 8005892:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005894:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005896:	688a      	ldr	r2, [r1, #8]
 8005898:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800589a:	680a      	ldr	r2, [r1, #0]
 800589c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <TIM_Base_SetConfig+0x108>)
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bf14      	ite	ne
 80058a4:	4623      	movne	r3, r4
 80058a6:	f044 0301 	orreq.w	r3, r4, #1
 80058aa:	b10b      	cbz	r3, 80058b0 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	2301      	movs	r3, #1
 80058b2:	6143      	str	r3, [r0, #20]
}
 80058b4:	bc70      	pop	{r4, r5, r6}
 80058b6:	4770      	bx	lr
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40001800 	.word	0x40001800
 80058cc:	40002000 	.word	0x40002000
 80058d0:	40010400 	.word	0x40010400

080058d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80058d4:	b1a8      	cbz	r0, 8005902 <HAL_TIM_Base_Init+0x2e>
{
 80058d6:	b510      	push	{r4, lr}
 80058d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058de:	b15b      	cbz	r3, 80058f8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	2302      	movs	r3, #2
 80058e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e6:	1d21      	adds	r1, r4, #4
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	f7ff ff6d 	bl	80057c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80058f4:	2000      	movs	r0, #0
}
 80058f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80058f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058fc:	f004 fbda 	bl	800a0b4 <HAL_TIM_Base_MspInit>
 8005900:	e7ee      	b.n	80058e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005902:	2001      	movs	r0, #1
}
 8005904:	4770      	bx	lr

08005906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005906:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005908:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800590a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800590e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005912:	430b      	orrs	r3, r1
 8005914:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	6083      	str	r3, [r0, #8]
}
 8005918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005920:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d064      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0xd2>
{
 8005928:	b510      	push	{r4, lr}
 800592a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800592c:	2301      	movs	r3, #1
 800592e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	2302      	movs	r3, #2
 8005934:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005938:	6802      	ldr	r2, [r0, #0]
 800593a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593c:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <HAL_TIM_ConfigClockSource+0xd8>)
 800593e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005940:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005942:	680b      	ldr	r3, [r1, #0]
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d04a      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xbe>
 8005948:	d913      	bls.n	8005972 <HAL_TIM_ConfigClockSource+0x52>
 800594a:	2b60      	cmp	r3, #96	; 0x60
 800594c:	d03d      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0xaa>
 800594e:	d91e      	bls.n	800598e <HAL_TIM_ConfigClockSource+0x6e>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d028      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x86>
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d130      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	68cb      	ldr	r3, [r1, #12]
 800595c:	684a      	ldr	r2, [r1, #4]
 800595e:	6889      	ldr	r1, [r1, #8]
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	f7ff ffd0 	bl	8005906 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	6893      	ldr	r3, [r2, #8]
 800596a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800596e:	6093      	str	r3, [r2, #8]
      break;
 8005970:	e024      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005972:	2b10      	cmp	r3, #16
 8005974:	d006      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x64>
 8005976:	d904      	bls.n	8005982 <HAL_TIM_ConfigClockSource+0x62>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d003      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x64>
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d001      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x64>
 8005980:	e01c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
 8005982:	b9db      	cbnz	r3, 80059bc <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005984:	4619      	mov	r1, r3
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f7ff fe16 	bl	80055b8 <TIM_ITRx_SetConfig>
      break;
 800598c:	e016      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800598e:	2b50      	cmp	r3, #80	; 0x50
 8005990:	d114      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	68ca      	ldr	r2, [r1, #12]
 8005994:	6849      	ldr	r1, [r1, #4]
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	f7ff fde7 	bl	800556a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800599c:	2150      	movs	r1, #80	; 0x50
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	f7ff fe0a 	bl	80055b8 <TIM_ITRx_SetConfig>
      break;
 80059a4:	e00a      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	68cb      	ldr	r3, [r1, #12]
 80059a8:	684a      	ldr	r2, [r1, #4]
 80059aa:	6889      	ldr	r1, [r1, #8]
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	f7ff ffaa 	bl	8005906 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80059ba:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	2301      	movs	r3, #1
 80059be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80059c2:	2000      	movs	r0, #0
 80059c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80059c8:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ca:	68ca      	ldr	r2, [r1, #12]
 80059cc:	6849      	ldr	r1, [r1, #4]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	f7ff fdde 	bl	8005590 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d4:	2160      	movs	r1, #96	; 0x60
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	f7ff fdee 	bl	80055b8 <TIM_ITRx_SetConfig>
      break;
 80059dc:	e7ee      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	68ca      	ldr	r2, [r1, #12]
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	f7ff fdc1 	bl	800556a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	f7ff fde4 	bl	80055b8 <TIM_ITRx_SetConfig>
      break;
 80059f0:	e7e4      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80059f2:	2002      	movs	r0, #2
}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	fffe0088 	.word	0xfffe0088

080059fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d027      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8005a04:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005a06:	2301      	movs	r3, #1
 8005a08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a12:	6803      	ldr	r3, [r0, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a16:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a18:	4e0f      	ldr	r6, [pc, #60]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005a1a:	4c10      	ldr	r4, [pc, #64]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	bf18      	it	ne
 8005a20:	42b3      	cmpne	r3, r6
 8005a22:	d103      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a28:	684c      	ldr	r4, [r1, #4]
 8005a2a:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a30:	680c      	ldr	r4, [r1, #0]
 8005a32:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a34:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a38:	6889      	ldr	r1, [r1, #8]
 8005a3a:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a3e:	6803      	ldr	r3, [r0, #0]
 8005a40:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005a4e:	4618      	mov	r0, r3
}
 8005a50:	bc70      	pop	{r4, r5, r6}
 8005a52:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a54:	2002      	movs	r0, #2
}
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400

08005a60 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a64:	4770      	bx	lr
	...

08005a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a6c:	6883      	ldr	r3, [r0, #8]
 8005a6e:	6902      	ldr	r2, [r0, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	6942      	ldr	r2, [r0, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	69c2      	ldr	r2, [r0, #28]
 8005a78:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7a:	6801      	ldr	r1, [r0, #0]
 8005a7c:	6808      	ldr	r0, [r1, #0]
 8005a7e:	4a99      	ldr	r2, [pc, #612]	; (8005ce4 <UART_SetConfig+0x27c>)
 8005a80:	4002      	ands	r2, r0
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	6853      	ldr	r3, [r2, #4]
 8005a8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a8e:	68e1      	ldr	r1, [r4, #12]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a94:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8005a96:	6a23      	ldr	r3, [r4, #32]
 8005a98:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9a:	6821      	ldr	r1, [r4, #0]
 8005a9c:	688b      	ldr	r3, [r1, #8]
 8005a9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	4a8f      	ldr	r2, [pc, #572]	; (8005ce8 <UART_SetConfig+0x280>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <UART_SetConfig+0x78>
 8005aae:	4a8f      	ldr	r2, [pc, #572]	; (8005cec <UART_SetConfig+0x284>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d028      	beq.n	8005b06 <UART_SetConfig+0x9e>
 8005ab4:	4a8e      	ldr	r2, [pc, #568]	; (8005cf0 <UART_SetConfig+0x288>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d03d      	beq.n	8005b36 <UART_SetConfig+0xce>
 8005aba:	4a8e      	ldr	r2, [pc, #568]	; (8005cf4 <UART_SetConfig+0x28c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d050      	beq.n	8005b62 <UART_SetConfig+0xfa>
 8005ac0:	4a8d      	ldr	r2, [pc, #564]	; (8005cf8 <UART_SetConfig+0x290>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d062      	beq.n	8005b8c <UART_SetConfig+0x124>
 8005ac6:	4a8d      	ldr	r2, [pc, #564]	; (8005cfc <UART_SetConfig+0x294>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d077      	beq.n	8005bbc <UART_SetConfig+0x154>
 8005acc:	4a8c      	ldr	r2, [pc, #560]	; (8005d00 <UART_SetConfig+0x298>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f000 808c 	beq.w	8005bec <UART_SetConfig+0x184>
 8005ad4:	4a8b      	ldr	r2, [pc, #556]	; (8005d04 <UART_SetConfig+0x29c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f000 80a0 	beq.w	8005c1c <UART_SetConfig+0x1b4>
 8005adc:	2310      	movs	r3, #16
 8005ade:	e0b6      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005ae0:	4b89      	ldr	r3, [pc, #548]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d809      	bhi.n	8005b02 <UART_SetConfig+0x9a>
 8005aee:	e8df f003 	tbb	[pc, r3]
 8005af2:	0402      	.short	0x0402
 8005af4:	06ad      	.short	0x06ad
 8005af6:	2301      	movs	r3, #1
 8005af8:	e0a9      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005afa:	2304      	movs	r3, #4
 8005afc:	e0a7      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005afe:	2308      	movs	r3, #8
 8005b00:	e0a5      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b02:	2310      	movs	r3, #16
 8005b04:	e0a3      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b06:	4b80      	ldr	r3, [pc, #512]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f003 030c 	and.w	r3, r3, #12
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d80e      	bhi.n	8005b32 <UART_SetConfig+0xca>
 8005b14:	e8df f003 	tbb	[pc, r3]
 8005b18:	0d0d0d07 	.word	0x0d0d0d07
 8005b1c:	0d0d0d09 	.word	0x0d0d0d09
 8005b20:	0d0d0da9 	.word	0x0d0d0da9
 8005b24:	0b          	.byte	0x0b
 8005b25:	00          	.byte	0x00
 8005b26:	2300      	movs	r3, #0
 8005b28:	e091      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	e08f      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	e08d      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b32:	2310      	movs	r3, #16
 8005b34:	e08b      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b36:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d00a      	beq.n	8005b5a <UART_SetConfig+0xf2>
 8005b44:	d906      	bls.n	8005b54 <UART_SetConfig+0xec>
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	f000 8091 	beq.w	8005c6e <UART_SetConfig+0x206>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d106      	bne.n	8005b5e <UART_SetConfig+0xf6>
 8005b50:	2308      	movs	r3, #8
 8005b52:	e07c      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b54:	b91b      	cbnz	r3, 8005b5e <UART_SetConfig+0xf6>
 8005b56:	2300      	movs	r3, #0
 8005b58:	e079      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	e077      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b5e:	2310      	movs	r3, #16
 8005b60:	e075      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b62:	4b69      	ldr	r3, [pc, #420]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d009      	beq.n	8005b84 <UART_SetConfig+0x11c>
 8005b70:	d905      	bls.n	8005b7e <UART_SetConfig+0x116>
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d07d      	beq.n	8005c72 <UART_SetConfig+0x20a>
 8005b76:	2bc0      	cmp	r3, #192	; 0xc0
 8005b78:	d106      	bne.n	8005b88 <UART_SetConfig+0x120>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e067      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b7e:	b91b      	cbnz	r3, 8005b88 <UART_SetConfig+0x120>
 8005b80:	2300      	movs	r3, #0
 8005b82:	e064      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b84:	2304      	movs	r3, #4
 8005b86:	e062      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	e060      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005b8c:	4b5e      	ldr	r3, [pc, #376]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9a:	d00b      	beq.n	8005bb4 <UART_SetConfig+0x14c>
 8005b9c:	d907      	bls.n	8005bae <UART_SetConfig+0x146>
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba2:	d068      	beq.n	8005c76 <UART_SetConfig+0x20e>
 8005ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba8:	d106      	bne.n	8005bb8 <UART_SetConfig+0x150>
 8005baa:	2308      	movs	r3, #8
 8005bac:	e04f      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bae:	b91b      	cbnz	r3, 8005bb8 <UART_SetConfig+0x150>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e04c      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	e04a      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	e048      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bbc:	4b52      	ldr	r3, [pc, #328]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d00b      	beq.n	8005be4 <UART_SetConfig+0x17c>
 8005bcc:	d907      	bls.n	8005bde <UART_SetConfig+0x176>
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d052      	beq.n	8005c7a <UART_SetConfig+0x212>
 8005bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd8:	d106      	bne.n	8005be8 <UART_SetConfig+0x180>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	e037      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bde:	b91b      	cbnz	r3, 8005be8 <UART_SetConfig+0x180>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e034      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	e032      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005be8:	2310      	movs	r3, #16
 8005bea:	e030      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005bec:	4b46      	ldr	r3, [pc, #280]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d00b      	beq.n	8005c14 <UART_SetConfig+0x1ac>
 8005bfc:	d907      	bls.n	8005c0e <UART_SetConfig+0x1a6>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d03c      	beq.n	8005c7e <UART_SetConfig+0x216>
 8005c04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c08:	d106      	bne.n	8005c18 <UART_SetConfig+0x1b0>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	e01f      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c0e:	b91b      	cbnz	r3, 8005c18 <UART_SetConfig+0x1b0>
 8005c10:	2300      	movs	r3, #0
 8005c12:	e01c      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c14:	2304      	movs	r3, #4
 8005c16:	e01a      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	e018      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c1c:	4b3a      	ldr	r3, [pc, #232]	; (8005d08 <UART_SetConfig+0x2a0>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2a:	d00b      	beq.n	8005c44 <UART_SetConfig+0x1dc>
 8005c2c:	d907      	bls.n	8005c3e <UART_SetConfig+0x1d6>
 8005c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c32:	d026      	beq.n	8005c82 <UART_SetConfig+0x21a>
 8005c34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c38:	d106      	bne.n	8005c48 <UART_SetConfig+0x1e0>
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	e007      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c3e:	b91b      	cbnz	r3, 8005c48 <UART_SetConfig+0x1e0>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e004      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c44:	2304      	movs	r3, #4
 8005c46:	e002      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	e000      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c4c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4e:	69e2      	ldr	r2, [r4, #28]
 8005c50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005c54:	d017      	beq.n	8005c86 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	f200 80b3 	bhi.w	8005dc2 <UART_SetConfig+0x35a>
 8005c5c:	e8df f003 	tbb	[pc, r3]
 8005c60:	b1958b76 	.word	0xb1958b76
 8005c64:	b1b1b19e 	.word	0xb1b1b19e
 8005c68:	a8          	.byte	0xa8
 8005c69:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e7ef      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e7ed      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e7eb      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e7e9      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e7e7      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e7e5      	b.n	8005c4e <UART_SetConfig+0x1e6>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e7e3      	b.n	8005c4e <UART_SetConfig+0x1e6>
    switch (clocksource)
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d85d      	bhi.n	8005d46 <UART_SetConfig+0x2de>
 8005c8a:	e8df f003 	tbb	[pc, r3]
 8005c8e:	1f05      	.short	0x1f05
 8005c90:	5c485c3f 	.word	0x5c485c3f
 8005c94:	5c5c      	.short	0x5c5c
 8005c96:	53          	.byte	0x53
 8005c97:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c98:	f7fe fc78 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8005c9c:	6862      	ldr	r2, [r4, #4]
 8005c9e:	0853      	lsrs	r3, r2, #1
 8005ca0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005caa:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	f1a3 0110 	sub.w	r1, r3, #16
 8005cb0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005cb4:	4291      	cmp	r1, r2
 8005cb6:	f200 8087 	bhi.w	8005dc8 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cc0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005cc4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	60d3      	str	r3, [r2, #12]
 8005cca:	e050      	b.n	8005d6e <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ccc:	f7fe fc6e 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	0853      	lsrs	r3, r2, #1
 8005cd4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cde:	2000      	movs	r0, #0
        break;
 8005ce0:	e7e4      	b.n	8005cac <UART_SetConfig+0x244>
 8005ce2:	bf00      	nop
 8005ce4:	efff69f3 	.word	0xefff69f3
 8005ce8:	40011000 	.word	0x40011000
 8005cec:	40004400 	.word	0x40004400
 8005cf0:	40004800 	.word	0x40004800
 8005cf4:	40004c00 	.word	0x40004c00
 8005cf8:	40005000 	.word	0x40005000
 8005cfc:	40011400 	.word	0x40011400
 8005d00:	40007800 	.word	0x40007800
 8005d04:	40007c00 	.word	0x40007c00
 8005d08:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005d0c:	6862      	ldr	r2, [r4, #4]
 8005d0e:	4b30      	ldr	r3, [pc, #192]	; (8005dd0 <UART_SetConfig+0x368>)
 8005d10:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d18:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1a:	2000      	movs	r0, #0
        break;
 8005d1c:	e7c6      	b.n	8005cac <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d1e:	f7fe fb29 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	0853      	lsrs	r3, r2, #1
 8005d26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d30:	2000      	movs	r0, #0
        break;
 8005d32:	e7bb      	b.n	8005cac <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d34:	6862      	ldr	r2, [r4, #4]
 8005d36:	0853      	lsrs	r3, r2, #1
 8005d38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d42:	2000      	movs	r0, #0
        break;
 8005d44:	e7b2      	b.n	8005cac <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e7af      	b.n	8005cac <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d4c:	f7fe fc1e 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8005d50:	6862      	ldr	r2, [r4, #4]
 8005d52:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d5e:	f1a3 0110 	sub.w	r1, r3, #16
 8005d62:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005d66:	4291      	cmp	r1, r2
 8005d68:	d830      	bhi.n	8005dcc <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005d72:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005d74:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005d76:	f7fe fc19 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d84:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d86:	2000      	movs	r0, #0
        break;
 8005d88:	e7e9      	b.n	8005d5e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <UART_SetConfig+0x36c>)
 8005d8e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d96:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d98:	2000      	movs	r0, #0
        break;
 8005d9a:	e7e0      	b.n	8005d5e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d9c:	f7fe faea 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8005da0:	6862      	ldr	r2, [r4, #4]
 8005da2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005daa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dac:	2000      	movs	r0, #0
        break;
 8005dae:	e7d6      	b.n	8005d5e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005db0:	6862      	ldr	r2, [r4, #4]
 8005db2:	0853      	lsrs	r3, r2, #1
 8005db4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dbc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dbe:	2000      	movs	r0, #0
        break;
 8005dc0:	e7cd      	b.n	8005d5e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8005dc2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e7ca      	b.n	8005d5e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7d0      	b.n	8005d6e <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8005dcc:	2001      	movs	r0, #1
 8005dce:	e7ce      	b.n	8005d6e <UART_SetConfig+0x306>
 8005dd0:	01e84800 	.word	0x01e84800
 8005dd4:	00f42400 	.word	0x00f42400

08005dd8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005dda:	f013 0f01 	tst.w	r3, #1
 8005dde:	d006      	beq.n	8005dee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de0:	6802      	ldr	r2, [r0, #0]
 8005de2:	6853      	ldr	r3, [r2, #4]
 8005de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005de8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005df0:	f013 0f02 	tst.w	r3, #2
 8005df4:	d006      	beq.n	8005e04 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005df6:	6802      	ldr	r2, [r0, #0]
 8005df8:	6853      	ldr	r3, [r2, #4]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e06:	f013 0f04 	tst.w	r3, #4
 8005e0a:	d006      	beq.n	8005e1a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0c:	6802      	ldr	r2, [r0, #0]
 8005e0e:	6853      	ldr	r3, [r2, #4]
 8005e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e14:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e1c:	f013 0f08 	tst.w	r3, #8
 8005e20:	d006      	beq.n	8005e30 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e22:	6802      	ldr	r2, [r0, #0]
 8005e24:	6853      	ldr	r3, [r2, #4]
 8005e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e2a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e32:	f013 0f10 	tst.w	r3, #16
 8005e36:	d006      	beq.n	8005e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e38:	6802      	ldr	r2, [r0, #0]
 8005e3a:	6893      	ldr	r3, [r2, #8]
 8005e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e40:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e48:	f013 0f20 	tst.w	r3, #32
 8005e4c:	d006      	beq.n	8005e5c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4e:	6802      	ldr	r2, [r0, #0]
 8005e50:	6893      	ldr	r3, [r2, #8]
 8005e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e56:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e64:	6802      	ldr	r2, [r0, #0]
 8005e66:	6853      	ldr	r3, [r2, #4]
 8005e68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e78:	d00b      	beq.n	8005e92 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e80:	d006      	beq.n	8005e90 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e82:	6802      	ldr	r2, [r0, #0]
 8005e84:	6853      	ldr	r3, [r2, #4]
 8005e86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6053      	str	r3, [r2, #4]
  }
}
 8005e90:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e92:	6802      	ldr	r2, [r0, #0]
 8005e94:	6853      	ldr	r3, [r2, #4]
 8005e96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e9a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6053      	str	r3, [r2, #4]
 8005ea0:	e7eb      	b.n	8005e7a <UART_AdvFeatureConfig+0xa2>

08005ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	460f      	mov	r7, r1
 8005eaa:	4616      	mov	r6, r2
 8005eac:	4698      	mov	r8, r3
 8005eae:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	ea37 0303 	bics.w	r3, r7, r3
 8005eb8:	bf0c      	ite	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	2300      	movne	r3, #0
 8005ebe:	42b3      	cmp	r3, r6
 8005ec0:	d11c      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005ec6:	d0f3      	beq.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec8:	f7fc f920 	bl	800210c <HAL_GetTick>
 8005ecc:	eba0 0008 	sub.w	r0, r0, r8
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d801      	bhi.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0x36>
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d1eb      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed8:	682a      	ldr	r2, [r5, #0]
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	682a      	ldr	r2, [r5, #0]
 8005ee4:	6893      	ldr	r3, [r2, #8]
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005eec:	2320      	movs	r3, #32
 8005eee:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ef8:	2003      	movs	r0, #3
 8005efa:	e000      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8005efc:	2000      	movs	r0, #0
}
 8005efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f02 <UART_CheckIdleState>:
{
 8005f02:	b510      	push	{r4, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f0c:	f7fc f8fe 	bl	800210c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	f012 0f08 	tst.w	r2, #8
 8005f18:	d107      	bne.n	8005f2a <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005f20:	2000      	movs	r0, #0
 8005f22:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005f26:	b002      	add	sp, #8
 8005f28:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4603      	mov	r3, r0
 8005f32:	2200      	movs	r2, #0
 8005f34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff ffb2 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0eb      	beq.n	8005f1a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005f42:	2003      	movs	r0, #3
 8005f44:	e7ef      	b.n	8005f26 <UART_CheckIdleState+0x24>

08005f46 <HAL_UART_Init>:
  if (huart == NULL)
 8005f46:	b368      	cbz	r0, 8005fa4 <HAL_UART_Init+0x5e>
{
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f4e:	b303      	cbz	r3, 8005f92 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	2324      	movs	r3, #36	; 0x24
 8005f52:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff fd82 	bl	8005a68 <UART_SetConfig>
 8005f64:	2801      	cmp	r0, #1
 8005f66:	d013      	beq.n	8005f90 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6a:	b9bb      	cbnz	r3, 8005f9c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	6853      	ldr	r3, [r2, #4]
 8005f70:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005f74:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	6893      	ldr	r3, [r2, #8]
 8005f7a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005f7e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005f80:	6822      	ldr	r2, [r4, #0]
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7ff ffb9 	bl	8005f02 <UART_CheckIdleState>
}
 8005f90:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005f92:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f96:	f004 f8c9 	bl	800a12c <HAL_UART_MspInit>
 8005f9a:	e7d9      	b.n	8005f50 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff ff1b 	bl	8005dd8 <UART_AdvFeatureConfig>
 8005fa2:	e7e3      	b.n	8005f6c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005fa4:	2001      	movs	r0, #1
}
 8005fa6:	4770      	bx	lr

08005fa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fa8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005faa:	680b      	ldr	r3, [r1, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d018      	beq.n	8005fe2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005fb0:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005fb2:	4a19      	ldr	r2, [pc, #100]	; (8006018 <FMC_SDRAM_Init+0x70>)
 8005fb4:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005fb6:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005fb8:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005fba:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8005fbc:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8005fbe:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005fc0:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8005fc2:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005fc4:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005fc6:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005fc8:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005fca:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005fcc:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8005fce:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005fd0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8005fd2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005fd4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005fd6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005fd8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005fda:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005fdc:	2000      	movs	r0, #0
 8005fde:	bc30      	pop	{r4, r5}
 8005fe0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005fe2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005fe4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005fe8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005fea:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005fec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005fee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005ff0:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ff2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005ff4:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ff6:	4c08      	ldr	r4, [pc, #32]	; (8006018 <FMC_SDRAM_Init+0x70>)
 8005ff8:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ffa:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8005ffc:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ffe:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8006000:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8006002:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8006004:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8006006:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8006008:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 800600a:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800600c:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 800600e:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006010:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006012:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006014:	6043      	str	r3, [r0, #4]
 8006016:	e7e1      	b.n	8005fdc <FMC_SDRAM_Init+0x34>
 8006018:	ffff8000 	.word	0xffff8000

0800601c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800601c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800601e:	2a01      	cmp	r2, #1
 8006020:	d021      	beq.n	8006066 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006022:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006024:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800602c:	684c      	ldr	r4, [r1, #4]
 800602e:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006030:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006034:	688c      	ldr	r4, [r1, #8]
 8006036:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006038:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800603c:	68cc      	ldr	r4, [r1, #12]
 800603e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006040:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006044:	690c      	ldr	r4, [r1, #16]
 8006046:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006048:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800604c:	694c      	ldr	r4, [r1, #20]
 800604e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006050:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8006054:	6989      	ldr	r1, [r1, #24]
 8006056:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006058:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800605c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800605e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006060:	2000      	movs	r0, #0
 8006062:	bc30      	pop	{r4, r5}
 8006064:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006066:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006068:	4c11      	ldr	r4, [pc, #68]	; (80060b0 <FMC_SDRAM_Timing_Init+0x94>)
 800606a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800606c:	68ca      	ldr	r2, [r1, #12]
 800606e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8006070:	694b      	ldr	r3, [r1, #20]
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006076:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800607a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800607c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800607e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006082:	680b      	ldr	r3, [r1, #0]
 8006084:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006086:	684d      	ldr	r5, [r1, #4]
 8006088:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800608a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800608e:	688d      	ldr	r5, [r1, #8]
 8006090:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006092:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006096:	690d      	ldr	r5, [r1, #16]
 8006098:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800609a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800609e:	6989      	ldr	r1, [r1, #24]
 80060a0:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060a6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80060a8:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80060aa:	60c3      	str	r3, [r0, #12]
 80060ac:	e7d8      	b.n	8006060 <FMC_SDRAM_Timing_Init+0x44>
 80060ae:	bf00      	nop
 80060b0:	ff0f0fff 	.word	0xff0f0fff

080060b4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80060b4:	b410      	push	{r4}
 80060b6:	b083      	sub	sp, #12
 80060b8:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80060ba:	2000      	movs	r0, #0
 80060bc:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060be:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80060c0:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060c2:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060c4:	688a      	ldr	r2, [r1, #8]
 80060c6:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80060c8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 80060cc:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060ce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80060d2:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 80060d8:	b003      	add	sp, #12
 80060da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80060e0:	6943      	ldr	r3, [r0, #20]
 80060e2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80060e6:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80060e8:	2000      	movs	r0, #0
 80060ea:	4770      	bx	lr

080060ec <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80060ec:	4770      	bx	lr

080060ee <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	4770      	bx	lr

080060f2 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 80060f2:	4770      	bx	lr

080060f4 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 80060f4:	4b01      	ldr	r3, [pc, #4]	; (80060fc <ft5336_Get_I2C_InitializedStatus+0x8>)
 80060f6:	7818      	ldrb	r0, [r3, #0]
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	200003a4 	.word	0x200003a4

08006100 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006100:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006102:	f7ff fff7 	bl	80060f4 <ft5336_Get_I2C_InitializedStatus>
 8006106:	b100      	cbz	r0, 800610a <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8006108:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 800610a:	f000 fa8b 	bl	8006624 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800610e:	4b02      	ldr	r3, [pc, #8]	; (8006118 <ft5336_I2C_InitializeIfRequired+0x18>)
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]
}
 8006114:	e7f8      	b.n	8006108 <ft5336_I2C_InitializeIfRequired+0x8>
 8006116:	bf00      	nop
 8006118:	200003a4 	.word	0x200003a4

0800611c <ft5336_Init>:
{
 800611c:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 800611e:	20c8      	movs	r0, #200	; 0xc8
 8006120:	f000 fab0 	bl	8006684 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8006124:	f7ff ffec 	bl	8006100 <ft5336_I2C_InitializeIfRequired>
}
 8006128:	bd08      	pop	{r3, pc}

0800612a <ft5336_ReadID>:
{
 800612a:	b570      	push	{r4, r5, r6, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8006130:	2400      	movs	r4, #0
 8006132:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8006136:	f7ff ffe3 	bl	8006100 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800613a:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800613c:	e001      	b.n	8006142 <ft5336_ReadID+0x18>
 800613e:	3401      	adds	r4, #1
 8006140:	b2e4      	uxtb	r4, r4
 8006142:	f085 0301 	eor.w	r3, r5, #1
 8006146:	2c02      	cmp	r4, #2
 8006148:	bf8c      	ite	hi
 800614a:	2300      	movhi	r3, #0
 800614c:	f003 0301 	andls.w	r3, r3, #1
 8006150:	b163      	cbz	r3, 800616c <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006152:	21a8      	movs	r1, #168	; 0xa8
 8006154:	b2f0      	uxtb	r0, r6
 8006156:	f000 fa7f 	bl	8006658 <TS_IO_Read>
 800615a:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800615e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b51      	cmp	r3, #81	; 0x51
 8006166:	d1ea      	bne.n	800613e <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 8006168:	2501      	movs	r5, #1
 800616a:	e7e8      	b.n	800613e <ft5336_ReadID+0x14>
  return (ucReadId);
 800616c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006170:	b002      	add	sp, #8
 8006172:	bd70      	pop	{r4, r5, r6, pc}

08006174 <ft5336_TS_DetectTouch>:
{
 8006174:	b500      	push	{lr}
 8006176:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800617e:	2102      	movs	r1, #2
 8006180:	b2c0      	uxtb	r0, r0
 8006182:	f000 fa69 	bl	8006658 <TS_IO_Read>
 8006186:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800618a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8006196:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b05      	cmp	r3, #5
 800619e:	d902      	bls.n	80061a6 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80061a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80061aa:	4b04      	ldr	r3, [pc, #16]	; (80061bc <ft5336_TS_DetectTouch+0x48>)
 80061ac:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80061ae:	2200      	movs	r2, #0
 80061b0:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80061b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80061b6:	b003      	add	sp, #12
 80061b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80061bc:	200003a4 	.word	0x200003a4

080061c0 <ft5336_TS_GetXY>:
{
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80061cc:	4d4f      	ldr	r5, [pc, #316]	; (800630c <ft5336_TS_GetXY+0x14c>)
 80061ce:	78ab      	ldrb	r3, [r5, #2]
 80061d0:	786c      	ldrb	r4, [r5, #1]
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	f080 8096 	bcs.w	8006304 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 80061d8:	2b09      	cmp	r3, #9
 80061da:	d806      	bhi.n	80061ea <ft5336_TS_GetXY+0x2a>
 80061dc:	e8df f003 	tbb	[pc, r3]
 80061e0:	1b130b53 	.word	0x1b130b53
 80061e4:	3b332b23 	.word	0x3b332b23
 80061e8:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 80061ea:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 80061ee:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 80061f0:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 80061f2:	4643      	mov	r3, r8
 80061f4:	e04e      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 80061f6:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 80061fa:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 80061fe:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8006202:	230a      	movs	r3, #10
      break;
 8006204:	e046      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 8006206:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 800620a:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 800620e:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8006212:	2310      	movs	r3, #16
      break;
 8006214:	e03e      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 8006216:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 800621a:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 800621e:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8006222:	2316      	movs	r3, #22
      break;
 8006224:	e036      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 8006226:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 800622a:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 800622e:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8006232:	231c      	movs	r3, #28
      break;
 8006234:	e02e      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 8006236:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 800623a:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 800623e:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8006242:	2322      	movs	r3, #34	; 0x22
      break;
 8006244:	e026      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 8006246:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 800624a:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 800624e:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8006252:	2328      	movs	r3, #40	; 0x28
      break;
 8006254:	e01e      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 8006256:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 800625a:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 800625e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8006262:	232e      	movs	r3, #46	; 0x2e
      break;
 8006264:	e016      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 8006266:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 800626a:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 800626e:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8006272:	2334      	movs	r3, #52	; 0x34
      break;
 8006274:	e00e      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 8006276:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 800627a:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 800627e:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8006282:	233a      	movs	r3, #58	; 0x3a
      break;
 8006284:	e006      	b.n	8006294 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 8006286:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 800628a:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 800628e:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8006292:	2304      	movs	r3, #4
 8006294:	4616      	mov	r6, r2
 8006296:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006298:	b2c4      	uxtb	r4, r0
 800629a:	4619      	mov	r1, r3
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f9db 	bl	8006658 <TS_IO_Read>
 80062a2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80062a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062aa:	4d19      	ldr	r5, [pc, #100]	; (8006310 <ft5336_TS_GetXY+0x150>)
 80062ac:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80062ae:	4651      	mov	r1, sl
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f9d1 	bl	8006658 <TS_IO_Read>
 80062b6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80062ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062c4:	882a      	ldrh	r2, [r5, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	802b      	strh	r3, [r5, #0]
    *X = coord;
 80062ca:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80062cc:	4649      	mov	r1, r9
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 f9c2 	bl	8006658 <TS_IO_Read>
 80062d4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80062d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062dc:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80062de:	4641      	mov	r1, r8
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f9b9 	bl	8006658 <TS_IO_Read>
 80062e6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80062ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062f4:	882a      	ldrh	r2, [r5, #0]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 80062fa:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80062fc:	4a03      	ldr	r2, [pc, #12]	; (800630c <ft5336_TS_GetXY+0x14c>)
 80062fe:	7893      	ldrb	r3, [r2, #2]
 8006300:	3301      	adds	r3, #1
 8006302:	7093      	strb	r3, [r2, #2]
}
 8006304:	b002      	add	sp, #8
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	bf00      	nop
 800630c:	200003a4 	.word	0x200003a4
 8006310:	200003a2 	.word	0x200003a2

08006314 <ft5336_TS_EnableIT>:
{
 8006314:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006316:	2201      	movs	r2, #1
 8006318:	21a4      	movs	r1, #164	; 0xa4
 800631a:	b2c0      	uxtb	r0, r0
 800631c:	f000 f98a 	bl	8006634 <TS_IO_Write>
}
 8006320:	bd08      	pop	{r3, pc}

08006322 <ft5336_TS_DisableIT>:
{
 8006322:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006324:	2200      	movs	r2, #0
 8006326:	21a4      	movs	r1, #164	; 0xa4
 8006328:	b2c0      	uxtb	r0, r0
 800632a:	f000 f983 	bl	8006634 <TS_IO_Write>
}
 800632e:	bd08      	pop	{r3, pc}

08006330 <ft5336_TS_Start>:
{
 8006330:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8006332:	f7ff fff6 	bl	8006322 <ft5336_TS_DisableIT>
}
 8006336:	bd08      	pop	{r3, pc}

08006338 <ft5336_TS_GetGestureID>:
{
 8006338:	b510      	push	{r4, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8006344:	2101      	movs	r1, #1
 8006346:	b2c0      	uxtb	r0, r0
 8006348:	f000 f986 	bl	8006658 <TS_IO_Read>
 800634c:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8006350:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006354:	6023      	str	r3, [r4, #0]
}
 8006356:	b002      	add	sp, #8
 8006358:	bd10      	pop	{r4, pc}
	...

0800635c <ft5336_TS_GetTouchInfo>:
{
 800635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006360:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8006362:	2400      	movs	r4, #0
 8006364:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006368:	4c33      	ldr	r4, [pc, #204]	; (8006438 <ft5336_TS_GetTouchInfo+0xdc>)
 800636a:	7864      	ldrb	r4, [r4, #1]
 800636c:	428c      	cmp	r4, r1
 800636e:	d95f      	bls.n	8006430 <ft5336_TS_GetTouchInfo+0xd4>
    switch(touchIdx)
 8006370:	2909      	cmp	r1, #9
 8006372:	d806      	bhi.n	8006382 <ft5336_TS_GetTouchInfo+0x26>
 8006374:	e8df f001 	tbb	[pc, r1]
 8006378:	130e0936 	.word	0x130e0936
 800637c:	27221d18 	.word	0x27221d18
 8006380:	312c      	.short	0x312c
  uint8_t regAddressPMisc = 0;
 8006382:	2700      	movs	r7, #0
  uint8_t regAddressPWeight = 0;
 8006384:	46b8      	mov	r8, r7
  uint8_t regAddressXHigh = 0;
 8006386:	4639      	mov	r1, r7
 8006388:	e030      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800638a:	270e      	movs	r7, #14
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800638c:	f04f 080d 	mov.w	r8, #13
      regAddressXHigh   = FT5336_P2_XH_REG;
 8006390:	2109      	movs	r1, #9
      break;
 8006392:	e02b      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8006394:	2714      	movs	r7, #20
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8006396:	f04f 0813 	mov.w	r8, #19
      regAddressXHigh   = FT5336_P3_XH_REG;
 800639a:	210f      	movs	r1, #15
      break;
 800639c:	e026      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800639e:	271a      	movs	r7, #26
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80063a0:	f04f 0819 	mov.w	r8, #25
      regAddressXHigh   = FT5336_P4_XH_REG;
 80063a4:	2115      	movs	r1, #21
      break;
 80063a6:	e021      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80063a8:	2720      	movs	r7, #32
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80063aa:	f04f 081f 	mov.w	r8, #31
      regAddressXHigh   = FT5336_P5_XH_REG;
 80063ae:	211b      	movs	r1, #27
      break;
 80063b0:	e01c      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80063b2:	2726      	movs	r7, #38	; 0x26
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80063b4:	f04f 0825 	mov.w	r8, #37	; 0x25
      regAddressXHigh   = FT5336_P6_XH_REG;
 80063b8:	2121      	movs	r1, #33	; 0x21
      break;
 80063ba:	e017      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80063bc:	272c      	movs	r7, #44	; 0x2c
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80063be:	f04f 082b 	mov.w	r8, #43	; 0x2b
      regAddressXHigh   = FT5336_P7_XH_REG;
 80063c2:	2127      	movs	r1, #39	; 0x27
      break;
 80063c4:	e012      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80063c6:	2732      	movs	r7, #50	; 0x32
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80063c8:	f04f 0831 	mov.w	r8, #49	; 0x31
      regAddressXHigh   = FT5336_P8_XH_REG;
 80063cc:	212d      	movs	r1, #45	; 0x2d
      break;
 80063ce:	e00d      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80063d0:	2738      	movs	r7, #56	; 0x38
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80063d2:	f04f 0837 	mov.w	r8, #55	; 0x37
      regAddressXHigh   = FT5336_P9_XH_REG;
 80063d6:	2133      	movs	r1, #51	; 0x33
      break;
 80063d8:	e008      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80063da:	273e      	movs	r7, #62	; 0x3e
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80063dc:	f04f 083d 	mov.w	r8, #61	; 0x3d
      regAddressXHigh   = FT5336_P10_XH_REG;
 80063e0:	2139      	movs	r1, #57	; 0x39
      break;
 80063e2:	e003      	b.n	80063ec <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80063e4:	2708      	movs	r7, #8
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80063e6:	f04f 0807 	mov.w	r8, #7
      regAddressXHigh   = FT5336_P1_XH_REG;
 80063ea:	2103      	movs	r1, #3
 80063ec:	461d      	mov	r5, r3
 80063ee:	4616      	mov	r6, r2
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80063f0:	b2c4      	uxtb	r4, r0
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 f930 	bl	8006658 <TS_IO_Read>
 80063f8:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80063fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006400:	099b      	lsrs	r3, r3, #6
 8006402:	9a08      	ldr	r2, [sp, #32]
 8006404:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006406:	4641      	mov	r1, r8
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f925 	bl	8006658 <TS_IO_Read>
 800640e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006416:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006418:	4639      	mov	r1, r7
 800641a:	4620      	mov	r0, r4
 800641c:	f000 f91c 	bl	8006658 <TS_IO_Read>
 8006420:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006424:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006428:	0912      	lsrs	r2, r2, #4
 800642a:	f002 0204 	and.w	r2, r2, #4
 800642e:	602a      	str	r2, [r5, #0]
}
 8006430:	b002      	add	sp, #8
 8006432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006436:	bf00      	nop
 8006438:	200003a4 	.word	0x200003a4

0800643c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006440:	4b44      	ldr	r3, [pc, #272]	; (8006554 <I2Cx_MspInit+0x118>)
 8006442:	4283      	cmp	r3, r0
 8006444:	d043      	beq.n	80064ce <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006446:	4c44      	ldr	r4, [pc, #272]	; (8006558 <I2Cx_MspInit+0x11c>)
 8006448:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	6323      	str	r3, [r4, #48]	; 0x30
 8006450:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	9303      	str	r3, [sp, #12]
 8006458:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800645a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645e:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006460:	2312      	movs	r3, #18
 8006462:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006464:	2500      	movs	r5, #0
 8006466:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006468:	2302      	movs	r3, #2
 800646a:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800646c:	2304      	movs	r3, #4
 800646e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006470:	4e3a      	ldr	r6, [pc, #232]	; (800655c <I2Cx_MspInit+0x120>)
 8006472:	a905      	add	r1, sp, #20
 8006474:	4630      	mov	r0, r6
 8006476:	f7fc fed1 	bl	800321c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800647a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006480:	a905      	add	r1, sp, #20
 8006482:	4630      	mov	r0, r6
 8006484:	f7fc feca 	bl	800321c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006488:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800648a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800648e:	6423      	str	r3, [r4, #64]	; 0x40
 8006490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006496:	9304      	str	r3, [sp, #16]
 8006498:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800649a:	6a23      	ldr	r3, [r4, #32]
 800649c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064a0:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80064a2:	6a23      	ldr	r3, [r4, #32]
 80064a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064a8:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80064aa:	462a      	mov	r2, r5
 80064ac:	210f      	movs	r1, #15
 80064ae:	201f      	movs	r0, #31
 80064b0:	f7fc fa30 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80064b4:	201f      	movs	r0, #31
 80064b6:	f7fc fa5f 	bl	8002978 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80064ba:	462a      	mov	r2, r5
 80064bc:	210f      	movs	r1, #15
 80064be:	2020      	movs	r0, #32
 80064c0:	f7fc fa28 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80064c4:	2020      	movs	r0, #32
 80064c6:	f7fc fa57 	bl	8002978 <HAL_NVIC_EnableIRQ>
  }
}
 80064ca:	b00a      	add	sp, #40	; 0x28
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80064ce:	4c22      	ldr	r4, [pc, #136]	; (8006558 <I2Cx_MspInit+0x11c>)
 80064d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	6323      	str	r3, [r4, #48]	; 0x30
 80064d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80064e6:	2312      	movs	r3, #18
 80064e8:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80064ea:	2500      	movs	r5, #0
 80064ec:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80064ee:	2302      	movs	r3, #2
 80064f0:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80064f2:	2304      	movs	r3, #4
 80064f4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80064f6:	4e1a      	ldr	r6, [pc, #104]	; (8006560 <I2Cx_MspInit+0x124>)
 80064f8:	a905      	add	r1, sp, #20
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7fc fe8e 	bl	800321c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006504:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006506:	a905      	add	r1, sp, #20
 8006508:	4630      	mov	r0, r6
 800650a:	f7fc fe87 	bl	800321c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800650e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006514:	6423      	str	r3, [r4, #64]	; 0x40
 8006516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006520:	6a23      	ldr	r3, [r4, #32]
 8006522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006526:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006528:	6a23      	ldr	r3, [r4, #32]
 800652a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800652e:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006530:	462a      	mov	r2, r5
 8006532:	210f      	movs	r1, #15
 8006534:	2048      	movs	r0, #72	; 0x48
 8006536:	f7fc f9ed 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800653a:	2048      	movs	r0, #72	; 0x48
 800653c:	f7fc fa1c 	bl	8002978 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006540:	462a      	mov	r2, r5
 8006542:	210f      	movs	r1, #15
 8006544:	2049      	movs	r0, #73	; 0x49
 8006546:	f7fc f9e5 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800654a:	2049      	movs	r0, #73	; 0x49
 800654c:	f7fc fa14 	bl	8002978 <HAL_NVIC_EnableIRQ>
 8006550:	e7bb      	b.n	80064ca <I2Cx_MspInit+0x8e>
 8006552:	bf00      	nop
 8006554:	200003a8 	.word	0x200003a8
 8006558:	40023800 	.word	0x40023800
 800655c:	40020400 	.word	0x40020400
 8006560:	40021c00 	.word	0x40021c00

08006564 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006568:	f7fd faf2 	bl	8003b50 <HAL_I2C_GetState>
 800656c:	b9a0      	cbnz	r0, 8006598 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <I2Cx_Init+0x3c>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d012      	beq.n	800659a <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <I2Cx_Init+0x40>)
 8006576:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <I2Cx_Init+0x44>)
 800657a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006580:	2201      	movs	r2, #1
 8006582:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006584:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006586:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006588:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800658a:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff ff55 	bl	800643c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8006592:	4620      	mov	r0, r4
 8006594:	f7fd f8b0 	bl	80036f8 <HAL_I2C_Init>
  }
}
 8006598:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <I2Cx_Init+0x48>)
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	e7eb      	b.n	8006578 <I2Cx_Init+0x14>
 80065a0:	200003a8 	.word	0x200003a8
 80065a4:	40005400 	.word	0x40005400
 80065a8:	40912732 	.word	0x40912732
 80065ac:	40005c00 	.word	0x40005c00

080065b0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80065b4:	f7fd f8ff 	bl	80037b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7ff ffd3 	bl	8006564 <I2Cx_Init>
}
 80065be:	bd10      	pop	{r4, pc}

080065c0 <I2Cx_WriteMultiple>:
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	4606      	mov	r6, r0
 80065c6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80065c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065cc:	9102      	str	r1, [sp, #8]
 80065ce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80065d2:	9101      	str	r1, [sp, #4]
 80065d4:	9908      	ldr	r1, [sp, #32]
 80065d6:	9100      	str	r1, [sp, #0]
 80065d8:	4621      	mov	r1, r4
 80065da:	f7fd f905 	bl	80037e8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80065de:	4605      	mov	r5, r0
 80065e0:	b910      	cbnz	r0, 80065e8 <I2Cx_WriteMultiple+0x28>
}
 80065e2:	4628      	mov	r0, r5
 80065e4:	b004      	add	sp, #16
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80065e8:	4621      	mov	r1, r4
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ffe0 	bl	80065b0 <I2Cx_Error>
 80065f0:	e7f7      	b.n	80065e2 <I2Cx_WriteMultiple+0x22>

080065f2 <I2Cx_ReadMultiple>:
{
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	4606      	mov	r6, r0
 80065f8:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80065fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065fe:	9102      	str	r1, [sp, #8]
 8006600:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006604:	9101      	str	r1, [sp, #4]
 8006606:	9908      	ldr	r1, [sp, #32]
 8006608:	9100      	str	r1, [sp, #0]
 800660a:	4621      	mov	r1, r4
 800660c:	f7fd f9c4 	bl	8003998 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8006610:	4605      	mov	r5, r0
 8006612:	b910      	cbnz	r0, 800661a <I2Cx_ReadMultiple+0x28>
}
 8006614:	4628      	mov	r0, r5
 8006616:	b004      	add	sp, #16
 8006618:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800661a:	4621      	mov	r1, r4
 800661c:	4630      	mov	r0, r6
 800661e:	f7ff ffc7 	bl	80065b0 <I2Cx_Error>
 8006622:	e7f7      	b.n	8006614 <I2Cx_ReadMultiple+0x22>

08006624 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006624:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8006626:	4802      	ldr	r0, [pc, #8]	; (8006630 <TS_IO_Init+0xc>)
 8006628:	f7ff ff9c 	bl	8006564 <I2Cx_Init>
}
 800662c:	bd08      	pop	{r3, pc}
 800662e:	bf00      	nop
 8006630:	200003a8 	.word	0x200003a8

08006634 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006634:	b510      	push	{r4, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	ac04      	add	r4, sp, #16
 800663a:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800663e:	2301      	movs	r3, #1
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	9400      	str	r4, [sp, #0]
 8006644:	460a      	mov	r2, r1
 8006646:	4601      	mov	r1, r0
 8006648:	4802      	ldr	r0, [pc, #8]	; (8006654 <TS_IO_Write+0x20>)
 800664a:	f7ff ffb9 	bl	80065c0 <I2Cx_WriteMultiple>
}
 800664e:	b004      	add	sp, #16
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	200003a8 	.word	0x200003a8

08006658 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006658:	b500      	push	{lr}
 800665a:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 800665c:	aa04      	add	r2, sp, #16
 800665e:	2300      	movs	r3, #0
 8006660:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006664:	2301      	movs	r3, #1
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	9200      	str	r2, [sp, #0]
 800666a:	460a      	mov	r2, r1
 800666c:	4601      	mov	r1, r0
 800666e:	4804      	ldr	r0, [pc, #16]	; (8006680 <TS_IO_Read+0x28>)
 8006670:	f7ff ffbf 	bl	80065f2 <I2Cx_ReadMultiple>

  return read_value;
}
 8006674:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8006678:	b005      	add	sp, #20
 800667a:	f85d fb04 	ldr.w	pc, [sp], #4
 800667e:	bf00      	nop
 8006680:	200003a8 	.word	0x200003a8

08006684 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006684:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8006686:	f7fb fd47 	bl	8002118 <HAL_Delay>
}
 800668a:	bd08      	pop	{r3, pc}

0800668c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668e:	b083      	sub	sp, #12
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	4616      	mov	r6, r2
 8006696:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <LL_FillBuffer+0x70>)
 800669a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800669e:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <LL_FillBuffer+0x74>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <LL_FillBuffer+0x78>)
 80066a6:	2134      	movs	r1, #52	; 0x34
 80066a8:	fb01 2303 	mla	r3, r1, r3, r2
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d00c      	beq.n	80066cc <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <LL_FillBuffer+0x70>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80066b8:	4810      	ldr	r0, [pc, #64]	; (80066fc <LL_FillBuffer+0x70>)
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <LL_FillBuffer+0x7c>)
 80066c0:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80066c2:	f7fc fc5f 	bl	8002f84 <HAL_DMA2D_Init>
 80066c6:	b128      	cbz	r0, 80066d4 <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 80066c8:	b003      	add	sp, #12
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <LL_FillBuffer+0x70>)
 80066ce:	2202      	movs	r2, #2
 80066d0:	609a      	str	r2, [r3, #8]
 80066d2:	e7f1      	b.n	80066b8 <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80066d4:	4621      	mov	r1, r4
 80066d6:	4809      	ldr	r0, [pc, #36]	; (80066fc <LL_FillBuffer+0x70>)
 80066d8:	f7fc fd3e 	bl	8003158 <HAL_DMA2D_ConfigLayer>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d1f3      	bne.n	80066c8 <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80066e0:	9700      	str	r7, [sp, #0]
 80066e2:	4633      	mov	r3, r6
 80066e4:	462a      	mov	r2, r5
 80066e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e8:	4804      	ldr	r0, [pc, #16]	; (80066fc <LL_FillBuffer+0x70>)
 80066ea:	f7fc fc79 	bl	8002fe0 <HAL_DMA2D_Start>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d1ea      	bne.n	80066c8 <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80066f2:	210a      	movs	r1, #10
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <LL_FillBuffer+0x70>)
 80066f6:	f7fc fc8f 	bl	8003018 <HAL_DMA2D_PollForTransfer>
}
 80066fa:	e7e5      	b.n	80066c8 <LL_FillBuffer+0x3c>
 80066fc:	20000410 	.word	0x20000410
 8006700:	200003f4 	.word	0x200003f4
 8006704:	20004508 	.word	0x20004508
 8006708:	4002b000 	.word	0x4002b000

0800670c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <BSP_LCD_GetXSize+0x10>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a03      	ldr	r2, [pc, #12]	; (8006720 <BSP_LCD_GetXSize+0x14>)
 8006712:	2134      	movs	r1, #52	; 0x34
 8006714:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006718:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800671a:	4770      	bx	lr
 800671c:	200003f4 	.word	0x200003f4
 8006720:	20004508 	.word	0x20004508

08006724 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <BSP_LCD_GetYSize+0x10>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a03      	ldr	r2, [pc, #12]	; (8006738 <BSP_LCD_GetYSize+0x14>)
 800672a:	2134      	movs	r1, #52	; 0x34
 800672c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006730:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006732:	4770      	bx	lr
 8006734:	200003f4 	.word	0x200003f4
 8006738:	20004508 	.word	0x20004508

0800673c <BSP_LCD_LayerDefaultInit>:
{     
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	b08e      	sub	sp, #56	; 0x38
 8006740:	4605      	mov	r5, r0
 8006742:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 8006744:	2400      	movs	r4, #0
 8006746:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006748:	f7ff ffe0 	bl	800670c <BSP_LCD_GetXSize>
 800674c:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 800674e:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006750:	f7ff ffe8 	bl	8006724 <BSP_LCD_GetYSize>
 8006754:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006756:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8006758:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 800675a:	23ff      	movs	r3, #255	; 0xff
 800675c:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 800675e:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8006760:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8006764:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8006768:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800676c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006770:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006772:	2307      	movs	r3, #7
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006776:	f7ff ffc9 	bl	800670c <BSP_LCD_GetXSize>
 800677a:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800677c:	f7ff ffd2 	bl	8006724 <BSP_LCD_GetYSize>
 8006780:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006782:	462a      	mov	r2, r5
 8006784:	a901      	add	r1, sp, #4
 8006786:	480a      	ldr	r0, [pc, #40]	; (80067b0 <BSP_LCD_LayerDefaultInit+0x74>)
 8006788:	f7fd fb9a 	bl	8003ec0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800678c:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <BSP_LCD_LayerDefaultInit+0x78>)
 800678e:	0068      	lsls	r0, r5, #1
 8006790:	1941      	adds	r1, r0, r5
 8006792:	008b      	lsls	r3, r1, #2
 8006794:	4413      	add	r3, r2
 8006796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800679a:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800679c:	4906      	ldr	r1, [pc, #24]	; (80067b8 <BSP_LCD_LayerDefaultInit+0x7c>)
 800679e:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80067a0:	4428      	add	r0, r5
 80067a2:	0083      	lsls	r3, r0, #2
 80067a4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80067a8:	50d1      	str	r1, [r2, r3]
}
 80067aa:	b00e      	add	sp, #56	; 0x38
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	bf00      	nop
 80067b0:	20004508 	.word	0x20004508
 80067b4:	200003f8 	.word	0x200003f8
 80067b8:	20000014 	.word	0x20000014

080067bc <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80067bc:	4b01      	ldr	r3, [pc, #4]	; (80067c4 <BSP_LCD_SelectLayer+0x8>)
 80067be:	6018      	str	r0, [r3, #0]
} 
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	200003f4 	.word	0x200003f4

080067c8 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <BSP_LCD_SetTextColor+0x10>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067d0:	009a      	lsls	r2, r3, #2
 80067d2:	4b02      	ldr	r3, [pc, #8]	; (80067dc <BSP_LCD_SetTextColor+0x14>)
 80067d4:	5098      	str	r0, [r3, r2]
}
 80067d6:	4770      	bx	lr
 80067d8:	200003f4 	.word	0x200003f4
 80067dc:	200003f8 	.word	0x200003f8

080067e0 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <BSP_LCD_SetBackColor+0x14>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067e8:	009a      	lsls	r2, r3, #2
 80067ea:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <BSP_LCD_SetBackColor+0x18>)
 80067ec:	4413      	add	r3, r2
 80067ee:	6058      	str	r0, [r3, #4]
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	200003f4 	.word	0x200003f4
 80067f8:	200003f8 	.word	0x200003f8

080067fc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <BSP_LCD_SetFont+0x14>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006804:	009a      	lsls	r2, r3, #2
 8006806:	4b03      	ldr	r3, [pc, #12]	; (8006814 <BSP_LCD_SetFont+0x18>)
 8006808:	4413      	add	r3, r2
 800680a:	6098      	str	r0, [r3, #8]
}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	200003f4 	.word	0x200003f4
 8006814:	200003f8 	.word	0x200003f8

08006818 <BSP_LCD_Clear>:
{ 
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b083      	sub	sp, #12
 800681c:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <BSP_LCD_Clear+0x34>)
 8006820:	681c      	ldr	r4, [r3, #0]
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <BSP_LCD_Clear+0x38>)
 8006824:	2334      	movs	r3, #52	; 0x34
 8006826:	fb03 2304 	mla	r3, r3, r4, r2
 800682a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800682c:	f7ff ff6e 	bl	800670c <BSP_LCD_GetXSize>
 8006830:	4606      	mov	r6, r0
 8006832:	f7ff ff77 	bl	8006724 <BSP_LCD_GetYSize>
 8006836:	9701      	str	r7, [sp, #4]
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4603      	mov	r3, r0
 800683e:	4632      	mov	r2, r6
 8006840:	4629      	mov	r1, r5
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff ff22 	bl	800668c <LL_FillBuffer>
}
 8006848:	b003      	add	sp, #12
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	200003f4 	.word	0x200003f4
 8006850:	20004508 	.word	0x20004508

08006854 <BSP_LCD_DrawHLine>:
{
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	4680      	mov	r8, r0
 800685c:	460e      	mov	r6, r1
 800685e:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <BSP_LCD_DrawHLine+0x6c>)
 8006862:	681c      	ldr	r4, [r3, #0]
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <BSP_LCD_DrawHLine+0x70>)
 8006866:	2334      	movs	r3, #52	; 0x34
 8006868:	fb03 2304 	mla	r3, r3, r4, r2
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	2b02      	cmp	r3, #2
 8006870:	d01a      	beq.n	80068a8 <BSP_LCD_DrawHLine+0x54>
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <BSP_LCD_DrawHLine+0x70>)
 8006874:	2334      	movs	r3, #52	; 0x34
 8006876:	fb03 2304 	mla	r3, r3, r4, r2
 800687a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800687c:	f7ff ff46 	bl	800670c <BSP_LCD_GetXSize>
 8006880:	fb00 8006 	mla	r0, r0, r6, r8
 8006884:	eb05 0180 	add.w	r1, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006888:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800688c:	0093      	lsls	r3, r2, #2
 800688e:	4a0e      	ldr	r2, [pc, #56]	; (80068c8 <BSP_LCD_DrawHLine+0x74>)
 8006890:	58d3      	ldr	r3, [r2, r3]
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	2300      	movs	r3, #0
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2301      	movs	r3, #1
 800689a:	463a      	mov	r2, r7
 800689c:	4620      	mov	r0, r4
 800689e:	f7ff fef5 	bl	800668c <LL_FillBuffer>
}
 80068a2:	b002      	add	sp, #8
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80068a8:	2334      	movs	r3, #52	; 0x34
 80068aa:	fb03 2304 	mla	r3, r3, r4, r2
 80068ae:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80068b0:	f7ff ff2c 	bl	800670c <BSP_LCD_GetXSize>
 80068b4:	fb00 8006 	mla	r0, r0, r6, r8
 80068b8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80068bc:	e7e4      	b.n	8006888 <BSP_LCD_DrawHLine+0x34>
 80068be:	bf00      	nop
 80068c0:	200003f4 	.word	0x200003f4
 80068c4:	20004508 	.word	0x20004508
 80068c8:	200003f8 	.word	0x200003f8

080068cc <BSP_LCD_DrawPixel>:
{
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	4606      	mov	r6, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <BSP_LCD_DrawPixel+0x4c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4910      	ldr	r1, [pc, #64]	; (800691c <BSP_LCD_DrawPixel+0x50>)
 80068da:	2234      	movs	r2, #52	; 0x34
 80068dc:	fb02 1203 	mla	r2, r2, r3, r1
 80068e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068e2:	2a02      	cmp	r2, #2
 80068e4:	d00b      	beq.n	80068fe <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80068e6:	4a0d      	ldr	r2, [pc, #52]	; (800691c <BSP_LCD_DrawPixel+0x50>)
 80068e8:	2134      	movs	r1, #52	; 0x34
 80068ea:	fb01 2303 	mla	r3, r1, r3, r2
 80068ee:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80068f0:	f7ff ff0c 	bl	800670c <BSP_LCD_GetXSize>
 80068f4:	fb00 6004 	mla	r0, r0, r4, r6
 80068f8:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 80068fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80068fe:	460a      	mov	r2, r1
 8006900:	2134      	movs	r1, #52	; 0x34
 8006902:	fb01 2303 	mla	r3, r1, r3, r2
 8006906:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006908:	f7ff ff00 	bl	800670c <BSP_LCD_GetXSize>
 800690c:	fb00 6004 	mla	r0, r0, r4, r6
 8006910:	b2ad      	uxth	r5, r5
 8006912:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 8006916:	e7f1      	b.n	80068fc <BSP_LCD_DrawPixel+0x30>
 8006918:	200003f4 	.word	0x200003f4
 800691c:	20004508 	.word	0x20004508

08006920 <DrawChar>:
{
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b083      	sub	sp, #12
 8006926:	4681      	mov	r9, r0
 8006928:	460f      	mov	r7, r1
 800692a:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 800692c:	4b34      	ldr	r3, [pc, #208]	; (8006a00 <DrawChar+0xe0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006934:	009a      	lsls	r2, r3, #2
 8006936:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <DrawChar+0xe4>)
 8006938:	4413      	add	r3, r2
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	88da      	ldrh	r2, [r3, #6]
 800693e:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006940:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8006942:	f105 0b07 	add.w	fp, r5, #7
 8006946:	ea4f 0beb 	mov.w	fp, fp, asr #3
 800694a:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 800694e:	fa5f f888 	uxtb.w	r8, r8
 8006952:	b2eb      	uxtb	r3, r5
 8006954:	eba8 0803 	sub.w	r8, r8, r3
 8006958:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 800695c:	f04f 0a00 	mov.w	sl, #0
 8006960:	e034      	b.n	80069cc <DrawChar+0xac>
      line =  pchar[0];      
 8006962:	9a00      	ldr	r2, [sp, #0]
 8006964:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 8006966:	2400      	movs	r4, #0
 8006968:	e014      	b.n	8006994 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 800696a:	9900      	ldr	r1, [sp, #0]
 800696c:	5ccb      	ldrb	r3, [r1, r3]
 800696e:	7856      	ldrb	r6, [r2, #1]
 8006970:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 8006974:	e7f7      	b.n	8006966 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <DrawChar+0xe0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800697e:	009a      	lsls	r2, r3, #2
 8006980:	4b20      	ldr	r3, [pc, #128]	; (8006a04 <DrawChar+0xe4>)
 8006982:	4413      	add	r3, r2
 8006984:	eb09 0004 	add.w	r0, r9, r4
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4639      	mov	r1, r7
 800698c:	b280      	uxth	r0, r0
 800698e:	f7ff ff9d 	bl	80068cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006992:	3401      	adds	r4, #1
 8006994:	42a5      	cmp	r5, r4
 8006996:	d915      	bls.n	80069c4 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8006998:	1b2b      	subs	r3, r5, r4
 800699a:	4443      	add	r3, r8
 800699c:	3b01      	subs	r3, #1
 800699e:	2201      	movs	r2, #1
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	4233      	tst	r3, r6
 80069a6:	d0e6      	beq.n	8006976 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <DrawChar+0xe0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	eb09 0004 	add.w	r0, r9, r4
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <DrawChar+0xe4>)
 80069b8:	589a      	ldr	r2, [r3, r2]
 80069ba:	4639      	mov	r1, r7
 80069bc:	b280      	uxth	r0, r0
 80069be:	f7ff ff85 	bl	80068cc <BSP_LCD_DrawPixel>
 80069c2:	e7e6      	b.n	8006992 <DrawChar+0x72>
    Ypos++;
 80069c4:	3701      	adds	r7, #1
 80069c6:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	4553      	cmp	r3, sl
 80069d0:	d912      	bls.n	80069f8 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80069d2:	fb0a f30b 	mul.w	r3, sl, fp
 80069d6:	9a00      	ldr	r2, [sp, #0]
 80069d8:	441a      	add	r2, r3
    switch(((width + 7)/8))
 80069da:	f1bb 0f01 	cmp.w	fp, #1
 80069de:	d0c0      	beq.n	8006962 <DrawChar+0x42>
 80069e0:	f1bb 0f02 	cmp.w	fp, #2
 80069e4:	d0c1      	beq.n	800696a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80069e6:	9900      	ldr	r1, [sp, #0]
 80069e8:	5ccb      	ldrb	r3, [r1, r3]
 80069ea:	7856      	ldrb	r6, [r2, #1]
 80069ec:	0236      	lsls	r6, r6, #8
 80069ee:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80069f2:	7893      	ldrb	r3, [r2, #2]
 80069f4:	431e      	orrs	r6, r3
      break;
 80069f6:	e7b6      	b.n	8006966 <DrawChar+0x46>
}
 80069f8:	b003      	add	sp, #12
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fe:	bf00      	nop
 8006a00:	200003f4 	.word	0x200003f4
 8006a04:	200003f8 	.word	0x200003f8

08006a08 <BSP_LCD_DisplayChar>:
{
 8006a08:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <BSP_LCD_DisplayChar+0x30>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a12:	009c      	lsls	r4, r3, #2
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <BSP_LCD_DisplayChar+0x34>)
 8006a16:	4423      	add	r3, r4
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	681c      	ldr	r4, [r3, #0]
 8006a1c:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006a20:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a22:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006a26:	889b      	ldrh	r3, [r3, #4]
 8006a28:	3307      	adds	r3, #7
 8006a2a:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a2c:	fb03 4202 	mla	r2, r3, r2, r4
 8006a30:	f7ff ff76 	bl	8006920 <DrawChar>
}
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	200003f4 	.word	0x200003f4
 8006a3c:	200003f8 	.word	0x200003f8

08006a40 <BSP_LCD_DisplayStringAt>:
{
 8006a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a44:	4605      	mov	r5, r0
 8006a46:	4688      	mov	r8, r1
 8006a48:	4616      	mov	r6, r2
 8006a4a:	461f      	mov	r7, r3
  uint8_t  *ptr = Text;
 8006a4c:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 8006a4e:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8006a50:	e001      	b.n	8006a56 <BSP_LCD_DisplayStringAt+0x16>
 8006a52:	3401      	adds	r4, #1
 8006a54:	4613      	mov	r3, r2
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f9      	bne.n	8006a52 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006a5e:	f7ff fe55 	bl	800670c <BSP_LCD_GetXSize>
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <BSP_LCD_DisplayStringAt+0xc8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a6a:	009a      	lsls	r2, r3, #2
 8006a6c:	4b27      	ldr	r3, [pc, #156]	; (8006b0c <BSP_LCD_DisplayStringAt+0xcc>)
 8006a6e:	4413      	add	r3, r2
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	889a      	ldrh	r2, [r3, #4]
 8006a74:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8006a78:	2f01      	cmp	r7, #1
 8006a7a:	d006      	beq.n	8006a8a <BSP_LCD_DisplayStringAt+0x4a>
 8006a7c:	2f02      	cmp	r7, #2
 8006a7e:	d00c      	beq.n	8006a9a <BSP_LCD_DisplayStringAt+0x5a>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006a80:	b22b      	sxth	r3, r5
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dd3d      	ble.n	8006b02 <BSP_LCD_DisplayStringAt+0xc2>
    ref_column = 1;
 8006a86:	2400      	movs	r4, #0
 8006a88:	e021      	b.n	8006ace <BSP_LCD_DisplayStringAt+0x8e>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006a8a:	1b04      	subs	r4, r0, r4
 8006a8c:	fb04 f302 	mul.w	r3, r4, r2
 8006a90:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8006a94:	441d      	add	r5, r3
 8006a96:	b2ad      	uxth	r5, r5
      break;
 8006a98:	e7f2      	b.n	8006a80 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006a9a:	1b03      	subs	r3, r0, r4
 8006a9c:	fb13 f302 	smulbb	r3, r3, r2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	1b5d      	subs	r5, r3, r5
 8006aa4:	b2ad      	uxth	r5, r5
      break;
 8006aa6:	e7eb      	b.n	8006a80 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	4641      	mov	r1, r8
 8006aac:	4628      	mov	r0, r5
 8006aae:	f7ff ffab 	bl	8006a08 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <BSP_LCD_DisplayStringAt+0xc8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006aba:	009a      	lsls	r2, r3, #2
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <BSP_LCD_DisplayStringAt+0xcc>)
 8006abe:	4413      	add	r3, r2
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	889b      	ldrh	r3, [r3, #4]
 8006ac4:	441d      	add	r5, r3
 8006ac6:	b2ad      	uxth	r5, r5
    Text++;
 8006ac8:	3601      	adds	r6, #1
    i++;
 8006aca:	3401      	adds	r4, #1
 8006acc:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006ace:	7837      	ldrb	r7, [r6, #0]
 8006ad0:	f7ff fe1c 	bl	800670c <BSP_LCD_GetXSize>
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <BSP_LCD_DisplayStringAt+0xc8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006adc:	009a      	lsls	r2, r3, #2
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <BSP_LCD_DisplayStringAt+0xcc>)
 8006ae0:	4413      	add	r3, r2
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	fb03 0014 	mls	r0, r3, r4, r0
 8006aea:	b280      	uxth	r0, r0
 8006aec:	4298      	cmp	r0, r3
 8006aee:	bf34      	ite	cc
 8006af0:	2000      	movcc	r0, #0
 8006af2:	2001      	movcs	r0, #1
 8006af4:	2f00      	cmp	r7, #0
 8006af6:	bf08      	it	eq
 8006af8:	2000      	moveq	r0, #0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d1d4      	bne.n	8006aa8 <BSP_LCD_DisplayStringAt+0x68>
}
 8006afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 8006b02:	2501      	movs	r5, #1
 8006b04:	e7bf      	b.n	8006a86 <BSP_LCD_DisplayStringAt+0x46>
 8006b06:	bf00      	nop
 8006b08:	200003f4 	.word	0x200003f4
 8006b0c:	200003f8 	.word	0x200003f8

08006b10 <BSP_LCD_DrawCircle>:
{
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b087      	sub	sp, #28
 8006b16:	4682      	mov	sl, r0
 8006b18:	468b      	mov	fp, r1
  decision = 3 - (Radius << 1);
 8006b1a:	0053      	lsls	r3, r2, #1
 8006b1c:	f1c3 0303 	rsb	r3, r3, #3
 8006b20:	9302      	str	r3, [sp, #8]
  current_y = Radius;
 8006b22:	9201      	str	r2, [sp, #4]
  current_x = 0;
 8006b24:	f04f 0900 	mov.w	r9, #0
  while (current_x <= current_y)
 8006b28:	e005      	b.n	8006b36 <BSP_LCD_DrawCircle+0x26>
      decision += (current_x << 2) + 6;
 8006b2a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006b2e:	3306      	adds	r3, #6
 8006b30:	9302      	str	r3, [sp, #8]
    current_x++;
 8006b32:	f109 0901 	add.w	r9, r9, #1
  while (current_x <= current_y)
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	4599      	cmp	r9, r3
 8006b3a:	d876      	bhi.n	8006c2a <BSP_LCD_DrawCircle+0x11a>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006b3c:	fa1f f489 	uxth.w	r4, r9
 8006b40:	eb04 030a 	add.w	r3, r4, sl
 8006b44:	b298      	uxth	r0, r3
 8006b46:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8006b4a:	ebab 0805 	sub.w	r8, fp, r5
 8006b4e:	fa1f f888 	uxth.w	r8, r8
 8006b52:	4e37      	ldr	r6, [pc, #220]	; (8006c30 <BSP_LCD_DrawCircle+0x120>)
 8006b54:	4f37      	ldr	r7, [pc, #220]	; (8006c34 <BSP_LCD_DrawCircle+0x124>)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b5c:	009a      	lsls	r2, r3, #2
 8006b5e:	58b2      	ldr	r2, [r6, r2]
 8006b60:	4641      	mov	r1, r8
 8006b62:	9003      	str	r0, [sp, #12]
 8006b64:	f7ff feb2 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006b68:	ebaa 0304 	sub.w	r3, sl, r4
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4618      	mov	r0, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b76:	009a      	lsls	r2, r3, #2
 8006b78:	58b2      	ldr	r2, [r6, r2]
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	9004      	str	r0, [sp, #16]
 8006b7e:	f7ff fea5 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006b82:	eb05 030a 	add.w	r3, r5, sl
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4618      	mov	r0, r3
 8006b8a:	ebab 0804 	sub.w	r8, fp, r4
 8006b8e:	fa1f f888 	uxth.w	r8, r8
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b98:	009a      	lsls	r2, r3, #2
 8006b9a:	58b2      	ldr	r2, [r6, r2]
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	9005      	str	r0, [sp, #20]
 8006ba0:	f7ff fe94 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006ba4:	ebaa 0305 	sub.w	r3, sl, r5
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4618      	mov	r0, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bb2:	009a      	lsls	r2, r3, #2
 8006bb4:	58b2      	ldr	r2, [r6, r2]
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	4680      	mov	r8, r0
 8006bba:	f7ff fe87 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006bbe:	445d      	add	r5, fp
 8006bc0:	b2ad      	uxth	r5, r5
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bc8:	009a      	lsls	r2, r3, #2
 8006bca:	58b2      	ldr	r2, [r6, r2]
 8006bcc:	4629      	mov	r1, r5
 8006bce:	9803      	ldr	r0, [sp, #12]
 8006bd0:	f7ff fe7c 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bda:	009a      	lsls	r2, r3, #2
 8006bdc:	58b2      	ldr	r2, [r6, r2]
 8006bde:	4629      	mov	r1, r5
 8006be0:	9804      	ldr	r0, [sp, #16]
 8006be2:	f7ff fe73 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006be6:	445c      	add	r4, fp
 8006be8:	b2a4      	uxth	r4, r4
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bf0:	009a      	lsls	r2, r3, #2
 8006bf2:	58b2      	ldr	r2, [r6, r2]
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	9805      	ldr	r0, [sp, #20]
 8006bf8:	f7ff fe68 	bl	80068cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	58b2      	ldr	r2, [r6, r2]
 8006c06:	4621      	mov	r1, r4
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f7ff fe5f 	bl	80068cc <BSP_LCD_DrawPixel>
    if (decision < 0)
 8006c0e:	9b02      	ldr	r3, [sp, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	db8a      	blt.n	8006b2a <BSP_LCD_DrawCircle+0x1a>
      decision += ((current_x - current_y) << 2) + 10;
 8006c14:	9a01      	ldr	r2, [sp, #4]
 8006c16:	eba9 0302 	sub.w	r3, r9, r2
 8006c1a:	9902      	ldr	r1, [sp, #8]
 8006c1c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006c20:	330a      	adds	r3, #10
 8006c22:	9302      	str	r3, [sp, #8]
      current_y--;
 8006c24:	1e53      	subs	r3, r2, #1
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	e783      	b.n	8006b32 <BSP_LCD_DrawCircle+0x22>
}
 8006c2a:	b007      	add	sp, #28
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c30:	200003f8 	.word	0x200003f8
 8006c34:	200003f4 	.word	0x200003f4

08006c38 <BSP_LCD_FillRect>:
{
 8006c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	4681      	mov	r9, r0
 8006c40:	460e      	mov	r6, r1
 8006c42:	4617      	mov	r7, r2
 8006c44:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006c46:	4c1d      	ldr	r4, [pc, #116]	; (8006cbc <BSP_LCD_FillRect+0x84>)
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c4e:	009a      	lsls	r2, r3, #2
 8006c50:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <BSP_LCD_FillRect+0x88>)
 8006c52:	5898      	ldr	r0, [r3, r2]
 8006c54:	f7ff fdb8 	bl	80067c8 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <BSP_LCD_FillRect+0x8c>)
 8006c5c:	2334      	movs	r3, #52	; 0x34
 8006c5e:	fb03 2304 	mla	r3, r3, r4, r2
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d01d      	beq.n	8006ca4 <BSP_LCD_FillRect+0x6c>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006c68:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <BSP_LCD_FillRect+0x8c>)
 8006c6a:	2334      	movs	r3, #52	; 0x34
 8006c6c:	fb03 2304 	mla	r3, r3, r4, r2
 8006c70:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006c72:	f7ff fd4b 	bl	800670c <BSP_LCD_GetXSize>
 8006c76:	fb00 9006 	mla	r0, r0, r6, r9
 8006c7a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006c7e:	f7ff fd45 	bl	800670c <BSP_LCD_GetXSize>
 8006c82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006c86:	0093      	lsls	r3, r2, #2
 8006c88:	4a0d      	ldr	r2, [pc, #52]	; (8006cc0 <BSP_LCD_FillRect+0x88>)
 8006c8a:	58d3      	ldr	r3, [r2, r3]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	1bc0      	subs	r0, r0, r7
 8006c90:	9000      	str	r0, [sp, #0]
 8006c92:	4643      	mov	r3, r8
 8006c94:	463a      	mov	r2, r7
 8006c96:	4629      	mov	r1, r5
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fcf7 	bl	800668c <LL_FillBuffer>
}
 8006c9e:	b003      	add	sp, #12
 8006ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006ca4:	2334      	movs	r3, #52	; 0x34
 8006ca6:	fb03 2304 	mla	r3, r3, r4, r2
 8006caa:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006cac:	f7ff fd2e 	bl	800670c <BSP_LCD_GetXSize>
 8006cb0:	fb00 9006 	mla	r0, r0, r6, r9
 8006cb4:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8006cb8:	e7e1      	b.n	8006c7e <BSP_LCD_FillRect+0x46>
 8006cba:	bf00      	nop
 8006cbc:	200003f4 	.word	0x200003f4
 8006cc0:	200003f8 	.word	0x200003f8
 8006cc4:	20004508 	.word	0x20004508

08006cc8 <BSP_LCD_FillCircle>:
{
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	4682      	mov	sl, r0
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	4615      	mov	r5, r2
 8006cd4:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 8006cd6:	0056      	lsls	r6, r2, #1
 8006cd8:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006cdc:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <BSP_LCD_FillCircle+0xd0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ce4:	009a      	lsls	r2, r3, #2
 8006ce6:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <BSP_LCD_FillCircle+0xd4>)
 8006ce8:	5898      	ldr	r0, [r3, r2]
 8006cea:	f7ff fd6d 	bl	80067c8 <BSP_LCD_SetTextColor>
  current_x = 0;
 8006cee:	2400      	movs	r4, #0
  while (current_x <= current_y)
 8006cf0:	e033      	b.n	8006d5a <BSP_LCD_FillCircle+0x92>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8006cf2:	b2af      	uxth	r7, r5
 8006cf4:	ebaa 0b07 	sub.w	fp, sl, r7
 8006cf8:	fa1f fb8b 	uxth.w	fp, fp
 8006cfc:	fa1f f884 	uxth.w	r8, r4
 8006d00:	007f      	lsls	r7, r7, #1
 8006d02:	b2bf      	uxth	r7, r7
 8006d04:	eb08 0109 	add.w	r1, r8, r9
 8006d08:	463a      	mov	r2, r7
 8006d0a:	b289      	uxth	r1, r1
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f7ff fda1 	bl	8006854 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006d12:	eba9 0108 	sub.w	r1, r9, r8
 8006d16:	463a      	mov	r2, r7
 8006d18:	b289      	uxth	r1, r1
 8006d1a:	4658      	mov	r0, fp
 8006d1c:	f7ff fd9a 	bl	8006854 <BSP_LCD_DrawHLine>
 8006d20:	e01f      	b.n	8006d62 <BSP_LCD_FillCircle+0x9a>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006d22:	b2a7      	uxth	r7, r4
 8006d24:	ebaa 0b07 	sub.w	fp, sl, r7
 8006d28:	fa1f fb8b 	uxth.w	fp, fp
 8006d2c:	fa1f f885 	uxth.w	r8, r5
 8006d30:	007f      	lsls	r7, r7, #1
 8006d32:	b2bf      	uxth	r7, r7
 8006d34:	eba9 0108 	sub.w	r1, r9, r8
 8006d38:	463a      	mov	r2, r7
 8006d3a:	b289      	uxth	r1, r1
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f7ff fd89 	bl	8006854 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006d42:	eb08 0109 	add.w	r1, r8, r9
 8006d46:	463a      	mov	r2, r7
 8006d48:	b289      	uxth	r1, r1
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f7ff fd82 	bl	8006854 <BSP_LCD_DrawHLine>
 8006d50:	e009      	b.n	8006d66 <BSP_LCD_FillCircle+0x9e>
      decision += (current_x << 2) + 6;
 8006d52:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006d56:	3606      	adds	r6, #6
    current_x++;
 8006d58:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8006d5a:	42ac      	cmp	r4, r5
 8006d5c:	d80b      	bhi.n	8006d76 <BSP_LCD_FillCircle+0xae>
    if(current_y > 0) 
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	d1c7      	bne.n	8006cf2 <BSP_LCD_FillCircle+0x2a>
    if(current_x > 0) 
 8006d62:	2c00      	cmp	r4, #0
 8006d64:	d1dd      	bne.n	8006d22 <BSP_LCD_FillCircle+0x5a>
    if (decision < 0)
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	dbf3      	blt.n	8006d52 <BSP_LCD_FillCircle+0x8a>
      decision += ((current_x - current_y) << 2) + 10;
 8006d6a:	1b63      	subs	r3, r4, r5
 8006d6c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006d70:	360a      	adds	r6, #10
      current_y--;
 8006d72:	3d01      	subs	r5, #1
 8006d74:	e7f0      	b.n	8006d58 <BSP_LCD_FillCircle+0x90>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <BSP_LCD_FillCircle+0xd0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d7e:	009a      	lsls	r2, r3, #2
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <BSP_LCD_FillCircle+0xd4>)
 8006d82:	5898      	ldr	r0, [r3, r2]
 8006d84:	f7ff fd20 	bl	80067c8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006d88:	9a01      	ldr	r2, [sp, #4]
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4650      	mov	r0, sl
 8006d8e:	f7ff febf 	bl	8006b10 <BSP_LCD_DrawCircle>
}
 8006d92:	b003      	add	sp, #12
 8006d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	200003f4 	.word	0x200003f4
 8006d9c:	200003f8 	.word	0x200003f8

08006da0 <BSP_LCD_DisplayOn>:
{
 8006da0:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <BSP_LCD_DisplayOn+0x28>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	6993      	ldr	r3, [r2, #24]
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006dae:	2201      	movs	r2, #1
 8006db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006db4:	4805      	ldr	r0, [pc, #20]	; (8006dcc <BSP_LCD_DisplayOn+0x2c>)
 8006db6:	f7fc fb28 	bl	800340a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006dba:	2201      	movs	r2, #1
 8006dbc:	2108      	movs	r1, #8
 8006dbe:	4804      	ldr	r0, [pc, #16]	; (8006dd0 <BSP_LCD_DisplayOn+0x30>)
 8006dc0:	f7fc fb23 	bl	800340a <HAL_GPIO_WritePin>
}
 8006dc4:	bd08      	pop	{r3, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20004508 	.word	0x20004508
 8006dcc:	40022000 	.word	0x40022000
 8006dd0:	40022800 	.word	0x40022800

08006dd4 <BSP_LCD_MspInit>:
{
 8006dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dd6:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006dd8:	4b4a      	ldr	r3, [pc, #296]	; (8006f04 <BSP_LCD_MspInit+0x130>)
 8006dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ddc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44
 8006de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006de8:	9200      	str	r2, [sp, #0]
 8006dea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
 8006df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e00:	f042 0210 	orr.w	r2, r2, #16
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
 8006e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e08:	f002 0210 	and.w	r2, r2, #16
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
 8006e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006e1e:	9203      	str	r2, [sp, #12]
 8006e20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
 8006e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e2c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006e30:	9204      	str	r2, [sp, #16]
 8006e32:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006e42:	9205      	str	r2, [sp, #20]
 8006e44:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e50:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006e54:	9206      	str	r2, [sp, #24]
 8006e56:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e62:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006e66:	9207      	str	r2, [sp, #28]
 8006e68:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006e80:	2402      	movs	r4, #2
 8006e82:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006e88:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006e8a:	250e      	movs	r5, #14
 8006e8c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006e8e:	a909      	add	r1, sp, #36	; 0x24
 8006e90:	481d      	ldr	r0, [pc, #116]	; (8006f08 <BSP_LCD_MspInit+0x134>)
 8006e92:	f7fc f9c3 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006e96:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8006e9a:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006e9c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006e9e:	2309      	movs	r3, #9
 8006ea0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006ea2:	a909      	add	r1, sp, #36	; 0x24
 8006ea4:	4819      	ldr	r0, [pc, #100]	; (8006f0c <BSP_LCD_MspInit+0x138>)
 8006ea6:	f7fc f9b9 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006eaa:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006eb0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006eb2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006eb4:	4e16      	ldr	r6, [pc, #88]	; (8006f10 <BSP_LCD_MspInit+0x13c>)
 8006eb6:	a909      	add	r1, sp, #36	; 0x24
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7fc f9af 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006ebe:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006ec2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ec4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006ec6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006ec8:	a909      	add	r1, sp, #36	; 0x24
 8006eca:	4812      	ldr	r0, [pc, #72]	; (8006f14 <BSP_LCD_MspInit+0x140>)
 8006ecc:	f7fc f9a6 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006ed0:	23f7      	movs	r3, #247	; 0xf7
 8006ed2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ed4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006ed6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006ed8:	4c0f      	ldr	r4, [pc, #60]	; (8006f18 <BSP_LCD_MspInit+0x144>)
 8006eda:	a909      	add	r1, sp, #36	; 0x24
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7fc f99d 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006ee2:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ee4:	2501      	movs	r5, #1
 8006ee6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006ee8:	a909      	add	r1, sp, #36	; 0x24
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7fc f996 	bl	800321c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ef4:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006ef6:	a909      	add	r1, sp, #36	; 0x24
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7fc f98f 	bl	800321c <HAL_GPIO_Init>
}
 8006efe:	b00f      	add	sp, #60	; 0x3c
 8006f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40021800 	.word	0x40021800
 8006f10:	40022000 	.word	0x40022000
 8006f14:	40022400 	.word	0x40022400
 8006f18:	40022800 	.word	0x40022800

08006f1c <BSP_LCD_ClockConfig>:
{
 8006f1c:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006f1e:	4806      	ldr	r0, [pc, #24]	; (8006f38 <BSP_LCD_ClockConfig+0x1c>)
 8006f20:	2308      	movs	r3, #8
 8006f22:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006f24:	23c0      	movs	r3, #192	; 0xc0
 8006f26:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006f28:	2305      	movs	r3, #5
 8006f2a:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f30:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006f32:	f7fd fb69 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
}
 8006f36:	bd08      	pop	{r3, pc}
 8006f38:	20000450 	.word	0x20000450

08006f3c <BSP_LCD_Init>:
{    
 8006f3c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006f3e:	4c25      	ldr	r4, [pc, #148]	; (8006fd4 <BSP_LCD_Init+0x98>)
 8006f40:	2328      	movs	r3, #40	; 0x28
 8006f42:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006f44:	2309      	movs	r3, #9
 8006f46:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006f48:	2335      	movs	r3, #53	; 0x35
 8006f4a:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006f4c:	230b      	movs	r3, #11
 8006f4e:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006f50:	f240 131b 	movw	r3, #283	; 0x11b
 8006f54:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006f56:	f240 2315 	movw	r3, #533	; 0x215
 8006f5a:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006f5c:	f240 131d 	movw	r3, #285	; 0x11d
 8006f60:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006f62:	f240 2335 	movw	r3, #565	; 0x235
 8006f66:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff ffd6 	bl	8006f1c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006f70:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f74:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006f76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f7a:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006f82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006f86:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006f8a:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006f8c:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006f8e:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006f90:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8006f92:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <BSP_LCD_Init+0x9c>)
 8006f94:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7fc ffc0 	bl	8003f1c <HAL_LTDC_GetState>
 8006f9c:	b1a0      	cbz	r0, 8006fc8 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 8006f9e:	480d      	ldr	r0, [pc, #52]	; (8006fd4 <BSP_LCD_Init+0x98>)
 8006fa0:	f7fc fea4 	bl	8003cec <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006faa:	480c      	ldr	r0, [pc, #48]	; (8006fdc <BSP_LCD_Init+0xa0>)
 8006fac:	f7fc fa2d 	bl	800340a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	2108      	movs	r1, #8
 8006fb4:	480a      	ldr	r0, [pc, #40]	; (8006fe0 <BSP_LCD_Init+0xa4>)
 8006fb6:	f7fc fa28 	bl	800340a <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8006fba:	f000 f921 	bl	8007200 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006fbe:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <BSP_LCD_Init+0xa8>)
 8006fc0:	f7ff fc1c 	bl	80067fc <BSP_LCD_SetFont>
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff ff02 	bl	8006dd4 <BSP_LCD_MspInit>
 8006fd0:	e7e5      	b.n	8006f9e <BSP_LCD_Init+0x62>
 8006fd2:	bf00      	nop
 8006fd4:	20004508 	.word	0x20004508
 8006fd8:	40016800 	.word	0x40016800
 8006fdc:	40022000 	.word	0x40022000
 8006fe0:	40022800 	.word	0x40022800
 8006fe4:	20000014 	.word	0x20000014

08006fe8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fec:	b083      	sub	sp, #12
 8006fee:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8006ff0:	f04f 0800 	mov.w	r8, #0
 8006ff4:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006ff8:	4c20      	ldr	r4, [pc, #128]	; (800707c <BSP_SDRAM_Initialization_sequence+0x94>)
 8006ffa:	2601      	movs	r6, #1
 8006ffc:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ffe:	2710      	movs	r7, #16
 8007000:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8007002:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8007004:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007008:	4d1d      	ldr	r5, [pc, #116]	; (8007080 <BSP_SDRAM_Initialization_sequence+0x98>)
 800700a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f7fd fdee 	bl	8004bf2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007016:	4630      	mov	r0, r6
 8007018:	f7fb f87e 	bl	8002118 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800701c:	2302      	movs	r3, #2
 800701e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007020:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8007022:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8007024:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f7fd fddf 	bl	8004bf2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007034:	2303      	movs	r3, #3
 8007036:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007038:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800703a:	2308      	movs	r3, #8
 800703c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800703e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f7fd fdd2 	bl	8004bf2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800704e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8007052:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007054:	2304      	movs	r3, #4
 8007056:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007058:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800705a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f7fd fdc3 	bl	8004bf2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800706c:	4649      	mov	r1, r9
 800706e:	4628      	mov	r0, r5
 8007070:	f7fd fddc 	bl	8004c2c <HAL_SDRAM_ProgramRefreshRate>
}
 8007074:	b003      	add	sp, #12
 8007076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800707a:	bf00      	nop
 800707c:	200004d4 	.word	0x200004d4
 8007080:	200045b0 	.word	0x200045b0

08007084 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	b08e      	sub	sp, #56	; 0x38
 8007088:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800708a:	4b54      	ldr	r3, [pc, #336]	; (80071dc <BSP_SDRAM_MspInit+0x158>)
 800708c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
 8007094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007096:	f002 0201 	and.w	r2, r2, #1
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800709e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
 80070a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80070ac:	9202      	str	r2, [sp, #8]
 80070ae:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b2:	f042 0204 	orr.w	r2, r2, #4
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
 80070b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ba:	f002 0204 	and.w	r2, r2, #4
 80070be:	9203      	str	r2, [sp, #12]
 80070c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c4:	f042 0208 	orr.w	r2, r2, #8
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	f002 0208 	and.w	r2, r2, #8
 80070d0:	9204      	str	r2, [sp, #16]
 80070d2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80070d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d6:	f042 0210 	orr.w	r2, r2, #16
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
 80070dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070de:	f002 0210 	and.w	r2, r2, #16
 80070e2:	9205      	str	r2, [sp, #20]
 80070e4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e8:	f042 0220 	orr.w	r2, r2, #32
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
 80070ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f0:	f002 0220 	and.w	r2, r2, #32
 80070f4:	9206      	str	r2, [sp, #24]
 80070f6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80070f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007102:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007106:	9207      	str	r2, [sp, #28]
 8007108:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800711c:	2302      	movs	r3, #2
 800711e:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007120:	2201      	movs	r2, #1
 8007122:	920b      	str	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007124:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007126:	230c      	movs	r3, #12
 8007128:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800712a:	ac0e      	add	r4, sp, #56	; 0x38
 800712c:	2308      	movs	r3, #8
 800712e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007132:	4621      	mov	r1, r4
 8007134:	482a      	ldr	r0, [pc, #168]	; (80071e0 <BSP_SDRAM_MspInit+0x15c>)
 8007136:	f7fc f871 	bl	800321c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800713a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800713e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007140:	4621      	mov	r1, r4
 8007142:	4828      	ldr	r0, [pc, #160]	; (80071e4 <BSP_SDRAM_MspInit+0x160>)
 8007144:	f7fc f86a 	bl	800321c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007148:	f64f 7383 	movw	r3, #65411	; 0xff83
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800714e:	4621      	mov	r1, r4
 8007150:	4825      	ldr	r0, [pc, #148]	; (80071e8 <BSP_SDRAM_MspInit+0x164>)
 8007152:	f7fc f863 	bl	800321c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007156:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800715c:	4621      	mov	r1, r4
 800715e:	4823      	ldr	r0, [pc, #140]	; (80071ec <BSP_SDRAM_MspInit+0x168>)
 8007160:	f7fc f85c 	bl	800321c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007164:	f248 1333 	movw	r3, #33075	; 0x8133
 8007168:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800716a:	4621      	mov	r1, r4
 800716c:	4820      	ldr	r0, [pc, #128]	; (80071f0 <BSP_SDRAM_MspInit+0x16c>)
 800716e:	f7fc f855 	bl	800321c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007172:	2328      	movs	r3, #40	; 0x28
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007176:	4621      	mov	r1, r4
 8007178:	481e      	ldr	r0, [pc, #120]	; (80071f4 <BSP_SDRAM_MspInit+0x170>)
 800717a:	f7fc f84f 	bl	800321c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800717e:	4c1e      	ldr	r4, [pc, #120]	; (80071f8 <BSP_SDRAM_MspInit+0x174>)
 8007180:	2500      	movs	r5, #0
 8007182:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800718c:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800718e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007192:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007198:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800719a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800719e:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80071a0:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80071a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071a6:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80071a8:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80071ae:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80071b0:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <BSP_SDRAM_MspInit+0x178>)
 80071b4:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80071b6:	6334      	str	r4, [r6, #48]	; 0x30
 80071b8:	63a6      	str	r6, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7fb fd40 	bl	8002c40 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80071c0:	4620      	mov	r0, r4
 80071c2:	f7fb fcd7 	bl	8002b74 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80071c6:	462a      	mov	r2, r5
 80071c8:	210f      	movs	r1, #15
 80071ca:	2038      	movs	r0, #56	; 0x38
 80071cc:	f7fb fba2 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80071d0:	2038      	movs	r0, #56	; 0x38
 80071d2:	f7fb fbd1 	bl	8002978 <HAL_NVIC_EnableIRQ>
}
 80071d6:	b00e      	add	sp, #56	; 0x38
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	bf00      	nop
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020800 	.word	0x40020800
 80071e4:	40020c00 	.word	0x40020c00
 80071e8:	40021000 	.word	0x40021000
 80071ec:	40021400 	.word	0x40021400
 80071f0:	40021800 	.word	0x40021800
 80071f4:	40021c00 	.word	0x40021c00
 80071f8:	20000500 	.word	0x20000500
 80071fc:	40026410 	.word	0x40026410

08007200 <BSP_SDRAM_Init>:
{ 
 8007200:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007202:	4c1b      	ldr	r4, [pc, #108]	; (8007270 <BSP_SDRAM_Init+0x70>)
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <BSP_SDRAM_Init+0x74>)
 8007206:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8007208:	4d1b      	ldr	r5, [pc, #108]	; (8007278 <BSP_SDRAM_Init+0x78>)
 800720a:	2302      	movs	r3, #2
 800720c:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800720e:	2107      	movs	r1, #7
 8007210:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 8007212:	2204      	movs	r2, #4
 8007214:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 8007216:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 8007218:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800721a:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800721c:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800721e:	2100      	movs	r1, #0
 8007220:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007222:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007224:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007226:	2310      	movs	r3, #16
 8007228:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800722a:	2340      	movs	r3, #64	; 0x40
 800722c:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800722e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007232:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007234:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800723a:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800723c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007240:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007242:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007244:	4620      	mov	r0, r4
 8007246:	f7ff ff1d 	bl	8007084 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800724a:	4629      	mov	r1, r5
 800724c:	4620      	mov	r0, r4
 800724e:	f7fd fcb1 	bl	8004bb4 <HAL_SDRAM_Init>
 8007252:	b948      	cbnz	r0, 8007268 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_OK;
 8007254:	4b09      	ldr	r3, [pc, #36]	; (800727c <BSP_SDRAM_Init+0x7c>)
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800725a:	f240 6003 	movw	r0, #1539	; 0x603
 800725e:	f7ff fec3 	bl	8006fe8 <BSP_SDRAM_Initialization_sequence>
}
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <BSP_SDRAM_Init+0x7c>)
 8007264:	7818      	ldrb	r0, [r3, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_ERROR;
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <BSP_SDRAM_Init+0x7c>)
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	e7f4      	b.n	800725a <BSP_SDRAM_Init+0x5a>
 8007270:	200045b0 	.word	0x200045b0
 8007274:	a0000140 	.word	0xa0000140
 8007278:	200004e4 	.word	0x200004e4
 800727c:	20000044 	.word	0x20000044

08007280 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007280:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <BSP_TS_Init+0x38>)
 8007284:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <BSP_TS_Init+0x3c>)
 8007288:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800728a:	4c0d      	ldr	r4, [pc, #52]	; (80072c0 <BSP_TS_Init+0x40>)
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	2070      	movs	r0, #112	; 0x70
 8007290:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	2070      	movs	r0, #112	; 0x70
 8007296:	4798      	blx	r3
 8007298:	2851      	cmp	r0, #81	; 0x51
 800729a:	d10b      	bne.n	80072b4 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <BSP_TS_Init+0x44>)
 800729e:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80072a0:	2070      	movs	r0, #112	; 0x70
 80072a2:	4a09      	ldr	r2, [pc, #36]	; (80072c8 <BSP_TS_Init+0x48>)
 80072a4:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 80072a6:	4a09      	ldr	r2, [pc, #36]	; (80072cc <BSP_TS_Init+0x4c>)
 80072a8:	2108      	movs	r1, #8
 80072aa:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80072ac:	68e3      	ldr	r3, [r4, #12]
 80072ae:	4798      	blx	r3
  uint8_t status = TS_OK;
 80072b0:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80072b2:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 80072b4:	2003      	movs	r0, #3
 80072b6:	e7fc      	b.n	80072b2 <BSP_TS_Init+0x32>
 80072b8:	20000592 	.word	0x20000592
 80072bc:	20000594 	.word	0x20000594
 80072c0:	2000001c 	.word	0x2000001c
 80072c4:	2000058c 	.word	0x2000058c
 80072c8:	20000560 	.word	0x20000560
 80072cc:	20000590 	.word	0x20000590

080072d0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80072d0:	b510      	push	{r4, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 80072d6:	a902      	add	r1, sp, #8
 80072d8:	2300      	movs	r3, #0
 80072da:	f841 3d04 	str.w	r3, [r1, #-4]!
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80072de:	4b18      	ldr	r3, [pc, #96]	; (8007340 <BSP_TS_Get_GestureId+0x70>)
 80072e0:	7818      	ldrb	r0, [r3, #0]
 80072e2:	f7ff f829 	bl	8006338 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	2b18      	cmp	r3, #24
 80072ea:	d01d      	beq.n	8007328 <BSP_TS_Get_GestureId+0x58>
 80072ec:	d806      	bhi.n	80072fc <BSP_TS_Get_GestureId+0x2c>
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d012      	beq.n	8007318 <BSP_TS_Get_GestureId+0x48>
 80072f2:	2b14      	cmp	r3, #20
 80072f4:	d014      	beq.n	8007320 <BSP_TS_Get_GestureId+0x50>
 80072f6:	b15b      	cbz	r3, 8007310 <BSP_TS_Get_GestureId+0x40>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 80072f8:	2001      	movs	r0, #1
 80072fa:	e00b      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
  switch(gestureId)
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	d017      	beq.n	8007330 <BSP_TS_Get_GestureId+0x60>
 8007300:	2b49      	cmp	r3, #73	; 0x49
 8007302:	d019      	beq.n	8007338 <BSP_TS_Get_GestureId+0x68>
 8007304:	2b1c      	cmp	r3, #28
 8007306:	d1f7      	bne.n	80072f8 <BSP_TS_Get_GestureId+0x28>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007308:	2304      	movs	r3, #4
 800730a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 800730c:	2000      	movs	r0, #0
      break;
 800730e:	e001      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007310:	2000      	movs	r0, #0
 8007312:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8007314:	b002      	add	sp, #8
 8007316:	bd10      	pop	{r4, pc}
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007318:	2301      	movs	r3, #1
 800731a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 800731c:	2000      	movs	r0, #0
      break;
 800731e:	e7f9      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8007320:	2302      	movs	r3, #2
 8007322:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8007324:	2000      	movs	r0, #0
      break;
 8007326:	e7f5      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007328:	2303      	movs	r3, #3
 800732a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 800732c:	2000      	movs	r0, #0
      break;
 800732e:	e7f1      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007330:	2305      	movs	r3, #5
 8007332:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8007334:	2000      	movs	r0, #0
      break;
 8007336:	e7ed      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8007338:	2306      	movs	r3, #6
 800733a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 800733c:	2000      	movs	r0, #0
      break;
 800733e:	e7e9      	b.n	8007314 <BSP_TS_Get_GestureId+0x44>
 8007340:	20000560 	.word	0x20000560

08007344 <BSP_TS_GetState>:
{
 8007344:	b530      	push	{r4, r5, lr}
 8007346:	b093      	sub	sp, #76	; 0x4c
 8007348:	4605      	mov	r5, r0
  uint32_t weight = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 800734e:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 8007350:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007352:	4b69      	ldr	r3, [pc, #420]	; (80074f8 <BSP_TS_GetState+0x1b4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4a68      	ldr	r2, [pc, #416]	; (80074fc <BSP_TS_GetState+0x1b8>)
 800735a:	7810      	ldrb	r0, [r2, #0]
 800735c:	4798      	blx	r3
 800735e:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8007360:	2800      	cmp	r0, #0
 8007362:	f000 80c6 	beq.w	80074f2 <BSP_TS_GetState+0x1ae>
    for(index=0; index < TS_State->touchDetected; index++)
 8007366:	2400      	movs	r4, #0
 8007368:	e01f      	b.n	80073aa <BSP_TS_GetState+0x66>
        x[index] = brute_x[index];
 800736a:	aa12      	add	r2, sp, #72	; 0x48
 800736c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8007370:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 8007374:	f822 1c0c 	strh.w	r1, [r2, #-12]
        y[index] = brute_y[index];
 8007378:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 800737c:	f822 1c18 	strh.w	r1, [r2, #-24]
 8007380:	e026      	b.n	80073d0 <BSP_TS_GetState+0x8c>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007382:	b29b      	uxth	r3, r3
 8007384:	1a5b      	subs	r3, r3, r1
 8007386:	b29b      	uxth	r3, r3
 8007388:	e055      	b.n	8007436 <BSP_TS_GetState+0xf2>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800738a:	b292      	uxth	r2, r2
 800738c:	1a12      	subs	r2, r2, r0
 800738e:	b292      	uxth	r2, r2
 8007390:	e05e      	b.n	8007450 <BSP_TS_GetState+0x10c>
        TS_State->touchX[index] = x[index];
 8007392:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8007396:	8059      	strh	r1, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007398:	1d23      	adds	r3, r4, #4
 800739a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800739e:	8098      	strh	r0, [r3, #4]
 80073a0:	e07a      	b.n	8007498 <BSP_TS_GetState+0x154>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80073a2:	192b      	adds	r3, r5, r4
 80073a4:	2201      	movs	r2, #1
 80073a6:	76da      	strb	r2, [r3, #27]
    for(index=0; index < TS_State->touchDetected; index++)
 80073a8:	3401      	adds	r4, #1
 80073aa:	782b      	ldrb	r3, [r5, #0]
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	f240 809d 	bls.w	80074ec <BSP_TS_GetState+0x1a8>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80073b2:	4b51      	ldr	r3, [pc, #324]	; (80074f8 <BSP_TS_GetState+0x1b4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	0061      	lsls	r1, r4, #1
 80073ba:	aa06      	add	r2, sp, #24
 80073bc:	440a      	add	r2, r1
 80073be:	a809      	add	r0, sp, #36	; 0x24
 80073c0:	4401      	add	r1, r0
 80073c2:	484e      	ldr	r0, [pc, #312]	; (80074fc <BSP_TS_GetState+0x1b8>)
 80073c4:	7800      	ldrb	r0, [r0, #0]
 80073c6:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 80073c8:	4b4d      	ldr	r3, [pc, #308]	; (8007500 <BSP_TS_GetState+0x1bc>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d0cc      	beq.n	800736a <BSP_TS_GetState+0x26>
      if(tsOrientation & TS_SWAP_X)
 80073d0:	f013 0f02 	tst.w	r3, #2
 80073d4:	d008      	beq.n	80073e8 <BSP_TS_GetState+0xa4>
        x[index] = 4096 - brute_x[index];
 80073d6:	aa12      	add	r2, sp, #72	; 0x48
 80073d8:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 80073dc:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 80073e0:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80073e4:	f821 2c0c 	strh.w	r2, [r1, #-12]
      if(tsOrientation & TS_SWAP_Y)
 80073e8:	f013 0f04 	tst.w	r3, #4
 80073ec:	d008      	beq.n	8007400 <BSP_TS_GetState+0xbc>
        y[index] = 4096 - brute_y[index];
 80073ee:	aa12      	add	r2, sp, #72	; 0x48
 80073f0:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 80073f4:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 80073f8:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80073fc:	f821 2c18 	strh.w	r2, [r1, #-24]
      if(tsOrientation & TS_SWAP_XY)
 8007400:	f013 0f08 	tst.w	r3, #8
 8007404:	d00a      	beq.n	800741c <BSP_TS_GetState+0xd8>
        y[index] = brute_x[index];
 8007406:	ab12      	add	r3, sp, #72	; 0x48
 8007408:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800740c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007410:	f823 2c18 	strh.w	r2, [r3, #-24]
        x[index] = brute_y[index];
 8007414:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007418:	f823 2c0c 	strh.w	r2, [r3, #-12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800741c:	ab12      	add	r3, sp, #72	; 0x48
 800741e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8007422:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8007426:	4b37      	ldr	r3, [pc, #220]	; (8007504 <BSP_TS_GetState+0x1c0>)
 8007428:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800742c:	4299      	cmp	r1, r3
 800742e:	d9a8      	bls.n	8007382 <BSP_TS_GetState+0x3e>
 8007430:	b29b      	uxth	r3, r3
 8007432:	1acb      	subs	r3, r1, r3
 8007434:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007436:	aa12      	add	r2, sp, #72	; 0x48
 8007438:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800743c:	f832 0c18 	ldrh.w	r0, [r2, #-24]
 8007440:	4a31      	ldr	r2, [pc, #196]	; (8007508 <BSP_TS_GetState+0x1c4>)
 8007442:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007446:	4290      	cmp	r0, r2
 8007448:	d99f      	bls.n	800738a <BSP_TS_GetState+0x46>
 800744a:	b292      	uxth	r2, r2
 800744c:	1a82      	subs	r2, r0, r2
 800744e:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8007450:	4413      	add	r3, r2
 8007452:	2b05      	cmp	r3, #5
 8007454:	dd05      	ble.n	8007462 <BSP_TS_GetState+0x11e>
        _x[index] = x[index];
 8007456:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <BSP_TS_GetState+0x1c0>)
 8007458:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _y[index] = y[index];
 800745c:	4b2a      	ldr	r3, [pc, #168]	; (8007508 <BSP_TS_GetState+0x1c4>)
 800745e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007462:	4b26      	ldr	r3, [pc, #152]	; (80074fc <BSP_TS_GetState+0x1b8>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b70      	cmp	r3, #112	; 0x70
 8007468:	d093      	beq.n	8007392 <BSP_TS_GetState+0x4e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800746a:	4b26      	ldr	r3, [pc, #152]	; (8007504 <BSP_TS_GetState+0x1c0>)
 800746c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007470:	4a26      	ldr	r2, [pc, #152]	; (800750c <BSP_TS_GetState+0x1c8>)
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	fb03 f302 	mul.w	r3, r3, r2
 8007478:	0b1b      	lsrs	r3, r3, #12
 800747a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800747e:	8053      	strh	r3, [r2, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007480:	4b21      	ldr	r3, [pc, #132]	; (8007508 <BSP_TS_GetState+0x1c4>)
 8007482:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007486:	4a22      	ldr	r2, [pc, #136]	; (8007510 <BSP_TS_GetState+0x1cc>)
 8007488:	8812      	ldrh	r2, [r2, #0]
 800748a:	fb03 f302 	mul.w	r3, r3, r2
 800748e:	0b1b      	lsrs	r3, r3, #12
 8007490:	1d22      	adds	r2, r4, #4
 8007492:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8007496:	8093      	strh	r3, [r2, #4]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007498:	4b18      	ldr	r3, [pc, #96]	; (80074fc <BSP_TS_GetState+0x1b8>)
 800749a:	7818      	ldrb	r0, [r3, #0]
 800749c:	ab03      	add	r3, sp, #12
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	ab04      	add	r3, sp, #16
 80074a2:	aa05      	add	r2, sp, #20
 80074a4:	4621      	mov	r1, r4
 80074a6:	f7fe ff59 	bl	800635c <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80074aa:	192b      	adds	r3, r5, r4
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	759a      	strb	r2, [r3, #22]
      TS_State->touchArea[index]   = area;
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	f883 2020 	strb.w	r2, [r3, #32]
      switch(event)
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	f63f af75 	bhi.w	80073a8 <BSP_TS_GetState+0x64>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <BSP_TS_GetState+0x180>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080073a3 	.word	0x080073a3
 80074c8:	080074d5 	.word	0x080074d5
 80074cc:	080074dd 	.word	0x080074dd
 80074d0:	080074e5 	.word	0x080074e5
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80074d4:	192b      	adds	r3, r5, r4
 80074d6:	2202      	movs	r2, #2
 80074d8:	76da      	strb	r2, [r3, #27]
          break;
 80074da:	e765      	b.n	80073a8 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80074dc:	192b      	adds	r3, r5, r4
 80074de:	2203      	movs	r2, #3
 80074e0:	76da      	strb	r2, [r3, #27]
          break;
 80074e2:	e761      	b.n	80073a8 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80074e4:	192b      	adds	r3, r5, r4
 80074e6:	2200      	movs	r2, #0
 80074e8:	76da      	strb	r2, [r3, #27]
          break;
 80074ea:	e75d      	b.n	80073a8 <BSP_TS_GetState+0x64>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7ff feef 	bl	80072d0 <BSP_TS_Get_GestureId>
}
 80074f2:	b013      	add	sp, #76	; 0x4c
 80074f4:	bd30      	pop	{r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	2000058c 	.word	0x2000058c
 80074fc:	20000560 	.word	0x20000560
 8007500:	20000590 	.word	0x20000590
 8007504:	20000564 	.word	0x20000564
 8007508:	20000578 	.word	0x20000578
 800750c:	20000592 	.word	0x20000592
 8007510:	20000594 	.word	0x20000594

08007514 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007514:	2884      	cmp	r0, #132	; 0x84
 8007516:	d001      	beq.n	800751c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007518:	3003      	adds	r0, #3
 800751a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800751c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800751e:	4770      	bx	lr

08007520 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007520:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007522:	f000 fcd9 	bl	8007ed8 <vTaskStartScheduler>
  
  return osOK;
}
 8007526:	2000      	movs	r0, #0
 8007528:	bd08      	pop	{r3, pc}

0800752a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800752a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752c:	b085      	sub	sp, #20
 800752e:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007530:	6844      	ldr	r4, [r0, #4]
 8007532:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007534:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007536:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800753a:	f7ff ffeb 	bl	8007514 <makeFreeRtosPriority>
 800753e:	ab03      	add	r3, sp, #12
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	9000      	str	r0, [sp, #0]
 8007544:	463b      	mov	r3, r7
 8007546:	b2b2      	uxth	r2, r6
 8007548:	4629      	mov	r1, r5
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fc92 	bl	8007e74 <xTaskCreate>
 8007550:	2801      	cmp	r0, #1
 8007552:	d102      	bne.n	800755a <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007554:	9803      	ldr	r0, [sp, #12]
}
 8007556:	b005      	add	sp, #20
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800755a:	2000      	movs	r0, #0
 800755c:	e7fb      	b.n	8007556 <osThreadCreate+0x2c>

0800755e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800755e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007560:	4603      	mov	r3, r0
 8007562:	b900      	cbnz	r0, 8007566 <osDelay+0x8>
 8007564:	2301      	movs	r3, #1
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fe0a 	bl	8008180 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800756c:	2000      	movs	r0, #0
 800756e:	bd08      	pop	{r3, pc}

08007570 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007570:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007572:	2001      	movs	r0, #1
 8007574:	f000 fa2a 	bl	80079cc <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8007578:	bd08      	pop	{r3, pc}

0800757a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800757a:	f100 0308 	add.w	r3, r0, #8
 800757e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007584:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007586:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007588:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800758e:	4770      	bx	lr

08007590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007594:	4770      	bx	lr

08007596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007596:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007598:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80075a6:	6803      	ldr	r3, [r0, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	6003      	str	r3, [r0, #0]
}
 80075ac:	4770      	bx	lr

080075ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ae:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075b0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075b2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80075b6:	d002      	beq.n	80075be <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b8:	f100 0208 	add.w	r2, r0, #8
 80075bc:	e002      	b.n	80075c4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80075be:	6902      	ldr	r2, [r0, #16]
 80075c0:	e004      	b.n	80075cc <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075c2:	461a      	mov	r2, r3
 80075c4:	6853      	ldr	r3, [r2, #4]
 80075c6:	681c      	ldr	r4, [r3, #0]
 80075c8:	42ac      	cmp	r4, r5
 80075ca:	d9fa      	bls.n	80075c2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075cc:	6853      	ldr	r3, [r2, #4]
 80075ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075d0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075d2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80075d4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80075d8:	6803      	ldr	r3, [r0, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	6003      	str	r3, [r0, #0]
}
 80075de:	bc30      	pop	{r4, r5}
 80075e0:	4770      	bx	lr

080075e2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075e2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075e4:	6842      	ldr	r2, [r0, #4]
 80075e6:	6881      	ldr	r1, [r0, #8]
 80075e8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075ea:	6882      	ldr	r2, [r0, #8]
 80075ec:	6841      	ldr	r1, [r0, #4]
 80075ee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	4282      	cmp	r2, r0
 80075f4:	d006      	beq.n	8007604 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075f6:	2200      	movs	r2, #0
 80075f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	3a01      	subs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007600:	6818      	ldr	r0, [r3, #0]
}
 8007602:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007604:	6882      	ldr	r2, [r0, #8]
 8007606:	605a      	str	r2, [r3, #4]
 8007608:	e7f5      	b.n	80075f6 <uxListRemove+0x14>

0800760a <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800760a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800760c:	b123      	cbz	r3, 8007618 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800760e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	f1c0 0007 	rsb	r0, r0, #7
 8007616:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007618:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800761a:	4770      	bx	lr

0800761c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800761c:	b510      	push	{r4, lr}
 800761e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007620:	f001 f880 	bl	8008724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007624:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007628:	429a      	cmp	r2, r3
 800762a:	d004      	beq.n	8007636 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800762c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800762e:	f001 f89f 	bl	8008770 <vPortExitCritical>

	return xReturn;
}
 8007632:	4620      	mov	r0, r4
 8007634:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007636:	2401      	movs	r4, #1
 8007638:	e7f9      	b.n	800762e <prvIsQueueFull+0x12>

0800763a <prvIsQueueEmpty>:
{
 800763a:	b510      	push	{r4, lr}
 800763c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800763e:	f001 f871 	bl	8008724 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007644:	b123      	cbz	r3, 8007650 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007646:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007648:	f001 f892 	bl	8008770 <vPortExitCritical>
}
 800764c:	4620      	mov	r0, r4
 800764e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007650:	2401      	movs	r4, #1
 8007652:	e7f9      	b.n	8007648 <prvIsQueueEmpty+0xe>

08007654 <prvCopyDataToQueue>:
{
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800765a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800765c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800765e:	b95a      	cbnz	r2, 8007678 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007660:	6803      	ldr	r3, [r0, #0]
 8007662:	b11b      	cbz	r3, 800766c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007664:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007666:	3501      	adds	r5, #1
 8007668:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800766a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800766c:	6840      	ldr	r0, [r0, #4]
 800766e:	f000 ff21 	bl	80084b4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	e7f6      	b.n	8007666 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007678:	b96e      	cbnz	r6, 8007696 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800767a:	6880      	ldr	r0, [r0, #8]
 800767c:	f002 fe10 	bl	800a2a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007680:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	4413      	add	r3, r2
 8007686:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007688:	6862      	ldr	r2, [r4, #4]
 800768a:	4293      	cmp	r3, r2
 800768c:	d319      	bcc.n	80076c2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007692:	2000      	movs	r0, #0
 8007694:	e7e7      	b.n	8007666 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007696:	68c0      	ldr	r0, [r0, #12]
 8007698:	f002 fe02 	bl	800a2a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800769c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800769e:	4252      	negs	r2, r2
 80076a0:	68e3      	ldr	r3, [r4, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d202      	bcs.n	80076b2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	441a      	add	r2, r3
 80076b0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80076b2:	2e02      	cmp	r6, #2
 80076b4:	d001      	beq.n	80076ba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80076b6:	2000      	movs	r0, #0
 80076b8:	e7d5      	b.n	8007666 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ba:	b125      	cbz	r5, 80076c6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80076bc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80076be:	2000      	movs	r0, #0
 80076c0:	e7d1      	b.n	8007666 <prvCopyDataToQueue+0x12>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e7cf      	b.n	8007666 <prvCopyDataToQueue+0x12>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7cd      	b.n	8007666 <prvCopyDataToQueue+0x12>

080076ca <prvUnlockQueue>:
{
 80076ca:	b538      	push	{r3, r4, r5, lr}
 80076cc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80076ce:	f001 f829 	bl	8008724 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80076d2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80076d6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d8:	e003      	b.n	80076e2 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80076da:	f000 fe79 	bl	80083d0 <vTaskMissedYield>
			--cTxLock;
 80076de:	3c01      	subs	r4, #1
 80076e0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e2:	2c00      	cmp	r4, #0
 80076e4:	dd08      	ble.n	80076f8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076e8:	b133      	cbz	r3, 80076f8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80076ee:	f000 fdd7 	bl	80082a0 <xTaskRemoveFromEventList>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d0f3      	beq.n	80076de <prvUnlockQueue+0x14>
 80076f6:	e7f0      	b.n	80076da <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80076f8:	23ff      	movs	r3, #255	; 0xff
 80076fa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80076fe:	f001 f837 	bl	8008770 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007702:	f001 f80f 	bl	8008724 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007706:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800770a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800770c:	e003      	b.n	8007716 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800770e:	f000 fe5f 	bl	80083d0 <vTaskMissedYield>
				--cRxLock;
 8007712:	3c01      	subs	r4, #1
 8007714:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007716:	2c00      	cmp	r4, #0
 8007718:	dd08      	ble.n	800772c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800771a:	692b      	ldr	r3, [r5, #16]
 800771c:	b133      	cbz	r3, 800772c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800771e:	f105 0010 	add.w	r0, r5, #16
 8007722:	f000 fdbd 	bl	80082a0 <xTaskRemoveFromEventList>
 8007726:	2800      	cmp	r0, #0
 8007728:	d0f3      	beq.n	8007712 <prvUnlockQueue+0x48>
 800772a:	e7f0      	b.n	800770e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800772c:	23ff      	movs	r3, #255	; 0xff
 800772e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007732:	f001 f81d 	bl	8008770 <vPortExitCritical>
}
 8007736:	bd38      	pop	{r3, r4, r5, pc}

08007738 <xQueueGenericReset>:
{
 8007738:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800773a:	b950      	cbnz	r0, 8007752 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	b672      	cpsid	i
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	b662      	cpsie	i
 8007750:	e7fe      	b.n	8007750 <xQueueGenericReset+0x18>
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007756:	f000 ffe5 	bl	8008724 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800775e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007760:	fb03 1002 	mla	r0, r3, r2, r1
 8007764:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007766:	2000      	movs	r0, #0
 8007768:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800776a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800776c:	3a01      	subs	r2, #1
 800776e:	fb02 1303 	mla	r3, r2, r3, r1
 8007772:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007774:	23ff      	movs	r3, #255	; 0xff
 8007776:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800777a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800777e:	b9a5      	cbnz	r5, 80077aa <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	b91b      	cbnz	r3, 800778c <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8007784:	f000 fff4 	bl	8008770 <vPortExitCritical>
}
 8007788:	2001      	movs	r0, #1
 800778a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778c:	f104 0010 	add.w	r0, r4, #16
 8007790:	f000 fd86 	bl	80082a0 <xTaskRemoveFromEventList>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0f5      	beq.n	8007784 <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <xQueueGenericReset+0x84>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	e7ec      	b.n	8007784 <xQueueGenericReset+0x4c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077aa:	f104 0010 	add.w	r0, r4, #16
 80077ae:	f7ff fee4 	bl	800757a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077b6:	f7ff fee0 	bl	800757a <vListInitialise>
 80077ba:	e7e3      	b.n	8007784 <xQueueGenericReset+0x4c>
 80077bc:	e000ed04 	.word	0xe000ed04

080077c0 <prvInitialiseNewQueue>:
{
 80077c0:	b510      	push	{r4, lr}
 80077c2:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80077c4:	460c      	mov	r4, r1
 80077c6:	b139      	cbz	r1, 80077d8 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077c8:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80077ca:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077cc:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077ce:	2101      	movs	r1, #1
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ffb1 	bl	8007738 <xQueueGenericReset>
}
 80077d6:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077d8:	601b      	str	r3, [r3, #0]
 80077da:	e7f6      	b.n	80077ca <prvInitialiseNewQueue+0xa>

080077dc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077dc:	b950      	cbnz	r0, 80077f4 <xQueueGenericCreate+0x18>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	e7fe      	b.n	80077f2 <xQueueGenericCreate+0x16>
	{
 80077f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f6:	b083      	sub	sp, #12
 80077f8:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80077fa:	b111      	cbz	r1, 8007802 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fc:	fb01 f000 	mul.w	r0, r1, r0
 8007800:	e000      	b.n	8007804 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8007802:	2000      	movs	r0, #0
 8007804:	4617      	mov	r7, r2
 8007806:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007808:	3048      	adds	r0, #72	; 0x48
 800780a:	f001 f8f5 	bl	80089f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800780e:	4606      	mov	r6, r0
 8007810:	b138      	cbz	r0, 8007822 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007812:	9000      	str	r0, [sp, #0]
 8007814:	463b      	mov	r3, r7
 8007816:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff ffcf 	bl	80077c0 <prvInitialiseNewQueue>
	}
 8007822:	4630      	mov	r0, r6
 8007824:	b003      	add	sp, #12
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007828 <xQueueGenericSend>:
{
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782a:	b085      	sub	sp, #20
 800782c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800782e:	b170      	cbz	r0, 800784e <xQueueGenericSend+0x26>
 8007830:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007832:	b9b9      	cbnz	r1, 8007864 <xQueueGenericSend+0x3c>
 8007834:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007836:	b1aa      	cbz	r2, 8007864 <xQueueGenericSend+0x3c>
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	e7fe      	b.n	800784c <xQueueGenericSend+0x24>
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	b672      	cpsid	i
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	b662      	cpsie	i
 8007862:	e7fe      	b.n	8007862 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007864:	2b02      	cmp	r3, #2
 8007866:	d10d      	bne.n	8007884 <xQueueGenericSend+0x5c>
 8007868:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800786a:	2a01      	cmp	r2, #1
 800786c:	d00a      	beq.n	8007884 <xQueueGenericSend+0x5c>
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	e7fe      	b.n	8007882 <xQueueGenericSend+0x5a>
 8007884:	461e      	mov	r6, r3
 8007886:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007888:	f000 fda8 	bl	80083dc <xTaskGetSchedulerState>
 800788c:	b960      	cbnz	r0, 80078a8 <xQueueGenericSend+0x80>
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	b163      	cbz	r3, 80078ac <xQueueGenericSend+0x84>
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	b672      	cpsid	i
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	b662      	cpsie	i
 80078a6:	e7fe      	b.n	80078a6 <xQueueGenericSend+0x7e>
 80078a8:	2500      	movs	r5, #0
 80078aa:	e03a      	b.n	8007922 <xQueueGenericSend+0xfa>
 80078ac:	2500      	movs	r5, #0
 80078ae:	e038      	b.n	8007922 <xQueueGenericSend+0xfa>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078b0:	4632      	mov	r2, r6
 80078b2:	4639      	mov	r1, r7
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff fecd 	bl	8007654 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078bc:	b94b      	cbnz	r3, 80078d2 <xQueueGenericSend+0xaa>
					else if( xYieldRequired != pdFALSE )
 80078be:	b1a8      	cbz	r0, 80078ec <xQueueGenericSend+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 80078c0:	4b3b      	ldr	r3, [pc, #236]	; (80079b0 <xQueueGenericSend+0x188>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	e00c      	b.n	80078ec <xQueueGenericSend+0xc4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078d6:	f000 fce3 	bl	80082a0 <xTaskRemoveFromEventList>
 80078da:	b138      	cbz	r0, 80078ec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
 80078dc:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <xQueueGenericSend+0x188>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80078ec:	f000 ff40 	bl	8008770 <vPortExitCritical>
				return pdPASS;
 80078f0:	2001      	movs	r0, #1
}
 80078f2:	b005      	add	sp, #20
 80078f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80078f6:	f000 ff3b 	bl	8008770 <vPortExitCritical>
					return errQUEUE_FULL;
 80078fa:	2000      	movs	r0, #0
 80078fc:	e7f9      	b.n	80078f2 <xQueueGenericSend+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fe:	a802      	add	r0, sp, #8
 8007900:	f000 fd16 	bl	8008330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007904:	2501      	movs	r5, #1
 8007906:	e019      	b.n	800793c <xQueueGenericSend+0x114>
		prvLockQueue( pxQueue );
 8007908:	2300      	movs	r3, #0
 800790a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800790e:	e021      	b.n	8007954 <xQueueGenericSend+0x12c>
 8007910:	2300      	movs	r3, #0
 8007912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007916:	e023      	b.n	8007960 <xQueueGenericSend+0x138>
				prvUnlockQueue( pxQueue );
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff fed6 	bl	80076ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800791e:	f000 fbb3 	bl	8008088 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007922:	f000 feff 	bl	8008724 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007926:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800792a:	429a      	cmp	r2, r3
 800792c:	d3c0      	bcc.n	80078b0 <xQueueGenericSend+0x88>
 800792e:	2e02      	cmp	r6, #2
 8007930:	d0be      	beq.n	80078b0 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0de      	beq.n	80078f6 <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 8007938:	2d00      	cmp	r5, #0
 800793a:	d0e0      	beq.n	80078fe <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 800793c:	f000 ff18 	bl	8008770 <vPortExitCritical>
		vTaskSuspendAll();
 8007940:	f000 fb0c 	bl	8007f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007944:	f000 feee 	bl	8008724 <vPortEnterCritical>
 8007948:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800794c:	b25b      	sxtb	r3, r3
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007952:	d0d9      	beq.n	8007908 <xQueueGenericSend+0xe0>
 8007954:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007958:	b25b      	sxtb	r3, r3
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800795e:	d0d7      	beq.n	8007910 <xQueueGenericSend+0xe8>
 8007960:	f000 ff06 	bl	8008770 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007964:	a901      	add	r1, sp, #4
 8007966:	a802      	add	r0, sp, #8
 8007968:	f000 fcee 	bl	8008348 <xTaskCheckForTimeOut>
 800796c:	b9c8      	cbnz	r0, 80079a2 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff fe54 	bl	800761c <prvIsQueueFull>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0cf      	beq.n	8007918 <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007978:	9901      	ldr	r1, [sp, #4]
 800797a:	f104 0010 	add.w	r0, r4, #16
 800797e:	f000 fc75 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff fea1 	bl	80076ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007988:	f000 fb7e 	bl	8008088 <xTaskResumeAll>
 800798c:	2800      	cmp	r0, #0
 800798e:	d1c8      	bne.n	8007922 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <xQueueGenericSend+0x188>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	e7bf      	b.n	8007922 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff fe91 	bl	80076ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079a8:	f000 fb6e 	bl	8008088 <xTaskResumeAll>
			return errQUEUE_FULL;
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7a0      	b.n	80078f2 <xQueueGenericSend+0xca>
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80079b4:	b148      	cbz	r0, 80079ca <prvInitialiseMutex+0x16>
	{
 80079b6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80079b8:	2100      	movs	r1, #0
 80079ba:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80079bc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80079be:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80079c0:	460b      	mov	r3, r1
 80079c2:	460a      	mov	r2, r1
 80079c4:	f7ff ff30 	bl	8007828 <xQueueGenericSend>
	}
 80079c8:	bd08      	pop	{r3, pc}
 80079ca:	4770      	bx	lr

080079cc <xQueueCreateMutex>:
	{
 80079cc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80079ce:	4602      	mov	r2, r0
 80079d0:	2100      	movs	r1, #0
 80079d2:	2001      	movs	r0, #1
 80079d4:	f7ff ff02 	bl	80077dc <xQueueGenericCreate>
 80079d8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80079da:	f7ff ffeb 	bl	80079b4 <prvInitialiseMutex>
	}
 80079de:	4620      	mov	r0, r4
 80079e0:	bd10      	pop	{r4, pc}
	...

080079e4 <xQueueSemaphoreTake>:
{
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80079ea:	b950      	cbnz	r0, 8007a02 <xQueueSemaphoreTake+0x1e>
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	b672      	cpsid	i
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	b662      	cpsie	i
 8007a00:	e7fe      	b.n	8007a00 <xQueueSemaphoreTake+0x1c>
 8007a02:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a06:	b153      	cbz	r3, 8007a1e <xQueueSemaphoreTake+0x3a>
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	e7fe      	b.n	8007a1c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a1e:	f000 fcdd 	bl	80083dc <xTaskGetSchedulerState>
 8007a22:	b960      	cbnz	r0, 8007a3e <xQueueSemaphoreTake+0x5a>
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	b16b      	cbz	r3, 8007a44 <xQueueSemaphoreTake+0x60>
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	e7fe      	b.n	8007a3c <xQueueSemaphoreTake+0x58>
 8007a3e:	2500      	movs	r5, #0
 8007a40:	462e      	mov	r6, r5
 8007a42:	e053      	b.n	8007aec <xQueueSemaphoreTake+0x108>
 8007a44:	2500      	movs	r5, #0
 8007a46:	462e      	mov	r6, r5
 8007a48:	e050      	b.n	8007aec <xQueueSemaphoreTake+0x108>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	b913      	cbnz	r3, 8007a58 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007a52:	f000 fdef 	bl	8008634 <pvTaskIncrementMutexHeldCount>
 8007a56:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	b163      	cbz	r3, 8007a76 <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5c:	f104 0010 	add.w	r0, r4, #16
 8007a60:	f000 fc1e 	bl	80082a0 <xTaskRemoveFromEventList>
 8007a64:	b138      	cbz	r0, 8007a76 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 8007a66:	4b49      	ldr	r3, [pc, #292]	; (8007b8c <xQueueSemaphoreTake+0x1a8>)
 8007a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007a76:	f000 fe7b 	bl	8008770 <vPortExitCritical>
				return pdPASS;
 8007a7a:	2501      	movs	r5, #1
}
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	b004      	add	sp, #16
 8007a80:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a82:	b155      	cbz	r5, 8007a9a <xQueueSemaphoreTake+0xb6>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	e7fe      	b.n	8007a98 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 8007a9a:	f000 fe69 	bl	8008770 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007a9e:	e7ed      	b.n	8007a7c <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aa0:	a802      	add	r0, sp, #8
 8007aa2:	f000 fc45 	bl	8008330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aa6:	2601      	movs	r6, #1
 8007aa8:	e02a      	b.n	8007b00 <xQueueSemaphoreTake+0x11c>
		prvLockQueue( pxQueue );
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ab0:	e032      	b.n	8007b18 <xQueueSemaphoreTake+0x134>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ab8:	e034      	b.n	8007b24 <xQueueSemaphoreTake+0x140>
						taskENTER_CRITICAL();
 8007aba:	f000 fe33 	bl	8008724 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007abe:	6860      	ldr	r0, [r4, #4]
 8007ac0:	f000 fc9c 	bl	80083fc <xTaskPriorityInherit>
 8007ac4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007ac6:	f000 fe53 	bl	8008770 <vPortExitCritical>
 8007aca:	e03b      	b.n	8007b44 <xQueueSemaphoreTake+0x160>
				prvUnlockQueue( pxQueue );
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7ff fdfc 	bl	80076ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ad2:	f000 fad9 	bl	8008088 <xTaskResumeAll>
 8007ad6:	e009      	b.n	8007aec <xQueueSemaphoreTake+0x108>
			prvUnlockQueue( pxQueue );
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f7ff fdf6 	bl	80076ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ade:	f000 fad3 	bl	8008088 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff fda9 	bl	800763a <prvIsQueueEmpty>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d140      	bne.n	8007b6e <xQueueSemaphoreTake+0x18a>
		taskENTER_CRITICAL();
 8007aec:	f000 fe1a 	bl	8008724 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1a9      	bne.n	8007a4a <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0c2      	beq.n	8007a82 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	d0cf      	beq.n	8007aa0 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 8007b00:	f000 fe36 	bl	8008770 <vPortExitCritical>
		vTaskSuspendAll();
 8007b04:	f000 fa2a 	bl	8007f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b08:	f000 fe0c 	bl	8008724 <vPortEnterCritical>
 8007b0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b16:	d0c8      	beq.n	8007aaa <xQueueSemaphoreTake+0xc6>
 8007b18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b1c:	b25b      	sxtb	r3, r3
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b22:	d0c6      	beq.n	8007ab2 <xQueueSemaphoreTake+0xce>
 8007b24:	f000 fe24 	bl	8008770 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b28:	a901      	add	r1, sp, #4
 8007b2a:	a802      	add	r0, sp, #8
 8007b2c:	f000 fc0c 	bl	8008348 <xTaskCheckForTimeOut>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1d1      	bne.n	8007ad8 <xQueueSemaphoreTake+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b34:	4620      	mov	r0, r4
 8007b36:	f7ff fd80 	bl	800763a <prvIsQueueEmpty>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d0c6      	beq.n	8007acc <xQueueSemaphoreTake+0xe8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0ba      	beq.n	8007aba <xQueueSemaphoreTake+0xd6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b44:	9901      	ldr	r1, [sp, #4]
 8007b46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b4a:	f000 fb8f 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7ff fdbb 	bl	80076ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b54:	f000 fa98 	bl	8008088 <xTaskResumeAll>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1c7      	bne.n	8007aec <xQueueSemaphoreTake+0x108>
					portYIELD_WITHIN_API();
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <xQueueSemaphoreTake+0x1a8>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	e7be      	b.n	8007aec <xQueueSemaphoreTake+0x108>
					if( xInheritanceOccurred != pdFALSE )
 8007b6e:	2d00      	cmp	r5, #0
 8007b70:	d084      	beq.n	8007a7c <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
 8007b72:	f000 fdd7 	bl	8008724 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7ff fd47 	bl	800760a <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	6860      	ldr	r0, [r4, #4]
 8007b80:	f000 fcf4 	bl	800856c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007b84:	f000 fdf4 	bl	8008770 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007b88:	2500      	movs	r5, #0
 8007b8a:	e777      	b.n	8007a7c <xQueueSemaphoreTake+0x98>
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <prvResetNextTaskUnblockTime+0x24>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	b13b      	cbz	r3, 8007ba8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <prvResetNextTaskUnblockTime+0x24>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <prvResetNextTaskUnblockTime+0x28>)
 8007ba4:	601a      	str	r2, [r3, #0]
	}
}
 8007ba6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <prvResetNextTaskUnblockTime+0x28>)
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	2000059c 	.word	0x2000059c
 8007bb8:	20000674 	.word	0x20000674

08007bbc <prvDeleteTCB>:
	{
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8007bc0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007bc2:	f000 ffa3 	bl	8008b0c <vPortFree>
			vPortFree( pxTCB );
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 ffa0 	bl	8008b0c <vPortFree>
	}
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <prvInitialiseNewTask>:
{
 8007bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4699      	mov	r9, r3
 8007bd6:	9d08      	ldr	r5, [sp, #32]
 8007bd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007bdc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007bde:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007be2:	4413      	add	r3, r2
 8007be4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007be8:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d807      	bhi.n	8007c02 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bf2:	5cc8      	ldrb	r0, [r1, r3]
 8007bf4:	18e2      	adds	r2, r4, r3
 8007bf6:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8007bfa:	5cca      	ldrb	r2, [r1, r3]
 8007bfc:	b10a      	cbz	r2, 8007c02 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bfe:	3301      	adds	r3, #1
 8007c00:	e7f5      	b.n	8007bee <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c02:	2300      	movs	r3, #0
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c08:	2d06      	cmp	r5, #6
 8007c0a:	d900      	bls.n	8007c0e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c0c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8007c0e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007c10:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c1a:	1d20      	adds	r0, r4, #4
 8007c1c:	f7ff fcb8 	bl	8007590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c20:	f104 0018 	add.w	r0, r4, #24
 8007c24:	f7ff fcb4 	bl	8007590 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2a:	f1c5 0507 	rsb	r5, r5, #7
 8007c2e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c30:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007c32:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c36:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c3a:	464a      	mov	r2, r9
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f000 fd48 	bl	80086d4 <pxPortInitialiseStack>
 8007c44:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007c46:	b107      	cbz	r7, 8007c4a <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c48:	603c      	str	r4, [r7, #0]
}
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007c50 <prvInitialiseTaskLists>:
{
 8007c50:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c52:	2400      	movs	r4, #0
 8007c54:	e007      	b.n	8007c66 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007c5a:	0093      	lsls	r3, r2, #2
 8007c5c:	480e      	ldr	r0, [pc, #56]	; (8007c98 <prvInitialiseTaskLists+0x48>)
 8007c5e:	4418      	add	r0, r3
 8007c60:	f7ff fc8b 	bl	800757a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c64:	3401      	adds	r4, #1
 8007c66:	2c06      	cmp	r4, #6
 8007c68:	d9f5      	bls.n	8007c56 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007c6a:	4d0c      	ldr	r5, [pc, #48]	; (8007c9c <prvInitialiseTaskLists+0x4c>)
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f7ff fc84 	bl	800757a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c72:	4c0b      	ldr	r4, [pc, #44]	; (8007ca0 <prvInitialiseTaskLists+0x50>)
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7ff fc80 	bl	800757a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c7a:	480a      	ldr	r0, [pc, #40]	; (8007ca4 <prvInitialiseTaskLists+0x54>)
 8007c7c:	f7ff fc7d 	bl	800757a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007c80:	4809      	ldr	r0, [pc, #36]	; (8007ca8 <prvInitialiseTaskLists+0x58>)
 8007c82:	f7ff fc7a 	bl	800757a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007c86:	4809      	ldr	r0, [pc, #36]	; (8007cac <prvInitialiseTaskLists+0x5c>)
 8007c88:	f7ff fc77 	bl	800757a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c8c:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <prvInitialiseTaskLists+0x60>)
 8007c8e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c90:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <prvInitialiseTaskLists+0x64>)
 8007c92:	601c      	str	r4, [r3, #0]
}
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	200005a4 	.word	0x200005a4
 8007c9c:	20000648 	.word	0x20000648
 8007ca0:	2000065c 	.word	0x2000065c
 8007ca4:	2000067c 	.word	0x2000067c
 8007ca8:	200006a8 	.word	0x200006a8
 8007cac:	20000694 	.word	0x20000694
 8007cb0:	2000059c 	.word	0x2000059c
 8007cb4:	200005a0 	.word	0x200005a0

08007cb8 <prvAddNewTaskToReadyList>:
{
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007cbc:	f000 fd32 	bl	8008724 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007cc0:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <prvAddNewTaskToReadyList+0x8c>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <prvAddNewTaskToReadyList+0x90>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	b15b      	cbz	r3, 8007ce6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007cce:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <prvAddNewTaskToReadyList+0x94>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	b96b      	cbnz	r3, 8007cf0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <prvAddNewTaskToReadyList+0x90>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d807      	bhi.n	8007cf0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <prvAddNewTaskToReadyList+0x90>)
 8007ce2:	601c      	str	r4, [r3, #0]
 8007ce4:	e004      	b.n	8007cf0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007ce6:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <prvAddNewTaskToReadyList+0x90>)
 8007ce8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d026      	beq.n	8007d3e <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8007cf0:	4a17      	ldr	r2, [pc, #92]	; (8007d50 <prvAddNewTaskToReadyList+0x98>)
 8007cf2:	6813      	ldr	r3, [r2, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	409a      	lsls	r2, r3
 8007cfe:	4915      	ldr	r1, [pc, #84]	; (8007d54 <prvAddNewTaskToReadyList+0x9c>)
 8007d00:	6808      	ldr	r0, [r1, #0]
 8007d02:	4302      	orrs	r2, r0
 8007d04:	600a      	str	r2, [r1, #0]
 8007d06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d0a:	009a      	lsls	r2, r3, #2
 8007d0c:	1d21      	adds	r1, r4, #4
 8007d0e:	4812      	ldr	r0, [pc, #72]	; (8007d58 <prvAddNewTaskToReadyList+0xa0>)
 8007d10:	4410      	add	r0, r2
 8007d12:	f7ff fc40 	bl	8007596 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007d16:	f000 fd2b 	bl	8008770 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <prvAddNewTaskToReadyList+0x94>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	b16b      	cbz	r3, 8007d3c <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <prvAddNewTaskToReadyList+0x90>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d207      	bcs.n	8007d3c <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <prvAddNewTaskToReadyList+0xa4>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
}
 8007d3c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8007d3e:	f7ff ff87 	bl	8007c50 <prvInitialiseTaskLists>
 8007d42:	e7d5      	b.n	8007cf0 <prvAddNewTaskToReadyList+0x38>
 8007d44:	20000630 	.word	0x20000630
 8007d48:	20000598 	.word	0x20000598
 8007d4c:	20000690 	.word	0x20000690
 8007d50:	20000640 	.word	0x20000640
 8007d54:	20000644 	.word	0x20000644
 8007d58:	200005a4 	.word	0x200005a4
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d60:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <prvCheckTasksWaitingTermination+0x40>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b1d3      	cbz	r3, 8007d9c <prvCheckTasksWaitingTermination+0x3c>
{
 8007d66:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007d68:	f000 fcdc 	bl	8008724 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d6c:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <prvCheckTasksWaitingTermination+0x44>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d72:	1d20      	adds	r0, r4, #4
 8007d74:	f7ff fc35 	bl	80075e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d78:	4a0b      	ldr	r2, [pc, #44]	; (8007da8 <prvCheckTasksWaitingTermination+0x48>)
 8007d7a:	6813      	ldr	r3, [r2, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d80:	4a07      	ldr	r2, [pc, #28]	; (8007da0 <prvCheckTasksWaitingTermination+0x40>)
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8007d88:	f000 fcf2 	bl	8008770 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff ff15 	bl	8007bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d92:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <prvCheckTasksWaitingTermination+0x40>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e6      	bne.n	8007d68 <prvCheckTasksWaitingTermination+0x8>
}
 8007d9a:	bd10      	pop	{r4, pc}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000634 	.word	0x20000634
 8007da4:	200006a8 	.word	0x200006a8
 8007da8:	20000630 	.word	0x20000630

08007dac <prvIdleTask>:
{
 8007dac:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007dae:	f7ff ffd7 	bl	8007d60 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <prvIdleTask+0x20>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d9f9      	bls.n	8007dae <prvIdleTask+0x2>
				taskYIELD();
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <prvIdleTask+0x24>)
 8007dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	e7f0      	b.n	8007dae <prvIdleTask+0x2>
 8007dcc:	200005a4 	.word	0x200005a4
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dda:	4b1f      	ldr	r3, [pc, #124]	; (8007e58 <prvAddCurrentTaskToDelayedList+0x84>)
 8007ddc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	3004      	adds	r0, #4
 8007de4:	f7ff fbfd 	bl	80075e2 <uxListRemove>
 8007de8:	b950      	cbnz	r0, 8007e00 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007dea:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	2301      	movs	r3, #1
 8007df2:	fa03 f202 	lsl.w	r2, r3, r2
 8007df6:	491a      	ldr	r1, [pc, #104]	; (8007e60 <prvAddCurrentTaskToDelayedList+0x8c>)
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	ea23 0302 	bic.w	r3, r3, r2
 8007dfe:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e00:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007e04:	bf14      	ite	ne
 8007e06:	2300      	movne	r3, #0
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	bf08      	it	eq
 8007e0e:	2300      	moveq	r3, #0
 8007e10:	b99b      	cbnz	r3, 8007e3a <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e12:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007e1a:	42a5      	cmp	r5, r4
 8007e1c:	d814      	bhi.n	8007e48 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007e24:	6819      	ldr	r1, [r3, #0]
 8007e26:	3104      	adds	r1, #4
 8007e28:	f7ff fbc1 	bl	80075ae <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d910      	bls.n	8007e56 <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e36:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e38:	e00d      	b.n	8007e56 <prvAddCurrentTaskToDelayedList+0x82>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	3104      	adds	r1, #4
 8007e40:	480a      	ldr	r0, [pc, #40]	; (8007e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8007e42:	f7ff fba8 	bl	8007596 <vListInsertEnd>
 8007e46:	e006      	b.n	8007e56 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e48:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	3104      	adds	r1, #4
 8007e52:	f7ff fbac 	bl	80075ae <vListInsert>
}
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	200006bc 	.word	0x200006bc
 8007e5c:	20000598 	.word	0x20000598
 8007e60:	20000644 	.word	0x20000644
 8007e64:	2000059c 	.word	0x2000059c
 8007e68:	20000674 	.word	0x20000674
 8007e6c:	20000694 	.word	0x20000694
 8007e70:	200005a0 	.word	0x200005a0

08007e74 <xTaskCreate>:
	{
 8007e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	4688      	mov	r8, r1
 8007e7e:	4615      	mov	r5, r2
 8007e80:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	0090      	lsls	r0, r2, #2
 8007e84:	f000 fdb8 	bl	80089f8 <pvPortMalloc>
			if( pxStack != NULL )
 8007e88:	b1f8      	cbz	r0, 8007eca <xTaskCreate+0x56>
 8007e8a:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007e8c:	2054      	movs	r0, #84	; 0x54
 8007e8e:	f000 fdb3 	bl	80089f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007e92:	4604      	mov	r4, r0
 8007e94:	b1a8      	cbz	r0, 8007ec2 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007e96:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8007e98:	b1d4      	cbz	r4, 8007ed0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	9402      	str	r4, [sp, #8]
 8007ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f7ff fe8d 	bl	8007bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f7ff feff 	bl	8007cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eba:	2001      	movs	r0, #1
	}
 8007ebc:	b005      	add	sp, #20
 8007ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 fe22 	bl	8008b0c <vPortFree>
 8007ec8:	e7e6      	b.n	8007e98 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ece:	e7f5      	b.n	8007ebc <xTaskCreate+0x48>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007ed4:	e7f2      	b.n	8007ebc <xTaskCreate+0x48>
	...

08007ed8 <vTaskStartScheduler>:
{
 8007ed8:	b500      	push	{lr}
 8007eda:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8007edc:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <vTaskStartScheduler+0x6c>)
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	4918      	ldr	r1, [pc, #96]	; (8007f48 <vTaskStartScheduler+0x70>)
 8007ee8:	4818      	ldr	r0, [pc, #96]	; (8007f4c <vTaskStartScheduler+0x74>)
 8007eea:	f7ff ffc3 	bl	8007e74 <xTaskCreate>
	if( xReturn == pdPASS )
 8007eee:	2801      	cmp	r0, #1
 8007ef0:	d005      	beq.n	8007efe <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ef2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007ef6:	d019      	beq.n	8007f2c <vTaskStartScheduler+0x54>
}
 8007ef8:	b003      	add	sp, #12
 8007efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <vTaskStartScheduler+0x78>)
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <vTaskStartScheduler+0x7c>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <vTaskStartScheduler+0x80>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007f26:	f000 fca1 	bl	800886c <xPortStartScheduler>
 8007f2a:	e7e5      	b.n	8007ef8 <vTaskStartScheduler+0x20>
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	b672      	cpsid	i
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	b662      	cpsie	i
 8007f40:	e7fe      	b.n	8007f40 <vTaskStartScheduler+0x68>
 8007f42:	bf00      	nop
 8007f44:	20000670 	.word	0x20000670
 8007f48:	08012ac0 	.word	0x08012ac0
 8007f4c:	08007dad 	.word	0x08007dad
 8007f50:	20000674 	.word	0x20000674
 8007f54:	20000690 	.word	0x20000690
 8007f58:	200006bc 	.word	0x200006bc

08007f5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007f5c:	4a02      	ldr	r2, [pc, #8]	; (8007f68 <vTaskSuspendAll+0xc>)
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	6013      	str	r3, [r2, #0]
}
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	2000063c 	.word	0x2000063c

08007f6c <xTaskIncrementTick>:
{
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f6e:	4b3b      	ldr	r3, [pc, #236]	; (800805c <xTaskIncrementTick+0xf0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d166      	bne.n	8008044 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f76:	4b3a      	ldr	r3, [pc, #232]	; (8008060 <xTaskIncrementTick+0xf4>)
 8007f78:	681d      	ldr	r5, [r3, #0]
 8007f7a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007f7c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f7e:	b9d5      	cbnz	r5, 8007fb6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007f80:	4b38      	ldr	r3, [pc, #224]	; (8008064 <xTaskIncrementTick+0xf8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	b153      	cbz	r3, 8007f9e <xTaskIncrementTick+0x32>
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	e7fe      	b.n	8007f9c <xTaskIncrementTick+0x30>
 8007f9e:	4a31      	ldr	r2, [pc, #196]	; (8008064 <xTaskIncrementTick+0xf8>)
 8007fa0:	6811      	ldr	r1, [r2, #0]
 8007fa2:	4b31      	ldr	r3, [pc, #196]	; (8008068 <xTaskIncrementTick+0xfc>)
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	6010      	str	r0, [r2, #0]
 8007fa8:	6019      	str	r1, [r3, #0]
 8007faa:	4a30      	ldr	r2, [pc, #192]	; (800806c <xTaskIncrementTick+0x100>)
 8007fac:	6813      	ldr	r3, [r2, #0]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	f7ff fded 	bl	8007b90 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <xTaskIncrementTick+0x104>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	42ab      	cmp	r3, r5
 8007fbc:	d938      	bls.n	8008030 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007fbe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <xTaskIncrementTick+0x108>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fca:	009a      	lsls	r2, r3, #2
 8007fcc:	4b2a      	ldr	r3, [pc, #168]	; (8008078 <xTaskIncrementTick+0x10c>)
 8007fce:	589b      	ldr	r3, [r3, r2]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d93c      	bls.n	800804e <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8007fd4:	2401      	movs	r4, #1
 8007fd6:	e03a      	b.n	800804e <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8007fd8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fda:	4b22      	ldr	r3, [pc, #136]	; (8008064 <xTaskIncrementTick+0xf8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b343      	cbz	r3, 8008034 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fe2:	4b20      	ldr	r3, [pc, #128]	; (8008064 <xTaskIncrementTick+0xf8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fea:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007fec:	429d      	cmp	r5, r3
 8007fee:	d326      	bcc.n	800803e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff0:	1d37      	adds	r7, r6, #4
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff faf5 	bl	80075e2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ff8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007ffa:	b11b      	cbz	r3, 8008004 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ffc:	f106 0018 	add.w	r0, r6, #24
 8008000:	f7ff faef 	bl	80075e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008004:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008006:	2201      	movs	r2, #1
 8008008:	409a      	lsls	r2, r3
 800800a:	491c      	ldr	r1, [pc, #112]	; (800807c <xTaskIncrementTick+0x110>)
 800800c:	6808      	ldr	r0, [r1, #0]
 800800e:	4302      	orrs	r2, r0
 8008010:	600a      	str	r2, [r1, #0]
 8008012:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008016:	009a      	lsls	r2, r3, #2
 8008018:	4639      	mov	r1, r7
 800801a:	4817      	ldr	r0, [pc, #92]	; (8008078 <xTaskIncrementTick+0x10c>)
 800801c:	4410      	add	r0, r2
 800801e:	f7ff faba 	bl	8007596 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008022:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8008024:	4b13      	ldr	r3, [pc, #76]	; (8008074 <xTaskIncrementTick+0x108>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	429a      	cmp	r2, r3
 800802c:	d2d4      	bcs.n	8007fd8 <xTaskIncrementTick+0x6c>
 800802e:	e7d4      	b.n	8007fda <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 8008030:	2400      	movs	r4, #0
 8008032:	e7d2      	b.n	8007fda <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008034:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <xTaskIncrementTick+0x104>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803a:	601a      	str	r2, [r3, #0]
					break;
 800803c:	e7c0      	b.n	8007fc0 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 800803e:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <xTaskIncrementTick+0x104>)
 8008040:	6013      	str	r3, [r2, #0]
						break;
 8008042:	e7bd      	b.n	8007fc0 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8008044:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <xTaskIncrementTick+0x114>)
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800804c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <xTaskIncrementTick+0x118>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	b103      	cbz	r3, 8008056 <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 8008054:	2401      	movs	r4, #1
}
 8008056:	4620      	mov	r0, r4
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805a:	bf00      	nop
 800805c:	2000063c 	.word	0x2000063c
 8008060:	200006bc 	.word	0x200006bc
 8008064:	2000059c 	.word	0x2000059c
 8008068:	200005a0 	.word	0x200005a0
 800806c:	20000678 	.word	0x20000678
 8008070:	20000674 	.word	0x20000674
 8008074:	20000598 	.word	0x20000598
 8008078:	200005a4 	.word	0x200005a4
 800807c:	20000644 	.word	0x20000644
 8008080:	20000638 	.word	0x20000638
 8008084:	200006c0 	.word	0x200006c0

08008088 <xTaskResumeAll>:
{
 8008088:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800808a:	4b34      	ldr	r3, [pc, #208]	; (800815c <xTaskResumeAll+0xd4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	b953      	cbnz	r3, 80080a6 <xTaskResumeAll+0x1e>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	e7fe      	b.n	80080a4 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80080a6:	f000 fb3d 	bl	8008724 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80080aa:	4b2c      	ldr	r3, [pc, #176]	; (800815c <xTaskResumeAll+0xd4>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	3a01      	subs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d14d      	bne.n	8008154 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080b8:	4b29      	ldr	r3, [pc, #164]	; (8008160 <xTaskResumeAll+0xd8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	b923      	cbnz	r3, 80080c8 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 80080be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80080c0:	f000 fb56 	bl	8008770 <vPortExitCritical>
}
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80080c8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080ca:	4b26      	ldr	r3, [pc, #152]	; (8008164 <xTaskResumeAll+0xdc>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b31b      	cbz	r3, 8008118 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80080d0:	4b24      	ldr	r3, [pc, #144]	; (8008164 <xTaskResumeAll+0xdc>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080d6:	f104 0018 	add.w	r0, r4, #24
 80080da:	f7ff fa82 	bl	80075e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080de:	1d25      	adds	r5, r4, #4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f7ff fa7e 	bl	80075e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	491e      	ldr	r1, [pc, #120]	; (8008168 <xTaskResumeAll+0xe0>)
 80080ee:	6808      	ldr	r0, [r1, #0]
 80080f0:	4302      	orrs	r2, r0
 80080f2:	600a      	str	r2, [r1, #0]
 80080f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80080f8:	009a      	lsls	r2, r3, #2
 80080fa:	4629      	mov	r1, r5
 80080fc:	481b      	ldr	r0, [pc, #108]	; (800816c <xTaskResumeAll+0xe4>)
 80080fe:	4410      	add	r0, r2
 8008100:	f7ff fa49 	bl	8007596 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008104:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <xTaskResumeAll+0xe8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d3dc      	bcc.n	80080ca <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8008110:	4b18      	ldr	r3, [pc, #96]	; (8008174 <xTaskResumeAll+0xec>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e7d8      	b.n	80080ca <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8008118:	b10c      	cbz	r4, 800811e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 800811a:	f7ff fd39 	bl	8007b90 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <xTaskResumeAll+0xf0>)
 8008120:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008122:	b154      	cbz	r4, 800813a <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
 8008124:	f7ff ff22 	bl	8007f6c <xTaskIncrementTick>
 8008128:	b110      	cbz	r0, 8008130 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <xTaskResumeAll+0xec>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008130:	3c01      	subs	r4, #1
 8008132:	d1f7      	bne.n	8008124 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008134:	4b10      	ldr	r3, [pc, #64]	; (8008178 <xTaskResumeAll+0xf0>)
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800813a:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <xTaskResumeAll+0xec>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	b15b      	cbz	r3, 8008158 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8008140:	4b0e      	ldr	r3, [pc, #56]	; (800817c <xTaskResumeAll+0xf4>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008150:	2401      	movs	r4, #1
 8008152:	e7b5      	b.n	80080c0 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008154:	2400      	movs	r4, #0
 8008156:	e7b3      	b.n	80080c0 <xTaskResumeAll+0x38>
 8008158:	2400      	movs	r4, #0
 800815a:	e7b1      	b.n	80080c0 <xTaskResumeAll+0x38>
 800815c:	2000063c 	.word	0x2000063c
 8008160:	20000630 	.word	0x20000630
 8008164:	2000067c 	.word	0x2000067c
 8008168:	20000644 	.word	0x20000644
 800816c:	200005a4 	.word	0x200005a4
 8008170:	20000598 	.word	0x20000598
 8008174:	200006c0 	.word	0x200006c0
 8008178:	20000638 	.word	0x20000638
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <vTaskDelay>:
	{
 8008180:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008182:	b1b8      	cbz	r0, 80081b4 <vTaskDelay+0x34>
 8008184:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <vTaskDelay+0x48>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	b153      	cbz	r3, 80081a2 <vTaskDelay+0x22>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	e7fe      	b.n	80081a0 <vTaskDelay+0x20>
			vTaskSuspendAll();
 80081a2:	f7ff fedb 	bl	8007f5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081a6:	2100      	movs	r1, #0
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7ff fe13 	bl	8007dd4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80081ae:	f7ff ff6b 	bl	8008088 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80081b2:	b938      	cbnz	r0, 80081c4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <vTaskDelay+0x4c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
	}
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	bf00      	nop
 80081c8:	2000063c 	.word	0x2000063c
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081d0:	4b21      	ldr	r3, [pc, #132]	; (8008258 <vTaskSwitchContext+0x88>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	b11b      	cbz	r3, 80081de <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80081d6:	4b21      	ldr	r3, [pc, #132]	; (800825c <vTaskSwitchContext+0x8c>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80081de:	4b1f      	ldr	r3, [pc, #124]	; (800825c <vTaskSwitchContext+0x8c>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80081e4:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <vTaskSwitchContext+0x90>)
 80081e6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081e8:	fab3 f383 	clz	r3, r3
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f1c3 031f 	rsb	r3, r3, #31
 80081f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80081f6:	008a      	lsls	r2, r1, #2
 80081f8:	491a      	ldr	r1, [pc, #104]	; (8008264 <vTaskSwitchContext+0x94>)
 80081fa:	588a      	ldr	r2, [r1, r2]
 80081fc:	b952      	cbnz	r2, 8008214 <vTaskSwitchContext+0x44>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	b672      	cpsid	i
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	b662      	cpsie	i
 8008212:	e7fe      	b.n	8008212 <vTaskSwitchContext+0x42>
{
 8008214:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008216:	4813      	ldr	r0, [pc, #76]	; (8008264 <vTaskSwitchContext+0x94>)
 8008218:	009a      	lsls	r2, r3, #2
 800821a:	18d4      	adds	r4, r2, r3
 800821c:	00a1      	lsls	r1, r4, #2
 800821e:	4401      	add	r1, r0
 8008220:	684c      	ldr	r4, [r1, #4]
 8008222:	6864      	ldr	r4, [r4, #4]
 8008224:	604c      	str	r4, [r1, #4]
 8008226:	441a      	add	r2, r3
 8008228:	0091      	lsls	r1, r2, #2
 800822a:	3108      	adds	r1, #8
 800822c:	4408      	add	r0, r1
 800822e:	4284      	cmp	r4, r0
 8008230:	d00b      	beq.n	800824a <vTaskSwitchContext+0x7a>
 8008232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008236:	009a      	lsls	r2, r3, #2
 8008238:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <vTaskSwitchContext+0x94>)
 800823a:	4413      	add	r3, r2
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	4b09      	ldr	r3, [pc, #36]	; (8008268 <vTaskSwitchContext+0x98>)
 8008242:	601a      	str	r2, [r3, #0]
}
 8008244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008248:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800824a:	6861      	ldr	r1, [r4, #4]
 800824c:	4805      	ldr	r0, [pc, #20]	; (8008264 <vTaskSwitchContext+0x94>)
 800824e:	2214      	movs	r2, #20
 8008250:	fb02 0203 	mla	r2, r2, r3, r0
 8008254:	6051      	str	r1, [r2, #4]
 8008256:	e7ec      	b.n	8008232 <vTaskSwitchContext+0x62>
 8008258:	2000063c 	.word	0x2000063c
 800825c:	200006c0 	.word	0x200006c0
 8008260:	20000644 	.word	0x20000644
 8008264:	200005a4 	.word	0x200005a4
 8008268:	20000598 	.word	0x20000598

0800826c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800826c:	b950      	cbnz	r0, 8008284 <vTaskPlaceOnEventList+0x18>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	e7fe      	b.n	8008282 <vTaskPlaceOnEventList+0x16>
{
 8008284:	b510      	push	{r4, lr}
 8008286:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <vTaskPlaceOnEventList+0x30>)
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	3118      	adds	r1, #24
 800828e:	f7ff f98e 	bl	80075ae <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008292:	2101      	movs	r1, #1
 8008294:	4620      	mov	r0, r4
 8008296:	f7ff fd9d 	bl	8007dd4 <prvAddCurrentTaskToDelayedList>
}
 800829a:	bd10      	pop	{r4, pc}
 800829c:	20000598 	.word	0x20000598

080082a0 <xTaskRemoveFromEventList>:
{
 80082a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80082a2:	68c3      	ldr	r3, [r0, #12]
 80082a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80082a6:	b954      	cbnz	r4, 80082be <xTaskRemoveFromEventList+0x1e>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	b672      	cpsid	i
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	b662      	cpsie	i
 80082bc:	e7fe      	b.n	80082bc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082be:	f104 0518 	add.w	r5, r4, #24
 80082c2:	4628      	mov	r0, r5
 80082c4:	f7ff f98d 	bl	80075e2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c8:	4b13      	ldr	r3, [pc, #76]	; (8008318 <xTaskRemoveFromEventList+0x78>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	b9e3      	cbnz	r3, 8008308 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082ce:	1d25      	adds	r5, r4, #4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff f986 	bl	80075e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	409a      	lsls	r2, r3
 80082dc:	490f      	ldr	r1, [pc, #60]	; (800831c <xTaskRemoveFromEventList+0x7c>)
 80082de:	6808      	ldr	r0, [r1, #0]
 80082e0:	4302      	orrs	r2, r0
 80082e2:	600a      	str	r2, [r1, #0]
 80082e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082e8:	009a      	lsls	r2, r3, #2
 80082ea:	4629      	mov	r1, r5
 80082ec:	480c      	ldr	r0, [pc, #48]	; (8008320 <xTaskRemoveFromEventList+0x80>)
 80082ee:	4410      	add	r0, r2
 80082f0:	f7ff f951 	bl	8007596 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <xTaskRemoveFromEventList+0x84>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d908      	bls.n	8008312 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8008300:	2001      	movs	r0, #1
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <xTaskRemoveFromEventList+0x88>)
 8008304:	6018      	str	r0, [r3, #0]
}
 8008306:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008308:	4629      	mov	r1, r5
 800830a:	4808      	ldr	r0, [pc, #32]	; (800832c <xTaskRemoveFromEventList+0x8c>)
 800830c:	f7ff f943 	bl	8007596 <vListInsertEnd>
 8008310:	e7f0      	b.n	80082f4 <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 8008312:	2000      	movs	r0, #0
	return xReturn;
 8008314:	e7f7      	b.n	8008306 <xTaskRemoveFromEventList+0x66>
 8008316:	bf00      	nop
 8008318:	2000063c 	.word	0x2000063c
 800831c:	20000644 	.word	0x20000644
 8008320:	200005a4 	.word	0x200005a4
 8008324:	20000598 	.word	0x20000598
 8008328:	200006c0 	.word	0x200006c0
 800832c:	2000067c 	.word	0x2000067c

08008330 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008330:	4b03      	ldr	r3, [pc, #12]	; (8008340 <vTaskInternalSetTimeOutState+0x10>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008336:	4b03      	ldr	r3, [pc, #12]	; (8008344 <vTaskInternalSetTimeOutState+0x14>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6043      	str	r3, [r0, #4]
}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20000678 	.word	0x20000678
 8008344:	200006bc 	.word	0x200006bc

08008348 <xTaskCheckForTimeOut>:
{
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800834a:	b160      	cbz	r0, 8008366 <xTaskCheckForTimeOut+0x1e>
 800834c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800834e:	b9a9      	cbnz	r1, 800837c <xTaskCheckForTimeOut+0x34>
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	e7fe      	b.n	8008364 <xTaskCheckForTimeOut+0x1c>
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	b672      	cpsid	i
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	b662      	cpsie	i
 800837a:	e7fe      	b.n	800837a <xTaskCheckForTimeOut+0x32>
 800837c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800837e:	f000 f9d1 	bl	8008724 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <xTaskCheckForTimeOut+0x80>)
 8008384:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008386:	6868      	ldr	r0, [r5, #4]
 8008388:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008390:	d016      	beq.n	80083c0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008392:	682f      	ldr	r7, [r5, #0]
 8008394:	4e0d      	ldr	r6, [pc, #52]	; (80083cc <xTaskCheckForTimeOut+0x84>)
 8008396:	6836      	ldr	r6, [r6, #0]
 8008398:	42b7      	cmp	r7, r6
 800839a:	d001      	beq.n	80083a0 <xTaskCheckForTimeOut+0x58>
 800839c:	4288      	cmp	r0, r1
 800839e:	d911      	bls.n	80083c4 <xTaskCheckForTimeOut+0x7c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d803      	bhi.n	80083ac <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80083a8:	2401      	movs	r4, #1
 80083aa:	e005      	b.n	80083b8 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff ffbd 	bl	8008330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80083b8:	f000 f9da 	bl	8008770 <vPortExitCritical>
}
 80083bc:	4620      	mov	r0, r4
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 80083c0:	2400      	movs	r4, #0
 80083c2:	e7f9      	b.n	80083b8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 80083c4:	2401      	movs	r4, #1
 80083c6:	e7f7      	b.n	80083b8 <xTaskCheckForTimeOut+0x70>
 80083c8:	200006bc 	.word	0x200006bc
 80083cc:	20000678 	.word	0x20000678

080083d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <vTaskMissedYield+0x8>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
}
 80083d6:	4770      	bx	lr
 80083d8:	200006c0 	.word	0x200006c0

080083dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <xTaskGetSchedulerState+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b133      	cbz	r3, 80083f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <xTaskGetSchedulerState+0x1c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	b10b      	cbz	r3, 80083ec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80083e8:	2000      	movs	r0, #0
	}
 80083ea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80083ec:	2002      	movs	r0, #2
 80083ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083f0:	2001      	movs	r0, #1
 80083f2:	4770      	bx	lr
 80083f4:	20000690 	.word	0x20000690
 80083f8:	2000063c 	.word	0x2000063c

080083fc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d050      	beq.n	80084a2 <xTaskPriorityInherit+0xa6>
	{
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008404:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008406:	4928      	ldr	r1, [pc, #160]	; (80084a8 <xTaskPriorityInherit+0xac>)
 8008408:	6809      	ldr	r1, [r1, #0]
 800840a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800840c:	428a      	cmp	r2, r1
 800840e:	d23e      	bcs.n	800848e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008410:	6981      	ldr	r1, [r0, #24]
 8008412:	2900      	cmp	r1, #0
 8008414:	db05      	blt.n	8008422 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008416:	4924      	ldr	r1, [pc, #144]	; (80084a8 <xTaskPriorityInherit+0xac>)
 8008418:	6809      	ldr	r1, [r1, #0]
 800841a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800841c:	f1c1 0107 	rsb	r1, r1, #7
 8008420:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008422:	6960      	ldr	r0, [r4, #20]
 8008424:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008428:	0091      	lsls	r1, r2, #2
 800842a:	4a20      	ldr	r2, [pc, #128]	; (80084ac <xTaskPriorityInherit+0xb0>)
 800842c:	440a      	add	r2, r1
 800842e:	4290      	cmp	r0, r2
 8008430:	d005      	beq.n	800843e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008432:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <xTaskPriorityInherit+0xac>)
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008438:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800843a:	2001      	movs	r0, #1
	}
 800843c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800843e:	1d25      	adds	r5, r4, #4
 8008440:	4628      	mov	r0, r5
 8008442:	f7ff f8ce 	bl	80075e2 <uxListRemove>
 8008446:	b968      	cbnz	r0, 8008464 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800844a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800844e:	008a      	lsls	r2, r1, #2
 8008450:	4916      	ldr	r1, [pc, #88]	; (80084ac <xTaskPriorityInherit+0xb0>)
 8008452:	588a      	ldr	r2, [r1, r2]
 8008454:	b932      	cbnz	r2, 8008464 <xTaskPriorityInherit+0x68>
 8008456:	2201      	movs	r2, #1
 8008458:	409a      	lsls	r2, r3
 800845a:	4915      	ldr	r1, [pc, #84]	; (80084b0 <xTaskPriorityInherit+0xb4>)
 800845c:	680b      	ldr	r3, [r1, #0]
 800845e:	ea23 0302 	bic.w	r3, r3, r2
 8008462:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <xTaskPriorityInherit+0xac>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800846c:	2401      	movs	r4, #1
 800846e:	fa04 f203 	lsl.w	r2, r4, r3
 8008472:	490f      	ldr	r1, [pc, #60]	; (80084b0 <xTaskPriorityInherit+0xb4>)
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	4302      	orrs	r2, r0
 8008478:	600a      	str	r2, [r1, #0]
 800847a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800847e:	009a      	lsls	r2, r3, #2
 8008480:	4629      	mov	r1, r5
 8008482:	480a      	ldr	r0, [pc, #40]	; (80084ac <xTaskPriorityInherit+0xb0>)
 8008484:	4410      	add	r0, r2
 8008486:	f7ff f886 	bl	8007596 <vListInsertEnd>
				xReturn = pdTRUE;
 800848a:	4620      	mov	r0, r4
 800848c:	e7d6      	b.n	800843c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800848e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <xTaskPriorityInherit+0xac>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	429a      	cmp	r2, r3
 8008498:	d201      	bcs.n	800849e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 800849a:	2001      	movs	r0, #1
		return xReturn;
 800849c:	e7ce      	b.n	800843c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800849e:	2000      	movs	r0, #0
 80084a0:	e7cc      	b.n	800843c <xTaskPriorityInherit+0x40>
 80084a2:	2000      	movs	r0, #0
	}
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000598 	.word	0x20000598
 80084ac:	200005a4 	.word	0x200005a4
 80084b0:	20000644 	.word	0x20000644

080084b4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d04d      	beq.n	8008554 <xTaskPriorityDisinherit+0xa0>
	{
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80084bc:	4a28      	ldr	r2, [pc, #160]	; (8008560 <xTaskPriorityDisinherit+0xac>)
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	4282      	cmp	r2, r0
 80084c2:	d00a      	beq.n	80084da <xTaskPriorityDisinherit+0x26>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	b672      	cpsid	i
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	b662      	cpsie	i
 80084d8:	e7fe      	b.n	80084d8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80084da:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80084dc:	b952      	cbnz	r2, 80084f4 <xTaskPriorityDisinherit+0x40>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	e7fe      	b.n	80084f2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80084f4:	3a01      	subs	r2, #1
 80084f6:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80084fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80084fc:	4288      	cmp	r0, r1
 80084fe:	d02b      	beq.n	8008558 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008500:	bb62      	cbnz	r2, 800855c <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008502:	1d25      	adds	r5, r4, #4
 8008504:	4628      	mov	r0, r5
 8008506:	f7ff f86c 	bl	80075e2 <uxListRemove>
 800850a:	b970      	cbnz	r0, 800852a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800850c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800850e:	2314      	movs	r3, #20
 8008510:	fb03 f302 	mul.w	r3, r3, r2
 8008514:	4913      	ldr	r1, [pc, #76]	; (8008564 <xTaskPriorityDisinherit+0xb0>)
 8008516:	58cb      	ldr	r3, [r1, r3]
 8008518:	b93b      	cbnz	r3, 800852a <xTaskPriorityDisinherit+0x76>
 800851a:	2301      	movs	r3, #1
 800851c:	fa03 f202 	lsl.w	r2, r3, r2
 8008520:	4911      	ldr	r1, [pc, #68]	; (8008568 <xTaskPriorityDisinherit+0xb4>)
 8008522:	680b      	ldr	r3, [r1, #0]
 8008524:	ea23 0302 	bic.w	r3, r3, r2
 8008528:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800852a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800852c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852e:	f1c3 0207 	rsb	r2, r3, #7
 8008532:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008534:	2401      	movs	r4, #1
 8008536:	fa04 f203 	lsl.w	r2, r4, r3
 800853a:	490b      	ldr	r1, [pc, #44]	; (8008568 <xTaskPriorityDisinherit+0xb4>)
 800853c:	6808      	ldr	r0, [r1, #0]
 800853e:	4302      	orrs	r2, r0
 8008540:	600a      	str	r2, [r1, #0]
 8008542:	4629      	mov	r1, r5
 8008544:	4a07      	ldr	r2, [pc, #28]	; (8008564 <xTaskPriorityDisinherit+0xb0>)
 8008546:	2014      	movs	r0, #20
 8008548:	fb00 2003 	mla	r0, r0, r3, r2
 800854c:	f7ff f823 	bl	8007596 <vListInsertEnd>
					xReturn = pdTRUE;
 8008550:	4620      	mov	r0, r4
	}
 8008552:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008554:	2000      	movs	r0, #0
	}
 8008556:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008558:	2000      	movs	r0, #0
 800855a:	e7fa      	b.n	8008552 <xTaskPriorityDisinherit+0x9e>
 800855c:	2000      	movs	r0, #0
		return xReturn;
 800855e:	e7f8      	b.n	8008552 <xTaskPriorityDisinherit+0x9e>
 8008560:	20000598 	.word	0x20000598
 8008564:	200005a4 	.word	0x200005a4
 8008568:	20000644 	.word	0x20000644

0800856c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800856c:	2800      	cmp	r0, #0
 800856e:	d059      	beq.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008574:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008576:	b950      	cbnz	r0, 800858e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	b672      	cpsid	i
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	b662      	cpsie	i
 800858c:	e7fe      	b.n	800858c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800858e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008590:	428a      	cmp	r2, r1
 8008592:	d200      	bcs.n	8008596 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008594:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008598:	4291      	cmp	r1, r2
 800859a:	d001      	beq.n	80085a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800859c:	2801      	cmp	r0, #1
 800859e:	d000      	beq.n	80085a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80085a2:	4821      	ldr	r0, [pc, #132]	; (8008628 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80085a4:	6800      	ldr	r0, [r0, #0]
 80085a6:	4298      	cmp	r0, r3
 80085a8:	d10a      	bne.n	80085c0 <vTaskPriorityDisinheritAfterTimeout+0x54>
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	b672      	cpsid	i
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	b662      	cpsie	i
 80085be:	e7fe      	b.n	80085be <vTaskPriorityDisinheritAfterTimeout+0x52>
					pxTCB->uxPriority = uxPriorityToUse;
 80085c0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085c2:	6998      	ldr	r0, [r3, #24]
 80085c4:	2800      	cmp	r0, #0
 80085c6:	db02      	blt.n	80085ce <vTaskPriorityDisinheritAfterTimeout+0x62>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c8:	f1c2 0207 	rsb	r2, r2, #7
 80085cc:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ce:	695a      	ldr	r2, [r3, #20]
 80085d0:	4816      	ldr	r0, [pc, #88]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80085d2:	2414      	movs	r4, #20
 80085d4:	fb04 0101 	mla	r1, r4, r1, r0
 80085d8:	428a      	cmp	r2, r1
 80085da:	d1e1      	bne.n	80085a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80085dc:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085de:	1d1d      	adds	r5, r3, #4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f7fe fffe 	bl	80075e2 <uxListRemove>
 80085e6:	b970      	cbnz	r0, 8008606 <vTaskPriorityDisinheritAfterTimeout+0x9a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80085ea:	2314      	movs	r3, #20
 80085ec:	fb03 f302 	mul.w	r3, r3, r2
 80085f0:	490e      	ldr	r1, [pc, #56]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80085f2:	58cb      	ldr	r3, [r1, r3]
 80085f4:	b93b      	cbnz	r3, 8008606 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80085f6:	2301      	movs	r3, #1
 80085f8:	fa03 f202 	lsl.w	r2, r3, r2
 80085fc:	490c      	ldr	r1, [pc, #48]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	ea23 0302 	bic.w	r3, r3, r2
 8008604:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8008606:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008608:	2301      	movs	r3, #1
 800860a:	4093      	lsls	r3, r2
 800860c:	4908      	ldr	r1, [pc, #32]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800860e:	6808      	ldr	r0, [r1, #0]
 8008610:	4303      	orrs	r3, r0
 8008612:	600b      	str	r3, [r1, #0]
 8008614:	4629      	mov	r1, r5
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8008618:	2014      	movs	r0, #20
 800861a:	fb00 3002 	mla	r0, r0, r2, r3
 800861e:	f7fe ffba 	bl	8007596 <vListInsertEnd>
	}
 8008622:	e7bd      	b.n	80085a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20000598 	.word	0x20000598
 800862c:	200005a4 	.word	0x200005a4
 8008630:	20000644 	.word	0x20000644

08008634 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <pvTaskIncrementMutexHeldCount+0x18>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	b123      	cbz	r3, 8008644 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800863a:	4b04      	ldr	r3, [pc, #16]	; (800864c <pvTaskIncrementMutexHeldCount+0x18>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008640:	3301      	adds	r3, #1
 8008642:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8008644:	4b01      	ldr	r3, [pc, #4]	; (800864c <pvTaskIncrementMutexHeldCount+0x18>)
 8008646:	6818      	ldr	r0, [r3, #0]
	}
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000598 	.word	0x20000598

08008650 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008650:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <prvTaskExitError+0x44>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800865e:	d00a      	beq.n	8008676 <prvTaskExitError+0x26>
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	b672      	cpsid	i
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	b662      	cpsie	i
 8008674:	e7fe      	b.n	8008674 <prvTaskExitError+0x24>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	b672      	cpsid	i
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0fc      	beq.n	800868a <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008690:	b002      	add	sp, #8
 8008692:	4770      	bx	lr
 8008694:	20000048 	.word	0x20000048

08008698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008698:	4808      	ldr	r0, [pc, #32]	; (80086bc <prvPortStartFirstTask+0x24>)
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	f380 8808 	msr	MSP, r0
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8814 	msr	CONTROL, r0
 80086aa:	b662      	cpsie	i
 80086ac:	b661      	cpsie	f
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	df00      	svc	0
 80086b8:	bf00      	nop
 80086ba:	0000      	.short	0x0000
 80086bc:	e000ed08 	.word	0xe000ed08

080086c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086d0 <vPortEnableVFP+0x10>
 80086c4:	6801      	ldr	r1, [r0, #0]
 80086c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ca:	6001      	str	r1, [r0, #0]
 80086cc:	4770      	bx	lr
 80086ce:	0000      	.short	0x0000
 80086d0:	e000ed88 	.word	0xe000ed88

080086d4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086dc:	f021 0101 	bic.w	r1, r1, #1
 80086e0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e4:	4b05      	ldr	r3, [pc, #20]	; (80086fc <pxPortInitialiseStack+0x28>)
 80086e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086ea:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086ee:	f06f 0302 	mvn.w	r3, #2
 80086f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80086f6:	3844      	subs	r0, #68	; 0x44
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	08008651 	.word	0x08008651

08008700 <SVC_Handler>:
	__asm volatile (
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <pxCurrentTCBConst2>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6808      	ldr	r0, [r1, #0]
 8008706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	f380 8809 	msr	PSP, r0
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8811 	msr	BASEPRI, r0
 800871a:	4770      	bx	lr
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst2>:
 8008720:	20000598 	.word	0x20000598

08008724 <vPortEnterCritical>:
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	b672      	cpsid	i
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	b662      	cpsie	i
	uxCriticalNesting++;
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <vPortEnterCritical+0x44>)
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	3301      	adds	r3, #1
 800873e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008740:	2b01      	cmp	r3, #1
 8008742:	d000      	beq.n	8008746 <vPortEnterCritical+0x22>
}
 8008744:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <vPortEnterCritical+0x48>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800874e:	d0f9      	beq.n	8008744 <vPortEnterCritical+0x20>
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	b672      	cpsid	i
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	b662      	cpsie	i
 8008764:	e7fe      	b.n	8008764 <vPortEnterCritical+0x40>
 8008766:	bf00      	nop
 8008768:	20000048 	.word	0x20000048
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <vPortExitCritical+0x2c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	b953      	cbnz	r3, 800878c <vPortExitCritical+0x1c>
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	b672      	cpsid	i
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	b662      	cpsie	i
 800878a:	e7fe      	b.n	800878a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800878c:	3b01      	subs	r3, #1
 800878e:	4a03      	ldr	r2, [pc, #12]	; (800879c <vPortExitCritical+0x2c>)
 8008790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008792:	b90b      	cbnz	r3, 8008798 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008794:	f383 8811 	msr	BASEPRI, r3
}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000048 	.word	0x20000048

080087a0 <PendSV_Handler>:
	__asm volatile
 80087a0:	f3ef 8009 	mrs	r0, PSP
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <pxCurrentTCBConst>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	f01e 0f10 	tst.w	lr, #16
 80087b0:	bf08      	it	eq
 80087b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087c4:	b672      	cpsid	i
 80087c6:	f380 8811 	msr	BASEPRI, r0
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	b662      	cpsie	i
 80087d4:	f7ff fcfc 	bl	80081d0 <vTaskSwitchContext>
 80087d8:	f04f 0000 	mov.w	r0, #0
 80087dc:	f380 8811 	msr	BASEPRI, r0
 80087e0:	bc09      	pop	{r0, r3}
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	f01e 0f10 	tst.w	lr, #16
 80087ee:	bf08      	it	eq
 80087f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087f4:	f380 8809 	msr	PSP, r0
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop

08008800 <pxCurrentTCBConst>:
 8008800:	20000598 	.word	0x20000598

08008804 <SysTick_Handler>:
{
 8008804:	b508      	push	{r3, lr}
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	b672      	cpsid	i
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800881a:	f7ff fba7 	bl	8007f6c <xTaskIncrementTick>
 800881e:	b118      	cbz	r0, 8008828 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008820:	4b03      	ldr	r3, [pc, #12]	; (8008830 <SysTick_Handler+0x2c>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008828:	2300      	movs	r3, #0
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bd08      	pop	{r3, pc}
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008834:	4a08      	ldr	r2, [pc, #32]	; (8008858 <vPortSetupTimerInterrupt+0x24>)
 8008836:	2300      	movs	r3, #0
 8008838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800883a:	4908      	ldr	r1, [pc, #32]	; (800885c <vPortSetupTimerInterrupt+0x28>)
 800883c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800883e:	4b08      	ldr	r3, [pc, #32]	; (8008860 <vPortSetupTimerInterrupt+0x2c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4908      	ldr	r1, [pc, #32]	; (8008864 <vPortSetupTimerInterrupt+0x30>)
 8008844:	fba1 1303 	umull	r1, r3, r1, r3
 8008848:	099b      	lsrs	r3, r3, #6
 800884a:	3b01      	subs	r3, #1
 800884c:	4906      	ldr	r1, [pc, #24]	; (8008868 <vPortSetupTimerInterrupt+0x34>)
 800884e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008850:	2307      	movs	r3, #7
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	e000e010 	.word	0xe000e010
 800885c:	e000e018 	.word	0xe000e018
 8008860:	2000005c 	.word	0x2000005c
 8008864:	10624dd3 	.word	0x10624dd3
 8008868:	e000e014 	.word	0xe000e014

0800886c <xPortStartScheduler>:
{
 800886c:	b510      	push	{r4, lr}
 800886e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008870:	4b2c      	ldr	r3, [pc, #176]	; (8008924 <xPortStartScheduler+0xb8>)
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008884:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008888:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800888c:	4a26      	ldr	r2, [pc, #152]	; (8008928 <xPortStartScheduler+0xbc>)
 800888e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008890:	4b26      	ldr	r3, [pc, #152]	; (800892c <xPortStartScheduler+0xc0>)
 8008892:	2207      	movs	r2, #7
 8008894:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008896:	e009      	b.n	80088ac <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8008898:	4a24      	ldr	r2, [pc, #144]	; (800892c <xPortStartScheduler+0xc0>)
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	3b01      	subs	r3, #1
 800889e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80088b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088b4:	d1f0      	bne.n	8008898 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088b6:	4b1d      	ldr	r3, [pc, #116]	; (800892c <xPortStartScheduler+0xc0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d00a      	beq.n	80088d4 <xPortStartScheduler+0x68>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	b672      	cpsid	i
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	b662      	cpsie	i
 80088d2:	e7fe      	b.n	80088d2 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088d4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088da:	4a14      	ldr	r2, [pc, #80]	; (800892c <xPortStartScheduler+0xc0>)
 80088dc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <xPortStartScheduler+0xb8>)
 80088e4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088e6:	4b12      	ldr	r3, [pc, #72]	; (8008930 <xPortStartScheduler+0xc4>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80088ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80088f6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80088f8:	f7ff ff9c 	bl	8008834 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80088fc:	2400      	movs	r4, #0
 80088fe:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <xPortStartScheduler+0xc8>)
 8008900:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008902:	f7ff fedd 	bl	80086c0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008906:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <xPortStartScheduler+0xcc>)
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800890e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008910:	f7ff fec2 	bl	8008698 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008914:	f7ff fc5c 	bl	80081d0 <vTaskSwitchContext>
	prvTaskExitError();
 8008918:	f7ff fe9a 	bl	8008650 <prvTaskExitError>
}
 800891c:	4620      	mov	r0, r4
 800891e:	b002      	add	sp, #8
 8008920:	bd10      	pop	{r4, pc}
 8008922:	bf00      	nop
 8008924:	e000e400 	.word	0xe000e400
 8008928:	200006c4 	.word	0x200006c4
 800892c:	200006c8 	.word	0x200006c8
 8008930:	e000ed20 	.word	0xe000ed20
 8008934:	20000048 	.word	0x20000048
 8008938:	e000ef34 	.word	0xe000ef34

0800893c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800893c:	4a12      	ldr	r2, [pc, #72]	; (8008988 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800893e:	f012 0f07 	tst.w	r2, #7
 8008942:	d01e      	beq.n	8008982 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008944:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008946:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800894a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800894e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008950:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008952:	480e      	ldr	r0, [pc, #56]	; (800898c <prvHeapInit+0x50>)
 8008954:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008956:	2100      	movs	r1, #0
 8008958:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800895a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800895c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800895e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8008962:	480b      	ldr	r0, [pc, #44]	; (8008990 <prvHeapInit+0x54>)
 8008964:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8008966:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008968:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800896a:	1a99      	subs	r1, r3, r2
 800896c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800896e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008970:	4b08      	ldr	r3, [pc, #32]	; (8008994 <prvHeapInit+0x58>)
 8008972:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <prvHeapInit+0x5c>)
 8008976:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008978:	4b08      	ldr	r3, [pc, #32]	; (800899c <prvHeapInit+0x60>)
 800897a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800897e:	601a      	str	r2, [r3, #0]
}
 8008980:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008982:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008986:	e7e4      	b.n	8008952 <prvHeapInit+0x16>
 8008988:	200006d0 	.word	0x200006d0
 800898c:	200042dc 	.word	0x200042dc
 8008990:	200006cc 	.word	0x200006cc
 8008994:	200042d8 	.word	0x200042d8
 8008998:	200042d4 	.word	0x200042d4
 800899c:	200042d0 	.word	0x200042d0

080089a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089a0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <prvInsertBlockIntoFreeList+0x50>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4282      	cmp	r2, r0
 80089a8:	d31b      	bcc.n	80089e2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089aa:	6859      	ldr	r1, [r3, #4]
 80089ac:	185c      	adds	r4, r3, r1
 80089ae:	4284      	cmp	r4, r0
 80089b0:	d103      	bne.n	80089ba <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089b2:	6840      	ldr	r0, [r0, #4]
 80089b4:	4401      	add	r1, r0
 80089b6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089b8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089ba:	6841      	ldr	r1, [r0, #4]
 80089bc:	1844      	adds	r4, r0, r1
 80089be:	42a2      	cmp	r2, r4
 80089c0:	d113      	bne.n	80089ea <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089c2:	4c0c      	ldr	r4, [pc, #48]	; (80089f4 <prvInsertBlockIntoFreeList+0x54>)
 80089c4:	6824      	ldr	r4, [r4, #0]
 80089c6:	42a2      	cmp	r2, r4
 80089c8:	d00d      	beq.n	80089e6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ca:	6852      	ldr	r2, [r2, #4]
 80089cc:	4411      	add	r1, r2
 80089ce:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089d6:	4298      	cmp	r0, r3
 80089d8:	d000      	beq.n	80089dc <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089da:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e2:	4613      	mov	r3, r2
 80089e4:	e7de      	b.n	80089a4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089e6:	6004      	str	r4, [r0, #0]
 80089e8:	e7f5      	b.n	80089d6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089ea:	6002      	str	r2, [r0, #0]
 80089ec:	e7f3      	b.n	80089d6 <prvInsertBlockIntoFreeList+0x36>
 80089ee:	bf00      	nop
 80089f0:	200042dc 	.word	0x200042dc
 80089f4:	200006cc 	.word	0x200006cc

080089f8 <pvPortMalloc>:
{
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80089fc:	f7ff faae 	bl	8007f5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008a00:	4b3d      	ldr	r3, [pc, #244]	; (8008af8 <pvPortMalloc+0x100>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	b1cb      	cbz	r3, 8008a3a <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a06:	4b3d      	ldr	r3, [pc, #244]	; (8008afc <pvPortMalloc+0x104>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	421c      	tst	r4, r3
 8008a0c:	d169      	bne.n	8008ae2 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 8008a0e:	b1bc      	cbz	r4, 8008a40 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8008a10:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a12:	f014 0f07 	tst.w	r4, #7
 8008a16:	d013      	beq.n	8008a40 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a18:	f024 0407 	bic.w	r4, r4, #7
 8008a1c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a1e:	f004 0307 	and.w	r3, r4, #7
 8008a22:	b16b      	cbz	r3, 8008a40 <pvPortMalloc+0x48>
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	b672      	cpsid	i
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	b662      	cpsie	i
 8008a38:	e7fe      	b.n	8008a38 <pvPortMalloc+0x40>
			prvHeapInit();
 8008a3a:	f7ff ff7f 	bl	800893c <prvHeapInit>
 8008a3e:	e7e2      	b.n	8008a06 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	d050      	beq.n	8008ae6 <pvPortMalloc+0xee>
 8008a44:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <pvPortMalloc+0x108>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d34e      	bcc.n	8008aea <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 8008a4c:	4b2d      	ldr	r3, [pc, #180]	; (8008b04 <pvPortMalloc+0x10c>)
 8008a4e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a50:	e001      	b.n	8008a56 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8008a52:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a54:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a56:	686a      	ldr	r2, [r5, #4]
 8008a58:	42a2      	cmp	r2, r4
 8008a5a:	d202      	bcs.n	8008a62 <pvPortMalloc+0x6a>
 8008a5c:	682a      	ldr	r2, [r5, #0]
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	d1f7      	bne.n	8008a52 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8008a62:	4a25      	ldr	r2, [pc, #148]	; (8008af8 <pvPortMalloc+0x100>)
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	42aa      	cmp	r2, r5
 8008a68:	d041      	beq.n	8008aee <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a6a:	681e      	ldr	r6, [r3, #0]
 8008a6c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a6e:	682a      	ldr	r2, [r5, #0]
 8008a70:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a72:	686b      	ldr	r3, [r5, #4]
 8008a74:	1b1b      	subs	r3, r3, r4
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d912      	bls.n	8008aa0 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a7a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a7c:	f010 0f07 	tst.w	r0, #7
 8008a80:	d00a      	beq.n	8008a98 <pvPortMalloc+0xa0>
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	b672      	cpsid	i
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	b662      	cpsie	i
 8008a96:	e7fe      	b.n	8008a96 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a98:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a9a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a9c:	f7ff ff80 	bl	80089a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aa0:	686a      	ldr	r2, [r5, #4]
 8008aa2:	4917      	ldr	r1, [pc, #92]	; (8008b00 <pvPortMalloc+0x108>)
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008aaa:	4917      	ldr	r1, [pc, #92]	; (8008b08 <pvPortMalloc+0x110>)
 8008aac:	6809      	ldr	r1, [r1, #0]
 8008aae:	428b      	cmp	r3, r1
 8008ab0:	d201      	bcs.n	8008ab6 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ab2:	4915      	ldr	r1, [pc, #84]	; (8008b08 <pvPortMalloc+0x110>)
 8008ab4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <pvPortMalloc+0x104>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008ac2:	f7ff fae1 	bl	8008088 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac6:	f016 0f07 	tst.w	r6, #7
 8008aca:	d012      	beq.n	8008af2 <pvPortMalloc+0xfa>
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	e7fe      	b.n	8008ae0 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	e7ed      	b.n	8008ac2 <pvPortMalloc+0xca>
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	e7eb      	b.n	8008ac2 <pvPortMalloc+0xca>
 8008aea:	2600      	movs	r6, #0
 8008aec:	e7e9      	b.n	8008ac2 <pvPortMalloc+0xca>
 8008aee:	2600      	movs	r6, #0
 8008af0:	e7e7      	b.n	8008ac2 <pvPortMalloc+0xca>
}
 8008af2:	4630      	mov	r0, r6
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
 8008af6:	bf00      	nop
 8008af8:	200006cc 	.word	0x200006cc
 8008afc:	200042d0 	.word	0x200042d0
 8008b00:	200042d4 	.word	0x200042d4
 8008b04:	200042dc 	.word	0x200042dc
 8008b08:	200042d8 	.word	0x200042d8

08008b0c <vPortFree>:
	if( pv != NULL )
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d034      	beq.n	8008b7a <vPortFree+0x6e>
{
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008b14:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b18:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008b1c:	4917      	ldr	r1, [pc, #92]	; (8008b7c <vPortFree+0x70>)
 8008b1e:	6809      	ldr	r1, [r1, #0]
 8008b20:	420a      	tst	r2, r1
 8008b22:	d10a      	bne.n	8008b3a <vPortFree+0x2e>
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	e7fe      	b.n	8008b38 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b3a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8008b3e:	b150      	cbz	r0, 8008b56 <vPortFree+0x4a>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	b672      	cpsid	i
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	b662      	cpsie	i
 8008b54:	e7fe      	b.n	8008b54 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b56:	ea22 0201 	bic.w	r2, r2, r1
 8008b5a:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8008b5e:	f7ff f9fd 	bl	8007f5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b62:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008b66:	4a06      	ldr	r2, [pc, #24]	; (8008b80 <vPortFree+0x74>)
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	440b      	add	r3, r1
 8008b6c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7ff ff16 	bl	80089a0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008b74:	f7ff fa88 	bl	8008088 <xTaskResumeAll>
}
 8008b78:	bd38      	pop	{r3, r4, r5, pc}
 8008b7a:	4770      	bx	lr
 8008b7c:	200042d0 	.word	0x200042d0
 8008b80:	200042d4 	.word	0x200042d4

08008b84 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008b84:	b500      	push	{lr}
 8008b86:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	9302      	str	r3, [sp, #8]
 8008b90:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8008b92:	4829      	ldr	r0, [pc, #164]	; (8008c38 <MX_ADC3_Init+0xb4>)
 8008b94:	4a29      	ldr	r2, [pc, #164]	; (8008c3c <MX_ADC3_Init+0xb8>)
 8008b96:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b9c:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008b9e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	6102      	str	r2, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008ba4:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008ba6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8008baa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8008bae:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8008bb0:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
 8008bb4:	6281      	str	r1, [r0, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008bb6:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 4;
 8008bb8:	2104      	movs	r1, #4
 8008bba:	61c1      	str	r1, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8008bbc:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008bc0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008bc2:	f7f9 fb57 	bl	8002274 <HAL_ADC_Init>
 8008bc6:	bb40      	cbnz	r0, 8008c1a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8008bd0:	2306      	movs	r3, #6
 8008bd2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008bd4:	4669      	mov	r1, sp
 8008bd6:	4818      	ldr	r0, [pc, #96]	; (8008c38 <MX_ADC3_Init+0xb4>)
 8008bd8:	f7f9 fdb2 	bl	8002740 <HAL_ADC_ConfigChannel>
 8008bdc:	bb00      	cbnz	r0, 8008c20 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8008bde:	2306      	movs	r3, #6
 8008be0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008be2:	2302      	movs	r3, #2
 8008be4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008be6:	4669      	mov	r1, sp
 8008be8:	4813      	ldr	r0, [pc, #76]	; (8008c38 <MX_ADC3_Init+0xb4>)
 8008bea:	f7f9 fda9 	bl	8002740 <HAL_ADC_ConfigChannel>
 8008bee:	b9d0      	cbnz	r0, 8008c26 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008bf0:	2307      	movs	r3, #7
 8008bf2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008bf8:	4669      	mov	r1, sp
 8008bfa:	480f      	ldr	r0, [pc, #60]	; (8008c38 <MX_ADC3_Init+0xb4>)
 8008bfc:	f7f9 fda0 	bl	8002740 <HAL_ADC_ConfigChannel>
 8008c00:	b9a0      	cbnz	r0, 8008c2c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008c02:	2308      	movs	r3, #8
 8008c04:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008c06:	2304      	movs	r3, #4
 8008c08:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008c0a:	4669      	mov	r1, sp
 8008c0c:	480a      	ldr	r0, [pc, #40]	; (8008c38 <MX_ADC3_Init+0xb4>)
 8008c0e:	f7f9 fd97 	bl	8002740 <HAL_ADC_ConfigChannel>
 8008c12:	b970      	cbnz	r0, 8008c32 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
  }

}
 8008c14:	b005      	add	sp, #20
 8008c16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008c1a:	f001 f8bb 	bl	8009d94 <Error_Handler>
 8008c1e:	e7d3      	b.n	8008bc8 <MX_ADC3_Init+0x44>
    Error_Handler();
 8008c20:	f001 f8b8 	bl	8009d94 <Error_Handler>
 8008c24:	e7db      	b.n	8008bde <MX_ADC3_Init+0x5a>
    Error_Handler();
 8008c26:	f001 f8b5 	bl	8009d94 <Error_Handler>
 8008c2a:	e7e1      	b.n	8008bf0 <MX_ADC3_Init+0x6c>
    Error_Handler();
 8008c2c:	f001 f8b2 	bl	8009d94 <Error_Handler>
 8008c30:	e7e7      	b.n	8008c02 <MX_ADC3_Init+0x7e>
    Error_Handler();
 8008c32:	f001 f8af 	bl	8009d94 <Error_Handler>
}
 8008c36:	e7ed      	b.n	8008c14 <MX_ADC3_Init+0x90>
 8008c38:	20004644 	.word	0x20004644
 8008c3c:	40012200 	.word	0x40012200

08008c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008c40:	b530      	push	{r4, r5, lr}
 8008c42:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c44:	2300      	movs	r3, #0
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	9306      	str	r3, [sp, #24]
 8008c4e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC3)
 8008c50:	6802      	ldr	r2, [r0, #0]
 8008c52:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <HAL_ADC_MspInit+0xd0>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d001      	beq.n	8008c5c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8008c58:	b009      	add	sp, #36	; 0x24
 8008c5a:	bd30      	pop	{r4, r5, pc}
 8008c5c:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008c5e:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8008c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c68:	645a      	str	r2, [r3, #68]	; 0x44
 8008c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c6c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008c70:	9200      	str	r2, [sp, #0]
 8008c72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c76:	f042 0220 	orr.w	r2, r2, #32
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c7e:	f002 0220 	and.w	r2, r2, #32
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8008c98:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008c9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c9e:	2503      	movs	r5, #3
 8008ca0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ca2:	a903      	add	r1, sp, #12
 8008ca4:	481b      	ldr	r0, [pc, #108]	; (8008d14 <HAL_ADC_MspInit+0xd4>)
 8008ca6:	f7fa fab9 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 8008caa:	2301      	movs	r3, #1
 8008cac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cae:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb0:	2500      	movs	r5, #0
 8008cb2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8008cb4:	a903      	add	r1, sp, #12
 8008cb6:	4818      	ldr	r0, [pc, #96]	; (8008d18 <HAL_ADC_MspInit+0xd8>)
 8008cb8:	f7fa fab0 	bl	800321c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8008cbc:	4817      	ldr	r0, [pc, #92]	; (8008d1c <HAL_ADC_MspInit+0xdc>)
 8008cbe:	4b18      	ldr	r3, [pc, #96]	; (8008d20 <HAL_ADC_MspInit+0xe0>)
 8008cc0:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008cc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cc6:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cc8:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cca:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8008ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cd0:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd6:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cdc:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8008cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce2:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8008ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ce8:	6203      	str	r3, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008cea:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8008cec:	f7f9 ff42 	bl	8002b74 <HAL_DMA_Init>
 8008cf0:	b958      	cbnz	r0, 8008d0a <HAL_ADC_MspInit+0xca>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <HAL_ADC_MspInit+0xdc>)
 8008cf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cf6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2105      	movs	r1, #5
 8008cfc:	2012      	movs	r0, #18
 8008cfe:	f7f9 fe09 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008d02:	2012      	movs	r0, #18
 8008d04:	f7f9 fe38 	bl	8002978 <HAL_NVIC_EnableIRQ>
}
 8008d08:	e7a6      	b.n	8008c58 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8008d0a:	f001 f843 	bl	8009d94 <Error_Handler>
 8008d0e:	e7f0      	b.n	8008cf2 <HAL_ADC_MspInit+0xb2>
 8008d10:	40012200 	.word	0x40012200
 8008d14:	40021400 	.word	0x40021400
 8008d18:	40020000 	.word	0x40020000
 8008d1c:	200045e4 	.word	0x200045e4
 8008d20:	40026428 	.word	0x40026428

08008d24 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008d24:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8008d26:	4808      	ldr	r0, [pc, #32]	; (8008d48 <MX_CRC_Init+0x24>)
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <MX_CRC_Init+0x28>)
 8008d2a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008d30:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008d32:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008d34:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008d36:	2301      	movs	r3, #1
 8008d38:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008d3a:	f7f9 fe2b 	bl	8002994 <HAL_CRC_Init>
 8008d3e:	b900      	cbnz	r0, 8008d42 <MX_CRC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8008d40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008d42:	f001 f827 	bl	8009d94 <Error_Handler>
}
 8008d46:	e7fb      	b.n	8008d40 <MX_CRC_Init+0x1c>
 8008d48:	2000468c 	.word	0x2000468c
 8008d4c:	40023000 	.word	0x40023000

08008d50 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8008d50:	6802      	ldr	r2, [r0, #0]
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <HAL_CRC_MspInit+0x28>)
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d000      	beq.n	8008d5a <HAL_CRC_MspInit+0xa>
 8008d58:	4770      	bx	lr
{
 8008d5a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d66:	631a      	str	r2, [r3, #48]	; 0x30
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008d72:	b002      	add	sp, #8
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40023000 	.word	0x40023000

08008d7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008d7c:	b500      	push	{lr}
 8008d7e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <MX_DMA_Init+0x30>)
 8008d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008d94:	2200      	movs	r2, #0
 8008d96:	2105      	movs	r1, #5
 8008d98:	2039      	movs	r0, #57	; 0x39
 8008d9a:	f7f9 fdbb 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008d9e:	2039      	movs	r0, #57	; 0x39
 8008da0:	f7f9 fdea 	bl	8002978 <HAL_NVIC_EnableIRQ>

}
 8008da4:	b003      	add	sp, #12
 8008da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008daa:	bf00      	nop
 8008dac:	40023800 	.word	0x40023800

08008db0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8008db0:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 8008db2:	480d      	ldr	r0, [pc, #52]	; (8008de8 <MX_DMA2D_Init+0x38>)
 8008db4:	4b0d      	ldr	r3, [pc, #52]	; (8008dec <MX_DMA2D_Init+0x3c>)
 8008db6:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8008db8:	2300      	movs	r3, #0
 8008dba:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008dbc:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8008dbe:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8008dc0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008dc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008dc4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8008dc6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008dc8:	f7fa f8dc 	bl	8002f84 <HAL_DMA2D_Init>
 8008dcc:	b928      	cbnz	r0, 8008dda <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4805      	ldr	r0, [pc, #20]	; (8008de8 <MX_DMA2D_Init+0x38>)
 8008dd2:	f7fa f9c1 	bl	8003158 <HAL_DMA2D_ConfigLayer>
 8008dd6:	b918      	cbnz	r0, 8008de0 <MX_DMA2D_Init+0x30>
  {
    Error_Handler();
  }

}
 8008dd8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008dda:	f000 ffdb 	bl	8009d94 <Error_Handler>
 8008dde:	e7f6      	b.n	8008dce <MX_DMA2D_Init+0x1e>
    Error_Handler();
 8008de0:	f000 ffd8 	bl	8009d94 <Error_Handler>
}
 8008de4:	e7f8      	b.n	8008dd8 <MX_DMA2D_Init+0x28>
 8008de6:	bf00      	nop
 8008de8:	200046b0 	.word	0x200046b0
 8008dec:	4002b000 	.word	0x4002b000

08008df0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8008df0:	6802      	ldr	r2, [r0, #0]
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <HAL_DMA2D_MspInit+0x28>)
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d000      	beq.n	8008dfa <HAL_DMA2D_MspInit+0xa>
 8008df8:	4770      	bx	lr
{
 8008dfa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008dfc:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8008e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e02:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8008e12:	b002      	add	sp, #8
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	4002b000 	.word	0x4002b000

08008e1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e20:	2300      	movs	r3, #0
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <HAL_FMC_MspInit+0xa8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b10b      	cbz	r3, 8008e36 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008e32:	b007      	add	sp, #28
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8008e36:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <HAL_FMC_MspInit+0xa8>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008e3c:	4b22      	ldr	r3, [pc, #136]	; (8008ec8 <HAL_FMC_MspInit+0xac>)
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e40:	f042 0201 	orr.w	r2, r2, #1
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8008e50:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008e54:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e56:	2602      	movs	r6, #2
 8008e58:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e5a:	2503      	movs	r5, #3
 8008e5c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e5e:	240c      	movs	r4, #12
 8008e60:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e62:	a901      	add	r1, sp, #4
 8008e64:	4819      	ldr	r0, [pc, #100]	; (8008ecc <HAL_FMC_MspInit+0xb0>)
 8008e66:	f7fa f9d9 	bl	800321c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8008e6a:	f248 1311 	movw	r3, #33041	; 0x8111
 8008e6e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e70:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e72:	2700      	movs	r7, #0
 8008e74:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e76:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e78:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008e7a:	a901      	add	r1, sp, #4
 8008e7c:	4814      	ldr	r0, [pc, #80]	; (8008ed0 <HAL_FMC_MspInit+0xb4>)
 8008e7e:	f7fa f9cd 	bl	800321c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8008e82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008e86:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e88:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e8a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e8c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e8e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e90:	a901      	add	r1, sp, #4
 8008e92:	4810      	ldr	r0, [pc, #64]	; (8008ed4 <HAL_FMC_MspInit+0xb8>)
 8008e94:	f7fa f9c2 	bl	800321c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008e98:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008e9c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ea2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ea4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ea6:	a901      	add	r1, sp, #4
 8008ea8:	480b      	ldr	r0, [pc, #44]	; (8008ed8 <HAL_FMC_MspInit+0xbc>)
 8008eaa:	f7fa f9b7 	bl	800321c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8008eae:	232c      	movs	r3, #44	; 0x2c
 8008eb0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eb2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eb6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008eb8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008eba:	a901      	add	r1, sp, #4
 8008ebc:	4807      	ldr	r0, [pc, #28]	; (8008edc <HAL_FMC_MspInit+0xc0>)
 8008ebe:	f7fa f9ad 	bl	800321c <HAL_GPIO_Init>
 8008ec2:	e7b6      	b.n	8008e32 <HAL_FMC_MspInit+0x16>
 8008ec4:	200042e4 	.word	0x200042e4
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	40021800 	.word	0x40021800
 8008ed4:	40020c00 	.word	0x40020c00
 8008ed8:	40021400 	.word	0x40021400
 8008edc:	40021c00 	.word	0x40021c00

08008ee0 <MX_FMC_Init>:
{
 8008ee0:	b500      	push	{lr}
 8008ee2:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008ee4:	4810      	ldr	r0, [pc, #64]	; (8008f28 <MX_FMC_Init+0x48>)
 8008ee6:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <MX_FMC_Init+0x4c>)
 8008ee8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008eea:	2200      	movs	r2, #0
 8008eec:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008eee:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8008ef0:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008ef2:	2310      	movs	r3, #16
 8008ef4:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8008ef6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008ef8:	2180      	movs	r1, #128	; 0x80
 8008efa:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008efc:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008efe:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008f00:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008f02:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8008f04:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008f06:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008f08:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8008f0a:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008f0c:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 8008f0e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 8008f10:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008f12:	a901      	add	r1, sp, #4
 8008f14:	f7fb fe4e 	bl	8004bb4 <HAL_SDRAM_Init>
 8008f18:	b910      	cbnz	r0, 8008f20 <MX_FMC_Init+0x40>
}
 8008f1a:	b009      	add	sp, #36	; 0x24
 8008f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8008f20:	f000 ff38 	bl	8009d94 <Error_Handler>
}
 8008f24:	e7f9      	b.n	8008f1a <MX_FMC_Init+0x3a>
 8008f26:	bf00      	nop
 8008f28:	200046f0 	.word	0x200046f0
 8008f2c:	a0000140 	.word	0xa0000140

08008f30 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008f30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008f32:	f7ff ff73 	bl	8008e1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008f36:	bd08      	pop	{r3, pc}

08008f38 <StartDrawUI>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDrawUI */
void StartDrawUI(void const * argument)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN StartDrawUI */
	xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008f3c:	4c2c      	ldr	r4, [pc, #176]	; (8008ff0 <StartDrawUI+0xb8>)
 8008f3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f42:	6820      	ldr	r0, [r4, #0]
 8008f44:	f7fe fd4e 	bl	80079e4 <xQueueSemaphoreTake>
	initLCD(GPS);
 8008f48:	4b2a      	ldr	r3, [pc, #168]	; (8008ff4 <StartDrawUI+0xbc>)
 8008f4a:	f103 0210 	add.w	r2, r3, #16
 8008f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f50:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f56:	f7f8 fd65 	bl	8001a24 <initLCD>
	xSemaphoreGive(RxDataMutexHandle);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	f7fe fc61 	bl	8007828 <xQueueGenericSend>

	/* Infinite loop */
	for (;;) {
		xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008f66:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008ff0 <StartDrawUI+0xb8>
 8008f6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f6e:	f8d8 0000 	ldr.w	r0, [r8]
 8008f72:	f7fe fd37 	bl	80079e4 <xQueueSemaphoreTake>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008f76:	4f20      	ldr	r7, [pc, #128]	; (8008ff8 <StartDrawUI+0xc0>)
 8008f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7fe fd31 	bl	80079e4 <xQueueSemaphoreTake>
		xSemaphoreTake(EncDataMutexHandle, portMAX_DELAY);
 8008f82:	4e1e      	ldr	r6, [pc, #120]	; (8008ffc <StartDrawUI+0xc4>)
 8008f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f88:	6830      	ldr	r0, [r6, #0]
 8008f8a:	f7fe fd2b 	bl	80079e4 <xQueueSemaphoreTake>
		drawMainScreen(GPS, IMU, Misc, enc_pid);
 8008f8e:	4c19      	ldr	r4, [pc, #100]	; (8008ff4 <StartDrawUI+0xbc>)
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <StartDrawUI+0xc8>)
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <StartDrawUI+0xcc>)
 8008f96:	881a      	ldrh	r2, [r3, #0]
 8008f98:	789b      	ldrb	r3, [r3, #2]
 8008f9a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8008f9e:	f88d 301e 	strb.w	r3, [sp, #30]
 8008fa2:	4b19      	ldr	r3, [pc, #100]	; (8009008 <StartDrawUI+0xd0>)
 8008fa4:	ad03      	add	r5, sp, #12
 8008fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008fac:	f104 0310 	add.w	r3, r4, #16
 8008fb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008fbc:	f7f8 fe42 	bl	8001c44 <drawMainScreen>
		xSemaphoreGive(RxDataMutexHandle);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f8d8 0000 	ldr.w	r0, [r8]
 8008fca:	f7fe fc2d 	bl	8007828 <xQueueGenericSend>
		xSemaphoreGive(SwDataMutexHandle);
 8008fce:	2300      	movs	r3, #0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6838      	ldr	r0, [r7, #0]
 8008fd6:	f7fe fc27 	bl	8007828 <xQueueGenericSend>
		xSemaphoreGive(EncDataMutexHandle);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6830      	ldr	r0, [r6, #0]
 8008fe2:	f7fe fc21 	bl	8007828 <xQueueGenericSend>
		osDelay(20);
 8008fe6:	2014      	movs	r0, #20
 8008fe8:	f7fe fab9 	bl	800755e <osDelay>
 8008fec:	e7bb      	b.n	8008f66 <StartDrawUI+0x2e>
 8008fee:	bf00      	nop
 8008ff0:	200047c4 	.word	0x200047c4
 8008ff4:	200043fc 	.word	0x200043fc
 8008ff8:	200047f4 	.word	0x200047f4
 8008ffc:	200047f0 	.word	0x200047f0
 8009000:	200042e8 	.word	0x200042e8
 8009004:	20004464 	.word	0x20004464
 8009008:	200043a0 	.word	0x200043a0

0800900c <StartADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADC */
void StartADC(void const * argument)
{
 800900c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartADC */

	//	//Init ADC for DMA
	if (HAL_ADC_Start(&hadc3) == HAL_OK) {
 800900e:	481b      	ldr	r0, [pc, #108]	; (800907c <StartADC+0x70>)
 8009010:	f7f9 f95c 	bl	80022cc <HAL_ADC_Start>
 8009014:	b9c8      	cbnz	r0, 800904a <StartADC+0x3e>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t *) adcArray, 4);
 8009016:	2204      	movs	r2, #4
 8009018:	4919      	ldr	r1, [pc, #100]	; (8009080 <StartADC+0x74>)
 800901a:	4818      	ldr	r0, [pc, #96]	; (800907c <StartADC+0x70>)
 800901c:	f7f9 f9e8 	bl	80023f0 <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim1);
 8009020:	4818      	ldr	r0, [pc, #96]	; (8009084 <StartADC+0x78>)
 8009022:	f7fc fad1 	bl	80055c8 <HAL_TIM_Base_Start>
 8009026:	e010      	b.n	800904a <StartADC+0x3e>
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
			Misc.airmode = 1;
 8009028:	4b17      	ldr	r3, [pc, #92]	; (8009088 <StartADC+0x7c>)
 800902a:	2201      	movs	r2, #1
 800902c:	709a      	strb	r2, [r3, #2]
 800902e:	e01b      	b.n	8009068 <StartADC+0x5c>

		//SW2 - Kill switch
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
			Misc.kill = 1;
		} else {
			Misc.kill = 0;
 8009030:	4b15      	ldr	r3, [pc, #84]	; (8009088 <StartADC+0x7c>)
 8009032:	2200      	movs	r2, #0
 8009034:	705a      	strb	r2, [r3, #1]
		}
		xSemaphoreGive(SwDataMutexHandle);
 8009036:	2300      	movs	r3, #0
 8009038:	461a      	mov	r2, r3
 800903a:	4619      	mov	r1, r3
 800903c:	4813      	ldr	r0, [pc, #76]	; (800908c <StartADC+0x80>)
 800903e:	6800      	ldr	r0, [r0, #0]
 8009040:	f7fe fbf2 	bl	8007828 <xQueueGenericSend>
		osDelay(50);
 8009044:	2032      	movs	r0, #50	; 0x32
 8009046:	f7fe fa8a 	bl	800755e <osDelay>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 800904a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <StartADC+0x80>)
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	f7fe fcc7 	bl	80079e4 <xQueueSemaphoreTake>
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
 8009056:	2104      	movs	r1, #4
 8009058:	480d      	ldr	r0, [pc, #52]	; (8009090 <StartADC+0x84>)
 800905a:	f7fa f9cf 	bl	80033fc <HAL_GPIO_ReadPin>
 800905e:	2801      	cmp	r0, #1
 8009060:	d0e2      	beq.n	8009028 <StartADC+0x1c>
			Misc.airmode = 0;
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <StartADC+0x7c>)
 8009064:	2200      	movs	r2, #0
 8009066:	709a      	strb	r2, [r3, #2]
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
 8009068:	2101      	movs	r1, #1
 800906a:	4809      	ldr	r0, [pc, #36]	; (8009090 <StartADC+0x84>)
 800906c:	f7fa f9c6 	bl	80033fc <HAL_GPIO_ReadPin>
 8009070:	2800      	cmp	r0, #0
 8009072:	d1dd      	bne.n	8009030 <StartADC+0x24>
			Misc.kill = 1;
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <StartADC+0x7c>)
 8009076:	2201      	movs	r2, #1
 8009078:	705a      	strb	r2, [r3, #1]
 800907a:	e7dc      	b.n	8009036 <StartADC+0x2a>
 800907c:	20004644 	.word	0x20004644
 8009080:	200047a8 	.word	0x200047a8
 8009084:	20004944 	.word	0x20004944
 8009088:	20004464 	.word	0x20004464
 800908c:	200047f4 	.word	0x200047f4
 8009090:	40022000 	.word	0x40022000

08009094 <NRF24_init>:
void unpackAckPayload(struct GPS_str GPS, struct IMU_str IMU);

void unpackAckPayload_0();
void unpackAckPayload_1();

void NRF24_init(struct GPS_str GPS) {
 8009094:	b084      	sub	sp, #16
 8009096:	b510      	push	{r4, lr}
 8009098:	b09c      	sub	sp, #112	; 0x70
 800909a:	ac1e      	add	r4, sp, #120	; 0x78
 800909c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DWT_Init(); //For uS delays
 80090a0:	f7f8 ffea 	bl	8002078 <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, none);
 80090a4:	4c17      	ldr	r4, [pc, #92]	; (8009104 <NRF24_init+0x70>)
 80090a6:	2260      	movs	r2, #96	; 0x60
 80090a8:	1d21      	adds	r1, r4, #4
 80090aa:	4668      	mov	r0, sp
 80090ac:	f001 f8f8 	bl	800a2a0 <memcpy>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80090b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090ba:	4813      	ldr	r0, [pc, #76]	; (8009108 <NRF24_init+0x74>)
 80090bc:	f7f8 fbca 	bl	8001854 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80090c0:	4c12      	ldr	r4, [pc, #72]	; (800910c <NRF24_init+0x78>)
 80090c2:	2270      	movs	r2, #112	; 0x70
 80090c4:	f104 0110 	add.w	r1, r4, #16
 80090c8:	4668      	mov	r0, sp
 80090ca:	f001 f8e9 	bl	800a2a0 <memcpy>
 80090ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80090d2:	f7f8 fc95 	bl	8001a00 <nrf24_DebugUART_Init>

	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 80090d6:	f7f8 f9f0 	bl	80014ba <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80090da:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <NRF24_init+0x7c>)
 80090dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090e0:	f7f8 f9f4 	bl	80014cc <NRF24_openWritingPipe>

	//printRadioSettings();

	for (int i = 0; i < 31; ++i) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	e005      	b.n	80090f4 <NRF24_init+0x60>
		TxData[i] = 0;
 80090e8:	2200      	movs	r2, #0
 80090ea:	490a      	ldr	r1, [pc, #40]	; (8009114 <NRF24_init+0x80>)
 80090ec:	54ca      	strb	r2, [r1, r3]
		AckPayload[i] = 0;
 80090ee:	490a      	ldr	r1, [pc, #40]	; (8009118 <NRF24_init+0x84>)
 80090f0:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 31; ++i) {
 80090f2:	3301      	adds	r3, #1
 80090f4:	2b1e      	cmp	r3, #30
 80090f6:	ddf7      	ble.n	80090e8 <NRF24_init+0x54>
	GPS.Speed = 0.00;
	GPS.Year = 0;
	GPS.fix_quality = 0;
	GPS.sattelite_no = 0;

}
 80090f8:	b01c      	add	sp, #112	; 0x70
 80090fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fe:	b004      	add	sp, #16
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20004744 	.word	0x20004744
 8009108:	40020000 	.word	0x40020000
 800910c:	20004984 	.word	0x20004984
 8009110:	20000050 	.word	0x20000050
 8009114:	200047cc 	.word	0x200047cc
 8009118:	20004724 	.word	0x20004724

0800911c <packData>:
		return 0;
	}

}

void packData(uint32_t * array, bool airmode, bool kill, float *enc_pid) {
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	ed2d 8b02 	vpush	{d8}

//	array[1] = 4096 - array[1];
//	array[2] = 4096 - array[2];

	//L joystick X
	TxData[0] = array[0];
 8009122:	6805      	ldr	r5, [r0, #0]
 8009124:	4c38      	ldr	r4, [pc, #224]	; (8009208 <packData+0xec>)
 8009126:	7025      	strb	r5, [r4, #0]
	TxData[1] = array[0] >> 8;
 8009128:	6805      	ldr	r5, [r0, #0]
 800912a:	0a2d      	lsrs	r5, r5, #8
 800912c:	7065      	strb	r5, [r4, #1]

	//L joystick Y
	TxData[2] = array[3];
 800912e:	68c5      	ldr	r5, [r0, #12]
 8009130:	70a5      	strb	r5, [r4, #2]
	TxData[3] = array[3] >> 8;
 8009132:	0a2d      	lsrs	r5, r5, #8
 8009134:	70e5      	strb	r5, [r4, #3]

	//R joystick X
	TxData[4] = array[2];
 8009136:	6885      	ldr	r5, [r0, #8]
 8009138:	7125      	strb	r5, [r4, #4]
	TxData[5] = array[2] >> 8;
 800913a:	0a2d      	lsrs	r5, r5, #8
 800913c:	7165      	strb	r5, [r4, #5]

	//R joystick Y
	TxData[6] = array[1];
 800913e:	6845      	ldr	r5, [r0, #4]
 8009140:	71a5      	strb	r5, [r4, #6]
	TxData[7] = array[1] >> 8;
 8009142:	6840      	ldr	r0, [r0, #4]
 8009144:	0a00      	lsrs	r0, r0, #8
 8009146:	71e0      	strb	r0, [r4, #7]


	//Air mode bit
	if (airmode) {
 8009148:	b171      	cbz	r1, 8009168 <packData+0x4c>
		TxData[8] |= 1 << 0;
 800914a:	7a21      	ldrb	r1, [r4, #8]
 800914c:	f041 0101 	orr.w	r1, r1, #1
 8009150:	7221      	strb	r1, [r4, #8]
	} else {
		TxData[8] &= ~(1 << 0);
	}

	//Kill switch bit
	if (kill) {
 8009152:	b17a      	cbz	r2, 8009174 <packData+0x58>

		TxData[8] |= 1 << 1;
 8009154:	492c      	ldr	r1, [pc, #176]	; (8009208 <packData+0xec>)
 8009156:	7a0a      	ldrb	r2, [r1, #8]
 8009158:	f042 0202 	orr.w	r2, r2, #2
 800915c:	720a      	strb	r2, [r1, #8]
	} else {
		TxData[8] &= ~(1 << 1);
	}

	if(TxData[8]  > 0x03 ){
 800915e:	4a2a      	ldr	r2, [pc, #168]	; (8009208 <packData+0xec>)
 8009160:	7a12      	ldrb	r2, [r2, #8]
 8009162:	2a03      	cmp	r2, #3
 8009164:	d90c      	bls.n	8009180 <packData+0x64>
 8009166:	e7fe      	b.n	8009166 <packData+0x4a>
		TxData[8] &= ~(1 << 0);
 8009168:	4827      	ldr	r0, [pc, #156]	; (8009208 <packData+0xec>)
 800916a:	7a01      	ldrb	r1, [r0, #8]
 800916c:	f021 0101 	bic.w	r1, r1, #1
 8009170:	7201      	strb	r1, [r0, #8]
 8009172:	e7ee      	b.n	8009152 <packData+0x36>
		TxData[8] &= ~(1 << 1);
 8009174:	4924      	ldr	r1, [pc, #144]	; (8009208 <packData+0xec>)
 8009176:	7a0a      	ldrb	r2, [r1, #8]
 8009178:	f022 0202 	bic.w	r2, r2, #2
 800917c:	720a      	strb	r2, [r1, #8]
 800917e:	e7ee      	b.n	800915e <packData+0x42>
 8009180:	461c      	mov	r4, r3
		while(1);
	}

		uint16_t roll_p_tx = round(enc_pid[0] * 100);
 8009182:	edd3 7a00 	vldr	s15, [r3]
 8009186:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800920c <packData+0xf0>
 800918a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800918e:	ee17 0a90 	vmov	r0, s15
 8009192:	f7f7 fa03 	bl	800059c <__aeabi_f2d>
 8009196:	ec41 0b10 	vmov	d0, r0, r1
 800919a:	f006 fa83 	bl	800f6a4 <round>
 800919e:	ec51 0b10 	vmov	r0, r1, d0
 80091a2:	f7f7 fd2b 	bl	8000bfc <__aeabi_d2uiz>
 80091a6:	b286      	uxth	r6, r0
		uint16_t roll_i_tx = round(enc_pid[1] * 100) ;
 80091a8:	edd4 7a01 	vldr	s15, [r4, #4]
 80091ac:	ee67 7a88 	vmul.f32	s15, s15, s16
 80091b0:	ee17 0a90 	vmov	r0, s15
 80091b4:	f7f7 f9f2 	bl	800059c <__aeabi_f2d>
 80091b8:	ec41 0b10 	vmov	d0, r0, r1
 80091bc:	f006 fa72 	bl	800f6a4 <round>
 80091c0:	ec51 0b10 	vmov	r0, r1, d0
 80091c4:	f7f7 fd1a 	bl	8000bfc <__aeabi_d2uiz>
 80091c8:	b285      	uxth	r5, r0
		uint16_t roll_d_tx = round(enc_pid[2] * 100) ;
 80091ca:	edd4 7a02 	vldr	s15, [r4, #8]
 80091ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 80091d2:	ee17 0a90 	vmov	r0, s15
 80091d6:	f7f7 f9e1 	bl	800059c <__aeabi_f2d>
 80091da:	ec41 0b10 	vmov	d0, r0, r1
 80091de:	f006 fa61 	bl	800f6a4 <round>
 80091e2:	ec51 0b10 	vmov	r0, r1, d0
 80091e6:	f7f7 fd09 	bl	8000bfc <__aeabi_d2uiz>
 80091ea:	b280      	uxth	r0, r0

		TxData[9] = roll_p_tx;
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <packData+0xec>)
 80091ee:	725e      	strb	r6, [r3, #9]
		TxData[10] = roll_p_tx >> 8;
 80091f0:	0a36      	lsrs	r6, r6, #8
 80091f2:	729e      	strb	r6, [r3, #10]

		TxData[11] = roll_i_tx;
 80091f4:	72dd      	strb	r5, [r3, #11]
		TxData[12] = roll_i_tx >> 8;
 80091f6:	0a2d      	lsrs	r5, r5, #8
 80091f8:	731d      	strb	r5, [r3, #12]

		TxData[13] = roll_d_tx;
 80091fa:	7358      	strb	r0, [r3, #13]
		TxData[14] = roll_d_tx >> 8;
 80091fc:	0a00      	lsrs	r0, r0, #8
 80091fe:	7398      	strb	r0, [r3, #14]

}
 8009200:	ecbd 8b02 	vpop	{d8}
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	bf00      	nop
 8009208:	200047cc 	.word	0x200047cc
 800920c:	42c80000 	.word	0x42c80000

08009210 <unpackAckPayload_0>:

void unpackAckPayload_0() {
 8009210:	b410      	push	{r4}

	IMU.batteryLevel = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 8009212:	481f      	ldr	r0, [pc, #124]	; (8009290 <unpackAckPayload_0+0x80>)
 8009214:	7843      	ldrb	r3, [r0, #1]
 8009216:	7882      	ldrb	r2, [r0, #2]
 8009218:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800921c:	491d      	ldr	r1, [pc, #116]	; (8009294 <unpackAckPayload_0+0x84>)
 800921e:	800b      	strh	r3, [r1, #0]

	int16_t roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 8009220:	78c2      	ldrb	r2, [r0, #3]
 8009222:	7903      	ldrb	r3, [r0, #4]
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	b21b      	sxth	r3, r3
 8009228:	431a      	orrs	r2, r3
	IMU.roll = roll_rx / 100;
 800922a:	4c1b      	ldr	r4, [pc, #108]	; (8009298 <unpackAckPayload_0+0x88>)
 800922c:	fb84 c302 	smull	ip, r3, r4, r2
 8009230:	17d2      	asrs	r2, r2, #31
 8009232:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8009236:	b212      	sxth	r2, r2
 8009238:	ee07 2a90 	vmov	s15, r2
 800923c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009240:	edc1 7a01 	vstr	s15, [r1, #4]

	int16_t pitch_rx = (AckPayload[5] & 0xFF) | (AckPayload[6] << 8);
 8009244:	7942      	ldrb	r2, [r0, #5]
 8009246:	7983      	ldrb	r3, [r0, #6]
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	b21b      	sxth	r3, r3
 800924c:	431a      	orrs	r2, r3
	IMU.pitch = pitch_rx / 100;
 800924e:	fb84 c302 	smull	ip, r3, r4, r2
 8009252:	17d2      	asrs	r2, r2, #31
 8009254:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8009258:	b212      	sxth	r2, r2
 800925a:	ee07 2a90 	vmov	s15, r2
 800925e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009262:	edc1 7a02 	vstr	s15, [r1, #8]

	int16_t yaw_rx_ = (AckPayload[7] & 0xFF) | (AckPayload[8] << 8);
 8009266:	79c3      	ldrb	r3, [r0, #7]
 8009268:	7a02      	ldrb	r2, [r0, #8]
 800926a:	0212      	lsls	r2, r2, #8
 800926c:	b212      	sxth	r2, r2
 800926e:	4313      	orrs	r3, r2
	IMU.yaw = yaw_rx_ / 100;
 8009270:	fb84 2403 	smull	r2, r4, r4, r3
 8009274:	17db      	asrs	r3, r3, #31
 8009276:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 800927a:	b21b      	sxth	r3, r3
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009284:	edc1 7a03 	vstr	s15, [r1, #12]
}
 8009288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20004724 	.word	0x20004724
 8009294:	200043a0 	.word	0x200043a0
 8009298:	51eb851f 	.word	0x51eb851f

0800929c <unpackAckPayload_1>:

void unpackAckPayload_1() {
 800929c:	b082      	sub	sp, #8

	//All the 1 byte values
	GPS.sattelite_no = AckPayload[1];
 800929e:	4b26      	ldr	r3, [pc, #152]	; (8009338 <unpackAckPayload_1+0x9c>)
 80092a0:	7859      	ldrb	r1, [r3, #1]
 80092a2:	4a26      	ldr	r2, [pc, #152]	; (800933c <unpackAckPayload_1+0xa0>)
 80092a4:	7611      	strb	r1, [r2, #24]
	GPS.fix_quality = AckPayload[2];
 80092a6:	7899      	ldrb	r1, [r3, #2]
 80092a8:	7651      	strb	r1, [r2, #25]
	GPS.Day = AckPayload[3];
 80092aa:	78d9      	ldrb	r1, [r3, #3]
 80092ac:	7011      	strb	r1, [r2, #0]
	GPS.Month = AckPayload[4];
 80092ae:	7919      	ldrb	r1, [r3, #4]
 80092b0:	7051      	strb	r1, [r2, #1]
	GPS.Year = AckPayload[5];
 80092b2:	7959      	ldrb	r1, [r3, #5]
 80092b4:	7091      	strb	r1, [r2, #2]
	GPS.Hours = AckPayload[6];
 80092b6:	7999      	ldrb	r1, [r3, #6]
 80092b8:	70d1      	strb	r1, [r2, #3]
	GPS.Minutes = AckPayload[7];
 80092ba:	79d9      	ldrb	r1, [r3, #7]
 80092bc:	7111      	strb	r1, [r2, #4]
	GPS.Seconds = AckPayload[8];
 80092be:	7a19      	ldrb	r1, [r3, #8]
 80092c0:	7151      	strb	r1, [r2, #5]
	//GPS speed
	uint16_t speed_rx = (AckPayload[9] & 0xFF) | (AckPayload[10] << 8);
 80092c2:	7a59      	ldrb	r1, [r3, #9]
 80092c4:	7a98      	ldrb	r0, [r3, #10]
 80092c6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	GPS.Speed = speed_rx / 100;
 80092ca:	481d      	ldr	r0, [pc, #116]	; (8009340 <unpackAckPayload_1+0xa4>)
 80092cc:	fba0 0101 	umull	r0, r1, r0, r1
 80092d0:	0949      	lsrs	r1, r1, #5
 80092d2:	ee07 1a90 	vmov	s15, r1
 80092d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092da:	edc2 7a04 	vstr	s15, [r2, #16]

	//Longitude, latitude and altitude
	unsigned char temp[4] = { 0, 0, 0, 0 };

	temp[0] = AckPayload[11];
 80092de:	7ad9      	ldrb	r1, [r3, #11]
 80092e0:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[12];
 80092e4:	7b19      	ldrb	r1, [r3, #12]
 80092e6:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[13];
 80092ea:	7b59      	ldrb	r1, [r3, #13]
 80092ec:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[14];
 80092f0:	7b99      	ldrb	r1, [r3, #14]
 80092f2:	f88d 1007 	strb.w	r1, [sp, #7]

	memcpy(&GPS.Longitude, temp, sizeof(float));
 80092f6:	9901      	ldr	r1, [sp, #4]
 80092f8:	6091      	str	r1, [r2, #8]

	temp[0] = AckPayload[15];
 80092fa:	7bd9      	ldrb	r1, [r3, #15]
 80092fc:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[16];
 8009300:	7c19      	ldrb	r1, [r3, #16]
 8009302:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[17];
 8009306:	7c59      	ldrb	r1, [r3, #17]
 8009308:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[18];
 800930c:	7c99      	ldrb	r1, [r3, #18]
 800930e:	f88d 1007 	strb.w	r1, [sp, #7]

	memcpy(&GPS.Latitude, temp, sizeof(float));
 8009312:	9901      	ldr	r1, [sp, #4]
 8009314:	60d1      	str	r1, [r2, #12]

	temp[0] = AckPayload[19];
 8009316:	7cd9      	ldrb	r1, [r3, #19]
 8009318:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[20];
 800931c:	7d19      	ldrb	r1, [r3, #20]
 800931e:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[21];
 8009322:	7d59      	ldrb	r1, [r3, #21]
 8009324:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[22];
 8009328:	7d9b      	ldrb	r3, [r3, #22]
 800932a:	f88d 3007 	strb.w	r3, [sp, #7]

	memcpy(&GPS.Altitude, temp, sizeof(float));
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	6153      	str	r3, [r2, #20]
}
 8009332:	b002      	add	sp, #8
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	20004724 	.word	0x20004724
 800933c:	200043fc 	.word	0x200043fc
 8009340:	51eb851f 	.word	0x51eb851f

08009344 <sendPayload>:
bool sendPayload() {
 8009344:	b538      	push	{r3, r4, r5, lr}
	if (NRF24_write(TxData, 32)) {
 8009346:	2120      	movs	r1, #32
 8009348:	480b      	ldr	r0, [pc, #44]	; (8009378 <sendPayload+0x34>)
 800934a:	f7f8 fa0b 	bl	8001764 <NRF24_write>
 800934e:	4604      	mov	r4, r0
 8009350:	b908      	cbnz	r0, 8009356 <sendPayload+0x12>
}
 8009352:	4620      	mov	r0, r4
 8009354:	bd38      	pop	{r3, r4, r5, pc}
		NRF24_read(AckPayload, 32);
 8009356:	4d09      	ldr	r5, [pc, #36]	; (800937c <sendPayload+0x38>)
 8009358:	2120      	movs	r1, #32
 800935a:	4628      	mov	r0, r5
 800935c:	f7f8 f91f 	bl	800159e <NRF24_read>
		switch (AckPayload[0]) {
 8009360:	782b      	ldrb	r3, [r5, #0]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d004      	beq.n	8009370 <sendPayload+0x2c>
 8009366:	2bff      	cmp	r3, #255	; 0xff
 8009368:	d1f3      	bne.n	8009352 <sendPayload+0xe>
			unpackAckPayload_1();
 800936a:	f7ff ff97 	bl	800929c <unpackAckPayload_1>
			break;
 800936e:	e7f0      	b.n	8009352 <sendPayload+0xe>
			unpackAckPayload_0();
 8009370:	f7ff ff4e 	bl	8009210 <unpackAckPayload_0>
			break;
 8009374:	e7ed      	b.n	8009352 <sendPayload+0xe>
 8009376:	bf00      	nop
 8009378:	200047cc 	.word	0x200047cc
 800937c:	20004724 	.word	0x20004724

08009380 <startNRFTX>:
{
 8009380:	b500      	push	{lr}
 8009382:	b085      	sub	sp, #20
	Misc.kill = 0;
 8009384:	4b25      	ldr	r3, [pc, #148]	; (800941c <startNRFTX+0x9c>)
 8009386:	2400      	movs	r4, #0
 8009388:	705c      	strb	r4, [r3, #1]
	Misc.airmode = 0;
 800938a:	709c      	strb	r4, [r3, #2]
	xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 800938c:	4d24      	ldr	r5, [pc, #144]	; (8009420 <startNRFTX+0xa0>)
 800938e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009392:	6828      	ldr	r0, [r5, #0]
 8009394:	f7fe fb26 	bl	80079e4 <xQueueSemaphoreTake>
	NRF24_init(GPS);
 8009398:	4b22      	ldr	r3, [pc, #136]	; (8009424 <startNRFTX+0xa4>)
 800939a:	f103 0210 	add.w	r2, r3, #16
 800939e:	ca07      	ldmia	r2, {r0, r1, r2}
 80093a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80093a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093a6:	f7ff fe75 	bl	8009094 <NRF24_init>
	xSemaphoreGive(RxDataMutexHandle);
 80093aa:	4623      	mov	r3, r4
 80093ac:	4622      	mov	r2, r4
 80093ae:	4621      	mov	r1, r4
 80093b0:	6828      	ldr	r0, [r5, #0]
 80093b2:	f7fe fa39 	bl	8007828 <xQueueGenericSend>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 80093b6:	4e1c      	ldr	r6, [pc, #112]	; (8009428 <startNRFTX+0xa8>)
 80093b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093bc:	6830      	ldr	r0, [r6, #0]
 80093be:	f7fe fb11 	bl	80079e4 <xQueueSemaphoreTake>
		xSemaphoreTake(EncDataMutexHandle, portMAX_DELAY);
 80093c2:	4d1a      	ldr	r5, [pc, #104]	; (800942c <startNRFTX+0xac>)
 80093c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093c8:	6828      	ldr	r0, [r5, #0]
 80093ca:	f7fe fb0b 	bl	80079e4 <xQueueSemaphoreTake>
		packData(adcArray, Misc.airmode, Misc.kill, enc_pid);
 80093ce:	4c13      	ldr	r4, [pc, #76]	; (800941c <startNRFTX+0x9c>)
 80093d0:	4b17      	ldr	r3, [pc, #92]	; (8009430 <startNRFTX+0xb0>)
 80093d2:	7862      	ldrb	r2, [r4, #1]
 80093d4:	78a1      	ldrb	r1, [r4, #2]
 80093d6:	4817      	ldr	r0, [pc, #92]	; (8009434 <startNRFTX+0xb4>)
 80093d8:	f7ff fea0 	bl	800911c <packData>
		xSemaphoreGive(SwDataMutexHandle);
 80093dc:	2300      	movs	r3, #0
 80093de:	461a      	mov	r2, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	6830      	ldr	r0, [r6, #0]
 80093e4:	f7fe fa20 	bl	8007828 <xQueueGenericSend>
		xSemaphoreGive(EncDataMutexHandle);
 80093e8:	2300      	movs	r3, #0
 80093ea:	461a      	mov	r2, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	6828      	ldr	r0, [r5, #0]
 80093f0:	f7fe fa1a 	bl	8007828 <xQueueGenericSend>
		xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 80093f4:	4d0a      	ldr	r5, [pc, #40]	; (8009420 <startNRFTX+0xa0>)
 80093f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093fa:	6828      	ldr	r0, [r5, #0]
 80093fc:	f7fe faf2 	bl	80079e4 <xQueueSemaphoreTake>
		Misc.connection = sendPayload();
 8009400:	f7ff ffa0 	bl	8009344 <sendPayload>
 8009404:	7020      	strb	r0, [r4, #0]
		xSemaphoreGive(RxDataMutexHandle);
 8009406:	2300      	movs	r3, #0
 8009408:	461a      	mov	r2, r3
 800940a:	4619      	mov	r1, r3
 800940c:	6828      	ldr	r0, [r5, #0]
 800940e:	f7fe fa0b 	bl	8007828 <xQueueGenericSend>
		osDelay(5);
 8009412:	2005      	movs	r0, #5
 8009414:	f7fe f8a3 	bl	800755e <osDelay>
 8009418:	e7cd      	b.n	80093b6 <startNRFTX+0x36>
 800941a:	bf00      	nop
 800941c:	20004464 	.word	0x20004464
 8009420:	200047c4 	.word	0x200047c4
 8009424:	200043fc 	.word	0x200043fc
 8009428:	200047f4 	.word	0x200047f4
 800942c:	200047f0 	.word	0x200047f0
 8009430:	200042e8 	.word	0x200042e8
 8009434:	200047a8 	.word	0x200047a8

08009438 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8009438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943a:	b093      	sub	sp, #76	; 0x4c
  osMutexDef(RxDataMutex);
 800943c:	2700      	movs	r7, #0
 800943e:	a812      	add	r0, sp, #72	; 0x48
 8009440:	f840 7d04 	str.w	r7, [r0, #-4]!
  RxDataMutexHandle = osMutexCreate(osMutex(RxDataMutex));
 8009444:	f7fe f894 	bl	8007570 <osMutexCreate>
 8009448:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <MX_FREERTOS_Init+0x80>)
 800944a:	6018      	str	r0, [r3, #0]
  osMutexDef(SwDataMutex);
 800944c:	a812      	add	r0, sp, #72	; 0x48
 800944e:	f840 7d08 	str.w	r7, [r0, #-8]!
  SwDataMutexHandle = osMutexCreate(osMutex(SwDataMutex));
 8009452:	f7fe f88d 	bl	8007570 <osMutexCreate>
 8009456:	4b19      	ldr	r3, [pc, #100]	; (80094bc <MX_FREERTOS_Init+0x84>)
 8009458:	6018      	str	r0, [r3, #0]
  osMutexDef(EncDataMutex);
 800945a:	a812      	add	r0, sp, #72	; 0x48
 800945c:	f840 7d0c 	str.w	r7, [r0, #-12]!
  EncDataMutexHandle = osMutexCreate(osMutex(EncDataMutex));
 8009460:	f7fe f886 	bl	8007570 <osMutexCreate>
 8009464:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <MX_FREERTOS_Init+0x88>)
 8009466:	6018      	str	r0, [r3, #0]
  osThreadDef(DrawUI, StartDrawUI, osPriorityNormal, 0, 1024);
 8009468:	4c16      	ldr	r4, [pc, #88]	; (80094c4 <MX_FREERTOS_Init+0x8c>)
 800946a:	ad0a      	add	r5, sp, #40	; 0x28
 800946c:	4626      	mov	r6, r4
 800946e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009472:	6833      	ldr	r3, [r6, #0]
 8009474:	602b      	str	r3, [r5, #0]
  DrawUIHandle = osThreadCreate(osThread(DrawUI), NULL);
 8009476:	4639      	mov	r1, r7
 8009478:	a80a      	add	r0, sp, #40	; 0x28
 800947a:	f7fe f856 	bl	800752a <osThreadCreate>
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <MX_FREERTOS_Init+0x90>)
 8009480:	6018      	str	r0, [r3, #0]
  osThreadDef(NRFTX, startNRFTX, osPriorityRealtime, 0, 512);
 8009482:	ad05      	add	r5, sp, #20
 8009484:	f104 0614 	add.w	r6, r4, #20
 8009488:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800948a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800948c:	6833      	ldr	r3, [r6, #0]
 800948e:	602b      	str	r3, [r5, #0]
  NRFTXHandle = osThreadCreate(osThread(NRFTX), NULL);
 8009490:	4639      	mov	r1, r7
 8009492:	a805      	add	r0, sp, #20
 8009494:	f7fe f849 	bl	800752a <osThreadCreate>
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <MX_FREERTOS_Init+0x94>)
 800949a:	6018      	str	r0, [r3, #0]
  osThreadDef(ADC, StartADC, osPriorityLow, 0, 128);
 800949c:	466d      	mov	r5, sp
 800949e:	3428      	adds	r4, #40	; 0x28
 80094a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	602b      	str	r3, [r5, #0]
  ADCHandle = osThreadCreate(osThread(ADC), NULL);
 80094a8:	4639      	mov	r1, r7
 80094aa:	4668      	mov	r0, sp
 80094ac:	f7fe f83d 	bl	800752a <osThreadCreate>
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <MX_FREERTOS_Init+0x98>)
 80094b2:	6018      	str	r0, [r3, #0]
}
 80094b4:	b013      	add	sp, #76	; 0x4c
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	200047c4 	.word	0x200047c4
 80094bc:	200047f4 	.word	0x200047f4
 80094c0:	200047f0 	.word	0x200047f0
 80094c4:	0800f750 	.word	0x0800f750
 80094c8:	200047b8 	.word	0x200047b8
 80094cc:	200047c0 	.word	0x200047c0
 80094d0:	200047ec 	.word	0x200047ec

080094d4 <read_rotary_1>:
	}

}

// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 80094d4:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,
			1, 0 };

	prevNextCode_1 <<= 2;
 80094d6:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <read_rotary_1+0x70>)
 80094d8:	7813      	ldrb	r3, [r2, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET)
 80094de:	2180      	movs	r1, #128	; 0x80
 80094e0:	4819      	ldr	r0, [pc, #100]	; (8009548 <read_rotary_1+0x74>)
 80094e2:	f7f9 ff8b 	bl	80033fc <HAL_GPIO_ReadPin>
 80094e6:	2801      	cmp	r0, #1
 80094e8:	d01a      	beq.n	8009520 <read_rotary_1+0x4c>
		prevNextCode_1 |= 0x02;
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET)
 80094ea:	2140      	movs	r1, #64	; 0x40
 80094ec:	4817      	ldr	r0, [pc, #92]	; (800954c <read_rotary_1+0x78>)
 80094ee:	f7f9 ff85 	bl	80033fc <HAL_GPIO_ReadPin>
 80094f2:	2801      	cmp	r0, #1
 80094f4:	d01a      	beq.n	800952c <read_rotary_1+0x58>
		prevNextCode_1 |= 0x01;
	prevNextCode_1 &= 0x0f;
 80094f6:	4913      	ldr	r1, [pc, #76]	; (8009544 <read_rotary_1+0x70>)
 80094f8:	780b      	ldrb	r3, [r1, #0]
 80094fa:	f003 020f 	and.w	r2, r3, #15
 80094fe:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if (rot_enc_table[prevNextCode_1]) {
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <read_rotary_1+0x7c>)
 8009502:	5698      	ldrsb	r0, [r3, r2]
 8009504:	b158      	cbz	r0, 800951e <read_rotary_1+0x4a>
		store_1 <<= 4;
 8009506:	4913      	ldr	r1, [pc, #76]	; (8009554 <read_rotary_1+0x80>)
 8009508:	880b      	ldrh	r3, [r1, #0]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 800950e:	4313      	orrs	r3, r2
 8009510:	800b      	strh	r3, [r1, #0]
 8009512:	b2db      	uxtb	r3, r3

		if ((store_1 & 0xff) == 0x2b)
 8009514:	2b2b      	cmp	r3, #43	; 0x2b
 8009516:	d011      	beq.n	800953c <read_rotary_1+0x68>
			return -1;
		if ((store_1 & 0xff) == 0x17)
 8009518:	2b17      	cmp	r3, #23
 800951a:	d00d      	beq.n	8009538 <read_rotary_1+0x64>
			return 1;
	}
	return 0;
 800951c:	2000      	movs	r0, #0
}
 800951e:	bd08      	pop	{r3, pc}
		prevNextCode_1 |= 0x02;
 8009520:	4a08      	ldr	r2, [pc, #32]	; (8009544 <read_rotary_1+0x70>)
 8009522:	7813      	ldrb	r3, [r2, #0]
 8009524:	f043 0302 	orr.w	r3, r3, #2
 8009528:	7013      	strb	r3, [r2, #0]
 800952a:	e7de      	b.n	80094ea <read_rotary_1+0x16>
		prevNextCode_1 |= 0x01;
 800952c:	4a05      	ldr	r2, [pc, #20]	; (8009544 <read_rotary_1+0x70>)
 800952e:	7813      	ldrb	r3, [r2, #0]
 8009530:	f043 0301 	orr.w	r3, r3, #1
 8009534:	7013      	strb	r3, [r2, #0]
 8009536:	e7de      	b.n	80094f6 <read_rotary_1+0x22>
			return 1;
 8009538:	2001      	movs	r0, #1
 800953a:	e7f0      	b.n	800951e <read_rotary_1+0x4a>
			return -1;
 800953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009540:	e7ed      	b.n	800951e <read_rotary_1+0x4a>
 8009542:	bf00      	nop
 8009544:	200042f4 	.word	0x200042f4
 8009548:	40021400 	.word	0x40021400
 800954c:	40020800 	.word	0x40020800
 8009550:	08012ac8 	.word	0x08012ac8
 8009554:	200042f8 	.word	0x200042f8

08009558 <read_rotary_2>:

// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 8009558:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,
			1, 0 };

	prevNextCode_2 <<= 2;
 800955a:	4a1b      	ldr	r2, [pc, #108]	; (80095c8 <read_rotary_2+0x70>)
 800955c:	7813      	ldrb	r3, [r2, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET)
 8009562:	2110      	movs	r1, #16
 8009564:	4819      	ldr	r0, [pc, #100]	; (80095cc <read_rotary_2+0x74>)
 8009566:	f7f9 ff49 	bl	80033fc <HAL_GPIO_ReadPin>
 800956a:	2801      	cmp	r0, #1
 800956c:	d01a      	beq.n	80095a4 <read_rotary_2+0x4c>
		prevNextCode_2 |= 0x02;
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET)
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	4817      	ldr	r0, [pc, #92]	; (80095d0 <read_rotary_2+0x78>)
 8009572:	f7f9 ff43 	bl	80033fc <HAL_GPIO_ReadPin>
 8009576:	2801      	cmp	r0, #1
 8009578:	d01a      	beq.n	80095b0 <read_rotary_2+0x58>
		prevNextCode_2 |= 0x01;
	prevNextCode_2 &= 0x0f;
 800957a:	4913      	ldr	r1, [pc, #76]	; (80095c8 <read_rotary_2+0x70>)
 800957c:	780b      	ldrb	r3, [r1, #0]
 800957e:	f003 020f 	and.w	r2, r3, #15
 8009582:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if (rot_enc_table[prevNextCode_2]) {
 8009584:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <read_rotary_2+0x7c>)
 8009586:	5698      	ldrsb	r0, [r3, r2]
 8009588:	b158      	cbz	r0, 80095a2 <read_rotary_2+0x4a>
		store_2 <<= 4;
 800958a:	4913      	ldr	r1, [pc, #76]	; (80095d8 <read_rotary_2+0x80>)
 800958c:	880b      	ldrh	r3, [r1, #0]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 8009592:	4313      	orrs	r3, r2
 8009594:	800b      	strh	r3, [r1, #0]
 8009596:	b2db      	uxtb	r3, r3

		if ((store_2 & 0xff) == 0x2b)
 8009598:	2b2b      	cmp	r3, #43	; 0x2b
 800959a:	d011      	beq.n	80095c0 <read_rotary_2+0x68>
			return -1;
		if ((store_2 & 0xff) == 0x17)
 800959c:	2b17      	cmp	r3, #23
 800959e:	d00d      	beq.n	80095bc <read_rotary_2+0x64>
			return 1;
	}
	return 0;
 80095a0:	2000      	movs	r0, #0
}
 80095a2:	bd08      	pop	{r3, pc}
		prevNextCode_2 |= 0x02;
 80095a4:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <read_rotary_2+0x70>)
 80095a6:	7813      	ldrb	r3, [r2, #0]
 80095a8:	f043 0302 	orr.w	r3, r3, #2
 80095ac:	7013      	strb	r3, [r2, #0]
 80095ae:	e7de      	b.n	800956e <read_rotary_2+0x16>
		prevNextCode_2 |= 0x01;
 80095b0:	4a05      	ldr	r2, [pc, #20]	; (80095c8 <read_rotary_2+0x70>)
 80095b2:	7813      	ldrb	r3, [r2, #0]
 80095b4:	f043 0301 	orr.w	r3, r3, #1
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	e7de      	b.n	800957a <read_rotary_2+0x22>
			return 1;
 80095bc:	2001      	movs	r0, #1
 80095be:	e7f0      	b.n	80095a2 <read_rotary_2+0x4a>
			return -1;
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c4:	e7ed      	b.n	80095a2 <read_rotary_2+0x4a>
 80095c6:	bf00      	nop
 80095c8:	200042f5 	.word	0x200042f5
 80095cc:	40020400 	.word	0x40020400
 80095d0:	40021800 	.word	0x40021800
 80095d4:	08012ad8 	.word	0x08012ad8
 80095d8:	200042fa 	.word	0x200042fa

080095dc <read_rotary_3>:

// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 80095dc:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,
			1, 0 };

	prevNextCode_3 <<= 2;
 80095de:	4a1b      	ldr	r2, [pc, #108]	; (800964c <read_rotary_3+0x70>)
 80095e0:	7813      	ldrb	r3, [r2, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET)
 80095e6:	2140      	movs	r1, #64	; 0x40
 80095e8:	4819      	ldr	r0, [pc, #100]	; (8009650 <read_rotary_3+0x74>)
 80095ea:	f7f9 ff07 	bl	80033fc <HAL_GPIO_ReadPin>
 80095ee:	2801      	cmp	r0, #1
 80095f0:	d01a      	beq.n	8009628 <read_rotary_3+0x4c>
		prevNextCode_3 |= 0x02;
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET)
 80095f2:	2108      	movs	r1, #8
 80095f4:	4817      	ldr	r0, [pc, #92]	; (8009654 <read_rotary_3+0x78>)
 80095f6:	f7f9 ff01 	bl	80033fc <HAL_GPIO_ReadPin>
 80095fa:	2801      	cmp	r0, #1
 80095fc:	d01a      	beq.n	8009634 <read_rotary_3+0x58>
		prevNextCode_3 |= 0x01;
	prevNextCode_3 &= 0x0f;
 80095fe:	4913      	ldr	r1, [pc, #76]	; (800964c <read_rotary_3+0x70>)
 8009600:	780b      	ldrb	r3, [r1, #0]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if (rot_enc_table[prevNextCode_3]) {
 8009608:	4b13      	ldr	r3, [pc, #76]	; (8009658 <read_rotary_3+0x7c>)
 800960a:	5698      	ldrsb	r0, [r3, r2]
 800960c:	b158      	cbz	r0, 8009626 <read_rotary_3+0x4a>
		store_3 <<= 4;
 800960e:	4913      	ldr	r1, [pc, #76]	; (800965c <read_rotary_3+0x80>)
 8009610:	880b      	ldrh	r3, [r1, #0]
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 8009616:	4313      	orrs	r3, r2
 8009618:	800b      	strh	r3, [r1, #0]
 800961a:	b2db      	uxtb	r3, r3

		if ((store_3 & 0xff) == 0x2b)
 800961c:	2b2b      	cmp	r3, #43	; 0x2b
 800961e:	d011      	beq.n	8009644 <read_rotary_3+0x68>
			return -1;
		if ((store_3 & 0xff) == 0x17)
 8009620:	2b17      	cmp	r3, #23
 8009622:	d00d      	beq.n	8009640 <read_rotary_3+0x64>
			return 1;
	}
	return 0;
 8009624:	2000      	movs	r0, #0
}
 8009626:	bd08      	pop	{r3, pc}
		prevNextCode_3 |= 0x02;
 8009628:	4a08      	ldr	r2, [pc, #32]	; (800964c <read_rotary_3+0x70>)
 800962a:	7813      	ldrb	r3, [r2, #0]
 800962c:	f043 0302 	orr.w	r3, r3, #2
 8009630:	7013      	strb	r3, [r2, #0]
 8009632:	e7de      	b.n	80095f2 <read_rotary_3+0x16>
		prevNextCode_3 |= 0x01;
 8009634:	4a05      	ldr	r2, [pc, #20]	; (800964c <read_rotary_3+0x70>)
 8009636:	7813      	ldrb	r3, [r2, #0]
 8009638:	f043 0301 	orr.w	r3, r3, #1
 800963c:	7013      	strb	r3, [r2, #0]
 800963e:	e7de      	b.n	80095fe <read_rotary_3+0x22>
			return 1;
 8009640:	2001      	movs	r0, #1
 8009642:	e7f0      	b.n	8009626 <read_rotary_3+0x4a>
			return -1;
 8009644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009648:	e7ed      	b.n	8009626 <read_rotary_3+0x4a>
 800964a:	bf00      	nop
 800964c:	200042f6 	.word	0x200042f6
 8009650:	40021c00 	.word	0x40021c00
 8009654:	40022000 	.word	0x40022000
 8009658:	08012ae8 	.word	0x08012ae8
 800965c:	200042fc 	.word	0x200042fc

08009660 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8009664:	2880      	cmp	r0, #128	; 0x80
 8009666:	d004      	beq.n	8009672 <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8009668:	2c10      	cmp	r4, #16
 800966a:	d02f      	beq.n	80096cc <HAL_GPIO_EXTI_Callback+0x6c>
	if (GPIO_Pin == GPIO_PIN_6) {
 800966c:	2c40      	cmp	r4, #64	; 0x40
 800966e:	d05a      	beq.n	8009726 <HAL_GPIO_EXTI_Callback+0xc6>
}
 8009670:	bd38      	pop	{r3, r4, r5, pc}
		if (read_rotary_1()) {
 8009672:	f7ff ff2f 	bl	80094d4 <read_rotary_1>
 8009676:	2800      	cmp	r0, #0
 8009678:	d0f6      	beq.n	8009668 <HAL_GPIO_EXTI_Callback+0x8>
			if (prevNextCode_1 == 0x0b) {
 800967a:	4b43      	ldr	r3, [pc, #268]	; (8009788 <HAL_GPIO_EXTI_Callback+0x128>)
 800967c:	781d      	ldrb	r5, [r3, #0]
 800967e:	2d0b      	cmp	r5, #11
 8009680:	d00e      	beq.n	80096a0 <HAL_GPIO_EXTI_Callback+0x40>
			if (prevNextCode_1 == 0x07) {
 8009682:	2d07      	cmp	r5, #7
 8009684:	d1f0      	bne.n	8009668 <HAL_GPIO_EXTI_Callback+0x8>
				enc_pid[2] += 0.1;
 8009686:	4d41      	ldr	r5, [pc, #260]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 8009688:	68a8      	ldr	r0, [r5, #8]
 800968a:	f7f6 ff87 	bl	800059c <__aeabi_f2d>
 800968e:	a33c      	add	r3, pc, #240	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 fe24 	bl	80002e0 <__adddf3>
 8009698:	f7f7 fad0 	bl	8000c3c <__aeabi_d2f>
 800969c:	60a8      	str	r0, [r5, #8]
 800969e:	e7e3      	b.n	8009668 <HAL_GPIO_EXTI_Callback+0x8>
				if (enc_pid[2] > 0) {
 80096a0:	4b3a      	ldr	r3, [pc, #232]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 80096a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80096a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ae:	dde8      	ble.n	8009682 <HAL_GPIO_EXTI_Callback+0x22>
					enc_pid[2] -= 0.1;
 80096b0:	ee17 0a90 	vmov	r0, s15
 80096b4:	f7f6 ff72 	bl	800059c <__aeabi_f2d>
 80096b8:	a331      	add	r3, pc, #196	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fe0d 	bl	80002dc <__aeabi_dsub>
 80096c2:	f7f7 fabb 	bl	8000c3c <__aeabi_d2f>
 80096c6:	4b31      	ldr	r3, [pc, #196]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 80096c8:	6098      	str	r0, [r3, #8]
 80096ca:	e7da      	b.n	8009682 <HAL_GPIO_EXTI_Callback+0x22>
		if (read_rotary_2()) {
 80096cc:	f7ff ff44 	bl	8009558 <read_rotary_2>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0cb      	beq.n	800966c <HAL_GPIO_EXTI_Callback+0xc>
			if (prevNextCode_2 == 0x0b) {
 80096d4:	4b2e      	ldr	r3, [pc, #184]	; (8009790 <HAL_GPIO_EXTI_Callback+0x130>)
 80096d6:	781d      	ldrb	r5, [r3, #0]
 80096d8:	2d0b      	cmp	r5, #11
 80096da:	d00e      	beq.n	80096fa <HAL_GPIO_EXTI_Callback+0x9a>
			if (prevNextCode_2 == 0x07) {
 80096dc:	2d07      	cmp	r5, #7
 80096de:	d1c5      	bne.n	800966c <HAL_GPIO_EXTI_Callback+0xc>
				enc_pid[1] += 0.1;
 80096e0:	4d2a      	ldr	r5, [pc, #168]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 80096e2:	6868      	ldr	r0, [r5, #4]
 80096e4:	f7f6 ff5a 	bl	800059c <__aeabi_f2d>
 80096e8:	a325      	add	r3, pc, #148	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 fdf7 	bl	80002e0 <__adddf3>
 80096f2:	f7f7 faa3 	bl	8000c3c <__aeabi_d2f>
 80096f6:	6068      	str	r0, [r5, #4]
 80096f8:	e7b8      	b.n	800966c <HAL_GPIO_EXTI_Callback+0xc>
				if (enc_pid[1] > 0) {
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 80096fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8009700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009708:	dde8      	ble.n	80096dc <HAL_GPIO_EXTI_Callback+0x7c>
					enc_pid[1] -= 0.1;
 800970a:	ee17 0a90 	vmov	r0, s15
 800970e:	f7f6 ff45 	bl	800059c <__aeabi_f2d>
 8009712:	a31b      	add	r3, pc, #108	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fde0 	bl	80002dc <__aeabi_dsub>
 800971c:	f7f7 fa8e 	bl	8000c3c <__aeabi_d2f>
 8009720:	4b1a      	ldr	r3, [pc, #104]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 8009722:	6058      	str	r0, [r3, #4]
 8009724:	e7da      	b.n	80096dc <HAL_GPIO_EXTI_Callback+0x7c>
		if (read_rotary_3()) {
 8009726:	f7ff ff59 	bl	80095dc <read_rotary_3>
 800972a:	2800      	cmp	r0, #0
 800972c:	d0a0      	beq.n	8009670 <HAL_GPIO_EXTI_Callback+0x10>
			if (prevNextCode_3 == 0x0b) {
 800972e:	4b19      	ldr	r3, [pc, #100]	; (8009794 <HAL_GPIO_EXTI_Callback+0x134>)
 8009730:	781c      	ldrb	r4, [r3, #0]
 8009732:	2c0b      	cmp	r4, #11
 8009734:	d00e      	beq.n	8009754 <HAL_GPIO_EXTI_Callback+0xf4>
			if (prevNextCode_3 == 0x07) {
 8009736:	2c07      	cmp	r4, #7
 8009738:	d19a      	bne.n	8009670 <HAL_GPIO_EXTI_Callback+0x10>
				enc_pid[0] += 0.1;
 800973a:	4c14      	ldr	r4, [pc, #80]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 800973c:	6820      	ldr	r0, [r4, #0]
 800973e:	f7f6 ff2d 	bl	800059c <__aeabi_f2d>
 8009742:	a30f      	add	r3, pc, #60	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 fdca 	bl	80002e0 <__adddf3>
 800974c:	f7f7 fa76 	bl	8000c3c <__aeabi_d2f>
 8009750:	6020      	str	r0, [r4, #0]
}
 8009752:	e78d      	b.n	8009670 <HAL_GPIO_EXTI_Callback+0x10>
				if (enc_pid[0] > 0) {
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 8009756:	edd3 7a00 	vldr	s15, [r3]
 800975a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	dde8      	ble.n	8009736 <HAL_GPIO_EXTI_Callback+0xd6>
					enc_pid[0] -= 0.1;
 8009764:	ee17 0a90 	vmov	r0, s15
 8009768:	f7f6 ff18 	bl	800059c <__aeabi_f2d>
 800976c:	a304      	add	r3, pc, #16	; (adr r3, 8009780 <HAL_GPIO_EXTI_Callback+0x120>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fdb3 	bl	80002dc <__aeabi_dsub>
 8009776:	f7f7 fa61 	bl	8000c3c <__aeabi_d2f>
 800977a:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_GPIO_EXTI_Callback+0x12c>)
 800977c:	6018      	str	r0, [r3, #0]
 800977e:	e7da      	b.n	8009736 <HAL_GPIO_EXTI_Callback+0xd6>
 8009780:	9999999a 	.word	0x9999999a
 8009784:	3fb99999 	.word	0x3fb99999
 8009788:	200042f4 	.word	0x200042f4
 800978c:	200042e8 	.word	0x200042e8
 8009790:	200042f5 	.word	0x200042f5
 8009794:	200042f6 	.word	0x200042f6

08009798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979c:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800979e:	2400      	movs	r4, #0
 80097a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80097a2:	940c      	str	r4, [sp, #48]	; 0x30
 80097a4:	940d      	str	r4, [sp, #52]	; 0x34
 80097a6:	940e      	str	r4, [sp, #56]	; 0x38
 80097a8:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80097aa:	4b5e      	ldr	r3, [pc, #376]	; (8009924 <MX_GPIO_Init+0x18c>)
 80097ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ae:	f042 0210 	orr.w	r2, r2, #16
 80097b2:	631a      	str	r2, [r3, #48]	; 0x30
 80097b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b6:	f002 0210 	and.w	r2, r2, #16
 80097ba:	9200      	str	r2, [sp, #0]
 80097bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c0:	f042 0202 	orr.w	r2, r2, #2
 80097c4:	631a      	str	r2, [r3, #48]	; 0x30
 80097c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c8:	f002 0202 	and.w	r2, r2, #2
 80097cc:	9201      	str	r2, [sp, #4]
 80097ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d2:	f042 0201 	orr.w	r2, r2, #1
 80097d6:	631a      	str	r2, [r3, #48]	; 0x30
 80097d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097da:	f002 0201 	and.w	r2, r2, #1
 80097de:	9202      	str	r2, [sp, #8]
 80097e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80097e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e8:	631a      	str	r2, [r3, #48]	; 0x30
 80097ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80097f0:	9203      	str	r2, [sp, #12]
 80097f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80097f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f6:	f042 0208 	orr.w	r2, r2, #8
 80097fa:	631a      	str	r2, [r3, #48]	; 0x30
 80097fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fe:	f002 0208 	and.w	r2, r2, #8
 8009802:	9204      	str	r2, [sp, #16]
 8009804:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
 800980e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009810:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009814:	9205      	str	r2, [sp, #20]
 8009816:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800981a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800981e:	631a      	str	r2, [r3, #48]	; 0x30
 8009820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009822:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009826:	9206      	str	r2, [sp, #24]
 8009828:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800982a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800982c:	f042 0220 	orr.w	r2, r2, #32
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
 8009832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009834:	f002 0220 	and.w	r2, r2, #32
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800983c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800983e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
 8009844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009846:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800984a:	9208      	str	r2, [sp, #32]
 800984c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800984e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009850:	f042 0204 	orr.w	r2, r2, #4
 8009854:	631a      	str	r2, [r3, #48]	; 0x30
 8009856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009858:	f002 0204 	and.w	r2, r2, #4
 800985c:	9209      	str	r2, [sp, #36]	; 0x24
 800985e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009866:	631a      	str	r2, [r3, #48]	; 0x30
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800986e:	930a      	str	r3, [sp, #40]	; 0x28
 8009870:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8009872:	4f2d      	ldr	r7, [pc, #180]	; (8009928 <MX_GPIO_Init+0x190>)
 8009874:	4622      	mov	r2, r4
 8009876:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800987a:	4638      	mov	r0, r7
 800987c:	f7f9 fdc5 	bl	800340a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 8009880:	2310      	movs	r3, #16
 8009882:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009884:	4e29      	ldr	r6, [pc, #164]	; (800992c <MX_GPIO_Init+0x194>)
 8009886:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009888:	2501      	movs	r5, #1
 800988a:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 800988c:	a90b      	add	r1, sp, #44	; 0x2c
 800988e:	4828      	ldr	r0, [pc, #160]	; (8009930 <MX_GPIO_Init+0x198>)
 8009890:	f7f9 fcc4 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8009894:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8009898:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800989a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800989e:	2303      	movs	r3, #3
 80098a0:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098a2:	a90b      	add	r1, sp, #44	; 0x2c
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7f9 fcb9 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 80098aa:	230d      	movs	r3, #13
 80098ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098ae:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098b0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80098b2:	a90b      	add	r1, sp, #44	; 0x2c
 80098b4:	481f      	ldr	r0, [pc, #124]	; (8009934 <MX_GPIO_Init+0x19c>)
 80098b6:	f7f9 fcb1 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 80098ba:	2740      	movs	r7, #64	; 0x40
 80098bc:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098be:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098c0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 80098c2:	a90b      	add	r1, sp, #44	; 0x2c
 80098c4:	481c      	ldr	r0, [pc, #112]	; (8009938 <MX_GPIO_Init+0x1a0>)
 80098c6:	f7f9 fca9 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 80098ca:	f04f 0880 	mov.w	r8, #128	; 0x80
 80098ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098d2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098d4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 80098d6:	a90b      	add	r1, sp, #44	; 0x2c
 80098d8:	4818      	ldr	r0, [pc, #96]	; (800993c <MX_GPIO_Init+0x1a4>)
 80098da:	f7f9 fc9f 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 80098de:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80098e2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098e4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 80098e6:	a90b      	add	r1, sp, #44	; 0x2c
 80098e8:	4815      	ldr	r0, [pc, #84]	; (8009940 <MX_GPIO_Init+0x1a8>)
 80098ea:	f7f9 fc97 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 80098ee:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80098f0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098f2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 80098f4:	a90b      	add	r1, sp, #44	; 0x2c
 80098f6:	4813      	ldr	r0, [pc, #76]	; (8009944 <MX_GPIO_Init+0x1ac>)
 80098f8:	f7f9 fc90 	bl	800321c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80098fc:	4622      	mov	r2, r4
 80098fe:	2105      	movs	r1, #5
 8009900:	200a      	movs	r0, #10
 8009902:	f7f9 f807 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8009906:	200a      	movs	r0, #10
 8009908:	f7f9 f836 	bl	8002978 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800990c:	4622      	mov	r2, r4
 800990e:	2105      	movs	r1, #5
 8009910:	2017      	movs	r0, #23
 8009912:	f7f8 ffff 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009916:	2017      	movs	r0, #23
 8009918:	f7f9 f82e 	bl	8002978 <HAL_NVIC_EnableIRQ>

}
 800991c:	b010      	add	sp, #64	; 0x40
 800991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009922:	bf00      	nop
 8009924:	40023800 	.word	0x40023800
 8009928:	40020000 	.word	0x40020000
 800992c:	10110000 	.word	0x10110000
 8009930:	40020400 	.word	0x40020400
 8009934:	40022000 	.word	0x40022000
 8009938:	40020800 	.word	0x40020800
 800993c:	40021800 	.word	0x40021800
 8009940:	40021400 	.word	0x40021400
 8009944:	40021c00 	.word	0x40021c00

08009948 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8009948:	b510      	push	{r4, lr}
 800994a:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800994c:	2434      	movs	r4, #52	; 0x34
 800994e:	4622      	mov	r2, r4
 8009950:	2100      	movs	r1, #0
 8009952:	eb0d 0004 	add.w	r0, sp, r4
 8009956:	f000 fcae 	bl	800a2b6 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800995a:	4622      	mov	r2, r4
 800995c:	2100      	movs	r1, #0
 800995e:	4668      	mov	r0, sp
 8009960:	f000 fca9 	bl	800a2b6 <memset>

  hltdc.Instance = LTDC;
 8009964:	4833      	ldr	r0, [pc, #204]	; (8009a34 <MX_LTDC_Init+0xec>)
 8009966:	4b34      	ldr	r3, [pc, #208]	; (8009a38 <MX_LTDC_Init+0xf0>)
 8009968:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800996a:	2300      	movs	r3, #0
 800996c:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800996e:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009970:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009972:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8009974:	2207      	movs	r2, #7
 8009976:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8009978:	2203      	movs	r2, #3
 800997a:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800997c:	220e      	movs	r2, #14
 800997e:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8009980:	2205      	movs	r2, #5
 8009982:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8009984:	f240 228e 	movw	r2, #654	; 0x28e
 8009988:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800998a:	f240 12e5 	movw	r2, #485	; 0x1e5
 800998e:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8009990:	f44f 7225 	mov.w	r2, #660	; 0x294
 8009994:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8009996:	f240 12e7 	movw	r2, #487	; 0x1e7
 800999a:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800999c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80099a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80099a4:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80099a8:	f7fa f9a0 	bl	8003cec <HAL_LTDC_Init>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d138      	bne.n	8009a22 <MX_LTDC_Init+0xda>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 80099b0:	2200      	movs	r2, #0
 80099b2:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80099b4:	920e      	str	r2, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80099b6:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80099b8:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80099ba:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80099bc:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80099be:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80099c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c4:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80099c6:	2305      	movs	r3, #5
 80099c8:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80099ca:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80099cc:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80099ce:	9218      	str	r2, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80099d0:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80099d4:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80099d8:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80099dc:	a90d      	add	r1, sp, #52	; 0x34
 80099de:	4815      	ldr	r0, [pc, #84]	; (8009a34 <MX_LTDC_Init+0xec>)
 80099e0:	f7fa fa6e 	bl	8003ec0 <HAL_LTDC_ConfigLayer>
 80099e4:	bb00      	cbnz	r0, 8009a28 <MX_LTDC_Init+0xe0>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 80099ea:	9301      	str	r3, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 80099ec:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 80099ee:	9303      	str	r3, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80099f0:	9304      	str	r3, [sp, #16]
  pLayerCfg1.Alpha = 0;
 80099f2:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 80099f4:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80099f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099fa:	9207      	str	r2, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80099fc:	2205      	movs	r2, #5
 80099fe:	9208      	str	r2, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009a02:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009a04:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009a06:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8009a0a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8009a0e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009a12:	2201      	movs	r2, #1
 8009a14:	4669      	mov	r1, sp
 8009a16:	4807      	ldr	r0, [pc, #28]	; (8009a34 <MX_LTDC_Init+0xec>)
 8009a18:	f7fa fa52 	bl	8003ec0 <HAL_LTDC_ConfigLayer>
 8009a1c:	b938      	cbnz	r0, 8009a2e <MX_LTDC_Init+0xe6>
  {
    Error_Handler();
  }

}
 8009a1e:	b01a      	add	sp, #104	; 0x68
 8009a20:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009a22:	f000 f9b7 	bl	8009d94 <Error_Handler>
 8009a26:	e7c3      	b.n	80099b0 <MX_LTDC_Init+0x68>
    Error_Handler();
 8009a28:	f000 f9b4 	bl	8009d94 <Error_Handler>
 8009a2c:	e7db      	b.n	80099e6 <MX_LTDC_Init+0x9e>
    Error_Handler();
 8009a2e:	f000 f9b1 	bl	8009d94 <Error_Handler>
}
 8009a32:	e7f4      	b.n	8009a1e <MX_LTDC_Init+0xd6>
 8009a34:	200047f8 	.word	0x200047f8
 8009a38:	40016800 	.word	0x40016800

08009a3c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8009a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3e:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a40:	2300      	movs	r3, #0
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	930a      	str	r3, [sp, #40]	; 0x28
 8009a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a48:	930c      	str	r3, [sp, #48]	; 0x30
 8009a4a:	930d      	str	r3, [sp, #52]	; 0x34
  if(ltdcHandle->Instance==LTDC)
 8009a4c:	6802      	ldr	r2, [r0, #0]
 8009a4e:	4b62      	ldr	r3, [pc, #392]	; (8009bd8 <HAL_LTDC_MspInit+0x19c>)
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d001      	beq.n	8009a58 <HAL_LTDC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8009a54:	b00f      	add	sp, #60	; 0x3c
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009a58:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009a62:	645a      	str	r2, [r3, #68]	; 0x44
 8009a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a66:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009a6a:	9200      	str	r2, [sp, #0]
 8009a6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a70:	f042 0202 	orr.w	r2, r2, #2
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
 8009a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a78:	f002 0202 	and.w	r2, r2, #2
 8009a7c:	9201      	str	r2, [sp, #4]
 8009a7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
 8009a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a8a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009a8e:	9202      	str	r2, [sp, #8]
 8009a90:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	631a      	str	r2, [r3, #48]	; 0x30
 8009a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a9c:	f002 0201 	and.w	r2, r2, #1
 8009aa0:	9203      	str	r2, [sp, #12]
 8009aa2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8009aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009ab2:	9204      	str	r2, [sp, #16]
 8009ab4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8009ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30
 8009abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009ac4:	9205      	str	r2, [sp, #20]
 8009ac6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aca:	f042 0208 	orr.w	r2, r2, #8
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
 8009ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad2:	f002 0208 	and.w	r2, r2, #8
 8009ad6:	9206      	str	r2, [sp, #24]
 8009ad8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009adc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009ae8:	9207      	str	r2, [sp, #28]
 8009aea:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af2:	631a      	str	r2, [r3, #48]	; 0x30
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009afa:	9308      	str	r3, [sp, #32]
 8009afc:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b02:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b04:	2502      	movs	r5, #2
 8009b06:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b08:	260e      	movs	r6, #14
 8009b0a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b0c:	a909      	add	r1, sp, #36	; 0x24
 8009b0e:	4833      	ldr	r0, [pc, #204]	; (8009bdc <HAL_LTDC_MspInit+0x1a0>)
 8009b10:	f7f9 fb84 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8009b14:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b1a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b1c:	2400      	movs	r4, #0
 8009b1e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b20:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b22:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b24:	4f2e      	ldr	r7, [pc, #184]	; (8009be0 <HAL_LTDC_MspInit+0x1a4>)
 8009b26:	a909      	add	r1, sp, #36	; 0x24
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7f9 fb77 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b32:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b34:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b36:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b38:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b3a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b3c:	a909      	add	r1, sp, #36	; 0x24
 8009b3e:	4829      	ldr	r0, [pc, #164]	; (8009be4 <HAL_LTDC_MspInit+0x1a8>)
 8009b40:	f7f9 fb6c 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 8009b44:	f244 6330 	movw	r3, #17968	; 0x4630
 8009b48:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b4a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b4e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b50:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009b52:	a909      	add	r1, sp, #36	; 0x24
 8009b54:	4824      	ldr	r0, [pc, #144]	; (8009be8 <HAL_LTDC_MspInit+0x1ac>)
 8009b56:	f7f9 fb61 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 8009b5a:	2383      	movs	r3, #131	; 0x83
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b5e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b60:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b62:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b64:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8009b66:	a909      	add	r1, sp, #36	; 0x24
 8009b68:	4820      	ldr	r0, [pc, #128]	; (8009bec <HAL_LTDC_MspInit+0x1b0>)
 8009b6a:	f7f9 fb57 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b74:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b76:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b78:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009b7a:	2309      	movs	r3, #9
 8009b7c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b7e:	a909      	add	r1, sp, #36	; 0x24
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7f9 fb4b 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009b86:	2308      	movs	r3, #8
 8009b88:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b8a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b8e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b90:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b92:	a909      	add	r1, sp, #36	; 0x24
 8009b94:	4816      	ldr	r0, [pc, #88]	; (8009bf0 <HAL_LTDC_MspInit+0x1b4>)
 8009b96:	f7f9 fb41 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8009b9a:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8009b9e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba2:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba4:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009ba6:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ba8:	a909      	add	r1, sp, #36	; 0x24
 8009baa:	4812      	ldr	r0, [pc, #72]	; (8009bf4 <HAL_LTDC_MspInit+0x1b8>)
 8009bac:	f7f9 fb36 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bb8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009bba:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009bbc:	a909      	add	r1, sp, #36	; 0x24
 8009bbe:	480e      	ldr	r0, [pc, #56]	; (8009bf8 <HAL_LTDC_MspInit+0x1bc>)
 8009bc0:	f7f9 fb2c 	bl	800321c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 12, 0);
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	210c      	movs	r1, #12
 8009bc8:	2058      	movs	r0, #88	; 0x58
 8009bca:	f7f8 fea3 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009bce:	2058      	movs	r0, #88	; 0x58
 8009bd0:	f7f8 fed2 	bl	8002978 <HAL_NVIC_EnableIRQ>
}
 8009bd4:	e73e      	b.n	8009a54 <HAL_LTDC_MspInit+0x18>
 8009bd6:	bf00      	nop
 8009bd8:	40016800 	.word	0x40016800
 8009bdc:	40020400 	.word	0x40020400
 8009be0:	40021800 	.word	0x40021800
 8009be4:	40020000 	.word	0x40020000
 8009be8:	40022000 	.word	0x40022000
 8009bec:	40022800 	.word	0x40022800
 8009bf0:	40020c00 	.word	0x40020c00
 8009bf4:	40021c00 	.word	0x40021c00
 8009bf8:	40022400 	.word	0x40022400

08009bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c00:	2230      	movs	r2, #48	; 0x30
 8009c02:	2100      	movs	r1, #0
 8009c04:	a828      	add	r0, sp, #160	; 0xa0
 8009c06:	f000 fb56 	bl	800a2b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	9423      	str	r4, [sp, #140]	; 0x8c
 8009c0e:	9424      	str	r4, [sp, #144]	; 0x90
 8009c10:	9425      	str	r4, [sp, #148]	; 0x94
 8009c12:	9426      	str	r4, [sp, #152]	; 0x98
 8009c14:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c16:	2284      	movs	r2, #132	; 0x84
 8009c18:	4621      	mov	r1, r4
 8009c1a:	a802      	add	r0, sp, #8
 8009c1c:	f000 fb4b 	bl	800a2b6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c20:	4b26      	ldr	r3, [pc, #152]	; (8009cbc <SystemClock_Config+0xc0>)
 8009c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009c28:	641a      	str	r2, [r3, #64]	; 0x40
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c34:	4b22      	ldr	r3, [pc, #136]	; (8009cc0 <SystemClock_Config+0xc4>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c48:	2601      	movs	r6, #1
 8009c4a:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c50:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c52:	2502      	movs	r5, #2
 8009c54:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c5a:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009c5c:	2319      	movs	r3, #25
 8009c5e:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8009c60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8009c64:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c66:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009c68:	2309      	movs	r3, #9
 8009c6a:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c6c:	a828      	add	r0, sp, #160	; 0xa0
 8009c6e:	f7fa f997 	bl	8003fa0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009c72:	f7fa f957 	bl	8003f24 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c76:	230f      	movs	r3, #15
 8009c78:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c7a:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c7c:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c82:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c88:	9327      	str	r3, [sp, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8009c8a:	2107      	movs	r1, #7
 8009c8c:	a823      	add	r0, sp, #140	; 0x8c
 8009c8e:	f7fa fbc5 	bl	800441c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8009c92:	2348      	movs	r3, #72	; 0x48
 8009c94:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009c96:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009c9a:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009c9c:	2305      	movs	r3, #5
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009ca0:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009ca6:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009cac:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009cae:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009cb0:	a802      	add	r0, sp, #8
 8009cb2:	f7fa fca9 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8009cb6:	b034      	add	sp, #208	; 0xd0
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	bf00      	nop
 8009cbc:	40023800 	.word	0x40023800
 8009cc0:	40007000 	.word	0x40007000

08009cc4 <main>:
{
 8009cc4:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009cce:	4b29      	ldr	r3, [pc, #164]	; (8009d74 <main+0xb0>)
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cda:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009cde:	695a      	ldr	r2, [r3, #20]
 8009ce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009ce4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ce6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cea:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009cee:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009cf2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8009cf6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009cfa:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8009cfe:	e00f      	b.n	8009d20 <main+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8009d00:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009d02:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009d06:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8009d0a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8009d0e:	4819      	ldr	r0, [pc, #100]	; (8009d74 <main+0xb0>)
 8009d10:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8009d14:	1e53      	subs	r3, r2, #1
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	d1f2      	bne.n	8009d00 <main+0x3c>
    } while(sets-- != 0U);
 8009d1a:	1e4b      	subs	r3, r1, #1
 8009d1c:	b119      	cbz	r1, 8009d26 <main+0x62>
 8009d1e:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009d20:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8009d24:	e7ed      	b.n	8009d02 <main+0x3e>
 8009d26:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009d2a:	6943      	ldr	r3, [r0, #20]
 8009d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d30:	6143      	str	r3, [r0, #20]
 8009d32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009d36:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8009d3a:	f7f8 f9c9 	bl	80020d0 <HAL_Init>
  SystemClock_Config();
 8009d3e:	f7ff ff5d 	bl	8009bfc <SystemClock_Config>
  MX_GPIO_Init();
 8009d42:	f7ff fd29 	bl	8009798 <MX_GPIO_Init>
  MX_DMA_Init();
 8009d46:	f7ff f819 	bl	8008d7c <MX_DMA_Init>
  MX_SPI2_Init();
 8009d4a:	f000 f825 	bl	8009d98 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8009d4e:	f000 f9d1 	bl	800a0f4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8009d52:	f7fe ff17 	bl	8008b84 <MX_ADC3_Init>
  MX_CRC_Init();
 8009d56:	f7fe ffe5 	bl	8008d24 <MX_CRC_Init>
  MX_DMA2D_Init();
 8009d5a:	f7ff f829 	bl	8008db0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8009d5e:	f7ff f8bf 	bl	8008ee0 <MX_FMC_Init>
  MX_LTDC_Init();
 8009d62:	f7ff fdf1 	bl	8009948 <MX_LTDC_Init>
  MX_TIM1_Init();
 8009d66:	f000 f967 	bl	800a038 <MX_TIM1_Init>
  MX_FREERTOS_Init();
 8009d6a:	f7ff fb65 	bl	8009438 <MX_FREERTOS_Init>
  osKernelStart();
 8009d6e:	f7fd fbd7 	bl	8007520 <osKernelStart>
 8009d72:	e7fe      	b.n	8009d72 <main+0xae>
 8009d74:	e000ed00 	.word	0xe000ed00

08009d78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{


}
 8009d78:	4770      	bx	lr
	...

08009d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8009d7e:	6802      	ldr	r2, [r0, #0]
 8009d80:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d000      	beq.n	8009d88 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009d86:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8009d88:	f7f8 f9b4 	bl	80020f4 <HAL_IncTick>
}
 8009d8c:	e7fb      	b.n	8009d86 <HAL_TIM_PeriodElapsedCallback+0xa>
 8009d8e:	bf00      	nop
 8009d90:	40002000 	.word	0x40002000

08009d94 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009d94:	4770      	bx	lr
	...

08009d98 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009d98:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8009d9a:	4810      	ldr	r0, [pc, #64]	; (8009ddc <MX_SPI2_Init+0x44>)
 8009d9c:	4b10      	ldr	r3, [pc, #64]	; (8009de0 <MX_SPI2_Init+0x48>)
 8009d9e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009da0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009da4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009da6:	2300      	movs	r3, #0
 8009da8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009daa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009dae:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009db0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009db2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009dba:	2220      	movs	r2, #32
 8009dbc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009dbe:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009dc0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dc2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009dc4:	2207      	movs	r2, #7
 8009dc6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009dc8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009dca:	2308      	movs	r3, #8
 8009dcc:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009dce:	f7fb f84c 	bl	8004e6a <HAL_SPI_Init>
 8009dd2:	b900      	cbnz	r0, 8009dd6 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8009dd4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009dd6:	f7ff ffdd 	bl	8009d94 <Error_Handler>
}
 8009dda:	e7fb      	b.n	8009dd4 <MX_SPI2_Init+0x3c>
 8009ddc:	200048a0 	.word	0x200048a0
 8009de0:	40003800 	.word	0x40003800

08009de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009de8:	2300      	movs	r3, #0
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	9305      	str	r3, [sp, #20]
 8009df0:	9306      	str	r3, [sp, #24]
 8009df2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8009df4:	6802      	ldr	r2, [r0, #0]
 8009df6:	4b1d      	ldr	r3, [pc, #116]	; (8009e6c <HAL_SPI_MspInit+0x88>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d001      	beq.n	8009e00 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009dfc:	b008      	add	sp, #32
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009e00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8009e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8009e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009e12:	9200      	str	r2, [sp, #0]
 8009e14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e20:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009e24:	9201      	str	r2, [sp, #4]
 8009e26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e2a:	f042 0202 	orr.w	r2, r2, #2
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e3a:	2402      	movs	r4, #2
 8009e3c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e3e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e40:	2603      	movs	r6, #3
 8009e42:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009e44:	2505      	movs	r5, #5
 8009e46:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009e48:	a903      	add	r1, sp, #12
 8009e4a:	4809      	ldr	r0, [pc, #36]	; (8009e70 <HAL_SPI_MspInit+0x8c>)
 8009e4c:	f7f9 f9e6 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009e50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009e54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e56:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e5c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009e5e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e60:	a903      	add	r1, sp, #12
 8009e62:	4804      	ldr	r0, [pc, #16]	; (8009e74 <HAL_SPI_MspInit+0x90>)
 8009e64:	f7f9 f9da 	bl	800321c <HAL_GPIO_Init>
}
 8009e68:	e7c8      	b.n	8009dfc <HAL_SPI_MspInit+0x18>
 8009e6a:	bf00      	nop
 8009e6c:	40003800 	.word	0x40003800
 8009e70:	40022000 	.word	0x40022000
 8009e74:	40020400 	.word	0x40020400

08009e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e78:	b500      	push	{lr}
 8009e7a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <HAL_MspInit+0x3c>)
 8009e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40
 8009e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e88:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009e8c:	9200      	str	r2, [sp, #0]
 8009e8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e96:	645a      	str	r2, [r3, #68]	; 0x44
 8009e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	210f      	movs	r1, #15
 8009ea6:	f06f 0001 	mvn.w	r0, #1
 8009eaa:	f7f8 fd33 	bl	8002914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009eae:	b003      	add	sp, #12
 8009eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eb4:	40023800 	.word	0x40023800

08009eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009eb8:	b500      	push	{lr}
 8009eba:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	202d      	movs	r0, #45	; 0x2d
 8009ec2:	f7f8 fd27 	bl	8002914 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8009ec6:	202d      	movs	r0, #45	; 0x2d
 8009ec8:	f7f8 fd56 	bl	8002978 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8009ecc:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <HAL_InitTick+0x6c>)
 8009ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ee0:	a902      	add	r1, sp, #8
 8009ee2:	a803      	add	r0, sp, #12
 8009ee4:	f7fa fb72 	bl	80045cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009ee8:	f7fa fb50 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8009eec:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009eee:	480e      	ldr	r0, [pc, #56]	; (8009f28 <HAL_InitTick+0x70>)
 8009ef0:	fba0 2303 	umull	r2, r3, r0, r3
 8009ef4:	0c9b      	lsrs	r3, r3, #18
 8009ef6:	3b01      	subs	r3, #1
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8009ef8:	480c      	ldr	r0, [pc, #48]	; (8009f2c <HAL_InitTick+0x74>)
 8009efa:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <HAL_InitTick+0x78>)
 8009efc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8009efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009f02:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8009f04:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f0a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8009f0c:	f7fb fce2 	bl	80058d4 <HAL_TIM_Base_Init>
 8009f10:	b118      	cbz	r0, 8009f1a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009f12:	2001      	movs	r0, #1
}
 8009f14:	b009      	add	sp, #36	; 0x24
 8009f16:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim14);
 8009f1a:	4804      	ldr	r0, [pc, #16]	; (8009f2c <HAL_InitTick+0x74>)
 8009f1c:	f7fb fb6c 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8009f20:	e7f8      	b.n	8009f14 <HAL_InitTick+0x5c>
 8009f22:	bf00      	nop
 8009f24:	40023800 	.word	0x40023800
 8009f28:	431bde83 	.word	0x431bde83
 8009f2c:	20004904 	.word	0x20004904
 8009f30:	40002000 	.word	0x40002000

08009f34 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009f34:	4770      	bx	lr

08009f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f36:	e7fe      	b.n	8009f36 <HardFault_Handler>

08009f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f38:	e7fe      	b.n	8009f38 <MemManage_Handler>

08009f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009f3a:	e7fe      	b.n	8009f3a <BusFault_Handler>

08009f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009f3c:	e7fe      	b.n	8009f3c <UsageFault_Handler>

08009f3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f3e:	4770      	bx	lr

08009f40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009f42:	2010      	movs	r0, #16
 8009f44:	f7f9 fa68 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009f48:	bd08      	pop	{r3, pc}
	...

08009f4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8009f4e:	4802      	ldr	r0, [pc, #8]	; (8009f58 <ADC_IRQHandler+0xc>)
 8009f50:	f7f8 fb0e 	bl	8002570 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009f54:	bd08      	pop	{r3, pc}
 8009f56:	bf00      	nop
 8009f58:	20004644 	.word	0x20004644

08009f5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8009f5e:	2040      	movs	r0, #64	; 0x40
 8009f60:	f7f9 fa5a 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009f64:	2080      	movs	r0, #128	; 0x80
 8009f66:	f7f9 fa57 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009f6a:	bd08      	pop	{r3, pc}

08009f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009f6e:	4802      	ldr	r0, [pc, #8]	; (8009f78 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8009f70:	f7fb fb5c 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009f74:	bd08      	pop	{r3, pc}
 8009f76:	bf00      	nop
 8009f78:	20004944 	.word	0x20004944

08009f7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8009f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8009f7e:	4802      	ldr	r0, [pc, #8]	; (8009f88 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8009f80:	f7fb fb54 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8009f84:	bd08      	pop	{r3, pc}
 8009f86:	bf00      	nop
 8009f88:	20004904 	.word	0x20004904

08009f8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8009f8e:	4802      	ldr	r0, [pc, #8]	; (8009f98 <DMA2_Stream1_IRQHandler+0xc>)
 8009f90:	f7f8 fec4 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009f94:	bd08      	pop	{r3, pc}
 8009f96:	bf00      	nop
 8009f98:	200045e4 	.word	0x200045e4

08009f9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009f9e:	4802      	ldr	r0, [pc, #8]	; (8009fa8 <LTDC_IRQHandler+0xc>)
 8009fa0:	f7f9 ff21 	bl	8003de6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009fa4:	bd08      	pop	{r3, pc}
 8009fa6:	bf00      	nop
 8009fa8:	200047f8 	.word	0x200047f8

08009fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009fac:	b508      	push	{r3, lr}
 8009fae:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009fb0:	4a0b      	ldr	r2, [pc, #44]	; (8009fe0 <_sbrk+0x34>)
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	b142      	cbz	r2, 8009fc8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8009fb6:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <_sbrk+0x34>)
 8009fb8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009fba:	4403      	add	r3, r0
 8009fbc:	466a      	mov	r2, sp
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d806      	bhi.n	8009fd0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8009fc2:	4a07      	ldr	r2, [pc, #28]	; (8009fe0 <_sbrk+0x34>)
 8009fc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8009fc6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8009fc8:	4a05      	ldr	r2, [pc, #20]	; (8009fe0 <_sbrk+0x34>)
 8009fca:	4906      	ldr	r1, [pc, #24]	; (8009fe4 <_sbrk+0x38>)
 8009fcc:	6011      	str	r1, [r2, #0]
 8009fce:	e7f2      	b.n	8009fb6 <_sbrk+0xa>
		errno = ENOMEM;
 8009fd0:	f000 f922 	bl	800a218 <__errno>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fdc:	e7f3      	b.n	8009fc6 <_sbrk+0x1a>
 8009fde:	bf00      	nop
 8009fe0:	20004304 	.word	0x20004304
 8009fe4:	20004a08 	.word	0x20004a08

08009fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009fe8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009fea:	4a0f      	ldr	r2, [pc, #60]	; (800a028 <SystemInit+0x40>)
 8009fec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <SystemInit+0x44>)
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	f041 0101 	orr.w	r1, r1, #1
 800a000:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a002:	2000      	movs	r0, #0
 800a004:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a006:	681c      	ldr	r4, [r3, #0]
 800a008:	4909      	ldr	r1, [pc, #36]	; (800a030 <SystemInit+0x48>)
 800a00a:	4021      	ands	r1, r4
 800a00c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a00e:	4909      	ldr	r1, [pc, #36]	; (800a034 <SystemInit+0x4c>)
 800a010:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a018:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a01a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a01c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a020:	6093      	str	r3, [r2, #8]
#endif
}
 800a022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	e000ed00 	.word	0xe000ed00
 800a02c:	40023800 	.word	0x40023800
 800a030:	fef6ffff 	.word	0xfef6ffff
 800a034:	24003010 	.word	0x24003010

0800a038 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a038:	b500      	push	{lr}
 800a03a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a03c:	2300      	movs	r3, #0
 800a03e:	9304      	str	r3, [sp, #16]
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	9303      	str	r3, [sp, #12]

  htim1.Instance = TIM1;
 800a04c:	4817      	ldr	r0, [pc, #92]	; (800a0ac <MX_TIM1_Init+0x74>)
 800a04e:	4a18      	ldr	r2, [pc, #96]	; (800a0b0 <MX_TIM1_Init+0x78>)
 800a050:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 10000-1;
 800a052:	f242 720f 	movw	r2, #9999	; 0x270f
 800a056:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a058:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 216-1;
 800a05a:	22d7      	movs	r2, #215	; 0xd7
 800a05c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a05e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800a060:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a062:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a064:	f7fb fc36 	bl	80058d4 <HAL_TIM_Base_Init>
 800a068:	b9b8      	cbnz	r0, 800a09a <MX_TIM1_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a06a:	a908      	add	r1, sp, #32
 800a06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a070:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a074:	480d      	ldr	r0, [pc, #52]	; (800a0ac <MX_TIM1_Init+0x74>)
 800a076:	f7fb fc53 	bl	8005920 <HAL_TIM_ConfigClockSource>
 800a07a:	b988      	cbnz	r0, 800a0a0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a07c:	2320      	movs	r3, #32
 800a07e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a080:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a084:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a086:	2300      	movs	r3, #0
 800a088:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a08a:	a901      	add	r1, sp, #4
 800a08c:	4807      	ldr	r0, [pc, #28]	; (800a0ac <MX_TIM1_Init+0x74>)
 800a08e:	f7fb fcb5 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 800a092:	b940      	cbnz	r0, 800a0a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
  }

}
 800a094:	b009      	add	sp, #36	; 0x24
 800a096:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a09a:	f7ff fe7b 	bl	8009d94 <Error_Handler>
 800a09e:	e7e4      	b.n	800a06a <MX_TIM1_Init+0x32>
    Error_Handler();
 800a0a0:	f7ff fe78 	bl	8009d94 <Error_Handler>
 800a0a4:	e7ea      	b.n	800a07c <MX_TIM1_Init+0x44>
    Error_Handler();
 800a0a6:	f7ff fe75 	bl	8009d94 <Error_Handler>
}
 800a0aa:	e7f3      	b.n	800a094 <MX_TIM1_Init+0x5c>
 800a0ac:	20004944 	.word	0x20004944
 800a0b0:	40010000 	.word	0x40010000

0800a0b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800a0b4:	6802      	ldr	r2, [r0, #0]
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <HAL_TIM_Base_MspInit+0x3c>)
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d000      	beq.n	800a0be <HAL_TIM_Base_MspInit+0xa>
 800a0bc:	4770      	bx	lr
{
 800a0be:	b500      	push	{lr}
 800a0c0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a0c2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800a0c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0c8:	f042 0201 	orr.w	r2, r2, #1
 800a0cc:	645a      	str	r2, [r3, #68]	; 0x44
 800a0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4611      	mov	r1, r2
 800a0dc:	2019      	movs	r0, #25
 800a0de:	f7f8 fc19 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a0e2:	2019      	movs	r0, #25
 800a0e4:	f7f8 fc48 	bl	8002978 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a0e8:	b003      	add	sp, #12
 800a0ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000

0800a0f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a0f4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800a0f6:	480b      	ldr	r0, [pc, #44]	; (800a124 <MX_USART1_UART_Init+0x30>)
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <MX_USART1_UART_Init+0x34>)
 800a0fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800a0fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a100:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a102:	2300      	movs	r3, #0
 800a104:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a106:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a108:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a10a:	220c      	movs	r2, #12
 800a10c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a10e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a110:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a112:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a114:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a116:	f7fb ff16 	bl	8005f46 <HAL_UART_Init>
 800a11a:	b900      	cbnz	r0, 800a11e <MX_USART1_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 800a11c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a11e:	f7ff fe39 	bl	8009d94 <Error_Handler>
}
 800a122:	e7fb      	b.n	800a11c <MX_USART1_UART_Init+0x28>
 800a124:	20004984 	.word	0x20004984
 800a128:	40011000 	.word	0x40011000

0800a12c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a130:	2300      	movs	r3, #0
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9305      	str	r3, [sp, #20]
 800a138:	9306      	str	r3, [sp, #24]
 800a13a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800a13c:	6802      	ldr	r2, [r0, #0]
 800a13e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a142:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800a146:	429a      	cmp	r2, r3
 800a148:	d001      	beq.n	800a14e <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a14a:	b008      	add	sp, #32
 800a14c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800a14e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800a152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a154:	f042 0210 	orr.w	r2, r2, #16
 800a158:	645a      	str	r2, [r3, #68]	; 0x44
 800a15a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15c:	f002 0210 	and.w	r2, r2, #16
 800a160:	9200      	str	r2, [sp, #0]
 800a162:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a166:	f042 0202 	orr.w	r2, r2, #2
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30
 800a16c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a16e:	f002 0202 	and.w	r2, r2, #2
 800a172:	9201      	str	r2, [sp, #4]
 800a174:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a178:	f042 0201 	orr.w	r2, r2, #1
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a18c:	2602      	movs	r6, #2
 800a18e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a190:	2503      	movs	r5, #3
 800a192:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a194:	2407      	movs	r4, #7
 800a196:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a198:	a903      	add	r1, sp, #12
 800a19a:	4808      	ldr	r0, [pc, #32]	; (800a1bc <HAL_UART_MspInit+0x90>)
 800a19c:	f7f9 f83e 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1a6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a1ae:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1b0:	a903      	add	r1, sp, #12
 800a1b2:	4803      	ldr	r0, [pc, #12]	; (800a1c0 <HAL_UART_MspInit+0x94>)
 800a1b4:	f7f9 f832 	bl	800321c <HAL_GPIO_Init>
}
 800a1b8:	e7c7      	b.n	800a14a <HAL_UART_MspInit+0x1e>
 800a1ba:	bf00      	nop
 800a1bc:	40020400 	.word	0x40020400
 800a1c0:	40020000 	.word	0x40020000

0800a1c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a1c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a1fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a1c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a1ca:	e003      	b.n	800a1d4 <LoopCopyDataInit>

0800a1cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a1ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a1d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a1d2:	3104      	adds	r1, #4

0800a1d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a1d4:	480b      	ldr	r0, [pc, #44]	; (800a204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a1d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a1da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a1dc:	d3f6      	bcc.n	800a1cc <CopyDataInit>
  ldr  r2, =_sbss
 800a1de:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a1e0:	e002      	b.n	800a1e8 <LoopFillZerobss>

0800a1e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a1e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a1e4:	f842 3b04 	str.w	r3, [r2], #4

0800a1e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a1e8:	4b09      	ldr	r3, [pc, #36]	; (800a210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a1ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a1ec:	d3f9      	bcc.n	800a1e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a1ee:	f7ff fefb 	bl	8009fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1f2:	f000 f817 	bl	800a224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1f6:	f7ff fd65 	bl	8009cc4 <main>
  bx  lr    
 800a1fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a1fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800a200:	080131a4 	.word	0x080131a4
  ldr  r0, =_sdata
 800a204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a208:	20000294 	.word	0x20000294
  ldr  r2, =_sbss
 800a20c:	20000294 	.word	0x20000294
  ldr  r3, = _ebss
 800a210:	20004a08 	.word	0x20004a08

0800a214 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a214:	e7fe      	b.n	800a214 <CAN1_RX0_IRQHandler>
	...

0800a218 <__errno>:
 800a218:	4b01      	ldr	r3, [pc, #4]	; (800a220 <__errno+0x8>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20000060 	.word	0x20000060

0800a224 <__libc_init_array>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0d      	ldr	r6, [pc, #52]	; (800a25c <__libc_init_array+0x38>)
 800a228:	4c0d      	ldr	r4, [pc, #52]	; (800a260 <__libc_init_array+0x3c>)
 800a22a:	1ba4      	subs	r4, r4, r6
 800a22c:	10a4      	asrs	r4, r4, #2
 800a22e:	2500      	movs	r5, #0
 800a230:	42a5      	cmp	r5, r4
 800a232:	d109      	bne.n	800a248 <__libc_init_array+0x24>
 800a234:	4e0b      	ldr	r6, [pc, #44]	; (800a264 <__libc_init_array+0x40>)
 800a236:	4c0c      	ldr	r4, [pc, #48]	; (800a268 <__libc_init_array+0x44>)
 800a238:	f005 fa7e 	bl	800f738 <_init>
 800a23c:	1ba4      	subs	r4, r4, r6
 800a23e:	10a4      	asrs	r4, r4, #2
 800a240:	2500      	movs	r5, #0
 800a242:	42a5      	cmp	r5, r4
 800a244:	d105      	bne.n	800a252 <__libc_init_array+0x2e>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24c:	4798      	blx	r3
 800a24e:	3501      	adds	r5, #1
 800a250:	e7ee      	b.n	800a230 <__libc_init_array+0xc>
 800a252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a256:	4798      	blx	r3
 800a258:	3501      	adds	r5, #1
 800a25a:	e7f2      	b.n	800a242 <__libc_init_array+0x1e>
 800a25c:	0801319c 	.word	0x0801319c
 800a260:	0801319c 	.word	0x0801319c
 800a264:	0801319c 	.word	0x0801319c
 800a268:	080131a0 	.word	0x080131a0

0800a26c <__itoa>:
 800a26c:	1e93      	subs	r3, r2, #2
 800a26e:	2b22      	cmp	r3, #34	; 0x22
 800a270:	b510      	push	{r4, lr}
 800a272:	460c      	mov	r4, r1
 800a274:	d904      	bls.n	800a280 <__itoa+0x14>
 800a276:	2300      	movs	r3, #0
 800a278:	700b      	strb	r3, [r1, #0]
 800a27a:	461c      	mov	r4, r3
 800a27c:	4620      	mov	r0, r4
 800a27e:	bd10      	pop	{r4, pc}
 800a280:	2a0a      	cmp	r2, #10
 800a282:	d109      	bne.n	800a298 <__itoa+0x2c>
 800a284:	2800      	cmp	r0, #0
 800a286:	da07      	bge.n	800a298 <__itoa+0x2c>
 800a288:	232d      	movs	r3, #45	; 0x2d
 800a28a:	700b      	strb	r3, [r1, #0]
 800a28c:	4240      	negs	r0, r0
 800a28e:	2101      	movs	r1, #1
 800a290:	4421      	add	r1, r4
 800a292:	f002 fcff 	bl	800cc94 <__utoa>
 800a296:	e7f1      	b.n	800a27c <__itoa+0x10>
 800a298:	2100      	movs	r1, #0
 800a29a:	e7f9      	b.n	800a290 <__itoa+0x24>

0800a29c <itoa>:
 800a29c:	f7ff bfe6 	b.w	800a26c <__itoa>

0800a2a0 <memcpy>:
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	1e43      	subs	r3, r0, #1
 800a2a4:	440a      	add	r2, r1
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	d100      	bne.n	800a2ac <memcpy+0xc>
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2b4:	e7f7      	b.n	800a2a6 <memcpy+0x6>

0800a2b6 <memset>:
 800a2b6:	4402      	add	r2, r0
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d100      	bne.n	800a2c0 <memset+0xa>
 800a2be:	4770      	bx	lr
 800a2c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c4:	e7f9      	b.n	800a2ba <memset+0x4>

0800a2c6 <__cvt>:
 800a2c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ca:	ec55 4b10 	vmov	r4, r5, d0
 800a2ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a2d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a2d4:	2d00      	cmp	r5, #0
 800a2d6:	460e      	mov	r6, r1
 800a2d8:	4691      	mov	r9, r2
 800a2da:	4619      	mov	r1, r3
 800a2dc:	bfb8      	it	lt
 800a2de:	4622      	movlt	r2, r4
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	f027 0720 	bic.w	r7, r7, #32
 800a2e6:	bfbb      	ittet	lt
 800a2e8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a2ec:	461d      	movlt	r5, r3
 800a2ee:	2300      	movge	r3, #0
 800a2f0:	232d      	movlt	r3, #45	; 0x2d
 800a2f2:	bfb8      	it	lt
 800a2f4:	4614      	movlt	r4, r2
 800a2f6:	2f46      	cmp	r7, #70	; 0x46
 800a2f8:	700b      	strb	r3, [r1, #0]
 800a2fa:	d004      	beq.n	800a306 <__cvt+0x40>
 800a2fc:	2f45      	cmp	r7, #69	; 0x45
 800a2fe:	d100      	bne.n	800a302 <__cvt+0x3c>
 800a300:	3601      	adds	r6, #1
 800a302:	2102      	movs	r1, #2
 800a304:	e000      	b.n	800a308 <__cvt+0x42>
 800a306:	2103      	movs	r1, #3
 800a308:	ab03      	add	r3, sp, #12
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	ab02      	add	r3, sp, #8
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	4632      	mov	r2, r6
 800a312:	4653      	mov	r3, sl
 800a314:	ec45 4b10 	vmov	d0, r4, r5
 800a318:	f002 fd8a 	bl	800ce30 <_dtoa_r>
 800a31c:	2f47      	cmp	r7, #71	; 0x47
 800a31e:	4680      	mov	r8, r0
 800a320:	d102      	bne.n	800a328 <__cvt+0x62>
 800a322:	f019 0f01 	tst.w	r9, #1
 800a326:	d026      	beq.n	800a376 <__cvt+0xb0>
 800a328:	2f46      	cmp	r7, #70	; 0x46
 800a32a:	eb08 0906 	add.w	r9, r8, r6
 800a32e:	d111      	bne.n	800a354 <__cvt+0x8e>
 800a330:	f898 3000 	ldrb.w	r3, [r8]
 800a334:	2b30      	cmp	r3, #48	; 0x30
 800a336:	d10a      	bne.n	800a34e <__cvt+0x88>
 800a338:	2200      	movs	r2, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f6 fbec 	bl	8000b1c <__aeabi_dcmpeq>
 800a344:	b918      	cbnz	r0, 800a34e <__cvt+0x88>
 800a346:	f1c6 0601 	rsb	r6, r6, #1
 800a34a:	f8ca 6000 	str.w	r6, [sl]
 800a34e:	f8da 3000 	ldr.w	r3, [sl]
 800a352:	4499      	add	r9, r3
 800a354:	2200      	movs	r2, #0
 800a356:	2300      	movs	r3, #0
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f6 fbde 	bl	8000b1c <__aeabi_dcmpeq>
 800a360:	b938      	cbnz	r0, 800a372 <__cvt+0xac>
 800a362:	2230      	movs	r2, #48	; 0x30
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	454b      	cmp	r3, r9
 800a368:	d205      	bcs.n	800a376 <__cvt+0xb0>
 800a36a:	1c59      	adds	r1, r3, #1
 800a36c:	9103      	str	r1, [sp, #12]
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	e7f8      	b.n	800a364 <__cvt+0x9e>
 800a372:	f8cd 900c 	str.w	r9, [sp, #12]
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a37a:	eba3 0308 	sub.w	r3, r3, r8
 800a37e:	4640      	mov	r0, r8
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	b004      	add	sp, #16
 800a384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a388 <__exponent>:
 800a388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a38a:	2900      	cmp	r1, #0
 800a38c:	4604      	mov	r4, r0
 800a38e:	bfba      	itte	lt
 800a390:	4249      	neglt	r1, r1
 800a392:	232d      	movlt	r3, #45	; 0x2d
 800a394:	232b      	movge	r3, #43	; 0x2b
 800a396:	2909      	cmp	r1, #9
 800a398:	f804 2b02 	strb.w	r2, [r4], #2
 800a39c:	7043      	strb	r3, [r0, #1]
 800a39e:	dd20      	ble.n	800a3e2 <__exponent+0x5a>
 800a3a0:	f10d 0307 	add.w	r3, sp, #7
 800a3a4:	461f      	mov	r7, r3
 800a3a6:	260a      	movs	r6, #10
 800a3a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a3ac:	fb06 1115 	mls	r1, r6, r5, r1
 800a3b0:	3130      	adds	r1, #48	; 0x30
 800a3b2:	2d09      	cmp	r5, #9
 800a3b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3b8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a3bc:	4629      	mov	r1, r5
 800a3be:	dc09      	bgt.n	800a3d4 <__exponent+0x4c>
 800a3c0:	3130      	adds	r1, #48	; 0x30
 800a3c2:	3b02      	subs	r3, #2
 800a3c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a3c8:	42bb      	cmp	r3, r7
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	d304      	bcc.n	800a3d8 <__exponent+0x50>
 800a3ce:	1a10      	subs	r0, r2, r0
 800a3d0:	b003      	add	sp, #12
 800a3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	e7e7      	b.n	800a3a8 <__exponent+0x20>
 800a3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3dc:	f804 2b01 	strb.w	r2, [r4], #1
 800a3e0:	e7f2      	b.n	800a3c8 <__exponent+0x40>
 800a3e2:	2330      	movs	r3, #48	; 0x30
 800a3e4:	4419      	add	r1, r3
 800a3e6:	7083      	strb	r3, [r0, #2]
 800a3e8:	1d02      	adds	r2, r0, #4
 800a3ea:	70c1      	strb	r1, [r0, #3]
 800a3ec:	e7ef      	b.n	800a3ce <__exponent+0x46>
	...

0800a3f0 <_printf_float>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	b08d      	sub	sp, #52	; 0x34
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a3fc:	4616      	mov	r6, r2
 800a3fe:	461f      	mov	r7, r3
 800a400:	4605      	mov	r5, r0
 800a402:	f003 fe53 	bl	800e0ac <_localeconv_r>
 800a406:	6803      	ldr	r3, [r0, #0]
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f5 ff00 	bl	8000210 <strlen>
 800a410:	2300      	movs	r3, #0
 800a412:	930a      	str	r3, [sp, #40]	; 0x28
 800a414:	f8d8 3000 	ldr.w	r3, [r8]
 800a418:	9005      	str	r0, [sp, #20]
 800a41a:	3307      	adds	r3, #7
 800a41c:	f023 0307 	bic.w	r3, r3, #7
 800a420:	f103 0208 	add.w	r2, r3, #8
 800a424:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a428:	f8d4 b000 	ldr.w	fp, [r4]
 800a42c:	f8c8 2000 	str.w	r2, [r8]
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a438:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a43c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a440:	9307      	str	r3, [sp, #28]
 800a442:	f8cd 8018 	str.w	r8, [sp, #24]
 800a446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a44a:	4ba7      	ldr	r3, [pc, #668]	; (800a6e8 <_printf_float+0x2f8>)
 800a44c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a450:	f7f6 fb96 	bl	8000b80 <__aeabi_dcmpun>
 800a454:	bb70      	cbnz	r0, 800a4b4 <_printf_float+0xc4>
 800a456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a45a:	4ba3      	ldr	r3, [pc, #652]	; (800a6e8 <_printf_float+0x2f8>)
 800a45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a460:	f7f6 fb70 	bl	8000b44 <__aeabi_dcmple>
 800a464:	bb30      	cbnz	r0, 800a4b4 <_printf_float+0xc4>
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f6 fb5f 	bl	8000b30 <__aeabi_dcmplt>
 800a472:	b110      	cbz	r0, 800a47a <_printf_float+0x8a>
 800a474:	232d      	movs	r3, #45	; 0x2d
 800a476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a47a:	4a9c      	ldr	r2, [pc, #624]	; (800a6ec <_printf_float+0x2fc>)
 800a47c:	4b9c      	ldr	r3, [pc, #624]	; (800a6f0 <_printf_float+0x300>)
 800a47e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a482:	bf8c      	ite	hi
 800a484:	4690      	movhi	r8, r2
 800a486:	4698      	movls	r8, r3
 800a488:	2303      	movs	r3, #3
 800a48a:	f02b 0204 	bic.w	r2, fp, #4
 800a48e:	6123      	str	r3, [r4, #16]
 800a490:	6022      	str	r2, [r4, #0]
 800a492:	f04f 0900 	mov.w	r9, #0
 800a496:	9700      	str	r7, [sp, #0]
 800a498:	4633      	mov	r3, r6
 800a49a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a49c:	4621      	mov	r1, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f9e6 	bl	800a870 <_printf_common>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f040 808d 	bne.w	800a5c4 <_printf_float+0x1d4>
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4ae:	b00d      	add	sp, #52	; 0x34
 800a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb60 	bl	8000b80 <__aeabi_dcmpun>
 800a4c0:	b110      	cbz	r0, 800a4c8 <_printf_float+0xd8>
 800a4c2:	4a8c      	ldr	r2, [pc, #560]	; (800a6f4 <_printf_float+0x304>)
 800a4c4:	4b8c      	ldr	r3, [pc, #560]	; (800a6f8 <_printf_float+0x308>)
 800a4c6:	e7da      	b.n	800a47e <_printf_float+0x8e>
 800a4c8:	6861      	ldr	r1, [r4, #4]
 800a4ca:	1c4b      	adds	r3, r1, #1
 800a4cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a4d0:	a80a      	add	r0, sp, #40	; 0x28
 800a4d2:	d13e      	bne.n	800a552 <_printf_float+0x162>
 800a4d4:	2306      	movs	r3, #6
 800a4d6:	6063      	str	r3, [r4, #4]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a4de:	ab09      	add	r3, sp, #36	; 0x24
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	ec49 8b10 	vmov	d0, r8, r9
 800a4e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4ea:	6022      	str	r2, [r4, #0]
 800a4ec:	f8cd a004 	str.w	sl, [sp, #4]
 800a4f0:	6861      	ldr	r1, [r4, #4]
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f7ff fee7 	bl	800a2c6 <__cvt>
 800a4f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a4fc:	2b47      	cmp	r3, #71	; 0x47
 800a4fe:	4680      	mov	r8, r0
 800a500:	d109      	bne.n	800a516 <_printf_float+0x126>
 800a502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a504:	1cd8      	adds	r0, r3, #3
 800a506:	db02      	blt.n	800a50e <_printf_float+0x11e>
 800a508:	6862      	ldr	r2, [r4, #4]
 800a50a:	4293      	cmp	r3, r2
 800a50c:	dd47      	ble.n	800a59e <_printf_float+0x1ae>
 800a50e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a512:	fa5f fa8a 	uxtb.w	sl, sl
 800a516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a51a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a51c:	d824      	bhi.n	800a568 <_printf_float+0x178>
 800a51e:	3901      	subs	r1, #1
 800a520:	4652      	mov	r2, sl
 800a522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a526:	9109      	str	r1, [sp, #36]	; 0x24
 800a528:	f7ff ff2e 	bl	800a388 <__exponent>
 800a52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a52e:	1813      	adds	r3, r2, r0
 800a530:	2a01      	cmp	r2, #1
 800a532:	4681      	mov	r9, r0
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	dc02      	bgt.n	800a53e <_printf_float+0x14e>
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	07d1      	lsls	r1, r2, #31
 800a53c:	d501      	bpl.n	800a542 <_printf_float+0x152>
 800a53e:	3301      	adds	r3, #1
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0a5      	beq.n	800a496 <_printf_float+0xa6>
 800a54a:	232d      	movs	r3, #45	; 0x2d
 800a54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a550:	e7a1      	b.n	800a496 <_printf_float+0xa6>
 800a552:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a556:	f000 8177 	beq.w	800a848 <_printf_float+0x458>
 800a55a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a55e:	d1bb      	bne.n	800a4d8 <_printf_float+0xe8>
 800a560:	2900      	cmp	r1, #0
 800a562:	d1b9      	bne.n	800a4d8 <_printf_float+0xe8>
 800a564:	2301      	movs	r3, #1
 800a566:	e7b6      	b.n	800a4d6 <_printf_float+0xe6>
 800a568:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a56c:	d119      	bne.n	800a5a2 <_printf_float+0x1b2>
 800a56e:	2900      	cmp	r1, #0
 800a570:	6863      	ldr	r3, [r4, #4]
 800a572:	dd0c      	ble.n	800a58e <_printf_float+0x19e>
 800a574:	6121      	str	r1, [r4, #16]
 800a576:	b913      	cbnz	r3, 800a57e <_printf_float+0x18e>
 800a578:	6822      	ldr	r2, [r4, #0]
 800a57a:	07d2      	lsls	r2, r2, #31
 800a57c:	d502      	bpl.n	800a584 <_printf_float+0x194>
 800a57e:	3301      	adds	r3, #1
 800a580:	440b      	add	r3, r1
 800a582:	6123      	str	r3, [r4, #16]
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	65a3      	str	r3, [r4, #88]	; 0x58
 800a588:	f04f 0900 	mov.w	r9, #0
 800a58c:	e7d9      	b.n	800a542 <_printf_float+0x152>
 800a58e:	b913      	cbnz	r3, 800a596 <_printf_float+0x1a6>
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	07d0      	lsls	r0, r2, #31
 800a594:	d501      	bpl.n	800a59a <_printf_float+0x1aa>
 800a596:	3302      	adds	r3, #2
 800a598:	e7f3      	b.n	800a582 <_printf_float+0x192>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e7f1      	b.n	800a582 <_printf_float+0x192>
 800a59e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a5a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	db05      	blt.n	800a5b6 <_printf_float+0x1c6>
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	07d1      	lsls	r1, r2, #31
 800a5b0:	d5e8      	bpl.n	800a584 <_printf_float+0x194>
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	e7e5      	b.n	800a582 <_printf_float+0x192>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfd4      	ite	le
 800a5ba:	f1c3 0302 	rsble	r3, r3, #2
 800a5be:	2301      	movgt	r3, #1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	e7de      	b.n	800a582 <_printf_float+0x192>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	055a      	lsls	r2, r3, #21
 800a5c8:	d407      	bmi.n	800a5da <_printf_float+0x1ea>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d12b      	bne.n	800a630 <_printf_float+0x240>
 800a5d8:	e767      	b.n	800a4aa <_printf_float+0xba>
 800a5da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a5de:	f240 80dc 	bls.w	800a79a <_printf_float+0x3aa>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5ea:	f7f6 fa97 	bl	8000b1c <__aeabi_dcmpeq>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d033      	beq.n	800a65a <_printf_float+0x26a>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4a41      	ldr	r2, [pc, #260]	; (800a6fc <_printf_float+0x30c>)
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f43f af54 	beq.w	800a4aa <_printf_float+0xba>
 800a602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a606:	429a      	cmp	r2, r3
 800a608:	db02      	blt.n	800a610 <_printf_float+0x220>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	07d8      	lsls	r0, r3, #31
 800a60e:	d50f      	bpl.n	800a630 <_printf_float+0x240>
 800a610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f af45 	beq.w	800a4aa <_printf_float+0xba>
 800a620:	f04f 0800 	mov.w	r8, #0
 800a624:	f104 091a 	add.w	r9, r4, #26
 800a628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a62a:	3b01      	subs	r3, #1
 800a62c:	4543      	cmp	r3, r8
 800a62e:	dc09      	bgt.n	800a644 <_printf_float+0x254>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	079b      	lsls	r3, r3, #30
 800a634:	f100 8103 	bmi.w	800a83e <_printf_float+0x44e>
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63c:	4298      	cmp	r0, r3
 800a63e:	bfb8      	it	lt
 800a640:	4618      	movlt	r0, r3
 800a642:	e734      	b.n	800a4ae <_printf_float+0xbe>
 800a644:	2301      	movs	r3, #1
 800a646:	464a      	mov	r2, r9
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af2b 	beq.w	800a4aa <_printf_float+0xba>
 800a654:	f108 0801 	add.w	r8, r8, #1
 800a658:	e7e6      	b.n	800a628 <_printf_float+0x238>
 800a65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dc2b      	bgt.n	800a6b8 <_printf_float+0x2c8>
 800a660:	2301      	movs	r3, #1
 800a662:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <_printf_float+0x30c>)
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af1d 	beq.w	800a4aa <_printf_float+0xba>
 800a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a672:	b923      	cbnz	r3, 800a67e <_printf_float+0x28e>
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	b913      	cbnz	r3, 800a67e <_printf_float+0x28e>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	07d9      	lsls	r1, r3, #31
 800a67c:	d5d8      	bpl.n	800a630 <_printf_float+0x240>
 800a67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a682:	4631      	mov	r1, r6
 800a684:	4628      	mov	r0, r5
 800a686:	47b8      	blx	r7
 800a688:	3001      	adds	r0, #1
 800a68a:	f43f af0e 	beq.w	800a4aa <_printf_float+0xba>
 800a68e:	f04f 0900 	mov.w	r9, #0
 800a692:	f104 0a1a 	add.w	sl, r4, #26
 800a696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a698:	425b      	negs	r3, r3
 800a69a:	454b      	cmp	r3, r9
 800a69c:	dc01      	bgt.n	800a6a2 <_printf_float+0x2b2>
 800a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a0:	e794      	b.n	800a5cc <_printf_float+0x1dc>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4652      	mov	r2, sl
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b8      	blx	r7
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f43f aefc 	beq.w	800a4aa <_printf_float+0xba>
 800a6b2:	f109 0901 	add.w	r9, r9, #1
 800a6b6:	e7ee      	b.n	800a696 <_printf_float+0x2a6>
 800a6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	bfa8      	it	ge
 800a6c0:	461a      	movge	r2, r3
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	4691      	mov	r9, r2
 800a6c6:	dd07      	ble.n	800a6d8 <_printf_float+0x2e8>
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	f43f aee9 	beq.w	800a4aa <_printf_float+0xba>
 800a6d8:	f104 031a 	add.w	r3, r4, #26
 800a6dc:	f04f 0b00 	mov.w	fp, #0
 800a6e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6e4:	9306      	str	r3, [sp, #24]
 800a6e6:	e015      	b.n	800a714 <_printf_float+0x324>
 800a6e8:	7fefffff 	.word	0x7fefffff
 800a6ec:	08012b28 	.word	0x08012b28
 800a6f0:	08012b24 	.word	0x08012b24
 800a6f4:	08012b30 	.word	0x08012b30
 800a6f8:	08012b2c 	.word	0x08012b2c
 800a6fc:	0801312e 	.word	0x0801312e
 800a700:	2301      	movs	r3, #1
 800a702:	9a06      	ldr	r2, [sp, #24]
 800a704:	4631      	mov	r1, r6
 800a706:	4628      	mov	r0, r5
 800a708:	47b8      	blx	r7
 800a70a:	3001      	adds	r0, #1
 800a70c:	f43f aecd 	beq.w	800a4aa <_printf_float+0xba>
 800a710:	f10b 0b01 	add.w	fp, fp, #1
 800a714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a718:	ebaa 0309 	sub.w	r3, sl, r9
 800a71c:	455b      	cmp	r3, fp
 800a71e:	dcef      	bgt.n	800a700 <_printf_float+0x310>
 800a720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a724:	429a      	cmp	r2, r3
 800a726:	44d0      	add	r8, sl
 800a728:	db15      	blt.n	800a756 <_printf_float+0x366>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	07da      	lsls	r2, r3, #31
 800a72e:	d412      	bmi.n	800a756 <_printf_float+0x366>
 800a730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a732:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a734:	eba3 020a 	sub.w	r2, r3, sl
 800a738:	eba3 0a01 	sub.w	sl, r3, r1
 800a73c:	4592      	cmp	sl, r2
 800a73e:	bfa8      	it	ge
 800a740:	4692      	movge	sl, r2
 800a742:	f1ba 0f00 	cmp.w	sl, #0
 800a746:	dc0e      	bgt.n	800a766 <_printf_float+0x376>
 800a748:	f04f 0800 	mov.w	r8, #0
 800a74c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a750:	f104 091a 	add.w	r9, r4, #26
 800a754:	e019      	b.n	800a78a <_printf_float+0x39a>
 800a756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	d1e5      	bne.n	800a730 <_printf_float+0x340>
 800a764:	e6a1      	b.n	800a4aa <_printf_float+0xba>
 800a766:	4653      	mov	r3, sl
 800a768:	4642      	mov	r2, r8
 800a76a:	4631      	mov	r1, r6
 800a76c:	4628      	mov	r0, r5
 800a76e:	47b8      	blx	r7
 800a770:	3001      	adds	r0, #1
 800a772:	d1e9      	bne.n	800a748 <_printf_float+0x358>
 800a774:	e699      	b.n	800a4aa <_printf_float+0xba>
 800a776:	2301      	movs	r3, #1
 800a778:	464a      	mov	r2, r9
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f ae92 	beq.w	800a4aa <_printf_float+0xba>
 800a786:	f108 0801 	add.w	r8, r8, #1
 800a78a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a78e:	1a9b      	subs	r3, r3, r2
 800a790:	eba3 030a 	sub.w	r3, r3, sl
 800a794:	4543      	cmp	r3, r8
 800a796:	dcee      	bgt.n	800a776 <_printf_float+0x386>
 800a798:	e74a      	b.n	800a630 <_printf_float+0x240>
 800a79a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a79c:	2a01      	cmp	r2, #1
 800a79e:	dc01      	bgt.n	800a7a4 <_printf_float+0x3b4>
 800a7a0:	07db      	lsls	r3, r3, #31
 800a7a2:	d53a      	bpl.n	800a81a <_printf_float+0x42a>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4642      	mov	r2, r8
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	47b8      	blx	r7
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	f43f ae7b 	beq.w	800a4aa <_printf_float+0xba>
 800a7b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	47b8      	blx	r7
 800a7be:	3001      	adds	r0, #1
 800a7c0:	f108 0801 	add.w	r8, r8, #1
 800a7c4:	f43f ae71 	beq.w	800a4aa <_printf_float+0xba>
 800a7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a7d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f7f6 f9a1 	bl	8000b1c <__aeabi_dcmpeq>
 800a7da:	b9c8      	cbnz	r0, 800a810 <_printf_float+0x420>
 800a7dc:	4653      	mov	r3, sl
 800a7de:	4642      	mov	r2, r8
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d10e      	bne.n	800a808 <_printf_float+0x418>
 800a7ea:	e65e      	b.n	800a4aa <_printf_float+0xba>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b8      	blx	r7
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f43f ae57 	beq.w	800a4aa <_printf_float+0xba>
 800a7fc:	f108 0801 	add.w	r8, r8, #1
 800a800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a802:	3b01      	subs	r3, #1
 800a804:	4543      	cmp	r3, r8
 800a806:	dcf1      	bgt.n	800a7ec <_printf_float+0x3fc>
 800a808:	464b      	mov	r3, r9
 800a80a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a80e:	e6de      	b.n	800a5ce <_printf_float+0x1de>
 800a810:	f04f 0800 	mov.w	r8, #0
 800a814:	f104 0a1a 	add.w	sl, r4, #26
 800a818:	e7f2      	b.n	800a800 <_printf_float+0x410>
 800a81a:	2301      	movs	r3, #1
 800a81c:	e7df      	b.n	800a7de <_printf_float+0x3ee>
 800a81e:	2301      	movs	r3, #1
 800a820:	464a      	mov	r2, r9
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	f43f ae3e 	beq.w	800a4aa <_printf_float+0xba>
 800a82e:	f108 0801 	add.w	r8, r8, #1
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	4543      	cmp	r3, r8
 800a83a:	dcf0      	bgt.n	800a81e <_printf_float+0x42e>
 800a83c:	e6fc      	b.n	800a638 <_printf_float+0x248>
 800a83e:	f04f 0800 	mov.w	r8, #0
 800a842:	f104 0919 	add.w	r9, r4, #25
 800a846:	e7f4      	b.n	800a832 <_printf_float+0x442>
 800a848:	2900      	cmp	r1, #0
 800a84a:	f43f ae8b 	beq.w	800a564 <_printf_float+0x174>
 800a84e:	2300      	movs	r3, #0
 800a850:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a854:	ab09      	add	r3, sp, #36	; 0x24
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	ec49 8b10 	vmov	d0, r8, r9
 800a85c:	6022      	str	r2, [r4, #0]
 800a85e:	f8cd a004 	str.w	sl, [sp, #4]
 800a862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a866:	4628      	mov	r0, r5
 800a868:	f7ff fd2d 	bl	800a2c6 <__cvt>
 800a86c:	4680      	mov	r8, r0
 800a86e:	e648      	b.n	800a502 <_printf_float+0x112>

0800a870 <_printf_common>:
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	4691      	mov	r9, r2
 800a876:	461f      	mov	r7, r3
 800a878:	688a      	ldr	r2, [r1, #8]
 800a87a:	690b      	ldr	r3, [r1, #16]
 800a87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a880:	4293      	cmp	r3, r2
 800a882:	bfb8      	it	lt
 800a884:	4613      	movlt	r3, r2
 800a886:	f8c9 3000 	str.w	r3, [r9]
 800a88a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a88e:	4606      	mov	r6, r0
 800a890:	460c      	mov	r4, r1
 800a892:	b112      	cbz	r2, 800a89a <_printf_common+0x2a>
 800a894:	3301      	adds	r3, #1
 800a896:	f8c9 3000 	str.w	r3, [r9]
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	0699      	lsls	r1, r3, #26
 800a89e:	bf42      	ittt	mi
 800a8a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a8a4:	3302      	addmi	r3, #2
 800a8a6:	f8c9 3000 	strmi.w	r3, [r9]
 800a8aa:	6825      	ldr	r5, [r4, #0]
 800a8ac:	f015 0506 	ands.w	r5, r5, #6
 800a8b0:	d107      	bne.n	800a8c2 <_printf_common+0x52>
 800a8b2:	f104 0a19 	add.w	sl, r4, #25
 800a8b6:	68e3      	ldr	r3, [r4, #12]
 800a8b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	42ab      	cmp	r3, r5
 800a8c0:	dc28      	bgt.n	800a914 <_printf_common+0xa4>
 800a8c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	3300      	adds	r3, #0
 800a8ca:	bf18      	it	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	0692      	lsls	r2, r2, #26
 800a8d0:	d42d      	bmi.n	800a92e <_printf_common+0xbe>
 800a8d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	4630      	mov	r0, r6
 800a8da:	47c0      	blx	r8
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d020      	beq.n	800a922 <_printf_common+0xb2>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	68e5      	ldr	r5, [r4, #12]
 800a8e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a8e8:	f003 0306 	and.w	r3, r3, #6
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	bf08      	it	eq
 800a8f0:	1aad      	subeq	r5, r5, r2
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	6922      	ldr	r2, [r4, #16]
 800a8f6:	bf0c      	ite	eq
 800a8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8fc:	2500      	movne	r5, #0
 800a8fe:	4293      	cmp	r3, r2
 800a900:	bfc4      	itt	gt
 800a902:	1a9b      	subgt	r3, r3, r2
 800a904:	18ed      	addgt	r5, r5, r3
 800a906:	f04f 0900 	mov.w	r9, #0
 800a90a:	341a      	adds	r4, #26
 800a90c:	454d      	cmp	r5, r9
 800a90e:	d11a      	bne.n	800a946 <_printf_common+0xd6>
 800a910:	2000      	movs	r0, #0
 800a912:	e008      	b.n	800a926 <_printf_common+0xb6>
 800a914:	2301      	movs	r3, #1
 800a916:	4652      	mov	r2, sl
 800a918:	4639      	mov	r1, r7
 800a91a:	4630      	mov	r0, r6
 800a91c:	47c0      	blx	r8
 800a91e:	3001      	adds	r0, #1
 800a920:	d103      	bne.n	800a92a <_printf_common+0xba>
 800a922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92a:	3501      	adds	r5, #1
 800a92c:	e7c3      	b.n	800a8b6 <_printf_common+0x46>
 800a92e:	18e1      	adds	r1, r4, r3
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	2030      	movs	r0, #48	; 0x30
 800a934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a938:	4422      	add	r2, r4
 800a93a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a93e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a942:	3302      	adds	r3, #2
 800a944:	e7c5      	b.n	800a8d2 <_printf_common+0x62>
 800a946:	2301      	movs	r3, #1
 800a948:	4622      	mov	r2, r4
 800a94a:	4639      	mov	r1, r7
 800a94c:	4630      	mov	r0, r6
 800a94e:	47c0      	blx	r8
 800a950:	3001      	adds	r0, #1
 800a952:	d0e6      	beq.n	800a922 <_printf_common+0xb2>
 800a954:	f109 0901 	add.w	r9, r9, #1
 800a958:	e7d8      	b.n	800a90c <_printf_common+0x9c>
	...

0800a95c <_printf_i>:
 800a95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a964:	460c      	mov	r4, r1
 800a966:	7e09      	ldrb	r1, [r1, #24]
 800a968:	b085      	sub	sp, #20
 800a96a:	296e      	cmp	r1, #110	; 0x6e
 800a96c:	4617      	mov	r7, r2
 800a96e:	4606      	mov	r6, r0
 800a970:	4698      	mov	r8, r3
 800a972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a974:	f000 80b3 	beq.w	800aade <_printf_i+0x182>
 800a978:	d822      	bhi.n	800a9c0 <_printf_i+0x64>
 800a97a:	2963      	cmp	r1, #99	; 0x63
 800a97c:	d036      	beq.n	800a9ec <_printf_i+0x90>
 800a97e:	d80a      	bhi.n	800a996 <_printf_i+0x3a>
 800a980:	2900      	cmp	r1, #0
 800a982:	f000 80b9 	beq.w	800aaf8 <_printf_i+0x19c>
 800a986:	2958      	cmp	r1, #88	; 0x58
 800a988:	f000 8083 	beq.w	800aa92 <_printf_i+0x136>
 800a98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a994:	e032      	b.n	800a9fc <_printf_i+0xa0>
 800a996:	2964      	cmp	r1, #100	; 0x64
 800a998:	d001      	beq.n	800a99e <_printf_i+0x42>
 800a99a:	2969      	cmp	r1, #105	; 0x69
 800a99c:	d1f6      	bne.n	800a98c <_printf_i+0x30>
 800a99e:	6820      	ldr	r0, [r4, #0]
 800a9a0:	6813      	ldr	r3, [r2, #0]
 800a9a2:	0605      	lsls	r5, r0, #24
 800a9a4:	f103 0104 	add.w	r1, r3, #4
 800a9a8:	d52a      	bpl.n	800aa00 <_printf_i+0xa4>
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6011      	str	r1, [r2, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	da03      	bge.n	800a9ba <_printf_i+0x5e>
 800a9b2:	222d      	movs	r2, #45	; 0x2d
 800a9b4:	425b      	negs	r3, r3
 800a9b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9ba:	486f      	ldr	r0, [pc, #444]	; (800ab78 <_printf_i+0x21c>)
 800a9bc:	220a      	movs	r2, #10
 800a9be:	e039      	b.n	800aa34 <_printf_i+0xd8>
 800a9c0:	2973      	cmp	r1, #115	; 0x73
 800a9c2:	f000 809d 	beq.w	800ab00 <_printf_i+0x1a4>
 800a9c6:	d808      	bhi.n	800a9da <_printf_i+0x7e>
 800a9c8:	296f      	cmp	r1, #111	; 0x6f
 800a9ca:	d020      	beq.n	800aa0e <_printf_i+0xb2>
 800a9cc:	2970      	cmp	r1, #112	; 0x70
 800a9ce:	d1dd      	bne.n	800a98c <_printf_i+0x30>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	f043 0320 	orr.w	r3, r3, #32
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	e003      	b.n	800a9e2 <_printf_i+0x86>
 800a9da:	2975      	cmp	r1, #117	; 0x75
 800a9dc:	d017      	beq.n	800aa0e <_printf_i+0xb2>
 800a9de:	2978      	cmp	r1, #120	; 0x78
 800a9e0:	d1d4      	bne.n	800a98c <_printf_i+0x30>
 800a9e2:	2378      	movs	r3, #120	; 0x78
 800a9e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9e8:	4864      	ldr	r0, [pc, #400]	; (800ab7c <_printf_i+0x220>)
 800a9ea:	e055      	b.n	800aa98 <_printf_i+0x13c>
 800a9ec:	6813      	ldr	r3, [r2, #0]
 800a9ee:	1d19      	adds	r1, r3, #4
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6011      	str	r1, [r2, #0]
 800a9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e08c      	b.n	800ab1a <_printf_i+0x1be>
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6011      	str	r1, [r2, #0]
 800aa04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa08:	bf18      	it	ne
 800aa0a:	b21b      	sxthne	r3, r3
 800aa0c:	e7cf      	b.n	800a9ae <_printf_i+0x52>
 800aa0e:	6813      	ldr	r3, [r2, #0]
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	1d18      	adds	r0, r3, #4
 800aa14:	6010      	str	r0, [r2, #0]
 800aa16:	0628      	lsls	r0, r5, #24
 800aa18:	d501      	bpl.n	800aa1e <_printf_i+0xc2>
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	e002      	b.n	800aa24 <_printf_i+0xc8>
 800aa1e:	0668      	lsls	r0, r5, #25
 800aa20:	d5fb      	bpl.n	800aa1a <_printf_i+0xbe>
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	4854      	ldr	r0, [pc, #336]	; (800ab78 <_printf_i+0x21c>)
 800aa26:	296f      	cmp	r1, #111	; 0x6f
 800aa28:	bf14      	ite	ne
 800aa2a:	220a      	movne	r2, #10
 800aa2c:	2208      	moveq	r2, #8
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa34:	6865      	ldr	r5, [r4, #4]
 800aa36:	60a5      	str	r5, [r4, #8]
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	f2c0 8095 	blt.w	800ab68 <_printf_i+0x20c>
 800aa3e:	6821      	ldr	r1, [r4, #0]
 800aa40:	f021 0104 	bic.w	r1, r1, #4
 800aa44:	6021      	str	r1, [r4, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d13d      	bne.n	800aac6 <_printf_i+0x16a>
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	f040 808e 	bne.w	800ab6c <_printf_i+0x210>
 800aa50:	4665      	mov	r5, ip
 800aa52:	2a08      	cmp	r2, #8
 800aa54:	d10b      	bne.n	800aa6e <_printf_i+0x112>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	07db      	lsls	r3, r3, #31
 800aa5a:	d508      	bpl.n	800aa6e <_printf_i+0x112>
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	6862      	ldr	r2, [r4, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	bfde      	ittt	le
 800aa64:	2330      	movle	r3, #48	; 0x30
 800aa66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa6e:	ebac 0305 	sub.w	r3, ip, r5
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	f8cd 8000 	str.w	r8, [sp]
 800aa78:	463b      	mov	r3, r7
 800aa7a:	aa03      	add	r2, sp, #12
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7ff fef6 	bl	800a870 <_printf_common>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d14d      	bne.n	800ab24 <_printf_i+0x1c8>
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa8c:	b005      	add	sp, #20
 800aa8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa92:	4839      	ldr	r0, [pc, #228]	; (800ab78 <_printf_i+0x21c>)
 800aa94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa98:	6813      	ldr	r3, [r2, #0]
 800aa9a:	6821      	ldr	r1, [r4, #0]
 800aa9c:	1d1d      	adds	r5, r3, #4
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6015      	str	r5, [r2, #0]
 800aaa2:	060a      	lsls	r2, r1, #24
 800aaa4:	d50b      	bpl.n	800aabe <_printf_i+0x162>
 800aaa6:	07ca      	lsls	r2, r1, #31
 800aaa8:	bf44      	itt	mi
 800aaaa:	f041 0120 	orrmi.w	r1, r1, #32
 800aaae:	6021      	strmi	r1, [r4, #0]
 800aab0:	b91b      	cbnz	r3, 800aaba <_printf_i+0x15e>
 800aab2:	6822      	ldr	r2, [r4, #0]
 800aab4:	f022 0220 	bic.w	r2, r2, #32
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	2210      	movs	r2, #16
 800aabc:	e7b7      	b.n	800aa2e <_printf_i+0xd2>
 800aabe:	064d      	lsls	r5, r1, #25
 800aac0:	bf48      	it	mi
 800aac2:	b29b      	uxthmi	r3, r3
 800aac4:	e7ef      	b.n	800aaa6 <_printf_i+0x14a>
 800aac6:	4665      	mov	r5, ip
 800aac8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aacc:	fb02 3311 	mls	r3, r2, r1, r3
 800aad0:	5cc3      	ldrb	r3, [r0, r3]
 800aad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aad6:	460b      	mov	r3, r1
 800aad8:	2900      	cmp	r1, #0
 800aada:	d1f5      	bne.n	800aac8 <_printf_i+0x16c>
 800aadc:	e7b9      	b.n	800aa52 <_printf_i+0xf6>
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	6961      	ldr	r1, [r4, #20]
 800aae4:	1d18      	adds	r0, r3, #4
 800aae6:	6010      	str	r0, [r2, #0]
 800aae8:	0628      	lsls	r0, r5, #24
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	d501      	bpl.n	800aaf2 <_printf_i+0x196>
 800aaee:	6019      	str	r1, [r3, #0]
 800aaf0:	e002      	b.n	800aaf8 <_printf_i+0x19c>
 800aaf2:	066a      	lsls	r2, r5, #25
 800aaf4:	d5fb      	bpl.n	800aaee <_printf_i+0x192>
 800aaf6:	8019      	strh	r1, [r3, #0]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	4665      	mov	r5, ip
 800aafe:	e7b9      	b.n	800aa74 <_printf_i+0x118>
 800ab00:	6813      	ldr	r3, [r2, #0]
 800ab02:	1d19      	adds	r1, r3, #4
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	681d      	ldr	r5, [r3, #0]
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f7f5 fb87 	bl	8000220 <memchr>
 800ab12:	b108      	cbz	r0, 800ab18 <_printf_i+0x1bc>
 800ab14:	1b40      	subs	r0, r0, r5
 800ab16:	6060      	str	r0, [r4, #4]
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	6123      	str	r3, [r4, #16]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab22:	e7a7      	b.n	800aa74 <_printf_i+0x118>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	462a      	mov	r2, r5
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	47c0      	blx	r8
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d0aa      	beq.n	800aa88 <_printf_i+0x12c>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	079b      	lsls	r3, r3, #30
 800ab36:	d413      	bmi.n	800ab60 <_printf_i+0x204>
 800ab38:	68e0      	ldr	r0, [r4, #12]
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	4298      	cmp	r0, r3
 800ab3e:	bfb8      	it	lt
 800ab40:	4618      	movlt	r0, r3
 800ab42:	e7a3      	b.n	800aa8c <_printf_i+0x130>
 800ab44:	2301      	movs	r3, #1
 800ab46:	464a      	mov	r2, r9
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	47c0      	blx	r8
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d09a      	beq.n	800aa88 <_printf_i+0x12c>
 800ab52:	3501      	adds	r5, #1
 800ab54:	68e3      	ldr	r3, [r4, #12]
 800ab56:	9a03      	ldr	r2, [sp, #12]
 800ab58:	1a9b      	subs	r3, r3, r2
 800ab5a:	42ab      	cmp	r3, r5
 800ab5c:	dcf2      	bgt.n	800ab44 <_printf_i+0x1e8>
 800ab5e:	e7eb      	b.n	800ab38 <_printf_i+0x1dc>
 800ab60:	2500      	movs	r5, #0
 800ab62:	f104 0919 	add.w	r9, r4, #25
 800ab66:	e7f5      	b.n	800ab54 <_printf_i+0x1f8>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1ac      	bne.n	800aac6 <_printf_i+0x16a>
 800ab6c:	7803      	ldrb	r3, [r0, #0]
 800ab6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab76:	e76c      	b.n	800aa52 <_printf_i+0xf6>
 800ab78:	08012b34 	.word	0x08012b34
 800ab7c:	08012b45 	.word	0x08012b45

0800ab80 <_scanf_float>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	469a      	mov	sl, r3
 800ab86:	688b      	ldr	r3, [r1, #8]
 800ab88:	4616      	mov	r6, r2
 800ab8a:	1e5a      	subs	r2, r3, #1
 800ab8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab90:	b087      	sub	sp, #28
 800ab92:	bf83      	ittte	hi
 800ab94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ab98:	189b      	addhi	r3, r3, r2
 800ab9a:	9301      	strhi	r3, [sp, #4]
 800ab9c:	2300      	movls	r3, #0
 800ab9e:	bf86      	itte	hi
 800aba0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aba4:	608b      	strhi	r3, [r1, #8]
 800aba6:	9301      	strls	r3, [sp, #4]
 800aba8:	680b      	ldr	r3, [r1, #0]
 800abaa:	4688      	mov	r8, r1
 800abac:	f04f 0b00 	mov.w	fp, #0
 800abb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800abb4:	f848 3b1c 	str.w	r3, [r8], #28
 800abb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800abbc:	4607      	mov	r7, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	4645      	mov	r5, r8
 800abc2:	465a      	mov	r2, fp
 800abc4:	46d9      	mov	r9, fp
 800abc6:	f8cd b008 	str.w	fp, [sp, #8]
 800abca:	68a1      	ldr	r1, [r4, #8]
 800abcc:	b181      	cbz	r1, 800abf0 <_scanf_float+0x70>
 800abce:	6833      	ldr	r3, [r6, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b49      	cmp	r3, #73	; 0x49
 800abd4:	d071      	beq.n	800acba <_scanf_float+0x13a>
 800abd6:	d84d      	bhi.n	800ac74 <_scanf_float+0xf4>
 800abd8:	2b39      	cmp	r3, #57	; 0x39
 800abda:	d840      	bhi.n	800ac5e <_scanf_float+0xde>
 800abdc:	2b31      	cmp	r3, #49	; 0x31
 800abde:	f080 8088 	bcs.w	800acf2 <_scanf_float+0x172>
 800abe2:	2b2d      	cmp	r3, #45	; 0x2d
 800abe4:	f000 8090 	beq.w	800ad08 <_scanf_float+0x188>
 800abe8:	d815      	bhi.n	800ac16 <_scanf_float+0x96>
 800abea:	2b2b      	cmp	r3, #43	; 0x2b
 800abec:	f000 808c 	beq.w	800ad08 <_scanf_float+0x188>
 800abf0:	f1b9 0f00 	cmp.w	r9, #0
 800abf4:	d003      	beq.n	800abfe <_scanf_float+0x7e>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	3a01      	subs	r2, #1
 800ac00:	2a01      	cmp	r2, #1
 800ac02:	f200 80ea 	bhi.w	800adda <_scanf_float+0x25a>
 800ac06:	4545      	cmp	r5, r8
 800ac08:	f200 80dc 	bhi.w	800adc4 <_scanf_float+0x244>
 800ac0c:	2601      	movs	r6, #1
 800ac0e:	4630      	mov	r0, r6
 800ac10:	b007      	add	sp, #28
 800ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac16:	2b2e      	cmp	r3, #46	; 0x2e
 800ac18:	f000 809f 	beq.w	800ad5a <_scanf_float+0x1da>
 800ac1c:	2b30      	cmp	r3, #48	; 0x30
 800ac1e:	d1e7      	bne.n	800abf0 <_scanf_float+0x70>
 800ac20:	6820      	ldr	r0, [r4, #0]
 800ac22:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ac26:	d064      	beq.n	800acf2 <_scanf_float+0x172>
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ac2e:	6020      	str	r0, [r4, #0]
 800ac30:	f109 0901 	add.w	r9, r9, #1
 800ac34:	b11b      	cbz	r3, 800ac3e <_scanf_float+0xbe>
 800ac36:	3b01      	subs	r3, #1
 800ac38:	3101      	adds	r1, #1
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	60a1      	str	r1, [r4, #8]
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	60a3      	str	r3, [r4, #8]
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	3301      	adds	r3, #1
 800ac48:	6123      	str	r3, [r4, #16]
 800ac4a:	6873      	ldr	r3, [r6, #4]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	6073      	str	r3, [r6, #4]
 800ac52:	f340 80ac 	ble.w	800adae <_scanf_float+0x22e>
 800ac56:	6833      	ldr	r3, [r6, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	6033      	str	r3, [r6, #0]
 800ac5c:	e7b5      	b.n	800abca <_scanf_float+0x4a>
 800ac5e:	2b45      	cmp	r3, #69	; 0x45
 800ac60:	f000 8085 	beq.w	800ad6e <_scanf_float+0x1ee>
 800ac64:	2b46      	cmp	r3, #70	; 0x46
 800ac66:	d06a      	beq.n	800ad3e <_scanf_float+0x1be>
 800ac68:	2b41      	cmp	r3, #65	; 0x41
 800ac6a:	d1c1      	bne.n	800abf0 <_scanf_float+0x70>
 800ac6c:	2a01      	cmp	r2, #1
 800ac6e:	d1bf      	bne.n	800abf0 <_scanf_float+0x70>
 800ac70:	2202      	movs	r2, #2
 800ac72:	e046      	b.n	800ad02 <_scanf_float+0x182>
 800ac74:	2b65      	cmp	r3, #101	; 0x65
 800ac76:	d07a      	beq.n	800ad6e <_scanf_float+0x1ee>
 800ac78:	d818      	bhi.n	800acac <_scanf_float+0x12c>
 800ac7a:	2b54      	cmp	r3, #84	; 0x54
 800ac7c:	d066      	beq.n	800ad4c <_scanf_float+0x1cc>
 800ac7e:	d811      	bhi.n	800aca4 <_scanf_float+0x124>
 800ac80:	2b4e      	cmp	r3, #78	; 0x4e
 800ac82:	d1b5      	bne.n	800abf0 <_scanf_float+0x70>
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	d146      	bne.n	800ad16 <_scanf_float+0x196>
 800ac88:	f1b9 0f00 	cmp.w	r9, #0
 800ac8c:	d145      	bne.n	800ad1a <_scanf_float+0x19a>
 800ac8e:	6821      	ldr	r1, [r4, #0]
 800ac90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ac94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ac98:	d13f      	bne.n	800ad1a <_scanf_float+0x19a>
 800ac9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ac9e:	6021      	str	r1, [r4, #0]
 800aca0:	2201      	movs	r2, #1
 800aca2:	e02e      	b.n	800ad02 <_scanf_float+0x182>
 800aca4:	2b59      	cmp	r3, #89	; 0x59
 800aca6:	d01e      	beq.n	800ace6 <_scanf_float+0x166>
 800aca8:	2b61      	cmp	r3, #97	; 0x61
 800acaa:	e7de      	b.n	800ac6a <_scanf_float+0xea>
 800acac:	2b6e      	cmp	r3, #110	; 0x6e
 800acae:	d0e9      	beq.n	800ac84 <_scanf_float+0x104>
 800acb0:	d815      	bhi.n	800acde <_scanf_float+0x15e>
 800acb2:	2b66      	cmp	r3, #102	; 0x66
 800acb4:	d043      	beq.n	800ad3e <_scanf_float+0x1be>
 800acb6:	2b69      	cmp	r3, #105	; 0x69
 800acb8:	d19a      	bne.n	800abf0 <_scanf_float+0x70>
 800acba:	f1bb 0f00 	cmp.w	fp, #0
 800acbe:	d138      	bne.n	800ad32 <_scanf_float+0x1b2>
 800acc0:	f1b9 0f00 	cmp.w	r9, #0
 800acc4:	d197      	bne.n	800abf6 <_scanf_float+0x76>
 800acc6:	6821      	ldr	r1, [r4, #0]
 800acc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800accc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800acd0:	d195      	bne.n	800abfe <_scanf_float+0x7e>
 800acd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800acd6:	6021      	str	r1, [r4, #0]
 800acd8:	f04f 0b01 	mov.w	fp, #1
 800acdc:	e011      	b.n	800ad02 <_scanf_float+0x182>
 800acde:	2b74      	cmp	r3, #116	; 0x74
 800ace0:	d034      	beq.n	800ad4c <_scanf_float+0x1cc>
 800ace2:	2b79      	cmp	r3, #121	; 0x79
 800ace4:	d184      	bne.n	800abf0 <_scanf_float+0x70>
 800ace6:	f1bb 0f07 	cmp.w	fp, #7
 800acea:	d181      	bne.n	800abf0 <_scanf_float+0x70>
 800acec:	f04f 0b08 	mov.w	fp, #8
 800acf0:	e007      	b.n	800ad02 <_scanf_float+0x182>
 800acf2:	eb12 0f0b 	cmn.w	r2, fp
 800acf6:	f47f af7b 	bne.w	800abf0 <_scanf_float+0x70>
 800acfa:	6821      	ldr	r1, [r4, #0]
 800acfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ad00:	6021      	str	r1, [r4, #0]
 800ad02:	702b      	strb	r3, [r5, #0]
 800ad04:	3501      	adds	r5, #1
 800ad06:	e79a      	b.n	800ac3e <_scanf_float+0xbe>
 800ad08:	6821      	ldr	r1, [r4, #0]
 800ad0a:	0608      	lsls	r0, r1, #24
 800ad0c:	f57f af70 	bpl.w	800abf0 <_scanf_float+0x70>
 800ad10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad14:	e7f4      	b.n	800ad00 <_scanf_float+0x180>
 800ad16:	2a02      	cmp	r2, #2
 800ad18:	d047      	beq.n	800adaa <_scanf_float+0x22a>
 800ad1a:	f1bb 0f01 	cmp.w	fp, #1
 800ad1e:	d003      	beq.n	800ad28 <_scanf_float+0x1a8>
 800ad20:	f1bb 0f04 	cmp.w	fp, #4
 800ad24:	f47f af64 	bne.w	800abf0 <_scanf_float+0x70>
 800ad28:	f10b 0b01 	add.w	fp, fp, #1
 800ad2c:	fa5f fb8b 	uxtb.w	fp, fp
 800ad30:	e7e7      	b.n	800ad02 <_scanf_float+0x182>
 800ad32:	f1bb 0f03 	cmp.w	fp, #3
 800ad36:	d0f7      	beq.n	800ad28 <_scanf_float+0x1a8>
 800ad38:	f1bb 0f05 	cmp.w	fp, #5
 800ad3c:	e7f2      	b.n	800ad24 <_scanf_float+0x1a4>
 800ad3e:	f1bb 0f02 	cmp.w	fp, #2
 800ad42:	f47f af55 	bne.w	800abf0 <_scanf_float+0x70>
 800ad46:	f04f 0b03 	mov.w	fp, #3
 800ad4a:	e7da      	b.n	800ad02 <_scanf_float+0x182>
 800ad4c:	f1bb 0f06 	cmp.w	fp, #6
 800ad50:	f47f af4e 	bne.w	800abf0 <_scanf_float+0x70>
 800ad54:	f04f 0b07 	mov.w	fp, #7
 800ad58:	e7d3      	b.n	800ad02 <_scanf_float+0x182>
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	0588      	lsls	r0, r1, #22
 800ad5e:	f57f af47 	bpl.w	800abf0 <_scanf_float+0x70>
 800ad62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ad66:	6021      	str	r1, [r4, #0]
 800ad68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad6c:	e7c9      	b.n	800ad02 <_scanf_float+0x182>
 800ad6e:	6821      	ldr	r1, [r4, #0]
 800ad70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ad74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ad78:	d006      	beq.n	800ad88 <_scanf_float+0x208>
 800ad7a:	0548      	lsls	r0, r1, #21
 800ad7c:	f57f af38 	bpl.w	800abf0 <_scanf_float+0x70>
 800ad80:	f1b9 0f00 	cmp.w	r9, #0
 800ad84:	f43f af3b 	beq.w	800abfe <_scanf_float+0x7e>
 800ad88:	0588      	lsls	r0, r1, #22
 800ad8a:	bf58      	it	pl
 800ad8c:	9802      	ldrpl	r0, [sp, #8]
 800ad8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ad92:	bf58      	it	pl
 800ad94:	eba9 0000 	subpl.w	r0, r9, r0
 800ad98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ad9c:	bf58      	it	pl
 800ad9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ada2:	6021      	str	r1, [r4, #0]
 800ada4:	f04f 0900 	mov.w	r9, #0
 800ada8:	e7ab      	b.n	800ad02 <_scanf_float+0x182>
 800adaa:	2203      	movs	r2, #3
 800adac:	e7a9      	b.n	800ad02 <_scanf_float+0x182>
 800adae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800adb2:	9205      	str	r2, [sp, #20]
 800adb4:	4631      	mov	r1, r6
 800adb6:	4638      	mov	r0, r7
 800adb8:	4798      	blx	r3
 800adba:	9a05      	ldr	r2, [sp, #20]
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f af04 	beq.w	800abca <_scanf_float+0x4a>
 800adc2:	e715      	b.n	800abf0 <_scanf_float+0x70>
 800adc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800adcc:	4632      	mov	r2, r6
 800adce:	4638      	mov	r0, r7
 800add0:	4798      	blx	r3
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	3b01      	subs	r3, #1
 800add6:	6123      	str	r3, [r4, #16]
 800add8:	e715      	b.n	800ac06 <_scanf_float+0x86>
 800adda:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800adde:	2b06      	cmp	r3, #6
 800ade0:	d80a      	bhi.n	800adf8 <_scanf_float+0x278>
 800ade2:	f1bb 0f02 	cmp.w	fp, #2
 800ade6:	d968      	bls.n	800aeba <_scanf_float+0x33a>
 800ade8:	f1ab 0b03 	sub.w	fp, fp, #3
 800adec:	fa5f fb8b 	uxtb.w	fp, fp
 800adf0:	eba5 0b0b 	sub.w	fp, r5, fp
 800adf4:	455d      	cmp	r5, fp
 800adf6:	d14b      	bne.n	800ae90 <_scanf_float+0x310>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	05da      	lsls	r2, r3, #23
 800adfc:	d51f      	bpl.n	800ae3e <_scanf_float+0x2be>
 800adfe:	055b      	lsls	r3, r3, #21
 800ae00:	d468      	bmi.n	800aed4 <_scanf_float+0x354>
 800ae02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae06:	6923      	ldr	r3, [r4, #16]
 800ae08:	2965      	cmp	r1, #101	; 0x65
 800ae0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ae0e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	d00d      	beq.n	800ae32 <_scanf_float+0x2b2>
 800ae16:	2945      	cmp	r1, #69	; 0x45
 800ae18:	d00b      	beq.n	800ae32 <_scanf_float+0x2b2>
 800ae1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae1e:	4632      	mov	r2, r6
 800ae20:	4638      	mov	r0, r7
 800ae22:	4798      	blx	r3
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	f1a5 0b02 	sub.w	fp, r5, #2
 800ae30:	6123      	str	r3, [r4, #16]
 800ae32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae36:	4632      	mov	r2, r6
 800ae38:	4638      	mov	r0, r7
 800ae3a:	4798      	blx	r3
 800ae3c:	465d      	mov	r5, fp
 800ae3e:	6826      	ldr	r6, [r4, #0]
 800ae40:	f016 0610 	ands.w	r6, r6, #16
 800ae44:	d17a      	bne.n	800af3c <_scanf_float+0x3bc>
 800ae46:	702e      	strb	r6, [r5, #0]
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae52:	d142      	bne.n	800aeda <_scanf_float+0x35a>
 800ae54:	9b02      	ldr	r3, [sp, #8]
 800ae56:	eba9 0303 	sub.w	r3, r9, r3
 800ae5a:	425a      	negs	r2, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d149      	bne.n	800aef4 <_scanf_float+0x374>
 800ae60:	2200      	movs	r2, #0
 800ae62:	4641      	mov	r1, r8
 800ae64:	4638      	mov	r0, r7
 800ae66:	f001 fc4f 	bl	800c708 <_strtod_r>
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	f8da 3000 	ldr.w	r3, [sl]
 800ae70:	f015 0f02 	tst.w	r5, #2
 800ae74:	f103 0204 	add.w	r2, r3, #4
 800ae78:	ec59 8b10 	vmov	r8, r9, d0
 800ae7c:	f8ca 2000 	str.w	r2, [sl]
 800ae80:	d043      	beq.n	800af0a <_scanf_float+0x38a>
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	e9c3 8900 	strd	r8, r9, [r3]
 800ae88:	68e3      	ldr	r3, [r4, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	60e3      	str	r3, [r4, #12]
 800ae8e:	e6be      	b.n	800ac0e <_scanf_float+0x8e>
 800ae90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	4798      	blx	r3
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	6123      	str	r3, [r4, #16]
 800aea4:	e7a6      	b.n	800adf4 <_scanf_float+0x274>
 800aea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aeae:	4632      	mov	r2, r6
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	4798      	blx	r3
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	4545      	cmp	r5, r8
 800aebc:	d8f3      	bhi.n	800aea6 <_scanf_float+0x326>
 800aebe:	e6a5      	b.n	800ac0c <_scanf_float+0x8c>
 800aec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aec4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aec8:	4632      	mov	r2, r6
 800aeca:	4638      	mov	r0, r7
 800aecc:	4798      	blx	r3
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	4545      	cmp	r5, r8
 800aed6:	d8f3      	bhi.n	800aec0 <_scanf_float+0x340>
 800aed8:	e698      	b.n	800ac0c <_scanf_float+0x8c>
 800aeda:	9b03      	ldr	r3, [sp, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0bf      	beq.n	800ae60 <_scanf_float+0x2e0>
 800aee0:	9904      	ldr	r1, [sp, #16]
 800aee2:	230a      	movs	r3, #10
 800aee4:	4632      	mov	r2, r6
 800aee6:	3101      	adds	r1, #1
 800aee8:	4638      	mov	r0, r7
 800aeea:	f001 fc99 	bl	800c820 <_strtol_r>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	9d04      	ldr	r5, [sp, #16]
 800aef2:	1ac2      	subs	r2, r0, r3
 800aef4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aef8:	429d      	cmp	r5, r3
 800aefa:	bf28      	it	cs
 800aefc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800af00:	490f      	ldr	r1, [pc, #60]	; (800af40 <_scanf_float+0x3c0>)
 800af02:	4628      	mov	r0, r5
 800af04:	f000 f858 	bl	800afb8 <siprintf>
 800af08:	e7aa      	b.n	800ae60 <_scanf_float+0x2e0>
 800af0a:	f015 0504 	ands.w	r5, r5, #4
 800af0e:	d1b8      	bne.n	800ae82 <_scanf_float+0x302>
 800af10:	681f      	ldr	r7, [r3, #0]
 800af12:	ee10 2a10 	vmov	r2, s0
 800af16:	464b      	mov	r3, r9
 800af18:	ee10 0a10 	vmov	r0, s0
 800af1c:	4649      	mov	r1, r9
 800af1e:	f7f5 fe2f 	bl	8000b80 <__aeabi_dcmpun>
 800af22:	b128      	cbz	r0, 800af30 <_scanf_float+0x3b0>
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f80d 	bl	800af44 <nanf>
 800af2a:	ed87 0a00 	vstr	s0, [r7]
 800af2e:	e7ab      	b.n	800ae88 <_scanf_float+0x308>
 800af30:	4640      	mov	r0, r8
 800af32:	4649      	mov	r1, r9
 800af34:	f7f5 fe82 	bl	8000c3c <__aeabi_d2f>
 800af38:	6038      	str	r0, [r7, #0]
 800af3a:	e7a5      	b.n	800ae88 <_scanf_float+0x308>
 800af3c:	2600      	movs	r6, #0
 800af3e:	e666      	b.n	800ac0e <_scanf_float+0x8e>
 800af40:	08012b56 	.word	0x08012b56

0800af44 <nanf>:
 800af44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af4c <nanf+0x8>
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	7fc00000 	.word	0x7fc00000

0800af50 <sniprintf>:
 800af50:	b40c      	push	{r2, r3}
 800af52:	b530      	push	{r4, r5, lr}
 800af54:	4b17      	ldr	r3, [pc, #92]	; (800afb4 <sniprintf+0x64>)
 800af56:	1e0c      	subs	r4, r1, #0
 800af58:	b09d      	sub	sp, #116	; 0x74
 800af5a:	681d      	ldr	r5, [r3, #0]
 800af5c:	da08      	bge.n	800af70 <sniprintf+0x20>
 800af5e:	238b      	movs	r3, #139	; 0x8b
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af66:	b01d      	add	sp, #116	; 0x74
 800af68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af6c:	b002      	add	sp, #8
 800af6e:	4770      	bx	lr
 800af70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800af74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800af78:	bf14      	ite	ne
 800af7a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800af7e:	4623      	moveq	r3, r4
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af88:	9002      	str	r0, [sp, #8]
 800af8a:	9006      	str	r0, [sp, #24]
 800af8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af92:	ab21      	add	r3, sp, #132	; 0x84
 800af94:	a902      	add	r1, sp, #8
 800af96:	4628      	mov	r0, r5
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	f003 fdc7 	bl	800eb2c <_svfiprintf_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	bfbc      	itt	lt
 800afa2:	238b      	movlt	r3, #139	; 0x8b
 800afa4:	602b      	strlt	r3, [r5, #0]
 800afa6:	2c00      	cmp	r4, #0
 800afa8:	d0dd      	beq.n	800af66 <sniprintf+0x16>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	2200      	movs	r2, #0
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	e7d9      	b.n	800af66 <sniprintf+0x16>
 800afb2:	bf00      	nop
 800afb4:	20000060 	.word	0x20000060

0800afb8 <siprintf>:
 800afb8:	b40e      	push	{r1, r2, r3}
 800afba:	b500      	push	{lr}
 800afbc:	b09c      	sub	sp, #112	; 0x70
 800afbe:	ab1d      	add	r3, sp, #116	; 0x74
 800afc0:	9002      	str	r0, [sp, #8]
 800afc2:	9006      	str	r0, [sp, #24]
 800afc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afc8:	4809      	ldr	r0, [pc, #36]	; (800aff0 <siprintf+0x38>)
 800afca:	9107      	str	r1, [sp, #28]
 800afcc:	9104      	str	r1, [sp, #16]
 800afce:	4909      	ldr	r1, [pc, #36]	; (800aff4 <siprintf+0x3c>)
 800afd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd4:	9105      	str	r1, [sp, #20]
 800afd6:	6800      	ldr	r0, [r0, #0]
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	a902      	add	r1, sp, #8
 800afdc:	f003 fda6 	bl	800eb2c <_svfiprintf_r>
 800afe0:	9b02      	ldr	r3, [sp, #8]
 800afe2:	2200      	movs	r2, #0
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	b01c      	add	sp, #112	; 0x70
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	20000060 	.word	0x20000060
 800aff4:	ffff0208 	.word	0xffff0208

0800aff8 <iso_year_adjust>:
 800aff8:	6942      	ldr	r2, [r0, #20]
 800affa:	2a00      	cmp	r2, #0
 800affc:	f240 736c 	movw	r3, #1900	; 0x76c
 800b000:	bfa8      	it	ge
 800b002:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800b006:	441a      	add	r2, r3
 800b008:	0793      	lsls	r3, r2, #30
 800b00a:	d105      	bne.n	800b018 <iso_year_adjust+0x20>
 800b00c:	2164      	movs	r1, #100	; 0x64
 800b00e:	fb92 f3f1 	sdiv	r3, r2, r1
 800b012:	fb01 2313 	mls	r3, r1, r3, r2
 800b016:	b9d3      	cbnz	r3, 800b04e <iso_year_adjust+0x56>
 800b018:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b01c:	fb92 f3f1 	sdiv	r3, r2, r1
 800b020:	fb01 2313 	mls	r3, r1, r3, r2
 800b024:	fab3 f283 	clz	r2, r3
 800b028:	0952      	lsrs	r2, r2, #5
 800b02a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b034:	4413      	add	r3, r2
 800b036:	2b21      	cmp	r3, #33	; 0x21
 800b038:	dc11      	bgt.n	800b05e <iso_year_adjust+0x66>
 800b03a:	2b20      	cmp	r3, #32
 800b03c:	da30      	bge.n	800b0a0 <iso_year_adjust+0xa8>
 800b03e:	2b0d      	cmp	r3, #13
 800b040:	dc07      	bgt.n	800b052 <iso_year_adjust+0x5a>
 800b042:	2b0a      	cmp	r3, #10
 800b044:	da2c      	bge.n	800b0a0 <iso_year_adjust+0xa8>
 800b046:	2b01      	cmp	r3, #1
 800b048:	d92a      	bls.n	800b0a0 <iso_year_adjust+0xa8>
 800b04a:	2000      	movs	r0, #0
 800b04c:	4770      	bx	lr
 800b04e:	2201      	movs	r2, #1
 800b050:	e7eb      	b.n	800b02a <iso_year_adjust+0x32>
 800b052:	2b10      	cmp	r3, #16
 800b054:	dbf9      	blt.n	800b04a <iso_year_adjust+0x52>
 800b056:	2b11      	cmp	r3, #17
 800b058:	dd22      	ble.n	800b0a0 <iso_year_adjust+0xa8>
 800b05a:	3b1c      	subs	r3, #28
 800b05c:	e7f3      	b.n	800b046 <iso_year_adjust+0x4e>
 800b05e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 800b062:	4293      	cmp	r3, r2
 800b064:	dc0f      	bgt.n	800b086 <iso_year_adjust+0x8e>
 800b066:	f241 62c2 	movw	r2, #5826	; 0x16c2
 800b06a:	4293      	cmp	r3, r2
 800b06c:	da09      	bge.n	800b082 <iso_year_adjust+0x8a>
 800b06e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 800b072:	4293      	cmp	r3, r2
 800b074:	d005      	beq.n	800b082 <iso_year_adjust+0x8a>
 800b076:	dbe8      	blt.n	800b04a <iso_year_adjust+0x52>
 800b078:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 800b07c:	3b12      	subs	r3, #18
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d8e3      	bhi.n	800b04a <iso_year_adjust+0x52>
 800b082:	2001      	movs	r0, #1
 800b084:	4770      	bx	lr
 800b086:	f241 62d5 	movw	r2, #5845	; 0x16d5
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d0f9      	beq.n	800b082 <iso_year_adjust+0x8a>
 800b08e:	f241 62d7 	movw	r2, #5847	; 0x16d7
 800b092:	4293      	cmp	r3, r2
 800b094:	d0f5      	beq.n	800b082 <iso_year_adjust+0x8a>
 800b096:	f241 62d3 	movw	r2, #5843	; 0x16d3
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d1d5      	bne.n	800b04a <iso_year_adjust+0x52>
 800b09e:	e7f0      	b.n	800b082 <iso_year_adjust+0x8a>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <__strftime>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	b091      	sub	sp, #68	; 0x44
 800b0ae:	461d      	mov	r5, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	460e      	mov	r6, r1
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	461c      	mov	r4, r3
 800b0ba:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800b0be:	7813      	ldrb	r3, [r2, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 84e3 	beq.w	800ba8c <__strftime+0x9e4>
 800b0c6:	2b25      	cmp	r3, #37	; 0x25
 800b0c8:	d11f      	bne.n	800b10a <__strftime+0x62>
 800b0ca:	f892 a001 	ldrb.w	sl, [r2, #1]
 800b0ce:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800b0d2:	d023      	beq.n	800b11c <__strftime+0x74>
 800b0d4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 800b0d8:	d020      	beq.n	800b11c <__strftime+0x74>
 800b0da:	f102 0801 	add.w	r8, r2, #1
 800b0de:	f04f 0a00 	mov.w	sl, #0
 800b0e2:	f898 3000 	ldrb.w	r3, [r8]
 800b0e6:	3b31      	subs	r3, #49	; 0x31
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d81a      	bhi.n	800b122 <__strftime+0x7a>
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	220a      	movs	r2, #10
 800b0f0:	a908      	add	r1, sp, #32
 800b0f2:	f001 fc33 	bl	800c95c <strtoul>
 800b0f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	f898 3000 	ldrb.w	r3, [r8]
 800b100:	2b45      	cmp	r3, #69	; 0x45
 800b102:	d111      	bne.n	800b128 <__strftime+0x80>
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	e010      	b.n	800b12c <__strftime+0x84>
 800b10a:	45a3      	cmp	fp, r4
 800b10c:	d802      	bhi.n	800b114 <__strftime+0x6c>
 800b10e:	2400      	movs	r4, #0
 800b110:	f000 bcbf 	b.w	800ba92 <__strftime+0x9ea>
 800b114:	553b      	strb	r3, [r7, r4]
 800b116:	3201      	adds	r2, #1
 800b118:	3401      	adds	r4, #1
 800b11a:	e7d0      	b.n	800b0be <__strftime+0x16>
 800b11c:	f102 0802 	add.w	r8, r2, #2
 800b120:	e7df      	b.n	800b0e2 <__strftime+0x3a>
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	e7e9      	b.n	800b0fc <__strftime+0x54>
 800b128:	2b4f      	cmp	r3, #79	; 0x4f
 800b12a:	d0eb      	beq.n	800b104 <__strftime+0x5c>
 800b12c:	f898 1000 	ldrb.w	r1, [r8]
 800b130:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 800b134:	2b55      	cmp	r3, #85	; 0x55
 800b136:	d8ea      	bhi.n	800b10e <__strftime+0x66>
 800b138:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <__strftime+0x98>)
 800b13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13e:	bf00      	nop
 800b140:	0800ba83 	.word	0x0800ba83
 800b144:	0800b10f 	.word	0x0800b10f
 800b148:	0800b10f 	.word	0x0800b10f
 800b14c:	0800b10f 	.word	0x0800b10f
 800b150:	0800b10f 	.word	0x0800b10f
 800b154:	0800b10f 	.word	0x0800b10f
 800b158:	0800b10f 	.word	0x0800b10f
 800b15c:	0800b10f 	.word	0x0800b10f
 800b160:	0800b10f 	.word	0x0800b10f
 800b164:	0800b10f 	.word	0x0800b10f
 800b168:	0800b10f 	.word	0x0800b10f
 800b16c:	0800b10f 	.word	0x0800b10f
 800b170:	0800b10f 	.word	0x0800b10f
 800b174:	0800b10f 	.word	0x0800b10f
 800b178:	0800b10f 	.word	0x0800b10f
 800b17c:	0800b10f 	.word	0x0800b10f
 800b180:	0800b10f 	.word	0x0800b10f
 800b184:	0800b10f 	.word	0x0800b10f
 800b188:	0800b10f 	.word	0x0800b10f
 800b18c:	0800b10f 	.word	0x0800b10f
 800b190:	0800b10f 	.word	0x0800b10f
 800b194:	0800b10f 	.word	0x0800b10f
 800b198:	0800b10f 	.word	0x0800b10f
 800b19c:	0800b10f 	.word	0x0800b10f
 800b1a0:	0800b10f 	.word	0x0800b10f
 800b1a4:	0800b10f 	.word	0x0800b10f
 800b1a8:	0800b10f 	.word	0x0800b10f
 800b1ac:	0800b10f 	.word	0x0800b10f
 800b1b0:	0800b2d5 	.word	0x0800b2d5
 800b1b4:	0800b329 	.word	0x0800b329
 800b1b8:	0800b399 	.word	0x0800b399
 800b1bc:	0800b433 	.word	0x0800b433
 800b1c0:	0800b10f 	.word	0x0800b10f
 800b1c4:	0800b481 	.word	0x0800b481
 800b1c8:	0800b571 	.word	0x0800b571
 800b1cc:	0800b689 	.word	0x0800b689
 800b1d0:	0800b697 	.word	0x0800b697
 800b1d4:	0800b10f 	.word	0x0800b10f
 800b1d8:	0800b10f 	.word	0x0800b10f
 800b1dc:	0800b10f 	.word	0x0800b10f
 800b1e0:	0800b6c7 	.word	0x0800b6c7
 800b1e4:	0800b10f 	.word	0x0800b10f
 800b1e8:	0800b10f 	.word	0x0800b10f
 800b1ec:	0800b6d9 	.word	0x0800b6d9
 800b1f0:	0800b10f 	.word	0x0800b10f
 800b1f4:	0800b737 	.word	0x0800b737
 800b1f8:	0800b84f 	.word	0x0800b84f
 800b1fc:	0800b85d 	.word	0x0800b85d
 800b200:	0800b8ad 	.word	0x0800b8ad
 800b204:	0800b8bd 	.word	0x0800b8bd
 800b208:	0800b92f 	.word	0x0800b92f
 800b20c:	0800b391 	.word	0x0800b391
 800b210:	0800b969 	.word	0x0800b969
 800b214:	0800ba2f 	.word	0x0800ba2f
 800b218:	0800b10f 	.word	0x0800b10f
 800b21c:	0800b10f 	.word	0x0800b10f
 800b220:	0800b10f 	.word	0x0800b10f
 800b224:	0800b10f 	.word	0x0800b10f
 800b228:	0800b10f 	.word	0x0800b10f
 800b22c:	0800b10f 	.word	0x0800b10f
 800b230:	0800b299 	.word	0x0800b299
 800b234:	0800b301 	.word	0x0800b301
 800b238:	0800b353 	.word	0x0800b353
 800b23c:	0800b40f 	.word	0x0800b40f
 800b240:	0800b40f 	.word	0x0800b40f
 800b244:	0800b10f 	.word	0x0800b10f
 800b248:	0800b4d9 	.word	0x0800b4d9
 800b24c:	0800b301 	.word	0x0800b301
 800b250:	0800b10f 	.word	0x0800b10f
 800b254:	0800b6b9 	.word	0x0800b6b9
 800b258:	0800b689 	.word	0x0800b689
 800b25c:	0800b697 	.word	0x0800b697
 800b260:	0800b6c1 	.word	0x0800b6c1
 800b264:	0800b6cb 	.word	0x0800b6cb
 800b268:	0800b10f 	.word	0x0800b10f
 800b26c:	0800b6d9 	.word	0x0800b6d9
 800b270:	0800b10f 	.word	0x0800b10f
 800b274:	0800b381 	.word	0x0800b381
 800b278:	0800b749 	.word	0x0800b749
 800b27c:	0800b853 	.word	0x0800b853
 800b280:	0800b895 	.word	0x0800b895
 800b284:	0800b10f 	.word	0x0800b10f
 800b288:	0800b923 	.word	0x0800b923
 800b28c:	0800b389 	.word	0x0800b389
 800b290:	0800b947 	.word	0x0800b947
 800b294:	0800b9bd 	.word	0x0800b9bd
 800b298:	69ab      	ldr	r3, [r5, #24]
 800b29a:	4aa8      	ldr	r2, [pc, #672]	; (800b53c <__strftime+0x494>)
 800b29c:	3318      	adds	r3, #24
 800b29e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800b2a2:	4648      	mov	r0, r9
 800b2a4:	f7f4 ffb4 	bl	8000210 <strlen>
 800b2a8:	eba9 0904 	sub.w	r9, r9, r4
 800b2ac:	4420      	add	r0, r4
 800b2ae:	42a0      	cmp	r0, r4
 800b2b0:	d108      	bne.n	800b2c4 <__strftime+0x21c>
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f898 3000 	ldrb.w	r3, [r8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 83e7 	beq.w	800ba8c <__strftime+0x9e4>
 800b2be:	f108 0201 	add.w	r2, r8, #1
 800b2c2:	e6fc      	b.n	800b0be <__strftime+0x16>
 800b2c4:	45a3      	cmp	fp, r4
 800b2c6:	f67f af22 	bls.w	800b10e <__strftime+0x66>
 800b2ca:	f819 3004 	ldrb.w	r3, [r9, r4]
 800b2ce:	553b      	strb	r3, [r7, r4]
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	e7ec      	b.n	800b2ae <__strftime+0x206>
 800b2d4:	69aa      	ldr	r2, [r5, #24]
 800b2d6:	4b99      	ldr	r3, [pc, #612]	; (800b53c <__strftime+0x494>)
 800b2d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b2dc:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800b2e0:	4648      	mov	r0, r9
 800b2e2:	f7f4 ff95 	bl	8000210 <strlen>
 800b2e6:	eba9 0904 	sub.w	r9, r9, r4
 800b2ea:	4420      	add	r0, r4
 800b2ec:	42a0      	cmp	r0, r4
 800b2ee:	d0e0      	beq.n	800b2b2 <__strftime+0x20a>
 800b2f0:	45a3      	cmp	fp, r4
 800b2f2:	f67f af0c 	bls.w	800b10e <__strftime+0x66>
 800b2f6:	f819 3004 	ldrb.w	r3, [r9, r4]
 800b2fa:	553b      	strb	r3, [r7, r4]
 800b2fc:	3401      	adds	r4, #1
 800b2fe:	e7f5      	b.n	800b2ec <__strftime+0x244>
 800b300:	692a      	ldr	r2, [r5, #16]
 800b302:	4b8e      	ldr	r3, [pc, #568]	; (800b53c <__strftime+0x494>)
 800b304:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800b308:	4648      	mov	r0, r9
 800b30a:	f7f4 ff81 	bl	8000210 <strlen>
 800b30e:	eba9 0904 	sub.w	r9, r9, r4
 800b312:	4420      	add	r0, r4
 800b314:	42a0      	cmp	r0, r4
 800b316:	d0cc      	beq.n	800b2b2 <__strftime+0x20a>
 800b318:	45a3      	cmp	fp, r4
 800b31a:	f67f aef8 	bls.w	800b10e <__strftime+0x66>
 800b31e:	f819 3004 	ldrb.w	r3, [r9, r4]
 800b322:	553b      	strb	r3, [r7, r4]
 800b324:	3401      	adds	r4, #1
 800b326:	e7f5      	b.n	800b314 <__strftime+0x26c>
 800b328:	692b      	ldr	r3, [r5, #16]
 800b32a:	4a84      	ldr	r2, [pc, #528]	; (800b53c <__strftime+0x494>)
 800b32c:	330c      	adds	r3, #12
 800b32e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800b332:	4648      	mov	r0, r9
 800b334:	f7f4 ff6c 	bl	8000210 <strlen>
 800b338:	eba9 0904 	sub.w	r9, r9, r4
 800b33c:	4420      	add	r0, r4
 800b33e:	42a0      	cmp	r0, r4
 800b340:	d0b7      	beq.n	800b2b2 <__strftime+0x20a>
 800b342:	45a3      	cmp	fp, r4
 800b344:	f67f aee3 	bls.w	800b10e <__strftime+0x66>
 800b348:	f819 3004 	ldrb.w	r3, [r9, r4]
 800b34c:	553b      	strb	r3, [r7, r4]
 800b34e:	3401      	adds	r4, #1
 800b350:	e7f5      	b.n	800b33e <__strftime+0x296>
 800b352:	4b7a      	ldr	r3, [pc, #488]	; (800b53c <__strftime+0x494>)
 800b354:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800b358:	4648      	mov	r0, r9
 800b35a:	f7f4 ff59 	bl	8000210 <strlen>
 800b35e:	f899 3000 	ldrb.w	r3, [r9]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0a6      	beq.n	800b2b4 <__strftime+0x20c>
 800b366:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	464a      	mov	r2, r9
 800b36c:	462b      	mov	r3, r5
 800b36e:	1b31      	subs	r1, r6, r4
 800b370:	1938      	adds	r0, r7, r4
 800b372:	f7ff fe99 	bl	800b0a8 <__strftime>
 800b376:	2800      	cmp	r0, #0
 800b378:	f77f aec9 	ble.w	800b10e <__strftime+0x66>
 800b37c:	4404      	add	r4, r0
 800b37e:	e799      	b.n	800b2b4 <__strftime+0x20c>
 800b380:	4b6e      	ldr	r3, [pc, #440]	; (800b53c <__strftime+0x494>)
 800b382:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800b386:	e7e7      	b.n	800b358 <__strftime+0x2b0>
 800b388:	4b6c      	ldr	r3, [pc, #432]	; (800b53c <__strftime+0x494>)
 800b38a:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800b38e:	e7e3      	b.n	800b358 <__strftime+0x2b0>
 800b390:	4b6a      	ldr	r3, [pc, #424]	; (800b53c <__strftime+0x494>)
 800b392:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800b396:	e7df      	b.n	800b358 <__strftime+0x2b0>
 800b398:	4b69      	ldr	r3, [pc, #420]	; (800b540 <__strftime+0x498>)
 800b39a:	6969      	ldr	r1, [r5, #20]
 800b39c:	4299      	cmp	r1, r3
 800b39e:	bfac      	ite	ge
 800b3a0:	2300      	movge	r3, #0
 800b3a2:	2301      	movlt	r3, #1
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	9304      	str	r3, [sp, #16]
 800b3a8:	db10      	blt.n	800b3cc <__strftime+0x324>
 800b3aa:	2064      	movs	r0, #100	; 0x64
 800b3ac:	fb91 f0f0 	sdiv	r0, r1, r0
 800b3b0:	3013      	adds	r0, #19
 800b3b2:	f1ba 0f00 	cmp.w	sl, #0
 800b3b6:	d013      	beq.n	800b3e0 <__strftime+0x338>
 800b3b8:	2863      	cmp	r0, #99	; 0x63
 800b3ba:	dd26      	ble.n	800b40a <__strftime+0x362>
 800b3bc:	4a61      	ldr	r2, [pc, #388]	; (800b544 <__strftime+0x49c>)
 800b3be:	4b62      	ldr	r3, [pc, #392]	; (800b548 <__strftime+0x4a0>)
 800b3c0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 800b3c4:	bf18      	it	ne
 800b3c6:	4613      	movne	r3, r2
 800b3c8:	4a60      	ldr	r2, [pc, #384]	; (800b54c <__strftime+0x4a4>)
 800b3ca:	e00b      	b.n	800b3e4 <__strftime+0x33c>
 800b3cc:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800b3d0:	9105      	str	r1, [sp, #20]
 800b3d2:	f001 fc9d 	bl	800cd10 <abs>
 800b3d6:	2364      	movs	r3, #100	; 0x64
 800b3d8:	9905      	ldr	r1, [sp, #20]
 800b3da:	fb90 f0f3 	sdiv	r0, r0, r3
 800b3de:	e7e8      	b.n	800b3b2 <__strftime+0x30a>
 800b3e0:	4b58      	ldr	r3, [pc, #352]	; (800b544 <__strftime+0x49c>)
 800b3e2:	4a5b      	ldr	r2, [pc, #364]	; (800b550 <__strftime+0x4a8>)
 800b3e4:	9001      	str	r0, [sp, #4]
 800b3e6:	9804      	ldr	r0, [sp, #16]
 800b3e8:	f8df c154 	ldr.w	ip, [pc, #340]	; 800b540 <__strftime+0x498>
 800b3ec:	f1b9 0f02 	cmp.w	r9, #2
 800b3f0:	bf2c      	ite	cs
 800b3f2:	ebc0 0009 	rsbcs	r0, r0, r9
 800b3f6:	f1c0 0002 	rsbcc	r0, r0, #2
 800b3fa:	9000      	str	r0, [sp, #0]
 800b3fc:	4855      	ldr	r0, [pc, #340]	; (800b554 <__strftime+0x4ac>)
 800b3fe:	4561      	cmp	r1, ip
 800b400:	bfb8      	it	lt
 800b402:	4603      	movlt	r3, r0
 800b404:	1b31      	subs	r1, r6, r4
 800b406:	1938      	adds	r0, r7, r4
 800b408:	e029      	b.n	800b45e <__strftime+0x3b6>
 800b40a:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <__strftime+0x49c>)
 800b40c:	e7dc      	b.n	800b3c8 <__strftime+0x320>
 800b40e:	4852      	ldr	r0, [pc, #328]	; (800b558 <__strftime+0x4b0>)
 800b410:	4a52      	ldr	r2, [pc, #328]	; (800b55c <__strftime+0x4b4>)
 800b412:	68eb      	ldr	r3, [r5, #12]
 800b414:	2964      	cmp	r1, #100	; 0x64
 800b416:	bf18      	it	ne
 800b418:	4602      	movne	r2, r0
 800b41a:	1b31      	subs	r1, r6, r4
 800b41c:	1938      	adds	r0, r7, r4
 800b41e:	f7ff fd97 	bl	800af50 <sniprintf>
 800b422:	2800      	cmp	r0, #0
 800b424:	f6ff ae73 	blt.w	800b10e <__strftime+0x66>
 800b428:	4404      	add	r4, r0
 800b42a:	42a6      	cmp	r6, r4
 800b42c:	f63f af42 	bhi.w	800b2b4 <__strftime+0x20c>
 800b430:	e66d      	b.n	800b10e <__strftime+0x66>
 800b432:	6968      	ldr	r0, [r5, #20]
 800b434:	692b      	ldr	r3, [r5, #16]
 800b436:	68ea      	ldr	r2, [r5, #12]
 800b438:	2800      	cmp	r0, #0
 800b43a:	eb07 0904 	add.w	r9, r7, r4
 800b43e:	eba6 0a04 	sub.w	sl, r6, r4
 800b442:	f103 0301 	add.w	r3, r3, #1
 800b446:	db0d      	blt.n	800b464 <__strftime+0x3bc>
 800b448:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800b44c:	fb90 f1fc 	sdiv	r1, r0, ip
 800b450:	fb0c 0011 	mls	r0, ip, r1, r0
 800b454:	e9cd 2000 	strd	r2, r0, [sp]
 800b458:	4a41      	ldr	r2, [pc, #260]	; (800b560 <__strftime+0x4b8>)
 800b45a:	4651      	mov	r1, sl
 800b45c:	4648      	mov	r0, r9
 800b45e:	f7ff fd77 	bl	800af50 <sniprintf>
 800b462:	e7de      	b.n	800b422 <__strftime+0x37a>
 800b464:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b468:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800b46c:	f001 fc50 	bl	800cd10 <abs>
 800b470:	2164      	movs	r1, #100	; 0x64
 800b472:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b476:	fb90 fcf1 	sdiv	ip, r0, r1
 800b47a:	fb0c 0011 	mls	r0, ip, r1, r0
 800b47e:	e7e9      	b.n	800b454 <__strftime+0x3ac>
 800b480:	2325      	movs	r3, #37	; 0x25
 800b482:	f88d 3020 	strb.w	r3, [sp, #32]
 800b486:	f1ba 0f00 	cmp.w	sl, #0
 800b48a:	d013      	beq.n	800b4b4 <__strftime+0x40c>
 800b48c:	f1b9 0f06 	cmp.w	r9, #6
 800b490:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800b494:	bf38      	it	cc
 800b496:	f04f 0906 	movcc.w	r9, #6
 800b49a:	f1b9 0306 	subs.w	r3, r9, #6
 800b49e:	d10f      	bne.n	800b4c0 <__strftime+0x418>
 800b4a0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800b4a4:	492f      	ldr	r1, [pc, #188]	; (800b564 <__strftime+0x4bc>)
 800b4a6:	f003 fc75 	bl	800ed94 <strcpy>
 800b4aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	aa08      	add	r2, sp, #32
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	e75c      	b.n	800b36e <__strftime+0x2c6>
 800b4b4:	232b      	movs	r3, #43	; 0x2b
 800b4b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800b4ba:	f04f 090a 	mov.w	r9, #10
 800b4be:	e7ec      	b.n	800b49a <__strftime+0x3f2>
 800b4c0:	4a29      	ldr	r2, [pc, #164]	; (800b568 <__strftime+0x4c0>)
 800b4c2:	211e      	movs	r1, #30
 800b4c4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800b4c8:	f7ff fd42 	bl	800af50 <sniprintf>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	dde7      	ble.n	800b4a0 <__strftime+0x3f8>
 800b4d0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800b4d4:	4418      	add	r0, r3
 800b4d6:	e7e5      	b.n	800b4a4 <__strftime+0x3fc>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f7ff fd8d 	bl	800aff8 <iso_year_adjust>
 800b4de:	4681      	mov	r9, r0
 800b4e0:	6968      	ldr	r0, [r5, #20]
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	db1a      	blt.n	800b51c <__strftime+0x474>
 800b4e6:	2264      	movs	r2, #100	; 0x64
 800b4e8:	fb90 f3f2 	sdiv	r3, r0, r2
 800b4ec:	f1b9 0f00 	cmp.w	r9, #0
 800b4f0:	fb02 0013 	mls	r0, r2, r3, r0
 800b4f4:	da1a      	bge.n	800b52c <__strftime+0x484>
 800b4f6:	696a      	ldr	r2, [r5, #20]
 800b4f8:	4b1c      	ldr	r3, [pc, #112]	; (800b56c <__strftime+0x4c4>)
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	bfb8      	it	lt
 800b4fe:	f04f 0901 	movlt.w	r9, #1
 800b502:	2364      	movs	r3, #100	; 0x64
 800b504:	4481      	add	r9, r0
 800b506:	fb99 f0f3 	sdiv	r0, r9, r3
 800b50a:	fb03 9910 	mls	r9, r3, r0, r9
 800b50e:	4499      	add	r9, r3
 800b510:	fb99 f2f3 	sdiv	r2, r9, r3
 800b514:	fb03 9312 	mls	r3, r3, r2, r9
 800b518:	4a10      	ldr	r2, [pc, #64]	; (800b55c <__strftime+0x4b4>)
 800b51a:	e77e      	b.n	800b41a <__strftime+0x372>
 800b51c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b520:	f001 fbf6 	bl	800cd10 <abs>
 800b524:	2364      	movs	r3, #100	; 0x64
 800b526:	fb90 f2f3 	sdiv	r2, r0, r3
 800b52a:	e7df      	b.n	800b4ec <__strftime+0x444>
 800b52c:	d0e9      	beq.n	800b502 <__strftime+0x45a>
 800b52e:	696a      	ldr	r2, [r5, #20]
 800b530:	4b03      	ldr	r3, [pc, #12]	; (800b540 <__strftime+0x498>)
 800b532:	429a      	cmp	r2, r3
 800b534:	bfb8      	it	lt
 800b536:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 800b53a:	e7e2      	b.n	800b502 <__strftime+0x45a>
 800b53c:	08012c08 	.word	0x08012c08
 800b540:	fffff894 	.word	0xfffff894
 800b544:	08012fa9 	.word	0x08012fa9
 800b548:	08012b6a 	.word	0x08012b6a
 800b54c:	08012b62 	.word	0x08012b62
 800b550:	08012b5b 	.word	0x08012b5b
 800b554:	0801312b 	.word	0x0801312b
 800b558:	08012b6c 	.word	0x08012b6c
 800b55c:	08012b7a 	.word	0x08012b7a
 800b560:	08012b70 	.word	0x08012b70
 800b564:	08012b83 	.word	0x08012b83
 800b568:	08012b7f 	.word	0x08012b7f
 800b56c:	fffff895 	.word	0xfffff895
 800b570:	696b      	ldr	r3, [r5, #20]
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	9a04      	ldr	r2, [sp, #16]
 800b576:	4bbd      	ldr	r3, [pc, #756]	; (800b86c <__strftime+0x7c4>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	bfac      	ite	ge
 800b57c:	2300      	movge	r3, #0
 800b57e:	2301      	movlt	r3, #1
 800b580:	4628      	mov	r0, r5
 800b582:	9305      	str	r3, [sp, #20]
 800b584:	f7ff fd38 	bl	800aff8 <iso_year_adjust>
 800b588:	9a04      	ldr	r2, [sp, #16]
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	4603      	mov	r3, r0
 800b58e:	db3a      	blt.n	800b606 <__strftime+0x55e>
 800b590:	2264      	movs	r2, #100	; 0x64
 800b592:	9904      	ldr	r1, [sp, #16]
 800b594:	fb91 f2f2 	sdiv	r2, r1, r2
 800b598:	3213      	adds	r2, #19
 800b59a:	6968      	ldr	r0, [r5, #20]
 800b59c:	2800      	cmp	r0, #0
 800b59e:	db3d      	blt.n	800b61c <__strftime+0x574>
 800b5a0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800b5a4:	fb90 fefc 	sdiv	lr, r0, ip
 800b5a8:	fb0c 001e 	mls	r0, ip, lr, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da44      	bge.n	800b63a <__strftime+0x592>
 800b5b0:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 800b890 <__strftime+0x7e8>
 800b5b4:	6969      	ldr	r1, [r5, #20]
 800b5b6:	4561      	cmp	r1, ip
 800b5b8:	da01      	bge.n	800b5be <__strftime+0x516>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	4403      	add	r3, r0
 800b5c0:	1c59      	adds	r1, r3, #1
 800b5c2:	d146      	bne.n	800b652 <__strftime+0x5aa>
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	2363      	movs	r3, #99	; 0x63
 800b5c8:	2064      	movs	r0, #100	; 0x64
 800b5ca:	fb00 3202 	mla	r2, r0, r2, r3
 800b5ce:	9b05      	ldr	r3, [sp, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d043      	beq.n	800b65c <__strftime+0x5b4>
 800b5d4:	232d      	movs	r3, #45	; 0x2d
 800b5d6:	f88d 3020 	strb.w	r3, [sp, #32]
 800b5da:	f1b9 0f00 	cmp.w	r9, #0
 800b5de:	d001      	beq.n	800b5e4 <__strftime+0x53c>
 800b5e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b5e4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 800b5e8:	2125      	movs	r1, #37	; 0x25
 800b5ea:	7019      	strb	r1, [r3, #0]
 800b5ec:	f1ba 0f00 	cmp.w	sl, #0
 800b5f0:	d144      	bne.n	800b67c <__strftime+0x5d4>
 800b5f2:	1c58      	adds	r0, r3, #1
 800b5f4:	499e      	ldr	r1, [pc, #632]	; (800b870 <__strftime+0x7c8>)
 800b5f6:	9204      	str	r2, [sp, #16]
 800b5f8:	f003 fbcc 	bl	800ed94 <strcpy>
 800b5fc:	9a04      	ldr	r2, [sp, #16]
 800b5fe:	9200      	str	r2, [sp, #0]
 800b600:	464b      	mov	r3, r9
 800b602:	aa08      	add	r2, sp, #32
 800b604:	e09b      	b.n	800b73e <__strftime+0x696>
 800b606:	9b04      	ldr	r3, [sp, #16]
 800b608:	9006      	str	r0, [sp, #24]
 800b60a:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 800b60e:	f001 fb7f 	bl	800cd10 <abs>
 800b612:	2264      	movs	r2, #100	; 0x64
 800b614:	9b06      	ldr	r3, [sp, #24]
 800b616:	fb90 f2f2 	sdiv	r2, r0, r2
 800b61a:	e7be      	b.n	800b59a <__strftime+0x4f2>
 800b61c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b620:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800b624:	f001 fb74 	bl	800cd10 <abs>
 800b628:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800b62c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b630:	fb90 fefc 	sdiv	lr, r0, ip
 800b634:	fb0e 001c 	mls	r0, lr, ip, r0
 800b638:	e7b8      	b.n	800b5ac <__strftime+0x504>
 800b63a:	d0c0      	beq.n	800b5be <__strftime+0x516>
 800b63c:	9904      	ldr	r1, [sp, #16]
 800b63e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800b86c <__strftime+0x7c4>
 800b642:	4561      	cmp	r1, ip
 800b644:	bfae      	itee	ge
 800b646:	2100      	movge	r1, #0
 800b648:	2101      	movlt	r1, #1
 800b64a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b64e:	9105      	str	r1, [sp, #20]
 800b650:	e7b5      	b.n	800b5be <__strftime+0x516>
 800b652:	2b64      	cmp	r3, #100	; 0x64
 800b654:	bf04      	itt	eq
 800b656:	3201      	addeq	r2, #1
 800b658:	2300      	moveq	r3, #0
 800b65a:	e7b5      	b.n	800b5c8 <__strftime+0x520>
 800b65c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 800b660:	d110      	bne.n	800b684 <__strftime+0x5dc>
 800b662:	f242 730f 	movw	r3, #9999	; 0x270f
 800b666:	429a      	cmp	r2, r3
 800b668:	d90c      	bls.n	800b684 <__strftime+0x5dc>
 800b66a:	f88d a020 	strb.w	sl, [sp, #32]
 800b66e:	f1b9 0f00 	cmp.w	r9, #0
 800b672:	d1b5      	bne.n	800b5e0 <__strftime+0x538>
 800b674:	ab10      	add	r3, sp, #64	; 0x40
 800b676:	2125      	movs	r1, #37	; 0x25
 800b678:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 800b67c:	2130      	movs	r1, #48	; 0x30
 800b67e:	1c98      	adds	r0, r3, #2
 800b680:	7059      	strb	r1, [r3, #1]
 800b682:	e7b7      	b.n	800b5f4 <__strftime+0x54c>
 800b684:	ab08      	add	r3, sp, #32
 800b686:	e7af      	b.n	800b5e8 <__strftime+0x540>
 800b688:	487a      	ldr	r0, [pc, #488]	; (800b874 <__strftime+0x7cc>)
 800b68a:	4a7b      	ldr	r2, [pc, #492]	; (800b878 <__strftime+0x7d0>)
 800b68c:	68ab      	ldr	r3, [r5, #8]
 800b68e:	296b      	cmp	r1, #107	; 0x6b
 800b690:	bf18      	it	ne
 800b692:	4602      	movne	r2, r0
 800b694:	e6c1      	b.n	800b41a <__strftime+0x372>
 800b696:	68ab      	ldr	r3, [r5, #8]
 800b698:	220c      	movs	r2, #12
 800b69a:	b15b      	cbz	r3, 800b6b4 <__strftime+0x60c>
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d003      	beq.n	800b6a8 <__strftime+0x600>
 800b6a0:	fb93 f0f2 	sdiv	r0, r3, r2
 800b6a4:	fb02 3310 	mls	r3, r2, r0, r3
 800b6a8:	4873      	ldr	r0, [pc, #460]	; (800b878 <__strftime+0x7d0>)
 800b6aa:	4a72      	ldr	r2, [pc, #456]	; (800b874 <__strftime+0x7cc>)
 800b6ac:	2949      	cmp	r1, #73	; 0x49
 800b6ae:	bf18      	it	ne
 800b6b0:	4602      	movne	r2, r0
 800b6b2:	e6b2      	b.n	800b41a <__strftime+0x372>
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	e7f7      	b.n	800b6a8 <__strftime+0x600>
 800b6b8:	69eb      	ldr	r3, [r5, #28]
 800b6ba:	4a70      	ldr	r2, [pc, #448]	; (800b87c <__strftime+0x7d4>)
 800b6bc:	3301      	adds	r3, #1
 800b6be:	e6ac      	b.n	800b41a <__strftime+0x372>
 800b6c0:	692b      	ldr	r3, [r5, #16]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	e728      	b.n	800b518 <__strftime+0x470>
 800b6c6:	686b      	ldr	r3, [r5, #4]
 800b6c8:	e726      	b.n	800b518 <__strftime+0x470>
 800b6ca:	45a3      	cmp	fp, r4
 800b6cc:	f67f ad1f 	bls.w	800b10e <__strftime+0x66>
 800b6d0:	230a      	movs	r3, #10
 800b6d2:	553b      	strb	r3, [r7, r4]
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	e5ed      	b.n	800b2b4 <__strftime+0x20c>
 800b6d8:	68ab      	ldr	r3, [r5, #8]
 800b6da:	2b0b      	cmp	r3, #11
 800b6dc:	bfcc      	ite	gt
 800b6de:	22a4      	movgt	r2, #164	; 0xa4
 800b6e0:	22a0      	movle	r2, #160	; 0xa0
 800b6e2:	4b67      	ldr	r3, [pc, #412]	; (800b880 <__strftime+0x7d8>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b6ea:	4648      	mov	r0, r9
 800b6ec:	f7f4 fd90 	bl	8000210 <strlen>
 800b6f0:	eba9 0304 	sub.w	r3, r9, r4
 800b6f4:	eb04 0a00 	add.w	sl, r4, r0
 800b6f8:	45a2      	cmp	sl, r4
 800b6fa:	d101      	bne.n	800b700 <__strftime+0x658>
 800b6fc:	4654      	mov	r4, sl
 800b6fe:	e5d9      	b.n	800b2b4 <__strftime+0x20c>
 800b700:	45a3      	cmp	fp, r4
 800b702:	f67f ad04 	bls.w	800b10e <__strftime+0x66>
 800b706:	f898 2000 	ldrb.w	r2, [r8]
 800b70a:	f813 9004 	ldrb.w	r9, [r3, r4]
 800b70e:	2a50      	cmp	r2, #80	; 0x50
 800b710:	d10d      	bne.n	800b72e <__strftime+0x686>
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	f002 fcba 	bl	800e08c <__locale_ctype_ptr>
 800b718:	4448      	add	r0, r9
 800b71a:	9b04      	ldr	r3, [sp, #16]
 800b71c:	7842      	ldrb	r2, [r0, #1]
 800b71e:	f002 0203 	and.w	r2, r2, #3
 800b722:	2a01      	cmp	r2, #1
 800b724:	bf08      	it	eq
 800b726:	f109 0920 	addeq.w	r9, r9, #32
 800b72a:	fa5f f989 	uxtb.w	r9, r9
 800b72e:	f807 9004 	strb.w	r9, [r7, r4]
 800b732:	3401      	adds	r4, #1
 800b734:	e7e0      	b.n	800b6f8 <__strftime+0x650>
 800b736:	686b      	ldr	r3, [r5, #4]
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	4a52      	ldr	r2, [pc, #328]	; (800b884 <__strftime+0x7dc>)
 800b73c:	68ab      	ldr	r3, [r5, #8]
 800b73e:	1b31      	subs	r1, r6, r4
 800b740:	1938      	adds	r0, r7, r4
 800b742:	f7ff fc05 	bl	800af50 <sniprintf>
 800b746:	e66c      	b.n	800b422 <__strftime+0x37a>
 800b748:	6a2b      	ldr	r3, [r5, #32]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	db7c      	blt.n	800b848 <__strftime+0x7a0>
 800b74e:	f001 f91b 	bl	800c988 <__tz_lock>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	b90b      	cbnz	r3, 800b75a <__strftime+0x6b2>
 800b756:	f001 f919 	bl	800c98c <_tzset_unlocked>
 800b75a:	f002 fc8b 	bl	800e074 <__gettzinfo>
 800b75e:	6a2b      	ldr	r3, [r5, #32]
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfcc      	ite	gt
 800b764:	2350      	movgt	r3, #80	; 0x50
 800b766:	2328      	movle	r3, #40	; 0x28
 800b768:	58c3      	ldr	r3, [r0, r3]
 800b76a:	425b      	negs	r3, r3
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	f001 f90c 	bl	800c98a <__tz_unlock>
 800b772:	2301      	movs	r3, #1
 800b774:	9303      	str	r3, [sp, #12]
 800b776:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800b77a:	193b      	adds	r3, r7, r4
 800b77c:	4662      	mov	r2, ip
 800b77e:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b788:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f171 0e00 	sbcs.w	lr, r1, #0
 800b792:	da03      	bge.n	800b79c <__strftime+0x6f4>
 800b794:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 800b798:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 800b79c:	0883      	lsrs	r3, r0, #2
 800b79e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800b7a2:	4699      	mov	r9, r3
 800b7a4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800b7a8:	108b      	asrs	r3, r1, #2
 800b7aa:	2164      	movs	r1, #100	; 0x64
 800b7ac:	fb90 f1f1 	sdiv	r1, r0, r1
 800b7b0:	ebb9 0201 	subs.w	r2, r9, r1
 800b7b4:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 800b7b8:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 800b7bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b7c0:	fb90 f1f1 	sdiv	r1, r0, r1
 800b7c4:	eb12 0901 	adds.w	r9, r2, r1
 800b7c8:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800b7cc:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 800b7d0:	f240 116d 	movw	r1, #365	; 0x16d
 800b7d4:	fb01 fc0c 	mul.w	ip, r1, ip
 800b7d8:	69e9      	ldr	r1, [r5, #28]
 800b7da:	eb19 020c 	adds.w	r2, r9, ip
 800b7de:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 800b7e2:	eb12 0901 	adds.w	r9, r2, r1
 800b7e6:	f04f 0c18 	mov.w	ip, #24
 800b7ea:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800b7ee:	fba9 230c 	umull	r2, r3, r9, ip
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	fb0c 130a 	mla	r3, ip, sl, r1
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	68ab      	ldr	r3, [r5, #8]
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800b802:	18c0      	adds	r0, r0, r3
 800b804:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 800b808:	fba0 230c 	umull	r2, r3, r0, ip
 800b80c:	fb0c 3301 	mla	r3, ip, r1, r3
 800b810:	6869      	ldr	r1, [r5, #4]
 800b812:	4691      	mov	r9, r2
 800b814:	eb19 0201 	adds.w	r2, r9, r1
 800b818:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b81c:	fba2 010c 	umull	r0, r1, r2, ip
 800b820:	fb0c 1103 	mla	r1, ip, r3, r1
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	4a18      	ldr	r2, [pc, #96]	; (800b888 <__strftime+0x7e0>)
 800b828:	eb10 0903 	adds.w	r9, r0, r3
 800b82c:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	ebb9 0003 	subs.w	r0, r9, r3
 800b836:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 800b83a:	e9cd 0100 	strd	r0, r1, [sp]
 800b83e:	1b31      	subs	r1, r6, r4
 800b840:	1938      	adds	r0, r7, r4
 800b842:	f7ff fb85 	bl	800af50 <sniprintf>
 800b846:	e5ec      	b.n	800b422 <__strftime+0x37a>
 800b848:	2300      	movs	r3, #0
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	e793      	b.n	800b776 <__strftime+0x6ce>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	e662      	b.n	800b518 <__strftime+0x470>
 800b852:	45a3      	cmp	fp, r4
 800b854:	f67f ac5b 	bls.w	800b10e <__strftime+0x66>
 800b858:	2309      	movs	r3, #9
 800b85a:	e73a      	b.n	800b6d2 <__strftime+0x62a>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	686b      	ldr	r3, [r5, #4]
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <__strftime+0x7e4>)
 800b866:	68ab      	ldr	r3, [r5, #8]
 800b868:	e5cc      	b.n	800b404 <__strftime+0x35c>
 800b86a:	bf00      	nop
 800b86c:	fffff894 	.word	0xfffff894
 800b870:	08012b8b 	.word	0x08012b8b
 800b874:	08012b7a 	.word	0x08012b7a
 800b878:	08012b6c 	.word	0x08012b6c
 800b87c:	08012b8f 	.word	0x08012b8f
 800b880:	08012c08 	.word	0x08012c08
 800b884:	08012b9e 	.word	0x08012b9e
 800b888:	08012b94 	.word	0x08012b94
 800b88c:	08012b99 	.word	0x08012b99
 800b890:	fffff895 	.word	0xfffff895
 800b894:	45a3      	cmp	fp, r4
 800b896:	f67f ac3a 	bls.w	800b10e <__strftime+0x66>
 800b89a:	69ab      	ldr	r3, [r5, #24]
 800b89c:	193a      	adds	r2, r7, r4
 800b89e:	3401      	adds	r4, #1
 800b8a0:	b913      	cbnz	r3, 800b8a8 <__strftime+0x800>
 800b8a2:	2337      	movs	r3, #55	; 0x37
 800b8a4:	7013      	strb	r3, [r2, #0]
 800b8a6:	e505      	b.n	800b2b4 <__strftime+0x20c>
 800b8a8:	3330      	adds	r3, #48	; 0x30
 800b8aa:	e7fb      	b.n	800b8a4 <__strftime+0x7fc>
 800b8ac:	69eb      	ldr	r3, [r5, #28]
 800b8ae:	69aa      	ldr	r2, [r5, #24]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	2207      	movs	r2, #7
 800b8b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8ba:	e62d      	b.n	800b518 <__strftime+0x470>
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f7ff fb9b 	bl	800aff8 <iso_year_adjust>
 800b8c2:	69aa      	ldr	r2, [r5, #24]
 800b8c4:	b132      	cbz	r2, 800b8d4 <__strftime+0x82c>
 800b8c6:	3a01      	subs	r2, #1
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	dc28      	bgt.n	800b91e <__strftime+0x876>
 800b8cc:	69eb      	ldr	r3, [r5, #28]
 800b8ce:	d103      	bne.n	800b8d8 <__strftime+0x830>
 800b8d0:	330a      	adds	r3, #10
 800b8d2:	e7ee      	b.n	800b8b2 <__strftime+0x80a>
 800b8d4:	2206      	movs	r2, #6
 800b8d6:	e7f7      	b.n	800b8c8 <__strftime+0x820>
 800b8d8:	6968      	ldr	r0, [r5, #20]
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	eba2 0303 	sub.w	r3, r2, r3
 800b8e0:	f240 726b 	movw	r2, #1899	; 0x76b
 800b8e4:	bfa8      	it	ge
 800b8e6:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 800b8ea:	4410      	add	r0, r2
 800b8ec:	0782      	lsls	r2, r0, #30
 800b8ee:	d105      	bne.n	800b8fc <__strftime+0x854>
 800b8f0:	2264      	movs	r2, #100	; 0x64
 800b8f2:	fb90 f1f2 	sdiv	r1, r0, r2
 800b8f6:	fb02 0111 	mls	r1, r2, r1, r0
 800b8fa:	b971      	cbnz	r1, 800b91a <__strftime+0x872>
 800b8fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b900:	fb90 f2f1 	sdiv	r2, r0, r1
 800b904:	fb01 0212 	mls	r2, r1, r2, r0
 800b908:	fab2 f282 	clz	r2, r2
 800b90c:	0952      	lsrs	r2, r2, #5
 800b90e:	1a9a      	subs	r2, r3, r2
 800b910:	2a04      	cmp	r2, #4
 800b912:	bfcc      	ite	gt
 800b914:	2334      	movgt	r3, #52	; 0x34
 800b916:	2335      	movle	r3, #53	; 0x35
 800b918:	e5fe      	b.n	800b518 <__strftime+0x470>
 800b91a:	2201      	movs	r2, #1
 800b91c:	e7f7      	b.n	800b90e <__strftime+0x866>
 800b91e:	2301      	movs	r3, #1
 800b920:	e5fa      	b.n	800b518 <__strftime+0x470>
 800b922:	45a3      	cmp	fp, r4
 800b924:	f67f abf3 	bls.w	800b10e <__strftime+0x66>
 800b928:	69ab      	ldr	r3, [r5, #24]
 800b92a:	3330      	adds	r3, #48	; 0x30
 800b92c:	e6d1      	b.n	800b6d2 <__strftime+0x62a>
 800b92e:	69ab      	ldr	r3, [r5, #24]
 800b930:	b13b      	cbz	r3, 800b942 <__strftime+0x89a>
 800b932:	3b01      	subs	r3, #1
 800b934:	69ea      	ldr	r2, [r5, #28]
 800b936:	3207      	adds	r2, #7
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	2307      	movs	r3, #7
 800b93c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b940:	e5ea      	b.n	800b518 <__strftime+0x470>
 800b942:	2306      	movs	r3, #6
 800b944:	e7f6      	b.n	800b934 <__strftime+0x88c>
 800b946:	6968      	ldr	r0, [r5, #20]
 800b948:	2800      	cmp	r0, #0
 800b94a:	db05      	blt.n	800b958 <__strftime+0x8b0>
 800b94c:	2264      	movs	r2, #100	; 0x64
 800b94e:	fb90 f3f2 	sdiv	r3, r0, r2
 800b952:	fb02 0313 	mls	r3, r2, r3, r0
 800b956:	e5df      	b.n	800b518 <__strftime+0x470>
 800b958:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b95c:	f001 f9d8 	bl	800cd10 <abs>
 800b960:	2364      	movs	r3, #100	; 0x64
 800b962:	fb90 f2f3 	sdiv	r2, r0, r3
 800b966:	e7f4      	b.n	800b952 <__strftime+0x8aa>
 800b968:	696b      	ldr	r3, [r5, #20]
 800b96a:	4a52      	ldr	r2, [pc, #328]	; (800bab4 <__strftime+0xa0c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	da18      	bge.n	800b9a2 <__strftime+0x8fa>
 800b970:	212d      	movs	r1, #45	; 0x2d
 800b972:	f88d 1020 	strb.w	r1, [sp, #32]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	f1b9 0f00 	cmp.w	r9, #0
 800b97c:	d001      	beq.n	800b982 <__strftime+0x8da>
 800b97e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b982:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 800b986:	2125      	movs	r1, #37	; 0x25
 800b988:	7011      	strb	r1, [r2, #0]
 800b98a:	f1ba 0f00 	cmp.w	sl, #0
 800b98e:	f040 8088 	bne.w	800baa2 <__strftime+0x9fa>
 800b992:	1c50      	adds	r0, r2, #1
 800b994:	4948      	ldr	r1, [pc, #288]	; (800bab8 <__strftime+0xa10>)
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	f003 f9fc 	bl	800ed94 <strcpy>
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	e62e      	b.n	800b600 <__strftime+0x558>
 800b9a2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 800b9a6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800b9aa:	f040 8081 	bne.w	800bab0 <__strftime+0xa08>
 800b9ae:	f242 720f 	movw	r2, #9999	; 0x270f
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d979      	bls.n	800baaa <__strftime+0xa02>
 800b9b6:	f88d a020 	strb.w	sl, [sp, #32]
 800b9ba:	e7dd      	b.n	800b978 <__strftime+0x8d0>
 800b9bc:	6a2b      	ldr	r3, [r5, #32]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f6ff ac78 	blt.w	800b2b4 <__strftime+0x20c>
 800b9c4:	f000 ffe0 	bl	800c988 <__tz_lock>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	b90b      	cbnz	r3, 800b9d0 <__strftime+0x928>
 800b9cc:	f000 ffde 	bl	800c98c <_tzset_unlocked>
 800b9d0:	f002 fb50 	bl	800e074 <__gettzinfo>
 800b9d4:	6a2b      	ldr	r3, [r5, #32]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfcc      	ite	gt
 800b9da:	2350      	movgt	r3, #80	; 0x50
 800b9dc:	2328      	movle	r3, #40	; 0x28
 800b9de:	eb07 0a04 	add.w	sl, r7, r4
 800b9e2:	58c3      	ldr	r3, [r0, r3]
 800b9e4:	f1c3 0900 	rsb	r9, r3, #0
 800b9e8:	f000 ffcf 	bl	800c98a <__tz_unlock>
 800b9ec:	233c      	movs	r3, #60	; 0x3c
 800b9ee:	1b31      	subs	r1, r6, r4
 800b9f0:	fb99 f0f3 	sdiv	r0, r9, r3
 800b9f4:	9104      	str	r1, [sp, #16]
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	f002 fb40 	bl	800e07c <labs>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	fb90 f2f3 	sdiv	r2, r0, r3
 800ba02:	fb02 0013 	mls	r0, r2, r3, r0
 800ba06:	9000      	str	r0, [sp, #0]
 800ba08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ba0c:	4a2b      	ldr	r2, [pc, #172]	; (800babc <__strftime+0xa14>)
 800ba0e:	fb99 f3f3 	sdiv	r3, r9, r3
 800ba12:	9904      	ldr	r1, [sp, #16]
 800ba14:	4650      	mov	r0, sl
 800ba16:	f7ff fa9b 	bl	800af50 <sniprintf>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f6ff ab77 	blt.w	800b10e <__strftime+0x66>
 800ba20:	4404      	add	r4, r0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	f67f ab73 	bls.w	800b10e <__strftime+0x66>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	e442      	b.n	800b2b4 <__strftime+0x20c>
 800ba2e:	6a2b      	ldr	r3, [r5, #32]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f6ff ac3f 	blt.w	800b2b4 <__strftime+0x20c>
 800ba36:	f000 ffa7 	bl	800c988 <__tz_lock>
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	b90b      	cbnz	r3, 800ba42 <__strftime+0x99a>
 800ba3e:	f000 ffa5 	bl	800c98c <_tzset_unlocked>
 800ba42:	6a2b      	ldr	r3, [r5, #32]
 800ba44:	4a1e      	ldr	r2, [pc, #120]	; (800bac0 <__strftime+0xa18>)
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bfd4      	ite	le
 800ba4a:	2300      	movle	r3, #0
 800ba4c:	2301      	movgt	r3, #1
 800ba4e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ba52:	4648      	mov	r0, r9
 800ba54:	f7f4 fbdc 	bl	8000210 <strlen>
 800ba58:	eba9 0904 	sub.w	r9, r9, r4
 800ba5c:	eb04 0a00 	add.w	sl, r4, r0
 800ba60:	45a2      	cmp	sl, r4
 800ba62:	d103      	bne.n	800ba6c <__strftime+0x9c4>
 800ba64:	f000 ff91 	bl	800c98a <__tz_unlock>
 800ba68:	4654      	mov	r4, sl
 800ba6a:	e7dd      	b.n	800ba28 <__strftime+0x980>
 800ba6c:	45a3      	cmp	fp, r4
 800ba6e:	d904      	bls.n	800ba7a <__strftime+0x9d2>
 800ba70:	f819 3004 	ldrb.w	r3, [r9, r4]
 800ba74:	553b      	strb	r3, [r7, r4]
 800ba76:	3401      	adds	r4, #1
 800ba78:	e7f2      	b.n	800ba60 <__strftime+0x9b8>
 800ba7a:	f000 ff86 	bl	800c98a <__tz_unlock>
 800ba7e:	f7ff bb46 	b.w	800b10e <__strftime+0x66>
 800ba82:	45a3      	cmp	fp, r4
 800ba84:	f67f ab43 	bls.w	800b10e <__strftime+0x66>
 800ba88:	2325      	movs	r3, #37	; 0x25
 800ba8a:	e622      	b.n	800b6d2 <__strftime+0x62a>
 800ba8c:	b10e      	cbz	r6, 800ba92 <__strftime+0x9ea>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	553b      	strb	r3, [r7, r4]
 800ba92:	4620      	mov	r0, r4
 800ba94:	b011      	add	sp, #68	; 0x44
 800ba96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9a:	2225      	movs	r2, #37	; 0x25
 800ba9c:	f88d 2020 	strb.w	r2, [sp, #32]
 800baa0:	aa08      	add	r2, sp, #32
 800baa2:	2130      	movs	r1, #48	; 0x30
 800baa4:	1c90      	adds	r0, r2, #2
 800baa6:	7051      	strb	r1, [r2, #1]
 800baa8:	e774      	b.n	800b994 <__strftime+0x8ec>
 800baaa:	f1b9 0f00 	cmp.w	r9, #0
 800baae:	d1f4      	bne.n	800ba9a <__strftime+0x9f2>
 800bab0:	aa08      	add	r2, sp, #32
 800bab2:	e768      	b.n	800b986 <__strftime+0x8de>
 800bab4:	fffff894 	.word	0xfffff894
 800bab8:	08012b8b 	.word	0x08012b8b
 800babc:	08012ba8 	.word	0x08012ba8
 800bac0:	200000c4 	.word	0x200000c4

0800bac4 <strftime>:
 800bac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac6:	4c06      	ldr	r4, [pc, #24]	; (800bae0 <strftime+0x1c>)
 800bac8:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <strftime+0x20>)
 800baca:	6824      	ldr	r4, [r4, #0]
 800bacc:	6a24      	ldr	r4, [r4, #32]
 800bace:	2c00      	cmp	r4, #0
 800bad0:	bf08      	it	eq
 800bad2:	462c      	moveq	r4, r5
 800bad4:	9400      	str	r4, [sp, #0]
 800bad6:	f7ff fae7 	bl	800b0a8 <__strftime>
 800bada:	b003      	add	sp, #12
 800badc:	bd30      	pop	{r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	20000060 	.word	0x20000060
 800bae4:	20000128 	.word	0x20000128

0800bae8 <sulp>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	4604      	mov	r4, r0
 800baec:	460d      	mov	r5, r1
 800baee:	ec45 4b10 	vmov	d0, r4, r5
 800baf2:	4616      	mov	r6, r2
 800baf4:	f002 fdd6 	bl	800e6a4 <__ulp>
 800baf8:	ec51 0b10 	vmov	r0, r1, d0
 800bafc:	b17e      	cbz	r6, 800bb1e <sulp+0x36>
 800bafe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bb02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd09      	ble.n	800bb1e <sulp+0x36>
 800bb0a:	051b      	lsls	r3, r3, #20
 800bb0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bb10:	2400      	movs	r4, #0
 800bb12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f7f4 fd97 	bl	800064c <__aeabi_dmul>
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}

0800bb20 <_strtod_l>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	461f      	mov	r7, r3
 800bb26:	b0a1      	sub	sp, #132	; 0x84
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	460e      	mov	r6, r1
 800bb30:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb32:	931c      	str	r3, [sp, #112]	; 0x70
 800bb34:	f002 fab8 	bl	800e0a8 <__localeconv_l>
 800bb38:	4680      	mov	r8, r0
 800bb3a:	6800      	ldr	r0, [r0, #0]
 800bb3c:	f7f4 fb68 	bl	8000210 <strlen>
 800bb40:	f04f 0a00 	mov.w	sl, #0
 800bb44:	4604      	mov	r4, r0
 800bb46:	f04f 0b00 	mov.w	fp, #0
 800bb4a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb4e:	781a      	ldrb	r2, [r3, #0]
 800bb50:	2a0d      	cmp	r2, #13
 800bb52:	d832      	bhi.n	800bbba <_strtod_l+0x9a>
 800bb54:	2a09      	cmp	r2, #9
 800bb56:	d236      	bcs.n	800bbc6 <_strtod_l+0xa6>
 800bb58:	2a00      	cmp	r2, #0
 800bb5a:	d03e      	beq.n	800bbda <_strtod_l+0xba>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb62:	782b      	ldrb	r3, [r5, #0]
 800bb64:	2b30      	cmp	r3, #48	; 0x30
 800bb66:	f040 80ac 	bne.w	800bcc2 <_strtod_l+0x1a2>
 800bb6a:	786b      	ldrb	r3, [r5, #1]
 800bb6c:	2b58      	cmp	r3, #88	; 0x58
 800bb6e:	d001      	beq.n	800bb74 <_strtod_l+0x54>
 800bb70:	2b78      	cmp	r3, #120	; 0x78
 800bb72:	d167      	bne.n	800bc44 <_strtod_l+0x124>
 800bb74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	ab1c      	add	r3, sp, #112	; 0x70
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	9702      	str	r7, [sp, #8]
 800bb7e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb80:	4a88      	ldr	r2, [pc, #544]	; (800bda4 <_strtod_l+0x284>)
 800bb82:	a91b      	add	r1, sp, #108	; 0x6c
 800bb84:	4648      	mov	r0, r9
 800bb86:	f001 ff5a 	bl	800da3e <__gethex>
 800bb8a:	f010 0407 	ands.w	r4, r0, #7
 800bb8e:	4606      	mov	r6, r0
 800bb90:	d005      	beq.n	800bb9e <_strtod_l+0x7e>
 800bb92:	2c06      	cmp	r4, #6
 800bb94:	d12b      	bne.n	800bbee <_strtod_l+0xce>
 800bb96:	3501      	adds	r5, #1
 800bb98:	2300      	movs	r3, #0
 800bb9a:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb9c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f040 859a 	bne.w	800c6da <_strtod_l+0xbba>
 800bba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bba8:	b1e3      	cbz	r3, 800bbe4 <_strtod_l+0xc4>
 800bbaa:	4652      	mov	r2, sl
 800bbac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbb0:	ec43 2b10 	vmov	d0, r2, r3
 800bbb4:	b021      	add	sp, #132	; 0x84
 800bbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbba:	2a2b      	cmp	r2, #43	; 0x2b
 800bbbc:	d015      	beq.n	800bbea <_strtod_l+0xca>
 800bbbe:	2a2d      	cmp	r2, #45	; 0x2d
 800bbc0:	d004      	beq.n	800bbcc <_strtod_l+0xac>
 800bbc2:	2a20      	cmp	r2, #32
 800bbc4:	d1ca      	bne.n	800bb5c <_strtod_l+0x3c>
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbca:	e7bf      	b.n	800bb4c <_strtod_l+0x2c>
 800bbcc:	2201      	movs	r2, #1
 800bbce:	920d      	str	r2, [sp, #52]	; 0x34
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbd4:	785b      	ldrb	r3, [r3, #1]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1c2      	bne.n	800bb60 <_strtod_l+0x40>
 800bbda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbdc:	961b      	str	r6, [sp, #108]	; 0x6c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f040 8579 	bne.w	800c6d6 <_strtod_l+0xbb6>
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	465b      	mov	r3, fp
 800bbe8:	e7e2      	b.n	800bbb0 <_strtod_l+0x90>
 800bbea:	2200      	movs	r2, #0
 800bbec:	e7ef      	b.n	800bbce <_strtod_l+0xae>
 800bbee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bbf0:	b13a      	cbz	r2, 800bc02 <_strtod_l+0xe2>
 800bbf2:	2135      	movs	r1, #53	; 0x35
 800bbf4:	a81e      	add	r0, sp, #120	; 0x78
 800bbf6:	f002 fe4d 	bl	800e894 <__copybits>
 800bbfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	f002 fab9 	bl	800e174 <_Bfree>
 800bc02:	3c01      	subs	r4, #1
 800bc04:	2c04      	cmp	r4, #4
 800bc06:	d806      	bhi.n	800bc16 <_strtod_l+0xf6>
 800bc08:	e8df f004 	tbb	[pc, r4]
 800bc0c:	1714030a 	.word	0x1714030a
 800bc10:	0a          	.byte	0x0a
 800bc11:	00          	.byte	0x00
 800bc12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bc16:	0730      	lsls	r0, r6, #28
 800bc18:	d5c1      	bpl.n	800bb9e <_strtod_l+0x7e>
 800bc1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bc1e:	e7be      	b.n	800bb9e <_strtod_l+0x7e>
 800bc20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bc24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bc26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc32:	e7f0      	b.n	800bc16 <_strtod_l+0xf6>
 800bc34:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bda8 <_strtod_l+0x288>
 800bc38:	e7ed      	b.n	800bc16 <_strtod_l+0xf6>
 800bc3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bc3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bc42:	e7e8      	b.n	800bc16 <_strtod_l+0xf6>
 800bc44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc4a:	785b      	ldrb	r3, [r3, #1]
 800bc4c:	2b30      	cmp	r3, #48	; 0x30
 800bc4e:	d0f9      	beq.n	800bc44 <_strtod_l+0x124>
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0a4      	beq.n	800bb9e <_strtod_l+0x7e>
 800bc54:	2301      	movs	r3, #1
 800bc56:	2500      	movs	r5, #0
 800bc58:	9306      	str	r3, [sp, #24]
 800bc5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc5c:	9308      	str	r3, [sp, #32]
 800bc5e:	9507      	str	r5, [sp, #28]
 800bc60:	9505      	str	r5, [sp, #20]
 800bc62:	220a      	movs	r2, #10
 800bc64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc66:	7807      	ldrb	r7, [r0, #0]
 800bc68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bc6c:	b2d9      	uxtb	r1, r3
 800bc6e:	2909      	cmp	r1, #9
 800bc70:	d929      	bls.n	800bcc6 <_strtod_l+0x1a6>
 800bc72:	4622      	mov	r2, r4
 800bc74:	f8d8 1000 	ldr.w	r1, [r8]
 800bc78:	f003 f894 	bl	800eda4 <strncmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d031      	beq.n	800bce4 <_strtod_l+0x1c4>
 800bc80:	2000      	movs	r0, #0
 800bc82:	9c05      	ldr	r4, [sp, #20]
 800bc84:	9004      	str	r0, [sp, #16]
 800bc86:	463b      	mov	r3, r7
 800bc88:	4602      	mov	r2, r0
 800bc8a:	2b65      	cmp	r3, #101	; 0x65
 800bc8c:	d001      	beq.n	800bc92 <_strtod_l+0x172>
 800bc8e:	2b45      	cmp	r3, #69	; 0x45
 800bc90:	d114      	bne.n	800bcbc <_strtod_l+0x19c>
 800bc92:	b924      	cbnz	r4, 800bc9e <_strtod_l+0x17e>
 800bc94:	b910      	cbnz	r0, 800bc9c <_strtod_l+0x17c>
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d09e      	beq.n	800bbda <_strtod_l+0xba>
 800bc9c:	2400      	movs	r4, #0
 800bc9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bca0:	1c73      	adds	r3, r6, #1
 800bca2:	931b      	str	r3, [sp, #108]	; 0x6c
 800bca4:	7873      	ldrb	r3, [r6, #1]
 800bca6:	2b2b      	cmp	r3, #43	; 0x2b
 800bca8:	d078      	beq.n	800bd9c <_strtod_l+0x27c>
 800bcaa:	2b2d      	cmp	r3, #45	; 0x2d
 800bcac:	d070      	beq.n	800bd90 <_strtod_l+0x270>
 800bcae:	f04f 0c00 	mov.w	ip, #0
 800bcb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bcb6:	2f09      	cmp	r7, #9
 800bcb8:	d97c      	bls.n	800bdb4 <_strtod_l+0x294>
 800bcba:	961b      	str	r6, [sp, #108]	; 0x6c
 800bcbc:	f04f 0e00 	mov.w	lr, #0
 800bcc0:	e09a      	b.n	800bdf8 <_strtod_l+0x2d8>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e7c7      	b.n	800bc56 <_strtod_l+0x136>
 800bcc6:	9905      	ldr	r1, [sp, #20]
 800bcc8:	2908      	cmp	r1, #8
 800bcca:	bfdd      	ittte	le
 800bccc:	9907      	ldrle	r1, [sp, #28]
 800bcce:	fb02 3301 	mlale	r3, r2, r1, r3
 800bcd2:	9307      	strle	r3, [sp, #28]
 800bcd4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bcd8:	9b05      	ldr	r3, [sp, #20]
 800bcda:	3001      	adds	r0, #1
 800bcdc:	3301      	adds	r3, #1
 800bcde:	9305      	str	r3, [sp, #20]
 800bce0:	901b      	str	r0, [sp, #108]	; 0x6c
 800bce2:	e7bf      	b.n	800bc64 <_strtod_l+0x144>
 800bce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bce6:	191a      	adds	r2, r3, r4
 800bce8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcea:	9a05      	ldr	r2, [sp, #20]
 800bcec:	5d1b      	ldrb	r3, [r3, r4]
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d037      	beq.n	800bd62 <_strtod_l+0x242>
 800bcf2:	9c05      	ldr	r4, [sp, #20]
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bcfa:	2909      	cmp	r1, #9
 800bcfc:	d913      	bls.n	800bd26 <_strtod_l+0x206>
 800bcfe:	2101      	movs	r1, #1
 800bd00:	9104      	str	r1, [sp, #16]
 800bd02:	e7c2      	b.n	800bc8a <_strtod_l+0x16a>
 800bd04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	921b      	str	r2, [sp, #108]	; 0x6c
 800bd0a:	785b      	ldrb	r3, [r3, #1]
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	2b30      	cmp	r3, #48	; 0x30
 800bd10:	d0f8      	beq.n	800bd04 <_strtod_l+0x1e4>
 800bd12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bd16:	2a08      	cmp	r2, #8
 800bd18:	f200 84e4 	bhi.w	800c6e4 <_strtod_l+0xbc4>
 800bd1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bd1e:	9208      	str	r2, [sp, #32]
 800bd20:	4602      	mov	r2, r0
 800bd22:	2000      	movs	r0, #0
 800bd24:	4604      	mov	r4, r0
 800bd26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bd2a:	f100 0101 	add.w	r1, r0, #1
 800bd2e:	d012      	beq.n	800bd56 <_strtod_l+0x236>
 800bd30:	440a      	add	r2, r1
 800bd32:	eb00 0c04 	add.w	ip, r0, r4
 800bd36:	4621      	mov	r1, r4
 800bd38:	270a      	movs	r7, #10
 800bd3a:	458c      	cmp	ip, r1
 800bd3c:	d113      	bne.n	800bd66 <_strtod_l+0x246>
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	2908      	cmp	r1, #8
 800bd42:	f104 0401 	add.w	r4, r4, #1
 800bd46:	4404      	add	r4, r0
 800bd48:	dc19      	bgt.n	800bd7e <_strtod_l+0x25e>
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	210a      	movs	r1, #10
 800bd4e:	fb01 e303 	mla	r3, r1, r3, lr
 800bd52:	9307      	str	r3, [sp, #28]
 800bd54:	2100      	movs	r1, #0
 800bd56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd58:	1c58      	adds	r0, r3, #1
 800bd5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	4608      	mov	r0, r1
 800bd60:	e7c9      	b.n	800bcf6 <_strtod_l+0x1d6>
 800bd62:	9805      	ldr	r0, [sp, #20]
 800bd64:	e7d3      	b.n	800bd0e <_strtod_l+0x1ee>
 800bd66:	2908      	cmp	r1, #8
 800bd68:	f101 0101 	add.w	r1, r1, #1
 800bd6c:	dc03      	bgt.n	800bd76 <_strtod_l+0x256>
 800bd6e:	9b07      	ldr	r3, [sp, #28]
 800bd70:	437b      	muls	r3, r7
 800bd72:	9307      	str	r3, [sp, #28]
 800bd74:	e7e1      	b.n	800bd3a <_strtod_l+0x21a>
 800bd76:	2910      	cmp	r1, #16
 800bd78:	bfd8      	it	le
 800bd7a:	437d      	mulle	r5, r7
 800bd7c:	e7dd      	b.n	800bd3a <_strtod_l+0x21a>
 800bd7e:	2c10      	cmp	r4, #16
 800bd80:	bfdc      	itt	le
 800bd82:	210a      	movle	r1, #10
 800bd84:	fb01 e505 	mlale	r5, r1, r5, lr
 800bd88:	e7e4      	b.n	800bd54 <_strtod_l+0x234>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	e781      	b.n	800bc94 <_strtod_l+0x174>
 800bd90:	f04f 0c01 	mov.w	ip, #1
 800bd94:	1cb3      	adds	r3, r6, #2
 800bd96:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd98:	78b3      	ldrb	r3, [r6, #2]
 800bd9a:	e78a      	b.n	800bcb2 <_strtod_l+0x192>
 800bd9c:	f04f 0c00 	mov.w	ip, #0
 800bda0:	e7f8      	b.n	800bd94 <_strtod_l+0x274>
 800bda2:	bf00      	nop
 800bda4:	08012bb4 	.word	0x08012bb4
 800bda8:	7ff00000 	.word	0x7ff00000
 800bdac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdae:	1c5f      	adds	r7, r3, #1
 800bdb0:	971b      	str	r7, [sp, #108]	; 0x6c
 800bdb2:	785b      	ldrb	r3, [r3, #1]
 800bdb4:	2b30      	cmp	r3, #48	; 0x30
 800bdb6:	d0f9      	beq.n	800bdac <_strtod_l+0x28c>
 800bdb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bdbc:	2f08      	cmp	r7, #8
 800bdbe:	f63f af7d 	bhi.w	800bcbc <_strtod_l+0x19c>
 800bdc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bdc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdc8:	930a      	str	r3, [sp, #40]	; 0x28
 800bdca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdcc:	1c5f      	adds	r7, r3, #1
 800bdce:	971b      	str	r7, [sp, #108]	; 0x6c
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bdd6:	f1b8 0f09 	cmp.w	r8, #9
 800bdda:	d937      	bls.n	800be4c <_strtod_l+0x32c>
 800bddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdde:	1a7f      	subs	r7, r7, r1
 800bde0:	2f08      	cmp	r7, #8
 800bde2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bde6:	dc37      	bgt.n	800be58 <_strtod_l+0x338>
 800bde8:	45be      	cmp	lr, r7
 800bdea:	bfa8      	it	ge
 800bdec:	46be      	movge	lr, r7
 800bdee:	f1bc 0f00 	cmp.w	ip, #0
 800bdf2:	d001      	beq.n	800bdf8 <_strtod_l+0x2d8>
 800bdf4:	f1ce 0e00 	rsb	lr, lr, #0
 800bdf8:	2c00      	cmp	r4, #0
 800bdfa:	d151      	bne.n	800bea0 <_strtod_l+0x380>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f47f aece 	bne.w	800bb9e <_strtod_l+0x7e>
 800be02:	9a06      	ldr	r2, [sp, #24]
 800be04:	2a00      	cmp	r2, #0
 800be06:	f47f aeca 	bne.w	800bb9e <_strtod_l+0x7e>
 800be0a:	9a04      	ldr	r2, [sp, #16]
 800be0c:	2a00      	cmp	r2, #0
 800be0e:	f47f aee4 	bne.w	800bbda <_strtod_l+0xba>
 800be12:	2b4e      	cmp	r3, #78	; 0x4e
 800be14:	d027      	beq.n	800be66 <_strtod_l+0x346>
 800be16:	dc21      	bgt.n	800be5c <_strtod_l+0x33c>
 800be18:	2b49      	cmp	r3, #73	; 0x49
 800be1a:	f47f aede 	bne.w	800bbda <_strtod_l+0xba>
 800be1e:	49a0      	ldr	r1, [pc, #640]	; (800c0a0 <_strtod_l+0x580>)
 800be20:	a81b      	add	r0, sp, #108	; 0x6c
 800be22:	f002 f83f 	bl	800dea4 <__match>
 800be26:	2800      	cmp	r0, #0
 800be28:	f43f aed7 	beq.w	800bbda <_strtod_l+0xba>
 800be2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be2e:	499d      	ldr	r1, [pc, #628]	; (800c0a4 <_strtod_l+0x584>)
 800be30:	3b01      	subs	r3, #1
 800be32:	a81b      	add	r0, sp, #108	; 0x6c
 800be34:	931b      	str	r3, [sp, #108]	; 0x6c
 800be36:	f002 f835 	bl	800dea4 <__match>
 800be3a:	b910      	cbnz	r0, 800be42 <_strtod_l+0x322>
 800be3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be3e:	3301      	adds	r3, #1
 800be40:	931b      	str	r3, [sp, #108]	; 0x6c
 800be42:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c0b8 <_strtod_l+0x598>
 800be46:	f04f 0a00 	mov.w	sl, #0
 800be4a:	e6a8      	b.n	800bb9e <_strtod_l+0x7e>
 800be4c:	210a      	movs	r1, #10
 800be4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800be52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800be56:	e7b8      	b.n	800bdca <_strtod_l+0x2aa>
 800be58:	46be      	mov	lr, r7
 800be5a:	e7c8      	b.n	800bdee <_strtod_l+0x2ce>
 800be5c:	2b69      	cmp	r3, #105	; 0x69
 800be5e:	d0de      	beq.n	800be1e <_strtod_l+0x2fe>
 800be60:	2b6e      	cmp	r3, #110	; 0x6e
 800be62:	f47f aeba 	bne.w	800bbda <_strtod_l+0xba>
 800be66:	4990      	ldr	r1, [pc, #576]	; (800c0a8 <_strtod_l+0x588>)
 800be68:	a81b      	add	r0, sp, #108	; 0x6c
 800be6a:	f002 f81b 	bl	800dea4 <__match>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f43f aeb3 	beq.w	800bbda <_strtod_l+0xba>
 800be74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b28      	cmp	r3, #40	; 0x28
 800be7a:	d10e      	bne.n	800be9a <_strtod_l+0x37a>
 800be7c:	aa1e      	add	r2, sp, #120	; 0x78
 800be7e:	498b      	ldr	r1, [pc, #556]	; (800c0ac <_strtod_l+0x58c>)
 800be80:	a81b      	add	r0, sp, #108	; 0x6c
 800be82:	f002 f823 	bl	800decc <__hexnan>
 800be86:	2805      	cmp	r0, #5
 800be88:	d107      	bne.n	800be9a <_strtod_l+0x37a>
 800be8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800be90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800be94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800be98:	e681      	b.n	800bb9e <_strtod_l+0x7e>
 800be9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c0c0 <_strtod_l+0x5a0>
 800be9e:	e7d2      	b.n	800be46 <_strtod_l+0x326>
 800bea0:	ebae 0302 	sub.w	r3, lr, r2
 800bea4:	9306      	str	r3, [sp, #24]
 800bea6:	9b05      	ldr	r3, [sp, #20]
 800bea8:	9807      	ldr	r0, [sp, #28]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	bf08      	it	eq
 800beae:	4623      	moveq	r3, r4
 800beb0:	2c10      	cmp	r4, #16
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	46a0      	mov	r8, r4
 800beb6:	bfa8      	it	ge
 800beb8:	f04f 0810 	movge.w	r8, #16
 800bebc:	f7f4 fb4c 	bl	8000558 <__aeabi_ui2d>
 800bec0:	2c09      	cmp	r4, #9
 800bec2:	4682      	mov	sl, r0
 800bec4:	468b      	mov	fp, r1
 800bec6:	dc13      	bgt.n	800bef0 <_strtod_l+0x3d0>
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f43f ae67 	beq.w	800bb9e <_strtod_l+0x7e>
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	dd7a      	ble.n	800bfca <_strtod_l+0x4aa>
 800bed4:	2b16      	cmp	r3, #22
 800bed6:	dc61      	bgt.n	800bf9c <_strtod_l+0x47c>
 800bed8:	4a75      	ldr	r2, [pc, #468]	; (800c0b0 <_strtod_l+0x590>)
 800beda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bede:	e9de 0100 	ldrd	r0, r1, [lr]
 800bee2:	4652      	mov	r2, sl
 800bee4:	465b      	mov	r3, fp
 800bee6:	f7f4 fbb1 	bl	800064c <__aeabi_dmul>
 800beea:	4682      	mov	sl, r0
 800beec:	468b      	mov	fp, r1
 800beee:	e656      	b.n	800bb9e <_strtod_l+0x7e>
 800bef0:	4b6f      	ldr	r3, [pc, #444]	; (800c0b0 <_strtod_l+0x590>)
 800bef2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bef6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800befa:	f7f4 fba7 	bl	800064c <__aeabi_dmul>
 800befe:	4606      	mov	r6, r0
 800bf00:	4628      	mov	r0, r5
 800bf02:	460f      	mov	r7, r1
 800bf04:	f7f4 fb28 	bl	8000558 <__aeabi_ui2d>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 f9e6 	bl	80002e0 <__adddf3>
 800bf14:	2c0f      	cmp	r4, #15
 800bf16:	4682      	mov	sl, r0
 800bf18:	468b      	mov	fp, r1
 800bf1a:	ddd5      	ble.n	800bec8 <_strtod_l+0x3a8>
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	eba4 0808 	sub.w	r8, r4, r8
 800bf22:	4498      	add	r8, r3
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	f340 8096 	ble.w	800c058 <_strtod_l+0x538>
 800bf2c:	f018 030f 	ands.w	r3, r8, #15
 800bf30:	d00a      	beq.n	800bf48 <_strtod_l+0x428>
 800bf32:	495f      	ldr	r1, [pc, #380]	; (800c0b0 <_strtod_l+0x590>)
 800bf34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf38:	4652      	mov	r2, sl
 800bf3a:	465b      	mov	r3, fp
 800bf3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf40:	f7f4 fb84 	bl	800064c <__aeabi_dmul>
 800bf44:	4682      	mov	sl, r0
 800bf46:	468b      	mov	fp, r1
 800bf48:	f038 080f 	bics.w	r8, r8, #15
 800bf4c:	d073      	beq.n	800c036 <_strtod_l+0x516>
 800bf4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bf52:	dd47      	ble.n	800bfe4 <_strtod_l+0x4c4>
 800bf54:	2400      	movs	r4, #0
 800bf56:	46a0      	mov	r8, r4
 800bf58:	9407      	str	r4, [sp, #28]
 800bf5a:	9405      	str	r4, [sp, #20]
 800bf5c:	2322      	movs	r3, #34	; 0x22
 800bf5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c0b8 <_strtod_l+0x598>
 800bf62:	f8c9 3000 	str.w	r3, [r9]
 800bf66:	f04f 0a00 	mov.w	sl, #0
 800bf6a:	9b07      	ldr	r3, [sp, #28]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f43f ae16 	beq.w	800bb9e <_strtod_l+0x7e>
 800bf72:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf74:	4648      	mov	r0, r9
 800bf76:	f002 f8fd 	bl	800e174 <_Bfree>
 800bf7a:	9905      	ldr	r1, [sp, #20]
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	f002 f8f9 	bl	800e174 <_Bfree>
 800bf82:	4641      	mov	r1, r8
 800bf84:	4648      	mov	r0, r9
 800bf86:	f002 f8f5 	bl	800e174 <_Bfree>
 800bf8a:	9907      	ldr	r1, [sp, #28]
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f002 f8f1 	bl	800e174 <_Bfree>
 800bf92:	4621      	mov	r1, r4
 800bf94:	4648      	mov	r0, r9
 800bf96:	f002 f8ed 	bl	800e174 <_Bfree>
 800bf9a:	e600      	b.n	800bb9e <_strtod_l+0x7e>
 800bf9c:	9a06      	ldr	r2, [sp, #24]
 800bf9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	dbba      	blt.n	800bf1c <_strtod_l+0x3fc>
 800bfa6:	4d42      	ldr	r5, [pc, #264]	; (800c0b0 <_strtod_l+0x590>)
 800bfa8:	f1c4 040f 	rsb	r4, r4, #15
 800bfac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb8:	f7f4 fb48 	bl	800064c <__aeabi_dmul>
 800bfbc:	9b06      	ldr	r3, [sp, #24]
 800bfbe:	1b1c      	subs	r4, r3, r4
 800bfc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bfc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfc8:	e78d      	b.n	800bee6 <_strtod_l+0x3c6>
 800bfca:	f113 0f16 	cmn.w	r3, #22
 800bfce:	dba5      	blt.n	800bf1c <_strtod_l+0x3fc>
 800bfd0:	4a37      	ldr	r2, [pc, #220]	; (800c0b0 <_strtod_l+0x590>)
 800bfd2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bfd6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bfda:	4650      	mov	r0, sl
 800bfdc:	4659      	mov	r1, fp
 800bfde:	f7f4 fc5f 	bl	80008a0 <__aeabi_ddiv>
 800bfe2:	e782      	b.n	800beea <_strtod_l+0x3ca>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4e33      	ldr	r6, [pc, #204]	; (800c0b4 <_strtod_l+0x594>)
 800bfe8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bfec:	4650      	mov	r0, sl
 800bfee:	4659      	mov	r1, fp
 800bff0:	461d      	mov	r5, r3
 800bff2:	f1b8 0f01 	cmp.w	r8, #1
 800bff6:	dc21      	bgt.n	800c03c <_strtod_l+0x51c>
 800bff8:	b10b      	cbz	r3, 800bffe <_strtod_l+0x4de>
 800bffa:	4682      	mov	sl, r0
 800bffc:	468b      	mov	fp, r1
 800bffe:	4b2d      	ldr	r3, [pc, #180]	; (800c0b4 <_strtod_l+0x594>)
 800c000:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c004:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c008:	4652      	mov	r2, sl
 800c00a:	465b      	mov	r3, fp
 800c00c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c010:	f7f4 fb1c 	bl	800064c <__aeabi_dmul>
 800c014:	4b28      	ldr	r3, [pc, #160]	; (800c0b8 <_strtod_l+0x598>)
 800c016:	460a      	mov	r2, r1
 800c018:	400b      	ands	r3, r1
 800c01a:	4928      	ldr	r1, [pc, #160]	; (800c0bc <_strtod_l+0x59c>)
 800c01c:	428b      	cmp	r3, r1
 800c01e:	4682      	mov	sl, r0
 800c020:	d898      	bhi.n	800bf54 <_strtod_l+0x434>
 800c022:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c026:	428b      	cmp	r3, r1
 800c028:	bf86      	itte	hi
 800c02a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c0c4 <_strtod_l+0x5a4>
 800c02e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c032:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c036:	2300      	movs	r3, #0
 800c038:	9304      	str	r3, [sp, #16]
 800c03a:	e077      	b.n	800c12c <_strtod_l+0x60c>
 800c03c:	f018 0f01 	tst.w	r8, #1
 800c040:	d006      	beq.n	800c050 <_strtod_l+0x530>
 800c042:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	f7f4 faff 	bl	800064c <__aeabi_dmul>
 800c04e:	2301      	movs	r3, #1
 800c050:	3501      	adds	r5, #1
 800c052:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c056:	e7cc      	b.n	800bff2 <_strtod_l+0x4d2>
 800c058:	d0ed      	beq.n	800c036 <_strtod_l+0x516>
 800c05a:	f1c8 0800 	rsb	r8, r8, #0
 800c05e:	f018 020f 	ands.w	r2, r8, #15
 800c062:	d00a      	beq.n	800c07a <_strtod_l+0x55a>
 800c064:	4b12      	ldr	r3, [pc, #72]	; (800c0b0 <_strtod_l+0x590>)
 800c066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 fc15 	bl	80008a0 <__aeabi_ddiv>
 800c076:	4682      	mov	sl, r0
 800c078:	468b      	mov	fp, r1
 800c07a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c07e:	d0da      	beq.n	800c036 <_strtod_l+0x516>
 800c080:	f1b8 0f1f 	cmp.w	r8, #31
 800c084:	dd20      	ble.n	800c0c8 <_strtod_l+0x5a8>
 800c086:	2400      	movs	r4, #0
 800c088:	46a0      	mov	r8, r4
 800c08a:	9407      	str	r4, [sp, #28]
 800c08c:	9405      	str	r4, [sp, #20]
 800c08e:	2322      	movs	r3, #34	; 0x22
 800c090:	f04f 0a00 	mov.w	sl, #0
 800c094:	f04f 0b00 	mov.w	fp, #0
 800c098:	f8c9 3000 	str.w	r3, [r9]
 800c09c:	e765      	b.n	800bf6a <_strtod_l+0x44a>
 800c09e:	bf00      	nop
 800c0a0:	08012b29 	.word	0x08012b29
 800c0a4:	08012e93 	.word	0x08012e93
 800c0a8:	08012d05 	.word	0x08012d05
 800c0ac:	08012bc8 	.word	0x08012bc8
 800c0b0:	08012ed0 	.word	0x08012ed0
 800c0b4:	08012ea8 	.word	0x08012ea8
 800c0b8:	7ff00000 	.word	0x7ff00000
 800c0bc:	7ca00000 	.word	0x7ca00000
 800c0c0:	fff80000 	.word	0xfff80000
 800c0c4:	7fefffff 	.word	0x7fefffff
 800c0c8:	f018 0310 	ands.w	r3, r8, #16
 800c0cc:	bf18      	it	ne
 800c0ce:	236a      	movne	r3, #106	; 0x6a
 800c0d0:	4da0      	ldr	r5, [pc, #640]	; (800c354 <_strtod_l+0x834>)
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	4659      	mov	r1, fp
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f1b8 0f00 	cmp.w	r8, #0
 800c0de:	f300 810a 	bgt.w	800c2f6 <_strtod_l+0x7d6>
 800c0e2:	b10b      	cbz	r3, 800c0e8 <_strtod_l+0x5c8>
 800c0e4:	4682      	mov	sl, r0
 800c0e6:	468b      	mov	fp, r1
 800c0e8:	9b04      	ldr	r3, [sp, #16]
 800c0ea:	b1bb      	cbz	r3, 800c11c <_strtod_l+0x5fc>
 800c0ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c0f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	4659      	mov	r1, fp
 800c0f8:	dd10      	ble.n	800c11c <_strtod_l+0x5fc>
 800c0fa:	2b1f      	cmp	r3, #31
 800c0fc:	f340 8107 	ble.w	800c30e <_strtod_l+0x7ee>
 800c100:	2b34      	cmp	r3, #52	; 0x34
 800c102:	bfde      	ittt	le
 800c104:	3b20      	suble	r3, #32
 800c106:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800c10a:	fa02 f303 	lslle.w	r3, r2, r3
 800c10e:	f04f 0a00 	mov.w	sl, #0
 800c112:	bfcc      	ite	gt
 800c114:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c118:	ea03 0b01 	andle.w	fp, r3, r1
 800c11c:	2200      	movs	r2, #0
 800c11e:	2300      	movs	r3, #0
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	f7f4 fcfa 	bl	8000b1c <__aeabi_dcmpeq>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d1ac      	bne.n	800c086 <_strtod_l+0x566>
 800c12c:	9b07      	ldr	r3, [sp, #28]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	9a05      	ldr	r2, [sp, #20]
 800c132:	9908      	ldr	r1, [sp, #32]
 800c134:	4623      	mov	r3, r4
 800c136:	4648      	mov	r0, r9
 800c138:	f002 f86e 	bl	800e218 <__s2b>
 800c13c:	9007      	str	r0, [sp, #28]
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f af08 	beq.w	800bf54 <_strtod_l+0x434>
 800c144:	9a06      	ldr	r2, [sp, #24]
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	2a00      	cmp	r2, #0
 800c14a:	f1c3 0300 	rsb	r3, r3, #0
 800c14e:	bfa8      	it	ge
 800c150:	2300      	movge	r3, #0
 800c152:	930e      	str	r3, [sp, #56]	; 0x38
 800c154:	2400      	movs	r4, #0
 800c156:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c15a:	9316      	str	r3, [sp, #88]	; 0x58
 800c15c:	46a0      	mov	r8, r4
 800c15e:	9b07      	ldr	r3, [sp, #28]
 800c160:	4648      	mov	r0, r9
 800c162:	6859      	ldr	r1, [r3, #4]
 800c164:	f001 ffd2 	bl	800e10c <_Balloc>
 800c168:	9005      	str	r0, [sp, #20]
 800c16a:	2800      	cmp	r0, #0
 800c16c:	f43f aef6 	beq.w	800bf5c <_strtod_l+0x43c>
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	691a      	ldr	r2, [r3, #16]
 800c174:	3202      	adds	r2, #2
 800c176:	f103 010c 	add.w	r1, r3, #12
 800c17a:	0092      	lsls	r2, r2, #2
 800c17c:	300c      	adds	r0, #12
 800c17e:	f7fe f88f 	bl	800a2a0 <memcpy>
 800c182:	aa1e      	add	r2, sp, #120	; 0x78
 800c184:	a91d      	add	r1, sp, #116	; 0x74
 800c186:	ec4b ab10 	vmov	d0, sl, fp
 800c18a:	4648      	mov	r0, r9
 800c18c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c190:	f002 fafe 	bl	800e790 <__d2b>
 800c194:	901c      	str	r0, [sp, #112]	; 0x70
 800c196:	2800      	cmp	r0, #0
 800c198:	f43f aee0 	beq.w	800bf5c <_strtod_l+0x43c>
 800c19c:	2101      	movs	r1, #1
 800c19e:	4648      	mov	r0, r9
 800c1a0:	f002 f8c6 	bl	800e330 <__i2b>
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f43f aed8 	beq.w	800bf5c <_strtod_l+0x43c>
 800c1ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c1ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c1b0:	2e00      	cmp	r6, #0
 800c1b2:	bfab      	itete	ge
 800c1b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c1b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c1b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c1ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c1bc:	bfac      	ite	ge
 800c1be:	18f7      	addge	r7, r6, r3
 800c1c0:	1b9d      	sublt	r5, r3, r6
 800c1c2:	9b04      	ldr	r3, [sp, #16]
 800c1c4:	1af6      	subs	r6, r6, r3
 800c1c6:	4416      	add	r6, r2
 800c1c8:	4b63      	ldr	r3, [pc, #396]	; (800c358 <_strtod_l+0x838>)
 800c1ca:	3e01      	subs	r6, #1
 800c1cc:	429e      	cmp	r6, r3
 800c1ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c1d2:	f280 80af 	bge.w	800c334 <_strtod_l+0x814>
 800c1d6:	1b9b      	subs	r3, r3, r6
 800c1d8:	2b1f      	cmp	r3, #31
 800c1da:	eba2 0203 	sub.w	r2, r2, r3
 800c1de:	f04f 0101 	mov.w	r1, #1
 800c1e2:	f300 809b 	bgt.w	800c31c <_strtod_l+0x7fc>
 800c1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f0:	18be      	adds	r6, r7, r2
 800c1f2:	9b04      	ldr	r3, [sp, #16]
 800c1f4:	42b7      	cmp	r7, r6
 800c1f6:	4415      	add	r5, r2
 800c1f8:	441d      	add	r5, r3
 800c1fa:	463b      	mov	r3, r7
 800c1fc:	bfa8      	it	ge
 800c1fe:	4633      	movge	r3, r6
 800c200:	42ab      	cmp	r3, r5
 800c202:	bfa8      	it	ge
 800c204:	462b      	movge	r3, r5
 800c206:	2b00      	cmp	r3, #0
 800c208:	bfc2      	ittt	gt
 800c20a:	1af6      	subgt	r6, r6, r3
 800c20c:	1aed      	subgt	r5, r5, r3
 800c20e:	1aff      	subgt	r7, r7, r3
 800c210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c212:	b1bb      	cbz	r3, 800c244 <_strtod_l+0x724>
 800c214:	4641      	mov	r1, r8
 800c216:	461a      	mov	r2, r3
 800c218:	4648      	mov	r0, r9
 800c21a:	f002 f929 	bl	800e470 <__pow5mult>
 800c21e:	4680      	mov	r8, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	f43f ae9b 	beq.w	800bf5c <_strtod_l+0x43c>
 800c226:	4601      	mov	r1, r0
 800c228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c22a:	4648      	mov	r0, r9
 800c22c:	f002 f889 	bl	800e342 <__multiply>
 800c230:	900c      	str	r0, [sp, #48]	; 0x30
 800c232:	2800      	cmp	r0, #0
 800c234:	f43f ae92 	beq.w	800bf5c <_strtod_l+0x43c>
 800c238:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c23a:	4648      	mov	r0, r9
 800c23c:	f001 ff9a 	bl	800e174 <_Bfree>
 800c240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c242:	931c      	str	r3, [sp, #112]	; 0x70
 800c244:	2e00      	cmp	r6, #0
 800c246:	dc7a      	bgt.n	800c33e <_strtod_l+0x81e>
 800c248:	9b06      	ldr	r3, [sp, #24]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd08      	ble.n	800c260 <_strtod_l+0x740>
 800c24e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c250:	9905      	ldr	r1, [sp, #20]
 800c252:	4648      	mov	r0, r9
 800c254:	f002 f90c 	bl	800e470 <__pow5mult>
 800c258:	9005      	str	r0, [sp, #20]
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f ae7e 	beq.w	800bf5c <_strtod_l+0x43c>
 800c260:	2d00      	cmp	r5, #0
 800c262:	dd08      	ble.n	800c276 <_strtod_l+0x756>
 800c264:	462a      	mov	r2, r5
 800c266:	9905      	ldr	r1, [sp, #20]
 800c268:	4648      	mov	r0, r9
 800c26a:	f002 f94f 	bl	800e50c <__lshift>
 800c26e:	9005      	str	r0, [sp, #20]
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f ae73 	beq.w	800bf5c <_strtod_l+0x43c>
 800c276:	2f00      	cmp	r7, #0
 800c278:	dd08      	ble.n	800c28c <_strtod_l+0x76c>
 800c27a:	4641      	mov	r1, r8
 800c27c:	463a      	mov	r2, r7
 800c27e:	4648      	mov	r0, r9
 800c280:	f002 f944 	bl	800e50c <__lshift>
 800c284:	4680      	mov	r8, r0
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f ae68 	beq.w	800bf5c <_strtod_l+0x43c>
 800c28c:	9a05      	ldr	r2, [sp, #20]
 800c28e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c290:	4648      	mov	r0, r9
 800c292:	f002 f9a9 	bl	800e5e8 <__mdiff>
 800c296:	4604      	mov	r4, r0
 800c298:	2800      	cmp	r0, #0
 800c29a:	f43f ae5f 	beq.w	800bf5c <_strtod_l+0x43c>
 800c29e:	68c3      	ldr	r3, [r0, #12]
 800c2a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60c3      	str	r3, [r0, #12]
 800c2a6:	4641      	mov	r1, r8
 800c2a8:	f002 f984 	bl	800e5b4 <__mcmp>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	da55      	bge.n	800c35c <_strtod_l+0x83c>
 800c2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2b2:	b9e3      	cbnz	r3, 800c2ee <_strtod_l+0x7ce>
 800c2b4:	f1ba 0f00 	cmp.w	sl, #0
 800c2b8:	d119      	bne.n	800c2ee <_strtod_l+0x7ce>
 800c2ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2be:	b9b3      	cbnz	r3, 800c2ee <_strtod_l+0x7ce>
 800c2c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2c4:	0d1b      	lsrs	r3, r3, #20
 800c2c6:	051b      	lsls	r3, r3, #20
 800c2c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c2cc:	d90f      	bls.n	800c2ee <_strtod_l+0x7ce>
 800c2ce:	6963      	ldr	r3, [r4, #20]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <_strtod_l+0x7b8>
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	dd0a      	ble.n	800c2ee <_strtod_l+0x7ce>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	2201      	movs	r2, #1
 800c2dc:	4648      	mov	r0, r9
 800c2de:	f002 f915 	bl	800e50c <__lshift>
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	f002 f965 	bl	800e5b4 <__mcmp>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	dc67      	bgt.n	800c3be <_strtod_l+0x89e>
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d171      	bne.n	800c3d8 <_strtod_l+0x8b8>
 800c2f4:	e63d      	b.n	800bf72 <_strtod_l+0x452>
 800c2f6:	f018 0f01 	tst.w	r8, #1
 800c2fa:	d004      	beq.n	800c306 <_strtod_l+0x7e6>
 800c2fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c300:	f7f4 f9a4 	bl	800064c <__aeabi_dmul>
 800c304:	2301      	movs	r3, #1
 800c306:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c30a:	3508      	adds	r5, #8
 800c30c:	e6e5      	b.n	800c0da <_strtod_l+0x5ba>
 800c30e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c312:	fa02 f303 	lsl.w	r3, r2, r3
 800c316:	ea03 0a0a 	and.w	sl, r3, sl
 800c31a:	e6ff      	b.n	800c11c <_strtod_l+0x5fc>
 800c31c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c320:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c324:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c328:	36e2      	adds	r6, #226	; 0xe2
 800c32a:	fa01 f306 	lsl.w	r3, r1, r6
 800c32e:	930a      	str	r3, [sp, #40]	; 0x28
 800c330:	910f      	str	r1, [sp, #60]	; 0x3c
 800c332:	e75d      	b.n	800c1f0 <_strtod_l+0x6d0>
 800c334:	2300      	movs	r3, #0
 800c336:	930a      	str	r3, [sp, #40]	; 0x28
 800c338:	2301      	movs	r3, #1
 800c33a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c33c:	e758      	b.n	800c1f0 <_strtod_l+0x6d0>
 800c33e:	4632      	mov	r2, r6
 800c340:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c342:	4648      	mov	r0, r9
 800c344:	f002 f8e2 	bl	800e50c <__lshift>
 800c348:	901c      	str	r0, [sp, #112]	; 0x70
 800c34a:	2800      	cmp	r0, #0
 800c34c:	f47f af7c 	bne.w	800c248 <_strtod_l+0x728>
 800c350:	e604      	b.n	800bf5c <_strtod_l+0x43c>
 800c352:	bf00      	nop
 800c354:	08012be0 	.word	0x08012be0
 800c358:	fffffc02 	.word	0xfffffc02
 800c35c:	465d      	mov	r5, fp
 800c35e:	f040 8086 	bne.w	800c46e <_strtod_l+0x94e>
 800c362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c368:	b32a      	cbz	r2, 800c3b6 <_strtod_l+0x896>
 800c36a:	4aaf      	ldr	r2, [pc, #700]	; (800c628 <_strtod_l+0xb08>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d153      	bne.n	800c418 <_strtod_l+0x8f8>
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	4650      	mov	r0, sl
 800c374:	b1d3      	cbz	r3, 800c3ac <_strtod_l+0x88c>
 800c376:	4aad      	ldr	r2, [pc, #692]	; (800c62c <_strtod_l+0xb0c>)
 800c378:	402a      	ands	r2, r5
 800c37a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c37e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c382:	d816      	bhi.n	800c3b2 <_strtod_l+0x892>
 800c384:	0d12      	lsrs	r2, r2, #20
 800c386:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c38a:	fa01 f303 	lsl.w	r3, r1, r3
 800c38e:	4298      	cmp	r0, r3
 800c390:	d142      	bne.n	800c418 <_strtod_l+0x8f8>
 800c392:	4ba7      	ldr	r3, [pc, #668]	; (800c630 <_strtod_l+0xb10>)
 800c394:	429d      	cmp	r5, r3
 800c396:	d102      	bne.n	800c39e <_strtod_l+0x87e>
 800c398:	3001      	adds	r0, #1
 800c39a:	f43f addf 	beq.w	800bf5c <_strtod_l+0x43c>
 800c39e:	4ba3      	ldr	r3, [pc, #652]	; (800c62c <_strtod_l+0xb0c>)
 800c3a0:	402b      	ands	r3, r5
 800c3a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c3a6:	f04f 0a00 	mov.w	sl, #0
 800c3aa:	e7a0      	b.n	800c2ee <_strtod_l+0x7ce>
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3b0:	e7ed      	b.n	800c38e <_strtod_l+0x86e>
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	e7eb      	b.n	800c38e <_strtod_l+0x86e>
 800c3b6:	bb7b      	cbnz	r3, 800c418 <_strtod_l+0x8f8>
 800c3b8:	f1ba 0f00 	cmp.w	sl, #0
 800c3bc:	d12c      	bne.n	800c418 <_strtod_l+0x8f8>
 800c3be:	9904      	ldr	r1, [sp, #16]
 800c3c0:	4a9a      	ldr	r2, [pc, #616]	; (800c62c <_strtod_l+0xb0c>)
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	b1f1      	cbz	r1, 800c404 <_strtod_l+0x8e4>
 800c3c6:	ea02 010b 	and.w	r1, r2, fp
 800c3ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3ce:	dc19      	bgt.n	800c404 <_strtod_l+0x8e4>
 800c3d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3d4:	f77f ae5b 	ble.w	800c08e <_strtod_l+0x56e>
 800c3d8:	4a96      	ldr	r2, [pc, #600]	; (800c634 <_strtod_l+0xb14>)
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	4659      	mov	r1, fp
 800c3e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c3e8:	f7f4 f930 	bl	800064c <__aeabi_dmul>
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	468b      	mov	fp, r1
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	f47f adbe 	bne.w	800bf72 <_strtod_l+0x452>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	f47f adbb 	bne.w	800bf72 <_strtod_l+0x452>
 800c3fc:	2322      	movs	r3, #34	; 0x22
 800c3fe:	f8c9 3000 	str.w	r3, [r9]
 800c402:	e5b6      	b.n	800bf72 <_strtod_l+0x452>
 800c404:	4013      	ands	r3, r2
 800c406:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c40a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c40e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c412:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c416:	e76a      	b.n	800c2ee <_strtod_l+0x7ce>
 800c418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41a:	b193      	cbz	r3, 800c442 <_strtod_l+0x922>
 800c41c:	422b      	tst	r3, r5
 800c41e:	f43f af66 	beq.w	800c2ee <_strtod_l+0x7ce>
 800c422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c424:	9a04      	ldr	r2, [sp, #16]
 800c426:	4650      	mov	r0, sl
 800c428:	4659      	mov	r1, fp
 800c42a:	b173      	cbz	r3, 800c44a <_strtod_l+0x92a>
 800c42c:	f7ff fb5c 	bl	800bae8 <sulp>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c438:	f7f3 ff52 	bl	80002e0 <__adddf3>
 800c43c:	4682      	mov	sl, r0
 800c43e:	468b      	mov	fp, r1
 800c440:	e755      	b.n	800c2ee <_strtod_l+0x7ce>
 800c442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c444:	ea13 0f0a 	tst.w	r3, sl
 800c448:	e7e9      	b.n	800c41e <_strtod_l+0x8fe>
 800c44a:	f7ff fb4d 	bl	800bae8 <sulp>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c456:	f7f3 ff41 	bl	80002dc <__aeabi_dsub>
 800c45a:	2200      	movs	r2, #0
 800c45c:	2300      	movs	r3, #0
 800c45e:	4682      	mov	sl, r0
 800c460:	468b      	mov	fp, r1
 800c462:	f7f4 fb5b 	bl	8000b1c <__aeabi_dcmpeq>
 800c466:	2800      	cmp	r0, #0
 800c468:	f47f ae11 	bne.w	800c08e <_strtod_l+0x56e>
 800c46c:	e73f      	b.n	800c2ee <_strtod_l+0x7ce>
 800c46e:	4641      	mov	r1, r8
 800c470:	4620      	mov	r0, r4
 800c472:	f002 f9dc 	bl	800e82e <__ratio>
 800c476:	ec57 6b10 	vmov	r6, r7, d0
 800c47a:	2200      	movs	r2, #0
 800c47c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c480:	ee10 0a10 	vmov	r0, s0
 800c484:	4639      	mov	r1, r7
 800c486:	f7f4 fb5d 	bl	8000b44 <__aeabi_dcmple>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d077      	beq.n	800c57e <_strtod_l+0xa5e>
 800c48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c490:	2b00      	cmp	r3, #0
 800c492:	d04a      	beq.n	800c52a <_strtod_l+0xa0a>
 800c494:	4b68      	ldr	r3, [pc, #416]	; (800c638 <_strtod_l+0xb18>)
 800c496:	2200      	movs	r2, #0
 800c498:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c49c:	4f66      	ldr	r7, [pc, #408]	; (800c638 <_strtod_l+0xb18>)
 800c49e:	2600      	movs	r6, #0
 800c4a0:	4b62      	ldr	r3, [pc, #392]	; (800c62c <_strtod_l+0xb0c>)
 800c4a2:	402b      	ands	r3, r5
 800c4a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4a8:	4b64      	ldr	r3, [pc, #400]	; (800c63c <_strtod_l+0xb1c>)
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	f040 80ce 	bne.w	800c64c <_strtod_l+0xb2c>
 800c4b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c4bc:	ec4b ab10 	vmov	d0, sl, fp
 800c4c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c4c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4c8:	f002 f8ec 	bl	800e6a4 <__ulp>
 800c4cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4d0:	ec53 2b10 	vmov	r2, r3, d0
 800c4d4:	f7f4 f8ba 	bl	800064c <__aeabi_dmul>
 800c4d8:	4652      	mov	r2, sl
 800c4da:	465b      	mov	r3, fp
 800c4dc:	f7f3 ff00 	bl	80002e0 <__adddf3>
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4952      	ldr	r1, [pc, #328]	; (800c62c <_strtod_l+0xb0c>)
 800c4e4:	4a56      	ldr	r2, [pc, #344]	; (800c640 <_strtod_l+0xb20>)
 800c4e6:	4019      	ands	r1, r3
 800c4e8:	4291      	cmp	r1, r2
 800c4ea:	4682      	mov	sl, r0
 800c4ec:	d95b      	bls.n	800c5a6 <_strtod_l+0xa86>
 800c4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d103      	bne.n	800c500 <_strtod_l+0x9e0>
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	f43f ad2e 	beq.w	800bf5c <_strtod_l+0x43c>
 800c500:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c630 <_strtod_l+0xb10>
 800c504:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c508:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c50a:	4648      	mov	r0, r9
 800c50c:	f001 fe32 	bl	800e174 <_Bfree>
 800c510:	9905      	ldr	r1, [sp, #20]
 800c512:	4648      	mov	r0, r9
 800c514:	f001 fe2e 	bl	800e174 <_Bfree>
 800c518:	4641      	mov	r1, r8
 800c51a:	4648      	mov	r0, r9
 800c51c:	f001 fe2a 	bl	800e174 <_Bfree>
 800c520:	4621      	mov	r1, r4
 800c522:	4648      	mov	r0, r9
 800c524:	f001 fe26 	bl	800e174 <_Bfree>
 800c528:	e619      	b.n	800c15e <_strtod_l+0x63e>
 800c52a:	f1ba 0f00 	cmp.w	sl, #0
 800c52e:	d11a      	bne.n	800c566 <_strtod_l+0xa46>
 800c530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c534:	b9eb      	cbnz	r3, 800c572 <_strtod_l+0xa52>
 800c536:	2200      	movs	r2, #0
 800c538:	4b3f      	ldr	r3, [pc, #252]	; (800c638 <_strtod_l+0xb18>)
 800c53a:	4630      	mov	r0, r6
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f4 faf7 	bl	8000b30 <__aeabi_dcmplt>
 800c542:	b9c8      	cbnz	r0, 800c578 <_strtod_l+0xa58>
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	2200      	movs	r2, #0
 800c54a:	4b3e      	ldr	r3, [pc, #248]	; (800c644 <_strtod_l+0xb24>)
 800c54c:	f7f4 f87e 	bl	800064c <__aeabi_dmul>
 800c550:	4606      	mov	r6, r0
 800c552:	460f      	mov	r7, r1
 800c554:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c558:	9618      	str	r6, [sp, #96]	; 0x60
 800c55a:	9319      	str	r3, [sp, #100]	; 0x64
 800c55c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c564:	e79c      	b.n	800c4a0 <_strtod_l+0x980>
 800c566:	f1ba 0f01 	cmp.w	sl, #1
 800c56a:	d102      	bne.n	800c572 <_strtod_l+0xa52>
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	f43f ad8e 	beq.w	800c08e <_strtod_l+0x56e>
 800c572:	2200      	movs	r2, #0
 800c574:	4b34      	ldr	r3, [pc, #208]	; (800c648 <_strtod_l+0xb28>)
 800c576:	e78f      	b.n	800c498 <_strtod_l+0x978>
 800c578:	2600      	movs	r6, #0
 800c57a:	4f32      	ldr	r7, [pc, #200]	; (800c644 <_strtod_l+0xb24>)
 800c57c:	e7ea      	b.n	800c554 <_strtod_l+0xa34>
 800c57e:	4b31      	ldr	r3, [pc, #196]	; (800c644 <_strtod_l+0xb24>)
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	2200      	movs	r2, #0
 800c586:	f7f4 f861 	bl	800064c <__aeabi_dmul>
 800c58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c58c:	4606      	mov	r6, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	b933      	cbnz	r3, 800c5a0 <_strtod_l+0xa80>
 800c592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c596:	9010      	str	r0, [sp, #64]	; 0x40
 800c598:	9311      	str	r3, [sp, #68]	; 0x44
 800c59a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c59e:	e7df      	b.n	800c560 <_strtod_l+0xa40>
 800c5a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c5a4:	e7f9      	b.n	800c59a <_strtod_l+0xa7a>
 800c5a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1ab      	bne.n	800c508 <_strtod_l+0x9e8>
 800c5b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5b4:	0d1b      	lsrs	r3, r3, #20
 800c5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5b8:	051b      	lsls	r3, r3, #20
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	465d      	mov	r5, fp
 800c5be:	d1a3      	bne.n	800c508 <_strtod_l+0x9e8>
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7f4 faf2 	bl	8000bac <__aeabi_d2iz>
 800c5c8:	f7f3 ffd6 	bl	8000578 <__aeabi_i2d>
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7f3 fe82 	bl	80002dc <__aeabi_dsub>
 800c5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5da:	4606      	mov	r6, r0
 800c5dc:	460f      	mov	r7, r1
 800c5de:	b933      	cbnz	r3, 800c5ee <_strtod_l+0xace>
 800c5e0:	f1ba 0f00 	cmp.w	sl, #0
 800c5e4:	d103      	bne.n	800c5ee <_strtod_l+0xace>
 800c5e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c5ea:	2d00      	cmp	r5, #0
 800c5ec:	d06d      	beq.n	800c6ca <_strtod_l+0xbaa>
 800c5ee:	a30a      	add	r3, pc, #40	; (adr r3, 800c618 <_strtod_l+0xaf8>)
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f4 fa9a 	bl	8000b30 <__aeabi_dcmplt>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f47f acb8 	bne.w	800bf72 <_strtod_l+0x452>
 800c602:	a307      	add	r3, pc, #28	; (adr r3, 800c620 <_strtod_l+0xb00>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	4630      	mov	r0, r6
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f4 faae 	bl	8000b6c <__aeabi_dcmpgt>
 800c610:	2800      	cmp	r0, #0
 800c612:	f43f af79 	beq.w	800c508 <_strtod_l+0x9e8>
 800c616:	e4ac      	b.n	800bf72 <_strtod_l+0x452>
 800c618:	94a03595 	.word	0x94a03595
 800c61c:	3fdfffff 	.word	0x3fdfffff
 800c620:	35afe535 	.word	0x35afe535
 800c624:	3fe00000 	.word	0x3fe00000
 800c628:	000fffff 	.word	0x000fffff
 800c62c:	7ff00000 	.word	0x7ff00000
 800c630:	7fefffff 	.word	0x7fefffff
 800c634:	39500000 	.word	0x39500000
 800c638:	3ff00000 	.word	0x3ff00000
 800c63c:	7fe00000 	.word	0x7fe00000
 800c640:	7c9fffff 	.word	0x7c9fffff
 800c644:	3fe00000 	.word	0x3fe00000
 800c648:	bff00000 	.word	0xbff00000
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	b333      	cbz	r3, 800c69e <_strtod_l+0xb7e>
 800c650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c652:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c656:	d822      	bhi.n	800c69e <_strtod_l+0xb7e>
 800c658:	a327      	add	r3, pc, #156	; (adr r3, 800c6f8 <_strtod_l+0xbd8>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	4630      	mov	r0, r6
 800c660:	4639      	mov	r1, r7
 800c662:	f7f4 fa6f 	bl	8000b44 <__aeabi_dcmple>
 800c666:	b1a0      	cbz	r0, 800c692 <_strtod_l+0xb72>
 800c668:	4639      	mov	r1, r7
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7f4 fac6 	bl	8000bfc <__aeabi_d2uiz>
 800c670:	2800      	cmp	r0, #0
 800c672:	bf08      	it	eq
 800c674:	2001      	moveq	r0, #1
 800c676:	f7f3 ff6f 	bl	8000558 <__aeabi_ui2d>
 800c67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c67c:	4606      	mov	r6, r0
 800c67e:	460f      	mov	r7, r1
 800c680:	bb03      	cbnz	r3, 800c6c4 <_strtod_l+0xba4>
 800c682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c686:	9012      	str	r0, [sp, #72]	; 0x48
 800c688:	9313      	str	r3, [sp, #76]	; 0x4c
 800c68a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c68e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c696:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c69e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c6a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c6a6:	f001 fffd 	bl	800e6a4 <__ulp>
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	ec53 2b10 	vmov	r2, r3, d0
 800c6b0:	4659      	mov	r1, fp
 800c6b2:	f7f3 ffcb 	bl	800064c <__aeabi_dmul>
 800c6b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6ba:	f7f3 fe11 	bl	80002e0 <__adddf3>
 800c6be:	4682      	mov	sl, r0
 800c6c0:	468b      	mov	fp, r1
 800c6c2:	e772      	b.n	800c5aa <_strtod_l+0xa8a>
 800c6c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c6c8:	e7df      	b.n	800c68a <_strtod_l+0xb6a>
 800c6ca:	a30d      	add	r3, pc, #52	; (adr r3, 800c700 <_strtod_l+0xbe0>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f4 fa2e 	bl	8000b30 <__aeabi_dcmplt>
 800c6d4:	e79c      	b.n	800c610 <_strtod_l+0xaf0>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	f7ff ba61 	b.w	800bba6 <_strtod_l+0x86>
 800c6e4:	2b65      	cmp	r3, #101	; 0x65
 800c6e6:	f04f 0200 	mov.w	r2, #0
 800c6ea:	f43f ab4e 	beq.w	800bd8a <_strtod_l+0x26a>
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	9104      	str	r1, [sp, #16]
 800c6f4:	f7ff bacb 	b.w	800bc8e <_strtod_l+0x16e>
 800c6f8:	ffc00000 	.word	0xffc00000
 800c6fc:	41dfffff 	.word	0x41dfffff
 800c700:	94a03595 	.word	0x94a03595
 800c704:	3fcfffff 	.word	0x3fcfffff

0800c708 <_strtod_r>:
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <_strtod_r+0x18>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	b410      	push	{r4}
 800c70e:	6a1b      	ldr	r3, [r3, #32]
 800c710:	4c04      	ldr	r4, [pc, #16]	; (800c724 <_strtod_r+0x1c>)
 800c712:	2b00      	cmp	r3, #0
 800c714:	bf08      	it	eq
 800c716:	4623      	moveq	r3, r4
 800c718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71c:	f7ff ba00 	b.w	800bb20 <_strtod_l>
 800c720:	20000060 	.word	0x20000060
 800c724:	20000128 	.word	0x20000128

0800c728 <_strtol_l.isra.0>:
 800c728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c72c:	4680      	mov	r8, r0
 800c72e:	4689      	mov	r9, r1
 800c730:	4692      	mov	sl, r2
 800c732:	461e      	mov	r6, r3
 800c734:	460f      	mov	r7, r1
 800c736:	463d      	mov	r5, r7
 800c738:	9808      	ldr	r0, [sp, #32]
 800c73a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c73e:	f001 fca1 	bl	800e084 <__locale_ctype_ptr_l>
 800c742:	4420      	add	r0, r4
 800c744:	7843      	ldrb	r3, [r0, #1]
 800c746:	f013 0308 	ands.w	r3, r3, #8
 800c74a:	d132      	bne.n	800c7b2 <_strtol_l.isra.0+0x8a>
 800c74c:	2c2d      	cmp	r4, #45	; 0x2d
 800c74e:	d132      	bne.n	800c7b6 <_strtol_l.isra.0+0x8e>
 800c750:	787c      	ldrb	r4, [r7, #1]
 800c752:	1cbd      	adds	r5, r7, #2
 800c754:	2201      	movs	r2, #1
 800c756:	2e00      	cmp	r6, #0
 800c758:	d05d      	beq.n	800c816 <_strtol_l.isra.0+0xee>
 800c75a:	2e10      	cmp	r6, #16
 800c75c:	d109      	bne.n	800c772 <_strtol_l.isra.0+0x4a>
 800c75e:	2c30      	cmp	r4, #48	; 0x30
 800c760:	d107      	bne.n	800c772 <_strtol_l.isra.0+0x4a>
 800c762:	782b      	ldrb	r3, [r5, #0]
 800c764:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c768:	2b58      	cmp	r3, #88	; 0x58
 800c76a:	d14f      	bne.n	800c80c <_strtol_l.isra.0+0xe4>
 800c76c:	786c      	ldrb	r4, [r5, #1]
 800c76e:	2610      	movs	r6, #16
 800c770:	3502      	adds	r5, #2
 800c772:	2a00      	cmp	r2, #0
 800c774:	bf14      	ite	ne
 800c776:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c77a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c77e:	2700      	movs	r7, #0
 800c780:	fbb1 fcf6 	udiv	ip, r1, r6
 800c784:	4638      	mov	r0, r7
 800c786:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c78a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c78e:	2b09      	cmp	r3, #9
 800c790:	d817      	bhi.n	800c7c2 <_strtol_l.isra.0+0x9a>
 800c792:	461c      	mov	r4, r3
 800c794:	42a6      	cmp	r6, r4
 800c796:	dd23      	ble.n	800c7e0 <_strtol_l.isra.0+0xb8>
 800c798:	1c7b      	adds	r3, r7, #1
 800c79a:	d007      	beq.n	800c7ac <_strtol_l.isra.0+0x84>
 800c79c:	4584      	cmp	ip, r0
 800c79e:	d31c      	bcc.n	800c7da <_strtol_l.isra.0+0xb2>
 800c7a0:	d101      	bne.n	800c7a6 <_strtol_l.isra.0+0x7e>
 800c7a2:	45a6      	cmp	lr, r4
 800c7a4:	db19      	blt.n	800c7da <_strtol_l.isra.0+0xb2>
 800c7a6:	fb00 4006 	mla	r0, r0, r6, r4
 800c7aa:	2701      	movs	r7, #1
 800c7ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7b0:	e7eb      	b.n	800c78a <_strtol_l.isra.0+0x62>
 800c7b2:	462f      	mov	r7, r5
 800c7b4:	e7bf      	b.n	800c736 <_strtol_l.isra.0+0xe>
 800c7b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c7b8:	bf04      	itt	eq
 800c7ba:	1cbd      	addeq	r5, r7, #2
 800c7bc:	787c      	ldrbeq	r4, [r7, #1]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	e7c9      	b.n	800c756 <_strtol_l.isra.0+0x2e>
 800c7c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c7c6:	2b19      	cmp	r3, #25
 800c7c8:	d801      	bhi.n	800c7ce <_strtol_l.isra.0+0xa6>
 800c7ca:	3c37      	subs	r4, #55	; 0x37
 800c7cc:	e7e2      	b.n	800c794 <_strtol_l.isra.0+0x6c>
 800c7ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c7d2:	2b19      	cmp	r3, #25
 800c7d4:	d804      	bhi.n	800c7e0 <_strtol_l.isra.0+0xb8>
 800c7d6:	3c57      	subs	r4, #87	; 0x57
 800c7d8:	e7dc      	b.n	800c794 <_strtol_l.isra.0+0x6c>
 800c7da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c7de:	e7e5      	b.n	800c7ac <_strtol_l.isra.0+0x84>
 800c7e0:	1c7b      	adds	r3, r7, #1
 800c7e2:	d108      	bne.n	800c7f6 <_strtol_l.isra.0+0xce>
 800c7e4:	2322      	movs	r3, #34	; 0x22
 800c7e6:	f8c8 3000 	str.w	r3, [r8]
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	f1ba 0f00 	cmp.w	sl, #0
 800c7f0:	d107      	bne.n	800c802 <_strtol_l.isra.0+0xda>
 800c7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f6:	b102      	cbz	r2, 800c7fa <_strtol_l.isra.0+0xd2>
 800c7f8:	4240      	negs	r0, r0
 800c7fa:	f1ba 0f00 	cmp.w	sl, #0
 800c7fe:	d0f8      	beq.n	800c7f2 <_strtol_l.isra.0+0xca>
 800c800:	b10f      	cbz	r7, 800c806 <_strtol_l.isra.0+0xde>
 800c802:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c806:	f8ca 9000 	str.w	r9, [sl]
 800c80a:	e7f2      	b.n	800c7f2 <_strtol_l.isra.0+0xca>
 800c80c:	2430      	movs	r4, #48	; 0x30
 800c80e:	2e00      	cmp	r6, #0
 800c810:	d1af      	bne.n	800c772 <_strtol_l.isra.0+0x4a>
 800c812:	2608      	movs	r6, #8
 800c814:	e7ad      	b.n	800c772 <_strtol_l.isra.0+0x4a>
 800c816:	2c30      	cmp	r4, #48	; 0x30
 800c818:	d0a3      	beq.n	800c762 <_strtol_l.isra.0+0x3a>
 800c81a:	260a      	movs	r6, #10
 800c81c:	e7a9      	b.n	800c772 <_strtol_l.isra.0+0x4a>
	...

0800c820 <_strtol_r>:
 800c820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c822:	4c06      	ldr	r4, [pc, #24]	; (800c83c <_strtol_r+0x1c>)
 800c824:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_strtol_r+0x20>)
 800c826:	6824      	ldr	r4, [r4, #0]
 800c828:	6a24      	ldr	r4, [r4, #32]
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	bf08      	it	eq
 800c82e:	462c      	moveq	r4, r5
 800c830:	9400      	str	r4, [sp, #0]
 800c832:	f7ff ff79 	bl	800c728 <_strtol_l.isra.0>
 800c836:	b003      	add	sp, #12
 800c838:	bd30      	pop	{r4, r5, pc}
 800c83a:	bf00      	nop
 800c83c:	20000060 	.word	0x20000060
 800c840:	20000128 	.word	0x20000128

0800c844 <_strtoul_l.isra.0>:
 800c844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c848:	4680      	mov	r8, r0
 800c84a:	4689      	mov	r9, r1
 800c84c:	4692      	mov	sl, r2
 800c84e:	461e      	mov	r6, r3
 800c850:	460f      	mov	r7, r1
 800c852:	463d      	mov	r5, r7
 800c854:	9808      	ldr	r0, [sp, #32]
 800c856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c85a:	f001 fc13 	bl	800e084 <__locale_ctype_ptr_l>
 800c85e:	4420      	add	r0, r4
 800c860:	7843      	ldrb	r3, [r0, #1]
 800c862:	f013 0308 	ands.w	r3, r3, #8
 800c866:	d130      	bne.n	800c8ca <_strtoul_l.isra.0+0x86>
 800c868:	2c2d      	cmp	r4, #45	; 0x2d
 800c86a:	d130      	bne.n	800c8ce <_strtoul_l.isra.0+0x8a>
 800c86c:	787c      	ldrb	r4, [r7, #1]
 800c86e:	1cbd      	adds	r5, r7, #2
 800c870:	2101      	movs	r1, #1
 800c872:	2e00      	cmp	r6, #0
 800c874:	d05c      	beq.n	800c930 <_strtoul_l.isra.0+0xec>
 800c876:	2e10      	cmp	r6, #16
 800c878:	d109      	bne.n	800c88e <_strtoul_l.isra.0+0x4a>
 800c87a:	2c30      	cmp	r4, #48	; 0x30
 800c87c:	d107      	bne.n	800c88e <_strtoul_l.isra.0+0x4a>
 800c87e:	782b      	ldrb	r3, [r5, #0]
 800c880:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c884:	2b58      	cmp	r3, #88	; 0x58
 800c886:	d14e      	bne.n	800c926 <_strtoul_l.isra.0+0xe2>
 800c888:	786c      	ldrb	r4, [r5, #1]
 800c88a:	2610      	movs	r6, #16
 800c88c:	3502      	adds	r5, #2
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c892:	2300      	movs	r3, #0
 800c894:	fbb2 f2f6 	udiv	r2, r2, r6
 800c898:	fb06 fc02 	mul.w	ip, r6, r2
 800c89c:	ea6f 0c0c 	mvn.w	ip, ip
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c8a6:	2f09      	cmp	r7, #9
 800c8a8:	d817      	bhi.n	800c8da <_strtoul_l.isra.0+0x96>
 800c8aa:	463c      	mov	r4, r7
 800c8ac:	42a6      	cmp	r6, r4
 800c8ae:	dd23      	ble.n	800c8f8 <_strtoul_l.isra.0+0xb4>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	db1e      	blt.n	800c8f2 <_strtoul_l.isra.0+0xae>
 800c8b4:	4282      	cmp	r2, r0
 800c8b6:	d31c      	bcc.n	800c8f2 <_strtoul_l.isra.0+0xae>
 800c8b8:	d101      	bne.n	800c8be <_strtoul_l.isra.0+0x7a>
 800c8ba:	45a4      	cmp	ip, r4
 800c8bc:	db19      	blt.n	800c8f2 <_strtoul_l.isra.0+0xae>
 800c8be:	fb00 4006 	mla	r0, r0, r6, r4
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8c8:	e7eb      	b.n	800c8a2 <_strtoul_l.isra.0+0x5e>
 800c8ca:	462f      	mov	r7, r5
 800c8cc:	e7c1      	b.n	800c852 <_strtoul_l.isra.0+0xe>
 800c8ce:	2c2b      	cmp	r4, #43	; 0x2b
 800c8d0:	bf04      	itt	eq
 800c8d2:	1cbd      	addeq	r5, r7, #2
 800c8d4:	787c      	ldrbeq	r4, [r7, #1]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	e7cb      	b.n	800c872 <_strtoul_l.isra.0+0x2e>
 800c8da:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c8de:	2f19      	cmp	r7, #25
 800c8e0:	d801      	bhi.n	800c8e6 <_strtoul_l.isra.0+0xa2>
 800c8e2:	3c37      	subs	r4, #55	; 0x37
 800c8e4:	e7e2      	b.n	800c8ac <_strtoul_l.isra.0+0x68>
 800c8e6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c8ea:	2f19      	cmp	r7, #25
 800c8ec:	d804      	bhi.n	800c8f8 <_strtoul_l.isra.0+0xb4>
 800c8ee:	3c57      	subs	r4, #87	; 0x57
 800c8f0:	e7dc      	b.n	800c8ac <_strtoul_l.isra.0+0x68>
 800c8f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8f6:	e7e5      	b.n	800c8c4 <_strtoul_l.isra.0+0x80>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da09      	bge.n	800c910 <_strtoul_l.isra.0+0xcc>
 800c8fc:	2322      	movs	r3, #34	; 0x22
 800c8fe:	f8c8 3000 	str.w	r3, [r8]
 800c902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c906:	f1ba 0f00 	cmp.w	sl, #0
 800c90a:	d107      	bne.n	800c91c <_strtoul_l.isra.0+0xd8>
 800c90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c910:	b101      	cbz	r1, 800c914 <_strtoul_l.isra.0+0xd0>
 800c912:	4240      	negs	r0, r0
 800c914:	f1ba 0f00 	cmp.w	sl, #0
 800c918:	d0f8      	beq.n	800c90c <_strtoul_l.isra.0+0xc8>
 800c91a:	b10b      	cbz	r3, 800c920 <_strtoul_l.isra.0+0xdc>
 800c91c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c920:	f8ca 9000 	str.w	r9, [sl]
 800c924:	e7f2      	b.n	800c90c <_strtoul_l.isra.0+0xc8>
 800c926:	2430      	movs	r4, #48	; 0x30
 800c928:	2e00      	cmp	r6, #0
 800c92a:	d1b0      	bne.n	800c88e <_strtoul_l.isra.0+0x4a>
 800c92c:	2608      	movs	r6, #8
 800c92e:	e7ae      	b.n	800c88e <_strtoul_l.isra.0+0x4a>
 800c930:	2c30      	cmp	r4, #48	; 0x30
 800c932:	d0a4      	beq.n	800c87e <_strtoul_l.isra.0+0x3a>
 800c934:	260a      	movs	r6, #10
 800c936:	e7aa      	b.n	800c88e <_strtoul_l.isra.0+0x4a>

0800c938 <_strtoul_r>:
 800c938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c93a:	4c06      	ldr	r4, [pc, #24]	; (800c954 <_strtoul_r+0x1c>)
 800c93c:	4d06      	ldr	r5, [pc, #24]	; (800c958 <_strtoul_r+0x20>)
 800c93e:	6824      	ldr	r4, [r4, #0]
 800c940:	6a24      	ldr	r4, [r4, #32]
 800c942:	2c00      	cmp	r4, #0
 800c944:	bf08      	it	eq
 800c946:	462c      	moveq	r4, r5
 800c948:	9400      	str	r4, [sp, #0]
 800c94a:	f7ff ff7b 	bl	800c844 <_strtoul_l.isra.0>
 800c94e:	b003      	add	sp, #12
 800c950:	bd30      	pop	{r4, r5, pc}
 800c952:	bf00      	nop
 800c954:	20000060 	.word	0x20000060
 800c958:	20000128 	.word	0x20000128

0800c95c <strtoul>:
 800c95c:	4b08      	ldr	r3, [pc, #32]	; (800c980 <strtoul+0x24>)
 800c95e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c960:	681c      	ldr	r4, [r3, #0]
 800c962:	4d08      	ldr	r5, [pc, #32]	; (800c984 <strtoul+0x28>)
 800c964:	6a23      	ldr	r3, [r4, #32]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bf08      	it	eq
 800c96a:	462b      	moveq	r3, r5
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	4613      	mov	r3, r2
 800c970:	460a      	mov	r2, r1
 800c972:	4601      	mov	r1, r0
 800c974:	4620      	mov	r0, r4
 800c976:	f7ff ff65 	bl	800c844 <_strtoul_l.isra.0>
 800c97a:	b003      	add	sp, #12
 800c97c:	bd30      	pop	{r4, r5, pc}
 800c97e:	bf00      	nop
 800c980:	20000060 	.word	0x20000060
 800c984:	20000128 	.word	0x20000128

0800c988 <__tz_lock>:
 800c988:	4770      	bx	lr

0800c98a <__tz_unlock>:
 800c98a:	4770      	bx	lr

0800c98c <_tzset_unlocked>:
 800c98c:	4b01      	ldr	r3, [pc, #4]	; (800c994 <_tzset_unlocked+0x8>)
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	f000 b802 	b.w	800c998 <_tzset_unlocked_r>
 800c994:	20000060 	.word	0x20000060

0800c998 <_tzset_unlocked_r>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	b08d      	sub	sp, #52	; 0x34
 800c99e:	4607      	mov	r7, r0
 800c9a0:	f001 fb68 	bl	800e074 <__gettzinfo>
 800c9a4:	49af      	ldr	r1, [pc, #700]	; (800cc64 <_tzset_unlocked_r+0x2cc>)
 800c9a6:	4eb0      	ldr	r6, [pc, #704]	; (800cc68 <_tzset_unlocked_r+0x2d0>)
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	f001 fb5a 	bl	800e064 <_getenv_r>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	b970      	cbnz	r0, 800c9d2 <_tzset_unlocked_r+0x3a>
 800c9b4:	4bad      	ldr	r3, [pc, #692]	; (800cc6c <_tzset_unlocked_r+0x2d4>)
 800c9b6:	4aae      	ldr	r2, [pc, #696]	; (800cc70 <_tzset_unlocked_r+0x2d8>)
 800c9b8:	6018      	str	r0, [r3, #0]
 800c9ba:	4bae      	ldr	r3, [pc, #696]	; (800cc74 <_tzset_unlocked_r+0x2dc>)
 800c9bc:	6018      	str	r0, [r3, #0]
 800c9be:	4bae      	ldr	r3, [pc, #696]	; (800cc78 <_tzset_unlocked_r+0x2e0>)
 800c9c0:	6830      	ldr	r0, [r6, #0]
 800c9c2:	e9c3 2200 	strd	r2, r2, [r3]
 800c9c6:	f001 fb87 	bl	800e0d8 <free>
 800c9ca:	6034      	str	r4, [r6, #0]
 800c9cc:	b00d      	add	sp, #52	; 0x34
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	6831      	ldr	r1, [r6, #0]
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	d15f      	bne.n	800ca98 <_tzset_unlocked_r+0x100>
 800c9d8:	6830      	ldr	r0, [r6, #0]
 800c9da:	f001 fb7d 	bl	800e0d8 <free>
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f7f3 fc16 	bl	8000210 <strlen>
 800c9e4:	1c41      	adds	r1, r0, #1
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	f001 ffec 	bl	800e9c4 <_malloc_r>
 800c9ec:	6030      	str	r0, [r6, #0]
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d157      	bne.n	800caa2 <_tzset_unlocked_r+0x10a>
 800c9f2:	7823      	ldrb	r3, [r4, #0]
 800c9f4:	4aa1      	ldr	r2, [pc, #644]	; (800cc7c <_tzset_unlocked_r+0x2e4>)
 800c9f6:	49a2      	ldr	r1, [pc, #648]	; (800cc80 <_tzset_unlocked_r+0x2e8>)
 800c9f8:	2b3a      	cmp	r3, #58	; 0x3a
 800c9fa:	bf08      	it	eq
 800c9fc:	3401      	addeq	r4, #1
 800c9fe:	ae0a      	add	r6, sp, #40	; 0x28
 800ca00:	4633      	mov	r3, r6
 800ca02:	4620      	mov	r0, r4
 800ca04:	f002 f99a 	bl	800ed3c <siscanf>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	dddf      	ble.n	800c9cc <_tzset_unlocked_r+0x34>
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca0e:	18e7      	adds	r7, r4, r3
 800ca10:	5ce3      	ldrb	r3, [r4, r3]
 800ca12:	2b2d      	cmp	r3, #45	; 0x2d
 800ca14:	d149      	bne.n	800caaa <_tzset_unlocked_r+0x112>
 800ca16:	3701      	adds	r7, #1
 800ca18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca1c:	f10d 0a20 	add.w	sl, sp, #32
 800ca20:	f10d 0b1e 	add.w	fp, sp, #30
 800ca24:	f04f 0800 	mov.w	r8, #0
 800ca28:	9603      	str	r6, [sp, #12]
 800ca2a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800ca2e:	f8cd b000 	str.w	fp, [sp]
 800ca32:	4633      	mov	r3, r6
 800ca34:	aa07      	add	r2, sp, #28
 800ca36:	4993      	ldr	r1, [pc, #588]	; (800cc84 <_tzset_unlocked_r+0x2ec>)
 800ca38:	f8ad 801e 	strh.w	r8, [sp, #30]
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f8ad 8020 	strh.w	r8, [sp, #32]
 800ca42:	f002 f97b 	bl	800ed3c <siscanf>
 800ca46:	4540      	cmp	r0, r8
 800ca48:	ddc0      	ble.n	800c9cc <_tzset_unlocked_r+0x34>
 800ca4a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ca4e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ca52:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800cc90 <_tzset_unlocked_r+0x2f8>
 800ca56:	213c      	movs	r1, #60	; 0x3c
 800ca58:	fb01 2203 	mla	r2, r1, r3, r2
 800ca5c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ca60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ca64:	fb01 2303 	mla	r3, r1, r3, r2
 800ca68:	435c      	muls	r4, r3
 800ca6a:	62ac      	str	r4, [r5, #40]	; 0x28
 800ca6c:	4c82      	ldr	r4, [pc, #520]	; (800cc78 <_tzset_unlocked_r+0x2e0>)
 800ca6e:	4b83      	ldr	r3, [pc, #524]	; (800cc7c <_tzset_unlocked_r+0x2e4>)
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca74:	4982      	ldr	r1, [pc, #520]	; (800cc80 <_tzset_unlocked_r+0x2e8>)
 800ca76:	441f      	add	r7, r3
 800ca78:	464a      	mov	r2, r9
 800ca7a:	4633      	mov	r3, r6
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f002 f95d 	bl	800ed3c <siscanf>
 800ca82:	4540      	cmp	r0, r8
 800ca84:	dc16      	bgt.n	800cab4 <_tzset_unlocked_r+0x11c>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	6063      	str	r3, [r4, #4]
 800ca8a:	4b78      	ldr	r3, [pc, #480]	; (800cc6c <_tzset_unlocked_r+0x2d4>)
 800ca8c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	4b78      	ldr	r3, [pc, #480]	; (800cc74 <_tzset_unlocked_r+0x2dc>)
 800ca92:	f8c3 8000 	str.w	r8, [r3]
 800ca96:	e799      	b.n	800c9cc <_tzset_unlocked_r+0x34>
 800ca98:	f7f3 fc12 	bl	80002c0 <strcmp>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d095      	beq.n	800c9cc <_tzset_unlocked_r+0x34>
 800caa0:	e79a      	b.n	800c9d8 <_tzset_unlocked_r+0x40>
 800caa2:	4621      	mov	r1, r4
 800caa4:	f002 f976 	bl	800ed94 <strcpy>
 800caa8:	e7a3      	b.n	800c9f2 <_tzset_unlocked_r+0x5a>
 800caaa:	2b2b      	cmp	r3, #43	; 0x2b
 800caac:	bf08      	it	eq
 800caae:	3701      	addeq	r7, #1
 800cab0:	2401      	movs	r4, #1
 800cab2:	e7b3      	b.n	800ca1c <_tzset_unlocked_r+0x84>
 800cab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab6:	f8c4 9004 	str.w	r9, [r4, #4]
 800caba:	18fc      	adds	r4, r7, r3
 800cabc:	5cfb      	ldrb	r3, [r7, r3]
 800cabe:	2b2d      	cmp	r3, #45	; 0x2d
 800cac0:	f040 808b 	bne.w	800cbda <_tzset_unlocked_r+0x242>
 800cac4:	3401      	adds	r4, #1
 800cac6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800caca:	2300      	movs	r3, #0
 800cacc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cad0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cad4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cad8:	930a      	str	r3, [sp, #40]	; 0x28
 800cada:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cade:	e9cd b600 	strd	fp, r6, [sp]
 800cae2:	4633      	mov	r3, r6
 800cae4:	aa07      	add	r2, sp, #28
 800cae6:	4967      	ldr	r1, [pc, #412]	; (800cc84 <_tzset_unlocked_r+0x2ec>)
 800cae8:	4620      	mov	r0, r4
 800caea:	f002 f927 	bl	800ed3c <siscanf>
 800caee:	2800      	cmp	r0, #0
 800caf0:	dc78      	bgt.n	800cbe4 <_tzset_unlocked_r+0x24c>
 800caf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800caf4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800caf8:	652b      	str	r3, [r5, #80]	; 0x50
 800cafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafc:	462f      	mov	r7, r5
 800cafe:	441c      	add	r4, r3
 800cb00:	f04f 0900 	mov.w	r9, #0
 800cb04:	7823      	ldrb	r3, [r4, #0]
 800cb06:	2b2c      	cmp	r3, #44	; 0x2c
 800cb08:	bf08      	it	eq
 800cb0a:	3401      	addeq	r4, #1
 800cb0c:	f894 8000 	ldrb.w	r8, [r4]
 800cb10:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800cb14:	d179      	bne.n	800cc0a <_tzset_unlocked_r+0x272>
 800cb16:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800cb1a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800cb1e:	ab09      	add	r3, sp, #36	; 0x24
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	9603      	str	r6, [sp, #12]
 800cb24:	4633      	mov	r3, r6
 800cb26:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cb2a:	4957      	ldr	r1, [pc, #348]	; (800cc88 <_tzset_unlocked_r+0x2f0>)
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f002 f905 	bl	800ed3c <siscanf>
 800cb32:	2803      	cmp	r0, #3
 800cb34:	f47f af4a 	bne.w	800c9cc <_tzset_unlocked_r+0x34>
 800cb38:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cb3c:	1e4b      	subs	r3, r1, #1
 800cb3e:	2b0b      	cmp	r3, #11
 800cb40:	f63f af44 	bhi.w	800c9cc <_tzset_unlocked_r+0x34>
 800cb44:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cb48:	1e53      	subs	r3, r2, #1
 800cb4a:	2b04      	cmp	r3, #4
 800cb4c:	f63f af3e 	bhi.w	800c9cc <_tzset_unlocked_r+0x34>
 800cb50:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800cb54:	2b06      	cmp	r3, #6
 800cb56:	f63f af39 	bhi.w	800c9cc <_tzset_unlocked_r+0x34>
 800cb5a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cb5e:	f887 8008 	strb.w	r8, [r7, #8]
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb66:	eb04 0803 	add.w	r8, r4, r3
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cb76:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cb7a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb7c:	f898 3000 	ldrb.w	r3, [r8]
 800cb80:	2b2f      	cmp	r3, #47	; 0x2f
 800cb82:	d109      	bne.n	800cb98 <_tzset_unlocked_r+0x200>
 800cb84:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cb88:	e9cd b600 	strd	fp, r6, [sp]
 800cb8c:	4633      	mov	r3, r6
 800cb8e:	aa07      	add	r2, sp, #28
 800cb90:	493e      	ldr	r1, [pc, #248]	; (800cc8c <_tzset_unlocked_r+0x2f4>)
 800cb92:	4640      	mov	r0, r8
 800cb94:	f002 f8d2 	bl	800ed3c <siscanf>
 800cb98:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cb9c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800cba0:	213c      	movs	r1, #60	; 0x3c
 800cba2:	fb01 2203 	mla	r2, r1, r3, r2
 800cba6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cbaa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cbae:	fb01 2303 	mla	r3, r1, r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cbb6:	3728      	adds	r7, #40	; 0x28
 800cbb8:	4444      	add	r4, r8
 800cbba:	f1b9 0f00 	cmp.w	r9, #0
 800cbbe:	d021      	beq.n	800cc04 <_tzset_unlocked_r+0x26c>
 800cbc0:	6868      	ldr	r0, [r5, #4]
 800cbc2:	f002 f901 	bl	800edc8 <__tzcalc_limits>
 800cbc6:	4b29      	ldr	r3, [pc, #164]	; (800cc6c <_tzset_unlocked_r+0x2d4>)
 800cbc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	4a28      	ldr	r2, [pc, #160]	; (800cc74 <_tzset_unlocked_r+0x2dc>)
 800cbd2:	bf18      	it	ne
 800cbd4:	2301      	movne	r3, #1
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	e6f8      	b.n	800c9cc <_tzset_unlocked_r+0x34>
 800cbda:	2b2b      	cmp	r3, #43	; 0x2b
 800cbdc:	bf08      	it	eq
 800cbde:	3401      	addeq	r4, #1
 800cbe0:	2701      	movs	r7, #1
 800cbe2:	e772      	b.n	800caca <_tzset_unlocked_r+0x132>
 800cbe4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cbe8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800cbec:	213c      	movs	r1, #60	; 0x3c
 800cbee:	fb01 2203 	mla	r2, r1, r3, r2
 800cbf2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cbf6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cbfa:	fb01 2303 	mla	r3, r1, r3, r2
 800cbfe:	435f      	muls	r7, r3
 800cc00:	652f      	str	r7, [r5, #80]	; 0x50
 800cc02:	e77a      	b.n	800cafa <_tzset_unlocked_r+0x162>
 800cc04:	f04f 0901 	mov.w	r9, #1
 800cc08:	e77c      	b.n	800cb04 <_tzset_unlocked_r+0x16c>
 800cc0a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cc0e:	bf06      	itte	eq
 800cc10:	3401      	addeq	r4, #1
 800cc12:	4643      	moveq	r3, r8
 800cc14:	2344      	movne	r3, #68	; 0x44
 800cc16:	220a      	movs	r2, #10
 800cc18:	a90b      	add	r1, sp, #44	; 0x2c
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	9305      	str	r3, [sp, #20]
 800cc1e:	f7ff fe9d 	bl	800c95c <strtoul>
 800cc22:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cc26:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cc2a:	45a0      	cmp	r8, r4
 800cc2c:	9b05      	ldr	r3, [sp, #20]
 800cc2e:	d114      	bne.n	800cc5a <_tzset_unlocked_r+0x2c2>
 800cc30:	234d      	movs	r3, #77	; 0x4d
 800cc32:	f1b9 0f00 	cmp.w	r9, #0
 800cc36:	d107      	bne.n	800cc48 <_tzset_unlocked_r+0x2b0>
 800cc38:	722b      	strb	r3, [r5, #8]
 800cc3a:	2103      	movs	r1, #3
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800cc42:	f8c5 9014 	str.w	r9, [r5, #20]
 800cc46:	e790      	b.n	800cb6a <_tzset_unlocked_r+0x1d2>
 800cc48:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800cc4c:	220b      	movs	r2, #11
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800cc54:	2300      	movs	r3, #0
 800cc56:	63eb      	str	r3, [r5, #60]	; 0x3c
 800cc58:	e787      	b.n	800cb6a <_tzset_unlocked_r+0x1d2>
 800cc5a:	b280      	uxth	r0, r0
 800cc5c:	723b      	strb	r3, [r7, #8]
 800cc5e:	6178      	str	r0, [r7, #20]
 800cc60:	e783      	b.n	800cb6a <_tzset_unlocked_r+0x1d2>
 800cc62:	bf00      	nop
 800cc64:	08012e2f 	.word	0x08012e2f
 800cc68:	20004320 	.word	0x20004320
 800cc6c:	20004328 	.word	0x20004328
 800cc70:	08012e32 	.word	0x08012e32
 800cc74:	20004324 	.word	0x20004324
 800cc78:	200000c4 	.word	0x200000c4
 800cc7c:	20004313 	.word	0x20004313
 800cc80:	08012e36 	.word	0x08012e36
 800cc84:	08012e59 	.word	0x08012e59
 800cc88:	08012e45 	.word	0x08012e45
 800cc8c:	08012e58 	.word	0x08012e58
 800cc90:	20004308 	.word	0x20004308

0800cc94 <__utoa>:
 800cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <__utoa+0x78>)
 800cc98:	b08b      	sub	sp, #44	; 0x2c
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	466e      	mov	r6, sp
 800cca0:	f103 0c20 	add.w	ip, r3, #32
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	6859      	ldr	r1, [r3, #4]
 800cca8:	4637      	mov	r7, r6
 800ccaa:	c703      	stmia	r7!, {r0, r1}
 800ccac:	3308      	adds	r3, #8
 800ccae:	4563      	cmp	r3, ip
 800ccb0:	463e      	mov	r6, r7
 800ccb2:	d1f7      	bne.n	800cca4 <__utoa+0x10>
 800ccb4:	6818      	ldr	r0, [r3, #0]
 800ccb6:	791b      	ldrb	r3, [r3, #4]
 800ccb8:	713b      	strb	r3, [r7, #4]
 800ccba:	1e93      	subs	r3, r2, #2
 800ccbc:	2b22      	cmp	r3, #34	; 0x22
 800ccbe:	6038      	str	r0, [r7, #0]
 800ccc0:	f04f 0300 	mov.w	r3, #0
 800ccc4:	d904      	bls.n	800ccd0 <__utoa+0x3c>
 800ccc6:	7023      	strb	r3, [r4, #0]
 800ccc8:	461c      	mov	r4, r3
 800ccca:	4620      	mov	r0, r4
 800cccc:	b00b      	add	sp, #44	; 0x2c
 800ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd0:	1e66      	subs	r6, r4, #1
 800ccd2:	fbb5 f0f2 	udiv	r0, r5, r2
 800ccd6:	af0a      	add	r7, sp, #40	; 0x28
 800ccd8:	fb02 5510 	mls	r5, r2, r0, r5
 800ccdc:	443d      	add	r5, r7
 800ccde:	1c59      	adds	r1, r3, #1
 800cce0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800cce4:	f806 5f01 	strb.w	r5, [r6, #1]!
 800cce8:	4605      	mov	r5, r0
 800ccea:	b968      	cbnz	r0, 800cd08 <__utoa+0x74>
 800ccec:	5460      	strb	r0, [r4, r1]
 800ccee:	4423      	add	r3, r4
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	1b19      	subs	r1, r3, r4
 800ccf4:	1b10      	subs	r0, r2, r4
 800ccf6:	4281      	cmp	r1, r0
 800ccf8:	dde7      	ble.n	800ccca <__utoa+0x36>
 800ccfa:	7811      	ldrb	r1, [r2, #0]
 800ccfc:	7818      	ldrb	r0, [r3, #0]
 800ccfe:	f802 0b01 	strb.w	r0, [r2], #1
 800cd02:	f803 1901 	strb.w	r1, [r3], #-1
 800cd06:	e7f4      	b.n	800ccf2 <__utoa+0x5e>
 800cd08:	460b      	mov	r3, r1
 800cd0a:	e7e2      	b.n	800ccd2 <__utoa+0x3e>
 800cd0c:	08012e6b 	.word	0x08012e6b

0800cd10 <abs>:
 800cd10:	2800      	cmp	r0, #0
 800cd12:	bfb8      	it	lt
 800cd14:	4240      	neglt	r0, r0
 800cd16:	4770      	bx	lr

0800cd18 <quorem>:
 800cd18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	6903      	ldr	r3, [r0, #16]
 800cd1e:	690c      	ldr	r4, [r1, #16]
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	4680      	mov	r8, r0
 800cd24:	f2c0 8082 	blt.w	800ce2c <quorem+0x114>
 800cd28:	3c01      	subs	r4, #1
 800cd2a:	f101 0714 	add.w	r7, r1, #20
 800cd2e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cd32:	f100 0614 	add.w	r6, r0, #20
 800cd36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cd3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cd3e:	eb06 030c 	add.w	r3, r6, ip
 800cd42:	3501      	adds	r5, #1
 800cd44:	eb07 090c 	add.w	r9, r7, ip
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	fbb0 f5f5 	udiv	r5, r0, r5
 800cd4e:	b395      	cbz	r5, 800cdb6 <quorem+0x9e>
 800cd50:	f04f 0a00 	mov.w	sl, #0
 800cd54:	4638      	mov	r0, r7
 800cd56:	46b6      	mov	lr, r6
 800cd58:	46d3      	mov	fp, sl
 800cd5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd5e:	b293      	uxth	r3, r2
 800cd60:	fb05 a303 	mla	r3, r5, r3, sl
 800cd64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	ebab 0303 	sub.w	r3, fp, r3
 800cd6e:	0c12      	lsrs	r2, r2, #16
 800cd70:	f8de b000 	ldr.w	fp, [lr]
 800cd74:	fb05 a202 	mla	r2, r5, r2, sl
 800cd78:	fa13 f38b 	uxtah	r3, r3, fp
 800cd7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cd80:	fa1f fb82 	uxth.w	fp, r2
 800cd84:	f8de 2000 	ldr.w	r2, [lr]
 800cd88:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cd8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd96:	4581      	cmp	r9, r0
 800cd98:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cd9c:	f84e 3b04 	str.w	r3, [lr], #4
 800cda0:	d2db      	bcs.n	800cd5a <quorem+0x42>
 800cda2:	f856 300c 	ldr.w	r3, [r6, ip]
 800cda6:	b933      	cbnz	r3, 800cdb6 <quorem+0x9e>
 800cda8:	9b01      	ldr	r3, [sp, #4]
 800cdaa:	3b04      	subs	r3, #4
 800cdac:	429e      	cmp	r6, r3
 800cdae:	461a      	mov	r2, r3
 800cdb0:	d330      	bcc.n	800ce14 <quorem+0xfc>
 800cdb2:	f8c8 4010 	str.w	r4, [r8, #16]
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f001 fbfc 	bl	800e5b4 <__mcmp>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	db25      	blt.n	800ce0c <quorem+0xf4>
 800cdc0:	3501      	adds	r5, #1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f04f 0c00 	mov.w	ip, #0
 800cdc8:	f857 2b04 	ldr.w	r2, [r7], #4
 800cdcc:	f8d0 e000 	ldr.w	lr, [r0]
 800cdd0:	b293      	uxth	r3, r2
 800cdd2:	ebac 0303 	sub.w	r3, ip, r3
 800cdd6:	0c12      	lsrs	r2, r2, #16
 800cdd8:	fa13 f38e 	uxtah	r3, r3, lr
 800cddc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cde0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdea:	45b9      	cmp	r9, r7
 800cdec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cdf0:	f840 3b04 	str.w	r3, [r0], #4
 800cdf4:	d2e8      	bcs.n	800cdc8 <quorem+0xb0>
 800cdf6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cdfa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cdfe:	b92a      	cbnz	r2, 800ce0c <quorem+0xf4>
 800ce00:	3b04      	subs	r3, #4
 800ce02:	429e      	cmp	r6, r3
 800ce04:	461a      	mov	r2, r3
 800ce06:	d30b      	bcc.n	800ce20 <quorem+0x108>
 800ce08:	f8c8 4010 	str.w	r4, [r8, #16]
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	b003      	add	sp, #12
 800ce10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce14:	6812      	ldr	r2, [r2, #0]
 800ce16:	3b04      	subs	r3, #4
 800ce18:	2a00      	cmp	r2, #0
 800ce1a:	d1ca      	bne.n	800cdb2 <quorem+0x9a>
 800ce1c:	3c01      	subs	r4, #1
 800ce1e:	e7c5      	b.n	800cdac <quorem+0x94>
 800ce20:	6812      	ldr	r2, [r2, #0]
 800ce22:	3b04      	subs	r3, #4
 800ce24:	2a00      	cmp	r2, #0
 800ce26:	d1ef      	bne.n	800ce08 <quorem+0xf0>
 800ce28:	3c01      	subs	r4, #1
 800ce2a:	e7ea      	b.n	800ce02 <quorem+0xea>
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e7ee      	b.n	800ce0e <quorem+0xf6>

0800ce30 <_dtoa_r>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	ec57 6b10 	vmov	r6, r7, d0
 800ce38:	b097      	sub	sp, #92	; 0x5c
 800ce3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce3c:	9106      	str	r1, [sp, #24]
 800ce3e:	4604      	mov	r4, r0
 800ce40:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce42:	9312      	str	r3, [sp, #72]	; 0x48
 800ce44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce48:	e9cd 6700 	strd	r6, r7, [sp]
 800ce4c:	b93d      	cbnz	r5, 800ce5e <_dtoa_r+0x2e>
 800ce4e:	2010      	movs	r0, #16
 800ce50:	f001 f93a 	bl	800e0c8 <malloc>
 800ce54:	6260      	str	r0, [r4, #36]	; 0x24
 800ce56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce5a:	6005      	str	r5, [r0, #0]
 800ce5c:	60c5      	str	r5, [r0, #12]
 800ce5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	b151      	cbz	r1, 800ce7a <_dtoa_r+0x4a>
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	604a      	str	r2, [r1, #4]
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4093      	lsls	r3, r2
 800ce6c:	608b      	str	r3, [r1, #8]
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f001 f980 	bl	800e174 <_Bfree>
 800ce74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce76:	2200      	movs	r2, #0
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	1e3b      	subs	r3, r7, #0
 800ce7c:	bfbb      	ittet	lt
 800ce7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce82:	9301      	strlt	r3, [sp, #4]
 800ce84:	2300      	movge	r3, #0
 800ce86:	2201      	movlt	r2, #1
 800ce88:	bfac      	ite	ge
 800ce8a:	f8c8 3000 	strge.w	r3, [r8]
 800ce8e:	f8c8 2000 	strlt.w	r2, [r8]
 800ce92:	4baf      	ldr	r3, [pc, #700]	; (800d150 <_dtoa_r+0x320>)
 800ce94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce98:	ea33 0308 	bics.w	r3, r3, r8
 800ce9c:	d114      	bne.n	800cec8 <_dtoa_r+0x98>
 800ce9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cea0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	b923      	cbnz	r3, 800ceb4 <_dtoa_r+0x84>
 800ceaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f000 8542 	beq.w	800d938 <_dtoa_r+0xb08>
 800ceb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d164 <_dtoa_r+0x334>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 8544 	beq.w	800d948 <_dtoa_r+0xb18>
 800cec0:	f10b 0303 	add.w	r3, fp, #3
 800cec4:	f000 bd3e 	b.w	800d944 <_dtoa_r+0xb14>
 800cec8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cecc:	2200      	movs	r2, #0
 800cece:	2300      	movs	r3, #0
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 fe22 	bl	8000b1c <__aeabi_dcmpeq>
 800ced8:	4681      	mov	r9, r0
 800ceda:	b168      	cbz	r0, 800cef8 <_dtoa_r+0xc8>
 800cedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cede:	2301      	movs	r3, #1
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 8524 	beq.w	800d932 <_dtoa_r+0xb02>
 800ceea:	4b9a      	ldr	r3, [pc, #616]	; (800d154 <_dtoa_r+0x324>)
 800ceec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ceee:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	f000 bd28 	b.w	800d948 <_dtoa_r+0xb18>
 800cef8:	aa14      	add	r2, sp, #80	; 0x50
 800cefa:	a915      	add	r1, sp, #84	; 0x54
 800cefc:	ec47 6b10 	vmov	d0, r6, r7
 800cf00:	4620      	mov	r0, r4
 800cf02:	f001 fc45 	bl	800e790 <__d2b>
 800cf06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cf0a:	9004      	str	r0, [sp, #16]
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	d07c      	beq.n	800d00a <_dtoa_r+0x1da>
 800cf10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cf18:	46b2      	mov	sl, r6
 800cf1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cf1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cf26:	2200      	movs	r2, #0
 800cf28:	4b8b      	ldr	r3, [pc, #556]	; (800d158 <_dtoa_r+0x328>)
 800cf2a:	4650      	mov	r0, sl
 800cf2c:	4659      	mov	r1, fp
 800cf2e:	f7f3 f9d5 	bl	80002dc <__aeabi_dsub>
 800cf32:	a381      	add	r3, pc, #516	; (adr r3, 800d138 <_dtoa_r+0x308>)
 800cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf38:	f7f3 fb88 	bl	800064c <__aeabi_dmul>
 800cf3c:	a380      	add	r3, pc, #512	; (adr r3, 800d140 <_dtoa_r+0x310>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7f3 f9cd 	bl	80002e0 <__adddf3>
 800cf46:	4606      	mov	r6, r0
 800cf48:	4628      	mov	r0, r5
 800cf4a:	460f      	mov	r7, r1
 800cf4c:	f7f3 fb14 	bl	8000578 <__aeabi_i2d>
 800cf50:	a37d      	add	r3, pc, #500	; (adr r3, 800d148 <_dtoa_r+0x318>)
 800cf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf56:	f7f3 fb79 	bl	800064c <__aeabi_dmul>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	f7f3 f9bd 	bl	80002e0 <__adddf3>
 800cf66:	4606      	mov	r6, r0
 800cf68:	460f      	mov	r7, r1
 800cf6a:	f7f3 fe1f 	bl	8000bac <__aeabi_d2iz>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4682      	mov	sl, r0
 800cf72:	2300      	movs	r3, #0
 800cf74:	4630      	mov	r0, r6
 800cf76:	4639      	mov	r1, r7
 800cf78:	f7f3 fdda 	bl	8000b30 <__aeabi_dcmplt>
 800cf7c:	b148      	cbz	r0, 800cf92 <_dtoa_r+0x162>
 800cf7e:	4650      	mov	r0, sl
 800cf80:	f7f3 fafa 	bl	8000578 <__aeabi_i2d>
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	f7f3 fdc8 	bl	8000b1c <__aeabi_dcmpeq>
 800cf8c:	b908      	cbnz	r0, 800cf92 <_dtoa_r+0x162>
 800cf8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf92:	f1ba 0f16 	cmp.w	sl, #22
 800cf96:	d859      	bhi.n	800d04c <_dtoa_r+0x21c>
 800cf98:	4970      	ldr	r1, [pc, #448]	; (800d15c <_dtoa_r+0x32c>)
 800cf9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cf9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa6:	f7f3 fde1 	bl	8000b6c <__aeabi_dcmpgt>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d050      	beq.n	800d050 <_dtoa_r+0x220>
 800cfae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfb8:	1b5d      	subs	r5, r3, r5
 800cfba:	f1b5 0801 	subs.w	r8, r5, #1
 800cfbe:	bf49      	itett	mi
 800cfc0:	f1c5 0301 	rsbmi	r3, r5, #1
 800cfc4:	2300      	movpl	r3, #0
 800cfc6:	9305      	strmi	r3, [sp, #20]
 800cfc8:	f04f 0800 	movmi.w	r8, #0
 800cfcc:	bf58      	it	pl
 800cfce:	9305      	strpl	r3, [sp, #20]
 800cfd0:	f1ba 0f00 	cmp.w	sl, #0
 800cfd4:	db3e      	blt.n	800d054 <_dtoa_r+0x224>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	44d0      	add	r8, sl
 800cfda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	9b06      	ldr	r3, [sp, #24]
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	f200 8090 	bhi.w	800d108 <_dtoa_r+0x2d8>
 800cfe8:	2b05      	cmp	r3, #5
 800cfea:	bfc4      	itt	gt
 800cfec:	3b04      	subgt	r3, #4
 800cfee:	9306      	strgt	r3, [sp, #24]
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	f1a3 0302 	sub.w	r3, r3, #2
 800cff6:	bfcc      	ite	gt
 800cff8:	2500      	movgt	r5, #0
 800cffa:	2501      	movle	r5, #1
 800cffc:	2b03      	cmp	r3, #3
 800cffe:	f200 808f 	bhi.w	800d120 <_dtoa_r+0x2f0>
 800d002:	e8df f003 	tbb	[pc, r3]
 800d006:	7f7d      	.short	0x7f7d
 800d008:	7131      	.short	0x7131
 800d00a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d00e:	441d      	add	r5, r3
 800d010:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d014:	2820      	cmp	r0, #32
 800d016:	dd13      	ble.n	800d040 <_dtoa_r+0x210>
 800d018:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d01c:	9b00      	ldr	r3, [sp, #0]
 800d01e:	fa08 f800 	lsl.w	r8, r8, r0
 800d022:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d026:	fa23 f000 	lsr.w	r0, r3, r0
 800d02a:	ea48 0000 	orr.w	r0, r8, r0
 800d02e:	f7f3 fa93 	bl	8000558 <__aeabi_ui2d>
 800d032:	2301      	movs	r3, #1
 800d034:	4682      	mov	sl, r0
 800d036:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d03a:	3d01      	subs	r5, #1
 800d03c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d03e:	e772      	b.n	800cf26 <_dtoa_r+0xf6>
 800d040:	9b00      	ldr	r3, [sp, #0]
 800d042:	f1c0 0020 	rsb	r0, r0, #32
 800d046:	fa03 f000 	lsl.w	r0, r3, r0
 800d04a:	e7f0      	b.n	800d02e <_dtoa_r+0x1fe>
 800d04c:	2301      	movs	r3, #1
 800d04e:	e7b1      	b.n	800cfb4 <_dtoa_r+0x184>
 800d050:	900f      	str	r0, [sp, #60]	; 0x3c
 800d052:	e7b0      	b.n	800cfb6 <_dtoa_r+0x186>
 800d054:	9b05      	ldr	r3, [sp, #20]
 800d056:	eba3 030a 	sub.w	r3, r3, sl
 800d05a:	9305      	str	r3, [sp, #20]
 800d05c:	f1ca 0300 	rsb	r3, sl, #0
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	2300      	movs	r3, #0
 800d064:	930e      	str	r3, [sp, #56]	; 0x38
 800d066:	e7bb      	b.n	800cfe0 <_dtoa_r+0x1b0>
 800d068:	2301      	movs	r3, #1
 800d06a:	930a      	str	r3, [sp, #40]	; 0x28
 800d06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	dd59      	ble.n	800d126 <_dtoa_r+0x2f6>
 800d072:	9302      	str	r3, [sp, #8]
 800d074:	4699      	mov	r9, r3
 800d076:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d078:	2200      	movs	r2, #0
 800d07a:	6072      	str	r2, [r6, #4]
 800d07c:	2204      	movs	r2, #4
 800d07e:	f102 0014 	add.w	r0, r2, #20
 800d082:	4298      	cmp	r0, r3
 800d084:	6871      	ldr	r1, [r6, #4]
 800d086:	d953      	bls.n	800d130 <_dtoa_r+0x300>
 800d088:	4620      	mov	r0, r4
 800d08a:	f001 f83f 	bl	800e10c <_Balloc>
 800d08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d090:	6030      	str	r0, [r6, #0]
 800d092:	f1b9 0f0e 	cmp.w	r9, #14
 800d096:	f8d3 b000 	ldr.w	fp, [r3]
 800d09a:	f200 80e6 	bhi.w	800d26a <_dtoa_r+0x43a>
 800d09e:	2d00      	cmp	r5, #0
 800d0a0:	f000 80e3 	beq.w	800d26a <_dtoa_r+0x43a>
 800d0a4:	ed9d 7b00 	vldr	d7, [sp]
 800d0a8:	f1ba 0f00 	cmp.w	sl, #0
 800d0ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d0b0:	dd74      	ble.n	800d19c <_dtoa_r+0x36c>
 800d0b2:	4a2a      	ldr	r2, [pc, #168]	; (800d15c <_dtoa_r+0x32c>)
 800d0b4:	f00a 030f 	and.w	r3, sl, #15
 800d0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0bc:	ed93 7b00 	vldr	d7, [r3]
 800d0c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d0c4:	06f0      	lsls	r0, r6, #27
 800d0c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d0ca:	d565      	bpl.n	800d198 <_dtoa_r+0x368>
 800d0cc:	4b24      	ldr	r3, [pc, #144]	; (800d160 <_dtoa_r+0x330>)
 800d0ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0d6:	f7f3 fbe3 	bl	80008a0 <__aeabi_ddiv>
 800d0da:	e9cd 0100 	strd	r0, r1, [sp]
 800d0de:	f006 060f 	and.w	r6, r6, #15
 800d0e2:	2503      	movs	r5, #3
 800d0e4:	4f1e      	ldr	r7, [pc, #120]	; (800d160 <_dtoa_r+0x330>)
 800d0e6:	e04c      	b.n	800d182 <_dtoa_r+0x352>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d0ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ee:	4453      	add	r3, sl
 800d0f0:	f103 0901 	add.w	r9, r3, #1
 800d0f4:	9302      	str	r3, [sp, #8]
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	bfb8      	it	lt
 800d0fc:	2301      	movlt	r3, #1
 800d0fe:	e7ba      	b.n	800d076 <_dtoa_r+0x246>
 800d100:	2300      	movs	r3, #0
 800d102:	e7b2      	b.n	800d06a <_dtoa_r+0x23a>
 800d104:	2300      	movs	r3, #0
 800d106:	e7f0      	b.n	800d0ea <_dtoa_r+0x2ba>
 800d108:	2501      	movs	r5, #1
 800d10a:	2300      	movs	r3, #0
 800d10c:	9306      	str	r3, [sp, #24]
 800d10e:	950a      	str	r5, [sp, #40]	; 0x28
 800d110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d114:	9302      	str	r3, [sp, #8]
 800d116:	4699      	mov	r9, r3
 800d118:	2200      	movs	r2, #0
 800d11a:	2312      	movs	r3, #18
 800d11c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d11e:	e7aa      	b.n	800d076 <_dtoa_r+0x246>
 800d120:	2301      	movs	r3, #1
 800d122:	930a      	str	r3, [sp, #40]	; 0x28
 800d124:	e7f4      	b.n	800d110 <_dtoa_r+0x2e0>
 800d126:	2301      	movs	r3, #1
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	4699      	mov	r9, r3
 800d12c:	461a      	mov	r2, r3
 800d12e:	e7f5      	b.n	800d11c <_dtoa_r+0x2ec>
 800d130:	3101      	adds	r1, #1
 800d132:	6071      	str	r1, [r6, #4]
 800d134:	0052      	lsls	r2, r2, #1
 800d136:	e7a2      	b.n	800d07e <_dtoa_r+0x24e>
 800d138:	636f4361 	.word	0x636f4361
 800d13c:	3fd287a7 	.word	0x3fd287a7
 800d140:	8b60c8b3 	.word	0x8b60c8b3
 800d144:	3fc68a28 	.word	0x3fc68a28
 800d148:	509f79fb 	.word	0x509f79fb
 800d14c:	3fd34413 	.word	0x3fd34413
 800d150:	7ff00000 	.word	0x7ff00000
 800d154:	0801312f 	.word	0x0801312f
 800d158:	3ff80000 	.word	0x3ff80000
 800d15c:	08012ed0 	.word	0x08012ed0
 800d160:	08012ea8 	.word	0x08012ea8
 800d164:	08012e99 	.word	0x08012e99
 800d168:	07f1      	lsls	r1, r6, #31
 800d16a:	d508      	bpl.n	800d17e <_dtoa_r+0x34e>
 800d16c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d174:	f7f3 fa6a 	bl	800064c <__aeabi_dmul>
 800d178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d17c:	3501      	adds	r5, #1
 800d17e:	1076      	asrs	r6, r6, #1
 800d180:	3708      	adds	r7, #8
 800d182:	2e00      	cmp	r6, #0
 800d184:	d1f0      	bne.n	800d168 <_dtoa_r+0x338>
 800d186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d18e:	f7f3 fb87 	bl	80008a0 <__aeabi_ddiv>
 800d192:	e9cd 0100 	strd	r0, r1, [sp]
 800d196:	e01a      	b.n	800d1ce <_dtoa_r+0x39e>
 800d198:	2502      	movs	r5, #2
 800d19a:	e7a3      	b.n	800d0e4 <_dtoa_r+0x2b4>
 800d19c:	f000 80a0 	beq.w	800d2e0 <_dtoa_r+0x4b0>
 800d1a0:	f1ca 0600 	rsb	r6, sl, #0
 800d1a4:	4b9f      	ldr	r3, [pc, #636]	; (800d424 <_dtoa_r+0x5f4>)
 800d1a6:	4fa0      	ldr	r7, [pc, #640]	; (800d428 <_dtoa_r+0x5f8>)
 800d1a8:	f006 020f 	and.w	r2, r6, #15
 800d1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1b8:	f7f3 fa48 	bl	800064c <__aeabi_dmul>
 800d1bc:	e9cd 0100 	strd	r0, r1, [sp]
 800d1c0:	1136      	asrs	r6, r6, #4
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2502      	movs	r5, #2
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	d17f      	bne.n	800d2ca <_dtoa_r+0x49a>
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1e1      	bne.n	800d192 <_dtoa_r+0x362>
 800d1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 8087 	beq.w	800d2e4 <_dtoa_r+0x4b4>
 800d1d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	4b93      	ldr	r3, [pc, #588]	; (800d42c <_dtoa_r+0x5fc>)
 800d1de:	4630      	mov	r0, r6
 800d1e0:	4639      	mov	r1, r7
 800d1e2:	f7f3 fca5 	bl	8000b30 <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d07c      	beq.n	800d2e4 <_dtoa_r+0x4b4>
 800d1ea:	f1b9 0f00 	cmp.w	r9, #0
 800d1ee:	d079      	beq.n	800d2e4 <_dtoa_r+0x4b4>
 800d1f0:	9b02      	ldr	r3, [sp, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	dd35      	ble.n	800d262 <_dtoa_r+0x432>
 800d1f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d1fa:	9308      	str	r3, [sp, #32]
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	2200      	movs	r2, #0
 800d200:	4b8b      	ldr	r3, [pc, #556]	; (800d430 <_dtoa_r+0x600>)
 800d202:	4630      	mov	r0, r6
 800d204:	f7f3 fa22 	bl	800064c <__aeabi_dmul>
 800d208:	e9cd 0100 	strd	r0, r1, [sp]
 800d20c:	9f02      	ldr	r7, [sp, #8]
 800d20e:	3501      	adds	r5, #1
 800d210:	4628      	mov	r0, r5
 800d212:	f7f3 f9b1 	bl	8000578 <__aeabi_i2d>
 800d216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d21a:	f7f3 fa17 	bl	800064c <__aeabi_dmul>
 800d21e:	2200      	movs	r2, #0
 800d220:	4b84      	ldr	r3, [pc, #528]	; (800d434 <_dtoa_r+0x604>)
 800d222:	f7f3 f85d 	bl	80002e0 <__adddf3>
 800d226:	4605      	mov	r5, r0
 800d228:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d22c:	2f00      	cmp	r7, #0
 800d22e:	d15d      	bne.n	800d2ec <_dtoa_r+0x4bc>
 800d230:	2200      	movs	r2, #0
 800d232:	4b81      	ldr	r3, [pc, #516]	; (800d438 <_dtoa_r+0x608>)
 800d234:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d238:	f7f3 f850 	bl	80002dc <__aeabi_dsub>
 800d23c:	462a      	mov	r2, r5
 800d23e:	4633      	mov	r3, r6
 800d240:	e9cd 0100 	strd	r0, r1, [sp]
 800d244:	f7f3 fc92 	bl	8000b6c <__aeabi_dcmpgt>
 800d248:	2800      	cmp	r0, #0
 800d24a:	f040 8288 	bne.w	800d75e <_dtoa_r+0x92e>
 800d24e:	462a      	mov	r2, r5
 800d250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d258:	f7f3 fc6a 	bl	8000b30 <__aeabi_dcmplt>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f040 827c 	bne.w	800d75a <_dtoa_r+0x92a>
 800d262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d266:	e9cd 2300 	strd	r2, r3, [sp]
 800d26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f2c0 8150 	blt.w	800d512 <_dtoa_r+0x6e2>
 800d272:	f1ba 0f0e 	cmp.w	sl, #14
 800d276:	f300 814c 	bgt.w	800d512 <_dtoa_r+0x6e2>
 800d27a:	4b6a      	ldr	r3, [pc, #424]	; (800d424 <_dtoa_r+0x5f4>)
 800d27c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d280:	ed93 7b00 	vldr	d7, [r3]
 800d284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d286:	2b00      	cmp	r3, #0
 800d288:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d28c:	f280 80d8 	bge.w	800d440 <_dtoa_r+0x610>
 800d290:	f1b9 0f00 	cmp.w	r9, #0
 800d294:	f300 80d4 	bgt.w	800d440 <_dtoa_r+0x610>
 800d298:	f040 825e 	bne.w	800d758 <_dtoa_r+0x928>
 800d29c:	2200      	movs	r2, #0
 800d29e:	4b66      	ldr	r3, [pc, #408]	; (800d438 <_dtoa_r+0x608>)
 800d2a0:	ec51 0b17 	vmov	r0, r1, d7
 800d2a4:	f7f3 f9d2 	bl	800064c <__aeabi_dmul>
 800d2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ac:	f7f3 fc54 	bl	8000b58 <__aeabi_dcmpge>
 800d2b0:	464f      	mov	r7, r9
 800d2b2:	464e      	mov	r6, r9
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	f040 8234 	bne.w	800d722 <_dtoa_r+0x8f2>
 800d2ba:	2331      	movs	r3, #49	; 0x31
 800d2bc:	f10b 0501 	add.w	r5, fp, #1
 800d2c0:	f88b 3000 	strb.w	r3, [fp]
 800d2c4:	f10a 0a01 	add.w	sl, sl, #1
 800d2c8:	e22f      	b.n	800d72a <_dtoa_r+0x8fa>
 800d2ca:	07f2      	lsls	r2, r6, #31
 800d2cc:	d505      	bpl.n	800d2da <_dtoa_r+0x4aa>
 800d2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2d2:	f7f3 f9bb 	bl	800064c <__aeabi_dmul>
 800d2d6:	3501      	adds	r5, #1
 800d2d8:	2301      	movs	r3, #1
 800d2da:	1076      	asrs	r6, r6, #1
 800d2dc:	3708      	adds	r7, #8
 800d2de:	e772      	b.n	800d1c6 <_dtoa_r+0x396>
 800d2e0:	2502      	movs	r5, #2
 800d2e2:	e774      	b.n	800d1ce <_dtoa_r+0x39e>
 800d2e4:	f8cd a020 	str.w	sl, [sp, #32]
 800d2e8:	464f      	mov	r7, r9
 800d2ea:	e791      	b.n	800d210 <_dtoa_r+0x3e0>
 800d2ec:	4b4d      	ldr	r3, [pc, #308]	; (800d424 <_dtoa_r+0x5f4>)
 800d2ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d047      	beq.n	800d38c <_dtoa_r+0x55c>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	2000      	movs	r0, #0
 800d302:	494e      	ldr	r1, [pc, #312]	; (800d43c <_dtoa_r+0x60c>)
 800d304:	f7f3 facc 	bl	80008a0 <__aeabi_ddiv>
 800d308:	462a      	mov	r2, r5
 800d30a:	4633      	mov	r3, r6
 800d30c:	f7f2 ffe6 	bl	80002dc <__aeabi_dsub>
 800d310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d314:	465d      	mov	r5, fp
 800d316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d31a:	f7f3 fc47 	bl	8000bac <__aeabi_d2iz>
 800d31e:	4606      	mov	r6, r0
 800d320:	f7f3 f92a 	bl	8000578 <__aeabi_i2d>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d32c:	f7f2 ffd6 	bl	80002dc <__aeabi_dsub>
 800d330:	3630      	adds	r6, #48	; 0x30
 800d332:	f805 6b01 	strb.w	r6, [r5], #1
 800d336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d33a:	e9cd 0100 	strd	r0, r1, [sp]
 800d33e:	f7f3 fbf7 	bl	8000b30 <__aeabi_dcmplt>
 800d342:	2800      	cmp	r0, #0
 800d344:	d163      	bne.n	800d40e <_dtoa_r+0x5de>
 800d346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d34a:	2000      	movs	r0, #0
 800d34c:	4937      	ldr	r1, [pc, #220]	; (800d42c <_dtoa_r+0x5fc>)
 800d34e:	f7f2 ffc5 	bl	80002dc <__aeabi_dsub>
 800d352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d356:	f7f3 fbeb 	bl	8000b30 <__aeabi_dcmplt>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f040 80b7 	bne.w	800d4ce <_dtoa_r+0x69e>
 800d360:	eba5 030b 	sub.w	r3, r5, fp
 800d364:	429f      	cmp	r7, r3
 800d366:	f77f af7c 	ble.w	800d262 <_dtoa_r+0x432>
 800d36a:	2200      	movs	r2, #0
 800d36c:	4b30      	ldr	r3, [pc, #192]	; (800d430 <_dtoa_r+0x600>)
 800d36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d372:	f7f3 f96b 	bl	800064c <__aeabi_dmul>
 800d376:	2200      	movs	r2, #0
 800d378:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d37c:	4b2c      	ldr	r3, [pc, #176]	; (800d430 <_dtoa_r+0x600>)
 800d37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d382:	f7f3 f963 	bl	800064c <__aeabi_dmul>
 800d386:	e9cd 0100 	strd	r0, r1, [sp]
 800d38a:	e7c4      	b.n	800d316 <_dtoa_r+0x4e6>
 800d38c:	462a      	mov	r2, r5
 800d38e:	4633      	mov	r3, r6
 800d390:	f7f3 f95c 	bl	800064c <__aeabi_dmul>
 800d394:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d398:	eb0b 0507 	add.w	r5, fp, r7
 800d39c:	465e      	mov	r6, fp
 800d39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3a2:	f7f3 fc03 	bl	8000bac <__aeabi_d2iz>
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	f7f3 f8e6 	bl	8000578 <__aeabi_i2d>
 800d3ac:	3730      	adds	r7, #48	; 0x30
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b6:	f7f2 ff91 	bl	80002dc <__aeabi_dsub>
 800d3ba:	f806 7b01 	strb.w	r7, [r6], #1
 800d3be:	42ae      	cmp	r6, r5
 800d3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800d3c4:	f04f 0200 	mov.w	r2, #0
 800d3c8:	d126      	bne.n	800d418 <_dtoa_r+0x5e8>
 800d3ca:	4b1c      	ldr	r3, [pc, #112]	; (800d43c <_dtoa_r+0x60c>)
 800d3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3d0:	f7f2 ff86 	bl	80002e0 <__adddf3>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3dc:	f7f3 fbc6 	bl	8000b6c <__aeabi_dcmpgt>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d174      	bne.n	800d4ce <_dtoa_r+0x69e>
 800d3e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	4914      	ldr	r1, [pc, #80]	; (800d43c <_dtoa_r+0x60c>)
 800d3ec:	f7f2 ff76 	bl	80002dc <__aeabi_dsub>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3f8:	f7f3 fb9a 	bl	8000b30 <__aeabi_dcmplt>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f43f af30 	beq.w	800d262 <_dtoa_r+0x432>
 800d402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d406:	2b30      	cmp	r3, #48	; 0x30
 800d408:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d40c:	d002      	beq.n	800d414 <_dtoa_r+0x5e4>
 800d40e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d412:	e04a      	b.n	800d4aa <_dtoa_r+0x67a>
 800d414:	4615      	mov	r5, r2
 800d416:	e7f4      	b.n	800d402 <_dtoa_r+0x5d2>
 800d418:	4b05      	ldr	r3, [pc, #20]	; (800d430 <_dtoa_r+0x600>)
 800d41a:	f7f3 f917 	bl	800064c <__aeabi_dmul>
 800d41e:	e9cd 0100 	strd	r0, r1, [sp]
 800d422:	e7bc      	b.n	800d39e <_dtoa_r+0x56e>
 800d424:	08012ed0 	.word	0x08012ed0
 800d428:	08012ea8 	.word	0x08012ea8
 800d42c:	3ff00000 	.word	0x3ff00000
 800d430:	40240000 	.word	0x40240000
 800d434:	401c0000 	.word	0x401c0000
 800d438:	40140000 	.word	0x40140000
 800d43c:	3fe00000 	.word	0x3fe00000
 800d440:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d444:	465d      	mov	r5, fp
 800d446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d44a:	4630      	mov	r0, r6
 800d44c:	4639      	mov	r1, r7
 800d44e:	f7f3 fa27 	bl	80008a0 <__aeabi_ddiv>
 800d452:	f7f3 fbab 	bl	8000bac <__aeabi_d2iz>
 800d456:	4680      	mov	r8, r0
 800d458:	f7f3 f88e 	bl	8000578 <__aeabi_i2d>
 800d45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d460:	f7f3 f8f4 	bl	800064c <__aeabi_dmul>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d470:	f7f2 ff34 	bl	80002dc <__aeabi_dsub>
 800d474:	f805 6b01 	strb.w	r6, [r5], #1
 800d478:	eba5 060b 	sub.w	r6, r5, fp
 800d47c:	45b1      	cmp	r9, r6
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	d139      	bne.n	800d4f8 <_dtoa_r+0x6c8>
 800d484:	f7f2 ff2c 	bl	80002e0 <__adddf3>
 800d488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d48c:	4606      	mov	r6, r0
 800d48e:	460f      	mov	r7, r1
 800d490:	f7f3 fb6c 	bl	8000b6c <__aeabi_dcmpgt>
 800d494:	b9c8      	cbnz	r0, 800d4ca <_dtoa_r+0x69a>
 800d496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d49a:	4630      	mov	r0, r6
 800d49c:	4639      	mov	r1, r7
 800d49e:	f7f3 fb3d 	bl	8000b1c <__aeabi_dcmpeq>
 800d4a2:	b110      	cbz	r0, 800d4aa <_dtoa_r+0x67a>
 800d4a4:	f018 0f01 	tst.w	r8, #1
 800d4a8:	d10f      	bne.n	800d4ca <_dtoa_r+0x69a>
 800d4aa:	9904      	ldr	r1, [sp, #16]
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 fe61 	bl	800e174 <_Bfree>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4b6:	702b      	strb	r3, [r5, #0]
 800d4b8:	f10a 0301 	add.w	r3, sl, #1
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 8241 	beq.w	800d948 <_dtoa_r+0xb18>
 800d4c6:	601d      	str	r5, [r3, #0]
 800d4c8:	e23e      	b.n	800d948 <_dtoa_r+0xb18>
 800d4ca:	f8cd a020 	str.w	sl, [sp, #32]
 800d4ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d4d2:	2a39      	cmp	r2, #57	; 0x39
 800d4d4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d4d8:	d108      	bne.n	800d4ec <_dtoa_r+0x6bc>
 800d4da:	459b      	cmp	fp, r3
 800d4dc:	d10a      	bne.n	800d4f4 <_dtoa_r+0x6c4>
 800d4de:	9b08      	ldr	r3, [sp, #32]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	9308      	str	r3, [sp, #32]
 800d4e4:	2330      	movs	r3, #48	; 0x30
 800d4e6:	f88b 3000 	strb.w	r3, [fp]
 800d4ea:	465b      	mov	r3, fp
 800d4ec:	781a      	ldrb	r2, [r3, #0]
 800d4ee:	3201      	adds	r2, #1
 800d4f0:	701a      	strb	r2, [r3, #0]
 800d4f2:	e78c      	b.n	800d40e <_dtoa_r+0x5de>
 800d4f4:	461d      	mov	r5, r3
 800d4f6:	e7ea      	b.n	800d4ce <_dtoa_r+0x69e>
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	4b9b      	ldr	r3, [pc, #620]	; (800d768 <_dtoa_r+0x938>)
 800d4fc:	f7f3 f8a6 	bl	800064c <__aeabi_dmul>
 800d500:	2200      	movs	r2, #0
 800d502:	2300      	movs	r3, #0
 800d504:	4606      	mov	r6, r0
 800d506:	460f      	mov	r7, r1
 800d508:	f7f3 fb08 	bl	8000b1c <__aeabi_dcmpeq>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d09a      	beq.n	800d446 <_dtoa_r+0x616>
 800d510:	e7cb      	b.n	800d4aa <_dtoa_r+0x67a>
 800d512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d514:	2a00      	cmp	r2, #0
 800d516:	f000 808b 	beq.w	800d630 <_dtoa_r+0x800>
 800d51a:	9a06      	ldr	r2, [sp, #24]
 800d51c:	2a01      	cmp	r2, #1
 800d51e:	dc6e      	bgt.n	800d5fe <_dtoa_r+0x7ce>
 800d520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d522:	2a00      	cmp	r2, #0
 800d524:	d067      	beq.n	800d5f6 <_dtoa_r+0x7c6>
 800d526:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d52a:	9f07      	ldr	r7, [sp, #28]
 800d52c:	9d05      	ldr	r5, [sp, #20]
 800d52e:	9a05      	ldr	r2, [sp, #20]
 800d530:	2101      	movs	r1, #1
 800d532:	441a      	add	r2, r3
 800d534:	4620      	mov	r0, r4
 800d536:	9205      	str	r2, [sp, #20]
 800d538:	4498      	add	r8, r3
 800d53a:	f000 fef9 	bl	800e330 <__i2b>
 800d53e:	4606      	mov	r6, r0
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd0c      	ble.n	800d55e <_dtoa_r+0x72e>
 800d544:	f1b8 0f00 	cmp.w	r8, #0
 800d548:	dd09      	ble.n	800d55e <_dtoa_r+0x72e>
 800d54a:	4545      	cmp	r5, r8
 800d54c:	9a05      	ldr	r2, [sp, #20]
 800d54e:	462b      	mov	r3, r5
 800d550:	bfa8      	it	ge
 800d552:	4643      	movge	r3, r8
 800d554:	1ad2      	subs	r2, r2, r3
 800d556:	9205      	str	r2, [sp, #20]
 800d558:	1aed      	subs	r5, r5, r3
 800d55a:	eba8 0803 	sub.w	r8, r8, r3
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	b1eb      	cbz	r3, 800d59e <_dtoa_r+0x76e>
 800d562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d564:	2b00      	cmp	r3, #0
 800d566:	d067      	beq.n	800d638 <_dtoa_r+0x808>
 800d568:	b18f      	cbz	r7, 800d58e <_dtoa_r+0x75e>
 800d56a:	4631      	mov	r1, r6
 800d56c:	463a      	mov	r2, r7
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 ff7e 	bl	800e470 <__pow5mult>
 800d574:	9a04      	ldr	r2, [sp, #16]
 800d576:	4601      	mov	r1, r0
 800d578:	4606      	mov	r6, r0
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 fee1 	bl	800e342 <__multiply>
 800d580:	9904      	ldr	r1, [sp, #16]
 800d582:	9008      	str	r0, [sp, #32]
 800d584:	4620      	mov	r0, r4
 800d586:	f000 fdf5 	bl	800e174 <_Bfree>
 800d58a:	9b08      	ldr	r3, [sp, #32]
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	9b07      	ldr	r3, [sp, #28]
 800d590:	1bda      	subs	r2, r3, r7
 800d592:	d004      	beq.n	800d59e <_dtoa_r+0x76e>
 800d594:	9904      	ldr	r1, [sp, #16]
 800d596:	4620      	mov	r0, r4
 800d598:	f000 ff6a 	bl	800e470 <__pow5mult>
 800d59c:	9004      	str	r0, [sp, #16]
 800d59e:	2101      	movs	r1, #1
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 fec5 	bl	800e330 <__i2b>
 800d5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a8:	4607      	mov	r7, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 81d0 	beq.w	800d950 <_dtoa_r+0xb20>
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 ff5b 	bl	800e470 <__pow5mult>
 800d5ba:	9b06      	ldr	r3, [sp, #24]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	4607      	mov	r7, r0
 800d5c0:	dc40      	bgt.n	800d644 <_dtoa_r+0x814>
 800d5c2:	9b00      	ldr	r3, [sp, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d139      	bne.n	800d63c <_dtoa_r+0x80c>
 800d5c8:	9b01      	ldr	r3, [sp, #4]
 800d5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d136      	bne.n	800d640 <_dtoa_r+0x810>
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5d8:	0d1b      	lsrs	r3, r3, #20
 800d5da:	051b      	lsls	r3, r3, #20
 800d5dc:	b12b      	cbz	r3, 800d5ea <_dtoa_r+0x7ba>
 800d5de:	9b05      	ldr	r3, [sp, #20]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	f108 0801 	add.w	r8, r8, #1
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	9307      	str	r3, [sp, #28]
 800d5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d12a      	bne.n	800d648 <_dtoa_r+0x818>
 800d5f2:	2001      	movs	r0, #1
 800d5f4:	e030      	b.n	800d658 <_dtoa_r+0x828>
 800d5f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5fc:	e795      	b.n	800d52a <_dtoa_r+0x6fa>
 800d5fe:	9b07      	ldr	r3, [sp, #28]
 800d600:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d604:	42bb      	cmp	r3, r7
 800d606:	bfbf      	itttt	lt
 800d608:	9b07      	ldrlt	r3, [sp, #28]
 800d60a:	9707      	strlt	r7, [sp, #28]
 800d60c:	1afa      	sublt	r2, r7, r3
 800d60e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d610:	bfbb      	ittet	lt
 800d612:	189b      	addlt	r3, r3, r2
 800d614:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d616:	1bdf      	subge	r7, r3, r7
 800d618:	2700      	movlt	r7, #0
 800d61a:	f1b9 0f00 	cmp.w	r9, #0
 800d61e:	bfb5      	itete	lt
 800d620:	9b05      	ldrlt	r3, [sp, #20]
 800d622:	9d05      	ldrge	r5, [sp, #20]
 800d624:	eba3 0509 	sublt.w	r5, r3, r9
 800d628:	464b      	movge	r3, r9
 800d62a:	bfb8      	it	lt
 800d62c:	2300      	movlt	r3, #0
 800d62e:	e77e      	b.n	800d52e <_dtoa_r+0x6fe>
 800d630:	9f07      	ldr	r7, [sp, #28]
 800d632:	9d05      	ldr	r5, [sp, #20]
 800d634:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d636:	e783      	b.n	800d540 <_dtoa_r+0x710>
 800d638:	9a07      	ldr	r2, [sp, #28]
 800d63a:	e7ab      	b.n	800d594 <_dtoa_r+0x764>
 800d63c:	2300      	movs	r3, #0
 800d63e:	e7d4      	b.n	800d5ea <_dtoa_r+0x7ba>
 800d640:	9b00      	ldr	r3, [sp, #0]
 800d642:	e7d2      	b.n	800d5ea <_dtoa_r+0x7ba>
 800d644:	2300      	movs	r3, #0
 800d646:	9307      	str	r3, [sp, #28]
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d64e:	6918      	ldr	r0, [r3, #16]
 800d650:	f000 fe20 	bl	800e294 <__hi0bits>
 800d654:	f1c0 0020 	rsb	r0, r0, #32
 800d658:	4440      	add	r0, r8
 800d65a:	f010 001f 	ands.w	r0, r0, #31
 800d65e:	d047      	beq.n	800d6f0 <_dtoa_r+0x8c0>
 800d660:	f1c0 0320 	rsb	r3, r0, #32
 800d664:	2b04      	cmp	r3, #4
 800d666:	dd3b      	ble.n	800d6e0 <_dtoa_r+0x8b0>
 800d668:	9b05      	ldr	r3, [sp, #20]
 800d66a:	f1c0 001c 	rsb	r0, r0, #28
 800d66e:	4403      	add	r3, r0
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	4405      	add	r5, r0
 800d674:	4480      	add	r8, r0
 800d676:	9b05      	ldr	r3, [sp, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dd05      	ble.n	800d688 <_dtoa_r+0x858>
 800d67c:	461a      	mov	r2, r3
 800d67e:	9904      	ldr	r1, [sp, #16]
 800d680:	4620      	mov	r0, r4
 800d682:	f000 ff43 	bl	800e50c <__lshift>
 800d686:	9004      	str	r0, [sp, #16]
 800d688:	f1b8 0f00 	cmp.w	r8, #0
 800d68c:	dd05      	ble.n	800d69a <_dtoa_r+0x86a>
 800d68e:	4639      	mov	r1, r7
 800d690:	4642      	mov	r2, r8
 800d692:	4620      	mov	r0, r4
 800d694:	f000 ff3a 	bl	800e50c <__lshift>
 800d698:	4607      	mov	r7, r0
 800d69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d69c:	b353      	cbz	r3, 800d6f4 <_dtoa_r+0x8c4>
 800d69e:	4639      	mov	r1, r7
 800d6a0:	9804      	ldr	r0, [sp, #16]
 800d6a2:	f000 ff87 	bl	800e5b4 <__mcmp>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	da24      	bge.n	800d6f4 <_dtoa_r+0x8c4>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	220a      	movs	r2, #10
 800d6ae:	9904      	ldr	r1, [sp, #16]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 fd76 	bl	800e1a2 <__multadd>
 800d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b8:	9004      	str	r0, [sp, #16]
 800d6ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 814d 	beq.w	800d95e <_dtoa_r+0xb2e>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	220a      	movs	r2, #10
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f000 fd69 	bl	800e1a2 <__multadd>
 800d6d0:	9b02      	ldr	r3, [sp, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	dc4f      	bgt.n	800d778 <_dtoa_r+0x948>
 800d6d8:	9b06      	ldr	r3, [sp, #24]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	dd4c      	ble.n	800d778 <_dtoa_r+0x948>
 800d6de:	e011      	b.n	800d704 <_dtoa_r+0x8d4>
 800d6e0:	d0c9      	beq.n	800d676 <_dtoa_r+0x846>
 800d6e2:	9a05      	ldr	r2, [sp, #20]
 800d6e4:	331c      	adds	r3, #28
 800d6e6:	441a      	add	r2, r3
 800d6e8:	9205      	str	r2, [sp, #20]
 800d6ea:	441d      	add	r5, r3
 800d6ec:	4498      	add	r8, r3
 800d6ee:	e7c2      	b.n	800d676 <_dtoa_r+0x846>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	e7f6      	b.n	800d6e2 <_dtoa_r+0x8b2>
 800d6f4:	f1b9 0f00 	cmp.w	r9, #0
 800d6f8:	dc38      	bgt.n	800d76c <_dtoa_r+0x93c>
 800d6fa:	9b06      	ldr	r3, [sp, #24]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	dd35      	ble.n	800d76c <_dtoa_r+0x93c>
 800d700:	f8cd 9008 	str.w	r9, [sp, #8]
 800d704:	9b02      	ldr	r3, [sp, #8]
 800d706:	b963      	cbnz	r3, 800d722 <_dtoa_r+0x8f2>
 800d708:	4639      	mov	r1, r7
 800d70a:	2205      	movs	r2, #5
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fd48 	bl	800e1a2 <__multadd>
 800d712:	4601      	mov	r1, r0
 800d714:	4607      	mov	r7, r0
 800d716:	9804      	ldr	r0, [sp, #16]
 800d718:	f000 ff4c 	bl	800e5b4 <__mcmp>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	f73f adcc 	bgt.w	800d2ba <_dtoa_r+0x48a>
 800d722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d724:	465d      	mov	r5, fp
 800d726:	ea6f 0a03 	mvn.w	sl, r3
 800d72a:	f04f 0900 	mov.w	r9, #0
 800d72e:	4639      	mov	r1, r7
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fd1f 	bl	800e174 <_Bfree>
 800d736:	2e00      	cmp	r6, #0
 800d738:	f43f aeb7 	beq.w	800d4aa <_dtoa_r+0x67a>
 800d73c:	f1b9 0f00 	cmp.w	r9, #0
 800d740:	d005      	beq.n	800d74e <_dtoa_r+0x91e>
 800d742:	45b1      	cmp	r9, r6
 800d744:	d003      	beq.n	800d74e <_dtoa_r+0x91e>
 800d746:	4649      	mov	r1, r9
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 fd13 	bl	800e174 <_Bfree>
 800d74e:	4631      	mov	r1, r6
 800d750:	4620      	mov	r0, r4
 800d752:	f000 fd0f 	bl	800e174 <_Bfree>
 800d756:	e6a8      	b.n	800d4aa <_dtoa_r+0x67a>
 800d758:	2700      	movs	r7, #0
 800d75a:	463e      	mov	r6, r7
 800d75c:	e7e1      	b.n	800d722 <_dtoa_r+0x8f2>
 800d75e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d762:	463e      	mov	r6, r7
 800d764:	e5a9      	b.n	800d2ba <_dtoa_r+0x48a>
 800d766:	bf00      	nop
 800d768:	40240000 	.word	0x40240000
 800d76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d76e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	f000 80fa 	beq.w	800d96c <_dtoa_r+0xb3c>
 800d778:	2d00      	cmp	r5, #0
 800d77a:	dd05      	ble.n	800d788 <_dtoa_r+0x958>
 800d77c:	4631      	mov	r1, r6
 800d77e:	462a      	mov	r2, r5
 800d780:	4620      	mov	r0, r4
 800d782:	f000 fec3 	bl	800e50c <__lshift>
 800d786:	4606      	mov	r6, r0
 800d788:	9b07      	ldr	r3, [sp, #28]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d04c      	beq.n	800d828 <_dtoa_r+0x9f8>
 800d78e:	6871      	ldr	r1, [r6, #4]
 800d790:	4620      	mov	r0, r4
 800d792:	f000 fcbb 	bl	800e10c <_Balloc>
 800d796:	6932      	ldr	r2, [r6, #16]
 800d798:	3202      	adds	r2, #2
 800d79a:	4605      	mov	r5, r0
 800d79c:	0092      	lsls	r2, r2, #2
 800d79e:	f106 010c 	add.w	r1, r6, #12
 800d7a2:	300c      	adds	r0, #12
 800d7a4:	f7fc fd7c 	bl	800a2a0 <memcpy>
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 fead 	bl	800e50c <__lshift>
 800d7b2:	9b00      	ldr	r3, [sp, #0]
 800d7b4:	f8cd b014 	str.w	fp, [sp, #20]
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	46b1      	mov	r9, r6
 800d7be:	9307      	str	r3, [sp, #28]
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	9804      	ldr	r0, [sp, #16]
 800d7c6:	f7ff faa7 	bl	800cd18 <quorem>
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d7d2:	9804      	ldr	r0, [sp, #16]
 800d7d4:	f000 feee 	bl	800e5b4 <__mcmp>
 800d7d8:	4632      	mov	r2, r6
 800d7da:	9000      	str	r0, [sp, #0]
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 ff02 	bl	800e5e8 <__mdiff>
 800d7e4:	68c3      	ldr	r3, [r0, #12]
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	bb03      	cbnz	r3, 800d82c <_dtoa_r+0x9fc>
 800d7ea:	4601      	mov	r1, r0
 800d7ec:	9008      	str	r0, [sp, #32]
 800d7ee:	9804      	ldr	r0, [sp, #16]
 800d7f0:	f000 fee0 	bl	800e5b4 <__mcmp>
 800d7f4:	9a08      	ldr	r2, [sp, #32]
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	9308      	str	r3, [sp, #32]
 800d7fe:	f000 fcb9 	bl	800e174 <_Bfree>
 800d802:	9b08      	ldr	r3, [sp, #32]
 800d804:	b9a3      	cbnz	r3, 800d830 <_dtoa_r+0xa00>
 800d806:	9a06      	ldr	r2, [sp, #24]
 800d808:	b992      	cbnz	r2, 800d830 <_dtoa_r+0xa00>
 800d80a:	9a07      	ldr	r2, [sp, #28]
 800d80c:	b982      	cbnz	r2, 800d830 <_dtoa_r+0xa00>
 800d80e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d812:	d029      	beq.n	800d868 <_dtoa_r+0xa38>
 800d814:	9b00      	ldr	r3, [sp, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	dd01      	ble.n	800d81e <_dtoa_r+0x9ee>
 800d81a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d81e:	9b05      	ldr	r3, [sp, #20]
 800d820:	1c5d      	adds	r5, r3, #1
 800d822:	f883 8000 	strb.w	r8, [r3]
 800d826:	e782      	b.n	800d72e <_dtoa_r+0x8fe>
 800d828:	4630      	mov	r0, r6
 800d82a:	e7c2      	b.n	800d7b2 <_dtoa_r+0x982>
 800d82c:	2301      	movs	r3, #1
 800d82e:	e7e3      	b.n	800d7f8 <_dtoa_r+0x9c8>
 800d830:	9a00      	ldr	r2, [sp, #0]
 800d832:	2a00      	cmp	r2, #0
 800d834:	db04      	blt.n	800d840 <_dtoa_r+0xa10>
 800d836:	d125      	bne.n	800d884 <_dtoa_r+0xa54>
 800d838:	9a06      	ldr	r2, [sp, #24]
 800d83a:	bb1a      	cbnz	r2, 800d884 <_dtoa_r+0xa54>
 800d83c:	9a07      	ldr	r2, [sp, #28]
 800d83e:	bb0a      	cbnz	r2, 800d884 <_dtoa_r+0xa54>
 800d840:	2b00      	cmp	r3, #0
 800d842:	ddec      	ble.n	800d81e <_dtoa_r+0x9ee>
 800d844:	2201      	movs	r2, #1
 800d846:	9904      	ldr	r1, [sp, #16]
 800d848:	4620      	mov	r0, r4
 800d84a:	f000 fe5f 	bl	800e50c <__lshift>
 800d84e:	4639      	mov	r1, r7
 800d850:	9004      	str	r0, [sp, #16]
 800d852:	f000 feaf 	bl	800e5b4 <__mcmp>
 800d856:	2800      	cmp	r0, #0
 800d858:	dc03      	bgt.n	800d862 <_dtoa_r+0xa32>
 800d85a:	d1e0      	bne.n	800d81e <_dtoa_r+0x9ee>
 800d85c:	f018 0f01 	tst.w	r8, #1
 800d860:	d0dd      	beq.n	800d81e <_dtoa_r+0x9ee>
 800d862:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d866:	d1d8      	bne.n	800d81a <_dtoa_r+0x9ea>
 800d868:	9b05      	ldr	r3, [sp, #20]
 800d86a:	9a05      	ldr	r2, [sp, #20]
 800d86c:	1c5d      	adds	r5, r3, #1
 800d86e:	2339      	movs	r3, #57	; 0x39
 800d870:	7013      	strb	r3, [r2, #0]
 800d872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d876:	2b39      	cmp	r3, #57	; 0x39
 800d878:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d87c:	d04f      	beq.n	800d91e <_dtoa_r+0xaee>
 800d87e:	3301      	adds	r3, #1
 800d880:	7013      	strb	r3, [r2, #0]
 800d882:	e754      	b.n	800d72e <_dtoa_r+0x8fe>
 800d884:	9a05      	ldr	r2, [sp, #20]
 800d886:	2b00      	cmp	r3, #0
 800d888:	f102 0501 	add.w	r5, r2, #1
 800d88c:	dd06      	ble.n	800d89c <_dtoa_r+0xa6c>
 800d88e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d892:	d0e9      	beq.n	800d868 <_dtoa_r+0xa38>
 800d894:	f108 0801 	add.w	r8, r8, #1
 800d898:	9b05      	ldr	r3, [sp, #20]
 800d89a:	e7c2      	b.n	800d822 <_dtoa_r+0x9f2>
 800d89c:	9a02      	ldr	r2, [sp, #8]
 800d89e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d8a2:	eba5 030b 	sub.w	r3, r5, fp
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d021      	beq.n	800d8ee <_dtoa_r+0xabe>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	9904      	ldr	r1, [sp, #16]
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 fc76 	bl	800e1a2 <__multadd>
 800d8b6:	45b1      	cmp	r9, r6
 800d8b8:	9004      	str	r0, [sp, #16]
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	f04f 020a 	mov.w	r2, #10
 800d8c2:	4649      	mov	r1, r9
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	d105      	bne.n	800d8d4 <_dtoa_r+0xaa4>
 800d8c8:	f000 fc6b 	bl	800e1a2 <__multadd>
 800d8cc:	4681      	mov	r9, r0
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	9505      	str	r5, [sp, #20]
 800d8d2:	e776      	b.n	800d7c2 <_dtoa_r+0x992>
 800d8d4:	f000 fc65 	bl	800e1a2 <__multadd>
 800d8d8:	4631      	mov	r1, r6
 800d8da:	4681      	mov	r9, r0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	220a      	movs	r2, #10
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fc5e 	bl	800e1a2 <__multadd>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	e7f2      	b.n	800d8d0 <_dtoa_r+0xaa0>
 800d8ea:	f04f 0900 	mov.w	r9, #0
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	9904      	ldr	r1, [sp, #16]
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fe0a 	bl	800e50c <__lshift>
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	9004      	str	r0, [sp, #16]
 800d8fc:	f000 fe5a 	bl	800e5b4 <__mcmp>
 800d900:	2800      	cmp	r0, #0
 800d902:	dcb6      	bgt.n	800d872 <_dtoa_r+0xa42>
 800d904:	d102      	bne.n	800d90c <_dtoa_r+0xadc>
 800d906:	f018 0f01 	tst.w	r8, #1
 800d90a:	d1b2      	bne.n	800d872 <_dtoa_r+0xa42>
 800d90c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d910:	2b30      	cmp	r3, #48	; 0x30
 800d912:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d916:	f47f af0a 	bne.w	800d72e <_dtoa_r+0x8fe>
 800d91a:	4615      	mov	r5, r2
 800d91c:	e7f6      	b.n	800d90c <_dtoa_r+0xadc>
 800d91e:	4593      	cmp	fp, r2
 800d920:	d105      	bne.n	800d92e <_dtoa_r+0xafe>
 800d922:	2331      	movs	r3, #49	; 0x31
 800d924:	f10a 0a01 	add.w	sl, sl, #1
 800d928:	f88b 3000 	strb.w	r3, [fp]
 800d92c:	e6ff      	b.n	800d72e <_dtoa_r+0x8fe>
 800d92e:	4615      	mov	r5, r2
 800d930:	e79f      	b.n	800d872 <_dtoa_r+0xa42>
 800d932:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d998 <_dtoa_r+0xb68>
 800d936:	e007      	b.n	800d948 <_dtoa_r+0xb18>
 800d938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d93a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d99c <_dtoa_r+0xb6c>
 800d93e:	b11b      	cbz	r3, 800d948 <_dtoa_r+0xb18>
 800d940:	f10b 0308 	add.w	r3, fp, #8
 800d944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	4658      	mov	r0, fp
 800d94a:	b017      	add	sp, #92	; 0x5c
 800d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d950:	9b06      	ldr	r3, [sp, #24]
 800d952:	2b01      	cmp	r3, #1
 800d954:	f77f ae35 	ble.w	800d5c2 <_dtoa_r+0x792>
 800d958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d95a:	9307      	str	r3, [sp, #28]
 800d95c:	e649      	b.n	800d5f2 <_dtoa_r+0x7c2>
 800d95e:	9b02      	ldr	r3, [sp, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	dc03      	bgt.n	800d96c <_dtoa_r+0xb3c>
 800d964:	9b06      	ldr	r3, [sp, #24]
 800d966:	2b02      	cmp	r3, #2
 800d968:	f73f aecc 	bgt.w	800d704 <_dtoa_r+0x8d4>
 800d96c:	465d      	mov	r5, fp
 800d96e:	4639      	mov	r1, r7
 800d970:	9804      	ldr	r0, [sp, #16]
 800d972:	f7ff f9d1 	bl	800cd18 <quorem>
 800d976:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d97a:	f805 8b01 	strb.w	r8, [r5], #1
 800d97e:	9a02      	ldr	r2, [sp, #8]
 800d980:	eba5 030b 	sub.w	r3, r5, fp
 800d984:	429a      	cmp	r2, r3
 800d986:	ddb0      	ble.n	800d8ea <_dtoa_r+0xaba>
 800d988:	2300      	movs	r3, #0
 800d98a:	220a      	movs	r2, #10
 800d98c:	9904      	ldr	r1, [sp, #16]
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 fc07 	bl	800e1a2 <__multadd>
 800d994:	9004      	str	r0, [sp, #16]
 800d996:	e7ea      	b.n	800d96e <_dtoa_r+0xb3e>
 800d998:	0801312e 	.word	0x0801312e
 800d99c:	08012e90 	.word	0x08012e90

0800d9a0 <rshift>:
 800d9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a2:	6906      	ldr	r6, [r0, #16]
 800d9a4:	114b      	asrs	r3, r1, #5
 800d9a6:	429e      	cmp	r6, r3
 800d9a8:	f100 0414 	add.w	r4, r0, #20
 800d9ac:	dd30      	ble.n	800da10 <rshift+0x70>
 800d9ae:	f011 011f 	ands.w	r1, r1, #31
 800d9b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d9b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d9ba:	d108      	bne.n	800d9ce <rshift+0x2e>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	42b2      	cmp	r2, r6
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	d211      	bcs.n	800d9e8 <rshift+0x48>
 800d9c4:	f852 3b04 	ldr.w	r3, [r2], #4
 800d9c8:	f841 3b04 	str.w	r3, [r1], #4
 800d9cc:	e7f7      	b.n	800d9be <rshift+0x1e>
 800d9ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d9d2:	f1c1 0c20 	rsb	ip, r1, #32
 800d9d6:	40cd      	lsrs	r5, r1
 800d9d8:	3204      	adds	r2, #4
 800d9da:	4623      	mov	r3, r4
 800d9dc:	42b2      	cmp	r2, r6
 800d9de:	4617      	mov	r7, r2
 800d9e0:	d30c      	bcc.n	800d9fc <rshift+0x5c>
 800d9e2:	601d      	str	r5, [r3, #0]
 800d9e4:	b105      	cbz	r5, 800d9e8 <rshift+0x48>
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	1b1a      	subs	r2, r3, r4
 800d9ea:	42a3      	cmp	r3, r4
 800d9ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d9f0:	bf08      	it	eq
 800d9f2:	2300      	moveq	r3, #0
 800d9f4:	6102      	str	r2, [r0, #16]
 800d9f6:	bf08      	it	eq
 800d9f8:	6143      	streq	r3, [r0, #20]
 800d9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9fc:	683f      	ldr	r7, [r7, #0]
 800d9fe:	fa07 f70c 	lsl.w	r7, r7, ip
 800da02:	433d      	orrs	r5, r7
 800da04:	f843 5b04 	str.w	r5, [r3], #4
 800da08:	f852 5b04 	ldr.w	r5, [r2], #4
 800da0c:	40cd      	lsrs	r5, r1
 800da0e:	e7e5      	b.n	800d9dc <rshift+0x3c>
 800da10:	4623      	mov	r3, r4
 800da12:	e7e9      	b.n	800d9e8 <rshift+0x48>

0800da14 <__hexdig_fun>:
 800da14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800da18:	2b09      	cmp	r3, #9
 800da1a:	d802      	bhi.n	800da22 <__hexdig_fun+0xe>
 800da1c:	3820      	subs	r0, #32
 800da1e:	b2c0      	uxtb	r0, r0
 800da20:	4770      	bx	lr
 800da22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800da26:	2b05      	cmp	r3, #5
 800da28:	d801      	bhi.n	800da2e <__hexdig_fun+0x1a>
 800da2a:	3847      	subs	r0, #71	; 0x47
 800da2c:	e7f7      	b.n	800da1e <__hexdig_fun+0xa>
 800da2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800da32:	2b05      	cmp	r3, #5
 800da34:	d801      	bhi.n	800da3a <__hexdig_fun+0x26>
 800da36:	3827      	subs	r0, #39	; 0x27
 800da38:	e7f1      	b.n	800da1e <__hexdig_fun+0xa>
 800da3a:	2000      	movs	r0, #0
 800da3c:	4770      	bx	lr

0800da3e <__gethex>:
 800da3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da42:	b08b      	sub	sp, #44	; 0x2c
 800da44:	468a      	mov	sl, r1
 800da46:	9002      	str	r0, [sp, #8]
 800da48:	9816      	ldr	r0, [sp, #88]	; 0x58
 800da4a:	9306      	str	r3, [sp, #24]
 800da4c:	4690      	mov	r8, r2
 800da4e:	f000 fb2b 	bl	800e0a8 <__localeconv_l>
 800da52:	6803      	ldr	r3, [r0, #0]
 800da54:	9303      	str	r3, [sp, #12]
 800da56:	4618      	mov	r0, r3
 800da58:	f7f2 fbda 	bl	8000210 <strlen>
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	9001      	str	r0, [sp, #4]
 800da60:	4403      	add	r3, r0
 800da62:	f04f 0b00 	mov.w	fp, #0
 800da66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da6a:	9307      	str	r3, [sp, #28]
 800da6c:	f8da 3000 	ldr.w	r3, [sl]
 800da70:	3302      	adds	r3, #2
 800da72:	461f      	mov	r7, r3
 800da74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da78:	2830      	cmp	r0, #48	; 0x30
 800da7a:	d06c      	beq.n	800db56 <__gethex+0x118>
 800da7c:	f7ff ffca 	bl	800da14 <__hexdig_fun>
 800da80:	4604      	mov	r4, r0
 800da82:	2800      	cmp	r0, #0
 800da84:	d16a      	bne.n	800db5c <__gethex+0x11e>
 800da86:	9a01      	ldr	r2, [sp, #4]
 800da88:	9903      	ldr	r1, [sp, #12]
 800da8a:	4638      	mov	r0, r7
 800da8c:	f001 f98a 	bl	800eda4 <strncmp>
 800da90:	2800      	cmp	r0, #0
 800da92:	d166      	bne.n	800db62 <__gethex+0x124>
 800da94:	9b01      	ldr	r3, [sp, #4]
 800da96:	5cf8      	ldrb	r0, [r7, r3]
 800da98:	18fe      	adds	r6, r7, r3
 800da9a:	f7ff ffbb 	bl	800da14 <__hexdig_fun>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d062      	beq.n	800db68 <__gethex+0x12a>
 800daa2:	4633      	mov	r3, r6
 800daa4:	7818      	ldrb	r0, [r3, #0]
 800daa6:	2830      	cmp	r0, #48	; 0x30
 800daa8:	461f      	mov	r7, r3
 800daaa:	f103 0301 	add.w	r3, r3, #1
 800daae:	d0f9      	beq.n	800daa4 <__gethex+0x66>
 800dab0:	f7ff ffb0 	bl	800da14 <__hexdig_fun>
 800dab4:	fab0 f580 	clz	r5, r0
 800dab8:	096d      	lsrs	r5, r5, #5
 800daba:	4634      	mov	r4, r6
 800dabc:	f04f 0b01 	mov.w	fp, #1
 800dac0:	463a      	mov	r2, r7
 800dac2:	4616      	mov	r6, r2
 800dac4:	3201      	adds	r2, #1
 800dac6:	7830      	ldrb	r0, [r6, #0]
 800dac8:	f7ff ffa4 	bl	800da14 <__hexdig_fun>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d1f8      	bne.n	800dac2 <__gethex+0x84>
 800dad0:	9a01      	ldr	r2, [sp, #4]
 800dad2:	9903      	ldr	r1, [sp, #12]
 800dad4:	4630      	mov	r0, r6
 800dad6:	f001 f965 	bl	800eda4 <strncmp>
 800dada:	b950      	cbnz	r0, 800daf2 <__gethex+0xb4>
 800dadc:	b954      	cbnz	r4, 800daf4 <__gethex+0xb6>
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	18f4      	adds	r4, r6, r3
 800dae2:	4622      	mov	r2, r4
 800dae4:	4616      	mov	r6, r2
 800dae6:	3201      	adds	r2, #1
 800dae8:	7830      	ldrb	r0, [r6, #0]
 800daea:	f7ff ff93 	bl	800da14 <__hexdig_fun>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d1f8      	bne.n	800dae4 <__gethex+0xa6>
 800daf2:	b10c      	cbz	r4, 800daf8 <__gethex+0xba>
 800daf4:	1ba4      	subs	r4, r4, r6
 800daf6:	00a4      	lsls	r4, r4, #2
 800daf8:	7833      	ldrb	r3, [r6, #0]
 800dafa:	2b50      	cmp	r3, #80	; 0x50
 800dafc:	d001      	beq.n	800db02 <__gethex+0xc4>
 800dafe:	2b70      	cmp	r3, #112	; 0x70
 800db00:	d140      	bne.n	800db84 <__gethex+0x146>
 800db02:	7873      	ldrb	r3, [r6, #1]
 800db04:	2b2b      	cmp	r3, #43	; 0x2b
 800db06:	d031      	beq.n	800db6c <__gethex+0x12e>
 800db08:	2b2d      	cmp	r3, #45	; 0x2d
 800db0a:	d033      	beq.n	800db74 <__gethex+0x136>
 800db0c:	1c71      	adds	r1, r6, #1
 800db0e:	f04f 0900 	mov.w	r9, #0
 800db12:	7808      	ldrb	r0, [r1, #0]
 800db14:	f7ff ff7e 	bl	800da14 <__hexdig_fun>
 800db18:	1e43      	subs	r3, r0, #1
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2b18      	cmp	r3, #24
 800db1e:	d831      	bhi.n	800db84 <__gethex+0x146>
 800db20:	f1a0 0210 	sub.w	r2, r0, #16
 800db24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db28:	f7ff ff74 	bl	800da14 <__hexdig_fun>
 800db2c:	1e43      	subs	r3, r0, #1
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b18      	cmp	r3, #24
 800db32:	d922      	bls.n	800db7a <__gethex+0x13c>
 800db34:	f1b9 0f00 	cmp.w	r9, #0
 800db38:	d000      	beq.n	800db3c <__gethex+0xfe>
 800db3a:	4252      	negs	r2, r2
 800db3c:	4414      	add	r4, r2
 800db3e:	f8ca 1000 	str.w	r1, [sl]
 800db42:	b30d      	cbz	r5, 800db88 <__gethex+0x14a>
 800db44:	f1bb 0f00 	cmp.w	fp, #0
 800db48:	bf0c      	ite	eq
 800db4a:	2706      	moveq	r7, #6
 800db4c:	2700      	movne	r7, #0
 800db4e:	4638      	mov	r0, r7
 800db50:	b00b      	add	sp, #44	; 0x2c
 800db52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db56:	f10b 0b01 	add.w	fp, fp, #1
 800db5a:	e78a      	b.n	800da72 <__gethex+0x34>
 800db5c:	2500      	movs	r5, #0
 800db5e:	462c      	mov	r4, r5
 800db60:	e7ae      	b.n	800dac0 <__gethex+0x82>
 800db62:	463e      	mov	r6, r7
 800db64:	2501      	movs	r5, #1
 800db66:	e7c7      	b.n	800daf8 <__gethex+0xba>
 800db68:	4604      	mov	r4, r0
 800db6a:	e7fb      	b.n	800db64 <__gethex+0x126>
 800db6c:	f04f 0900 	mov.w	r9, #0
 800db70:	1cb1      	adds	r1, r6, #2
 800db72:	e7ce      	b.n	800db12 <__gethex+0xd4>
 800db74:	f04f 0901 	mov.w	r9, #1
 800db78:	e7fa      	b.n	800db70 <__gethex+0x132>
 800db7a:	230a      	movs	r3, #10
 800db7c:	fb03 0202 	mla	r2, r3, r2, r0
 800db80:	3a10      	subs	r2, #16
 800db82:	e7cf      	b.n	800db24 <__gethex+0xe6>
 800db84:	4631      	mov	r1, r6
 800db86:	e7da      	b.n	800db3e <__gethex+0x100>
 800db88:	1bf3      	subs	r3, r6, r7
 800db8a:	3b01      	subs	r3, #1
 800db8c:	4629      	mov	r1, r5
 800db8e:	2b07      	cmp	r3, #7
 800db90:	dc49      	bgt.n	800dc26 <__gethex+0x1e8>
 800db92:	9802      	ldr	r0, [sp, #8]
 800db94:	f000 faba 	bl	800e10c <_Balloc>
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	f100 0914 	add.w	r9, r0, #20
 800db9e:	f04f 0b00 	mov.w	fp, #0
 800dba2:	f1c3 0301 	rsb	r3, r3, #1
 800dba6:	4605      	mov	r5, r0
 800dba8:	f8cd 9010 	str.w	r9, [sp, #16]
 800dbac:	46da      	mov	sl, fp
 800dbae:	9308      	str	r3, [sp, #32]
 800dbb0:	42b7      	cmp	r7, r6
 800dbb2:	d33b      	bcc.n	800dc2c <__gethex+0x1ee>
 800dbb4:	9804      	ldr	r0, [sp, #16]
 800dbb6:	f840 ab04 	str.w	sl, [r0], #4
 800dbba:	eba0 0009 	sub.w	r0, r0, r9
 800dbbe:	1080      	asrs	r0, r0, #2
 800dbc0:	6128      	str	r0, [r5, #16]
 800dbc2:	0147      	lsls	r7, r0, #5
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	f000 fb65 	bl	800e294 <__hi0bits>
 800dbca:	f8d8 6000 	ldr.w	r6, [r8]
 800dbce:	1a3f      	subs	r7, r7, r0
 800dbd0:	42b7      	cmp	r7, r6
 800dbd2:	dd64      	ble.n	800dc9e <__gethex+0x260>
 800dbd4:	1bbf      	subs	r7, r7, r6
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f000 fe75 	bl	800e8c8 <__any_on>
 800dbde:	4682      	mov	sl, r0
 800dbe0:	b178      	cbz	r0, 800dc02 <__gethex+0x1c4>
 800dbe2:	1e7b      	subs	r3, r7, #1
 800dbe4:	1159      	asrs	r1, r3, #5
 800dbe6:	f003 021f 	and.w	r2, r3, #31
 800dbea:	f04f 0a01 	mov.w	sl, #1
 800dbee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dbf2:	fa0a f202 	lsl.w	r2, sl, r2
 800dbf6:	420a      	tst	r2, r1
 800dbf8:	d003      	beq.n	800dc02 <__gethex+0x1c4>
 800dbfa:	4553      	cmp	r3, sl
 800dbfc:	dc46      	bgt.n	800dc8c <__gethex+0x24e>
 800dbfe:	f04f 0a02 	mov.w	sl, #2
 800dc02:	4639      	mov	r1, r7
 800dc04:	4628      	mov	r0, r5
 800dc06:	f7ff fecb 	bl	800d9a0 <rshift>
 800dc0a:	443c      	add	r4, r7
 800dc0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc10:	42a3      	cmp	r3, r4
 800dc12:	da52      	bge.n	800dcba <__gethex+0x27c>
 800dc14:	4629      	mov	r1, r5
 800dc16:	9802      	ldr	r0, [sp, #8]
 800dc18:	f000 faac 	bl	800e174 <_Bfree>
 800dc1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	27a3      	movs	r7, #163	; 0xa3
 800dc24:	e793      	b.n	800db4e <__gethex+0x110>
 800dc26:	3101      	adds	r1, #1
 800dc28:	105b      	asrs	r3, r3, #1
 800dc2a:	e7b0      	b.n	800db8e <__gethex+0x150>
 800dc2c:	1e73      	subs	r3, r6, #1
 800dc2e:	9305      	str	r3, [sp, #20]
 800dc30:	9a07      	ldr	r2, [sp, #28]
 800dc32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d018      	beq.n	800dc6c <__gethex+0x22e>
 800dc3a:	f1bb 0f20 	cmp.w	fp, #32
 800dc3e:	d107      	bne.n	800dc50 <__gethex+0x212>
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	f8c3 a000 	str.w	sl, [r3]
 800dc46:	3304      	adds	r3, #4
 800dc48:	f04f 0a00 	mov.w	sl, #0
 800dc4c:	9304      	str	r3, [sp, #16]
 800dc4e:	46d3      	mov	fp, sl
 800dc50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dc54:	f7ff fede 	bl	800da14 <__hexdig_fun>
 800dc58:	f000 000f 	and.w	r0, r0, #15
 800dc5c:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc60:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc64:	f10b 0b04 	add.w	fp, fp, #4
 800dc68:	9b05      	ldr	r3, [sp, #20]
 800dc6a:	e00d      	b.n	800dc88 <__gethex+0x24a>
 800dc6c:	9b05      	ldr	r3, [sp, #20]
 800dc6e:	9a08      	ldr	r2, [sp, #32]
 800dc70:	4413      	add	r3, r2
 800dc72:	42bb      	cmp	r3, r7
 800dc74:	d3e1      	bcc.n	800dc3a <__gethex+0x1fc>
 800dc76:	4618      	mov	r0, r3
 800dc78:	9a01      	ldr	r2, [sp, #4]
 800dc7a:	9903      	ldr	r1, [sp, #12]
 800dc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7e:	f001 f891 	bl	800eda4 <strncmp>
 800dc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d1d8      	bne.n	800dc3a <__gethex+0x1fc>
 800dc88:	461e      	mov	r6, r3
 800dc8a:	e791      	b.n	800dbb0 <__gethex+0x172>
 800dc8c:	1eb9      	subs	r1, r7, #2
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f000 fe1a 	bl	800e8c8 <__any_on>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d0b2      	beq.n	800dbfe <__gethex+0x1c0>
 800dc98:	f04f 0a03 	mov.w	sl, #3
 800dc9c:	e7b1      	b.n	800dc02 <__gethex+0x1c4>
 800dc9e:	da09      	bge.n	800dcb4 <__gethex+0x276>
 800dca0:	1bf7      	subs	r7, r6, r7
 800dca2:	4629      	mov	r1, r5
 800dca4:	463a      	mov	r2, r7
 800dca6:	9802      	ldr	r0, [sp, #8]
 800dca8:	f000 fc30 	bl	800e50c <__lshift>
 800dcac:	1be4      	subs	r4, r4, r7
 800dcae:	4605      	mov	r5, r0
 800dcb0:	f100 0914 	add.w	r9, r0, #20
 800dcb4:	f04f 0a00 	mov.w	sl, #0
 800dcb8:	e7a8      	b.n	800dc0c <__gethex+0x1ce>
 800dcba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dcbe:	42a0      	cmp	r0, r4
 800dcc0:	dd6a      	ble.n	800dd98 <__gethex+0x35a>
 800dcc2:	1b04      	subs	r4, r0, r4
 800dcc4:	42a6      	cmp	r6, r4
 800dcc6:	dc2e      	bgt.n	800dd26 <__gethex+0x2e8>
 800dcc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d022      	beq.n	800dd16 <__gethex+0x2d8>
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d024      	beq.n	800dd1e <__gethex+0x2e0>
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d115      	bne.n	800dd04 <__gethex+0x2c6>
 800dcd8:	42a6      	cmp	r6, r4
 800dcda:	d113      	bne.n	800dd04 <__gethex+0x2c6>
 800dcdc:	2e01      	cmp	r6, #1
 800dcde:	dc0b      	bgt.n	800dcf8 <__gethex+0x2ba>
 800dce0:	9a06      	ldr	r2, [sp, #24]
 800dce2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dce6:	6013      	str	r3, [r2, #0]
 800dce8:	2301      	movs	r3, #1
 800dcea:	612b      	str	r3, [r5, #16]
 800dcec:	f8c9 3000 	str.w	r3, [r9]
 800dcf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcf2:	2762      	movs	r7, #98	; 0x62
 800dcf4:	601d      	str	r5, [r3, #0]
 800dcf6:	e72a      	b.n	800db4e <__gethex+0x110>
 800dcf8:	1e71      	subs	r1, r6, #1
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f000 fde4 	bl	800e8c8 <__any_on>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d1ed      	bne.n	800dce0 <__gethex+0x2a2>
 800dd04:	4629      	mov	r1, r5
 800dd06:	9802      	ldr	r0, [sp, #8]
 800dd08:	f000 fa34 	bl	800e174 <_Bfree>
 800dd0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	2750      	movs	r7, #80	; 0x50
 800dd14:	e71b      	b.n	800db4e <__gethex+0x110>
 800dd16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0e1      	beq.n	800dce0 <__gethex+0x2a2>
 800dd1c:	e7f2      	b.n	800dd04 <__gethex+0x2c6>
 800dd1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1dd      	bne.n	800dce0 <__gethex+0x2a2>
 800dd24:	e7ee      	b.n	800dd04 <__gethex+0x2c6>
 800dd26:	1e67      	subs	r7, r4, #1
 800dd28:	f1ba 0f00 	cmp.w	sl, #0
 800dd2c:	d131      	bne.n	800dd92 <__gethex+0x354>
 800dd2e:	b127      	cbz	r7, 800dd3a <__gethex+0x2fc>
 800dd30:	4639      	mov	r1, r7
 800dd32:	4628      	mov	r0, r5
 800dd34:	f000 fdc8 	bl	800e8c8 <__any_on>
 800dd38:	4682      	mov	sl, r0
 800dd3a:	117a      	asrs	r2, r7, #5
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f007 071f 	and.w	r7, r7, #31
 800dd42:	fa03 f707 	lsl.w	r7, r3, r7
 800dd46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	421f      	tst	r7, r3
 800dd4e:	4628      	mov	r0, r5
 800dd50:	bf18      	it	ne
 800dd52:	f04a 0a02 	orrne.w	sl, sl, #2
 800dd56:	1b36      	subs	r6, r6, r4
 800dd58:	f7ff fe22 	bl	800d9a0 <rshift>
 800dd5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dd60:	2702      	movs	r7, #2
 800dd62:	f1ba 0f00 	cmp.w	sl, #0
 800dd66:	d048      	beq.n	800ddfa <__gethex+0x3bc>
 800dd68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d015      	beq.n	800dd9c <__gethex+0x35e>
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d017      	beq.n	800dda4 <__gethex+0x366>
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d109      	bne.n	800dd8c <__gethex+0x34e>
 800dd78:	f01a 0f02 	tst.w	sl, #2
 800dd7c:	d006      	beq.n	800dd8c <__gethex+0x34e>
 800dd7e:	f8d9 3000 	ldr.w	r3, [r9]
 800dd82:	ea4a 0a03 	orr.w	sl, sl, r3
 800dd86:	f01a 0f01 	tst.w	sl, #1
 800dd8a:	d10e      	bne.n	800ddaa <__gethex+0x36c>
 800dd8c:	f047 0710 	orr.w	r7, r7, #16
 800dd90:	e033      	b.n	800ddfa <__gethex+0x3bc>
 800dd92:	f04f 0a01 	mov.w	sl, #1
 800dd96:	e7d0      	b.n	800dd3a <__gethex+0x2fc>
 800dd98:	2701      	movs	r7, #1
 800dd9a:	e7e2      	b.n	800dd62 <__gethex+0x324>
 800dd9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd9e:	f1c3 0301 	rsb	r3, r3, #1
 800dda2:	9315      	str	r3, [sp, #84]	; 0x54
 800dda4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0f0      	beq.n	800dd8c <__gethex+0x34e>
 800ddaa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ddae:	f105 0314 	add.w	r3, r5, #20
 800ddb2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ddb6:	eb03 010a 	add.w	r1, r3, sl
 800ddba:	f04f 0c00 	mov.w	ip, #0
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ddc8:	d01c      	beq.n	800de04 <__gethex+0x3c6>
 800ddca:	3201      	adds	r2, #1
 800ddcc:	6002      	str	r2, [r0, #0]
 800ddce:	2f02      	cmp	r7, #2
 800ddd0:	f105 0314 	add.w	r3, r5, #20
 800ddd4:	d138      	bne.n	800de48 <__gethex+0x40a>
 800ddd6:	f8d8 2000 	ldr.w	r2, [r8]
 800ddda:	3a01      	subs	r2, #1
 800dddc:	42b2      	cmp	r2, r6
 800ddde:	d10a      	bne.n	800ddf6 <__gethex+0x3b8>
 800dde0:	1171      	asrs	r1, r6, #5
 800dde2:	2201      	movs	r2, #1
 800dde4:	f006 061f 	and.w	r6, r6, #31
 800dde8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddec:	fa02 f606 	lsl.w	r6, r2, r6
 800ddf0:	421e      	tst	r6, r3
 800ddf2:	bf18      	it	ne
 800ddf4:	4617      	movne	r7, r2
 800ddf6:	f047 0720 	orr.w	r7, r7, #32
 800ddfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddfc:	601d      	str	r5, [r3, #0]
 800ddfe:	9b06      	ldr	r3, [sp, #24]
 800de00:	601c      	str	r4, [r3, #0]
 800de02:	e6a4      	b.n	800db4e <__gethex+0x110>
 800de04:	4299      	cmp	r1, r3
 800de06:	f843 cc04 	str.w	ip, [r3, #-4]
 800de0a:	d8d8      	bhi.n	800ddbe <__gethex+0x380>
 800de0c:	68ab      	ldr	r3, [r5, #8]
 800de0e:	4599      	cmp	r9, r3
 800de10:	db12      	blt.n	800de38 <__gethex+0x3fa>
 800de12:	6869      	ldr	r1, [r5, #4]
 800de14:	9802      	ldr	r0, [sp, #8]
 800de16:	3101      	adds	r1, #1
 800de18:	f000 f978 	bl	800e10c <_Balloc>
 800de1c:	692a      	ldr	r2, [r5, #16]
 800de1e:	3202      	adds	r2, #2
 800de20:	f105 010c 	add.w	r1, r5, #12
 800de24:	4683      	mov	fp, r0
 800de26:	0092      	lsls	r2, r2, #2
 800de28:	300c      	adds	r0, #12
 800de2a:	f7fc fa39 	bl	800a2a0 <memcpy>
 800de2e:	4629      	mov	r1, r5
 800de30:	9802      	ldr	r0, [sp, #8]
 800de32:	f000 f99f 	bl	800e174 <_Bfree>
 800de36:	465d      	mov	r5, fp
 800de38:	692b      	ldr	r3, [r5, #16]
 800de3a:	1c5a      	adds	r2, r3, #1
 800de3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de40:	612a      	str	r2, [r5, #16]
 800de42:	2201      	movs	r2, #1
 800de44:	615a      	str	r2, [r3, #20]
 800de46:	e7c2      	b.n	800ddce <__gethex+0x390>
 800de48:	692a      	ldr	r2, [r5, #16]
 800de4a:	454a      	cmp	r2, r9
 800de4c:	dd0b      	ble.n	800de66 <__gethex+0x428>
 800de4e:	2101      	movs	r1, #1
 800de50:	4628      	mov	r0, r5
 800de52:	f7ff fda5 	bl	800d9a0 <rshift>
 800de56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de5a:	3401      	adds	r4, #1
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	f6ff aed9 	blt.w	800dc14 <__gethex+0x1d6>
 800de62:	2701      	movs	r7, #1
 800de64:	e7c7      	b.n	800ddf6 <__gethex+0x3b8>
 800de66:	f016 061f 	ands.w	r6, r6, #31
 800de6a:	d0fa      	beq.n	800de62 <__gethex+0x424>
 800de6c:	449a      	add	sl, r3
 800de6e:	f1c6 0620 	rsb	r6, r6, #32
 800de72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800de76:	f000 fa0d 	bl	800e294 <__hi0bits>
 800de7a:	42b0      	cmp	r0, r6
 800de7c:	dbe7      	blt.n	800de4e <__gethex+0x410>
 800de7e:	e7f0      	b.n	800de62 <__gethex+0x424>

0800de80 <L_shift>:
 800de80:	f1c2 0208 	rsb	r2, r2, #8
 800de84:	0092      	lsls	r2, r2, #2
 800de86:	b570      	push	{r4, r5, r6, lr}
 800de88:	f1c2 0620 	rsb	r6, r2, #32
 800de8c:	6843      	ldr	r3, [r0, #4]
 800de8e:	6804      	ldr	r4, [r0, #0]
 800de90:	fa03 f506 	lsl.w	r5, r3, r6
 800de94:	432c      	orrs	r4, r5
 800de96:	40d3      	lsrs	r3, r2
 800de98:	6004      	str	r4, [r0, #0]
 800de9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800de9e:	4288      	cmp	r0, r1
 800dea0:	d3f4      	bcc.n	800de8c <L_shift+0xc>
 800dea2:	bd70      	pop	{r4, r5, r6, pc}

0800dea4 <__match>:
 800dea4:	b530      	push	{r4, r5, lr}
 800dea6:	6803      	ldr	r3, [r0, #0]
 800dea8:	3301      	adds	r3, #1
 800deaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deae:	b914      	cbnz	r4, 800deb6 <__match+0x12>
 800deb0:	6003      	str	r3, [r0, #0]
 800deb2:	2001      	movs	r0, #1
 800deb4:	bd30      	pop	{r4, r5, pc}
 800deb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800debe:	2d19      	cmp	r5, #25
 800dec0:	bf98      	it	ls
 800dec2:	3220      	addls	r2, #32
 800dec4:	42a2      	cmp	r2, r4
 800dec6:	d0f0      	beq.n	800deaa <__match+0x6>
 800dec8:	2000      	movs	r0, #0
 800deca:	e7f3      	b.n	800deb4 <__match+0x10>

0800decc <__hexnan>:
 800decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	680b      	ldr	r3, [r1, #0]
 800ded2:	6801      	ldr	r1, [r0, #0]
 800ded4:	115f      	asrs	r7, r3, #5
 800ded6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800deda:	f013 031f 	ands.w	r3, r3, #31
 800dede:	b087      	sub	sp, #28
 800dee0:	bf18      	it	ne
 800dee2:	3704      	addne	r7, #4
 800dee4:	2500      	movs	r5, #0
 800dee6:	1f3e      	subs	r6, r7, #4
 800dee8:	4682      	mov	sl, r0
 800deea:	4690      	mov	r8, r2
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	f847 5c04 	str.w	r5, [r7, #-4]
 800def2:	46b1      	mov	r9, r6
 800def4:	4634      	mov	r4, r6
 800def6:	9502      	str	r5, [sp, #8]
 800def8:	46ab      	mov	fp, r5
 800defa:	784a      	ldrb	r2, [r1, #1]
 800defc:	1c4b      	adds	r3, r1, #1
 800defe:	9303      	str	r3, [sp, #12]
 800df00:	b342      	cbz	r2, 800df54 <__hexnan+0x88>
 800df02:	4610      	mov	r0, r2
 800df04:	9105      	str	r1, [sp, #20]
 800df06:	9204      	str	r2, [sp, #16]
 800df08:	f7ff fd84 	bl	800da14 <__hexdig_fun>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d143      	bne.n	800df98 <__hexnan+0xcc>
 800df10:	9a04      	ldr	r2, [sp, #16]
 800df12:	9905      	ldr	r1, [sp, #20]
 800df14:	2a20      	cmp	r2, #32
 800df16:	d818      	bhi.n	800df4a <__hexnan+0x7e>
 800df18:	9b02      	ldr	r3, [sp, #8]
 800df1a:	459b      	cmp	fp, r3
 800df1c:	dd13      	ble.n	800df46 <__hexnan+0x7a>
 800df1e:	454c      	cmp	r4, r9
 800df20:	d206      	bcs.n	800df30 <__hexnan+0x64>
 800df22:	2d07      	cmp	r5, #7
 800df24:	dc04      	bgt.n	800df30 <__hexnan+0x64>
 800df26:	462a      	mov	r2, r5
 800df28:	4649      	mov	r1, r9
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7ff ffa8 	bl	800de80 <L_shift>
 800df30:	4544      	cmp	r4, r8
 800df32:	d944      	bls.n	800dfbe <__hexnan+0xf2>
 800df34:	2300      	movs	r3, #0
 800df36:	f1a4 0904 	sub.w	r9, r4, #4
 800df3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800df3e:	f8cd b008 	str.w	fp, [sp, #8]
 800df42:	464c      	mov	r4, r9
 800df44:	461d      	mov	r5, r3
 800df46:	9903      	ldr	r1, [sp, #12]
 800df48:	e7d7      	b.n	800defa <__hexnan+0x2e>
 800df4a:	2a29      	cmp	r2, #41	; 0x29
 800df4c:	d14a      	bne.n	800dfe4 <__hexnan+0x118>
 800df4e:	3102      	adds	r1, #2
 800df50:	f8ca 1000 	str.w	r1, [sl]
 800df54:	f1bb 0f00 	cmp.w	fp, #0
 800df58:	d044      	beq.n	800dfe4 <__hexnan+0x118>
 800df5a:	454c      	cmp	r4, r9
 800df5c:	d206      	bcs.n	800df6c <__hexnan+0xa0>
 800df5e:	2d07      	cmp	r5, #7
 800df60:	dc04      	bgt.n	800df6c <__hexnan+0xa0>
 800df62:	462a      	mov	r2, r5
 800df64:	4649      	mov	r1, r9
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff ff8a 	bl	800de80 <L_shift>
 800df6c:	4544      	cmp	r4, r8
 800df6e:	d928      	bls.n	800dfc2 <__hexnan+0xf6>
 800df70:	4643      	mov	r3, r8
 800df72:	f854 2b04 	ldr.w	r2, [r4], #4
 800df76:	f843 2b04 	str.w	r2, [r3], #4
 800df7a:	42a6      	cmp	r6, r4
 800df7c:	d2f9      	bcs.n	800df72 <__hexnan+0xa6>
 800df7e:	2200      	movs	r2, #0
 800df80:	f843 2b04 	str.w	r2, [r3], #4
 800df84:	429e      	cmp	r6, r3
 800df86:	d2fb      	bcs.n	800df80 <__hexnan+0xb4>
 800df88:	6833      	ldr	r3, [r6, #0]
 800df8a:	b91b      	cbnz	r3, 800df94 <__hexnan+0xc8>
 800df8c:	4546      	cmp	r6, r8
 800df8e:	d127      	bne.n	800dfe0 <__hexnan+0x114>
 800df90:	2301      	movs	r3, #1
 800df92:	6033      	str	r3, [r6, #0]
 800df94:	2005      	movs	r0, #5
 800df96:	e026      	b.n	800dfe6 <__hexnan+0x11a>
 800df98:	3501      	adds	r5, #1
 800df9a:	2d08      	cmp	r5, #8
 800df9c:	f10b 0b01 	add.w	fp, fp, #1
 800dfa0:	dd06      	ble.n	800dfb0 <__hexnan+0xe4>
 800dfa2:	4544      	cmp	r4, r8
 800dfa4:	d9cf      	bls.n	800df46 <__hexnan+0x7a>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfac:	2501      	movs	r5, #1
 800dfae:	3c04      	subs	r4, #4
 800dfb0:	6822      	ldr	r2, [r4, #0]
 800dfb2:	f000 000f 	and.w	r0, r0, #15
 800dfb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dfba:	6020      	str	r0, [r4, #0]
 800dfbc:	e7c3      	b.n	800df46 <__hexnan+0x7a>
 800dfbe:	2508      	movs	r5, #8
 800dfc0:	e7c1      	b.n	800df46 <__hexnan+0x7a>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0df      	beq.n	800df88 <__hexnan+0xbc>
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfcc:	f1c3 0320 	rsb	r3, r3, #32
 800dfd0:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800dfd8:	401a      	ands	r2, r3
 800dfda:	f847 2c04 	str.w	r2, [r7, #-4]
 800dfde:	e7d3      	b.n	800df88 <__hexnan+0xbc>
 800dfe0:	3e04      	subs	r6, #4
 800dfe2:	e7d1      	b.n	800df88 <__hexnan+0xbc>
 800dfe4:	2004      	movs	r0, #4
 800dfe6:	b007      	add	sp, #28
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfec <_findenv_r>:
 800dfec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff0:	4607      	mov	r7, r0
 800dff2:	468b      	mov	fp, r1
 800dff4:	4690      	mov	r8, r2
 800dff6:	f000 ff9c 	bl	800ef32 <__env_lock>
 800dffa:	4b19      	ldr	r3, [pc, #100]	; (800e060 <_findenv_r+0x74>)
 800dffc:	681d      	ldr	r5, [r3, #0]
 800dffe:	469a      	mov	sl, r3
 800e000:	b13d      	cbz	r5, 800e012 <_findenv_r+0x26>
 800e002:	465c      	mov	r4, fp
 800e004:	4623      	mov	r3, r4
 800e006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e00a:	b32a      	cbz	r2, 800e058 <_findenv_r+0x6c>
 800e00c:	2a3d      	cmp	r2, #61	; 0x3d
 800e00e:	461c      	mov	r4, r3
 800e010:	d1f8      	bne.n	800e004 <_findenv_r+0x18>
 800e012:	4638      	mov	r0, r7
 800e014:	f000 ff8e 	bl	800ef34 <__env_unlock>
 800e018:	2000      	movs	r0, #0
 800e01a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01e:	464d      	mov	r5, r9
 800e020:	46a9      	mov	r9, r5
 800e022:	f859 0b04 	ldr.w	r0, [r9], #4
 800e026:	2800      	cmp	r0, #0
 800e028:	d0f3      	beq.n	800e012 <_findenv_r+0x26>
 800e02a:	4622      	mov	r2, r4
 800e02c:	4659      	mov	r1, fp
 800e02e:	f000 feb9 	bl	800eda4 <strncmp>
 800e032:	2800      	cmp	r0, #0
 800e034:	d1f3      	bne.n	800e01e <_findenv_r+0x32>
 800e036:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800e03a:	191e      	adds	r6, r3, r4
 800e03c:	5d1b      	ldrb	r3, [r3, r4]
 800e03e:	2b3d      	cmp	r3, #61	; 0x3d
 800e040:	d1ed      	bne.n	800e01e <_findenv_r+0x32>
 800e042:	f8da 3000 	ldr.w	r3, [sl]
 800e046:	1aed      	subs	r5, r5, r3
 800e048:	10ad      	asrs	r5, r5, #2
 800e04a:	4638      	mov	r0, r7
 800e04c:	f8c8 5000 	str.w	r5, [r8]
 800e050:	f000 ff70 	bl	800ef34 <__env_unlock>
 800e054:	1c70      	adds	r0, r6, #1
 800e056:	e7e0      	b.n	800e01a <_findenv_r+0x2e>
 800e058:	eba4 040b 	sub.w	r4, r4, fp
 800e05c:	e7e0      	b.n	800e020 <_findenv_r+0x34>
 800e05e:	bf00      	nop
 800e060:	20000058 	.word	0x20000058

0800e064 <_getenv_r>:
 800e064:	b507      	push	{r0, r1, r2, lr}
 800e066:	aa01      	add	r2, sp, #4
 800e068:	f7ff ffc0 	bl	800dfec <_findenv_r>
 800e06c:	b003      	add	sp, #12
 800e06e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e074 <__gettzinfo>:
 800e074:	4800      	ldr	r0, [pc, #0]	; (800e078 <__gettzinfo+0x4>)
 800e076:	4770      	bx	lr
 800e078:	200000d0 	.word	0x200000d0

0800e07c <labs>:
 800e07c:	2800      	cmp	r0, #0
 800e07e:	bfb8      	it	lt
 800e080:	4240      	neglt	r0, r0
 800e082:	4770      	bx	lr

0800e084 <__locale_ctype_ptr_l>:
 800e084:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e088:	4770      	bx	lr
	...

0800e08c <__locale_ctype_ptr>:
 800e08c:	4b04      	ldr	r3, [pc, #16]	; (800e0a0 <__locale_ctype_ptr+0x14>)
 800e08e:	4a05      	ldr	r2, [pc, #20]	; (800e0a4 <__locale_ctype_ptr+0x18>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6a1b      	ldr	r3, [r3, #32]
 800e094:	2b00      	cmp	r3, #0
 800e096:	bf08      	it	eq
 800e098:	4613      	moveq	r3, r2
 800e09a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e09e:	4770      	bx	lr
 800e0a0:	20000060 	.word	0x20000060
 800e0a4:	20000128 	.word	0x20000128

0800e0a8 <__localeconv_l>:
 800e0a8:	30f0      	adds	r0, #240	; 0xf0
 800e0aa:	4770      	bx	lr

0800e0ac <_localeconv_r>:
 800e0ac:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <_localeconv_r+0x14>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6a18      	ldr	r0, [r3, #32]
 800e0b2:	4b04      	ldr	r3, [pc, #16]	; (800e0c4 <_localeconv_r+0x18>)
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	bf08      	it	eq
 800e0b8:	4618      	moveq	r0, r3
 800e0ba:	30f0      	adds	r0, #240	; 0xf0
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	20000060 	.word	0x20000060
 800e0c4:	20000128 	.word	0x20000128

0800e0c8 <malloc>:
 800e0c8:	4b02      	ldr	r3, [pc, #8]	; (800e0d4 <malloc+0xc>)
 800e0ca:	4601      	mov	r1, r0
 800e0cc:	6818      	ldr	r0, [r3, #0]
 800e0ce:	f000 bc79 	b.w	800e9c4 <_malloc_r>
 800e0d2:	bf00      	nop
 800e0d4:	20000060 	.word	0x20000060

0800e0d8 <free>:
 800e0d8:	4b02      	ldr	r3, [pc, #8]	; (800e0e4 <free+0xc>)
 800e0da:	4601      	mov	r1, r0
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f000 bc23 	b.w	800e928 <_free_r>
 800e0e2:	bf00      	nop
 800e0e4:	20000060 	.word	0x20000060

0800e0e8 <__ascii_mbtowc>:
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	b901      	cbnz	r1, 800e0ee <__ascii_mbtowc+0x6>
 800e0ec:	a901      	add	r1, sp, #4
 800e0ee:	b142      	cbz	r2, 800e102 <__ascii_mbtowc+0x1a>
 800e0f0:	b14b      	cbz	r3, 800e106 <__ascii_mbtowc+0x1e>
 800e0f2:	7813      	ldrb	r3, [r2, #0]
 800e0f4:	600b      	str	r3, [r1, #0]
 800e0f6:	7812      	ldrb	r2, [r2, #0]
 800e0f8:	1c10      	adds	r0, r2, #0
 800e0fa:	bf18      	it	ne
 800e0fc:	2001      	movne	r0, #1
 800e0fe:	b002      	add	sp, #8
 800e100:	4770      	bx	lr
 800e102:	4610      	mov	r0, r2
 800e104:	e7fb      	b.n	800e0fe <__ascii_mbtowc+0x16>
 800e106:	f06f 0001 	mvn.w	r0, #1
 800e10a:	e7f8      	b.n	800e0fe <__ascii_mbtowc+0x16>

0800e10c <_Balloc>:
 800e10c:	b570      	push	{r4, r5, r6, lr}
 800e10e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e110:	4604      	mov	r4, r0
 800e112:	460e      	mov	r6, r1
 800e114:	b93d      	cbnz	r5, 800e126 <_Balloc+0x1a>
 800e116:	2010      	movs	r0, #16
 800e118:	f7ff ffd6 	bl	800e0c8 <malloc>
 800e11c:	6260      	str	r0, [r4, #36]	; 0x24
 800e11e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e122:	6005      	str	r5, [r0, #0]
 800e124:	60c5      	str	r5, [r0, #12]
 800e126:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e128:	68eb      	ldr	r3, [r5, #12]
 800e12a:	b183      	cbz	r3, 800e14e <_Balloc+0x42>
 800e12c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e134:	b9b8      	cbnz	r0, 800e166 <_Balloc+0x5a>
 800e136:	2101      	movs	r1, #1
 800e138:	fa01 f506 	lsl.w	r5, r1, r6
 800e13c:	1d6a      	adds	r2, r5, #5
 800e13e:	0092      	lsls	r2, r2, #2
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fbe2 	bl	800e90a <_calloc_r>
 800e146:	b160      	cbz	r0, 800e162 <_Balloc+0x56>
 800e148:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e14c:	e00e      	b.n	800e16c <_Balloc+0x60>
 800e14e:	2221      	movs	r2, #33	; 0x21
 800e150:	2104      	movs	r1, #4
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fbd9 	bl	800e90a <_calloc_r>
 800e158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e15a:	60e8      	str	r0, [r5, #12]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d1e4      	bne.n	800e12c <_Balloc+0x20>
 800e162:	2000      	movs	r0, #0
 800e164:	bd70      	pop	{r4, r5, r6, pc}
 800e166:	6802      	ldr	r2, [r0, #0]
 800e168:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e16c:	2300      	movs	r3, #0
 800e16e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e172:	e7f7      	b.n	800e164 <_Balloc+0x58>

0800e174 <_Bfree>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e178:	4606      	mov	r6, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	b93c      	cbnz	r4, 800e18e <_Bfree+0x1a>
 800e17e:	2010      	movs	r0, #16
 800e180:	f7ff ffa2 	bl	800e0c8 <malloc>
 800e184:	6270      	str	r0, [r6, #36]	; 0x24
 800e186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e18a:	6004      	str	r4, [r0, #0]
 800e18c:	60c4      	str	r4, [r0, #12]
 800e18e:	b13d      	cbz	r5, 800e1a0 <_Bfree+0x2c>
 800e190:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e192:	686a      	ldr	r2, [r5, #4]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e19a:	6029      	str	r1, [r5, #0]
 800e19c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}

0800e1a2 <__multadd>:
 800e1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a6:	690d      	ldr	r5, [r1, #16]
 800e1a8:	461f      	mov	r7, r3
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	f101 0c14 	add.w	ip, r1, #20
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f8dc 0000 	ldr.w	r0, [ip]
 800e1b8:	b281      	uxth	r1, r0
 800e1ba:	fb02 7101 	mla	r1, r2, r1, r7
 800e1be:	0c0f      	lsrs	r7, r1, #16
 800e1c0:	0c00      	lsrs	r0, r0, #16
 800e1c2:	fb02 7000 	mla	r0, r2, r0, r7
 800e1c6:	b289      	uxth	r1, r1
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e1ce:	429d      	cmp	r5, r3
 800e1d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e1d4:	f84c 1b04 	str.w	r1, [ip], #4
 800e1d8:	dcec      	bgt.n	800e1b4 <__multadd+0x12>
 800e1da:	b1d7      	cbz	r7, 800e212 <__multadd+0x70>
 800e1dc:	68a3      	ldr	r3, [r4, #8]
 800e1de:	42ab      	cmp	r3, r5
 800e1e0:	dc12      	bgt.n	800e208 <__multadd+0x66>
 800e1e2:	6861      	ldr	r1, [r4, #4]
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	3101      	adds	r1, #1
 800e1e8:	f7ff ff90 	bl	800e10c <_Balloc>
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	3202      	adds	r2, #2
 800e1f0:	f104 010c 	add.w	r1, r4, #12
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	0092      	lsls	r2, r2, #2
 800e1f8:	300c      	adds	r0, #12
 800e1fa:	f7fc f851 	bl	800a2a0 <memcpy>
 800e1fe:	4621      	mov	r1, r4
 800e200:	4630      	mov	r0, r6
 800e202:	f7ff ffb7 	bl	800e174 <_Bfree>
 800e206:	4644      	mov	r4, r8
 800e208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e20c:	3501      	adds	r5, #1
 800e20e:	615f      	str	r7, [r3, #20]
 800e210:	6125      	str	r5, [r4, #16]
 800e212:	4620      	mov	r0, r4
 800e214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e218 <__s2b>:
 800e218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e21c:	460c      	mov	r4, r1
 800e21e:	4615      	mov	r5, r2
 800e220:	461f      	mov	r7, r3
 800e222:	2209      	movs	r2, #9
 800e224:	3308      	adds	r3, #8
 800e226:	4606      	mov	r6, r0
 800e228:	fb93 f3f2 	sdiv	r3, r3, r2
 800e22c:	2100      	movs	r1, #0
 800e22e:	2201      	movs	r2, #1
 800e230:	429a      	cmp	r2, r3
 800e232:	db20      	blt.n	800e276 <__s2b+0x5e>
 800e234:	4630      	mov	r0, r6
 800e236:	f7ff ff69 	bl	800e10c <_Balloc>
 800e23a:	9b08      	ldr	r3, [sp, #32]
 800e23c:	6143      	str	r3, [r0, #20]
 800e23e:	2d09      	cmp	r5, #9
 800e240:	f04f 0301 	mov.w	r3, #1
 800e244:	6103      	str	r3, [r0, #16]
 800e246:	dd19      	ble.n	800e27c <__s2b+0x64>
 800e248:	f104 0809 	add.w	r8, r4, #9
 800e24c:	46c1      	mov	r9, r8
 800e24e:	442c      	add	r4, r5
 800e250:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e254:	4601      	mov	r1, r0
 800e256:	3b30      	subs	r3, #48	; 0x30
 800e258:	220a      	movs	r2, #10
 800e25a:	4630      	mov	r0, r6
 800e25c:	f7ff ffa1 	bl	800e1a2 <__multadd>
 800e260:	45a1      	cmp	r9, r4
 800e262:	d1f5      	bne.n	800e250 <__s2b+0x38>
 800e264:	eb08 0405 	add.w	r4, r8, r5
 800e268:	3c08      	subs	r4, #8
 800e26a:	1b2d      	subs	r5, r5, r4
 800e26c:	1963      	adds	r3, r4, r5
 800e26e:	42bb      	cmp	r3, r7
 800e270:	db07      	blt.n	800e282 <__s2b+0x6a>
 800e272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e276:	0052      	lsls	r2, r2, #1
 800e278:	3101      	adds	r1, #1
 800e27a:	e7d9      	b.n	800e230 <__s2b+0x18>
 800e27c:	340a      	adds	r4, #10
 800e27e:	2509      	movs	r5, #9
 800e280:	e7f3      	b.n	800e26a <__s2b+0x52>
 800e282:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e286:	4601      	mov	r1, r0
 800e288:	3b30      	subs	r3, #48	; 0x30
 800e28a:	220a      	movs	r2, #10
 800e28c:	4630      	mov	r0, r6
 800e28e:	f7ff ff88 	bl	800e1a2 <__multadd>
 800e292:	e7eb      	b.n	800e26c <__s2b+0x54>

0800e294 <__hi0bits>:
 800e294:	0c02      	lsrs	r2, r0, #16
 800e296:	0412      	lsls	r2, r2, #16
 800e298:	4603      	mov	r3, r0
 800e29a:	b9b2      	cbnz	r2, 800e2ca <__hi0bits+0x36>
 800e29c:	0403      	lsls	r3, r0, #16
 800e29e:	2010      	movs	r0, #16
 800e2a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e2a4:	bf04      	itt	eq
 800e2a6:	021b      	lsleq	r3, r3, #8
 800e2a8:	3008      	addeq	r0, #8
 800e2aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e2ae:	bf04      	itt	eq
 800e2b0:	011b      	lsleq	r3, r3, #4
 800e2b2:	3004      	addeq	r0, #4
 800e2b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e2b8:	bf04      	itt	eq
 800e2ba:	009b      	lsleq	r3, r3, #2
 800e2bc:	3002      	addeq	r0, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	db06      	blt.n	800e2d0 <__hi0bits+0x3c>
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	d503      	bpl.n	800e2ce <__hi0bits+0x3a>
 800e2c6:	3001      	adds	r0, #1
 800e2c8:	4770      	bx	lr
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	e7e8      	b.n	800e2a0 <__hi0bits+0xc>
 800e2ce:	2020      	movs	r0, #32
 800e2d0:	4770      	bx	lr

0800e2d2 <__lo0bits>:
 800e2d2:	6803      	ldr	r3, [r0, #0]
 800e2d4:	f013 0207 	ands.w	r2, r3, #7
 800e2d8:	4601      	mov	r1, r0
 800e2da:	d00b      	beq.n	800e2f4 <__lo0bits+0x22>
 800e2dc:	07da      	lsls	r2, r3, #31
 800e2de:	d423      	bmi.n	800e328 <__lo0bits+0x56>
 800e2e0:	0798      	lsls	r0, r3, #30
 800e2e2:	bf49      	itett	mi
 800e2e4:	085b      	lsrmi	r3, r3, #1
 800e2e6:	089b      	lsrpl	r3, r3, #2
 800e2e8:	2001      	movmi	r0, #1
 800e2ea:	600b      	strmi	r3, [r1, #0]
 800e2ec:	bf5c      	itt	pl
 800e2ee:	600b      	strpl	r3, [r1, #0]
 800e2f0:	2002      	movpl	r0, #2
 800e2f2:	4770      	bx	lr
 800e2f4:	b298      	uxth	r0, r3
 800e2f6:	b9a8      	cbnz	r0, 800e324 <__lo0bits+0x52>
 800e2f8:	0c1b      	lsrs	r3, r3, #16
 800e2fa:	2010      	movs	r0, #16
 800e2fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e300:	bf04      	itt	eq
 800e302:	0a1b      	lsreq	r3, r3, #8
 800e304:	3008      	addeq	r0, #8
 800e306:	071a      	lsls	r2, r3, #28
 800e308:	bf04      	itt	eq
 800e30a:	091b      	lsreq	r3, r3, #4
 800e30c:	3004      	addeq	r0, #4
 800e30e:	079a      	lsls	r2, r3, #30
 800e310:	bf04      	itt	eq
 800e312:	089b      	lsreq	r3, r3, #2
 800e314:	3002      	addeq	r0, #2
 800e316:	07da      	lsls	r2, r3, #31
 800e318:	d402      	bmi.n	800e320 <__lo0bits+0x4e>
 800e31a:	085b      	lsrs	r3, r3, #1
 800e31c:	d006      	beq.n	800e32c <__lo0bits+0x5a>
 800e31e:	3001      	adds	r0, #1
 800e320:	600b      	str	r3, [r1, #0]
 800e322:	4770      	bx	lr
 800e324:	4610      	mov	r0, r2
 800e326:	e7e9      	b.n	800e2fc <__lo0bits+0x2a>
 800e328:	2000      	movs	r0, #0
 800e32a:	4770      	bx	lr
 800e32c:	2020      	movs	r0, #32
 800e32e:	4770      	bx	lr

0800e330 <__i2b>:
 800e330:	b510      	push	{r4, lr}
 800e332:	460c      	mov	r4, r1
 800e334:	2101      	movs	r1, #1
 800e336:	f7ff fee9 	bl	800e10c <_Balloc>
 800e33a:	2201      	movs	r2, #1
 800e33c:	6144      	str	r4, [r0, #20]
 800e33e:	6102      	str	r2, [r0, #16]
 800e340:	bd10      	pop	{r4, pc}

0800e342 <__multiply>:
 800e342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e346:	4614      	mov	r4, r2
 800e348:	690a      	ldr	r2, [r1, #16]
 800e34a:	6923      	ldr	r3, [r4, #16]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	bfb8      	it	lt
 800e350:	460b      	movlt	r3, r1
 800e352:	4688      	mov	r8, r1
 800e354:	bfbc      	itt	lt
 800e356:	46a0      	movlt	r8, r4
 800e358:	461c      	movlt	r4, r3
 800e35a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e35e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e366:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e36a:	eb07 0609 	add.w	r6, r7, r9
 800e36e:	42b3      	cmp	r3, r6
 800e370:	bfb8      	it	lt
 800e372:	3101      	addlt	r1, #1
 800e374:	f7ff feca 	bl	800e10c <_Balloc>
 800e378:	f100 0514 	add.w	r5, r0, #20
 800e37c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e380:	462b      	mov	r3, r5
 800e382:	2200      	movs	r2, #0
 800e384:	4573      	cmp	r3, lr
 800e386:	d316      	bcc.n	800e3b6 <__multiply+0x74>
 800e388:	f104 0214 	add.w	r2, r4, #20
 800e38c:	f108 0114 	add.w	r1, r8, #20
 800e390:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e394:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	9b00      	ldr	r3, [sp, #0]
 800e39c:	9201      	str	r2, [sp, #4]
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d80c      	bhi.n	800e3bc <__multiply+0x7a>
 800e3a2:	2e00      	cmp	r6, #0
 800e3a4:	dd03      	ble.n	800e3ae <__multiply+0x6c>
 800e3a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d05d      	beq.n	800e46a <__multiply+0x128>
 800e3ae:	6106      	str	r6, [r0, #16]
 800e3b0:	b003      	add	sp, #12
 800e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	f843 2b04 	str.w	r2, [r3], #4
 800e3ba:	e7e3      	b.n	800e384 <__multiply+0x42>
 800e3bc:	f8b2 b000 	ldrh.w	fp, [r2]
 800e3c0:	f1bb 0f00 	cmp.w	fp, #0
 800e3c4:	d023      	beq.n	800e40e <__multiply+0xcc>
 800e3c6:	4689      	mov	r9, r1
 800e3c8:	46ac      	mov	ip, r5
 800e3ca:	f04f 0800 	mov.w	r8, #0
 800e3ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800e3d2:	f8dc a000 	ldr.w	sl, [ip]
 800e3d6:	b2a3      	uxth	r3, r4
 800e3d8:	fa1f fa8a 	uxth.w	sl, sl
 800e3dc:	fb0b a303 	mla	r3, fp, r3, sl
 800e3e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e3e4:	f8dc 4000 	ldr.w	r4, [ip]
 800e3e8:	4443      	add	r3, r8
 800e3ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3ee:	fb0b 840a 	mla	r4, fp, sl, r8
 800e3f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e3f6:	46e2      	mov	sl, ip
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3fe:	454f      	cmp	r7, r9
 800e400:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e404:	f84a 3b04 	str.w	r3, [sl], #4
 800e408:	d82b      	bhi.n	800e462 <__multiply+0x120>
 800e40a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e414:	3204      	adds	r2, #4
 800e416:	f1ba 0f00 	cmp.w	sl, #0
 800e41a:	d020      	beq.n	800e45e <__multiply+0x11c>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	4689      	mov	r9, r1
 800e420:	46a8      	mov	r8, r5
 800e422:	f04f 0b00 	mov.w	fp, #0
 800e426:	f8b9 c000 	ldrh.w	ip, [r9]
 800e42a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e42e:	fb0a 440c 	mla	r4, sl, ip, r4
 800e432:	445c      	add	r4, fp
 800e434:	46c4      	mov	ip, r8
 800e436:	b29b      	uxth	r3, r3
 800e438:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e43c:	f84c 3b04 	str.w	r3, [ip], #4
 800e440:	f859 3b04 	ldr.w	r3, [r9], #4
 800e444:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e448:	0c1b      	lsrs	r3, r3, #16
 800e44a:	fb0a b303 	mla	r3, sl, r3, fp
 800e44e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e452:	454f      	cmp	r7, r9
 800e454:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e458:	d805      	bhi.n	800e466 <__multiply+0x124>
 800e45a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e45e:	3504      	adds	r5, #4
 800e460:	e79b      	b.n	800e39a <__multiply+0x58>
 800e462:	46d4      	mov	ip, sl
 800e464:	e7b3      	b.n	800e3ce <__multiply+0x8c>
 800e466:	46e0      	mov	r8, ip
 800e468:	e7dd      	b.n	800e426 <__multiply+0xe4>
 800e46a:	3e01      	subs	r6, #1
 800e46c:	e799      	b.n	800e3a2 <__multiply+0x60>
	...

0800e470 <__pow5mult>:
 800e470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e474:	4615      	mov	r5, r2
 800e476:	f012 0203 	ands.w	r2, r2, #3
 800e47a:	4606      	mov	r6, r0
 800e47c:	460f      	mov	r7, r1
 800e47e:	d007      	beq.n	800e490 <__pow5mult+0x20>
 800e480:	3a01      	subs	r2, #1
 800e482:	4c21      	ldr	r4, [pc, #132]	; (800e508 <__pow5mult+0x98>)
 800e484:	2300      	movs	r3, #0
 800e486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e48a:	f7ff fe8a 	bl	800e1a2 <__multadd>
 800e48e:	4607      	mov	r7, r0
 800e490:	10ad      	asrs	r5, r5, #2
 800e492:	d035      	beq.n	800e500 <__pow5mult+0x90>
 800e494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e496:	b93c      	cbnz	r4, 800e4a8 <__pow5mult+0x38>
 800e498:	2010      	movs	r0, #16
 800e49a:	f7ff fe15 	bl	800e0c8 <malloc>
 800e49e:	6270      	str	r0, [r6, #36]	; 0x24
 800e4a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4a4:	6004      	str	r4, [r0, #0]
 800e4a6:	60c4      	str	r4, [r0, #12]
 800e4a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4b0:	b94c      	cbnz	r4, 800e4c6 <__pow5mult+0x56>
 800e4b2:	f240 2171 	movw	r1, #625	; 0x271
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff ff3a 	bl	800e330 <__i2b>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	6003      	str	r3, [r0, #0]
 800e4c6:	f04f 0800 	mov.w	r8, #0
 800e4ca:	07eb      	lsls	r3, r5, #31
 800e4cc:	d50a      	bpl.n	800e4e4 <__pow5mult+0x74>
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	4622      	mov	r2, r4
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ff35 	bl	800e342 <__multiply>
 800e4d8:	4639      	mov	r1, r7
 800e4da:	4681      	mov	r9, r0
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f7ff fe49 	bl	800e174 <_Bfree>
 800e4e2:	464f      	mov	r7, r9
 800e4e4:	106d      	asrs	r5, r5, #1
 800e4e6:	d00b      	beq.n	800e500 <__pow5mult+0x90>
 800e4e8:	6820      	ldr	r0, [r4, #0]
 800e4ea:	b938      	cbnz	r0, 800e4fc <__pow5mult+0x8c>
 800e4ec:	4622      	mov	r2, r4
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff ff26 	bl	800e342 <__multiply>
 800e4f6:	6020      	str	r0, [r4, #0]
 800e4f8:	f8c0 8000 	str.w	r8, [r0]
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	e7e4      	b.n	800e4ca <__pow5mult+0x5a>
 800e500:	4638      	mov	r0, r7
 800e502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e506:	bf00      	nop
 800e508:	08012f98 	.word	0x08012f98

0800e50c <__lshift>:
 800e50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e510:	460c      	mov	r4, r1
 800e512:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e516:	6923      	ldr	r3, [r4, #16]
 800e518:	6849      	ldr	r1, [r1, #4]
 800e51a:	eb0a 0903 	add.w	r9, sl, r3
 800e51e:	68a3      	ldr	r3, [r4, #8]
 800e520:	4607      	mov	r7, r0
 800e522:	4616      	mov	r6, r2
 800e524:	f109 0501 	add.w	r5, r9, #1
 800e528:	42ab      	cmp	r3, r5
 800e52a:	db32      	blt.n	800e592 <__lshift+0x86>
 800e52c:	4638      	mov	r0, r7
 800e52e:	f7ff fded 	bl	800e10c <_Balloc>
 800e532:	2300      	movs	r3, #0
 800e534:	4680      	mov	r8, r0
 800e536:	f100 0114 	add.w	r1, r0, #20
 800e53a:	461a      	mov	r2, r3
 800e53c:	4553      	cmp	r3, sl
 800e53e:	db2b      	blt.n	800e598 <__lshift+0x8c>
 800e540:	6920      	ldr	r0, [r4, #16]
 800e542:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e546:	f104 0314 	add.w	r3, r4, #20
 800e54a:	f016 021f 	ands.w	r2, r6, #31
 800e54e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e552:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e556:	d025      	beq.n	800e5a4 <__lshift+0x98>
 800e558:	f1c2 0e20 	rsb	lr, r2, #32
 800e55c:	2000      	movs	r0, #0
 800e55e:	681e      	ldr	r6, [r3, #0]
 800e560:	468a      	mov	sl, r1
 800e562:	4096      	lsls	r6, r2
 800e564:	4330      	orrs	r0, r6
 800e566:	f84a 0b04 	str.w	r0, [sl], #4
 800e56a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e56e:	459c      	cmp	ip, r3
 800e570:	fa20 f00e 	lsr.w	r0, r0, lr
 800e574:	d814      	bhi.n	800e5a0 <__lshift+0x94>
 800e576:	6048      	str	r0, [r1, #4]
 800e578:	b108      	cbz	r0, 800e57e <__lshift+0x72>
 800e57a:	f109 0502 	add.w	r5, r9, #2
 800e57e:	3d01      	subs	r5, #1
 800e580:	4638      	mov	r0, r7
 800e582:	f8c8 5010 	str.w	r5, [r8, #16]
 800e586:	4621      	mov	r1, r4
 800e588:	f7ff fdf4 	bl	800e174 <_Bfree>
 800e58c:	4640      	mov	r0, r8
 800e58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e592:	3101      	adds	r1, #1
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	e7c7      	b.n	800e528 <__lshift+0x1c>
 800e598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e59c:	3301      	adds	r3, #1
 800e59e:	e7cd      	b.n	800e53c <__lshift+0x30>
 800e5a0:	4651      	mov	r1, sl
 800e5a2:	e7dc      	b.n	800e55e <__lshift+0x52>
 800e5a4:	3904      	subs	r1, #4
 800e5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5ae:	459c      	cmp	ip, r3
 800e5b0:	d8f9      	bhi.n	800e5a6 <__lshift+0x9a>
 800e5b2:	e7e4      	b.n	800e57e <__lshift+0x72>

0800e5b4 <__mcmp>:
 800e5b4:	6903      	ldr	r3, [r0, #16]
 800e5b6:	690a      	ldr	r2, [r1, #16]
 800e5b8:	1a9b      	subs	r3, r3, r2
 800e5ba:	b530      	push	{r4, r5, lr}
 800e5bc:	d10c      	bne.n	800e5d8 <__mcmp+0x24>
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	3014      	adds	r0, #20
 800e5c2:	3114      	adds	r1, #20
 800e5c4:	1884      	adds	r4, r0, r2
 800e5c6:	4411      	add	r1, r2
 800e5c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5d0:	4295      	cmp	r5, r2
 800e5d2:	d003      	beq.n	800e5dc <__mcmp+0x28>
 800e5d4:	d305      	bcc.n	800e5e2 <__mcmp+0x2e>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	4618      	mov	r0, r3
 800e5da:	bd30      	pop	{r4, r5, pc}
 800e5dc:	42a0      	cmp	r0, r4
 800e5de:	d3f3      	bcc.n	800e5c8 <__mcmp+0x14>
 800e5e0:	e7fa      	b.n	800e5d8 <__mcmp+0x24>
 800e5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5e6:	e7f7      	b.n	800e5d8 <__mcmp+0x24>

0800e5e8 <__mdiff>:
 800e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ec:	460d      	mov	r5, r1
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	f7ff ffdd 	bl	800e5b4 <__mcmp>
 800e5fa:	1e06      	subs	r6, r0, #0
 800e5fc:	d108      	bne.n	800e610 <__mdiff+0x28>
 800e5fe:	4631      	mov	r1, r6
 800e600:	4638      	mov	r0, r7
 800e602:	f7ff fd83 	bl	800e10c <_Balloc>
 800e606:	2301      	movs	r3, #1
 800e608:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e610:	bfa4      	itt	ge
 800e612:	4623      	movge	r3, r4
 800e614:	462c      	movge	r4, r5
 800e616:	4638      	mov	r0, r7
 800e618:	6861      	ldr	r1, [r4, #4]
 800e61a:	bfa6      	itte	ge
 800e61c:	461d      	movge	r5, r3
 800e61e:	2600      	movge	r6, #0
 800e620:	2601      	movlt	r6, #1
 800e622:	f7ff fd73 	bl	800e10c <_Balloc>
 800e626:	692b      	ldr	r3, [r5, #16]
 800e628:	60c6      	str	r6, [r0, #12]
 800e62a:	6926      	ldr	r6, [r4, #16]
 800e62c:	f105 0914 	add.w	r9, r5, #20
 800e630:	f104 0214 	add.w	r2, r4, #20
 800e634:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e638:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e63c:	f100 0514 	add.w	r5, r0, #20
 800e640:	f04f 0e00 	mov.w	lr, #0
 800e644:	f852 ab04 	ldr.w	sl, [r2], #4
 800e648:	f859 4b04 	ldr.w	r4, [r9], #4
 800e64c:	fa1e f18a 	uxtah	r1, lr, sl
 800e650:	b2a3      	uxth	r3, r4
 800e652:	1ac9      	subs	r1, r1, r3
 800e654:	0c23      	lsrs	r3, r4, #16
 800e656:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e65a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e65e:	b289      	uxth	r1, r1
 800e660:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e664:	45c8      	cmp	r8, r9
 800e666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e66a:	4694      	mov	ip, r2
 800e66c:	f845 3b04 	str.w	r3, [r5], #4
 800e670:	d8e8      	bhi.n	800e644 <__mdiff+0x5c>
 800e672:	45bc      	cmp	ip, r7
 800e674:	d304      	bcc.n	800e680 <__mdiff+0x98>
 800e676:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e67a:	b183      	cbz	r3, 800e69e <__mdiff+0xb6>
 800e67c:	6106      	str	r6, [r0, #16]
 800e67e:	e7c5      	b.n	800e60c <__mdiff+0x24>
 800e680:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e684:	fa1e f381 	uxtah	r3, lr, r1
 800e688:	141a      	asrs	r2, r3, #16
 800e68a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e68e:	b29b      	uxth	r3, r3
 800e690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e694:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e698:	f845 3b04 	str.w	r3, [r5], #4
 800e69c:	e7e9      	b.n	800e672 <__mdiff+0x8a>
 800e69e:	3e01      	subs	r6, #1
 800e6a0:	e7e9      	b.n	800e676 <__mdiff+0x8e>
	...

0800e6a4 <__ulp>:
 800e6a4:	4b12      	ldr	r3, [pc, #72]	; (800e6f0 <__ulp+0x4c>)
 800e6a6:	ee10 2a90 	vmov	r2, s1
 800e6aa:	401a      	ands	r2, r3
 800e6ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dd04      	ble.n	800e6be <__ulp+0x1a>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	ec41 0b10 	vmov	d0, r0, r1
 800e6bc:	4770      	bx	lr
 800e6be:	425b      	negs	r3, r3
 800e6c0:	151b      	asrs	r3, r3, #20
 800e6c2:	2b13      	cmp	r3, #19
 800e6c4:	f04f 0000 	mov.w	r0, #0
 800e6c8:	f04f 0100 	mov.w	r1, #0
 800e6cc:	dc04      	bgt.n	800e6d8 <__ulp+0x34>
 800e6ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e6d2:	fa42 f103 	asr.w	r1, r2, r3
 800e6d6:	e7ef      	b.n	800e6b8 <__ulp+0x14>
 800e6d8:	3b14      	subs	r3, #20
 800e6da:	2b1e      	cmp	r3, #30
 800e6dc:	f04f 0201 	mov.w	r2, #1
 800e6e0:	bfda      	itte	le
 800e6e2:	f1c3 031f 	rsble	r3, r3, #31
 800e6e6:	fa02 f303 	lslle.w	r3, r2, r3
 800e6ea:	4613      	movgt	r3, r2
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	e7e3      	b.n	800e6b8 <__ulp+0x14>
 800e6f0:	7ff00000 	.word	0x7ff00000

0800e6f4 <__b2d>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	6905      	ldr	r5, [r0, #16]
 800e6f8:	f100 0714 	add.w	r7, r0, #20
 800e6fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e700:	1f2e      	subs	r6, r5, #4
 800e702:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e706:	4620      	mov	r0, r4
 800e708:	f7ff fdc4 	bl	800e294 <__hi0bits>
 800e70c:	f1c0 0320 	rsb	r3, r0, #32
 800e710:	280a      	cmp	r0, #10
 800e712:	600b      	str	r3, [r1, #0]
 800e714:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e78c <__b2d+0x98>
 800e718:	dc14      	bgt.n	800e744 <__b2d+0x50>
 800e71a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e71e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e722:	42b7      	cmp	r7, r6
 800e724:	ea41 030c 	orr.w	r3, r1, ip
 800e728:	bf34      	ite	cc
 800e72a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e72e:	2100      	movcs	r1, #0
 800e730:	3015      	adds	r0, #21
 800e732:	fa04 f000 	lsl.w	r0, r4, r0
 800e736:	fa21 f10e 	lsr.w	r1, r1, lr
 800e73a:	ea40 0201 	orr.w	r2, r0, r1
 800e73e:	ec43 2b10 	vmov	d0, r2, r3
 800e742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e744:	42b7      	cmp	r7, r6
 800e746:	bf3a      	itte	cc
 800e748:	f1a5 0608 	subcc.w	r6, r5, #8
 800e74c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e750:	2100      	movcs	r1, #0
 800e752:	380b      	subs	r0, #11
 800e754:	d015      	beq.n	800e782 <__b2d+0x8e>
 800e756:	4084      	lsls	r4, r0
 800e758:	f1c0 0520 	rsb	r5, r0, #32
 800e75c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e760:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e764:	42be      	cmp	r6, r7
 800e766:	fa21 fc05 	lsr.w	ip, r1, r5
 800e76a:	ea44 030c 	orr.w	r3, r4, ip
 800e76e:	bf8c      	ite	hi
 800e770:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e774:	2400      	movls	r4, #0
 800e776:	fa01 f000 	lsl.w	r0, r1, r0
 800e77a:	40ec      	lsrs	r4, r5
 800e77c:	ea40 0204 	orr.w	r2, r0, r4
 800e780:	e7dd      	b.n	800e73e <__b2d+0x4a>
 800e782:	ea44 030c 	orr.w	r3, r4, ip
 800e786:	460a      	mov	r2, r1
 800e788:	e7d9      	b.n	800e73e <__b2d+0x4a>
 800e78a:	bf00      	nop
 800e78c:	3ff00000 	.word	0x3ff00000

0800e790 <__d2b>:
 800e790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e794:	460e      	mov	r6, r1
 800e796:	2101      	movs	r1, #1
 800e798:	ec59 8b10 	vmov	r8, r9, d0
 800e79c:	4615      	mov	r5, r2
 800e79e:	f7ff fcb5 	bl	800e10c <_Balloc>
 800e7a2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e7a6:	4607      	mov	r7, r0
 800e7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7ac:	bb34      	cbnz	r4, 800e7fc <__d2b+0x6c>
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	f1b8 0300 	subs.w	r3, r8, #0
 800e7b4:	d027      	beq.n	800e806 <__d2b+0x76>
 800e7b6:	a802      	add	r0, sp, #8
 800e7b8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e7bc:	f7ff fd89 	bl	800e2d2 <__lo0bits>
 800e7c0:	9900      	ldr	r1, [sp, #0]
 800e7c2:	b1f0      	cbz	r0, 800e802 <__d2b+0x72>
 800e7c4:	9a01      	ldr	r2, [sp, #4]
 800e7c6:	f1c0 0320 	rsb	r3, r0, #32
 800e7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ce:	430b      	orrs	r3, r1
 800e7d0:	40c2      	lsrs	r2, r0
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	9201      	str	r2, [sp, #4]
 800e7d6:	9b01      	ldr	r3, [sp, #4]
 800e7d8:	61bb      	str	r3, [r7, #24]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	bf14      	ite	ne
 800e7de:	2102      	movne	r1, #2
 800e7e0:	2101      	moveq	r1, #1
 800e7e2:	6139      	str	r1, [r7, #16]
 800e7e4:	b1c4      	cbz	r4, 800e818 <__d2b+0x88>
 800e7e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e7ea:	4404      	add	r4, r0
 800e7ec:	6034      	str	r4, [r6, #0]
 800e7ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7f2:	6028      	str	r0, [r5, #0]
 800e7f4:	4638      	mov	r0, r7
 800e7f6:	b003      	add	sp, #12
 800e7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e800:	e7d5      	b.n	800e7ae <__d2b+0x1e>
 800e802:	6179      	str	r1, [r7, #20]
 800e804:	e7e7      	b.n	800e7d6 <__d2b+0x46>
 800e806:	a801      	add	r0, sp, #4
 800e808:	f7ff fd63 	bl	800e2d2 <__lo0bits>
 800e80c:	9b01      	ldr	r3, [sp, #4]
 800e80e:	617b      	str	r3, [r7, #20]
 800e810:	2101      	movs	r1, #1
 800e812:	6139      	str	r1, [r7, #16]
 800e814:	3020      	adds	r0, #32
 800e816:	e7e5      	b.n	800e7e4 <__d2b+0x54>
 800e818:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e81c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e820:	6030      	str	r0, [r6, #0]
 800e822:	6918      	ldr	r0, [r3, #16]
 800e824:	f7ff fd36 	bl	800e294 <__hi0bits>
 800e828:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e82c:	e7e1      	b.n	800e7f2 <__d2b+0x62>

0800e82e <__ratio>:
 800e82e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e832:	4688      	mov	r8, r1
 800e834:	4669      	mov	r1, sp
 800e836:	4681      	mov	r9, r0
 800e838:	f7ff ff5c 	bl	800e6f4 <__b2d>
 800e83c:	a901      	add	r1, sp, #4
 800e83e:	4640      	mov	r0, r8
 800e840:	ec57 6b10 	vmov	r6, r7, d0
 800e844:	f7ff ff56 	bl	800e6f4 <__b2d>
 800e848:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e84c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e850:	eba3 0c02 	sub.w	ip, r3, r2
 800e854:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e858:	1a9b      	subs	r3, r3, r2
 800e85a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e85e:	ec5b ab10 	vmov	sl, fp, d0
 800e862:	2b00      	cmp	r3, #0
 800e864:	bfce      	itee	gt
 800e866:	463a      	movgt	r2, r7
 800e868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e86c:	465a      	movle	r2, fp
 800e86e:	4659      	mov	r1, fp
 800e870:	463d      	mov	r5, r7
 800e872:	bfd4      	ite	le
 800e874:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e878:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e87c:	4630      	mov	r0, r6
 800e87e:	ee10 2a10 	vmov	r2, s0
 800e882:	460b      	mov	r3, r1
 800e884:	4629      	mov	r1, r5
 800e886:	f7f2 f80b 	bl	80008a0 <__aeabi_ddiv>
 800e88a:	ec41 0b10 	vmov	d0, r0, r1
 800e88e:	b003      	add	sp, #12
 800e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e894 <__copybits>:
 800e894:	3901      	subs	r1, #1
 800e896:	b510      	push	{r4, lr}
 800e898:	1149      	asrs	r1, r1, #5
 800e89a:	6914      	ldr	r4, [r2, #16]
 800e89c:	3101      	adds	r1, #1
 800e89e:	f102 0314 	add.w	r3, r2, #20
 800e8a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e8a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e8aa:	42a3      	cmp	r3, r4
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	d303      	bcc.n	800e8b8 <__copybits+0x24>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	428a      	cmp	r2, r1
 800e8b4:	d305      	bcc.n	800e8c2 <__copybits+0x2e>
 800e8b6:	bd10      	pop	{r4, pc}
 800e8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8bc:	f840 2b04 	str.w	r2, [r0], #4
 800e8c0:	e7f3      	b.n	800e8aa <__copybits+0x16>
 800e8c2:	f842 3b04 	str.w	r3, [r2], #4
 800e8c6:	e7f4      	b.n	800e8b2 <__copybits+0x1e>

0800e8c8 <__any_on>:
 800e8c8:	f100 0214 	add.w	r2, r0, #20
 800e8cc:	6900      	ldr	r0, [r0, #16]
 800e8ce:	114b      	asrs	r3, r1, #5
 800e8d0:	4298      	cmp	r0, r3
 800e8d2:	b510      	push	{r4, lr}
 800e8d4:	db11      	blt.n	800e8fa <__any_on+0x32>
 800e8d6:	dd0a      	ble.n	800e8ee <__any_on+0x26>
 800e8d8:	f011 011f 	ands.w	r1, r1, #31
 800e8dc:	d007      	beq.n	800e8ee <__any_on+0x26>
 800e8de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e8e2:	fa24 f001 	lsr.w	r0, r4, r1
 800e8e6:	fa00 f101 	lsl.w	r1, r0, r1
 800e8ea:	428c      	cmp	r4, r1
 800e8ec:	d10b      	bne.n	800e906 <__any_on+0x3e>
 800e8ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d803      	bhi.n	800e8fe <__any_on+0x36>
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	bd10      	pop	{r4, pc}
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	e7f7      	b.n	800e8ee <__any_on+0x26>
 800e8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e902:	2900      	cmp	r1, #0
 800e904:	d0f5      	beq.n	800e8f2 <__any_on+0x2a>
 800e906:	2001      	movs	r0, #1
 800e908:	e7f6      	b.n	800e8f8 <__any_on+0x30>

0800e90a <_calloc_r>:
 800e90a:	b538      	push	{r3, r4, r5, lr}
 800e90c:	fb02 f401 	mul.w	r4, r2, r1
 800e910:	4621      	mov	r1, r4
 800e912:	f000 f857 	bl	800e9c4 <_malloc_r>
 800e916:	4605      	mov	r5, r0
 800e918:	b118      	cbz	r0, 800e922 <_calloc_r+0x18>
 800e91a:	4622      	mov	r2, r4
 800e91c:	2100      	movs	r1, #0
 800e91e:	f7fb fcca 	bl	800a2b6 <memset>
 800e922:	4628      	mov	r0, r5
 800e924:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e928 <_free_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4605      	mov	r5, r0
 800e92c:	2900      	cmp	r1, #0
 800e92e:	d045      	beq.n	800e9bc <_free_r+0x94>
 800e930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e934:	1f0c      	subs	r4, r1, #4
 800e936:	2b00      	cmp	r3, #0
 800e938:	bfb8      	it	lt
 800e93a:	18e4      	addlt	r4, r4, r3
 800e93c:	f000 fb14 	bl	800ef68 <__malloc_lock>
 800e940:	4a1f      	ldr	r2, [pc, #124]	; (800e9c0 <_free_r+0x98>)
 800e942:	6813      	ldr	r3, [r2, #0]
 800e944:	4610      	mov	r0, r2
 800e946:	b933      	cbnz	r3, 800e956 <_free_r+0x2e>
 800e948:	6063      	str	r3, [r4, #4]
 800e94a:	6014      	str	r4, [r2, #0]
 800e94c:	4628      	mov	r0, r5
 800e94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e952:	f000 bb0a 	b.w	800ef6a <__malloc_unlock>
 800e956:	42a3      	cmp	r3, r4
 800e958:	d90c      	bls.n	800e974 <_free_r+0x4c>
 800e95a:	6821      	ldr	r1, [r4, #0]
 800e95c:	1862      	adds	r2, r4, r1
 800e95e:	4293      	cmp	r3, r2
 800e960:	bf04      	itt	eq
 800e962:	681a      	ldreq	r2, [r3, #0]
 800e964:	685b      	ldreq	r3, [r3, #4]
 800e966:	6063      	str	r3, [r4, #4]
 800e968:	bf04      	itt	eq
 800e96a:	1852      	addeq	r2, r2, r1
 800e96c:	6022      	streq	r2, [r4, #0]
 800e96e:	6004      	str	r4, [r0, #0]
 800e970:	e7ec      	b.n	800e94c <_free_r+0x24>
 800e972:	4613      	mov	r3, r2
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	b10a      	cbz	r2, 800e97c <_free_r+0x54>
 800e978:	42a2      	cmp	r2, r4
 800e97a:	d9fa      	bls.n	800e972 <_free_r+0x4a>
 800e97c:	6819      	ldr	r1, [r3, #0]
 800e97e:	1858      	adds	r0, r3, r1
 800e980:	42a0      	cmp	r0, r4
 800e982:	d10b      	bne.n	800e99c <_free_r+0x74>
 800e984:	6820      	ldr	r0, [r4, #0]
 800e986:	4401      	add	r1, r0
 800e988:	1858      	adds	r0, r3, r1
 800e98a:	4282      	cmp	r2, r0
 800e98c:	6019      	str	r1, [r3, #0]
 800e98e:	d1dd      	bne.n	800e94c <_free_r+0x24>
 800e990:	6810      	ldr	r0, [r2, #0]
 800e992:	6852      	ldr	r2, [r2, #4]
 800e994:	605a      	str	r2, [r3, #4]
 800e996:	4401      	add	r1, r0
 800e998:	6019      	str	r1, [r3, #0]
 800e99a:	e7d7      	b.n	800e94c <_free_r+0x24>
 800e99c:	d902      	bls.n	800e9a4 <_free_r+0x7c>
 800e99e:	230c      	movs	r3, #12
 800e9a0:	602b      	str	r3, [r5, #0]
 800e9a2:	e7d3      	b.n	800e94c <_free_r+0x24>
 800e9a4:	6820      	ldr	r0, [r4, #0]
 800e9a6:	1821      	adds	r1, r4, r0
 800e9a8:	428a      	cmp	r2, r1
 800e9aa:	bf04      	itt	eq
 800e9ac:	6811      	ldreq	r1, [r2, #0]
 800e9ae:	6852      	ldreq	r2, [r2, #4]
 800e9b0:	6062      	str	r2, [r4, #4]
 800e9b2:	bf04      	itt	eq
 800e9b4:	1809      	addeq	r1, r1, r0
 800e9b6:	6021      	streq	r1, [r4, #0]
 800e9b8:	605c      	str	r4, [r3, #4]
 800e9ba:	e7c7      	b.n	800e94c <_free_r+0x24>
 800e9bc:	bd38      	pop	{r3, r4, r5, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000432c 	.word	0x2000432c

0800e9c4 <_malloc_r>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	1ccd      	adds	r5, r1, #3
 800e9c8:	f025 0503 	bic.w	r5, r5, #3
 800e9cc:	3508      	adds	r5, #8
 800e9ce:	2d0c      	cmp	r5, #12
 800e9d0:	bf38      	it	cc
 800e9d2:	250c      	movcc	r5, #12
 800e9d4:	2d00      	cmp	r5, #0
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	db01      	blt.n	800e9de <_malloc_r+0x1a>
 800e9da:	42a9      	cmp	r1, r5
 800e9dc:	d903      	bls.n	800e9e6 <_malloc_r+0x22>
 800e9de:	230c      	movs	r3, #12
 800e9e0:	6033      	str	r3, [r6, #0]
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	bd70      	pop	{r4, r5, r6, pc}
 800e9e6:	f000 fabf 	bl	800ef68 <__malloc_lock>
 800e9ea:	4a21      	ldr	r2, [pc, #132]	; (800ea70 <_malloc_r+0xac>)
 800e9ec:	6814      	ldr	r4, [r2, #0]
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	b991      	cbnz	r1, 800ea18 <_malloc_r+0x54>
 800e9f2:	4c20      	ldr	r4, [pc, #128]	; (800ea74 <_malloc_r+0xb0>)
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	b91b      	cbnz	r3, 800ea00 <_malloc_r+0x3c>
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f000 f98f 	bl	800ed1c <_sbrk_r>
 800e9fe:	6020      	str	r0, [r4, #0]
 800ea00:	4629      	mov	r1, r5
 800ea02:	4630      	mov	r0, r6
 800ea04:	f000 f98a 	bl	800ed1c <_sbrk_r>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	d124      	bne.n	800ea56 <_malloc_r+0x92>
 800ea0c:	230c      	movs	r3, #12
 800ea0e:	6033      	str	r3, [r6, #0]
 800ea10:	4630      	mov	r0, r6
 800ea12:	f000 faaa 	bl	800ef6a <__malloc_unlock>
 800ea16:	e7e4      	b.n	800e9e2 <_malloc_r+0x1e>
 800ea18:	680b      	ldr	r3, [r1, #0]
 800ea1a:	1b5b      	subs	r3, r3, r5
 800ea1c:	d418      	bmi.n	800ea50 <_malloc_r+0x8c>
 800ea1e:	2b0b      	cmp	r3, #11
 800ea20:	d90f      	bls.n	800ea42 <_malloc_r+0x7e>
 800ea22:	600b      	str	r3, [r1, #0]
 800ea24:	50cd      	str	r5, [r1, r3]
 800ea26:	18cc      	adds	r4, r1, r3
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f000 fa9e 	bl	800ef6a <__malloc_unlock>
 800ea2e:	f104 000b 	add.w	r0, r4, #11
 800ea32:	1d23      	adds	r3, r4, #4
 800ea34:	f020 0007 	bic.w	r0, r0, #7
 800ea38:	1ac3      	subs	r3, r0, r3
 800ea3a:	d0d3      	beq.n	800e9e4 <_malloc_r+0x20>
 800ea3c:	425a      	negs	r2, r3
 800ea3e:	50e2      	str	r2, [r4, r3]
 800ea40:	e7d0      	b.n	800e9e4 <_malloc_r+0x20>
 800ea42:	428c      	cmp	r4, r1
 800ea44:	684b      	ldr	r3, [r1, #4]
 800ea46:	bf16      	itet	ne
 800ea48:	6063      	strne	r3, [r4, #4]
 800ea4a:	6013      	streq	r3, [r2, #0]
 800ea4c:	460c      	movne	r4, r1
 800ea4e:	e7eb      	b.n	800ea28 <_malloc_r+0x64>
 800ea50:	460c      	mov	r4, r1
 800ea52:	6849      	ldr	r1, [r1, #4]
 800ea54:	e7cc      	b.n	800e9f0 <_malloc_r+0x2c>
 800ea56:	1cc4      	adds	r4, r0, #3
 800ea58:	f024 0403 	bic.w	r4, r4, #3
 800ea5c:	42a0      	cmp	r0, r4
 800ea5e:	d005      	beq.n	800ea6c <_malloc_r+0xa8>
 800ea60:	1a21      	subs	r1, r4, r0
 800ea62:	4630      	mov	r0, r6
 800ea64:	f000 f95a 	bl	800ed1c <_sbrk_r>
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d0cf      	beq.n	800ea0c <_malloc_r+0x48>
 800ea6c:	6025      	str	r5, [r4, #0]
 800ea6e:	e7db      	b.n	800ea28 <_malloc_r+0x64>
 800ea70:	2000432c 	.word	0x2000432c
 800ea74:	20004330 	.word	0x20004330

0800ea78 <__ssputs_r>:
 800ea78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7c:	688e      	ldr	r6, [r1, #8]
 800ea7e:	429e      	cmp	r6, r3
 800ea80:	4682      	mov	sl, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4690      	mov	r8, r2
 800ea86:	4699      	mov	r9, r3
 800ea88:	d837      	bhi.n	800eafa <__ssputs_r+0x82>
 800ea8a:	898a      	ldrh	r2, [r1, #12]
 800ea8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea90:	d031      	beq.n	800eaf6 <__ssputs_r+0x7e>
 800ea92:	6825      	ldr	r5, [r4, #0]
 800ea94:	6909      	ldr	r1, [r1, #16]
 800ea96:	1a6f      	subs	r7, r5, r1
 800ea98:	6965      	ldr	r5, [r4, #20]
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eaa0:	fb95 f5f3 	sdiv	r5, r5, r3
 800eaa4:	f109 0301 	add.w	r3, r9, #1
 800eaa8:	443b      	add	r3, r7
 800eaaa:	429d      	cmp	r5, r3
 800eaac:	bf38      	it	cc
 800eaae:	461d      	movcc	r5, r3
 800eab0:	0553      	lsls	r3, r2, #21
 800eab2:	d530      	bpl.n	800eb16 <__ssputs_r+0x9e>
 800eab4:	4629      	mov	r1, r5
 800eab6:	f7ff ff85 	bl	800e9c4 <_malloc_r>
 800eaba:	4606      	mov	r6, r0
 800eabc:	b950      	cbnz	r0, 800ead4 <__ssputs_r+0x5c>
 800eabe:	230c      	movs	r3, #12
 800eac0:	f8ca 3000 	str.w	r3, [sl]
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaca:	81a3      	strh	r3, [r4, #12]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ead0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead4:	463a      	mov	r2, r7
 800ead6:	6921      	ldr	r1, [r4, #16]
 800ead8:	f7fb fbe2 	bl	800a2a0 <memcpy>
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae6:	81a3      	strh	r3, [r4, #12]
 800eae8:	6126      	str	r6, [r4, #16]
 800eaea:	6165      	str	r5, [r4, #20]
 800eaec:	443e      	add	r6, r7
 800eaee:	1bed      	subs	r5, r5, r7
 800eaf0:	6026      	str	r6, [r4, #0]
 800eaf2:	60a5      	str	r5, [r4, #8]
 800eaf4:	464e      	mov	r6, r9
 800eaf6:	454e      	cmp	r6, r9
 800eaf8:	d900      	bls.n	800eafc <__ssputs_r+0x84>
 800eafa:	464e      	mov	r6, r9
 800eafc:	4632      	mov	r2, r6
 800eafe:	4641      	mov	r1, r8
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	f000 fa18 	bl	800ef36 <memmove>
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	1b9b      	subs	r3, r3, r6
 800eb0a:	60a3      	str	r3, [r4, #8]
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	441e      	add	r6, r3
 800eb10:	6026      	str	r6, [r4, #0]
 800eb12:	2000      	movs	r0, #0
 800eb14:	e7dc      	b.n	800ead0 <__ssputs_r+0x58>
 800eb16:	462a      	mov	r2, r5
 800eb18:	f000 fa28 	bl	800ef6c <_realloc_r>
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d1e2      	bne.n	800eae8 <__ssputs_r+0x70>
 800eb22:	6921      	ldr	r1, [r4, #16]
 800eb24:	4650      	mov	r0, sl
 800eb26:	f7ff feff 	bl	800e928 <_free_r>
 800eb2a:	e7c8      	b.n	800eabe <__ssputs_r+0x46>

0800eb2c <_svfiprintf_r>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	461d      	mov	r5, r3
 800eb32:	898b      	ldrh	r3, [r1, #12]
 800eb34:	061f      	lsls	r7, r3, #24
 800eb36:	b09d      	sub	sp, #116	; 0x74
 800eb38:	4680      	mov	r8, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	d50f      	bpl.n	800eb60 <_svfiprintf_r+0x34>
 800eb40:	690b      	ldr	r3, [r1, #16]
 800eb42:	b96b      	cbnz	r3, 800eb60 <_svfiprintf_r+0x34>
 800eb44:	2140      	movs	r1, #64	; 0x40
 800eb46:	f7ff ff3d 	bl	800e9c4 <_malloc_r>
 800eb4a:	6020      	str	r0, [r4, #0]
 800eb4c:	6120      	str	r0, [r4, #16]
 800eb4e:	b928      	cbnz	r0, 800eb5c <_svfiprintf_r+0x30>
 800eb50:	230c      	movs	r3, #12
 800eb52:	f8c8 3000 	str.w	r3, [r8]
 800eb56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb5a:	e0c8      	b.n	800ecee <_svfiprintf_r+0x1c2>
 800eb5c:	2340      	movs	r3, #64	; 0x40
 800eb5e:	6163      	str	r3, [r4, #20]
 800eb60:	2300      	movs	r3, #0
 800eb62:	9309      	str	r3, [sp, #36]	; 0x24
 800eb64:	2320      	movs	r3, #32
 800eb66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb6a:	2330      	movs	r3, #48	; 0x30
 800eb6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb70:	9503      	str	r5, [sp, #12]
 800eb72:	f04f 0b01 	mov.w	fp, #1
 800eb76:	4637      	mov	r7, r6
 800eb78:	463d      	mov	r5, r7
 800eb7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb7e:	b10b      	cbz	r3, 800eb84 <_svfiprintf_r+0x58>
 800eb80:	2b25      	cmp	r3, #37	; 0x25
 800eb82:	d13e      	bne.n	800ec02 <_svfiprintf_r+0xd6>
 800eb84:	ebb7 0a06 	subs.w	sl, r7, r6
 800eb88:	d00b      	beq.n	800eba2 <_svfiprintf_r+0x76>
 800eb8a:	4653      	mov	r3, sl
 800eb8c:	4632      	mov	r2, r6
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4640      	mov	r0, r8
 800eb92:	f7ff ff71 	bl	800ea78 <__ssputs_r>
 800eb96:	3001      	adds	r0, #1
 800eb98:	f000 80a4 	beq.w	800ece4 <_svfiprintf_r+0x1b8>
 800eb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9e:	4453      	add	r3, sl
 800eba0:	9309      	str	r3, [sp, #36]	; 0x24
 800eba2:	783b      	ldrb	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 809d 	beq.w	800ece4 <_svfiprintf_r+0x1b8>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	9307      	str	r3, [sp, #28]
 800ebb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebbc:	931a      	str	r3, [sp, #104]	; 0x68
 800ebbe:	462f      	mov	r7, r5
 800ebc0:	2205      	movs	r2, #5
 800ebc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ebc6:	4850      	ldr	r0, [pc, #320]	; (800ed08 <_svfiprintf_r+0x1dc>)
 800ebc8:	f7f1 fb2a 	bl	8000220 <memchr>
 800ebcc:	9b04      	ldr	r3, [sp, #16]
 800ebce:	b9d0      	cbnz	r0, 800ec06 <_svfiprintf_r+0xda>
 800ebd0:	06d9      	lsls	r1, r3, #27
 800ebd2:	bf44      	itt	mi
 800ebd4:	2220      	movmi	r2, #32
 800ebd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebda:	071a      	lsls	r2, r3, #28
 800ebdc:	bf44      	itt	mi
 800ebde:	222b      	movmi	r2, #43	; 0x2b
 800ebe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebe4:	782a      	ldrb	r2, [r5, #0]
 800ebe6:	2a2a      	cmp	r2, #42	; 0x2a
 800ebe8:	d015      	beq.n	800ec16 <_svfiprintf_r+0xea>
 800ebea:	9a07      	ldr	r2, [sp, #28]
 800ebec:	462f      	mov	r7, r5
 800ebee:	2000      	movs	r0, #0
 800ebf0:	250a      	movs	r5, #10
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebf8:	3b30      	subs	r3, #48	; 0x30
 800ebfa:	2b09      	cmp	r3, #9
 800ebfc:	d94d      	bls.n	800ec9a <_svfiprintf_r+0x16e>
 800ebfe:	b1b8      	cbz	r0, 800ec30 <_svfiprintf_r+0x104>
 800ec00:	e00f      	b.n	800ec22 <_svfiprintf_r+0xf6>
 800ec02:	462f      	mov	r7, r5
 800ec04:	e7b8      	b.n	800eb78 <_svfiprintf_r+0x4c>
 800ec06:	4a40      	ldr	r2, [pc, #256]	; (800ed08 <_svfiprintf_r+0x1dc>)
 800ec08:	1a80      	subs	r0, r0, r2
 800ec0a:	fa0b f000 	lsl.w	r0, fp, r0
 800ec0e:	4318      	orrs	r0, r3
 800ec10:	9004      	str	r0, [sp, #16]
 800ec12:	463d      	mov	r5, r7
 800ec14:	e7d3      	b.n	800ebbe <_svfiprintf_r+0x92>
 800ec16:	9a03      	ldr	r2, [sp, #12]
 800ec18:	1d11      	adds	r1, r2, #4
 800ec1a:	6812      	ldr	r2, [r2, #0]
 800ec1c:	9103      	str	r1, [sp, #12]
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	db01      	blt.n	800ec26 <_svfiprintf_r+0xfa>
 800ec22:	9207      	str	r2, [sp, #28]
 800ec24:	e004      	b.n	800ec30 <_svfiprintf_r+0x104>
 800ec26:	4252      	negs	r2, r2
 800ec28:	f043 0302 	orr.w	r3, r3, #2
 800ec2c:	9207      	str	r2, [sp, #28]
 800ec2e:	9304      	str	r3, [sp, #16]
 800ec30:	783b      	ldrb	r3, [r7, #0]
 800ec32:	2b2e      	cmp	r3, #46	; 0x2e
 800ec34:	d10c      	bne.n	800ec50 <_svfiprintf_r+0x124>
 800ec36:	787b      	ldrb	r3, [r7, #1]
 800ec38:	2b2a      	cmp	r3, #42	; 0x2a
 800ec3a:	d133      	bne.n	800eca4 <_svfiprintf_r+0x178>
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	1d1a      	adds	r2, r3, #4
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	9203      	str	r2, [sp, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	bfb8      	it	lt
 800ec48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec4c:	3702      	adds	r7, #2
 800ec4e:	9305      	str	r3, [sp, #20]
 800ec50:	4d2e      	ldr	r5, [pc, #184]	; (800ed0c <_svfiprintf_r+0x1e0>)
 800ec52:	7839      	ldrb	r1, [r7, #0]
 800ec54:	2203      	movs	r2, #3
 800ec56:	4628      	mov	r0, r5
 800ec58:	f7f1 fae2 	bl	8000220 <memchr>
 800ec5c:	b138      	cbz	r0, 800ec6e <_svfiprintf_r+0x142>
 800ec5e:	2340      	movs	r3, #64	; 0x40
 800ec60:	1b40      	subs	r0, r0, r5
 800ec62:	fa03 f000 	lsl.w	r0, r3, r0
 800ec66:	9b04      	ldr	r3, [sp, #16]
 800ec68:	4303      	orrs	r3, r0
 800ec6a:	3701      	adds	r7, #1
 800ec6c:	9304      	str	r3, [sp, #16]
 800ec6e:	7839      	ldrb	r1, [r7, #0]
 800ec70:	4827      	ldr	r0, [pc, #156]	; (800ed10 <_svfiprintf_r+0x1e4>)
 800ec72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec76:	2206      	movs	r2, #6
 800ec78:	1c7e      	adds	r6, r7, #1
 800ec7a:	f7f1 fad1 	bl	8000220 <memchr>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d038      	beq.n	800ecf4 <_svfiprintf_r+0x1c8>
 800ec82:	4b24      	ldr	r3, [pc, #144]	; (800ed14 <_svfiprintf_r+0x1e8>)
 800ec84:	bb13      	cbnz	r3, 800eccc <_svfiprintf_r+0x1a0>
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	3307      	adds	r3, #7
 800ec8a:	f023 0307 	bic.w	r3, r3, #7
 800ec8e:	3308      	adds	r3, #8
 800ec90:	9303      	str	r3, [sp, #12]
 800ec92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec94:	444b      	add	r3, r9
 800ec96:	9309      	str	r3, [sp, #36]	; 0x24
 800ec98:	e76d      	b.n	800eb76 <_svfiprintf_r+0x4a>
 800ec9a:	fb05 3202 	mla	r2, r5, r2, r3
 800ec9e:	2001      	movs	r0, #1
 800eca0:	460f      	mov	r7, r1
 800eca2:	e7a6      	b.n	800ebf2 <_svfiprintf_r+0xc6>
 800eca4:	2300      	movs	r3, #0
 800eca6:	3701      	adds	r7, #1
 800eca8:	9305      	str	r3, [sp, #20]
 800ecaa:	4619      	mov	r1, r3
 800ecac:	250a      	movs	r5, #10
 800ecae:	4638      	mov	r0, r7
 800ecb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecb4:	3a30      	subs	r2, #48	; 0x30
 800ecb6:	2a09      	cmp	r2, #9
 800ecb8:	d903      	bls.n	800ecc2 <_svfiprintf_r+0x196>
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0c8      	beq.n	800ec50 <_svfiprintf_r+0x124>
 800ecbe:	9105      	str	r1, [sp, #20]
 800ecc0:	e7c6      	b.n	800ec50 <_svfiprintf_r+0x124>
 800ecc2:	fb05 2101 	mla	r1, r5, r1, r2
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	4607      	mov	r7, r0
 800ecca:	e7f0      	b.n	800ecae <_svfiprintf_r+0x182>
 800eccc:	ab03      	add	r3, sp, #12
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	4622      	mov	r2, r4
 800ecd2:	4b11      	ldr	r3, [pc, #68]	; (800ed18 <_svfiprintf_r+0x1ec>)
 800ecd4:	a904      	add	r1, sp, #16
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f7fb fb8a 	bl	800a3f0 <_printf_float>
 800ecdc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ece0:	4681      	mov	r9, r0
 800ece2:	d1d6      	bne.n	800ec92 <_svfiprintf_r+0x166>
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	065b      	lsls	r3, r3, #25
 800ece8:	f53f af35 	bmi.w	800eb56 <_svfiprintf_r+0x2a>
 800ecec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecee:	b01d      	add	sp, #116	; 0x74
 800ecf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf4:	ab03      	add	r3, sp, #12
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	4622      	mov	r2, r4
 800ecfa:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <_svfiprintf_r+0x1ec>)
 800ecfc:	a904      	add	r1, sp, #16
 800ecfe:	4640      	mov	r0, r8
 800ed00:	f7fb fe2c 	bl	800a95c <_printf_i>
 800ed04:	e7ea      	b.n	800ecdc <_svfiprintf_r+0x1b0>
 800ed06:	bf00      	nop
 800ed08:	08012fa4 	.word	0x08012fa4
 800ed0c:	08012faa 	.word	0x08012faa
 800ed10:	08012fae 	.word	0x08012fae
 800ed14:	0800a3f1 	.word	0x0800a3f1
 800ed18:	0800ea79 	.word	0x0800ea79

0800ed1c <_sbrk_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	4c06      	ldr	r4, [pc, #24]	; (800ed38 <_sbrk_r+0x1c>)
 800ed20:	2300      	movs	r3, #0
 800ed22:	4605      	mov	r5, r0
 800ed24:	4608      	mov	r0, r1
 800ed26:	6023      	str	r3, [r4, #0]
 800ed28:	f7fb f940 	bl	8009fac <_sbrk>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d102      	bne.n	800ed36 <_sbrk_r+0x1a>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	b103      	cbz	r3, 800ed36 <_sbrk_r+0x1a>
 800ed34:	602b      	str	r3, [r5, #0]
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	20004a04 	.word	0x20004a04

0800ed3c <siscanf>:
 800ed3c:	b40e      	push	{r1, r2, r3}
 800ed3e:	b530      	push	{r4, r5, lr}
 800ed40:	b09c      	sub	sp, #112	; 0x70
 800ed42:	ac1f      	add	r4, sp, #124	; 0x7c
 800ed44:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ed48:	f854 5b04 	ldr.w	r5, [r4], #4
 800ed4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ed50:	9002      	str	r0, [sp, #8]
 800ed52:	9006      	str	r0, [sp, #24]
 800ed54:	f7f1 fa5c 	bl	8000210 <strlen>
 800ed58:	4b0b      	ldr	r3, [pc, #44]	; (800ed88 <siscanf+0x4c>)
 800ed5a:	9003      	str	r0, [sp, #12]
 800ed5c:	9007      	str	r0, [sp, #28]
 800ed5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed60:	480a      	ldr	r0, [pc, #40]	; (800ed8c <siscanf+0x50>)
 800ed62:	9401      	str	r4, [sp, #4]
 800ed64:	2300      	movs	r3, #0
 800ed66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed68:	9314      	str	r3, [sp, #80]	; 0x50
 800ed6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed72:	462a      	mov	r2, r5
 800ed74:	4623      	mov	r3, r4
 800ed76:	a902      	add	r1, sp, #8
 800ed78:	6800      	ldr	r0, [r0, #0]
 800ed7a:	f000 f977 	bl	800f06c <__ssvfiscanf_r>
 800ed7e:	b01c      	add	sp, #112	; 0x70
 800ed80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed84:	b003      	add	sp, #12
 800ed86:	4770      	bx	lr
 800ed88:	0800ed91 	.word	0x0800ed91
 800ed8c:	20000060 	.word	0x20000060

0800ed90 <__seofread>:
 800ed90:	2000      	movs	r0, #0
 800ed92:	4770      	bx	lr

0800ed94 <strcpy>:
 800ed94:	4603      	mov	r3, r0
 800ed96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed9a:	f803 2b01 	strb.w	r2, [r3], #1
 800ed9e:	2a00      	cmp	r2, #0
 800eda0:	d1f9      	bne.n	800ed96 <strcpy+0x2>
 800eda2:	4770      	bx	lr

0800eda4 <strncmp>:
 800eda4:	b510      	push	{r4, lr}
 800eda6:	b16a      	cbz	r2, 800edc4 <strncmp+0x20>
 800eda8:	3901      	subs	r1, #1
 800edaa:	1884      	adds	r4, r0, r2
 800edac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800edb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d103      	bne.n	800edc0 <strncmp+0x1c>
 800edb8:	42a0      	cmp	r0, r4
 800edba:	d001      	beq.n	800edc0 <strncmp+0x1c>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1f5      	bne.n	800edac <strncmp+0x8>
 800edc0:	1a98      	subs	r0, r3, r2
 800edc2:	bd10      	pop	{r4, pc}
 800edc4:	4610      	mov	r0, r2
 800edc6:	e7fc      	b.n	800edc2 <strncmp+0x1e>

0800edc8 <__tzcalc_limits>:
 800edc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	4680      	mov	r8, r0
 800edce:	f7ff f951 	bl	800e074 <__gettzinfo>
 800edd2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800edd6:	4598      	cmp	r8, r3
 800edd8:	f340 8098 	ble.w	800ef0c <__tzcalc_limits+0x144>
 800eddc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800ede0:	4443      	add	r3, r8
 800ede2:	109b      	asrs	r3, r3, #2
 800ede4:	f240 126d 	movw	r2, #365	; 0x16d
 800ede8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800edec:	fb02 3505 	mla	r5, r2, r5, r3
 800edf0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800edf4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800edf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800edfc:	441d      	add	r5, r3
 800edfe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ee02:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800ee06:	fb98 f7f3 	sdiv	r7, r8, r3
 800ee0a:	fb03 8717 	mls	r7, r3, r7, r8
 800ee0e:	4442      	add	r2, r8
 800ee10:	fab7 fc87 	clz	ip, r7
 800ee14:	fb92 f2f3 	sdiv	r2, r2, r3
 800ee18:	f008 0303 	and.w	r3, r8, #3
 800ee1c:	4415      	add	r5, r2
 800ee1e:	2264      	movs	r2, #100	; 0x64
 800ee20:	f8c0 8004 	str.w	r8, [r0, #4]
 800ee24:	fb98 f6f2 	sdiv	r6, r8, r2
 800ee28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ee2c:	fb02 8616 	mls	r6, r2, r6, r8
 800ee30:	4604      	mov	r4, r0
 800ee32:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	f04f 0e07 	mov.w	lr, #7
 800ee3c:	7a22      	ldrb	r2, [r4, #8]
 800ee3e:	6963      	ldr	r3, [r4, #20]
 800ee40:	2a4a      	cmp	r2, #74	; 0x4a
 800ee42:	d128      	bne.n	800ee96 <__tzcalc_limits+0xce>
 800ee44:	9900      	ldr	r1, [sp, #0]
 800ee46:	18ea      	adds	r2, r5, r3
 800ee48:	b901      	cbnz	r1, 800ee4c <__tzcalc_limits+0x84>
 800ee4a:	b906      	cbnz	r6, 800ee4e <__tzcalc_limits+0x86>
 800ee4c:	bb0f      	cbnz	r7, 800ee92 <__tzcalc_limits+0xca>
 800ee4e:	2b3b      	cmp	r3, #59	; 0x3b
 800ee50:	bfd4      	ite	le
 800ee52:	2300      	movle	r3, #0
 800ee54:	2301      	movgt	r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	1e5a      	subs	r2, r3, #1
 800ee5a:	69a3      	ldr	r3, [r4, #24]
 800ee5c:	492c      	ldr	r1, [pc, #176]	; (800ef10 <__tzcalc_limits+0x148>)
 800ee5e:	fb01 3202 	mla	r2, r1, r2, r3
 800ee62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee64:	4413      	add	r3, r2
 800ee66:	461a      	mov	r2, r3
 800ee68:	17db      	asrs	r3, r3, #31
 800ee6a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ee6e:	3428      	adds	r4, #40	; 0x28
 800ee70:	45a3      	cmp	fp, r4
 800ee72:	d1e3      	bne.n	800ee3c <__tzcalc_limits+0x74>
 800ee74:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800ee78:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800ee7c:	4294      	cmp	r4, r2
 800ee7e:	eb75 0303 	sbcs.w	r3, r5, r3
 800ee82:	bfb4      	ite	lt
 800ee84:	2301      	movlt	r3, #1
 800ee86:	2300      	movge	r3, #0
 800ee88:	6003      	str	r3, [r0, #0]
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	b003      	add	sp, #12
 800ee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee92:	2300      	movs	r3, #0
 800ee94:	e7df      	b.n	800ee56 <__tzcalc_limits+0x8e>
 800ee96:	2a44      	cmp	r2, #68	; 0x44
 800ee98:	d101      	bne.n	800ee9e <__tzcalc_limits+0xd6>
 800ee9a:	18ea      	adds	r2, r5, r3
 800ee9c:	e7dd      	b.n	800ee5a <__tzcalc_limits+0x92>
 800ee9e:	9a00      	ldr	r2, [sp, #0]
 800eea0:	bb72      	cbnz	r2, 800ef00 <__tzcalc_limits+0x138>
 800eea2:	2e00      	cmp	r6, #0
 800eea4:	bf0c      	ite	eq
 800eea6:	46e1      	moveq	r9, ip
 800eea8:	f04f 0901 	movne.w	r9, #1
 800eeac:	2230      	movs	r2, #48	; 0x30
 800eeae:	fb02 f909 	mul.w	r9, r2, r9
 800eeb2:	68e2      	ldr	r2, [r4, #12]
 800eeb4:	9201      	str	r2, [sp, #4]
 800eeb6:	f04f 0800 	mov.w	r8, #0
 800eeba:	462a      	mov	r2, r5
 800eebc:	f108 0801 	add.w	r8, r8, #1
 800eec0:	4914      	ldr	r1, [pc, #80]	; (800ef14 <__tzcalc_limits+0x14c>)
 800eec2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800eec6:	448a      	add	sl, r1
 800eec8:	9901      	ldr	r1, [sp, #4]
 800eeca:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800eece:	4541      	cmp	r1, r8
 800eed0:	dc18      	bgt.n	800ef04 <__tzcalc_limits+0x13c>
 800eed2:	f102 0804 	add.w	r8, r2, #4
 800eed6:	fb98 f9fe 	sdiv	r9, r8, lr
 800eeda:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800eede:	eba8 0909 	sub.w	r9, r8, r9
 800eee2:	ebb3 0909 	subs.w	r9, r3, r9
 800eee6:	6923      	ldr	r3, [r4, #16]
 800eee8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800eeec:	bf48      	it	mi
 800eeee:	f109 0907 	addmi.w	r9, r9, #7
 800eef2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800eef6:	444b      	add	r3, r9
 800eef8:	4553      	cmp	r3, sl
 800eefa:	da05      	bge.n	800ef08 <__tzcalc_limits+0x140>
 800eefc:	441a      	add	r2, r3
 800eefe:	e7ac      	b.n	800ee5a <__tzcalc_limits+0x92>
 800ef00:	46e1      	mov	r9, ip
 800ef02:	e7d3      	b.n	800eeac <__tzcalc_limits+0xe4>
 800ef04:	4452      	add	r2, sl
 800ef06:	e7d9      	b.n	800eebc <__tzcalc_limits+0xf4>
 800ef08:	3b07      	subs	r3, #7
 800ef0a:	e7f5      	b.n	800eef8 <__tzcalc_limits+0x130>
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	e7bd      	b.n	800ee8c <__tzcalc_limits+0xc4>
 800ef10:	00015180 	.word	0x00015180
 800ef14:	080130b8 	.word	0x080130b8

0800ef18 <__ascii_wctomb>:
 800ef18:	b149      	cbz	r1, 800ef2e <__ascii_wctomb+0x16>
 800ef1a:	2aff      	cmp	r2, #255	; 0xff
 800ef1c:	bf85      	ittet	hi
 800ef1e:	238a      	movhi	r3, #138	; 0x8a
 800ef20:	6003      	strhi	r3, [r0, #0]
 800ef22:	700a      	strbls	r2, [r1, #0]
 800ef24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ef28:	bf98      	it	ls
 800ef2a:	2001      	movls	r0, #1
 800ef2c:	4770      	bx	lr
 800ef2e:	4608      	mov	r0, r1
 800ef30:	4770      	bx	lr

0800ef32 <__env_lock>:
 800ef32:	4770      	bx	lr

0800ef34 <__env_unlock>:
 800ef34:	4770      	bx	lr

0800ef36 <memmove>:
 800ef36:	4288      	cmp	r0, r1
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	eb01 0302 	add.w	r3, r1, r2
 800ef3e:	d807      	bhi.n	800ef50 <memmove+0x1a>
 800ef40:	1e42      	subs	r2, r0, #1
 800ef42:	4299      	cmp	r1, r3
 800ef44:	d00a      	beq.n	800ef5c <memmove+0x26>
 800ef46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ef4e:	e7f8      	b.n	800ef42 <memmove+0xc>
 800ef50:	4283      	cmp	r3, r0
 800ef52:	d9f5      	bls.n	800ef40 <memmove+0xa>
 800ef54:	1881      	adds	r1, r0, r2
 800ef56:	1ad2      	subs	r2, r2, r3
 800ef58:	42d3      	cmn	r3, r2
 800ef5a:	d100      	bne.n	800ef5e <memmove+0x28>
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ef66:	e7f7      	b.n	800ef58 <memmove+0x22>

0800ef68 <__malloc_lock>:
 800ef68:	4770      	bx	lr

0800ef6a <__malloc_unlock>:
 800ef6a:	4770      	bx	lr

0800ef6c <_realloc_r>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	4607      	mov	r7, r0
 800ef70:	4614      	mov	r4, r2
 800ef72:	460e      	mov	r6, r1
 800ef74:	b921      	cbnz	r1, 800ef80 <_realloc_r+0x14>
 800ef76:	4611      	mov	r1, r2
 800ef78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef7c:	f7ff bd22 	b.w	800e9c4 <_malloc_r>
 800ef80:	b922      	cbnz	r2, 800ef8c <_realloc_r+0x20>
 800ef82:	f7ff fcd1 	bl	800e928 <_free_r>
 800ef86:	4625      	mov	r5, r4
 800ef88:	4628      	mov	r0, r5
 800ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef8c:	f000 fb82 	bl	800f694 <_malloc_usable_size_r>
 800ef90:	42a0      	cmp	r0, r4
 800ef92:	d20f      	bcs.n	800efb4 <_realloc_r+0x48>
 800ef94:	4621      	mov	r1, r4
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7ff fd14 	bl	800e9c4 <_malloc_r>
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d0f2      	beq.n	800ef88 <_realloc_r+0x1c>
 800efa2:	4631      	mov	r1, r6
 800efa4:	4622      	mov	r2, r4
 800efa6:	f7fb f97b 	bl	800a2a0 <memcpy>
 800efaa:	4631      	mov	r1, r6
 800efac:	4638      	mov	r0, r7
 800efae:	f7ff fcbb 	bl	800e928 <_free_r>
 800efb2:	e7e9      	b.n	800ef88 <_realloc_r+0x1c>
 800efb4:	4635      	mov	r5, r6
 800efb6:	e7e7      	b.n	800ef88 <_realloc_r+0x1c>

0800efb8 <_sungetc_r>:
 800efb8:	b538      	push	{r3, r4, r5, lr}
 800efba:	1c4b      	adds	r3, r1, #1
 800efbc:	4614      	mov	r4, r2
 800efbe:	d103      	bne.n	800efc8 <_sungetc_r+0x10>
 800efc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800efc4:	4628      	mov	r0, r5
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	8993      	ldrh	r3, [r2, #12]
 800efca:	f023 0320 	bic.w	r3, r3, #32
 800efce:	8193      	strh	r3, [r2, #12]
 800efd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efd2:	6852      	ldr	r2, [r2, #4]
 800efd4:	b2cd      	uxtb	r5, r1
 800efd6:	b18b      	cbz	r3, 800effc <_sungetc_r+0x44>
 800efd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efda:	4293      	cmp	r3, r2
 800efdc:	dd08      	ble.n	800eff0 <_sungetc_r+0x38>
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	1e5a      	subs	r2, r3, #1
 800efe2:	6022      	str	r2, [r4, #0]
 800efe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800efe8:	6863      	ldr	r3, [r4, #4]
 800efea:	3301      	adds	r3, #1
 800efec:	6063      	str	r3, [r4, #4]
 800efee:	e7e9      	b.n	800efc4 <_sungetc_r+0xc>
 800eff0:	4621      	mov	r1, r4
 800eff2:	f000 fb15 	bl	800f620 <__submore>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d0f1      	beq.n	800efde <_sungetc_r+0x26>
 800effa:	e7e1      	b.n	800efc0 <_sungetc_r+0x8>
 800effc:	6921      	ldr	r1, [r4, #16]
 800effe:	6823      	ldr	r3, [r4, #0]
 800f000:	b151      	cbz	r1, 800f018 <_sungetc_r+0x60>
 800f002:	4299      	cmp	r1, r3
 800f004:	d208      	bcs.n	800f018 <_sungetc_r+0x60>
 800f006:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f00a:	42a9      	cmp	r1, r5
 800f00c:	d104      	bne.n	800f018 <_sungetc_r+0x60>
 800f00e:	3b01      	subs	r3, #1
 800f010:	3201      	adds	r2, #1
 800f012:	6023      	str	r3, [r4, #0]
 800f014:	6062      	str	r2, [r4, #4]
 800f016:	e7d5      	b.n	800efc4 <_sungetc_r+0xc>
 800f018:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f020:	6363      	str	r3, [r4, #52]	; 0x34
 800f022:	2303      	movs	r3, #3
 800f024:	63a3      	str	r3, [r4, #56]	; 0x38
 800f026:	4623      	mov	r3, r4
 800f028:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	2301      	movs	r3, #1
 800f030:	e7dc      	b.n	800efec <_sungetc_r+0x34>

0800f032 <__ssrefill_r>:
 800f032:	b510      	push	{r4, lr}
 800f034:	460c      	mov	r4, r1
 800f036:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f038:	b169      	cbz	r1, 800f056 <__ssrefill_r+0x24>
 800f03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f03e:	4299      	cmp	r1, r3
 800f040:	d001      	beq.n	800f046 <__ssrefill_r+0x14>
 800f042:	f7ff fc71 	bl	800e928 <_free_r>
 800f046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f048:	6063      	str	r3, [r4, #4]
 800f04a:	2000      	movs	r0, #0
 800f04c:	6360      	str	r0, [r4, #52]	; 0x34
 800f04e:	b113      	cbz	r3, 800f056 <__ssrefill_r+0x24>
 800f050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	bd10      	pop	{r4, pc}
 800f056:	6923      	ldr	r3, [r4, #16]
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2300      	movs	r3, #0
 800f05c:	6063      	str	r3, [r4, #4]
 800f05e:	89a3      	ldrh	r3, [r4, #12]
 800f060:	f043 0320 	orr.w	r3, r3, #32
 800f064:	81a3      	strh	r3, [r4, #12]
 800f066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f06a:	e7f3      	b.n	800f054 <__ssrefill_r+0x22>

0800f06c <__ssvfiscanf_r>:
 800f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f074:	460c      	mov	r4, r1
 800f076:	2100      	movs	r1, #0
 800f078:	9144      	str	r1, [sp, #272]	; 0x110
 800f07a:	9145      	str	r1, [sp, #276]	; 0x114
 800f07c:	499f      	ldr	r1, [pc, #636]	; (800f2fc <__ssvfiscanf_r+0x290>)
 800f07e:	91a0      	str	r1, [sp, #640]	; 0x280
 800f080:	f10d 0804 	add.w	r8, sp, #4
 800f084:	499e      	ldr	r1, [pc, #632]	; (800f300 <__ssvfiscanf_r+0x294>)
 800f086:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800f304 <__ssvfiscanf_r+0x298>
 800f08a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f08e:	4606      	mov	r6, r0
 800f090:	4692      	mov	sl, r2
 800f092:	91a1      	str	r1, [sp, #644]	; 0x284
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	270a      	movs	r7, #10
 800f098:	f89a 3000 	ldrb.w	r3, [sl]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f000 812a 	beq.w	800f2f6 <__ssvfiscanf_r+0x28a>
 800f0a2:	4655      	mov	r5, sl
 800f0a4:	f7fe fff2 	bl	800e08c <__locale_ctype_ptr>
 800f0a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 800f0ac:	4458      	add	r0, fp
 800f0ae:	7843      	ldrb	r3, [r0, #1]
 800f0b0:	f013 0308 	ands.w	r3, r3, #8
 800f0b4:	d01c      	beq.n	800f0f0 <__ssvfiscanf_r+0x84>
 800f0b6:	6863      	ldr	r3, [r4, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dd12      	ble.n	800f0e2 <__ssvfiscanf_r+0x76>
 800f0bc:	f7fe ffe6 	bl	800e08c <__locale_ctype_ptr>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	781a      	ldrb	r2, [r3, #0]
 800f0c4:	4410      	add	r0, r2
 800f0c6:	7842      	ldrb	r2, [r0, #1]
 800f0c8:	0712      	lsls	r2, r2, #28
 800f0ca:	d401      	bmi.n	800f0d0 <__ssvfiscanf_r+0x64>
 800f0cc:	46aa      	mov	sl, r5
 800f0ce:	e7e3      	b.n	800f098 <__ssvfiscanf_r+0x2c>
 800f0d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	9245      	str	r2, [sp, #276]	; 0x114
 800f0d6:	6862      	ldr	r2, [r4, #4]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	3a01      	subs	r2, #1
 800f0dc:	6062      	str	r2, [r4, #4]
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	e7e9      	b.n	800f0b6 <__ssvfiscanf_r+0x4a>
 800f0e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	4798      	blx	r3
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d0e6      	beq.n	800f0bc <__ssvfiscanf_r+0x50>
 800f0ee:	e7ed      	b.n	800f0cc <__ssvfiscanf_r+0x60>
 800f0f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f0f4:	f040 8082 	bne.w	800f1fc <__ssvfiscanf_r+0x190>
 800f0f8:	9343      	str	r3, [sp, #268]	; 0x10c
 800f0fa:	9341      	str	r3, [sp, #260]	; 0x104
 800f0fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f100:	2b2a      	cmp	r3, #42	; 0x2a
 800f102:	d103      	bne.n	800f10c <__ssvfiscanf_r+0xa0>
 800f104:	2310      	movs	r3, #16
 800f106:	9341      	str	r3, [sp, #260]	; 0x104
 800f108:	f10a 0502 	add.w	r5, sl, #2
 800f10c:	46aa      	mov	sl, r5
 800f10e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f112:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f116:	2a09      	cmp	r2, #9
 800f118:	d922      	bls.n	800f160 <__ssvfiscanf_r+0xf4>
 800f11a:	2203      	movs	r2, #3
 800f11c:	4879      	ldr	r0, [pc, #484]	; (800f304 <__ssvfiscanf_r+0x298>)
 800f11e:	f7f1 f87f 	bl	8000220 <memchr>
 800f122:	b138      	cbz	r0, 800f134 <__ssvfiscanf_r+0xc8>
 800f124:	eba0 0309 	sub.w	r3, r0, r9
 800f128:	2001      	movs	r0, #1
 800f12a:	4098      	lsls	r0, r3
 800f12c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f12e:	4318      	orrs	r0, r3
 800f130:	9041      	str	r0, [sp, #260]	; 0x104
 800f132:	46aa      	mov	sl, r5
 800f134:	f89a 3000 	ldrb.w	r3, [sl]
 800f138:	2b67      	cmp	r3, #103	; 0x67
 800f13a:	f10a 0501 	add.w	r5, sl, #1
 800f13e:	d82b      	bhi.n	800f198 <__ssvfiscanf_r+0x12c>
 800f140:	2b65      	cmp	r3, #101	; 0x65
 800f142:	f080 809f 	bcs.w	800f284 <__ssvfiscanf_r+0x218>
 800f146:	2b47      	cmp	r3, #71	; 0x47
 800f148:	d810      	bhi.n	800f16c <__ssvfiscanf_r+0x100>
 800f14a:	2b45      	cmp	r3, #69	; 0x45
 800f14c:	f080 809a 	bcs.w	800f284 <__ssvfiscanf_r+0x218>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d06c      	beq.n	800f22e <__ssvfiscanf_r+0x1c2>
 800f154:	2b25      	cmp	r3, #37	; 0x25
 800f156:	d051      	beq.n	800f1fc <__ssvfiscanf_r+0x190>
 800f158:	2303      	movs	r3, #3
 800f15a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f15c:	9742      	str	r7, [sp, #264]	; 0x108
 800f15e:	e027      	b.n	800f1b0 <__ssvfiscanf_r+0x144>
 800f160:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f162:	fb07 1303 	mla	r3, r7, r3, r1
 800f166:	3b30      	subs	r3, #48	; 0x30
 800f168:	9343      	str	r3, [sp, #268]	; 0x10c
 800f16a:	e7cf      	b.n	800f10c <__ssvfiscanf_r+0xa0>
 800f16c:	2b5b      	cmp	r3, #91	; 0x5b
 800f16e:	d06a      	beq.n	800f246 <__ssvfiscanf_r+0x1da>
 800f170:	d80c      	bhi.n	800f18c <__ssvfiscanf_r+0x120>
 800f172:	2b58      	cmp	r3, #88	; 0x58
 800f174:	d1f0      	bne.n	800f158 <__ssvfiscanf_r+0xec>
 800f176:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f17c:	9241      	str	r2, [sp, #260]	; 0x104
 800f17e:	2210      	movs	r2, #16
 800f180:	9242      	str	r2, [sp, #264]	; 0x108
 800f182:	2b6e      	cmp	r3, #110	; 0x6e
 800f184:	bf8c      	ite	hi
 800f186:	2304      	movhi	r3, #4
 800f188:	2303      	movls	r3, #3
 800f18a:	e010      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f18c:	2b63      	cmp	r3, #99	; 0x63
 800f18e:	d065      	beq.n	800f25c <__ssvfiscanf_r+0x1f0>
 800f190:	2b64      	cmp	r3, #100	; 0x64
 800f192:	d1e1      	bne.n	800f158 <__ssvfiscanf_r+0xec>
 800f194:	9742      	str	r7, [sp, #264]	; 0x108
 800f196:	e7f4      	b.n	800f182 <__ssvfiscanf_r+0x116>
 800f198:	2b70      	cmp	r3, #112	; 0x70
 800f19a:	d04b      	beq.n	800f234 <__ssvfiscanf_r+0x1c8>
 800f19c:	d826      	bhi.n	800f1ec <__ssvfiscanf_r+0x180>
 800f19e:	2b6e      	cmp	r3, #110	; 0x6e
 800f1a0:	d062      	beq.n	800f268 <__ssvfiscanf_r+0x1fc>
 800f1a2:	d84c      	bhi.n	800f23e <__ssvfiscanf_r+0x1d2>
 800f1a4:	2b69      	cmp	r3, #105	; 0x69
 800f1a6:	d1d7      	bne.n	800f158 <__ssvfiscanf_r+0xec>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9342      	str	r3, [sp, #264]	; 0x108
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800f1b0:	6863      	ldr	r3, [r4, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	dd68      	ble.n	800f288 <__ssvfiscanf_r+0x21c>
 800f1b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f1b8:	0659      	lsls	r1, r3, #25
 800f1ba:	d407      	bmi.n	800f1cc <__ssvfiscanf_r+0x160>
 800f1bc:	f7fe ff66 	bl	800e08c <__locale_ctype_ptr>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	781a      	ldrb	r2, [r3, #0]
 800f1c4:	4410      	add	r0, r2
 800f1c6:	7842      	ldrb	r2, [r0, #1]
 800f1c8:	0712      	lsls	r2, r2, #28
 800f1ca:	d464      	bmi.n	800f296 <__ssvfiscanf_r+0x22a>
 800f1cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	dc73      	bgt.n	800f2ba <__ssvfiscanf_r+0x24e>
 800f1d2:	466b      	mov	r3, sp
 800f1d4:	4622      	mov	r2, r4
 800f1d6:	a941      	add	r1, sp, #260	; 0x104
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f000 f897 	bl	800f30c <_scanf_chars>
 800f1de:	2801      	cmp	r0, #1
 800f1e0:	f000 8089 	beq.w	800f2f6 <__ssvfiscanf_r+0x28a>
 800f1e4:	2802      	cmp	r0, #2
 800f1e6:	f47f af71 	bne.w	800f0cc <__ssvfiscanf_r+0x60>
 800f1ea:	e01d      	b.n	800f228 <__ssvfiscanf_r+0x1bc>
 800f1ec:	2b75      	cmp	r3, #117	; 0x75
 800f1ee:	d0d1      	beq.n	800f194 <__ssvfiscanf_r+0x128>
 800f1f0:	2b78      	cmp	r3, #120	; 0x78
 800f1f2:	d0c0      	beq.n	800f176 <__ssvfiscanf_r+0x10a>
 800f1f4:	2b73      	cmp	r3, #115	; 0x73
 800f1f6:	d1af      	bne.n	800f158 <__ssvfiscanf_r+0xec>
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	e7d8      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	dd0c      	ble.n	800f21c <__ssvfiscanf_r+0x1b0>
 800f202:	6823      	ldr	r3, [r4, #0]
 800f204:	781a      	ldrb	r2, [r3, #0]
 800f206:	455a      	cmp	r2, fp
 800f208:	d175      	bne.n	800f2f6 <__ssvfiscanf_r+0x28a>
 800f20a:	3301      	adds	r3, #1
 800f20c:	6862      	ldr	r2, [r4, #4]
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f212:	3a01      	subs	r2, #1
 800f214:	3301      	adds	r3, #1
 800f216:	6062      	str	r2, [r4, #4]
 800f218:	9345      	str	r3, [sp, #276]	; 0x114
 800f21a:	e757      	b.n	800f0cc <__ssvfiscanf_r+0x60>
 800f21c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f21e:	4621      	mov	r1, r4
 800f220:	4630      	mov	r0, r6
 800f222:	4798      	blx	r3
 800f224:	2800      	cmp	r0, #0
 800f226:	d0ec      	beq.n	800f202 <__ssvfiscanf_r+0x196>
 800f228:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d159      	bne.n	800f2e2 <__ssvfiscanf_r+0x276>
 800f22e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f232:	e05c      	b.n	800f2ee <__ssvfiscanf_r+0x282>
 800f234:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f236:	f042 0220 	orr.w	r2, r2, #32
 800f23a:	9241      	str	r2, [sp, #260]	; 0x104
 800f23c:	e79b      	b.n	800f176 <__ssvfiscanf_r+0x10a>
 800f23e:	2308      	movs	r3, #8
 800f240:	9342      	str	r3, [sp, #264]	; 0x108
 800f242:	2304      	movs	r3, #4
 800f244:	e7b3      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f246:	4629      	mov	r1, r5
 800f248:	4640      	mov	r0, r8
 800f24a:	f000 f9b7 	bl	800f5bc <__sccl>
 800f24e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f254:	9341      	str	r3, [sp, #260]	; 0x104
 800f256:	4605      	mov	r5, r0
 800f258:	2301      	movs	r3, #1
 800f25a:	e7a8      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f25c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f262:	9341      	str	r3, [sp, #260]	; 0x104
 800f264:	2300      	movs	r3, #0
 800f266:	e7a2      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f268:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f26a:	06c3      	lsls	r3, r0, #27
 800f26c:	f53f af2e 	bmi.w	800f0cc <__ssvfiscanf_r+0x60>
 800f270:	9b00      	ldr	r3, [sp, #0]
 800f272:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f274:	1d19      	adds	r1, r3, #4
 800f276:	9100      	str	r1, [sp, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	07c0      	lsls	r0, r0, #31
 800f27c:	bf4c      	ite	mi
 800f27e:	801a      	strhmi	r2, [r3, #0]
 800f280:	601a      	strpl	r2, [r3, #0]
 800f282:	e723      	b.n	800f0cc <__ssvfiscanf_r+0x60>
 800f284:	2305      	movs	r3, #5
 800f286:	e792      	b.n	800f1ae <__ssvfiscanf_r+0x142>
 800f288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f28a:	4621      	mov	r1, r4
 800f28c:	4630      	mov	r0, r6
 800f28e:	4798      	blx	r3
 800f290:	2800      	cmp	r0, #0
 800f292:	d090      	beq.n	800f1b6 <__ssvfiscanf_r+0x14a>
 800f294:	e7c8      	b.n	800f228 <__ssvfiscanf_r+0x1bc>
 800f296:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f298:	3201      	adds	r2, #1
 800f29a:	9245      	str	r2, [sp, #276]	; 0x114
 800f29c:	6862      	ldr	r2, [r4, #4]
 800f29e:	3a01      	subs	r2, #1
 800f2a0:	2a00      	cmp	r2, #0
 800f2a2:	6062      	str	r2, [r4, #4]
 800f2a4:	dd02      	ble.n	800f2ac <__ssvfiscanf_r+0x240>
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	e787      	b.n	800f1bc <__ssvfiscanf_r+0x150>
 800f2ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4798      	blx	r3
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d081      	beq.n	800f1bc <__ssvfiscanf_r+0x150>
 800f2b8:	e7b6      	b.n	800f228 <__ssvfiscanf_r+0x1bc>
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	dc06      	bgt.n	800f2cc <__ssvfiscanf_r+0x260>
 800f2be:	466b      	mov	r3, sp
 800f2c0:	4622      	mov	r2, r4
 800f2c2:	a941      	add	r1, sp, #260	; 0x104
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f000 f885 	bl	800f3d4 <_scanf_i>
 800f2ca:	e788      	b.n	800f1de <__ssvfiscanf_r+0x172>
 800f2cc:	4b0e      	ldr	r3, [pc, #56]	; (800f308 <__ssvfiscanf_r+0x29c>)
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f43f aefc 	beq.w	800f0cc <__ssvfiscanf_r+0x60>
 800f2d4:	466b      	mov	r3, sp
 800f2d6:	4622      	mov	r2, r4
 800f2d8:	a941      	add	r1, sp, #260	; 0x104
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7fb fc50 	bl	800ab80 <_scanf_float>
 800f2e0:	e77d      	b.n	800f1de <__ssvfiscanf_r+0x172>
 800f2e2:	89a3      	ldrh	r3, [r4, #12]
 800f2e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f2e8:	bf18      	it	ne
 800f2ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f2ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800f2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f2f8:	e7f9      	b.n	800f2ee <__ssvfiscanf_r+0x282>
 800f2fa:	bf00      	nop
 800f2fc:	0800efb9 	.word	0x0800efb9
 800f300:	0800f033 	.word	0x0800f033
 800f304:	08012faa 	.word	0x08012faa
 800f308:	0800ab81 	.word	0x0800ab81

0800f30c <_scanf_chars>:
 800f30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f310:	4615      	mov	r5, r2
 800f312:	688a      	ldr	r2, [r1, #8]
 800f314:	4680      	mov	r8, r0
 800f316:	460c      	mov	r4, r1
 800f318:	b932      	cbnz	r2, 800f328 <_scanf_chars+0x1c>
 800f31a:	698a      	ldr	r2, [r1, #24]
 800f31c:	2a00      	cmp	r2, #0
 800f31e:	bf14      	ite	ne
 800f320:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f324:	2201      	moveq	r2, #1
 800f326:	608a      	str	r2, [r1, #8]
 800f328:	6822      	ldr	r2, [r4, #0]
 800f32a:	06d1      	lsls	r1, r2, #27
 800f32c:	bf5f      	itttt	pl
 800f32e:	681a      	ldrpl	r2, [r3, #0]
 800f330:	1d11      	addpl	r1, r2, #4
 800f332:	6019      	strpl	r1, [r3, #0]
 800f334:	6817      	ldrpl	r7, [r2, #0]
 800f336:	2600      	movs	r6, #0
 800f338:	69a3      	ldr	r3, [r4, #24]
 800f33a:	b1db      	cbz	r3, 800f374 <_scanf_chars+0x68>
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d107      	bne.n	800f350 <_scanf_chars+0x44>
 800f340:	682b      	ldr	r3, [r5, #0]
 800f342:	6962      	ldr	r2, [r4, #20]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	5cd3      	ldrb	r3, [r2, r3]
 800f348:	b9a3      	cbnz	r3, 800f374 <_scanf_chars+0x68>
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	d132      	bne.n	800f3b4 <_scanf_chars+0xa8>
 800f34e:	e006      	b.n	800f35e <_scanf_chars+0x52>
 800f350:	2b02      	cmp	r3, #2
 800f352:	d007      	beq.n	800f364 <_scanf_chars+0x58>
 800f354:	2e00      	cmp	r6, #0
 800f356:	d12d      	bne.n	800f3b4 <_scanf_chars+0xa8>
 800f358:	69a3      	ldr	r3, [r4, #24]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d12a      	bne.n	800f3b4 <_scanf_chars+0xa8>
 800f35e:	2001      	movs	r0, #1
 800f360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f364:	f7fe fe92 	bl	800e08c <__locale_ctype_ptr>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	4418      	add	r0, r3
 800f36e:	7843      	ldrb	r3, [r0, #1]
 800f370:	071b      	lsls	r3, r3, #28
 800f372:	d4ef      	bmi.n	800f354 <_scanf_chars+0x48>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	06da      	lsls	r2, r3, #27
 800f378:	bf5e      	ittt	pl
 800f37a:	682b      	ldrpl	r3, [r5, #0]
 800f37c:	781b      	ldrbpl	r3, [r3, #0]
 800f37e:	703b      	strbpl	r3, [r7, #0]
 800f380:	682a      	ldr	r2, [r5, #0]
 800f382:	686b      	ldr	r3, [r5, #4]
 800f384:	f102 0201 	add.w	r2, r2, #1
 800f388:	602a      	str	r2, [r5, #0]
 800f38a:	68a2      	ldr	r2, [r4, #8]
 800f38c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f390:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f394:	606b      	str	r3, [r5, #4]
 800f396:	f106 0601 	add.w	r6, r6, #1
 800f39a:	bf58      	it	pl
 800f39c:	3701      	addpl	r7, #1
 800f39e:	60a2      	str	r2, [r4, #8]
 800f3a0:	b142      	cbz	r2, 800f3b4 <_scanf_chars+0xa8>
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	dcc8      	bgt.n	800f338 <_scanf_chars+0x2c>
 800f3a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	4798      	blx	r3
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d0c1      	beq.n	800f338 <_scanf_chars+0x2c>
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	f013 0310 	ands.w	r3, r3, #16
 800f3ba:	d105      	bne.n	800f3c8 <_scanf_chars+0xbc>
 800f3bc:	68e2      	ldr	r2, [r4, #12]
 800f3be:	3201      	adds	r2, #1
 800f3c0:	60e2      	str	r2, [r4, #12]
 800f3c2:	69a2      	ldr	r2, [r4, #24]
 800f3c4:	b102      	cbz	r2, 800f3c8 <_scanf_chars+0xbc>
 800f3c6:	703b      	strb	r3, [r7, #0]
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	441e      	add	r6, r3
 800f3cc:	6126      	str	r6, [r4, #16]
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	e7c6      	b.n	800f360 <_scanf_chars+0x54>
	...

0800f3d4 <_scanf_i>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	469a      	mov	sl, r3
 800f3da:	4b74      	ldr	r3, [pc, #464]	; (800f5ac <_scanf_i+0x1d8>)
 800f3dc:	460c      	mov	r4, r1
 800f3de:	4683      	mov	fp, r0
 800f3e0:	4616      	mov	r6, r2
 800f3e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f3e6:	b087      	sub	sp, #28
 800f3e8:	ab03      	add	r3, sp, #12
 800f3ea:	68a7      	ldr	r7, [r4, #8]
 800f3ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f3f0:	4b6f      	ldr	r3, [pc, #444]	; (800f5b0 <_scanf_i+0x1dc>)
 800f3f2:	69a1      	ldr	r1, [r4, #24]
 800f3f4:	4a6f      	ldr	r2, [pc, #444]	; (800f5b4 <_scanf_i+0x1e0>)
 800f3f6:	2903      	cmp	r1, #3
 800f3f8:	bf08      	it	eq
 800f3fa:	461a      	moveq	r2, r3
 800f3fc:	1e7b      	subs	r3, r7, #1
 800f3fe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800f402:	bf84      	itt	hi
 800f404:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f408:	60a3      	strhi	r3, [r4, #8]
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	9200      	str	r2, [sp, #0]
 800f40e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f412:	bf88      	it	hi
 800f414:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f418:	f104 091c 	add.w	r9, r4, #28
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	bf8c      	ite	hi
 800f420:	197f      	addhi	r7, r7, r5
 800f422:	2700      	movls	r7, #0
 800f424:	464b      	mov	r3, r9
 800f426:	f04f 0800 	mov.w	r8, #0
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	6831      	ldr	r1, [r6, #0]
 800f42e:	ab03      	add	r3, sp, #12
 800f430:	2202      	movs	r2, #2
 800f432:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f436:	7809      	ldrb	r1, [r1, #0]
 800f438:	f7f0 fef2 	bl	8000220 <memchr>
 800f43c:	9b01      	ldr	r3, [sp, #4]
 800f43e:	b330      	cbz	r0, 800f48e <_scanf_i+0xba>
 800f440:	f1b8 0f01 	cmp.w	r8, #1
 800f444:	d15a      	bne.n	800f4fc <_scanf_i+0x128>
 800f446:	6862      	ldr	r2, [r4, #4]
 800f448:	b92a      	cbnz	r2, 800f456 <_scanf_i+0x82>
 800f44a:	6822      	ldr	r2, [r4, #0]
 800f44c:	2108      	movs	r1, #8
 800f44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f452:	6061      	str	r1, [r4, #4]
 800f454:	6022      	str	r2, [r4, #0]
 800f456:	6822      	ldr	r2, [r4, #0]
 800f458:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f45c:	6022      	str	r2, [r4, #0]
 800f45e:	68a2      	ldr	r2, [r4, #8]
 800f460:	1e51      	subs	r1, r2, #1
 800f462:	60a1      	str	r1, [r4, #8]
 800f464:	b19a      	cbz	r2, 800f48e <_scanf_i+0xba>
 800f466:	6832      	ldr	r2, [r6, #0]
 800f468:	1c51      	adds	r1, r2, #1
 800f46a:	6031      	str	r1, [r6, #0]
 800f46c:	7812      	ldrb	r2, [r2, #0]
 800f46e:	701a      	strb	r2, [r3, #0]
 800f470:	1c5d      	adds	r5, r3, #1
 800f472:	6873      	ldr	r3, [r6, #4]
 800f474:	3b01      	subs	r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	6073      	str	r3, [r6, #4]
 800f47a:	dc07      	bgt.n	800f48c <_scanf_i+0xb8>
 800f47c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f480:	4631      	mov	r1, r6
 800f482:	4658      	mov	r0, fp
 800f484:	4798      	blx	r3
 800f486:	2800      	cmp	r0, #0
 800f488:	f040 8086 	bne.w	800f598 <_scanf_i+0x1c4>
 800f48c:	462b      	mov	r3, r5
 800f48e:	f108 0801 	add.w	r8, r8, #1
 800f492:	f1b8 0f03 	cmp.w	r8, #3
 800f496:	d1c8      	bne.n	800f42a <_scanf_i+0x56>
 800f498:	6862      	ldr	r2, [r4, #4]
 800f49a:	b90a      	cbnz	r2, 800f4a0 <_scanf_i+0xcc>
 800f49c:	220a      	movs	r2, #10
 800f49e:	6062      	str	r2, [r4, #4]
 800f4a0:	6862      	ldr	r2, [r4, #4]
 800f4a2:	4945      	ldr	r1, [pc, #276]	; (800f5b8 <_scanf_i+0x1e4>)
 800f4a4:	6960      	ldr	r0, [r4, #20]
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	1a89      	subs	r1, r1, r2
 800f4aa:	f000 f887 	bl	800f5bc <__sccl>
 800f4ae:	9b01      	ldr	r3, [sp, #4]
 800f4b0:	f04f 0800 	mov.w	r8, #0
 800f4b4:	461d      	mov	r5, r3
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d03a      	beq.n	800f534 <_scanf_i+0x160>
 800f4be:	6831      	ldr	r1, [r6, #0]
 800f4c0:	6960      	ldr	r0, [r4, #20]
 800f4c2:	f891 c000 	ldrb.w	ip, [r1]
 800f4c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d032      	beq.n	800f534 <_scanf_i+0x160>
 800f4ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f4d2:	d121      	bne.n	800f518 <_scanf_i+0x144>
 800f4d4:	0510      	lsls	r0, r2, #20
 800f4d6:	d51f      	bpl.n	800f518 <_scanf_i+0x144>
 800f4d8:	f108 0801 	add.w	r8, r8, #1
 800f4dc:	b117      	cbz	r7, 800f4e4 <_scanf_i+0x110>
 800f4de:	3301      	adds	r3, #1
 800f4e0:	3f01      	subs	r7, #1
 800f4e2:	60a3      	str	r3, [r4, #8]
 800f4e4:	6873      	ldr	r3, [r6, #4]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	6073      	str	r3, [r6, #4]
 800f4ec:	dd1b      	ble.n	800f526 <_scanf_i+0x152>
 800f4ee:	6833      	ldr	r3, [r6, #0]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	6033      	str	r3, [r6, #0]
 800f4f4:	68a3      	ldr	r3, [r4, #8]
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	60a3      	str	r3, [r4, #8]
 800f4fa:	e7dc      	b.n	800f4b6 <_scanf_i+0xe2>
 800f4fc:	f1b8 0f02 	cmp.w	r8, #2
 800f500:	d1ad      	bne.n	800f45e <_scanf_i+0x8a>
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f508:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f50c:	d1bf      	bne.n	800f48e <_scanf_i+0xba>
 800f50e:	2110      	movs	r1, #16
 800f510:	6061      	str	r1, [r4, #4]
 800f512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f516:	e7a1      	b.n	800f45c <_scanf_i+0x88>
 800f518:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f51c:	6022      	str	r2, [r4, #0]
 800f51e:	780b      	ldrb	r3, [r1, #0]
 800f520:	702b      	strb	r3, [r5, #0]
 800f522:	3501      	adds	r5, #1
 800f524:	e7de      	b.n	800f4e4 <_scanf_i+0x110>
 800f526:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f52a:	4631      	mov	r1, r6
 800f52c:	4658      	mov	r0, fp
 800f52e:	4798      	blx	r3
 800f530:	2800      	cmp	r0, #0
 800f532:	d0df      	beq.n	800f4f4 <_scanf_i+0x120>
 800f534:	6823      	ldr	r3, [r4, #0]
 800f536:	05d9      	lsls	r1, r3, #23
 800f538:	d50c      	bpl.n	800f554 <_scanf_i+0x180>
 800f53a:	454d      	cmp	r5, r9
 800f53c:	d908      	bls.n	800f550 <_scanf_i+0x17c>
 800f53e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f546:	4632      	mov	r2, r6
 800f548:	4658      	mov	r0, fp
 800f54a:	4798      	blx	r3
 800f54c:	1e6f      	subs	r7, r5, #1
 800f54e:	463d      	mov	r5, r7
 800f550:	454d      	cmp	r5, r9
 800f552:	d029      	beq.n	800f5a8 <_scanf_i+0x1d4>
 800f554:	6822      	ldr	r2, [r4, #0]
 800f556:	f012 0210 	ands.w	r2, r2, #16
 800f55a:	d113      	bne.n	800f584 <_scanf_i+0x1b0>
 800f55c:	702a      	strb	r2, [r5, #0]
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	9e00      	ldr	r6, [sp, #0]
 800f562:	4649      	mov	r1, r9
 800f564:	4658      	mov	r0, fp
 800f566:	47b0      	blx	r6
 800f568:	f8da 3000 	ldr.w	r3, [sl]
 800f56c:	6821      	ldr	r1, [r4, #0]
 800f56e:	1d1a      	adds	r2, r3, #4
 800f570:	f8ca 2000 	str.w	r2, [sl]
 800f574:	f011 0f20 	tst.w	r1, #32
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	d010      	beq.n	800f59e <_scanf_i+0x1ca>
 800f57c:	6018      	str	r0, [r3, #0]
 800f57e:	68e3      	ldr	r3, [r4, #12]
 800f580:	3301      	adds	r3, #1
 800f582:	60e3      	str	r3, [r4, #12]
 800f584:	eba5 0509 	sub.w	r5, r5, r9
 800f588:	44a8      	add	r8, r5
 800f58a:	6925      	ldr	r5, [r4, #16]
 800f58c:	4445      	add	r5, r8
 800f58e:	6125      	str	r5, [r4, #16]
 800f590:	2000      	movs	r0, #0
 800f592:	b007      	add	sp, #28
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	f04f 0800 	mov.w	r8, #0
 800f59c:	e7ca      	b.n	800f534 <_scanf_i+0x160>
 800f59e:	07ca      	lsls	r2, r1, #31
 800f5a0:	bf4c      	ite	mi
 800f5a2:	8018      	strhmi	r0, [r3, #0]
 800f5a4:	6018      	strpl	r0, [r3, #0]
 800f5a6:	e7ea      	b.n	800f57e <_scanf_i+0x1aa>
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	e7f2      	b.n	800f592 <_scanf_i+0x1be>
 800f5ac:	0800f78c 	.word	0x0800f78c
 800f5b0:	0800c821 	.word	0x0800c821
 800f5b4:	0800c939 	.word	0x0800c939
 800f5b8:	08013128 	.word	0x08013128

0800f5bc <__sccl>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	780b      	ldrb	r3, [r1, #0]
 800f5c0:	2b5e      	cmp	r3, #94	; 0x5e
 800f5c2:	bf13      	iteet	ne
 800f5c4:	1c4a      	addne	r2, r1, #1
 800f5c6:	1c8a      	addeq	r2, r1, #2
 800f5c8:	784b      	ldrbeq	r3, [r1, #1]
 800f5ca:	2100      	movne	r1, #0
 800f5cc:	bf08      	it	eq
 800f5ce:	2101      	moveq	r1, #1
 800f5d0:	1e44      	subs	r4, r0, #1
 800f5d2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800f5d6:	f804 1f01 	strb.w	r1, [r4, #1]!
 800f5da:	42ac      	cmp	r4, r5
 800f5dc:	d1fb      	bne.n	800f5d6 <__sccl+0x1a>
 800f5de:	b913      	cbnz	r3, 800f5e6 <__sccl+0x2a>
 800f5e0:	3a01      	subs	r2, #1
 800f5e2:	4610      	mov	r0, r2
 800f5e4:	bd70      	pop	{r4, r5, r6, pc}
 800f5e6:	f081 0401 	eor.w	r4, r1, #1
 800f5ea:	54c4      	strb	r4, [r0, r3]
 800f5ec:	1c51      	adds	r1, r2, #1
 800f5ee:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800f5f2:	2d2d      	cmp	r5, #45	; 0x2d
 800f5f4:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800f5f8:	460a      	mov	r2, r1
 800f5fa:	d006      	beq.n	800f60a <__sccl+0x4e>
 800f5fc:	2d5d      	cmp	r5, #93	; 0x5d
 800f5fe:	d0f0      	beq.n	800f5e2 <__sccl+0x26>
 800f600:	b90d      	cbnz	r5, 800f606 <__sccl+0x4a>
 800f602:	4632      	mov	r2, r6
 800f604:	e7ed      	b.n	800f5e2 <__sccl+0x26>
 800f606:	462b      	mov	r3, r5
 800f608:	e7ef      	b.n	800f5ea <__sccl+0x2e>
 800f60a:	780e      	ldrb	r6, [r1, #0]
 800f60c:	2e5d      	cmp	r6, #93	; 0x5d
 800f60e:	d0fa      	beq.n	800f606 <__sccl+0x4a>
 800f610:	42b3      	cmp	r3, r6
 800f612:	dcf8      	bgt.n	800f606 <__sccl+0x4a>
 800f614:	3301      	adds	r3, #1
 800f616:	429e      	cmp	r6, r3
 800f618:	54c4      	strb	r4, [r0, r3]
 800f61a:	dcfb      	bgt.n	800f614 <__sccl+0x58>
 800f61c:	3102      	adds	r1, #2
 800f61e:	e7e6      	b.n	800f5ee <__sccl+0x32>

0800f620 <__submore>:
 800f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f624:	460c      	mov	r4, r1
 800f626:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f62c:	4299      	cmp	r1, r3
 800f62e:	d11d      	bne.n	800f66c <__submore+0x4c>
 800f630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f634:	f7ff f9c6 	bl	800e9c4 <_malloc_r>
 800f638:	b918      	cbnz	r0, 800f642 <__submore+0x22>
 800f63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f646:	63a3      	str	r3, [r4, #56]	; 0x38
 800f648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f64c:	6360      	str	r0, [r4, #52]	; 0x34
 800f64e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f656:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f65a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f65e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f662:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f666:	6020      	str	r0, [r4, #0]
 800f668:	2000      	movs	r0, #0
 800f66a:	e7e8      	b.n	800f63e <__submore+0x1e>
 800f66c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f66e:	0077      	lsls	r7, r6, #1
 800f670:	463a      	mov	r2, r7
 800f672:	f7ff fc7b 	bl	800ef6c <_realloc_r>
 800f676:	4605      	mov	r5, r0
 800f678:	2800      	cmp	r0, #0
 800f67a:	d0de      	beq.n	800f63a <__submore+0x1a>
 800f67c:	eb00 0806 	add.w	r8, r0, r6
 800f680:	4601      	mov	r1, r0
 800f682:	4632      	mov	r2, r6
 800f684:	4640      	mov	r0, r8
 800f686:	f7fa fe0b 	bl	800a2a0 <memcpy>
 800f68a:	f8c4 8000 	str.w	r8, [r4]
 800f68e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f692:	e7e9      	b.n	800f668 <__submore+0x48>

0800f694 <_malloc_usable_size_r>:
 800f694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f698:	1f18      	subs	r0, r3, #4
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	bfbc      	itt	lt
 800f69e:	580b      	ldrlt	r3, [r1, r0]
 800f6a0:	18c0      	addlt	r0, r0, r3
 800f6a2:	4770      	bx	lr

0800f6a4 <round>:
 800f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a6:	ec57 6b10 	vmov	r6, r7, d0
 800f6aa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800f6ae:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800f6b2:	2c13      	cmp	r4, #19
 800f6b4:	463b      	mov	r3, r7
 800f6b6:	463d      	mov	r5, r7
 800f6b8:	dc17      	bgt.n	800f6ea <round+0x46>
 800f6ba:	2c00      	cmp	r4, #0
 800f6bc:	da09      	bge.n	800f6d2 <round+0x2e>
 800f6be:	3401      	adds	r4, #1
 800f6c0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800f6c4:	d103      	bne.n	800f6ce <round+0x2a>
 800f6c6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f6ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	e02c      	b.n	800f72c <round+0x88>
 800f6d2:	4a18      	ldr	r2, [pc, #96]	; (800f734 <round+0x90>)
 800f6d4:	4122      	asrs	r2, r4
 800f6d6:	4217      	tst	r7, r2
 800f6d8:	d100      	bne.n	800f6dc <round+0x38>
 800f6da:	b19e      	cbz	r6, 800f704 <round+0x60>
 800f6dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f6e0:	4123      	asrs	r3, r4
 800f6e2:	442b      	add	r3, r5
 800f6e4:	ea23 0302 	bic.w	r3, r3, r2
 800f6e8:	e7f1      	b.n	800f6ce <round+0x2a>
 800f6ea:	2c33      	cmp	r4, #51	; 0x33
 800f6ec:	dd0d      	ble.n	800f70a <round+0x66>
 800f6ee:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f6f2:	d107      	bne.n	800f704 <round+0x60>
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	ee10 2a10 	vmov	r2, s0
 800f6fc:	f7f0 fdf0 	bl	80002e0 <__adddf3>
 800f700:	4606      	mov	r6, r0
 800f702:	460f      	mov	r7, r1
 800f704:	ec47 6b10 	vmov	d0, r6, r7
 800f708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f70a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800f70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f712:	40d0      	lsrs	r0, r2
 800f714:	4206      	tst	r6, r0
 800f716:	d0f5      	beq.n	800f704 <round+0x60>
 800f718:	2201      	movs	r2, #1
 800f71a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f71e:	fa02 f404 	lsl.w	r4, r2, r4
 800f722:	1931      	adds	r1, r6, r4
 800f724:	bf28      	it	cs
 800f726:	189b      	addcs	r3, r3, r2
 800f728:	ea21 0100 	bic.w	r1, r1, r0
 800f72c:	461f      	mov	r7, r3
 800f72e:	460e      	mov	r6, r1
 800f730:	e7e8      	b.n	800f704 <round+0x60>
 800f732:	bf00      	nop
 800f734:	000fffff 	.word	0x000fffff

0800f738 <_init>:
 800f738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73a:	bf00      	nop
 800f73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f73e:	bc08      	pop	{r3}
 800f740:	469e      	mov	lr, r3
 800f742:	4770      	bx	lr

0800f744 <_fini>:
 800f744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f746:	bf00      	nop
 800f748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74a:	bc08      	pop	{r3}
 800f74c:	469e      	mov	lr, r3
 800f74e:	4770      	bx	lr
