
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be0  0800d1b0  0800d1b0  0001d1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd90  0800fd90  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd90  0800fd90  0001fd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd98  0800fd98  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd98  0800fd98  0001fd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd9c  0800fd9c  0001fd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800fda0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004644  20000228  0800ffc8  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000486c  0800ffc8  0002486c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034385  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c60  00000000  00000000  000545dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b201  00000000  00000000  0005a23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002368  00000000  00000000  00075440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000021c0  00000000  00000000  000777a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002cf30  00000000  00000000  00079968  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001de99  00000000  00000000  000a6898  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00108414  00000000  00000000  000c4731  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001ccb45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074f0  00000000  00000000  001ccbc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d194 	.word	0x0800d194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800d194 	.word	0x0800d194

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d84:	f1a2 0201 	sub.w	r2, r2, #1
 8000d88:	d1ed      	bne.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f02:	f000 b9f3 	b.w	80012ec <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 b9a8 	b.w	80012ec <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2lz>:
 8000fb4:	ee07 0a90 	vmov	s15, r0
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d401      	bmi.n	8000fc6 <__aeabi_f2lz+0x12>
 8000fc2:	f000 b809 	b.w	8000fd8 <__aeabi_f2ulz>
 8000fc6:	b508      	push	{r3, lr}
 8000fc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f000 f804 	bl	8000fd8 <__aeabi_f2ulz>
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd6:	bd08      	pop	{r3, pc}

08000fd8 <__aeabi_f2ulz>:
 8000fd8:	b5d0      	push	{r4, r6, r7, lr}
 8000fda:	f7ff fad5 	bl	8000588 <__aeabi_f2d>
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <__aeabi_f2ulz+0x40>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fb27 	bl	8000638 <__aeabi_dmul>
 8000fea:	f7ff fdfd 	bl	8000be8 <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff faa8 	bl	8000544 <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <__aeabi_f2ulz+0x44>)
 8000ff8:	f7ff fb1e 	bl	8000638 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f960 	bl	80002c8 <__aeabi_dsub>
 8001008:	f7ff fdee 	bl	8000be8 <__aeabi_d2uiz>
 800100c:	2200      	movs	r2, #0
 800100e:	4623      	mov	r3, r4
 8001010:	4310      	orrs	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	bdd0      	pop	{r4, r6, r7, pc}
 8001016:	bf00      	nop
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9e08      	ldr	r6, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	4688      	mov	r8, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14b      	bne.n	80010c6 <__udivmoddi4+0xa6>
 800102e:	428a      	cmp	r2, r1
 8001030:	4615      	mov	r5, r2
 8001032:	d967      	bls.n	8001104 <__udivmoddi4+0xe4>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0720 	rsb	r7, r2, #32
 800103e:	fa01 f302 	lsl.w	r3, r1, r2
 8001042:	fa20 f707 	lsr.w	r7, r0, r7
 8001046:	4095      	lsls	r5, r2
 8001048:	ea47 0803 	orr.w	r8, r7, r3
 800104c:	4094      	lsls	r4, r2
 800104e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001052:	0c23      	lsrs	r3, r4, #16
 8001054:	fbb8 f7fe 	udiv	r7, r8, lr
 8001058:	fa1f fc85 	uxth.w	ip, r5
 800105c:	fb0e 8817 	mls	r8, lr, r7, r8
 8001060:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001064:	fb07 f10c 	mul.w	r1, r7, ip
 8001068:	4299      	cmp	r1, r3
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x60>
 800106c:	18eb      	adds	r3, r5, r3
 800106e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001072:	f080 811b 	bcs.w	80012ac <__udivmoddi4+0x28c>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 8118 	bls.w	80012ac <__udivmoddi4+0x28c>
 800107c:	3f02      	subs	r7, #2
 800107e:	442b      	add	r3, r5
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b2a4      	uxth	r4, r4
 8001084:	fbb3 f0fe 	udiv	r0, r3, lr
 8001088:	fb0e 3310 	mls	r3, lr, r0, r3
 800108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001090:	fb00 fc0c 	mul.w	ip, r0, ip
 8001094:	45a4      	cmp	ip, r4
 8001096:	d909      	bls.n	80010ac <__udivmoddi4+0x8c>
 8001098:	192c      	adds	r4, r5, r4
 800109a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800109e:	f080 8107 	bcs.w	80012b0 <__udivmoddi4+0x290>
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	f240 8104 	bls.w	80012b0 <__udivmoddi4+0x290>
 80010a8:	3802      	subs	r0, #2
 80010aa:	442c      	add	r4, r5
 80010ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010b0:	eba4 040c 	sub.w	r4, r4, ip
 80010b4:	2700      	movs	r7, #0
 80010b6:	b11e      	cbz	r6, 80010c0 <__udivmoddi4+0xa0>
 80010b8:	40d4      	lsrs	r4, r2
 80010ba:	2300      	movs	r3, #0
 80010bc:	e9c6 4300 	strd	r4, r3, [r6]
 80010c0:	4639      	mov	r1, r7
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d909      	bls.n	80010de <__udivmoddi4+0xbe>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	f000 80eb 	beq.w	80012a6 <__udivmoddi4+0x286>
 80010d0:	2700      	movs	r7, #0
 80010d2:	e9c6 0100 	strd	r0, r1, [r6]
 80010d6:	4638      	mov	r0, r7
 80010d8:	4639      	mov	r1, r7
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	fab3 f783 	clz	r7, r3
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d147      	bne.n	8001176 <__udivmoddi4+0x156>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d302      	bcc.n	80010f0 <__udivmoddi4+0xd0>
 80010ea:	4282      	cmp	r2, r0
 80010ec:	f200 80fa 	bhi.w	80012e4 <__udivmoddi4+0x2c4>
 80010f0:	1a84      	subs	r4, r0, r2
 80010f2:	eb61 0303 	sbc.w	r3, r1, r3
 80010f6:	2001      	movs	r0, #1
 80010f8:	4698      	mov	r8, r3
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d0e0      	beq.n	80010c0 <__udivmoddi4+0xa0>
 80010fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001102:	e7dd      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001104:	b902      	cbnz	r2, 8001108 <__udivmoddi4+0xe8>
 8001106:	deff      	udf	#255	; 0xff
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	2a00      	cmp	r2, #0
 800110e:	f040 808f 	bne.w	8001230 <__udivmoddi4+0x210>
 8001112:	1b49      	subs	r1, r1, r5
 8001114:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001118:	fa1f f885 	uxth.w	r8, r5
 800111c:	2701      	movs	r7, #1
 800111e:	fbb1 fcfe 	udiv	ip, r1, lr
 8001122:	0c23      	lsrs	r3, r4, #16
 8001124:	fb0e 111c 	mls	r1, lr, ip, r1
 8001128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800112c:	fb08 f10c 	mul.w	r1, r8, ip
 8001130:	4299      	cmp	r1, r3
 8001132:	d907      	bls.n	8001144 <__udivmoddi4+0x124>
 8001134:	18eb      	adds	r3, r5, r3
 8001136:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800113a:	d202      	bcs.n	8001142 <__udivmoddi4+0x122>
 800113c:	4299      	cmp	r1, r3
 800113e:	f200 80cd 	bhi.w	80012dc <__udivmoddi4+0x2bc>
 8001142:	4684      	mov	ip, r0
 8001144:	1a59      	subs	r1, r3, r1
 8001146:	b2a3      	uxth	r3, r4
 8001148:	fbb1 f0fe 	udiv	r0, r1, lr
 800114c:	fb0e 1410 	mls	r4, lr, r0, r1
 8001150:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001154:	fb08 f800 	mul.w	r8, r8, r0
 8001158:	45a0      	cmp	r8, r4
 800115a:	d907      	bls.n	800116c <__udivmoddi4+0x14c>
 800115c:	192c      	adds	r4, r5, r4
 800115e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x14a>
 8001164:	45a0      	cmp	r8, r4
 8001166:	f200 80b6 	bhi.w	80012d6 <__udivmoddi4+0x2b6>
 800116a:	4618      	mov	r0, r3
 800116c:	eba4 0408 	sub.w	r4, r4, r8
 8001170:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001174:	e79f      	b.n	80010b6 <__udivmoddi4+0x96>
 8001176:	f1c7 0c20 	rsb	ip, r7, #32
 800117a:	40bb      	lsls	r3, r7
 800117c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001180:	ea4e 0e03 	orr.w	lr, lr, r3
 8001184:	fa01 f407 	lsl.w	r4, r1, r7
 8001188:	fa20 f50c 	lsr.w	r5, r0, ip
 800118c:	fa21 f30c 	lsr.w	r3, r1, ip
 8001190:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001194:	4325      	orrs	r5, r4
 8001196:	fbb3 f9f8 	udiv	r9, r3, r8
 800119a:	0c2c      	lsrs	r4, r5, #16
 800119c:	fb08 3319 	mls	r3, r8, r9, r3
 80011a0:	fa1f fa8e 	uxth.w	sl, lr
 80011a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80011a8:	fb09 f40a 	mul.w	r4, r9, sl
 80011ac:	429c      	cmp	r4, r3
 80011ae:	fa02 f207 	lsl.w	r2, r2, r7
 80011b2:	fa00 f107 	lsl.w	r1, r0, r7
 80011b6:	d90b      	bls.n	80011d0 <__udivmoddi4+0x1b0>
 80011b8:	eb1e 0303 	adds.w	r3, lr, r3
 80011bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80011c0:	f080 8087 	bcs.w	80012d2 <__udivmoddi4+0x2b2>
 80011c4:	429c      	cmp	r4, r3
 80011c6:	f240 8084 	bls.w	80012d2 <__udivmoddi4+0x2b2>
 80011ca:	f1a9 0902 	sub.w	r9, r9, #2
 80011ce:	4473      	add	r3, lr
 80011d0:	1b1b      	subs	r3, r3, r4
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011d8:	fb08 3310 	mls	r3, r8, r0, r3
 80011dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80011e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80011e4:	45a2      	cmp	sl, r4
 80011e6:	d908      	bls.n	80011fa <__udivmoddi4+0x1da>
 80011e8:	eb1e 0404 	adds.w	r4, lr, r4
 80011ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011f0:	d26b      	bcs.n	80012ca <__udivmoddi4+0x2aa>
 80011f2:	45a2      	cmp	sl, r4
 80011f4:	d969      	bls.n	80012ca <__udivmoddi4+0x2aa>
 80011f6:	3802      	subs	r0, #2
 80011f8:	4474      	add	r4, lr
 80011fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011fe:	fba0 8902 	umull	r8, r9, r0, r2
 8001202:	eba4 040a 	sub.w	r4, r4, sl
 8001206:	454c      	cmp	r4, r9
 8001208:	46c2      	mov	sl, r8
 800120a:	464b      	mov	r3, r9
 800120c:	d354      	bcc.n	80012b8 <__udivmoddi4+0x298>
 800120e:	d051      	beq.n	80012b4 <__udivmoddi4+0x294>
 8001210:	2e00      	cmp	r6, #0
 8001212:	d069      	beq.n	80012e8 <__udivmoddi4+0x2c8>
 8001214:	ebb1 050a 	subs.w	r5, r1, sl
 8001218:	eb64 0403 	sbc.w	r4, r4, r3
 800121c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001220:	40fd      	lsrs	r5, r7
 8001222:	40fc      	lsrs	r4, r7
 8001224:	ea4c 0505 	orr.w	r5, ip, r5
 8001228:	e9c6 5400 	strd	r5, r4, [r6]
 800122c:	2700      	movs	r7, #0
 800122e:	e747      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001230:	f1c2 0320 	rsb	r3, r2, #32
 8001234:	fa20 f703 	lsr.w	r7, r0, r3
 8001238:	4095      	lsls	r5, r2
 800123a:	fa01 f002 	lsl.w	r0, r1, r2
 800123e:	fa21 f303 	lsr.w	r3, r1, r3
 8001242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001246:	4338      	orrs	r0, r7
 8001248:	0c01      	lsrs	r1, r0, #16
 800124a:	fbb3 f7fe 	udiv	r7, r3, lr
 800124e:	fa1f f885 	uxth.w	r8, r5
 8001252:	fb0e 3317 	mls	r3, lr, r7, r3
 8001256:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800125a:	fb07 f308 	mul.w	r3, r7, r8
 800125e:	428b      	cmp	r3, r1
 8001260:	fa04 f402 	lsl.w	r4, r4, r2
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0x256>
 8001266:	1869      	adds	r1, r5, r1
 8001268:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800126c:	d22f      	bcs.n	80012ce <__udivmoddi4+0x2ae>
 800126e:	428b      	cmp	r3, r1
 8001270:	d92d      	bls.n	80012ce <__udivmoddi4+0x2ae>
 8001272:	3f02      	subs	r7, #2
 8001274:	4429      	add	r1, r5
 8001276:	1acb      	subs	r3, r1, r3
 8001278:	b281      	uxth	r1, r0
 800127a:	fbb3 f0fe 	udiv	r0, r3, lr
 800127e:	fb0e 3310 	mls	r3, lr, r0, r3
 8001282:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001286:	fb00 f308 	mul.w	r3, r0, r8
 800128a:	428b      	cmp	r3, r1
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x27e>
 800128e:	1869      	adds	r1, r5, r1
 8001290:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001294:	d217      	bcs.n	80012c6 <__udivmoddi4+0x2a6>
 8001296:	428b      	cmp	r3, r1
 8001298:	d915      	bls.n	80012c6 <__udivmoddi4+0x2a6>
 800129a:	3802      	subs	r0, #2
 800129c:	4429      	add	r1, r5
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80012a4:	e73b      	b.n	800111e <__udivmoddi4+0xfe>
 80012a6:	4637      	mov	r7, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	e709      	b.n	80010c0 <__udivmoddi4+0xa0>
 80012ac:	4607      	mov	r7, r0
 80012ae:	e6e7      	b.n	8001080 <__udivmoddi4+0x60>
 80012b0:	4618      	mov	r0, r3
 80012b2:	e6fb      	b.n	80010ac <__udivmoddi4+0x8c>
 80012b4:	4541      	cmp	r1, r8
 80012b6:	d2ab      	bcs.n	8001210 <__udivmoddi4+0x1f0>
 80012b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80012bc:	eb69 020e 	sbc.w	r2, r9, lr
 80012c0:	3801      	subs	r0, #1
 80012c2:	4613      	mov	r3, r2
 80012c4:	e7a4      	b.n	8001210 <__udivmoddi4+0x1f0>
 80012c6:	4660      	mov	r0, ip
 80012c8:	e7e9      	b.n	800129e <__udivmoddi4+0x27e>
 80012ca:	4618      	mov	r0, r3
 80012cc:	e795      	b.n	80011fa <__udivmoddi4+0x1da>
 80012ce:	4667      	mov	r7, ip
 80012d0:	e7d1      	b.n	8001276 <__udivmoddi4+0x256>
 80012d2:	4681      	mov	r9, r0
 80012d4:	e77c      	b.n	80011d0 <__udivmoddi4+0x1b0>
 80012d6:	3802      	subs	r0, #2
 80012d8:	442c      	add	r4, r5
 80012da:	e747      	b.n	800116c <__udivmoddi4+0x14c>
 80012dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e0:	442b      	add	r3, r5
 80012e2:	e72f      	b.n	8001144 <__udivmoddi4+0x124>
 80012e4:	4638      	mov	r0, r7
 80012e6:	e708      	b.n	80010fa <__udivmoddi4+0xda>
 80012e8:	4637      	mov	r7, r6
 80012ea:	e6e9      	b.n	80010c0 <__udivmoddi4+0xa0>

080012ec <__aeabi_idiv0>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 0;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80012f0:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 80012f2:	f001 f933 	bl	800255c <DWT_Delay>

}
 80012f6:	bd08      	pop	{r3, pc}

080012f8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80012f8:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80012fa:	b938      	cbnz	r0, 800130c <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <NRF24_csn+0x24>)
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <NRF24_csn+0x28>)
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f002 f99c 	bl	8003642 <HAL_GPIO_WritePin>
}
 800130a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <NRF24_csn+0x24>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	4b03      	ldr	r3, [pc, #12]	; (8001320 <NRF24_csn+0x28>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f002 f994 	bl	8003642 <HAL_GPIO_WritePin>
 800131a:	e7f6      	b.n	800130a <NRF24_csn+0x12>
 800131c:	2000024a 	.word	0x2000024a
 8001320:	2000024c 	.word	0x2000024c

08001324 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001324:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001326:	b938      	cbnz	r0, 8001338 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <NRF24_ce+0x24>)
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <NRF24_ce+0x28>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f002 f986 	bl	8003642 <HAL_GPIO_WritePin>
}
 8001336:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <NRF24_ce+0x24>)
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <NRF24_ce+0x28>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f002 f97e 	bl	8003642 <HAL_GPIO_WritePin>
 8001346:	e7f6      	b.n	8001336 <NRF24_ce+0x12>
 8001348:	20000248 	.word	0x20000248
 800134c:	2000024c 	.word	0x2000024c

08001350 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001350:	b510      	push	{r4, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffce 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800135c:	f004 041f 	and.w	r4, r4, #31
 8001360:	a902      	add	r1, sp, #8
 8001362:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <NRF24_read_register+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	480f      	ldr	r0, [pc, #60]	; (80013ac <NRF24_read_register+0x5c>)
 8001370:	f003 fef4 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <NRF24_read_register+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0fb      	beq.n	8001374 <NRF24_read_register+0x24>
	}
	//Receive data
	SPI_RxCplt = 0;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <NRF24_read_register+0x60>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, &spiBuf[1], 1);
 8001382:	2201      	movs	r2, #1
 8001384:	f10d 0105 	add.w	r1, sp, #5
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <NRF24_read_register+0x5c>)
 800138a:	f003 ffb9 	bl	8005300 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <NRF24_read_register+0x60>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fb      	beq.n	800138e <NRF24_read_register+0x3e>
	}
	retData = spiBuf[1];
 8001396:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ffac 	bl	80012f8 <NRF24_csn>
	return retData;
}
 80013a0:	4620      	mov	r0, r4
 80013a2:	b002      	add	sp, #8
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop
 80013a8:	20000245 	.word	0x20000245
 80013ac:	20004224 	.word	0x20004224
 80013b0:	20000244 	.word	0x20000244

080013b4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff9a 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80013c4:	f004 041f 	and.w	r4, r4, #31
 80013c8:	a902      	add	r1, sp, #8
 80013ca:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	SPI_TxCplt = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <NRF24_read_registerN+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <NRF24_read_registerN+0x58>)
 80013d8:	f003 fec0 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <NRF24_read_registerN+0x54>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0fb      	beq.n	80013dc <NRF24_read_registerN+0x28>
	}
	//Receive data
	SPI_RxCplt = 0;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <NRF24_read_registerN+0x5c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, len);
 80013ea:	4632      	mov	r2, r6
 80013ec:	4629      	mov	r1, r5
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <NRF24_read_registerN+0x58>)
 80013f0:	f003 ff86 	bl	8005300 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <NRF24_read_registerN+0x5c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0fb      	beq.n	80013f4 <NRF24_read_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff ff7b 	bl	80012f8 <NRF24_csn>
}
 8001402:	b002      	add	sp, #8
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	bf00      	nop
 8001408:	20000245 	.word	0x20000245
 800140c:	20004224 	.word	0x20004224
 8001410:	20000244 	.word	0x20000244

08001414 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001414:	b530      	push	{r4, r5, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	4604      	mov	r4, r0
 800141a:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff6b 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001422:	f044 0420 	orr.w	r4, r4, #32
 8001426:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 800142a:	f88d 5005 	strb.w	r5, [sp, #5]
	SPI_TxCplt = 0;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <NRF24_write_register+0x3c>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 2);
 8001434:	2202      	movs	r2, #2
 8001436:	a901      	add	r1, sp, #4
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <NRF24_write_register+0x40>)
 800143a:	f003 fe8f 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <NRF24_write_register+0x3c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0fb      	beq.n	800143e <NRF24_write_register+0x2a>
	}
	//Bring CSN high
	NRF24_csn(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ff56 	bl	80012f8 <NRF24_csn>
}
 800144c:	b003      	add	sp, #12
 800144e:	bd30      	pop	{r4, r5, pc}
 8001450:	20000245 	.word	0x20000245
 8001454:	20004224 	.word	0x20004224

08001458 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff48 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001468:	f044 0420 	orr.w	r4, r4, #32
 800146c:	a902      	add	r1, sp, #8
 800146e:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <NRF24_write_registerN+0x54>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <NRF24_write_registerN+0x58>)
 800147c:	f003 fe6e 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <NRF24_write_registerN+0x54>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0fb      	beq.n	8001480 <NRF24_write_registerN+0x28>
	}
	SPI_TxCplt = 0;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <NRF24_write_registerN+0x54>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)buf, len);
 800148e:	4632      	mov	r2, r6
 8001490:	4629      	mov	r1, r5
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <NRF24_write_registerN+0x58>)
 8001494:	f003 fe62 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <NRF24_write_registerN+0x54>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0fb      	beq.n	8001498 <NRF24_write_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff29 	bl	80012f8 <NRF24_csn>
}
 80014a6:	b002      	add	sp, #8
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	bf00      	nop
 80014ac:	20000245 	.word	0x20000245
 80014b0:	20004224 	.word	0x20004224

080014b4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	4604      	mov	r4, r0
 80014ba:	460d      	mov	r5, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff ff1b 	bl	80012f8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80014c2:	a902      	add	r1, sp, #8
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <NRF24_write_payload+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &wrPayloadCmd, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <NRF24_write_payload+0x54>)
 80014d4:	f003 fe42 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <NRF24_write_payload+0x50>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0fb      	beq.n	80014d8 <NRF24_write_payload+0x24>
	}
	SPI_TxCplt = 0;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <NRF24_write_payload+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)buf, len);
 80014e6:	462a      	mov	r2, r5
 80014e8:	4621      	mov	r1, r4
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <NRF24_write_payload+0x54>)
 80014ec:	f003 fe36 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <NRF24_write_payload+0x50>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0fb      	beq.n	80014f0 <NRF24_write_payload+0x3c>
	}
	//Bring CSN high
	NRF24_csn(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fefd 	bl	80012f8 <NRF24_csn>
}
 80014fe:	b003      	add	sp, #12
 8001500:	bd30      	pop	{r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	20000245 	.word	0x20000245
 8001508:	20004224 	.word	0x20004224

0800150c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800150c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800150e:	21ff      	movs	r1, #255	; 0xff
 8001510:	20e1      	movs	r0, #225	; 0xe1
 8001512:	f7ff ff7f 	bl	8001414 <NRF24_write_register>
}
 8001516:	bd08      	pop	{r3, pc}

08001518 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001518:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800151a:	21ff      	movs	r1, #255	; 0xff
 800151c:	20e2      	movs	r0, #226	; 0xe2
 800151e:	f7ff ff79 	bl	8001414 <NRF24_write_register>
}
 8001522:	bd08      	pop	{r3, pc}

08001524 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001524:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001526:	2007      	movs	r0, #7
 8001528:	f7ff ff12 	bl	8001350 <NRF24_read_register>
	return statReg;
}
 800152c:	bd08      	pop	{r3, pc}

0800152e <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800152e:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fef7 	bl	8001324 <NRF24_ce>
	NRF24_flush_tx();
 8001536:	f7ff ffe9 	bl	800150c <NRF24_flush_tx>
	NRF24_flush_rx();
 800153a:	f7ff ffed 	bl	8001518 <NRF24_flush_rx>
}
 800153e:	bd08      	pop	{r3, pc}

08001540 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001540:	b510      	push	{r4, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	ac02      	add	r4, sp, #8
 8001546:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800154a:	2205      	movs	r2, #5
 800154c:	4621      	mov	r1, r4
 800154e:	200a      	movs	r0, #10
 8001550:	f7ff ff82 	bl	8001458 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001554:	2205      	movs	r2, #5
 8001556:	4621      	mov	r1, r4
 8001558:	2010      	movs	r0, #16
 800155a:	f7ff ff7d 	bl	8001458 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <NRF24_openWritingPipe+0x34>)
 8001560:	7819      	ldrb	r1, [r3, #0]
 8001562:	2920      	cmp	r1, #32
 8001564:	bf28      	it	cs
 8001566:	2120      	movcs	r1, #32
 8001568:	2011      	movs	r0, #17
 800156a:	f7ff ff53 	bl	8001414 <NRF24_write_register>
}
 800156e:	b002      	add	sp, #8
 8001570:	bd10      	pop	{r4, pc}
 8001572:	bf00      	nop
 8001574:	200002d0 	.word	0x200002d0

08001578 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001578:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800157a:	f001 010f 	and.w	r1, r1, #15
 800157e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001582:	b2c9      	uxtb	r1, r1
 8001584:	2004      	movs	r0, #4
 8001586:	f7ff ff45 	bl	8001414 <NRF24_write_register>
}
 800158a:	bd08      	pop	{r3, pc}

0800158c <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800158c:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800158e:	4601      	mov	r1, r0
 8001590:	287f      	cmp	r0, #127	; 0x7f
 8001592:	bf28      	it	cs
 8001594:	217f      	movcs	r1, #127	; 0x7f
 8001596:	2005      	movs	r0, #5
 8001598:	f7ff ff3c 	bl	8001414 <NRF24_write_register>
}
 800159c:	bd08      	pop	{r3, pc}
	...

080015a0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 80015a0:	2820      	cmp	r0, #32
 80015a2:	bf28      	it	cs
 80015a4:	2020      	movcs	r0, #32
 80015a6:	4b01      	ldr	r3, [pc, #4]	; (80015ac <NRF24_setPayloadSize+0xc>)
 80015a8:	7018      	strb	r0, [r3, #0]
}
 80015aa:	4770      	bx	lr
 80015ac:	200002d0 	.word	0x200002d0

080015b0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <NRF24_getPayloadSize+0x8>)
 80015b2:	7818      	ldrb	r0, [r3, #0]
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200002d0 	.word	0x200002d0

080015bc <NRF24_read_payload>:
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	4606      	mov	r6, r0
 80015c2:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80015c4:	f7ff fff4 	bl	80015b0 <NRF24_getPayloadSize>
 80015c8:	4604      	mov	r4, r0
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	d900      	bls.n	80015d0 <NRF24_read_payload+0x14>
 80015ce:	462c      	mov	r4, r5
	NRF24_csn(0);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fe91 	bl	80012f8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	2361      	movs	r3, #97	; 0x61
 80015da:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <NRF24_read_payload+0x5c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &cmdRxBuf, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <NRF24_read_payload+0x60>)
 80015e8:	f003 fdb8 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <NRF24_read_payload+0x5c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0fb      	beq.n	80015ec <NRF24_read_payload+0x30>
	SPI_RxCplt = 0;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <NRF24_read_payload+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, data_len);
 80015fa:	b2a2      	uxth	r2, r4
 80015fc:	4631      	mov	r1, r6
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <NRF24_read_payload+0x60>)
 8001600:	f003 fe7e 	bl	8005300 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <NRF24_read_payload+0x64>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0fb      	beq.n	8001604 <NRF24_read_payload+0x48>
	NRF24_csn(1);
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fe73 	bl	80012f8 <NRF24_csn>
}
 8001612:	b002      	add	sp, #8
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	bf00      	nop
 8001618:	20000245 	.word	0x20000245
 800161c:	20004224 	.word	0x20004224
 8001620:	20000244 	.word	0x20000244

08001624 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001624:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001626:	2060      	movs	r0, #96	; 0x60
 8001628:	f7ff fe92 	bl	8001350 <NRF24_read_register>
}
 800162c:	bd08      	pop	{r3, pc}

0800162e <NRF24_read>:
{
 800162e:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001630:	f7ff ffc4 	bl	80015bc <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001634:	2017      	movs	r0, #23
 8001636:	f7ff fe8b 	bl	8001350 <NRF24_read_register>
 800163a:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 800163e:	f7ff ff6b 	bl	8001518 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001642:	f7ff ffef 	bl	8001624 <NRF24_getDynamicPayloadSize>
}
 8001646:	4620      	mov	r0, r4
 8001648:	bd10      	pop	{r4, pc}

0800164a <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800164a:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800164c:	201d      	movs	r0, #29
 800164e:	f7ff fe7f 	bl	8001350 <NRF24_read_register>
 8001652:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8001656:	201d      	movs	r0, #29
 8001658:	f7ff fedc 	bl	8001414 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 800165c:	2100      	movs	r1, #0
 800165e:	201c      	movs	r0, #28
 8001660:	f7ff fed8 	bl	8001414 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 8001664:	bd08      	pop	{r3, pc}

08001666 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001666:	b508      	push	{r3, lr}
	if ( enable )
 8001668:	b920      	cbnz	r0, 8001674 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 800166a:	2100      	movs	r1, #0
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fed1 	bl	8001414 <NRF24_write_register>
}
 8001672:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 8001674:	213f      	movs	r1, #63	; 0x3f
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff fecc 	bl	8001414 <NRF24_write_register>
 800167c:	e7f9      	b.n	8001672 <NRF24_setAutoAck+0xc>

0800167e <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800167e:	b510      	push	{r4, lr}
 8001680:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001682:	2006      	movs	r0, #6
 8001684:	f7ff fe64 	bl	8001350 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001688:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 800168c:	2c03      	cmp	r4, #3
 800168e:	d009      	beq.n	80016a4 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8001690:	2c02      	cmp	r4, #2
 8001692:	d00d      	beq.n	80016b0 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 8001694:	2c01      	cmp	r4, #1
 8001696:	d00e      	beq.n	80016b6 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 8001698:	b134      	cbz	r4, 80016a8 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 800169a:	2c04      	cmp	r4, #4
 800169c:	d104      	bne.n	80016a8 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800169e:	f041 0106 	orr.w	r1, r1, #6
 80016a2:	e001      	b.n	80016a8 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80016a4:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 80016a8:	2006      	movs	r0, #6
 80016aa:	f7ff feb3 	bl	8001414 <NRF24_write_register>
}
 80016ae:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 80016b0:	f041 0104 	orr.w	r1, r1, #4
 80016b4:	e7f8      	b.n	80016a8 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 80016b6:	f041 0102 	orr.w	r1, r1, #2
 80016ba:	e7f5      	b.n	80016a8 <NRF24_setPALevel+0x2a>

080016bc <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016c0:	2006      	movs	r0, #6
 80016c2:	f7ff fe45 	bl	8001350 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80016c6:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 80016ca:	2d02      	cmp	r5, #2
 80016cc:	d00c      	beq.n	80016e8 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 80016ce:	2d01      	cmp	r5, #1
 80016d0:	d00d      	beq.n	80016ee <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 80016d2:	4621      	mov	r1, r4
 80016d4:	2006      	movs	r0, #6
 80016d6:	f7ff fe9d 	bl	8001414 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80016da:	2006      	movs	r0, #6
 80016dc:	f7ff fe38 	bl	8001350 <NRF24_read_register>
 80016e0:	42a0      	cmp	r0, r4
 80016e2:	d007      	beq.n	80016f4 <NRF24_setDataRate+0x38>
	bool result = false;
 80016e4:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 80016e8:	f044 0420 	orr.w	r4, r4, #32
 80016ec:	e7f1      	b.n	80016d2 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 80016ee:	f044 0408 	orr.w	r4, r4, #8
 80016f2:	e7ee      	b.n	80016d2 <NRF24_setDataRate+0x16>
		result = true;
 80016f4:	2001      	movs	r0, #1
 80016f6:	e7f6      	b.n	80016e6 <NRF24_setDataRate+0x2a>

080016f8 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fe27 	bl	8001350 <NRF24_read_register>
 8001702:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001706:	b11c      	cbz	r4, 8001710 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8001708:	2c01      	cmp	r4, #1
 800170a:	d005      	beq.n	8001718 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 800170c:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe7f 	bl	8001414 <NRF24_write_register>
}
 8001716:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 8001718:	f041 0108 	orr.w	r1, r1, #8
 800171c:	e7f8      	b.n	8001710 <NRF24_setCRCLength+0x18>

0800171e <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800171e:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fe15 	bl	8001350 <NRF24_read_register>
 8001726:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fe72 	bl	8001414 <NRF24_write_register>
}
 8001730:	bd08      	pop	{r3, pc}

08001732 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001732:	b570      	push	{r4, r5, r6, lr}
 8001734:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 8001736:	f7ff fef5 	bl	8001524 <NRF24_get_status>
 800173a:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2501      	movne	r5, #1
 8001744:	2500      	moveq	r5, #0

	if (result)
 8001746:	d00b      	beq.n	8001760 <NRF24_availablePipe+0x2e>
 8001748:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 800174a:	b116      	cbz	r6, 8001752 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800174c:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001750:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	2007      	movs	r0, #7
 8001756:	f7ff fe5d 	bl	8001414 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 800175a:	f014 0f20 	tst.w	r4, #32
 800175e:	d101      	bne.n	8001764 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8001760:	4628      	mov	r0, r5
 8001762:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001764:	2120      	movs	r1, #32
 8001766:	2007      	movs	r0, #7
 8001768:	f7ff fe54 	bl	8001414 <NRF24_write_register>
 800176c:	e7f8      	b.n	8001760 <NRF24_availablePipe+0x2e>

0800176e <NRF24_available>:
{
 800176e:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ffde 	bl	8001732 <NRF24_availablePipe>
}
 8001776:	bd08      	pop	{r3, pc}

08001778 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fde6 	bl	8001350 <NRF24_read_register>
 8001784:	f020 0101 	bic.w	r1, r0, #1
 8001788:	f041 0102 	orr.w	r1, r1, #2
 800178c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fe3f 	bl	8001414 <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 8001796:	2096      	movs	r0, #150	; 0x96
 8001798:	f7ff fdaa 	bl	80012f0 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 800179c:	4629      	mov	r1, r5
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fe88 	bl	80014b4 <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff fdbd 	bl	8001324 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f7ff fda0 	bl	80012f0 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff fdb7 	bl	8001324 <NRF24_ce>
}
 80017b6:	bd38      	pop	{r3, r4, r5, pc}

080017b8 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	4605      	mov	r5, r0
 80017bc:	460f      	mov	r7, r1
 80017be:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 80017c0:	f7ff feb0 	bl	8001524 <NRF24_get_status>
 80017c4:	4604      	mov	r4, r0
	*tx_ok = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80017ca:	2170      	movs	r1, #112	; 0x70
 80017cc:	2007      	movs	r0, #7
 80017ce:	f7ff fe21 	bl	8001414 <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80017d2:	f3c4 1340 	ubfx	r3, r4, #5, #1
 80017d6:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80017d8:	f3c4 1300 	ubfx	r3, r4, #4, #1
 80017dc:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80017de:	f3c4 1480 	ubfx	r4, r4, #6, #1
 80017e2:	7034      	strb	r4, [r6, #0]
}
 80017e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017e6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80017e6:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80017e8:	2170      	movs	r1, #112	; 0x70
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff fe12 	bl	8001414 <NRF24_write_register>
}
 80017f0:	bd08      	pop	{r3, pc}
	...

080017f4 <NRF24_write>:
{
 80017f4:	b530      	push	{r4, r5, lr}
 80017f6:	b083      	sub	sp, #12
 80017f8:	4604      	mov	r4, r0
 80017fa:	460d      	mov	r5, r1
	NRF24_resetStatus();
 80017fc:	f7ff fff3 	bl	80017e6 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001800:	4629      	mov	r1, r5
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff ffb8 	bl	8001778 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 8001808:	f000 fedc 	bl	80025c4 <HAL_GetTick>
 800180c:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800180e:	2201      	movs	r2, #1
 8001810:	f10d 0107 	add.w	r1, sp, #7
 8001814:	2008      	movs	r0, #8
 8001816:	f7ff fdcd 	bl	80013b4 <NRF24_read_registerN>
		status = NRF24_get_status();
 800181a:	f7ff fe83 	bl	8001524 <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800181e:	f010 0f30 	tst.w	r0, #48	; 0x30
 8001822:	d104      	bne.n	800182e <NRF24_write+0x3a>
 8001824:	f000 fece 	bl	80025c4 <HAL_GetTick>
 8001828:	1b00      	subs	r0, r0, r4
 800182a:	2809      	cmp	r0, #9
 800182c:	d9ef      	bls.n	800180e <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800182e:	4c0c      	ldr	r4, [pc, #48]	; (8001860 <NRF24_write+0x6c>)
 8001830:	4622      	mov	r2, r4
 8001832:	f10d 0105 	add.w	r1, sp, #5
 8001836:	f10d 0006 	add.w	r0, sp, #6
 800183a:	f7ff ffbd 	bl	80017b8 <NRF24_whatHappened>
	retStatus = tx_ok;
 800183e:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 8001842:	7823      	ldrb	r3, [r4, #0]
 8001844:	b933      	cbnz	r3, 8001854 <NRF24_write+0x60>
	NRF24_available();
 8001846:	f7ff ff92 	bl	800176e <NRF24_available>
	NRF24_flush_tx();
 800184a:	f7ff fe5f 	bl	800150c <NRF24_flush_tx>
}
 800184e:	4628      	mov	r0, r5
 8001850:	b003      	add	sp, #12
 8001852:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8001854:	f7ff fee6 	bl	8001624 <NRF24_getDynamicPayloadSize>
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <NRF24_write+0x70>)
 800185a:	7018      	strb	r0, [r3, #0]
 800185c:	e7f3      	b.n	8001846 <NRF24_write+0x52>
 800185e:	bf00      	nop
 8001860:	20000246 	.word	0x20000246
 8001864:	20000247 	.word	0x20000247

08001868 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001868:	b500      	push	{lr}
 800186a:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fd43 	bl	80012f8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001872:	2350      	movs	r3, #80	; 0x50
 8001874:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8001878:	2373      	movs	r3, #115	; 0x73
 800187a:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxCplt = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <NRF24_ACTIVATE_cmd+0x3c>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, cmdRxBuf, 2);
 8001884:	2202      	movs	r2, #2
 8001886:	a901      	add	r1, sp, #4
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <NRF24_ACTIVATE_cmd+0x40>)
 800188a:	f003 fc67 	bl	800515c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <NRF24_ACTIVATE_cmd+0x3c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0fb      	beq.n	800188e <NRF24_ACTIVATE_cmd+0x26>
	}

	NRF24_csn(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fd2e 	bl	80012f8 <NRF24_csn>
}
 800189c:	b003      	add	sp, #12
 800189e:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a2:	bf00      	nop
 80018a4:	20000245 	.word	0x20000245
 80018a8:	20004224 	.word	0x20004224

080018ac <NRF24_enableAckPayload>:
{
 80018ac:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80018ae:	201d      	movs	r0, #29
 80018b0:	f7ff fd4e 	bl	8001350 <NRF24_read_register>
 80018b4:	f040 0106 	orr.w	r1, r0, #6
 80018b8:	b2c9      	uxtb	r1, r1
 80018ba:	201d      	movs	r0, #29
 80018bc:	f7ff fdaa 	bl	8001414 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80018c0:	201d      	movs	r0, #29
 80018c2:	f7ff fd45 	bl	8001350 <NRF24_read_register>
 80018c6:	b148      	cbz	r0, 80018dc <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80018c8:	201c      	movs	r0, #28
 80018ca:	f7ff fd41 	bl	8001350 <NRF24_read_register>
 80018ce:	f040 0103 	orr.w	r1, r0, #3
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	201c      	movs	r0, #28
 80018d6:	f7ff fd9d 	bl	8001414 <NRF24_write_register>
}
 80018da:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 80018dc:	f7ff ffc4 	bl	8001868 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80018e0:	201d      	movs	r0, #29
 80018e2:	f7ff fd35 	bl	8001350 <NRF24_read_register>
 80018e6:	f040 0106 	orr.w	r1, r0, #6
 80018ea:	b2c9      	uxtb	r1, r1
 80018ec:	201d      	movs	r0, #29
 80018ee:	f7ff fd91 	bl	8001414 <NRF24_write_register>
 80018f2:	e7e9      	b.n	80018c8 <NRF24_enableAckPayload+0x1c>

080018f4 <NRF24_begin>:
{
 80018f4:	b082      	sub	sp, #8
 80018f6:	b530      	push	{r4, r5, lr}
 80018f8:	b083      	sub	sp, #12
 80018fa:	9307      	str	r3, [sp, #28]
	nrf24_PORT = nrf24PORT;
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <NRF24_begin+0x188>)
 80018fe:	6018      	str	r0, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001900:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <NRF24_begin+0x18c>)
 8001902:	8019      	strh	r1, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <NRF24_begin+0x190>)
 8001906:	801a      	strh	r2, [r3, #0]
	NRF24_csn(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fcf5 	bl	80012f8 <NRF24_csn>
	NRF24_ce(0);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fd08 	bl	8001324 <NRF24_ce>
	HAL_Delay(5);
 8001914:	2005      	movs	r0, #5
 8001916:	f000 fe5b 	bl	80025d0 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800191a:	2108      	movs	r1, #8
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fd79 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001922:	213f      	movs	r1, #63	; 0x3f
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff fd75 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800192a:	2103      	movs	r1, #3
 800192c:	2002      	movs	r0, #2
 800192e:	f7ff fd71 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001932:	2103      	movs	r1, #3
 8001934:	4608      	mov	r0, r1
 8001936:	f7ff fd6d 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800193a:	2103      	movs	r1, #3
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff fd69 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001942:	2102      	movs	r1, #2
 8001944:	2005      	movs	r0, #5
 8001946:	f7ff fd65 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800194a:	210f      	movs	r1, #15
 800194c:	2006      	movs	r0, #6
 800194e:	f7ff fd61 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001952:	210e      	movs	r1, #14
 8001954:	2007      	movs	r0, #7
 8001956:	f7ff fd5d 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800195a:	2100      	movs	r1, #0
 800195c:	2008      	movs	r0, #8
 800195e:	f7ff fd59 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001962:	2100      	movs	r1, #0
 8001964:	2009      	movs	r0, #9
 8001966:	f7ff fd55 	bl	8001414 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800196a:	24e7      	movs	r4, #231	; 0xe7
 800196c:	f88d 4004 	strb.w	r4, [sp, #4]
 8001970:	f88d 4003 	strb.w	r4, [sp, #3]
 8001974:	f88d 4002 	strb.w	r4, [sp, #2]
 8001978:	f88d 4001 	strb.w	r4, [sp, #1]
 800197c:	ad02      	add	r5, sp, #8
 800197e:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001982:	2205      	movs	r2, #5
 8001984:	4629      	mov	r1, r5
 8001986:	200a      	movs	r0, #10
 8001988:	f7ff fd66 	bl	8001458 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800198c:	23c2      	movs	r3, #194	; 0xc2
 800198e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001992:	f88d 3003 	strb.w	r3, [sp, #3]
 8001996:	f88d 3002 	strb.w	r3, [sp, #2]
 800199a:	f88d 3001 	strb.w	r3, [sp, #1]
 800199e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80019a2:	2205      	movs	r2, #5
 80019a4:	4629      	mov	r1, r5
 80019a6:	200b      	movs	r0, #11
 80019a8:	f7ff fd56 	bl	8001458 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80019ac:	21c3      	movs	r1, #195	; 0xc3
 80019ae:	200c      	movs	r0, #12
 80019b0:	f7ff fd30 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80019b4:	21c4      	movs	r1, #196	; 0xc4
 80019b6:	200d      	movs	r0, #13
 80019b8:	f7ff fd2c 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80019bc:	21c5      	movs	r1, #197	; 0xc5
 80019be:	200e      	movs	r0, #14
 80019c0:	f7ff fd28 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80019c4:	21c6      	movs	r1, #198	; 0xc6
 80019c6:	200f      	movs	r0, #15
 80019c8:	f7ff fd24 	bl	8001414 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80019cc:	f88d 4004 	strb.w	r4, [sp, #4]
 80019d0:	f88d 4003 	strb.w	r4, [sp, #3]
 80019d4:	f88d 4002 	strb.w	r4, [sp, #2]
 80019d8:	f88d 4001 	strb.w	r4, [sp, #1]
 80019dc:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80019e0:	2205      	movs	r2, #5
 80019e2:	4629      	mov	r1, r5
 80019e4:	2010      	movs	r0, #16
 80019e6:	f7ff fd37 	bl	8001458 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80019ea:	2100      	movs	r1, #0
 80019ec:	2011      	movs	r0, #17
 80019ee:	f7ff fd11 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80019f2:	2100      	movs	r1, #0
 80019f4:	2012      	movs	r0, #18
 80019f6:	f7ff fd0d 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80019fa:	2100      	movs	r1, #0
 80019fc:	2013      	movs	r0, #19
 80019fe:	f7ff fd09 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2014      	movs	r0, #20
 8001a06:	f7ff fd05 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2015      	movs	r0, #21
 8001a0e:	f7ff fd01 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001a12:	2100      	movs	r1, #0
 8001a14:	2016      	movs	r0, #22
 8001a16:	f7ff fcfd 	bl	8001414 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001a1a:	f7ff ff25 	bl	8001868 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	201c      	movs	r0, #28
 8001a22:	f7ff fcf7 	bl	8001414 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001a26:	2100      	movs	r1, #0
 8001a28:	201d      	movs	r0, #29
 8001a2a:	f7ff fcf3 	bl	8001414 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 8001a2e:	210f      	movs	r1, #15
 8001a30:	4608      	mov	r0, r1
 8001a32:	f7ff fda1 	bl	8001578 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7ff fe21 	bl	800167e <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fe3d 	bl	80016bc <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f7ff fe58 	bl	80016f8 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8001a48:	f7ff fdff 	bl	800164a <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8001a4c:	2020      	movs	r0, #32
 8001a4e:	f7ff fda7 	bl	80015a0 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f7ff fe07 	bl	8001666 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8001a58:	f7ff ff28 	bl	80018ac <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8001a5c:	f7ff fec3 	bl	80017e6 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001a60:	204c      	movs	r0, #76	; 0x4c
 8001a62:	f7ff fd93 	bl	800158c <NRF24_setChannel>
	NRF24_flush_tx();
 8001a66:	f7ff fd51 	bl	800150c <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a6a:	f7ff fd55 	bl	8001518 <NRF24_flush_rx>
	NRF24_powerDown();
 8001a6e:	f7ff fe56 	bl	800171e <NRF24_powerDown>
}
 8001a72:	b003      	add	sp, #12
 8001a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a78:	b002      	add	sp, #8
 8001a7a:	4770      	bx	lr
 8001a7c:	2000024c 	.word	0x2000024c
 8001a80:	2000024a 	.word	0x2000024a
 8001a84:	20000248 	.word	0x20000248

08001a88 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001a8c:	ac07      	add	r4, sp, #28
 8001a8e:	4dc4      	ldr	r5, [pc, #784]	; (8001da0 <printRadioSettings+0x318>)
 8001a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	f824 3b02 	strh.w	r3, [r4], #2
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aa6:	a807      	add	r0, sp, #28
 8001aa8:	f7fe fbb2 	bl	8000210 <strlen>
 8001aac:	230a      	movs	r3, #10
 8001aae:	b282      	uxth	r2, r0
 8001ab0:	a907      	add	r1, sp, #28
 8001ab2:	48bc      	ldr	r0, [pc, #752]	; (8001da4 <printRadioSettings+0x31c>)
 8001ab4:	f004 fb51 	bl	800615a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fc49 	bl	8001350 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001abe:	f010 0f08 	tst.w	r0, #8
 8001ac2:	f000 8261 	beq.w	8001f88 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001ac6:	f010 0f04 	tst.w	r0, #4
 8001aca:	f000 8251 	beq.w	8001f70 <printRadioSettings+0x4e8>
 8001ace:	ac07      	add	r4, sp, #28
 8001ad0:	4db5      	ldr	r5, [pc, #724]	; (8001da8 <printRadioSettings+0x320>)
 8001ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ade:	a807      	add	r0, sp, #28
 8001ae0:	f7fe fb96 	bl	8000210 <strlen>
 8001ae4:	4caf      	ldr	r4, [pc, #700]	; (8001da4 <printRadioSettings+0x31c>)
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	b282      	uxth	r2, r0
 8001aea:	a907      	add	r1, sp, #28
 8001aec:	4620      	mov	r0, r4
 8001aee:	f004 fb34 	bl	800615a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fc2c 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001af8:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001afc:	9303      	str	r3, [sp, #12]
 8001afe:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001b14:	f000 0201 	and.w	r2, r0, #1
 8001b18:	49a4      	ldr	r1, [pc, #656]	; (8001dac <printRadioSettings+0x324>)
 8001b1a:	a807      	add	r0, sp, #28
 8001b1c:	f008 fbca 	bl	800a2b4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b20:	a807      	add	r0, sp, #28
 8001b22:	f7fe fb75 	bl	8000210 <strlen>
 8001b26:	230a      	movs	r3, #10
 8001b28:	b282      	uxth	r2, r0
 8001b2a:	a907      	add	r1, sp, #28
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f004 fb14 	bl	800615a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f7ff fc0c 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b38:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001b54:	f000 0201 	and.w	r2, r0, #1
 8001b58:	4995      	ldr	r1, [pc, #596]	; (8001db0 <printRadioSettings+0x328>)
 8001b5a:	a807      	add	r0, sp, #28
 8001b5c:	f008 fbaa 	bl	800a2b4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b60:	a807      	add	r0, sp, #28
 8001b62:	f7fe fb55 	bl	8000210 <strlen>
 8001b66:	230a      	movs	r3, #10
 8001b68:	b282      	uxth	r2, r0
 8001b6a:	a907      	add	r1, sp, #28
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f004 faf4 	bl	800615a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001b72:	2003      	movs	r0, #3
 8001b74:	f7ff fbec 	bl	8001350 <NRF24_read_register>
 8001b78:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001b7c:	3202      	adds	r2, #2
 8001b7e:	498d      	ldr	r1, [pc, #564]	; (8001db4 <printRadioSettings+0x32c>)
 8001b80:	a807      	add	r0, sp, #28
 8001b82:	f008 fb97 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b86:	a807      	add	r0, sp, #28
 8001b88:	f7fe fb42 	bl	8000210 <strlen>
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	b282      	uxth	r2, r0
 8001b90:	a907      	add	r1, sp, #28
 8001b92:	4620      	mov	r0, r4
 8001b94:	f004 fae1 	bl	800615a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001b98:	2005      	movs	r0, #5
 8001b9a:	f7ff fbd9 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001b9e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001ba2:	4985      	ldr	r1, [pc, #532]	; (8001db8 <printRadioSettings+0x330>)
 8001ba4:	a807      	add	r0, sp, #28
 8001ba6:	f008 fb85 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001baa:	a807      	add	r0, sp, #28
 8001bac:	f7fe fb30 	bl	8000210 <strlen>
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	b282      	uxth	r2, r0
 8001bb4:	a907      	add	r1, sp, #28
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f004 facf 	bl	800615a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001bbc:	2006      	movs	r0, #6
 8001bbe:	f7ff fbc7 	bl	8001350 <NRF24_read_register>
 8001bc2:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001bc4:	f010 0f08 	tst.w	r0, #8
 8001bc8:	f000 81e5 	beq.w	8001f96 <printRadioSettings+0x50e>
 8001bcc:	ad07      	add	r5, sp, #28
 8001bce:	4e7b      	ldr	r6, [pc, #492]	; (8001dbc <printRadioSettings+0x334>)
 8001bd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001bd8:	f845 0b04 	str.w	r0, [r5], #4
 8001bdc:	f825 1b02 	strh.w	r1, [r5], #2
 8001be0:	0c09      	lsrs	r1, r1, #16
 8001be2:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001be4:	a807      	add	r0, sp, #28
 8001be6:	f7fe fb13 	bl	8000210 <strlen>
 8001bea:	230a      	movs	r3, #10
 8001bec:	b282      	uxth	r2, r0
 8001bee:	a907      	add	r1, sp, #28
 8001bf0:	486c      	ldr	r0, [pc, #432]	; (8001da4 <printRadioSettings+0x31c>)
 8001bf2:	f004 fab2 	bl	800615a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 8001bf6:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001bfa:	2c00      	cmp	r4, #0
 8001bfc:	f000 81d8 	beq.w	8001fb0 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001c00:	2c01      	cmp	r4, #1
 8001c02:	f000 81dc 	beq.w	8001fbe <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001c06:	2c02      	cmp	r4, #2
 8001c08:	f000 81e0 	beq.w	8001fcc <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001c0c:	2c03      	cmp	r4, #3
 8001c0e:	f000 81e7 	beq.w	8001fe0 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c12:	a807      	add	r0, sp, #28
 8001c14:	f7fe fafc 	bl	8000210 <strlen>
 8001c18:	4c62      	ldr	r4, [pc, #392]	; (8001da4 <printRadioSettings+0x31c>)
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	b282      	uxth	r2, r0
 8001c1e:	a907      	add	r1, sp, #28
 8001c20:	4620      	mov	r0, r4
 8001c22:	f004 fa9a 	bl	800615a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001c26:	2205      	movs	r2, #5
 8001c28:	a905      	add	r1, sp, #20
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f7ff fbc2 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c30:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001c34:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c38:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001c3c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001c40:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001c44:	9502      	str	r5, [sp, #8]
 8001c46:	9001      	str	r0, [sp, #4]
 8001c48:	9100      	str	r1, [sp, #0]
 8001c4a:	495d      	ldr	r1, [pc, #372]	; (8001dc0 <printRadioSettings+0x338>)
 8001c4c:	a807      	add	r0, sp, #28
 8001c4e:	f008 fb31 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c52:	a807      	add	r0, sp, #28
 8001c54:	f7fe fadc 	bl	8000210 <strlen>
 8001c58:	230a      	movs	r3, #10
 8001c5a:	b282      	uxth	r2, r0
 8001c5c:	a907      	add	r1, sp, #28
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f004 fa7b 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001c64:	2205      	movs	r2, #5
 8001c66:	a905      	add	r1, sp, #20
 8001c68:	200b      	movs	r0, #11
 8001c6a:	f7ff fba3 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c6e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001c72:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c76:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001c7a:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001c7e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001c82:	9502      	str	r5, [sp, #8]
 8001c84:	9001      	str	r0, [sp, #4]
 8001c86:	9100      	str	r1, [sp, #0]
 8001c88:	494e      	ldr	r1, [pc, #312]	; (8001dc4 <printRadioSettings+0x33c>)
 8001c8a:	a807      	add	r0, sp, #28
 8001c8c:	f008 fb12 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c90:	a807      	add	r0, sp, #28
 8001c92:	f7fe fabd 	bl	8000210 <strlen>
 8001c96:	230a      	movs	r3, #10
 8001c98:	b282      	uxth	r2, r0
 8001c9a:	a907      	add	r1, sp, #28
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f004 fa5c 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	a905      	add	r1, sp, #20
 8001ca6:	200c      	movs	r0, #12
 8001ca8:	f7ff fb84 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001cac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001cb0:	4945      	ldr	r1, [pc, #276]	; (8001dc8 <printRadioSettings+0x340>)
 8001cb2:	a807      	add	r0, sp, #28
 8001cb4:	f008 fafe 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cb8:	a807      	add	r0, sp, #28
 8001cba:	f7fe faa9 	bl	8000210 <strlen>
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	b282      	uxth	r2, r0
 8001cc2:	a907      	add	r1, sp, #28
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f004 fa48 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	a905      	add	r1, sp, #20
 8001cce:	200d      	movs	r0, #13
 8001cd0:	f7ff fb70 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001cd4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001cd8:	493c      	ldr	r1, [pc, #240]	; (8001dcc <printRadioSettings+0x344>)
 8001cda:	a807      	add	r0, sp, #28
 8001cdc:	f008 faea 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ce0:	a807      	add	r0, sp, #28
 8001ce2:	f7fe fa95 	bl	8000210 <strlen>
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	b282      	uxth	r2, r0
 8001cea:	a907      	add	r1, sp, #28
 8001cec:	4620      	mov	r0, r4
 8001cee:	f004 fa34 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	a905      	add	r1, sp, #20
 8001cf6:	200e      	movs	r0, #14
 8001cf8:	f7ff fb5c 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001cfc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001d00:	4933      	ldr	r1, [pc, #204]	; (8001dd0 <printRadioSettings+0x348>)
 8001d02:	a807      	add	r0, sp, #28
 8001d04:	f008 fad6 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d08:	a807      	add	r0, sp, #28
 8001d0a:	f7fe fa81 	bl	8000210 <strlen>
 8001d0e:	230a      	movs	r3, #10
 8001d10:	b282      	uxth	r2, r0
 8001d12:	a907      	add	r1, sp, #28
 8001d14:	4620      	mov	r0, r4
 8001d16:	f004 fa20 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	a905      	add	r1, sp, #20
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f7ff fb48 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d24:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001d28:	492a      	ldr	r1, [pc, #168]	; (8001dd4 <printRadioSettings+0x34c>)
 8001d2a:	a807      	add	r0, sp, #28
 8001d2c:	f008 fac2 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d30:	a807      	add	r0, sp, #28
 8001d32:	f7fe fa6d 	bl	8000210 <strlen>
 8001d36:	230a      	movs	r3, #10
 8001d38:	b282      	uxth	r2, r0
 8001d3a:	a907      	add	r1, sp, #28
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f004 fa0c 	bl	800615a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001d42:	2205      	movs	r2, #5
 8001d44:	a905      	add	r1, sp, #20
 8001d46:	2010      	movs	r0, #16
 8001d48:	f7ff fb34 	bl	80013b4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001d4c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001d50:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d54:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001d58:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001d5c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001d60:	9502      	str	r5, [sp, #8]
 8001d62:	9001      	str	r0, [sp, #4]
 8001d64:	9100      	str	r1, [sp, #0]
 8001d66:	491c      	ldr	r1, [pc, #112]	; (8001dd8 <printRadioSettings+0x350>)
 8001d68:	a807      	add	r0, sp, #28
 8001d6a:	f008 faa3 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d6e:	a807      	add	r0, sp, #28
 8001d70:	f7fe fa4e 	bl	8000210 <strlen>
 8001d74:	230a      	movs	r3, #10
 8001d76:	b282      	uxth	r2, r0
 8001d78:	a907      	add	r1, sp, #28
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f004 f9ed 	bl	800615a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001d80:	2011      	movs	r0, #17
 8001d82:	f7ff fae5 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d86:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001d8a:	4914      	ldr	r1, [pc, #80]	; (8001ddc <printRadioSettings+0x354>)
 8001d8c:	a807      	add	r0, sp, #28
 8001d8e:	f008 fa91 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d92:	a807      	add	r0, sp, #28
 8001d94:	f7fe fa3c 	bl	8000210 <strlen>
 8001d98:	230a      	movs	r3, #10
 8001d9a:	b282      	uxth	r2, r0
 8001d9c:	e020      	b.n	8001de0 <printRadioSettings+0x358>
 8001d9e:	bf00      	nop
 8001da0:	0800d1d8 	.word	0x0800d1d8
 8001da4:	20000250 	.word	0x20000250
 8001da8:	0800d20c 	.word	0x0800d20c
 8001dac:	0800d258 	.word	0x0800d258
 8001db0:	0800d29c 	.word	0x0800d29c
 8001db4:	0800d2e8 	.word	0x0800d2e8
 8001db8:	0800d304 	.word	0x0800d304
 8001dbc:	0800d318 	.word	0x0800d318
 8001dc0:	0800d398 	.word	0x0800d398
 8001dc4:	0800d3c8 	.word	0x0800d3c8
 8001dc8:	0800d3f8 	.word	0x0800d3f8
 8001dcc:	0800d420 	.word	0x0800d420
 8001dd0:	0800d448 	.word	0x0800d448
 8001dd4:	0800d470 	.word	0x0800d470
 8001dd8:	0800d498 	.word	0x0800d498
 8001ddc:	0800d4c4 	.word	0x0800d4c4
 8001de0:	a907      	add	r1, sp, #28
 8001de2:	4620      	mov	r0, r4
 8001de4:	f004 f9b9 	bl	800615a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001de8:	2012      	movs	r0, #18
 8001dea:	f7ff fab1 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001dee:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001df2:	498a      	ldr	r1, [pc, #552]	; (800201c <printRadioSettings+0x594>)
 8001df4:	a807      	add	r0, sp, #28
 8001df6:	f008 fa5d 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dfa:	a807      	add	r0, sp, #28
 8001dfc:	f7fe fa08 	bl	8000210 <strlen>
 8001e00:	230a      	movs	r3, #10
 8001e02:	b282      	uxth	r2, r0
 8001e04:	a907      	add	r1, sp, #28
 8001e06:	4620      	mov	r0, r4
 8001e08:	f004 f9a7 	bl	800615a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001e0c:	2013      	movs	r0, #19
 8001e0e:	f7ff fa9f 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e12:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001e16:	4982      	ldr	r1, [pc, #520]	; (8002020 <printRadioSettings+0x598>)
 8001e18:	a807      	add	r0, sp, #28
 8001e1a:	f008 fa4b 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e1e:	a807      	add	r0, sp, #28
 8001e20:	f7fe f9f6 	bl	8000210 <strlen>
 8001e24:	230a      	movs	r3, #10
 8001e26:	b282      	uxth	r2, r0
 8001e28:	a907      	add	r1, sp, #28
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f004 f995 	bl	800615a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001e30:	2014      	movs	r0, #20
 8001e32:	f7ff fa8d 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e36:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001e3a:	497a      	ldr	r1, [pc, #488]	; (8002024 <printRadioSettings+0x59c>)
 8001e3c:	a807      	add	r0, sp, #28
 8001e3e:	f008 fa39 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e42:	a807      	add	r0, sp, #28
 8001e44:	f7fe f9e4 	bl	8000210 <strlen>
 8001e48:	230a      	movs	r3, #10
 8001e4a:	b282      	uxth	r2, r0
 8001e4c:	a907      	add	r1, sp, #28
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f004 f983 	bl	800615a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001e54:	2015      	movs	r0, #21
 8001e56:	f7ff fa7b 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e5a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001e5e:	4972      	ldr	r1, [pc, #456]	; (8002028 <printRadioSettings+0x5a0>)
 8001e60:	a807      	add	r0, sp, #28
 8001e62:	f008 fa27 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e66:	a807      	add	r0, sp, #28
 8001e68:	f7fe f9d2 	bl	8000210 <strlen>
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	b282      	uxth	r2, r0
 8001e70:	a907      	add	r1, sp, #28
 8001e72:	4620      	mov	r0, r4
 8001e74:	f004 f971 	bl	800615a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001e78:	2016      	movs	r0, #22
 8001e7a:	f7ff fa69 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e7e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001e82:	496a      	ldr	r1, [pc, #424]	; (800202c <printRadioSettings+0x5a4>)
 8001e84:	a807      	add	r0, sp, #28
 8001e86:	f008 fa15 	bl	800a2b4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e8a:	a807      	add	r0, sp, #28
 8001e8c:	f7fe f9c0 	bl	8000210 <strlen>
 8001e90:	230a      	movs	r3, #10
 8001e92:	b282      	uxth	r2, r0
 8001e94:	a907      	add	r1, sp, #28
 8001e96:	4620      	mov	r0, r4
 8001e98:	f004 f95f 	bl	800615a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001e9c:	201c      	movs	r0, #28
 8001e9e:	f7ff fa57 	bl	8001350 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ea2:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001ea6:	9303      	str	r3, [sp, #12]
 8001ea8:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001ebe:	f000 0201 	and.w	r2, r0, #1
 8001ec2:	495b      	ldr	r1, [pc, #364]	; (8002030 <printRadioSettings+0x5a8>)
 8001ec4:	a807      	add	r0, sp, #28
 8001ec6:	f008 f9f5 	bl	800a2b4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001eca:	a807      	add	r0, sp, #28
 8001ecc:	f7fe f9a0 	bl	8000210 <strlen>
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	b282      	uxth	r2, r0
 8001ed4:	a907      	add	r1, sp, #28
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f004 f93f 	bl	800615a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001edc:	201d      	movs	r0, #29
 8001ede:	f7ff fa37 	bl	8001350 <NRF24_read_register>
 8001ee2:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001ee4:	f010 0f04 	tst.w	r0, #4
 8001ee8:	f000 8081 	beq.w	8001fee <printRadioSettings+0x566>
 8001eec:	ac07      	add	r4, sp, #28
 8001eee:	4d51      	ldr	r5, [pc, #324]	; (8002034 <printRadioSettings+0x5ac>)
 8001ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ef8:	f844 0b04 	str.w	r0, [r4], #4
 8001efc:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001efe:	a807      	add	r0, sp, #28
 8001f00:	f7fe f986 	bl	8000210 <strlen>
 8001f04:	230a      	movs	r3, #10
 8001f06:	b282      	uxth	r2, r0
 8001f08:	a907      	add	r1, sp, #28
 8001f0a:	484b      	ldr	r0, [pc, #300]	; (8002038 <printRadioSettings+0x5b0>)
 8001f0c:	f004 f925 	bl	800615a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001f10:	f016 0f02 	tst.w	r6, #2
 8001f14:	d178      	bne.n	8002008 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001f16:	ac07      	add	r4, sp, #28
 8001f18:	4d48      	ldr	r5, [pc, #288]	; (800203c <printRadioSettings+0x5b4>)
 8001f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f22:	c403      	stmia	r4!, {r0, r1}
 8001f24:	f824 2b02 	strh.w	r2, [r4], #2
 8001f28:	0c12      	lsrs	r2, r2, #16
 8001f2a:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f2c:	a807      	add	r0, sp, #28
 8001f2e:	f7fe f96f 	bl	8000210 <strlen>
 8001f32:	4e41      	ldr	r6, [pc, #260]	; (8002038 <printRadioSettings+0x5b0>)
 8001f34:	230a      	movs	r3, #10
 8001f36:	b282      	uxth	r2, r0
 8001f38:	a907      	add	r1, sp, #28
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	f004 f90d 	bl	800615a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001f40:	ac07      	add	r4, sp, #28
 8001f42:	4d3f      	ldr	r5, [pc, #252]	; (8002040 <printRadioSettings+0x5b8>)
 8001f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	f824 3b02 	strh.w	r3, [r4], #2
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f5a:	a807      	add	r0, sp, #28
 8001f5c:	f7fe f958 	bl	8000210 <strlen>
 8001f60:	230a      	movs	r3, #10
 8001f62:	b282      	uxth	r2, r0
 8001f64:	a907      	add	r1, sp, #28
 8001f66:	4630      	mov	r0, r6
 8001f68:	f004 f8f7 	bl	800615a <HAL_UART_Transmit>
}
 8001f6c:	b020      	add	sp, #128	; 0x80
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001f70:	ac07      	add	r4, sp, #28
 8001f72:	4d34      	ldr	r5, [pc, #208]	; (8002044 <printRadioSettings+0x5bc>)
 8001f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f7c:	c403      	stmia	r4!, {r0, r1}
 8001f7e:	f824 2b02 	strh.w	r2, [r4], #2
 8001f82:	0c12      	lsrs	r2, r2, #16
 8001f84:	7022      	strb	r2, [r4, #0]
 8001f86:	e5aa      	b.n	8001ade <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001f88:	ac07      	add	r4, sp, #28
 8001f8a:	4d2f      	ldr	r5, [pc, #188]	; (8002048 <printRadioSettings+0x5c0>)
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	e5a3      	b.n	8001ade <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001f96:	ad07      	add	r5, sp, #28
 8001f98:	4e2c      	ldr	r6, [pc, #176]	; (800204c <printRadioSettings+0x5c4>)
 8001f9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001fa2:	f845 0b04 	str.w	r0, [r5], #4
 8001fa6:	f825 1b02 	strh.w	r1, [r5], #2
 8001faa:	0c09      	lsrs	r1, r1, #16
 8001fac:	7029      	strb	r1, [r5, #0]
 8001fae:	e619      	b.n	8001be4 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001fb0:	ac07      	add	r4, sp, #28
 8001fb2:	4d27      	ldr	r5, [pc, #156]	; (8002050 <printRadioSettings+0x5c8>)
 8001fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	e629      	b.n	8001c12 <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001fbe:	ac07      	add	r4, sp, #28
 8001fc0:	4d24      	ldr	r5, [pc, #144]	; (8002054 <printRadioSettings+0x5cc>)
 8001fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	e622      	b.n	8001c12 <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001fcc:	ac07      	add	r4, sp, #28
 8001fce:	4d22      	ldr	r5, [pc, #136]	; (8002058 <printRadioSettings+0x5d0>)
 8001fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	f824 3b02 	strh.w	r3, [r4], #2
 8001fda:	0c1b      	lsrs	r3, r3, #16
 8001fdc:	7023      	strb	r3, [r4, #0]
 8001fde:	e618      	b.n	8001c12 <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001fe0:	ac07      	add	r4, sp, #28
 8001fe2:	4d1e      	ldr	r5, [pc, #120]	; (800205c <printRadioSettings+0x5d4>)
 8001fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	8023      	strh	r3, [r4, #0]
 8001fec:	e611      	b.n	8001c12 <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001fee:	ac07      	add	r4, sp, #28
 8001ff0:	4d1b      	ldr	r5, [pc, #108]	; (8002060 <printRadioSettings+0x5d8>)
 8001ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ffa:	f844 0b04 	str.w	r0, [r4], #4
 8001ffe:	f824 1b02 	strh.w	r1, [r4], #2
 8002002:	0c09      	lsrs	r1, r1, #16
 8002004:	7021      	strb	r1, [r4, #0]
 8002006:	e77a      	b.n	8001efe <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002008:	ac07      	add	r4, sp, #28
 800200a:	4d16      	ldr	r5, [pc, #88]	; (8002064 <printRadioSettings+0x5dc>)
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002014:	c403      	stmia	r4!, {r0, r1}
 8002016:	8022      	strh	r2, [r4, #0]
 8002018:	e788      	b.n	8001f2c <printRadioSettings+0x4a4>
 800201a:	bf00      	nop
 800201c:	0800d4e0 	.word	0x0800d4e0
 8002020:	0800d4fc 	.word	0x0800d4fc
 8002024:	0800d518 	.word	0x0800d518
 8002028:	0800d534 	.word	0x0800d534
 800202c:	0800d550 	.word	0x0800d550
 8002030:	0800d56c 	.word	0x0800d56c
 8002034:	0800d5b8 	.word	0x0800d5b8
 8002038:	20000250 	.word	0x20000250
 800203c:	0800d604 	.word	0x0800d604
 8002040:	0800d1d8 	.word	0x0800d1d8
 8002044:	0800d228 	.word	0x0800d228
 8002048:	0800d244 	.word	0x0800d244
 800204c:	0800d330 	.word	0x0800d330
 8002050:	0800d348 	.word	0x0800d348
 8002054:	0800d35c 	.word	0x0800d35c
 8002058:	0800d370 	.word	0x0800d370
 800205c:	0800d384 	.word	0x0800d384
 8002060:	0800d5d0 	.word	0x0800d5d0
 8002064:	0800d5e8 	.word	0x0800d5e8

08002068 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002068:	b084      	sub	sp, #16
 800206a:	b508      	push	{r3, lr}
 800206c:	f10d 0c08 	add.w	ip, sp, #8
 8002070:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	4661      	mov	r1, ip
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <nrf24_DebugUART_Init+0x20>)
 800207a:	f007 fac3 	bl	8009604 <memcpy>
}
 800207e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002082:	b004      	add	sp, #16
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000250 	.word	0x20000250

0800208c <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_TxCplt = 1;
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <HAL_SPI_TxCpltCallback+0x8>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	4770      	bx	lr
 8002094:	20000245 	.word	0x20000245

08002098 <HAL_SPI_RxCpltCallback>:



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_RxCplt = 1;
 8002098:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <HAL_SPI_RxCpltCallback+0x8>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
}
 800209e:	4770      	bx	lr
 80020a0:	20000244 	.word	0x20000244

080020a4 <initLCD>:
#include "../GUI/Images/knob.h"

//Touch screen variables
TS_StateTypeDef ts;

void initLCD(){
 80020a4:	b500      	push	{lr}
 80020a6:	b083      	sub	sp, #12


	BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80020a8:	f005 f9c2 	bl	8007430 <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <initLCD+0x64>)
 80020ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	9b01      	ldr	r3, [sp, #4]

	BSP_TS_Init(480, 272);
 80020c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80020c4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80020c8:	f005 f9f2 	bl	80074b0 <BSP_TS_Init>

	BSP_LCD_Init();
 80020cc:	f005 f84e 	bl	800716c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80020d0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80020d4:	2000      	movs	r0, #0
 80020d6:	f004 fc49 	bl	800696c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80020da:	f004 ff79 	bl	8006fd0 <BSP_LCD_DisplayOn>

	BSP_LCD_SelectLayer(0);
 80020de:	2000      	movs	r0, #0
 80020e0:	f004 fc84 	bl	80069ec <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80020e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020e8:	f004 fcae 	bl	8006a48 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <initLCD+0x68>)
 80020ee:	f004 fc83 	bl	80069f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 40);
 80020f2:	2328      	movs	r3, #40	; 0x28
 80020f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020f8:	2100      	movs	r1, #0
 80020fa:	4608      	mov	r0, r1
 80020fc:	f004 feb4 	bl	8006e68 <BSP_LCD_FillRect>


}
 8002100:	b003      	add	sp, #12
 8002102:	f85d fb04 	ldr.w	pc, [sp], #4
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	ff000080 	.word	0xff000080

08002110 <n_tu>:

/** Number on countu **/

int n_tu(int number, int count)
{
    int result = 1;
 8002110:	2301      	movs	r3, #1
    while(count-- > 0)
 8002112:	e002      	b.n	800211a <n_tu+0xa>
        result *= number;
 8002114:	fb00 f303 	mul.w	r3, r0, r3
    while(count-- > 0)
 8002118:	4611      	mov	r1, r2
 800211a:	1e4a      	subs	r2, r1, #1
 800211c:	2900      	cmp	r1, #0
 800211e:	dcf9      	bgt.n	8002114 <n_tu+0x4>

    return result;
}
 8002120:	4618      	mov	r0, r3
 8002122:	4770      	bx	lr

08002124 <float_to_string>:
{
 8002124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	ed2d 8b02 	vpush	{d8}
 800212c:	b085      	sub	sp, #20
 800212e:	eef0 8a40 	vmov.f32	s17, s0
 8002132:	9003      	str	r0, [sp, #12]
    if (f < 0)
 8002134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	d40e      	bmi.n	800215c <float_to_string+0x38>
    sign = -1;   // -1 == positive number
 800213e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002142:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    number = f;
 8002146:	ee18 0a90 	vmov	r0, s17
 800214a:	f7fe ff33 	bl	8000fb4 <__aeabi_f2lz>
    number2 = f;
 800214e:	eeb0 8a68 	vmov.f32	s16, s17
    length2 = 0; // Size of tenth
 8002152:	2200      	movs	r2, #0
 8002154:	2300      	movs	r3, #0
 8002156:	4690      	mov	r8, r2
 8002158:	4699      	mov	r9, r3
    while( (number2 - (float)number) != 0.0 && !((number2 - (float)number) < 0.0) )
 800215a:	e019      	b.n	8002190 <float_to_string+0x6c>
        f *= -1;
 800215c:	eef1 8a40 	vneg.f32	s17, s0
        sign = '-';
 8002160:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8002164:	f04f 0b00 	mov.w	fp, #0
 8002168:	e7ed      	b.n	8002146 <float_to_string+0x22>
         number2 = f * (n_tu(10.0, length2 + 1));
 800216a:	f108 0101 	add.w	r1, r8, #1
 800216e:	200a      	movs	r0, #10
 8002170:	f7ff ffce 	bl	8002110 <n_tu>
 8002174:	ee07 0a90 	vmov	s15, r0
 8002178:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800217c:	ee28 8a28 	vmul.f32	s16, s16, s17
         number = number2;
 8002180:	ee18 0a10 	vmov	r0, s16
 8002184:	f7fe ff16 	bl	8000fb4 <__aeabi_f2lz>
         length2++;
 8002188:	f118 0801 	adds.w	r8, r8, #1
 800218c:	f149 0900 	adc.w	r9, r9, #0
    while( (number2 - (float)number) != 0.0 && !((number2 - (float)number) < 0.0) )
 8002190:	f7fe fe6a 	bl	8000e68 <__aeabi_l2f>
 8002194:	ee07 0a90 	vmov	s15, r0
 8002198:	ee78 7a67 	vsub.f32	s15, s16, s15
 800219c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d004      	beq.n	80021b0 <float_to_string+0x8c>
 80021a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	d5dc      	bpl.n	800216a <float_to_string+0x46>
    for (length = (f > 1) ? 0 : 1; f > 1; length++)
 80021b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	bfd4      	ite	le
 80021be:	2401      	movle	r4, #1
 80021c0:	2400      	movgt	r4, #0
 80021c2:	b2e4      	uxtb	r4, r4
 80021c4:	2500      	movs	r5, #0
 80021c6:	e006      	b.n	80021d6 <float_to_string+0xb2>
        f /= 10;
 80021c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80021cc:	eec8 8aa7 	vdiv.f32	s17, s17, s15
    for (length = (f > 1) ? 0 : 1; f > 1; length++)
 80021d0:	3401      	adds	r4, #1
 80021d2:	f145 0500 	adc.w	r5, r5, #0
 80021d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021da:	eef4 8ae7 	vcmpe.f32	s17, s15
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	dcf1      	bgt.n	80021c8 <float_to_string+0xa4>
    length = length + 1 + length2;
 80021e4:	1c66      	adds	r6, r4, #1
 80021e6:	f145 0700 	adc.w	r7, r5, #0
 80021ea:	eb18 0806 	adds.w	r8, r8, r6
 80021ee:	eb49 0907 	adc.w	r9, r9, r7
    number = number2;
 80021f2:	ee18 0a10 	vmov	r0, s16
 80021f6:	f7fe fedd 	bl	8000fb4 <__aeabi_f2lz>
 80021fa:	e9cd 0100 	strd	r0, r1, [sp]
    if (sign == '-')
 80021fe:	f1bb 0f00 	cmp.w	fp, #0
 8002202:	bf08      	it	eq
 8002204:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8002208:	d002      	beq.n	8002210 <float_to_string+0xec>
    for (i = length; i >= 0 ; i--)
 800220a:	4646      	mov	r6, r8
 800220c:	464f      	mov	r7, r9
 800220e:	e026      	b.n	800225e <float_to_string+0x13a>
        length++;
 8002210:	f118 0801 	adds.w	r8, r8, #1
 8002214:	f149 0900 	adc.w	r9, r9, #0
        position++;
 8002218:	4634      	mov	r4, r6
 800221a:	463d      	mov	r5, r7
 800221c:	e7f5      	b.n	800220a <float_to_string+0xe6>
            r[i] = '\0';
 800221e:	9b03      	ldr	r3, [sp, #12]
 8002220:	4433      	add	r3, r6
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e016      	b.n	8002256 <float_to_string+0x132>
            r[i] = '.';
 8002228:	9b03      	ldr	r3, [sp, #12]
 800222a:	4433      	add	r3, r6
 800222c:	222e      	movs	r2, #46	; 0x2e
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e011      	b.n	8002256 <float_to_string+0x132>
            r[i] = (number % 10) + '0';
 8002232:	220a      	movs	r2, #10
 8002234:	2300      	movs	r3, #0
 8002236:	e9dd 0100 	ldrd	r0, r1, [sp]
 800223a:	f7fe fe53 	bl	8000ee4 <__aeabi_ldivmod>
 800223e:	9b03      	ldr	r3, [sp, #12]
 8002240:	4433      	add	r3, r6
 8002242:	3230      	adds	r2, #48	; 0x30
 8002244:	701a      	strb	r2, [r3, #0]
            number /=10;
 8002246:	220a      	movs	r2, #10
 8002248:	2300      	movs	r3, #0
 800224a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800224e:	f7fe fe49 	bl	8000ee4 <__aeabi_ldivmod>
 8002252:	e9cd 0100 	strd	r0, r1, [sp]
    for (i = length; i >= 0 ; i--)
 8002256:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 800225a:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
 800225e:	2e00      	cmp	r6, #0
 8002260:	f177 0300 	sbcs.w	r3, r7, #0
 8002264:	db19      	blt.n	800229a <float_to_string+0x176>
        if (i == (length))
 8002266:	45b9      	cmp	r9, r7
 8002268:	bf08      	it	eq
 800226a:	45b0      	cmpeq	r8, r6
 800226c:	d0d7      	beq.n	800221e <float_to_string+0xfa>
        else if(i == (position))
 800226e:	42af      	cmp	r7, r5
 8002270:	bf08      	it	eq
 8002272:	42a6      	cmpeq	r6, r4
 8002274:	d0d8      	beq.n	8002228 <float_to_string+0x104>
        else if(sign == '-' && i == 0)
 8002276:	f1bb 0f00 	cmp.w	fp, #0
 800227a:	bf06      	itte	eq
 800227c:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	ea56 0207 	orrs.w	r2, r6, r7
 8002288:	bf18      	it	ne
 800228a:	2300      	movne	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0d0      	beq.n	8002232 <float_to_string+0x10e>
            r[i] = '-';
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	4433      	add	r3, r6
 8002294:	222d      	movs	r2, #45	; 0x2d
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e7dd      	b.n	8002256 <float_to_string+0x132>
}
 800229a:	b005      	add	sp, #20
 800229c:	ecbd 8b02 	vpop	{d8}
 80022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022a4 <drawMainScreen>:
void drawMainScreen(bool cnt){
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	ed2d 8b02 	vpush	{d8}
 80022aa:	4605      	mov	r5, r0
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80022ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80022b0:	f004 fbae 	bl	8006a10 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b8:	f004 fb9e 	bl	80069f8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&FontAvenir12);
 80022bc:	487e      	ldr	r0, [pc, #504]	; (80024b8 <drawMainScreen+0x214>)
 80022be:	f004 fbb5 	bl	8006a2c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30, 50, (uint8_t *) "GPS", LEFT_MODE);
 80022c2:	2303      	movs	r3, #3
 80022c4:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <drawMainScreen+0x218>)
 80022c6:	2132      	movs	r1, #50	; 0x32
 80022c8:	201e      	movs	r0, #30
 80022ca:	f004 fcd1 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 80, (uint8_t *) "LONG.", LEFT_MODE);
 80022ce:	2303      	movs	r3, #3
 80022d0:	4a7b      	ldr	r2, [pc, #492]	; (80024c0 <drawMainScreen+0x21c>)
 80022d2:	2150      	movs	r1, #80	; 0x50
 80022d4:	200e      	movs	r0, #14
 80022d6:	f004 fccb 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 100, (uint8_t *) "LAT.", LEFT_MODE);
 80022da:	2303      	movs	r3, #3
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <drawMainScreen+0x220>)
 80022de:	2164      	movs	r1, #100	; 0x64
 80022e0:	200e      	movs	r0, #14
 80022e2:	f004 fcc5 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 120, (uint8_t *) "SPEED.", LEFT_MODE);
 80022e6:	2303      	movs	r3, #3
 80022e8:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <drawMainScreen+0x224>)
 80022ea:	2178      	movs	r1, #120	; 0x78
 80022ec:	200e      	movs	r0, #14
 80022ee:	f004 fcbf 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 140, (uint8_t *) "ALT.", LEFT_MODE);
 80022f2:	2303      	movs	r3, #3
 80022f4:	4a75      	ldr	r2, [pc, #468]	; (80024cc <drawMainScreen+0x228>)
 80022f6:	218c      	movs	r1, #140	; 0x8c
 80022f8:	200e      	movs	r0, #14
 80022fa:	f004 fcb9 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	float_to_string(-123.12, long_str);
 80022fe:	4c74      	ldr	r4, [pc, #464]	; (80024d0 <drawMainScreen+0x22c>)
 8002300:	4620      	mov	r0, r4
 8002302:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80024d4 <drawMainScreen+0x230>
 8002306:	f7ff ff0d 	bl	8002124 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 80, (uint8_t *) long_str, LEFT_MODE);
 800230a:	2303      	movs	r3, #3
 800230c:	4622      	mov	r2, r4
 800230e:	2150      	movs	r1, #80	; 0x50
 8002310:	2064      	movs	r0, #100	; 0x64
 8002312:	f004 fcad 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	float_to_string(345.12, latt_str);
 8002316:	4c70      	ldr	r4, [pc, #448]	; (80024d8 <drawMainScreen+0x234>)
 8002318:	4620      	mov	r0, r4
 800231a:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80024dc <drawMainScreen+0x238>
 800231e:	f7ff ff01 	bl	8002124 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 100, (uint8_t *) latt_str, LEFT_MODE);
 8002322:	2303      	movs	r3, #3
 8002324:	4622      	mov	r2, r4
 8002326:	2164      	movs	r1, #100	; 0x64
 8002328:	4608      	mov	r0, r1
 800232a:	f004 fca1 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	float_to_string(123.12, speed_str);
 800232e:	4c6c      	ldr	r4, [pc, #432]	; (80024e0 <drawMainScreen+0x23c>)
 8002330:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 80024e4 <drawMainScreen+0x240>
 8002334:	4620      	mov	r0, r4
 8002336:	eeb0 0a48 	vmov.f32	s0, s16
 800233a:	f7ff fef3 	bl	8002124 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 120, (uint8_t *) speed_str, LEFT_MODE);
 800233e:	2303      	movs	r3, #3
 8002340:	4622      	mov	r2, r4
 8002342:	2178      	movs	r1, #120	; 0x78
 8002344:	2064      	movs	r0, #100	; 0x64
 8002346:	f004 fc93 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	float_to_string(123.12, alt_str);
 800234a:	4c67      	ldr	r4, [pc, #412]	; (80024e8 <drawMainScreen+0x244>)
 800234c:	4620      	mov	r0, r4
 800234e:	eeb0 0a48 	vmov.f32	s0, s16
 8002352:	f7ff fee7 	bl	8002124 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 140, (uint8_t *) alt_str, LEFT_MODE);
 8002356:	2303      	movs	r3, #3
 8002358:	4622      	mov	r2, r4
 800235a:	218c      	movs	r1, #140	; 0x8c
 800235c:	2064      	movs	r0, #100	; 0x64
 800235e:	f004 fc87 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8002362:	4862      	ldr	r0, [pc, #392]	; (80024ec <drawMainScreen+0x248>)
 8002364:	f004 fb54 	bl	8006a10 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(80, 10, (uint8_t *) "QUAD", RIGHT_MODE);
 8002368:	2302      	movs	r3, #2
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <drawMainScreen+0x24c>)
 800236c:	210a      	movs	r1, #10
 800236e:	2050      	movs	r0, #80	; 0x50
 8002370:	f004 fc7e 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 10, (uint8_t *) "%", RIGHT_MODE);
 8002374:	4c5f      	ldr	r4, [pc, #380]	; (80024f4 <drawMainScreen+0x250>)
 8002376:	2302      	movs	r3, #2
 8002378:	4622      	mov	r2, r4
 800237a:	210a      	movs	r1, #10
 800237c:	201e      	movs	r0, #30
 800237e:	f004 fc77 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 10, (uint8_t *) "TX", LEFT_MODE);
 8002382:	2303      	movs	r3, #3
 8002384:	4a5c      	ldr	r2, [pc, #368]	; (80024f8 <drawMainScreen+0x254>)
 8002386:	210a      	movs	r1, #10
 8002388:	200e      	movs	r0, #14
 800238a:	f004 fc71 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(70, 10, (uint8_t *) "%", LEFT_MODE);
 800238e:	2303      	movs	r3, #3
 8002390:	4622      	mov	r2, r4
 8002392:	210a      	movs	r1, #10
 8002394:	2046      	movs	r0, #70	; 0x46
 8002396:	f004 fc6b 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	itoa(69, quad_battery_str, 10);
 800239a:	4c58      	ldr	r4, [pc, #352]	; (80024fc <drawMainScreen+0x258>)
 800239c:	220a      	movs	r2, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	2045      	movs	r0, #69	; 0x45
 80023a2:	f007 f92d 	bl	8009600 <itoa>
	BSP_LCD_DisplayStringAt(45, 10, (uint8_t *) quad_battery_str, RIGHT_MODE);
 80023a6:	2302      	movs	r3, #2
 80023a8:	4622      	mov	r2, r4
 80023aa:	210a      	movs	r1, #10
 80023ac:	202d      	movs	r0, #45	; 0x2d
 80023ae:	f004 fc5f 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	itoa(69, tx_battery_str, 10);
 80023b2:	4c53      	ldr	r4, [pc, #332]	; (8002500 <drawMainScreen+0x25c>)
 80023b4:	220a      	movs	r2, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	2045      	movs	r0, #69	; 0x45
 80023ba:	f007 f921 	bl	8009600 <itoa>
	BSP_LCD_DisplayStringAt(44, 10, (uint8_t *) tx_battery_str, LEFT_MODE);
 80023be:	2303      	movs	r3, #3
 80023c0:	4622      	mov	r2, r4
 80023c2:	210a      	movs	r1, #10
 80023c4:	202c      	movs	r0, #44	; 0x2c
 80023c6:	f004 fc53 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(140, 10, (uint8_t *) "10:43", LEFT_MODE);
 80023ca:	2303      	movs	r3, #3
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <drawMainScreen+0x260>)
 80023ce:	210a      	movs	r1, #10
 80023d0:	208c      	movs	r0, #140	; 0x8c
 80023d2:	f004 fc4d 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(220, 10, (uint8_t *) "CON", LEFT_MODE);
 80023d6:	2303      	movs	r3, #3
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <drawMainScreen+0x264>)
 80023da:	210a      	movs	r1, #10
 80023dc:	20dc      	movs	r0, #220	; 0xdc
 80023de:	f004 fc47 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	if(cnt){
 80023e2:	2d00      	cmp	r5, #0
 80023e4:	d15f      	bne.n	80024a6 <drawMainScreen+0x202>
		BSP_LCD_DisplayStringAt(270, 10, (uint8_t *) "NO", LEFT_MODE);
 80023e6:	2303      	movs	r3, #3
 80023e8:	4a48      	ldr	r2, [pc, #288]	; (800250c <drawMainScreen+0x268>)
 80023ea:	210a      	movs	r1, #10
 80023ec:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80023f0:	f004 fc3e 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawCircle(400, 120, 40);
 80023f4:	2228      	movs	r2, #40	; 0x28
 80023f6:	2178      	movs	r1, #120	; 0x78
 80023f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023fc:	f004 fca0 	bl	8006d40 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8002400:	4843      	ldr	r0, [pc, #268]	; (8002510 <drawMainScreen+0x26c>)
 8002402:	f004 faf9 	bl	80069f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 39);
 8002406:	2227      	movs	r2, #39	; 0x27
 8002408:	2178      	movs	r1, #120	; 0x78
 800240a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800240e:	f004 fd73 	bl	8006ef8 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002416:	f004 faef 	bl	80069f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 5);
 800241a:	2205      	movs	r2, #5
 800241c:	2178      	movs	r1, #120	; 0x78
 800241e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002422:	f004 fd69 	bl	8006ef8 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002426:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800242a:	f004 faf1 	bl	8006a10 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(330, 200, (uint8_t *) "ROLL", LEFT_MODE);
 800242e:	2303      	movs	r3, #3
 8002430:	4a38      	ldr	r2, [pc, #224]	; (8002514 <drawMainScreen+0x270>)
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8002438:	f004 fc1a 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 220, (uint8_t *) "PITCH", LEFT_MODE);
 800243c:	2303      	movs	r3, #3
 800243e:	4a36      	ldr	r2, [pc, #216]	; (8002518 <drawMainScreen+0x274>)
 8002440:	21dc      	movs	r1, #220	; 0xdc
 8002442:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8002446:	f004 fc13 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 240, (uint8_t *) "YAW", LEFT_MODE);
 800244a:	2303      	movs	r3, #3
 800244c:	4a33      	ldr	r2, [pc, #204]	; (800251c <drawMainScreen+0x278>)
 800244e:	21f0      	movs	r1, #240	; 0xf0
 8002450:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8002454:	f004 fc0c 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	itoa(24, roll_str, 6);
 8002458:	4e31      	ldr	r6, [pc, #196]	; (8002520 <drawMainScreen+0x27c>)
 800245a:	2206      	movs	r2, #6
 800245c:	4631      	mov	r1, r6
 800245e:	2018      	movs	r0, #24
 8002460:	f007 f8ce 	bl	8009600 <itoa>
	itoa(32, pitch_str, 6);
 8002464:	4d2f      	ldr	r5, [pc, #188]	; (8002524 <drawMainScreen+0x280>)
 8002466:	2206      	movs	r2, #6
 8002468:	4629      	mov	r1, r5
 800246a:	2020      	movs	r0, #32
 800246c:	f007 f8c8 	bl	8009600 <itoa>
	itoa(45, yaw_str, 6);
 8002470:	4c2d      	ldr	r4, [pc, #180]	; (8002528 <drawMainScreen+0x284>)
 8002472:	2206      	movs	r2, #6
 8002474:	4621      	mov	r1, r4
 8002476:	202d      	movs	r0, #45	; 0x2d
 8002478:	f007 f8c2 	bl	8009600 <itoa>
	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) roll_str, RIGHT_MODE);
 800247c:	2302      	movs	r3, #2
 800247e:	4632      	mov	r2, r6
 8002480:	21c8      	movs	r1, #200	; 0xc8
 8002482:	2014      	movs	r0, #20
 8002484:	f004 fbf4 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) pitch_str, RIGHT_MODE);
 8002488:	2302      	movs	r3, #2
 800248a:	462a      	mov	r2, r5
 800248c:	21dc      	movs	r1, #220	; 0xdc
 800248e:	2014      	movs	r0, #20
 8002490:	f004 fbee 	bl	8006c70 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 240, (uint8_t *) yaw_str, RIGHT_MODE);
 8002494:	2302      	movs	r3, #2
 8002496:	4622      	mov	r2, r4
 8002498:	21f0      	movs	r1, #240	; 0xf0
 800249a:	2014      	movs	r0, #20
 800249c:	f004 fbe8 	bl	8006c70 <BSP_LCD_DisplayStringAt>
}
 80024a0:	ecbd 8b02 	vpop	{d8}
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
		BSP_LCD_DisplayStringAt(270, 10, (uint8_t *) "YES", LEFT_MODE);
 80024a6:	2303      	movs	r3, #3
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <drawMainScreen+0x288>)
 80024aa:	210a      	movs	r1, #10
 80024ac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80024b0:	f004 fbde 	bl	8006c70 <BSP_LCD_DisplayStringAt>
 80024b4:	e79e      	b.n	80023f4 <drawMainScreen+0x150>
 80024b6:	bf00      	nop
 80024b8:	20000004 	.word	0x20000004
 80024bc:	0800d620 	.word	0x0800d620
 80024c0:	0800d624 	.word	0x0800d624
 80024c4:	0800d62c 	.word	0x0800d62c
 80024c8:	0800d634 	.word	0x0800d634
 80024cc:	0800d63c 	.word	0x0800d63c
 80024d0:	200043bc 	.word	0x200043bc
 80024d4:	c2f63d71 	.word	0xc2f63d71
 80024d8:	200042b8 	.word	0x200042b8
 80024dc:	43ac8f5c 	.word	0x43ac8f5c
 80024e0:	2000432c 	.word	0x2000432c
 80024e4:	42f63d71 	.word	0x42f63d71
 80024e8:	2000438c 	.word	0x2000438c
 80024ec:	ff000080 	.word	0xff000080
 80024f0:	0800d644 	.word	0x0800d644
 80024f4:	0800d64c 	.word	0x0800d64c
 80024f8:	0800d650 	.word	0x0800d650
 80024fc:	2000435c 	.word	0x2000435c
 8002500:	20004288 	.word	0x20004288
 8002504:	0800d654 	.word	0x0800d654
 8002508:	0800d65c 	.word	0x0800d65c
 800250c:	0800d664 	.word	0x0800d664
 8002510:	ff800000 	.word	0xff800000
 8002514:	0800d668 	.word	0x0800d668
 8002518:	0800d670 	.word	0x0800d670
 800251c:	0800d678 	.word	0x0800d678
 8002520:	20004324 	.word	0x20004324
 8002524:	20004314 	.word	0x20004314
 8002528:	2000431c 	.word	0x2000431c
 800252c:	0800d660 	.word	0x0800d660

08002530 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <DWT_Init+0x20>)
 8002532:	68d3      	ldr	r3, [r2, #12]
 8002534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002538:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <DWT_Init+0x24>)
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <DWT_Init+0x28>)
 800253e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

}
 800254e:	4770      	bx	lr
 8002550:	e000edf0 	.word	0xe000edf0
 8002554:	e0001000 	.word	0xe0001000
 8002558:	c5acce55 	.word	0xc5acce55

0800255c <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <DWT_Delay+0x20>)
 800255e:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <DWT_Delay+0x24>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <DWT_Delay+0x28>)
 8002566:	fba1 1303 	umull	r1, r3, r1, r3
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <DWT_Delay+0x20>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	4283      	cmp	r3, r0
 8002578:	d3fa      	bcc.n	8002570 <DWT_Delay+0x14>
}
 800257a:	4770      	bx	lr
 800257c:	e0001000 	.word	0xe0001000
 8002580:	20000054 	.word	0x20000054
 8002584:	431bde83 	.word	0x431bde83

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_Init+0x20>)
 800258c:	6813      	ldr	r3, [r2, #0]
 800258e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002592:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002594:	2003      	movs	r0, #3
 8002596:	f000 fb05 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	2000      	movs	r0, #0
 800259c:	f006 fefc 	bl	8009398 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f006 fc8c 	bl	8008ebc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80025a4:	2000      	movs	r0, #0
 80025a6:	bd08      	pop	{r3, pc}
 80025a8:	40023c00 	.word	0x40023c00

080025ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_IncTick+0x10>)
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_IncTick+0x14>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200043c8 	.word	0x200043c8
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025c4:	4b01      	ldr	r3, [pc, #4]	; (80025cc <HAL_GetTick+0x8>)
 80025c6:	6818      	ldr	r0, [r3, #0]
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200043c8 	.word	0x200043c8

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff fff6 	bl	80025c4 <HAL_GetTick>
 80025d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80025de:	d002      	beq.n	80025e6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_Delay+0x24>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	f7ff ffed 	bl	80025c4 <HAL_GetTick>
 80025ea:	1b40      	subs	r0, r0, r5
 80025ec:	42a0      	cmp	r0, r4
 80025ee:	d3fa      	bcc.n	80025e6 <HAL_Delay+0x16>
  {
  }
}
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025f8:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <ADC_Init+0x12c>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002600:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	6841      	ldr	r1, [r0, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260a:	6802      	ldr	r2, [r0, #0]
 800260c:	6853      	ldr	r3, [r2, #4]
 800260e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002612:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002614:	6802      	ldr	r2, [r0, #0]
 8002616:	6853      	ldr	r3, [r2, #4]
 8002618:	6901      	ldr	r1, [r0, #16]
 800261a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800261e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	6853      	ldr	r3, [r2, #4]
 8002624:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002628:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262a:	6802      	ldr	r2, [r0, #0]
 800262c:	6853      	ldr	r3, [r2, #4]
 800262e:	6881      	ldr	r1, [r0, #8]
 8002630:	430b      	orrs	r3, r1
 8002632:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002634:	6802      	ldr	r2, [r0, #0]
 8002636:	6893      	ldr	r3, [r2, #8]
 8002638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800263c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800263e:	6802      	ldr	r2, [r0, #0]
 8002640:	6893      	ldr	r3, [r2, #8]
 8002642:	68c1      	ldr	r1, [r0, #12]
 8002644:	430b      	orrs	r3, r1
 8002646:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002648:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800264a:	4b37      	ldr	r3, [pc, #220]	; (8002728 <ADC_Init+0x130>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d04b      	beq.n	80026e8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002650:	6802      	ldr	r2, [r0, #0]
 8002652:	6893      	ldr	r3, [r2, #8]
 8002654:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002658:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800265a:	6802      	ldr	r2, [r0, #0]
 800265c:	6893      	ldr	r3, [r2, #8]
 800265e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002664:	6802      	ldr	r2, [r0, #0]
 8002666:	6893      	ldr	r3, [r2, #8]
 8002668:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800266c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266e:	6802      	ldr	r2, [r0, #0]
 8002670:	6893      	ldr	r3, [r2, #8]
 8002672:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002678:	6802      	ldr	r2, [r0, #0]
 800267a:	6893      	ldr	r3, [r2, #8]
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002682:	6802      	ldr	r2, [r0, #0]
 8002684:	6893      	ldr	r3, [r2, #8]
 8002686:	6981      	ldr	r1, [r0, #24]
 8002688:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800268c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800268e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d133      	bne.n	80026fe <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002696:	6802      	ldr	r2, [r0, #0]
 8002698:	6853      	ldr	r3, [r2, #4]
 800269a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	6802      	ldr	r2, [r0, #0]
 80026a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026aa:	6801      	ldr	r1, [r0, #0]
 80026ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80026ae:	69c2      	ldr	r2, [r0, #28]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80026b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b8:	6802      	ldr	r2, [r0, #0]
 80026ba:	6893      	ldr	r3, [r2, #8]
 80026bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	6893      	ldr	r3, [r2, #8]
 80026c6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80026ca:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80026ce:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d0:	6802      	ldr	r2, [r0, #0]
 80026d2:	6893      	ldr	r3, [r2, #8]
 80026d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026da:	6802      	ldr	r2, [r0, #0]
 80026dc:	6893      	ldr	r3, [r2, #8]
 80026de:	6941      	ldr	r1, [r0, #20]
 80026e0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e8:	6802      	ldr	r2, [r0, #0]
 80026ea:	6893      	ldr	r3, [r2, #8]
 80026ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80026f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026f2:	6802      	ldr	r2, [r0, #0]
 80026f4:	6893      	ldr	r3, [r2, #8]
 80026f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e7bc      	b.n	8002678 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026fe:	6802      	ldr	r2, [r0, #0]
 8002700:	6853      	ldr	r3, [r2, #4]
 8002702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002706:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	6853      	ldr	r3, [r2, #4]
 800270c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002710:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002712:	6801      	ldr	r1, [r0, #0]
 8002714:	684b      	ldr	r3, [r1, #4]
 8002716:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002718:	3a01      	subs	r2, #1
 800271a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	e7be      	b.n	80026a0 <ADC_Init+0xa8>
 8002722:	bf00      	nop
 8002724:	40012300 	.word	0x40012300
 8002728:	0f000001 	.word	0x0f000001

0800272c <HAL_ADC_Init>:
  if(hadc == NULL)
 800272c:	b328      	cbz	r0, 800277a <HAL_ADC_Init+0x4e>
{
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002732:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002734:	b143      	cbz	r3, 8002748 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002738:	f013 0f10 	tst.w	r3, #16
 800273c:	d00b      	beq.n	8002756 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800273e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002740:	2300      	movs	r3, #0
 8002742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002746:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002748:	f006 fbd8 	bl	8008efc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	2300      	movs	r3, #0
 800274e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002750:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002754:	e7ef      	b.n	8002736 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_ADC_Init+0x54>)
 800275a:	4013      	ands	r3, r2
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ff48 	bl	80025f8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	2000      	movs	r0, #0
 800276a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800276c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6423      	str	r3, [r4, #64]	; 0x40
 8002778:	e7e2      	b.n	8002740 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800277a:	2001      	movs	r0, #1
}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	ffffeefd 	.word	0xffffeefd

08002784 <HAL_ADC_Start>:
{
 8002784:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800278a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d073      	beq.n	800287a <HAL_ADC_Start+0xf6>
 8002792:	2301      	movs	r3, #1
 8002794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	f012 0f01 	tst.w	r2, #1
 80027a0:	d113      	bne.n	80027ca <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_ADC_Start+0x10c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_ADC_Start+0x110>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9b      	lsrs	r3, r3, #18
 80027b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027ba:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Start+0x40>
      counter--;
 80027be:	9b01      	ldr	r3, [sp, #4]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80027c4:	9b01      	ldr	r3, [sp, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ca:	6802      	ldr	r2, [r0, #0]
 80027cc:	6893      	ldr	r3, [r2, #8]
 80027ce:	f013 0f01 	tst.w	r3, #1
 80027d2:	d054      	beq.n	800287e <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 80027d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80027d6:	4b30      	ldr	r3, [pc, #192]	; (8002898 <HAL_ADC_Start+0x114>)
 80027d8:	400b      	ands	r3, r1
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e0:	6853      	ldr	r3, [r2, #4]
 80027e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027e6:	d005      	beq.n	80027f4 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f2:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80027fa:	d019      	beq.n	8002830 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027fe:	f023 0306 	bic.w	r3, r3, #6
 8002802:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002804:	2300      	movs	r3, #0
 8002806:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800280a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 800280e:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_ADC_Start+0x118>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f013 0f1f 	tst.w	r3, #31
 8002818:	d10d      	bne.n	8002836 <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800281a:	6803      	ldr	r3, [r0, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002822:	d12f      	bne.n	8002884 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800282a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e027      	b.n	8002880 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8002830:	2300      	movs	r3, #0
 8002832:	6443      	str	r3, [r0, #68]	; 0x44
 8002834:	e7e6      	b.n	8002804 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_ADC_Start+0x11c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00a      	beq.n	8002854 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_ADC_Start+0x118>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f013 0f10 	tst.w	r3, #16
 8002846:	d11f      	bne.n	8002888 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002848:	6803      	ldr	r3, [r0, #0]
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_ADC_Start+0x120>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00a      	beq.n	8002866 <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8002850:	2000      	movs	r0, #0
 8002852:	e015      	b.n	8002880 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800285a:	d1f0      	bne.n	800283e <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e7eb      	b.n	800283e <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800286c:	d10e      	bne.n	800288c <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
 8002878:	e002      	b.n	8002880 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 800287a:	2002      	movs	r0, #2
 800287c:	e000      	b.n	8002880 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 800287e:	2000      	movs	r0, #0
}
 8002880:	b002      	add	sp, #8
 8002882:	4770      	bx	lr
  return HAL_OK;
 8002884:	2000      	movs	r0, #0
 8002886:	e7fb      	b.n	8002880 <HAL_ADC_Start+0xfc>
 8002888:	2000      	movs	r0, #0
 800288a:	e7f9      	b.n	8002880 <HAL_ADC_Start+0xfc>
 800288c:	2000      	movs	r0, #0
 800288e:	e7f7      	b.n	8002880 <HAL_ADC_Start+0xfc>
 8002890:	20000054 	.word	0x20000054
 8002894:	431bde83 	.word	0x431bde83
 8002898:	fffff8fe 	.word	0xfffff8fe
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	40012200 	.word	0x40012200

080028a8 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80028a8:	4770      	bx	lr

080028aa <HAL_ADC_IRQHandler>:
{
 80028aa:	b538      	push	{r3, r4, r5, lr}
 80028ac:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80028ae:	6801      	ldr	r1, [r0, #0]
 80028b0:	680a      	ldr	r2, [r1, #0]
 80028b2:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80028b6:	684b      	ldr	r3, [r1, #4]
 80028b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 80028bc:	421a      	tst	r2, r3
 80028be:	d02c      	beq.n	800291a <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028c2:	f013 0f10 	tst.w	r3, #16
 80028c6:	d103      	bne.n	80028d0 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d0:	688b      	ldr	r3, [r1, #8]
 80028d2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80028d6:	d119      	bne.n	800290c <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d8:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028da:	b9bb      	cbnz	r3, 800290c <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028de:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80028e2:	d003      	beq.n	80028ec <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028e4:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80028ea:	d10f      	bne.n	800290c <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ec:	684b      	ldr	r3, [r1, #4]
 80028ee:	f023 0320 	bic.w	r3, r3, #32
 80028f2:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002902:	d103      	bne.n	800290c <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800290c:	4620      	mov	r0, r4
 800290e:	f006 fa21 	bl	8008d54 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	f06f 0212 	mvn.w	r2, #18
 8002918:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 8002928:	4211      	tst	r1, r2
 800292a:	d034      	beq.n	8002996 <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800292c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800292e:	f012 0f10 	tst.w	r2, #16
 8002932:	d103      	bne.n	800293c <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002934:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800293a:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002942:	d121      	bne.n	8002988 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002946:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800294a:	d003      	beq.n	8002954 <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800294c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800294e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002952:	d119      	bne.n	8002988 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002954:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002956:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800295a:	d115      	bne.n	8002988 <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800295c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800295e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002962:	d111      	bne.n	8002988 <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002964:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002966:	b97a      	cbnz	r2, 8002988 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002976:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800297a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800297e:	d103      	bne.n	8002988 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002988:	4620      	mov	r0, r4
 800298a:	f000 f909 	bl	8002ba0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f06f 020c 	mvn.w	r2, #12
 8002994:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002996:	6822      	ldr	r2, [r4, #0]
 8002998:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800299a:	6853      	ldr	r3, [r2, #4]
 800299c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 80029a0:	4219      	tst	r1, r3
 80029a2:	d003      	beq.n	80029ac <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029a4:	6813      	ldr	r3, [r2, #0]
 80029a6:	f013 0f01 	tst.w	r3, #1
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80029ac:	6821      	ldr	r1, [r4, #0]
 80029ae:	680a      	ldr	r2, [r1, #0]
 80029b0:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80029b4:	684b      	ldr	r3, [r1, #4]
 80029b6:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 80029ba:	421a      	tst	r2, r3
 80029bc:	d10c      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x12e>
}
 80029be:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff ff6d 	bl	80028a8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e7e9      	b.n	80029ac <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029e0:	f06f 0520 	mvn.w	r5, #32
 80029e4:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f006 f9b5 	bl	8008d56 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	601d      	str	r5, [r3, #0]
}
 80029f0:	e7e5      	b.n	80029be <HAL_ADC_IRQHandler+0x114>
	...

080029f4 <HAL_ADC_ConfigChannel>:
{
 80029f4:	b430      	push	{r4, r5}
 80029f6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80029fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f000 80c0 	beq.w	8002b86 <HAL_ADC_ConfigChannel+0x192>
 8002a06:	2301      	movs	r3, #1
 8002a08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002a0c:	680b      	ldr	r3, [r1, #0]
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d922      	bls.n	8002a58 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a12:	6805      	ldr	r5, [r0, #0]
 8002a14:	68ea      	ldr	r2, [r5, #12]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a1c:	3b1e      	subs	r3, #30
 8002a1e:	2407      	movs	r4, #7
 8002a20:	fa04 f303 	lsl.w	r3, r4, r3
 8002a24:	ea22 0303 	bic.w	r3, r2, r3
 8002a28:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2a:	680b      	ldr	r3, [r1, #0]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_ADC_ConfigChannel+0x198>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a32:	6805      	ldr	r5, [r0, #0]
 8002a34:	68ea      	ldr	r2, [r5, #12]
 8002a36:	688c      	ldr	r4, [r1, #8]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	fa04 f303 	lsl.w	r3, r4, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60eb      	str	r3, [r5, #12]
 8002a48:	e01b      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	68d3      	ldr	r3, [r2, #12]
 8002a4e:	688c      	ldr	r4, [r1, #8]
 8002a50:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	e014      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a58:	6805      	ldr	r5, [r0, #0]
 8002a5a:	692a      	ldr	r2, [r5, #16]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a62:	2407      	movs	r4, #7
 8002a64:	fa04 f303 	lsl.w	r3, r4, r3
 8002a68:	ea22 0303 	bic.w	r3, r2, r3
 8002a6c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a6e:	6805      	ldr	r5, [r0, #0]
 8002a70:	692a      	ldr	r2, [r5, #16]
 8002a72:	688c      	ldr	r4, [r1, #8]
 8002a74:	880b      	ldrh	r3, [r1, #0]
 8002a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a7a:	fa04 f303 	lsl.w	r3, r4, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8002a82:	684b      	ldr	r3, [r1, #4]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d824      	bhi.n	8002ad2 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a88:	6805      	ldr	r5, [r0, #0]
 8002a8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a90:	3b05      	subs	r3, #5
 8002a92:	241f      	movs	r4, #31
 8002a94:	fa04 f303 	lsl.w	r3, r4, r3
 8002a98:	ea22 0303 	bic.w	r3, r2, r3
 8002a9c:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a9e:	6805      	ldr	r5, [r0, #0]
 8002aa0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002aa2:	684b      	ldr	r3, [r1, #4]
 8002aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002aa8:	3b05      	subs	r3, #5
 8002aaa:	880c      	ldrh	r4, [r1, #0]
 8002aac:	fa04 f303 	lsl.w	r3, r4, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ab4:	6802      	ldr	r2, [r0, #0]
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <HAL_ADC_ConfigChannel+0x19c>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d03a      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_ADC_ConfigChannel+0x19c>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d03f      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002aca:	4618      	mov	r0, r3
}
 8002acc:	b002      	add	sp, #8
 8002ace:	bc30      	pop	{r4, r5}
 8002ad0:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d816      	bhi.n	8002b04 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ad6:	6805      	ldr	r5, [r0, #0]
 8002ad8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ade:	3b23      	subs	r3, #35	; 0x23
 8002ae0:	241f      	movs	r4, #31
 8002ae2:	fa04 f303 	lsl.w	r3, r4, r3
 8002ae6:	ea22 0303 	bic.w	r3, r2, r3
 8002aea:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aec:	6805      	ldr	r5, [r0, #0]
 8002aee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002af0:	684b      	ldr	r3, [r1, #4]
 8002af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af6:	3b23      	subs	r3, #35	; 0x23
 8002af8:	880c      	ldrh	r4, [r1, #0]
 8002afa:	fa04 f303 	lsl.w	r3, r4, r3
 8002afe:	4313      	orrs	r3, r2
 8002b00:	632b      	str	r3, [r5, #48]	; 0x30
 8002b02:	e7d7      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b04:	6805      	ldr	r5, [r0, #0]
 8002b06:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b0c:	3b41      	subs	r3, #65	; 0x41
 8002b0e:	241f      	movs	r4, #31
 8002b10:	fa04 f303 	lsl.w	r3, r4, r3
 8002b14:	ea22 0303 	bic.w	r3, r2, r3
 8002b18:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b1a:	6805      	ldr	r5, [r0, #0]
 8002b1c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b1e:	684b      	ldr	r3, [r1, #4]
 8002b20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b24:	3b41      	subs	r3, #65	; 0x41
 8002b26:	880c      	ldrh	r4, [r1, #0]
 8002b28:	fa04 f303 	lsl.w	r3, r4, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002b30:	e7c0      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b32:	680b      	ldr	r3, [r1, #0]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d1c1      	bne.n	8002abc <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8002b38:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <HAL_ADC_ConfigChannel+0x1a0>)
 8002b3a:	6853      	ldr	r3, [r2, #4]
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	6053      	str	r3, [r2, #4]
 8002b42:	e7bb      	b.n	8002abc <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b44:	680b      	ldr	r3, [r1, #0]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_ConfigChannel+0x198>)
 8002b48:	2b11      	cmp	r3, #17
 8002b4a:	bf18      	it	ne
 8002b4c:	4293      	cmpne	r3, r2
 8002b4e:	d1b9      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b50:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <HAL_ADC_ConfigChannel+0x1a0>)
 8002b52:	6853      	ldr	r3, [r2, #4]
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b58:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b5a:	680a      	ldr	r2, [r1, #0]
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_ADC_ConfigChannel+0x198>)
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d1b0      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_ADC_ConfigChannel+0x1a4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <HAL_ADC_ConfigChannel+0x1a8>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9b      	lsrs	r3, r3, #18
 8002b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b72:	005a      	lsls	r2, r3, #1
 8002b74:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002b7e:	9b01      	ldr	r3, [sp, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f9      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x184>
 8002b84:	e79e      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8002b86:	2002      	movs	r0, #2
 8002b88:	e7a0      	b.n	8002acc <HAL_ADC_ConfigChannel+0xd8>
 8002b8a:	bf00      	nop
 8002b8c:	10000012 	.word	0x10000012
 8002b90:	40012000 	.word	0x40012000
 8002b94:	40012300 	.word	0x40012300
 8002b98:	20000054 	.word	0x20000054
 8002b9c:	431bde83 	.word	0x431bde83

08002ba0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002ba6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	0200      	lsls	r0, r0, #8
 8002bb2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002bb8:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002bbc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00
 8002bc4:	05fa0000 	.word	0x05fa0000

08002bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_NVIC_SetPriority+0x58>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd2:	f1c3 0407 	rsb	r4, r3, #7
 8002bd6:	2c04      	cmp	r4, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bdc:	1d1d      	adds	r5, r3, #4
 8002bde:	2d06      	cmp	r5, #6
 8002be0:	d914      	bls.n	8002c0c <HAL_NVIC_SetPriority+0x44>
 8002be2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002be8:	fa05 f404 	lsl.w	r4, r5, r4
 8002bec:	ea21 0104 	bic.w	r1, r1, r4
 8002bf0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf2:	fa05 f303 	lsl.w	r3, r5, r3
 8002bf6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	db07      	blt.n	8002c10 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	0109      	lsls	r1, r1, #4
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_NVIC_SetPriority+0x5c>)
 8002c06:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c08:	bc30      	pop	{r4, r5}
 8002c0a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e7e9      	b.n	8002be4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	f000 000f 	and.w	r0, r0, #15
 8002c14:	0109      	lsls	r1, r1, #4
 8002c16:	b2c9      	uxtb	r1, r1
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_NVIC_SetPriority+0x60>)
 8002c1a:	5419      	strb	r1, [r3, r0]
 8002c1c:	e7f4      	b.n	8002c08 <HAL_NVIC_SetPriority+0x40>
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	e000e400 	.word	0xe000e400
 8002c28:	e000ed14 	.word	0xe000ed14

08002c2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	db07      	blt.n	8002c40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c30:	f000 021f 	and.w	r2, r0, #31
 8002c34:	0940      	lsrs	r0, r0, #5
 8002c36:	2301      	movs	r3, #1
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <HAL_NVIC_EnableIRQ+0x18>)
 8002c3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d038      	beq.n	8002cbe <HAL_CRC_Init+0x76>
{
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c50:	7f43      	ldrb	r3, [r0, #29]
 8002c52:	b31b      	cbz	r3, 8002c9c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c58:	7923      	ldrb	r3, [r4, #4]
 8002c5a:	bb1b      	cbnz	r3, 8002ca4 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_CRC_Init+0x7c>)
 8002c60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	6893      	ldr	r3, [r2, #8]
 8002c66:	f023 0318 	bic.w	r3, r3, #24
 8002c6a:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c6c:	7963      	ldrb	r3, [r4, #5]
 8002c6e:	bb13      	cbnz	r3, 8002cb6 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	6893      	ldr	r3, [r2, #8]
 8002c7c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002c80:	6961      	ldr	r1, [r4, #20]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	6893      	ldr	r3, [r2, #8]
 8002c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c8e:	69a1      	ldr	r1, [r4, #24]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c94:	2301      	movs	r3, #1
 8002c96:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
}
 8002c9a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002c9c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002c9e:	f006 f99d 	bl	8008fdc <HAL_CRC_MspInit>
 8002ca2:	e7d7      	b.n	8002c54 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ca4:	68e2      	ldr	r2, [r4, #12]
 8002ca6:	68a1      	ldr	r1, [r4, #8]
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f000 f80d 	bl	8002cc8 <HAL_CRCEx_Polynomial_Set>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0dc      	beq.n	8002c6c <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f1      	b.n	8002c9a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	6922      	ldr	r2, [r4, #16]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	e7dc      	b.n	8002c78 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8002cbe:	2001      	movs	r0, #1
}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	04c11db7 	.word	0x04c11db7

08002cc8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cc8:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cca:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ccc:	1e65      	subs	r5, r4, #1
 8002cce:	b13c      	cbz	r4, 8002ce0 <HAL_CRCEx_Polynomial_Set+0x18>
 8002cd0:	f005 031f 	and.w	r3, r5, #31
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
 8002cd8:	462c      	mov	r4, r5
 8002cda:	f013 0f01 	tst.w	r3, #1
 8002cde:	d0f5      	beq.n	8002ccc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002ce0:	2a18      	cmp	r2, #24
 8002ce2:	d823      	bhi.n	8002d2c <HAL_CRCEx_Polynomial_Set+0x64>
 8002ce4:	e8df f002 	tbb	[pc, r2]
 8002ce8:	2222220f 	.word	0x2222220f
 8002cec:	22222222 	.word	0x22222222
 8002cf0:	2222221e 	.word	0x2222221e
 8002cf4:	22222222 	.word	0x22222222
 8002cf8:	2222221a 	.word	0x2222221a
 8002cfc:	22222222 	.word	0x22222222
 8002d00:	0d          	.byte	0x0d
 8002d01:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d02:	2d06      	cmp	r5, #6
 8002d04:	d814      	bhi.n	8002d30 <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d06:	6803      	ldr	r3, [r0, #0]
 8002d08:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d0a:	6801      	ldr	r1, [r0, #0]
 8002d0c:	688b      	ldr	r3, [r1, #8]
 8002d0e:	f023 0318 	bic.w	r3, r3, #24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	608a      	str	r2, [r1, #8]
 8002d16:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8002d18:	bc30      	pop	{r4, r5}
 8002d1a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d1c:	2d07      	cmp	r5, #7
 8002d1e:	d9f2      	bls.n	8002d06 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002d20:	2001      	movs	r0, #1
 8002d22:	e7f9      	b.n	8002d18 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d24:	2d0f      	cmp	r5, #15
 8002d26:	d9ee      	bls.n	8002d06 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	e7f5      	b.n	8002d18 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	e7f3      	b.n	8002d18 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 8002d30:	2001      	movs	r0, #1
 8002d32:	e7f1      	b.n	8002d18 <HAL_CRCEx_Polynomial_Set+0x50>

08002d34 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	b2d3      	uxtb	r3, r2
 8002d38:	3b10      	subs	r3, #16
 8002d3a:	4909      	ldr	r1, [pc, #36]	; (8002d60 <DMA_CalcBaseAndBitshift+0x2c>)
 8002d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8002d40:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d42:	4908      	ldr	r1, [pc, #32]	; (8002d64 <DMA_CalcBaseAndBitshift+0x30>)
 8002d44:	5cc9      	ldrb	r1, [r1, r3]
 8002d46:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d804      	bhi.n	8002d56 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <DMA_CalcBaseAndBitshift+0x34>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002d52:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002d54:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <DMA_CalcBaseAndBitshift+0x34>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	6583      	str	r3, [r0, #88]	; 0x58
 8002d5e:	e7f8      	b.n	8002d52 <DMA_CalcBaseAndBitshift+0x1e>
 8002d60:	aaaaaaab 	.word	0xaaaaaaab
 8002d64:	0800d67c 	.word	0x0800d67c
 8002d68:	fffffc00 	.word	0xfffffc00

08002d6c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6e:	6982      	ldr	r2, [r0, #24]
 8002d70:	b992      	cbnz	r2, 8002d98 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d00a      	beq.n	8002d8c <DMA_CheckFifoParam+0x20>
 8002d76:	b11b      	cbz	r3, 8002d80 <DMA_CheckFifoParam+0x14>
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d001      	beq.n	8002d80 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d82:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002d86:	d12c      	bne.n	8002de2 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2000      	movs	r0, #0
 8002d8a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d92:	d028      	beq.n	8002de6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2000      	movs	r0, #0
 8002d96:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d98:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d9c:	d005      	beq.n	8002daa <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d929      	bls.n	8002df6 <DMA_CheckFifoParam+0x8a>
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d015      	beq.n	8002dd2 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2000      	movs	r0, #0
 8002da8:	4770      	bx	lr
    switch (tmp)
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d803      	bhi.n	8002db6 <DMA_CheckFifoParam+0x4a>
 8002dae:	e8df f003 	tbb	[pc, r3]
 8002db2:	041c      	.short	0x041c
 8002db4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2000      	movs	r0, #0
 8002db8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002dbc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002dc0:	d115      	bne.n	8002dee <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dcc:	d011      	beq.n	8002df2 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2000      	movs	r0, #0
 8002dd0:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002dd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002dd8:	d001      	beq.n	8002dde <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002dda:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002ddc:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2000      	movs	r0, #0
 8002de0:	4770      	bx	lr
        status = HAL_ERROR;
 8002de2:	2001      	movs	r0, #1
 8002de4:	4770      	bx	lr
        status = HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
 8002de8:	4770      	bx	lr
      status = HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
 8002dec:	4770      	bx	lr
        status = HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
 8002df0:	4770      	bx	lr
        status = HAL_ERROR;
 8002df2:	2001      	movs	r0, #1
 8002df4:	4770      	bx	lr
      status = HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_DMA_Init>:
{
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fbe0 	bl	80025c4 <HAL_GetTick>
  if(hdma == NULL)
 8002e04:	2c00      	cmp	r4, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_DMA_Init+0xc4>
 8002e08:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	2302      	movs	r3, #2
 8002e12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	6813      	ldr	r3, [r2, #0]
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	f012 0f01 	tst.w	r2, #1
 8002e28:	d00a      	beq.n	8002e40 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e2a:	f7ff fbcb 	bl	80025c4 <HAL_GetTick>
 8002e2e:	1b40      	subs	r0, r0, r5
 8002e30:	2805      	cmp	r0, #5
 8002e32:	d9f5      	bls.n	8002e20 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e34:	2320      	movs	r3, #32
 8002e36:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002e40:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e42:	4820      	ldr	r0, [pc, #128]	; (8002ec4 <HAL_DMA_Init+0xc8>)
 8002e44:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e46:	6861      	ldr	r1, [r4, #4]
 8002e48:	68a2      	ldr	r2, [r4, #8]
 8002e4a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e50:	6921      	ldr	r1, [r4, #16]
 8002e52:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e56:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	69a1      	ldr	r1, [r4, #24]
 8002e5a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	6a21      	ldr	r1, [r4, #32]
 8002e62:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e64:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e68:	2904      	cmp	r1, #4
 8002e6a:	d01e      	beq.n	8002eaa <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002e6c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002e6e:	6826      	ldr	r6, [r4, #0]
 8002e70:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e72:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e78:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002e7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e80:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e84:	b11b      	cbz	r3, 8002e8e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ff70 	bl	8002d6c <DMA_CheckFifoParam>
 8002e8c:	b990      	cbnz	r0, 8002eb4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002e8e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff ff4f 	bl	8002d34 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e98:	233f      	movs	r3, #63	; 0x3f
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002ea8:	e7c9      	b.n	8002e3e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002eac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002eae:	4301      	orrs	r1, r0
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	e7db      	b.n	8002e6c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002ebe:	e7be      	b.n	8002e3e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	e7bc      	b.n	8002e3e <HAL_DMA_Init+0x42>
 8002ec4:	f010803f 	.word	0xf010803f

08002ec8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d02c      	beq.n	8002f26 <HAL_DMA_DeInit+0x5e>
{
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ed0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_DeInit+0x62>
  __HAL_DMA_DISABLE(hdma);
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	2500      	movs	r5, #0
 8002ee8:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002ef6:	6803      	ldr	r3, [r0, #0]
 8002ef8:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002efa:	6803      	ldr	r3, [r0, #0]
 8002efc:	2221      	movs	r2, #33	; 0x21
 8002efe:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f00:	f7ff ff18 	bl	8002d34 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f06:	233f      	movs	r3, #63	; 0x3f
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8002f0c:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f0e:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f10:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f12:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002f14:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002f16:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f18:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002f1a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002f1e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8002f22:	4628      	mov	r0, r5
}
 8002f24:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	4770      	bx	lr
    return HAL_BUSY;
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	e7fa      	b.n	8002f24 <HAL_DMA_DeInit+0x5c>

08002f2e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f40:	2305      	movs	r3, #5
 8002f42:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002f46:	6802      	ldr	r2, [r0, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002f50:	2000      	movs	r0, #0
}
 8002f52:	4770      	bx	lr

08002f54 <HAL_DMA_IRQHandler>:
{
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f5e:	4b72      	ldr	r3, [pc, #456]	; (8003128 <HAL_DMA_IRQHandler+0x1d4>)
 8002f60:	681d      	ldr	r5, [r3, #0]
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <HAL_DMA_IRQHandler+0x1d8>)
 8002f64:	fba3 3505 	umull	r3, r5, r3, r5
 8002f68:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002f6c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f70:	2308      	movs	r3, #8
 8002f72:	4093      	lsls	r3, r2
 8002f74:	4233      	tst	r3, r6
 8002f76:	d010      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f78:	6803      	ldr	r3, [r0, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f012 0f04 	tst.w	r2, #4
 8002f80:	d00b      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f8a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4093      	lsls	r3, r2
 8002fa0:	4233      	tst	r3, r6
 8002fa2:	d009      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	6952      	ldr	r2, [r2, #20]
 8002fa8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fae:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002fba:	2304      	movs	r3, #4
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	4233      	tst	r3, r6
 8002fc0:	d009      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f012 0f02 	tst.w	r2, #2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002fd8:	2310      	movs	r3, #16
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	4233      	tst	r3, r6
 8002fde:	d024      	beq.n	800302a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fe0:	6822      	ldr	r2, [r4, #0]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	f012 0f08 	tst.w	r2, #8
 8002fe8:	d01f      	beq.n	800302a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fea:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002ff4:	d00d      	beq.n	8003012 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002ffc:	d104      	bne.n	8003008 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003000:	b19b      	cbz	r3, 800302a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003002:	4620      	mov	r0, r4
 8003004:	4798      	blx	r3
 8003006:	e010      	b.n	800302a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003008:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800300a:	b173      	cbz	r3, 800302a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800300c:	4620      	mov	r0, r4
 800300e:	4798      	blx	r3
 8003010:	e00b      	b.n	800302a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003018:	d103      	bne.n	8003022 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003024:	b10b      	cbz	r3, 800302a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003026:	4620      	mov	r0, r4
 8003028:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800302c:	2320      	movs	r3, #32
 800302e:	4093      	lsls	r3, r2
 8003030:	4233      	tst	r3, r6
 8003032:	d055      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	f012 0f10 	tst.w	r2, #16
 800303c:	d050      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800303e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003040:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b05      	cmp	r3, #5
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003052:	d033      	beq.n	80030bc <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800305a:	d12a      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800305c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003062:	4620      	mov	r0, r4
 8003064:	4798      	blx	r3
 8003066:	e03b      	b.n	80030e0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f023 0316 	bic.w	r3, r3, #22
 8003070:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	6953      	ldr	r3, [r2, #20]
 8003076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800307e:	b1a3      	cbz	r3, 80030aa <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	f023 0308 	bic.w	r3, r3, #8
 8003088:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800308c:	233f      	movs	r3, #63	; 0x3f
 800308e:	4093      	lsls	r3, r2
 8003090:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8003092:	2300      	movs	r3, #0
 8003094:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003098:	2301      	movs	r3, #1
 800309a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800309e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03f      	beq.n	8003124 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80030a4:	4620      	mov	r0, r4
 80030a6:	4798      	blx	r3
 80030a8:	e03c      	b.n	8003124 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e7      	bne.n	8003080 <HAL_DMA_IRQHandler+0x12c>
 80030b0:	e7eb      	b.n	800308a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80030b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030b4:	b1a3      	cbz	r3, 80030e0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80030b6:	4620      	mov	r0, r4
 80030b8:	4798      	blx	r3
 80030ba:	e011      	b.n	80030e0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f412 7f80 	tst.w	r2, #256	; 0x100
 80030c2:	d109      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f022 0210 	bic.w	r2, r2, #16
 80030ca:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80030d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030da:	b10b      	cbz	r3, 80030e0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80030dc:	4620      	mov	r0, r4
 80030de:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e2:	b1fb      	cbz	r3, 8003124 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e6:	f013 0f01 	tst.w	r3, #1
 80030ea:	d017      	beq.n	800311c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ec:	2305      	movs	r3, #5
 80030ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80030fc:	9b01      	ldr	r3, [sp, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	42ab      	cmp	r3, r5
 8003104:	d804      	bhi.n	8003110 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f013 0f01 	tst.w	r3, #1
 800310e:	d1f5      	bne.n	80030fc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003110:	2300      	movs	r3, #0
 8003112:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003116:	2301      	movs	r3, #1
 8003118:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800311c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800311e:	b10b      	cbz	r3, 8003124 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003120:	4620      	mov	r0, r4
 8003122:	4798      	blx	r3
}
 8003124:	b003      	add	sp, #12
 8003126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003128:	20000054 	.word	0x20000054
 800312c:	1b4e81b5 	.word	0x1b4e81b5

08003130 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003130:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003132:	6806      	ldr	r6, [r0, #0]
 8003134:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8003136:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800313a:	9d03      	ldr	r5, [sp, #12]
 800313c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003140:	431c      	orrs	r4, r3
 8003142:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003148:	6843      	ldr	r3, [r0, #4]
 800314a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800314e:	d003      	beq.n	8003158 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003150:	6803      	ldr	r3, [r0, #0]
 8003152:	60d9      	str	r1, [r3, #12]
  }
}
 8003154:	bc70      	pop	{r4, r5, r6}
 8003156:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003158:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800315c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003160:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003164:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003166:	6884      	ldr	r4, [r0, #8]
 8003168:	b194      	cbz	r4, 8003190 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800316a:	2c01      	cmp	r4, #1
 800316c:	d00e      	beq.n	800318c <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800316e:	2c02      	cmp	r4, #2
 8003170:	d011      	beq.n	8003196 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003172:	2c03      	cmp	r4, #3
 8003174:	d017      	beq.n	80031a6 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8003176:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8003178:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800317a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800317c:	0219      	lsls	r1, r3, #8
 800317e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003182:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8003186:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 800318a:	e001      	b.n	8003190 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 800318c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	6399      	str	r1, [r3, #56]	; 0x38
 8003194:	e7de      	b.n	8003154 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8003196:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003198:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800319a:	02d9      	lsls	r1, r3, #11
 800319c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80031a0:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80031a4:	e7f4      	b.n	8003190 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 80031a6:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 80031a8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80031aa:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80031ac:	0299      	lsls	r1, r3, #10
 80031ae:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80031b2:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 80031b6:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80031ba:	e7e9      	b.n	8003190 <DMA2D_SetConfig+0x60>

080031bc <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 80031bc:	b338      	cbz	r0, 800320e <HAL_DMA2D_Init+0x52>
{
 80031be:	b510      	push	{r4, lr}
 80031c0:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80031c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80031c6:	b1eb      	cbz	r3, 8003204 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031d6:	6861      	ldr	r1, [r4, #4]
 80031d8:	430b      	orrs	r3, r1
 80031da:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80031dc:	6822      	ldr	r2, [r4, #0]
 80031de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80031e0:	f023 0307 	bic.w	r3, r3, #7
 80031e4:	68a1      	ldr	r1, [r4, #8]
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_DMA2D_Init+0x58>)
 80031f0:	400b      	ands	r3, r1
 80031f2:	68e1      	ldr	r1, [r4, #12]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80031f8:	2000      	movs	r0, #0
 80031fa:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003202:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003204:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003208:	f005 fefe 	bl	8009008 <HAL_DMA2D_MspInit>
 800320c:	e7dc      	b.n	80031c8 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 800320e:	2001      	movs	r0, #1
}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	ffffc000 	.word	0xffffc000

08003218 <HAL_DMA2D_Start>:
{
 8003218:	b510      	push	{r4, lr}
 800321a:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 800321c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8003220:	2c01      	cmp	r4, #1
 8003222:	d013      	beq.n	800324c <HAL_DMA2D_Start+0x34>
 8003224:	4604      	mov	r4, r0
 8003226:	2001      	movs	r0, #1
 8003228:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800322c:	2002      	movs	r0, #2
 800322e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003232:	9804      	ldr	r0, [sp, #16]
 8003234:	9000      	str	r0, [sp, #0]
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff ff7a 	bl	8003130 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003246:	2000      	movs	r0, #0
}
 8003248:	b002      	add	sp, #8
 800324a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 800324c:	2002      	movs	r0, #2
 800324e:	e7fb      	b.n	8003248 <HAL_DMA2D_Start+0x30>

08003250 <HAL_DMA2D_PollForTransfer>:
{
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800325c:	6803      	ldr	r3, [r0, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f013 0f01 	tst.w	r3, #1
 8003264:	d111      	bne.n	800328a <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800326a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800326e:	f013 0f20 	tst.w	r3, #32
 8003272:	d147      	bne.n	8003304 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	2212      	movs	r2, #18
 8003278:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800327a:	2301      	movs	r3, #1
 800327c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003280:	2000      	movs	r0, #0
 8003282:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8003286:	b002      	add	sp, #8
 8003288:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800328a:	f7ff f99b 	bl	80025c4 <HAL_GetTick>
 800328e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	f012 0f02 	tst.w	r2, #2
 8003298:	d1e5      	bne.n	8003266 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800329e:	9a01      	ldr	r2, [sp, #4]
 80032a0:	f012 0f21 	tst.w	r2, #33	; 0x21
 80032a4:	d114      	bne.n	80032d0 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 80032a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80032aa:	d0f1      	beq.n	8003290 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80032ac:	f7ff f98a 	bl	80025c4 <HAL_GetTick>
 80032b0:	1b80      	subs	r0, r0, r6
 80032b2:	42a8      	cmp	r0, r5
 80032b4:	d801      	bhi.n	80032ba <HAL_DMA2D_PollForTransfer+0x6a>
 80032b6:	2d00      	cmp	r5, #0
 80032b8:	d1ea      	bne.n	8003290 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80032ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80032c2:	2003      	movs	r0, #3
 80032c4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80032c8:	2300      	movs	r3, #0
 80032ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80032ce:	e7da      	b.n	8003286 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80032d0:	9a01      	ldr	r2, [sp, #4]
 80032d2:	f012 0f20 	tst.w	r2, #32
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80032da:	f042 0202 	orr.w	r2, r2, #2
 80032de:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032e0:	9a01      	ldr	r2, [sp, #4]
 80032e2:	f012 0f01 	tst.w	r2, #1
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032f0:	2221      	movs	r2, #33	; 0x21
 80032f2:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032f4:	2304      	movs	r3, #4
 80032f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003300:	2001      	movs	r0, #1
 8003302:	e7c0      	b.n	8003286 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8003304:	f7ff f95e 	bl	80025c4 <HAL_GetTick>
 8003308:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	f012 0f10 	tst.w	r2, #16
 8003312:	d1af      	bne.n	8003274 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003318:	9a01      	ldr	r2, [sp, #4]
 800331a:	f012 0f29 	tst.w	r2, #41	; 0x29
 800331e:	d114      	bne.n	800334a <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8003320:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003324:	d0f1      	beq.n	800330a <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003326:	f7ff f94d 	bl	80025c4 <HAL_GetTick>
 800332a:	1b80      	subs	r0, r0, r6
 800332c:	42a8      	cmp	r0, r5
 800332e:	d801      	bhi.n	8003334 <HAL_DMA2D_PollForTransfer+0xe4>
 8003330:	2d00      	cmp	r5, #0
 8003332:	d1ea      	bne.n	800330a <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003342:	2300      	movs	r3, #0
 8003344:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003348:	e79d      	b.n	8003286 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800334a:	9a01      	ldr	r2, [sp, #4]
 800334c:	f012 0f08 	tst.w	r2, #8
 8003350:	d003      	beq.n	800335a <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003352:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003354:	f042 0204 	orr.w	r2, r2, #4
 8003358:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800335a:	9a01      	ldr	r2, [sp, #4]
 800335c:	f012 0f20 	tst.w	r2, #32
 8003360:	d003      	beq.n	800336a <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003362:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003364:	f042 0202 	orr.w	r2, r2, #2
 8003368:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800336a:	9a01      	ldr	r2, [sp, #4]
 800336c:	f012 0f01 	tst.w	r2, #1
 8003370:	d003      	beq.n	800337a <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003372:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800337a:	2229      	movs	r2, #41	; 0x29
 800337c:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800337e:	2304      	movs	r3, #4
 8003380:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8003384:	2300      	movs	r3, #0
 8003386:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800338a:	2001      	movs	r0, #1
 800338c:	e77b      	b.n	8003286 <HAL_DMA2D_PollForTransfer+0x36>
	...

08003390 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003390:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003394:	2b01      	cmp	r3, #1
 8003396:	d059      	beq.n	800344c <HAL_DMA2D_ConfigLayer+0xbc>
{
 8003398:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800339a:	2301      	movs	r3, #1
 800339c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80033a0:	2302      	movs	r3, #2
 80033a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80033a6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	1c8b      	adds	r3, r1, #2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	58c3      	ldr	r3, [r0, r3]
 80033b2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80033b6:	3a09      	subs	r2, #9
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	d91e      	bls.n	80033fa <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80033bc:	1c8a      	adds	r2, r1, #2
 80033be:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80033c2:	6852      	ldr	r2, [r2, #4]
 80033c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80033c8:	bb41      	cbnz	r1, 800341c <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80033ca:	6804      	ldr	r4, [r0, #0]
 80033cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_DMA2D_ConfigLayer+0xc0>)
 80033d0:	402a      	ands	r2, r5
 80033d2:	4313      	orrs	r3, r2
 80033d4:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80033dc:	699c      	ldr	r4, [r3, #24]
 80033de:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	3b09      	subs	r3, #9
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d910      	bls.n	800340a <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80033ee:	2300      	movs	r3, #0
 80033f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80033f4:	4618      	mov	r0, r3
}
 80033f6:	bc30      	pop	{r4, r5}
 80033f8:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80033fa:	1c8a      	adds	r2, r1, #2
 80033fc:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003400:	6852      	ldr	r2, [r2, #4]
 8003402:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003406:	4313      	orrs	r3, r2
 8003408:	e7de      	b.n	80033c8 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800340a:	3102      	adds	r1, #2
 800340c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003410:	684b      	ldr	r3, [r1, #4]
 8003412:	6802      	ldr	r2, [r0, #0]
 8003414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003418:	6293      	str	r3, [r2, #40]	; 0x28
 800341a:	e7e5      	b.n	80033e8 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800341c:	6804      	ldr	r4, [r0, #0]
 800341e:	69e5      	ldr	r5, [r4, #28]
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_DMA2D_ConfigLayer+0xc0>)
 8003422:	402a      	ands	r2, r5
 8003424:	4313      	orrs	r3, r2
 8003426:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003428:	6802      	ldr	r2, [r0, #0]
 800342a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800342e:	699c      	ldr	r4, [r3, #24]
 8003430:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	3b09      	subs	r3, #9
 8003436:	2b01      	cmp	r3, #1
 8003438:	d8d6      	bhi.n	80033e8 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800343a:	3102      	adds	r1, #2
 800343c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003440:	684b      	ldr	r3, [r1, #4]
 8003442:	6802      	ldr	r2, [r0, #0]
 8003444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003448:	6213      	str	r3, [r2, #32]
 800344a:	e7cd      	b.n	80033e8 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800344c:	2002      	movs	r0, #2
}
 800344e:	4770      	bx	lr
 8003450:	00fcfff0 	.word	0x00fcfff0

08003454 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003454:	2300      	movs	r3, #0
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f200 80e2 	bhi.w	8003620 <HAL_GPIO_Init+0x1cc>
{
 800345c:	b4f0      	push	{r4, r5, r6, r7}
 800345e:	b082      	sub	sp, #8
 8003460:	e039      	b.n	80034d6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003462:	2209      	movs	r2, #9
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x14>
 8003466:	2200      	movs	r2, #0
 8003468:	40b2      	lsls	r2, r6
 800346a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800346c:	3402      	adds	r4, #2
 800346e:	4e6d      	ldr	r6, [pc, #436]	; (8003624 <HAL_GPIO_Init+0x1d0>)
 8003470:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_GPIO_Init+0x1d4>)
 8003476:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003478:	43ea      	mvns	r2, r5
 800347a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347e:	684f      	ldr	r7, [r1, #4]
 8003480:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003484:	d001      	beq.n	800348a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003486:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800348a:	4c67      	ldr	r4, [pc, #412]	; (8003628 <HAL_GPIO_Init+0x1d4>)
 800348c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800348e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003490:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003494:	684f      	ldr	r7, [r1, #4]
 8003496:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800349a:	d001      	beq.n	80034a0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800349c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80034a0:	4c61      	ldr	r4, [pc, #388]	; (8003628 <HAL_GPIO_Init+0x1d4>)
 80034a2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034aa:	684f      	ldr	r7, [r1, #4]
 80034ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80034b0:	d001      	beq.n	80034b6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80034b2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80034b6:	4c5c      	ldr	r4, [pc, #368]	; (8003628 <HAL_GPIO_Init+0x1d4>)
 80034b8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80034ba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034be:	684e      	ldr	r6, [r1, #4]
 80034c0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80034c4:	d001      	beq.n	80034ca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80034c6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80034ca:	4c57      	ldr	r4, [pc, #348]	; (8003628 <HAL_GPIO_Init+0x1d4>)
 80034cc:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034ce:	3301      	adds	r3, #1
 80034d0:	2b0f      	cmp	r3, #15
 80034d2:	f200 80a2 	bhi.w	800361a <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034da:	680c      	ldr	r4, [r1, #0]
 80034dc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80034e0:	42aa      	cmp	r2, r5
 80034e2:	d1f4      	bne.n	80034ce <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e4:	684c      	ldr	r4, [r1, #4]
 80034e6:	2c12      	cmp	r4, #18
 80034e8:	bf18      	it	ne
 80034ea:	2c02      	cmpne	r4, #2
 80034ec:	d110      	bne.n	8003510 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80034ee:	08de      	lsrs	r6, r3, #3
 80034f0:	3608      	adds	r6, #8
 80034f2:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034f6:	f003 0407 	and.w	r4, r3, #7
 80034fa:	00a7      	lsls	r7, r4, #2
 80034fc:	240f      	movs	r4, #15
 80034fe:	40bc      	lsls	r4, r7
 8003500:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003504:	690c      	ldr	r4, [r1, #16]
 8003506:	40bc      	lsls	r4, r7
 8003508:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 800350c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003510:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003512:	005f      	lsls	r7, r3, #1
 8003514:	2603      	movs	r6, #3
 8003516:	40be      	lsls	r6, r7
 8003518:	43f6      	mvns	r6, r6
 800351a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800351e:	684c      	ldr	r4, [r1, #4]
 8003520:	f004 0403 	and.w	r4, r4, #3
 8003524:	40bc      	lsls	r4, r7
 8003526:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800352a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800352c:	684c      	ldr	r4, [r1, #4]
 800352e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003532:	2c11      	cmp	r4, #17
 8003534:	bf18      	it	ne
 8003536:	f1bc 0f01 	cmpne.w	ip, #1
 800353a:	d901      	bls.n	8003540 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353c:	2c12      	cmp	r4, #18
 800353e:	d111      	bne.n	8003564 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003540:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003542:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003546:	68cc      	ldr	r4, [r1, #12]
 8003548:	40bc      	lsls	r4, r7
 800354a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800354e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003550:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003552:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003556:	684c      	ldr	r4, [r1, #4]
 8003558:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800355c:	409a      	lsls	r2, r3
 800355e:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8003562:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003564:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003566:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003568:	688a      	ldr	r2, [r1, #8]
 800356a:	40ba      	lsls	r2, r7
 800356c:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800356e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003570:	684a      	ldr	r2, [r1, #4]
 8003572:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003576:	d0aa      	beq.n	80034ce <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_GPIO_Init+0x1d8>)
 800357a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800357c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003580:	6454      	str	r4, [r2, #68]	; 0x44
 8003582:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003584:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003588:	9201      	str	r2, [sp, #4]
 800358a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800358c:	089c      	lsrs	r4, r3, #2
 800358e:	1ca6      	adds	r6, r4, #2
 8003590:	4a24      	ldr	r2, [pc, #144]	; (8003624 <HAL_GPIO_Init+0x1d0>)
 8003592:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	0096      	lsls	r6, r2, #2
 800359c:	220f      	movs	r2, #15
 800359e:	40b2      	lsls	r2, r6
 80035a0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_GPIO_Init+0x1dc>)
 80035a6:	4290      	cmp	r0, r2
 80035a8:	f43f af5d 	beq.w	8003466 <HAL_GPIO_Init+0x12>
 80035ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035b0:	4290      	cmp	r0, r2
 80035b2:	d022      	beq.n	80035fa <HAL_GPIO_Init+0x1a6>
 80035b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035b8:	4290      	cmp	r0, r2
 80035ba:	d020      	beq.n	80035fe <HAL_GPIO_Init+0x1aa>
 80035bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035c0:	4290      	cmp	r0, r2
 80035c2:	d01e      	beq.n	8003602 <HAL_GPIO_Init+0x1ae>
 80035c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035c8:	4290      	cmp	r0, r2
 80035ca:	d01c      	beq.n	8003606 <HAL_GPIO_Init+0x1b2>
 80035cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035d0:	4290      	cmp	r0, r2
 80035d2:	d01a      	beq.n	800360a <HAL_GPIO_Init+0x1b6>
 80035d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035d8:	4290      	cmp	r0, r2
 80035da:	d018      	beq.n	800360e <HAL_GPIO_Init+0x1ba>
 80035dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e0:	4290      	cmp	r0, r2
 80035e2:	d016      	beq.n	8003612 <HAL_GPIO_Init+0x1be>
 80035e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e8:	4290      	cmp	r0, r2
 80035ea:	d014      	beq.n	8003616 <HAL_GPIO_Init+0x1c2>
 80035ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035f0:	4290      	cmp	r0, r2
 80035f2:	f43f af36 	beq.w	8003462 <HAL_GPIO_Init+0xe>
 80035f6:	220a      	movs	r2, #10
 80035f8:	e736      	b.n	8003468 <HAL_GPIO_Init+0x14>
 80035fa:	2201      	movs	r2, #1
 80035fc:	e734      	b.n	8003468 <HAL_GPIO_Init+0x14>
 80035fe:	2202      	movs	r2, #2
 8003600:	e732      	b.n	8003468 <HAL_GPIO_Init+0x14>
 8003602:	2203      	movs	r2, #3
 8003604:	e730      	b.n	8003468 <HAL_GPIO_Init+0x14>
 8003606:	2204      	movs	r2, #4
 8003608:	e72e      	b.n	8003468 <HAL_GPIO_Init+0x14>
 800360a:	2205      	movs	r2, #5
 800360c:	e72c      	b.n	8003468 <HAL_GPIO_Init+0x14>
 800360e:	2206      	movs	r2, #6
 8003610:	e72a      	b.n	8003468 <HAL_GPIO_Init+0x14>
 8003612:	2207      	movs	r2, #7
 8003614:	e728      	b.n	8003468 <HAL_GPIO_Init+0x14>
 8003616:	2208      	movs	r2, #8
 8003618:	e726      	b.n	8003468 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800361a:	b002      	add	sp, #8
 800361c:	bcf0      	pop	{r4, r5, r6, r7}
 800361e:	4770      	bx	lr
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40013800 	.word	0x40013800
 8003628:	40013c00 	.word	0x40013c00
 800362c:	40023800 	.word	0x40023800
 8003630:	40020000 	.word	0x40020000

08003634 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003634:	6903      	ldr	r3, [r0, #16]
 8003636:	4219      	tst	r1, r3
 8003638:	d101      	bne.n	800363e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800363c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800363e:	2001      	movs	r0, #1
 8003640:	4770      	bx	lr

08003642 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003642:	b912      	cbnz	r2, 800364a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003644:	0409      	lsls	r1, r1, #16
 8003646:	6181      	str	r1, [r0, #24]
  }
}
 8003648:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800364a:	6181      	str	r1, [r0, #24]
 800364c:	4770      	bx	lr
	...

08003650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003650:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4203      	tst	r3, r0
 8003658:	d100      	bne.n	800365c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800365a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800365e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003660:	f005 fafa 	bl	8008c58 <HAL_GPIO_EXTI_Callback>
}
 8003664:	e7f9      	b.n	800365a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003666:	bf00      	nop
 8003668:	40013c00 	.word	0x40013c00

0800366c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800366c:	6803      	ldr	r3, [r0, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	f012 0f02 	tst.w	r2, #2
 8003674:	d001      	beq.n	800367a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003676:	2200      	movs	r2, #0
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367a:	6803      	ldr	r3, [r0, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	f012 0f01 	tst.w	r2, #1
 8003682:	d103      	bne.n	800368c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
  }
}
 800368c:	4770      	bx	lr

0800368e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800368e:	b470      	push	{r4, r5, r6}
 8003690:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003692:	6805      	ldr	r5, [r0, #0]
 8003694:	6868      	ldr	r0, [r5, #4]
 8003696:	0d74      	lsrs	r4, r6, #21
 8003698:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800369c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80036a0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80036a4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80036a8:	f044 0403 	orr.w	r4, r4, #3
 80036ac:	ea20 0004 	bic.w	r0, r0, r4
 80036b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80036b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80036b8:	4319      	orrs	r1, r3
 80036ba:	4331      	orrs	r1, r6
 80036bc:	4301      	orrs	r1, r0
 80036be:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036c0:	bc70      	pop	{r4, r5, r6}
 80036c2:	4770      	bx	lr

080036c4 <I2C_IsAcknowledgeFailed>:
{
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	460d      	mov	r5, r1
 80036ca:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036cc:	6803      	ldr	r3, [r0, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f013 0f10 	tst.w	r3, #16
 80036d4:	d01c      	beq.n	8003710 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	f012 0f20 	tst.w	r2, #32
 80036de:	d119      	bne.n	8003714 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80036e0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80036e4:	d0f7      	beq.n	80036d6 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe ff6d 	bl	80025c4 <HAL_GetTick>
 80036ea:	1b80      	subs	r0, r0, r6
 80036ec:	42a8      	cmp	r0, r5
 80036ee:	d801      	bhi.n	80036f4 <I2C_IsAcknowledgeFailed+0x30>
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	d1f0      	bne.n	80036d6 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	2320      	movs	r3, #32
 80036fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003708:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800370c:	2001      	movs	r0, #1
 800370e:	e020      	b.n	8003752 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8003710:	2000      	movs	r0, #0
 8003712:	e01e      	b.n	8003752 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003714:	2210      	movs	r2, #16
 8003716:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	2520      	movs	r5, #32
 800371c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ffa4 	bl	800366c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6853      	ldr	r3, [r2, #4]
 8003728:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800372c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003730:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800373a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	2300      	movs	r3, #0
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800374c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
}
 8003752:	bd70      	pop	{r4, r5, r6, pc}

08003754 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	460d      	mov	r5, r1
 800375a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f013 0f02 	tst.w	r3, #2
 8003764:	d11d      	bne.n	80037a2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003766:	4632      	mov	r2, r6
 8003768:	4629      	mov	r1, r5
 800376a:	4620      	mov	r0, r4
 800376c:	f7ff ffaa 	bl	80036c4 <I2C_IsAcknowledgeFailed>
 8003770:	b9c8      	cbnz	r0, 80037a6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003772:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003776:	d0f1      	beq.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe ff24 	bl	80025c4 <HAL_GetTick>
 800377c:	1b80      	subs	r0, r0, r6
 800377e:	42a8      	cmp	r0, r5
 8003780:	d801      	bhi.n	8003786 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1ea      	bne.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003788:	f043 0320 	orr.w	r3, r3, #32
 800378c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378e:	2320      	movs	r3, #32
 8003790:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800379a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800379e:	2001      	movs	r0, #1
 80037a0:	e000      	b.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80037a2:	2000      	movs	r0, #0
}
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e7fc      	b.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080037aa <I2C_WaitOnFlagUntilTimeout>:
{
 80037aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ac:	4605      	mov	r5, r0
 80037ae:	460f      	mov	r7, r1
 80037b0:	4616      	mov	r6, r2
 80037b2:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	ea37 0303 	bics.w	r3, r7, r3
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	42b3      	cmp	r3, r6
 80037c4:	d118      	bne.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80037ca:	d0f3      	beq.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fe fefa 	bl	80025c4 <HAL_GetTick>
 80037d0:	9b06      	ldr	r3, [sp, #24]
 80037d2:	1ac0      	subs	r0, r0, r3
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d801      	bhi.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x32>
 80037d8:	2c00      	cmp	r4, #0
 80037da:	d1eb      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80037de:	f043 0320 	orr.w	r3, r3, #32
 80037e2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	2320      	movs	r3, #32
 80037e6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80037f0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
 80037f6:	e000      	b.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80037f8:	2000      	movs	r0, #0
}
 80037fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037fc <I2C_RequestMemoryWrite>:
{
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	4604      	mov	r4, r0
 8003802:	4616      	mov	r6, r2
 8003804:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <I2C_RequestMemoryWrite+0x6c>)
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800380e:	b2ea      	uxtb	r2, r5
 8003810:	f7ff ff3d 	bl	800368e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003814:	9a07      	ldr	r2, [sp, #28]
 8003816:	9906      	ldr	r1, [sp, #24]
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff ff9b 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 800381e:	b9e8      	cbnz	r0, 800385c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003820:	2d01      	cmp	r5, #1
 8003822:	d10e      	bne.n	8003842 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	b2f6      	uxtb	r6, r6
 8003828:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800382a:	9b07      	ldr	r3, [sp, #28]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	9b06      	ldr	r3, [sp, #24]
 8003830:	2200      	movs	r2, #0
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff ffb8 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	b178      	cbz	r0, 800385e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00d      	b.n	800385e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	0a32      	lsrs	r2, r6, #8
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003848:	9a07      	ldr	r2, [sp, #28]
 800384a:	9906      	ldr	r1, [sp, #24]
 800384c:	4620      	mov	r0, r4
 800384e:	f7ff ff81 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 8003852:	b938      	cbnz	r0, 8003864 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	b2f6      	uxtb	r6, r6
 8003858:	629e      	str	r6, [r3, #40]	; 0x28
 800385a:	e7e6      	b.n	800382a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	b002      	add	sp, #8
 8003862:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e7fa      	b.n	800385e <I2C_RequestMemoryWrite+0x62>
 8003868:	80002000 	.word	0x80002000

0800386c <I2C_RequestMemoryRead>:
{
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	4604      	mov	r4, r0
 8003872:	4616      	mov	r6, r2
 8003874:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <I2C_RequestMemoryRead+0x6c>)
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	b2ea      	uxtb	r2, r5
 800387e:	f7ff ff06 	bl	800368e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003882:	9a07      	ldr	r2, [sp, #28]
 8003884:	9906      	ldr	r1, [sp, #24]
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff ff64 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 800388c:	b9e8      	cbnz	r0, 80038ca <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388e:	2d01      	cmp	r5, #1
 8003890:	d10e      	bne.n	80038b0 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	b2f6      	uxtb	r6, r6
 8003896:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	9b07      	ldr	r3, [sp, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	9b06      	ldr	r3, [sp, #24]
 800389e:	2200      	movs	r2, #0
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff81 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	b178      	cbz	r0, 80038cc <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e00d      	b.n	80038cc <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	0a32      	lsrs	r2, r6, #8
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b6:	9a07      	ldr	r2, [sp, #28]
 80038b8:	9906      	ldr	r1, [sp, #24]
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7ff ff4a 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 80038c0:	b938      	cbnz	r0, 80038d2 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	b2f6      	uxtb	r6, r6
 80038c6:	629e      	str	r6, [r3, #40]	; 0x28
 80038c8:	e7e6      	b.n	8003898 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	b002      	add	sp, #8
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e7fa      	b.n	80038cc <I2C_RequestMemoryRead+0x60>
 80038d6:	bf00      	nop
 80038d8:	80002000 	.word	0x80002000

080038dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4605      	mov	r5, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f013 0f20 	tst.w	r3, #32
 80038ec:	d11a      	bne.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ee:	4632      	mov	r2, r6
 80038f0:	4621      	mov	r1, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7ff fee6 	bl	80036c4 <I2C_IsAcknowledgeFailed>
 80038f8:	b9b0      	cbnz	r0, 8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fe63 	bl	80025c4 <HAL_GetTick>
 80038fe:	1b80      	subs	r0, r0, r6
 8003900:	42a0      	cmp	r0, r4
 8003902:	d801      	bhi.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003904:	2c00      	cmp	r4, #0
 8003906:	d1ed      	bne.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003910:	2320      	movs	r3, #32
 8003912:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800391c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003920:	2001      	movs	r0, #1
}
 8003922:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003924:	2000      	movs	r0, #0
 8003926:	e7fc      	b.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003928:	2001      	movs	r0, #1
 800392a:	e7fa      	b.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800392c <HAL_I2C_MspInit>:
}
 800392c:	4770      	bx	lr
	...

08003930 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003930:	2800      	cmp	r0, #0
 8003932:	d057      	beq.n	80039e4 <HAL_I2C_Init+0xb4>
{
 8003934:	b510      	push	{r4, lr}
 8003936:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003938:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800393c:	2b00      	cmp	r3, #0
 800393e:	d041      	beq.n	80039c4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	2324      	movs	r3, #36	; 0x24
 8003942:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003958:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	6893      	ldr	r3, [r2, #8]
 800395e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003962:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003964:	68e3      	ldr	r3, [r4, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d031      	beq.n	80039ce <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003972:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d02f      	beq.n	80039da <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	6851      	ldr	r1, [r2, #4]
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_I2C_Init+0xb8>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	68d3      	ldr	r3, [r2, #12]
 8003988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800398c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	6962      	ldr	r2, [r4, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	69a1      	ldr	r1, [r4, #24]
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800399c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800399e:	69e3      	ldr	r3, [r4, #28]
 80039a0:	6a21      	ldr	r1, [r4, #32]
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b2:	2000      	movs	r0, #0
 80039b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	2320      	movs	r3, #32
 80039b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80039c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80039c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80039c8:	f7ff ffb0 	bl	800392c <HAL_I2C_MspInit>
 80039cc:	e7b8      	b.n	8003940 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d6:	6093      	str	r3, [r2, #8]
 80039d8:	e7cc      	b.n	8003974 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e7ca      	b.n	800397a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80039e4:	2001      	movs	r0, #1
}
 80039e6:	4770      	bx	lr
 80039e8:	02008000 	.word	0x02008000

080039ec <HAL_I2C_MspDeInit>:
}
 80039ec:	4770      	bx	lr

080039ee <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80039ee:	b1a8      	cbz	r0, 8003a1c <HAL_I2C_DeInit+0x2e>
{
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f4:	2324      	movs	r3, #36	; 0x24
 80039f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80039fa:	6802      	ldr	r2, [r0, #0]
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003a04:	f7ff fff2 	bl	80039ec <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	2000      	movs	r0, #0
 8003a0a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a0c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003a16:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003a1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_Mem_Write>:
{
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8003a2e:	b2ed      	uxtb	r5, r5
 8003a30:	2d20      	cmp	r5, #32
 8003a32:	f040 80bf 	bne.w	8003bb4 <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 8003a36:	fab6 f586 	clz	r5, r6
 8003a3a:	096d      	lsrs	r5, r5, #5
 8003a3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	bf08      	it	eq
 8003a42:	2501      	moveq	r5, #1
 8003a44:	b9d5      	cbnz	r5, 8003a7c <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 8003a46:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003a4a:	2c01      	cmp	r4, #1
 8003a4c:	f000 80b7 	beq.w	8003bbe <HAL_I2C_Mem_Write+0x19e>
 8003a50:	4698      	mov	r8, r3
 8003a52:	4691      	mov	r9, r2
 8003a54:	460d      	mov	r5, r1
 8003a56:	4604      	mov	r4, r0
 8003a58:	f04f 0a01 	mov.w	sl, #1
 8003a5c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003a60:	f7fe fdb0 	bl	80025c4 <HAL_GetTick>
 8003a64:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a66:	9000      	str	r0, [sp, #0]
 8003a68:	2319      	movs	r3, #25
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff fe9a 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 8003a76:	b130      	cbz	r0, 8003a86 <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e09c      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a80:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e097      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a86:	2321      	movs	r3, #33	; 0x21
 8003a88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a8c:	2340      	movs	r3, #64	; 0x40
 8003a8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a98:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a9c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	9701      	str	r7, [sp, #4]
 8003aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	464a      	mov	r2, r9
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fea6 	bl	80037fc <I2C_RequestMemoryWrite>
 8003ab0:	b970      	cbnz	r0, 8003ad0 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2bff      	cmp	r3, #255	; 0xff
 8003ab8:	d90f      	bls.n	8003ada <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fde0 	bl	800368e <I2C_TransferConfig>
 8003ace:	e021      	b.n	8003b14 <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ad6:	4653      	mov	r3, sl
 8003ad8:	e06d      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8003ada:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003adc:	b292      	uxth	r2, r2
 8003ade:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	4629      	mov	r1, r5
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff fdce 	bl	800368e <I2C_TransferConfig>
 8003af2:	e00f      	b.n	8003b14 <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003af4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003af6:	b292      	uxth	r2, r2
 8003af8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4629      	mov	r1, r5
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7ff fdc1 	bl	800368e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003b0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d032      	beq.n	8003b7a <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b14:	463a      	mov	r2, r7
 8003b16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff fe1b 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d14f      	bne.n	8003bc2 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b42:	b292      	uxth	r2, r2
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d0e1      	beq.n	8003b0c <HAL_I2C_Mem_Write+0xec>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1df      	bne.n	8003b0c <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b4c:	9700      	str	r7, [sp, #0]
 8003b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff fe28 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	bba0      	cbnz	r0, 8003bc6 <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2bff      	cmp	r3, #255	; 0xff
 8003b62:	d9c7      	bls.n	8003af4 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b70:	4629      	mov	r1, r5
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7ff fd8b 	bl	800368e <I2C_TransferConfig>
 8003b78:	e7c8      	b.n	8003b0c <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff feac 	bl	80038dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	bb00      	cbnz	r0, 8003bca <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b88:	6822      	ldr	r2, [r4, #0]
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	6842      	ldr	r2, [r0, #4]
 8003b92:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003b96:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003b9a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003bae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003bb2:	e000      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	b002      	add	sp, #8
 8003bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e7f9      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e7f7      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e7f5      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e7f3      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x196>
	...

08003bd0 <HAL_I2C_Mem_Read>:
{
 8003bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8003bde:	b2ed      	uxtb	r5, r5
 8003be0:	2d20      	cmp	r5, #32
 8003be2:	f040 80c1 	bne.w	8003d68 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 8003be6:	fab6 f586 	clz	r5, r6
 8003bea:	096d      	lsrs	r5, r5, #5
 8003bec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003bee:	2c00      	cmp	r4, #0
 8003bf0:	bf08      	it	eq
 8003bf2:	2501      	moveq	r5, #1
 8003bf4:	b9d5      	cbnz	r5, 8003c2c <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 8003bf6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003bfa:	2c01      	cmp	r4, #1
 8003bfc:	f000 80b9 	beq.w	8003d72 <HAL_I2C_Mem_Read+0x1a2>
 8003c00:	4698      	mov	r8, r3
 8003c02:	4691      	mov	r9, r2
 8003c04:	460d      	mov	r5, r1
 8003c06:	4604      	mov	r4, r0
 8003c08:	f04f 0a01 	mov.w	sl, #1
 8003c0c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003c10:	f7fe fcd8 	bl	80025c4 <HAL_GetTick>
 8003c14:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c16:	9000      	str	r0, [sp, #0]
 8003c18:	2319      	movs	r3, #25
 8003c1a:	4652      	mov	r2, sl
 8003c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff fdc2 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 8003c26:	b130      	cbz	r0, 8003c36 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e09e      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c30:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e099      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c36:	2322      	movs	r3, #34	; 0x22
 8003c38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c3c:	2340      	movs	r3, #64	; 0x40
 8003c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c48:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c4a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c4c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c4e:	9701      	str	r7, [sp, #4]
 8003c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4643      	mov	r3, r8
 8003c56:	464a      	mov	r2, r9
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff fe06 	bl	800386c <I2C_RequestMemoryRead>
 8003c60:	b970      	cbnz	r0, 8003c80 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2bff      	cmp	r3, #255	; 0xff
 8003c68:	d90f      	bls.n	8003c8a <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c6e:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <HAL_I2C_Mem_Read+0x1b4>)
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c76:	4629      	mov	r1, r5
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff fd08 	bl	800368e <I2C_TransferConfig>
 8003c7e:	e021      	b.n	8003cc4 <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c86:	4653      	mov	r3, sl
 8003c88:	e06f      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8003c8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c90:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <HAL_I2C_Mem_Read+0x1b4>)
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff fcf6 	bl	800368e <I2C_TransferConfig>
 8003ca2:	e00f      	b.n	8003cc4 <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003ca4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff fce9 	bl	800368e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d034      	beq.n	8003d2e <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cc4:	9700      	str	r7, [sp, #0]
 8003cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2104      	movs	r1, #4
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff fd6c 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d14f      	bne.n	8003d76 <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cdc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003ce4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003cec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cee:	3a01      	subs	r2, #1
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	d0df      	beq.n	8003cbc <HAL_I2C_Mem_Read+0xec>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1dd      	bne.n	8003cbc <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d00:	9700      	str	r7, [sp, #0]
 8003d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d04:	2200      	movs	r2, #0
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7ff fd4e 	bl	80037aa <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	bba0      	cbnz	r0, 8003d7a <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2bff      	cmp	r3, #255	; 0xff
 8003d16:	d9c5      	bls.n	8003ca4 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d24:	4629      	mov	r1, r5
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7ff fcb1 	bl	800368e <I2C_TransferConfig>
 8003d2c:	e7c6      	b.n	8003cbc <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2e:	463a      	mov	r2, r7
 8003d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fdd2 	bl	80038dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	bb00      	cbnz	r0, 8003d7e <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	2120      	movs	r1, #32
 8003d40:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	6842      	ldr	r2, [r0, #4]
 8003d46:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003d4a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003d4e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d62:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	b002      	add	sp, #8
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003d72:	2302      	movs	r3, #2
 8003d74:	e7f9      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e7f7      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e7f5      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e7f3      	b.n	8003d6a <HAL_I2C_Mem_Read+0x19a>
 8003d82:	bf00      	nop
 8003d84:	80002400 	.word	0x80002400

08003d88 <HAL_I2C_GetState>:
  return hi2c->State;
 8003d88:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003d8c:	4770      	bx	lr
	...

08003d90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d90:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d92:	684d      	ldr	r5, [r1, #4]
 8003d94:	6804      	ldr	r4, [r0, #0]
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003d9c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d9e:	01d2      	lsls	r2, r2, #7
 8003da0:	4414      	add	r4, r2
 8003da2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003da6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003daa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dae:	680b      	ldr	r3, [r1, #0]
 8003db0:	6804      	ldr	r4, [r0, #0]
 8003db2:	68e6      	ldr	r6, [r4, #12]
 8003db4:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003db8:	4433      	add	r3, r6
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4414      	add	r4, r2
 8003dbe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003dc2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003dc6:	68cd      	ldr	r5, [r1, #12]
 8003dc8:	6804      	ldr	r4, [r0, #0]
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd0:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003dd2:	4414      	add	r4, r2
 8003dd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003dd8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ddc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003de0:	688b      	ldr	r3, [r1, #8]
 8003de2:	6804      	ldr	r4, [r0, #0]
 8003de4:	68e6      	ldr	r6, [r4, #12]
 8003de6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003dea:	4433      	add	r3, r6
 8003dec:	3301      	adds	r3, #1
 8003dee:	4414      	add	r4, r2
 8003df0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003df4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003df8:	6803      	ldr	r3, [r0, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003e00:	f024 0407 	bic.w	r4, r4, #7
 8003e04:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e08:	6803      	ldr	r3, [r0, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	690c      	ldr	r4, [r1, #16]
 8003e0e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e12:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e16:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e1a:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003e1c:	6805      	ldr	r5, [r0, #0]
 8003e1e:	4415      	add	r5, r2
 8003e20:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003e24:	2400      	movs	r4, #0
 8003e26:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e2a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003e2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003e32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003e36:	6805      	ldr	r5, [r0, #0]
 8003e38:	4415      	add	r5, r2
 8003e3a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003e3e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e42:	6803      	ldr	r3, [r0, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8003e4a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003e4e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e52:	6803      	ldr	r3, [r0, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	694d      	ldr	r5, [r1, #20]
 8003e58:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e5c:	6803      	ldr	r3, [r0, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003e64:	4d2d      	ldr	r5, [pc, #180]	; (8003f1c <LTDC_SetConfig+0x18c>)
 8003e66:	4035      	ands	r5, r6
 8003e68:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003e6c:	69cd      	ldr	r5, [r1, #28]
 8003e6e:	6a0e      	ldr	r6, [r1, #32]
 8003e70:	6803      	ldr	r3, [r0, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	4335      	orrs	r5, r6
 8003e76:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003e7a:	6803      	ldr	r3, [r0, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8003e82:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003e8c:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003e90:	690b      	ldr	r3, [r1, #16]
 8003e92:	b16b      	cbz	r3, 8003eb0 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d03a      	beq.n	8003f0e <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	bf18      	it	ne
 8003e9c:	2b04      	cmpne	r3, #4
 8003e9e:	d038      	beq.n	8003f12 <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d038      	beq.n	8003f16 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ea4:	2b07      	cmp	r3, #7
 8003ea6:	d001      	beq.n	8003eac <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e002      	b.n	8003eb2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003eac:	2302      	movs	r3, #2
 8003eae:	e000      	b.n	8003eb2 <LTDC_SetConfig+0x122>
    tmp = 4U;
 8003eb0:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003eb2:	6804      	ldr	r4, [r0, #0]
 8003eb4:	4414      	add	r4, r2
 8003eb6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8003eba:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003ebe:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ec2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003ec4:	fb03 f504 	mul.w	r5, r3, r4
 8003ec8:	684c      	ldr	r4, [r1, #4]
 8003eca:	680e      	ldr	r6, [r1, #0]
 8003ecc:	1ba4      	subs	r4, r4, r6
 8003ece:	fb03 f304 	mul.w	r3, r3, r4
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	6804      	ldr	r4, [r0, #0]
 8003ed6:	4414      	add	r4, r2
 8003ed8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003edc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ee0:	6803      	ldr	r3, [r0, #0]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <LTDC_SetConfig+0x190>)
 8003eea:	402c      	ands	r4, r5
 8003eec:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003ef6:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003efa:	6803      	ldr	r3, [r0, #0]
 8003efc:	441a      	add	r2, r3
 8003efe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8003f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f0c:	4770      	bx	lr
    tmp = 3U;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e7cf      	b.n	8003eb2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003f12:	2302      	movs	r3, #2
 8003f14:	e7cd      	b.n	8003eb2 <LTDC_SetConfig+0x122>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e7cb      	b.n	8003eb2 <LTDC_SetConfig+0x122>
 8003f1a:	bf00      	nop
 8003f1c:	fffff8f8 	.word	0xfffff8f8
 8003f20:	fffff800 	.word	0xfffff800

08003f24 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d072      	beq.n	800400e <HAL_LTDC_Init+0xea>
{
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f2c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d067      	beq.n	8004004 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	6993      	ldr	r3, [r2, #24]
 8003f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f42:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	698a      	ldr	r2, [r1, #24]
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	68a0      	ldr	r0, [r4, #8]
 8003f4c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f4e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f50:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f52:	6920      	ldr	r0, [r4, #16]
 8003f54:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f56:	4313      	orrs	r3, r2
 8003f58:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_LTDC_Init+0xf0>)
 8003f60:	401a      	ands	r2, r3
 8003f62:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f64:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	6882      	ldr	r2, [r0, #8]
 8003f6a:	69a1      	ldr	r1, [r4, #24]
 8003f6c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003f70:	430a      	orrs	r2, r1
 8003f72:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f74:	6821      	ldr	r1, [r4, #0]
 8003f76:	68ca      	ldr	r2, [r1, #12]
 8003f78:	401a      	ands	r2, r3
 8003f7a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f7c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	68c2      	ldr	r2, [r0, #12]
 8003f82:	6a21      	ldr	r1, [r4, #32]
 8003f84:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f8c:	6821      	ldr	r1, [r4, #0]
 8003f8e:	690a      	ldr	r2, [r1, #16]
 8003f90:	401a      	ands	r2, r3
 8003f92:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f94:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	6902      	ldr	r2, [r0, #16]
 8003f9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f9c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fa4:	6821      	ldr	r1, [r4, #0]
 8003fa6:	694a      	ldr	r2, [r1, #20]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fae:	6821      	ldr	r1, [r4, #0]
 8003fb0:	694b      	ldr	r3, [r1, #20]
 8003fb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003fb4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fbc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fc0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003fc4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fc6:	6821      	ldr	r1, [r4, #0]
 8003fc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003fca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003fce:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fd0:	6821      	ldr	r1, [r4, #0]
 8003fd2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003fd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003fd8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003fdc:	4303      	orrs	r3, r0
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003fe6:	f043 0306 	orr.w	r3, r3, #6
 8003fea:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	6993      	ldr	r3, [r2, #24]
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004002:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004004:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004008:	f005 f814 	bl	8009034 <HAL_LTDC_MspInit>
 800400c:	e792      	b.n	8003f34 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800400e:	2001      	movs	r0, #1
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	f000f800 	.word	0xf000f800

08004018 <HAL_LTDC_ErrorCallback>:
}
 8004018:	4770      	bx	lr

0800401a <HAL_LTDC_LineEventCallback>:
}
 800401a:	4770      	bx	lr

0800401c <HAL_LTDC_ReloadEventCallback>:
}
 800401c:	4770      	bx	lr

0800401e <HAL_LTDC_IRQHandler>:
{
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004026:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004028:	f015 0f04 	tst.w	r5, #4
 800402c:	d002      	beq.n	8004034 <HAL_LTDC_IRQHandler+0x16>
 800402e:	f016 0f04 	tst.w	r6, #4
 8004032:	d112      	bne.n	800405a <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004034:	f015 0f02 	tst.w	r5, #2
 8004038:	d002      	beq.n	8004040 <HAL_LTDC_IRQHandler+0x22>
 800403a:	f016 0f02 	tst.w	r6, #2
 800403e:	d121      	bne.n	8004084 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004040:	f015 0f01 	tst.w	r5, #1
 8004044:	d002      	beq.n	800404c <HAL_LTDC_IRQHandler+0x2e>
 8004046:	f016 0f01 	tst.w	r6, #1
 800404a:	d132      	bne.n	80040b2 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800404c:	f015 0f08 	tst.w	r5, #8
 8004050:	d002      	beq.n	8004058 <HAL_LTDC_IRQHandler+0x3a>
 8004052:	f016 0f08 	tst.w	r6, #8
 8004056:	d13d      	bne.n	80040d4 <HAL_LTDC_IRQHandler+0xb6>
}
 8004058:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	f022 0204 	bic.w	r2, r2, #4
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004062:	6803      	ldr	r3, [r0, #0]
 8004064:	2204      	movs	r2, #4
 8004066:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004068:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004074:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004078:	2300      	movs	r3, #0
 800407a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800407e:	f7ff ffcb 	bl	8004018 <HAL_LTDC_ErrorCallback>
 8004082:	e7d7      	b.n	8004034 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	2202      	movs	r2, #2
 8004092:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004094:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800409e:	2304      	movs	r3, #4
 80040a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80040a4:	2300      	movs	r3, #0
 80040a6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff ffb4 	bl	8004018 <HAL_LTDC_ErrorCallback>
 80040b0:	e7c6      	b.n	8004040 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	2301      	movs	r3, #1
 80040c0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80040c2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80040c6:	2300      	movs	r3, #0
 80040c8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff ffa4 	bl	800401a <HAL_LTDC_LineEventCallback>
 80040d2:	e7bb      	b.n	800404c <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80040d8:	f023 0308 	bic.w	r3, r3, #8
 80040dc:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	2208      	movs	r2, #8
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80040ea:	2300      	movs	r3, #0
 80040ec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7ff ff93 	bl	800401c <HAL_LTDC_ReloadEventCallback>
}
 80040f6:	e7af      	b.n	8004058 <HAL_LTDC_IRQHandler+0x3a>

080040f8 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80040f8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d027      	beq.n	8004150 <HAL_LTDC_ConfigLayer+0x58>
{
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	4694      	mov	ip, r2
 8004106:	460f      	mov	r7, r1
 8004108:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 800410a:	f04f 0801 	mov.w	r8, #1
 800410e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004118:	2434      	movs	r4, #52	; 0x34
 800411a:	fb04 0402 	mla	r4, r4, r2, r0
 800411e:	3438      	adds	r4, #56	; 0x38
 8004120:	460d      	mov	r5, r1
 8004122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800412c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412e:	682b      	ldr	r3, [r5, #0]
 8004130:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004132:	4662      	mov	r2, ip
 8004134:	4639      	mov	r1, r7
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff fe2a 	bl	8003d90 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004142:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004146:	2000      	movs	r0, #0
 8004148:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8004150:	2002      	movs	r0, #2
}
 8004152:	4770      	bx	lr

08004154 <HAL_LTDC_GetState>:
  return hltdc->State;
 8004154:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8004158:	4770      	bx	lr
	...

0800415c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800415c:	b510      	push	{r4, lr}
 800415e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x74>)
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_PWREx_EnableOverDrive+0x78>)
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800417e:	f7fe fa21 	bl	80025c4 <HAL_GetTick>
 8004182:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_PWREx_EnableOverDrive+0x78>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800418c:	d108      	bne.n	80041a0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800418e:	f7fe fa19 	bl	80025c4 <HAL_GetTick>
 8004192:	1b00      	subs	r0, r0, r4
 8004194:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004198:	d9f4      	bls.n	8004184 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800419a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800419c:	b002      	add	sp, #8
 800419e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <HAL_PWREx_EnableOverDrive+0x78>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80041aa:	f7fe fa0b 	bl	80025c4 <HAL_GetTick>
 80041ae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_PWREx_EnableOverDrive+0x78>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041b8:	d107      	bne.n	80041ca <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ba:	f7fe fa03 	bl	80025c4 <HAL_GetTick>
 80041be:	1b00      	subs	r0, r0, r4
 80041c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80041c4:	d9f4      	bls.n	80041b0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80041c6:	2003      	movs	r0, #3
 80041c8:	e7e8      	b.n	800419c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80041ca:	2000      	movs	r0, #0
 80041cc:	e7e6      	b.n	800419c <HAL_PWREx_EnableOverDrive+0x40>
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d8:	2800      	cmp	r0, #0
 80041da:	f000 81db 	beq.w	8004594 <HAL_RCC_OscConfig+0x3bc>
{
 80041de:	b570      	push	{r4, r5, r6, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e4:	6803      	ldr	r3, [r0, #0]
 80041e6:	f013 0f01 	tst.w	r3, #1
 80041ea:	d029      	beq.n	8004240 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ec:	4ba2      	ldr	r3, [pc, #648]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d01a      	beq.n	800422e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f8:	4b9f      	ldr	r3, [pc, #636]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	d00f      	beq.n	8004224 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	6863      	ldr	r3, [r4, #4]
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d040      	beq.n	800428e <HAL_RCC_OscConfig+0xb6>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d154      	bne.n	80042ba <HAL_RCC_OscConfig+0xe2>
 8004210:	4b99      	ldr	r3, [pc, #612]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e039      	b.n	8004298 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004224:	4b94      	ldr	r3, [pc, #592]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800422c:	d0ea      	beq.n	8004204 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422e:	4b92      	ldr	r3, [pc, #584]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004236:	d003      	beq.n	8004240 <HAL_RCC_OscConfig+0x68>
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 81ac 	beq.w	8004598 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f013 0f02 	tst.w	r3, #2
 8004246:	d075      	beq.n	8004334 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004248:	4b8b      	ldr	r3, [pc, #556]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f013 0f0c 	tst.w	r3, #12
 8004250:	d05e      	beq.n	8004310 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004252:	4b89      	ldr	r3, [pc, #548]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b08      	cmp	r3, #8
 800425c:	d053      	beq.n	8004306 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 808a 	beq.w	800437a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004266:	4a84      	ldr	r2, [pc, #528]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe f9a8 	bl	80025c4 <HAL_GetTick>
 8004274:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004276:	4b80      	ldr	r3, [pc, #512]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f013 0f02 	tst.w	r3, #2
 800427e:	d173      	bne.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004280:	f7fe f9a0 	bl	80025c4 <HAL_GetTick>
 8004284:	1b40      	subs	r0, r0, r5
 8004286:	2802      	cmp	r0, #2
 8004288:	d9f5      	bls.n	8004276 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800428a:	2003      	movs	r0, #3
 800428c:	e187      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	4a7a      	ldr	r2, [pc, #488]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	b32b      	cbz	r3, 80042e8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800429c:	f7fe f992 	bl	80025c4 <HAL_GetTick>
 80042a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042aa:	d1c9      	bne.n	8004240 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fe f98a 	bl	80025c4 <HAL_GetTick>
 80042b0:	1b40      	subs	r0, r0, r5
 80042b2:	2864      	cmp	r0, #100	; 0x64
 80042b4:	d9f5      	bls.n	80042a2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80042b6:	2003      	movs	r0, #3
 80042b8:	e171      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042be:	d009      	beq.n	80042d4 <HAL_RCC_OscConfig+0xfc>
 80042c0:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e7e1      	b.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042d4:	4b68      	ldr	r3, [pc, #416]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e7d7      	b.n	8004298 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80042e8:	f7fe f96c 	bl	80025c4 <HAL_GetTick>
 80042ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042f6:	d0a3      	beq.n	8004240 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe f964 	bl	80025c4 <HAL_GetTick>
 80042fc:	1b40      	subs	r0, r0, r5
 80042fe:	2864      	cmp	r0, #100	; 0x64
 8004300:	d9f5      	bls.n	80042ee <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004302:	2003      	movs	r0, #3
 8004304:	e14b      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b5c      	ldr	r3, [pc, #368]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800430e:	d1a6      	bne.n	800425e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f013 0f02 	tst.w	r3, #2
 8004318:	d004      	beq.n	8004324 <HAL_RCC_OscConfig+0x14c>
 800431a:	68e3      	ldr	r3, [r4, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8004320:	2001      	movs	r0, #1
 8004322:	e13c      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4a54      	ldr	r2, [pc, #336]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800432c:	6921      	ldr	r1, [r4, #16]
 800432e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004332:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	f013 0f08 	tst.w	r3, #8
 800433a:	d046      	beq.n	80043ca <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800433c:	6963      	ldr	r3, [r4, #20]
 800433e:	b383      	cbz	r3, 80043a2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004340:	4a4d      	ldr	r2, [pc, #308]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004342:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fe f93b 	bl	80025c4 <HAL_GetTick>
 800434e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004350:	4b49      	ldr	r3, [pc, #292]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004354:	f013 0f02 	tst.w	r3, #2
 8004358:	d137      	bne.n	80043ca <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435a:	f7fe f933 	bl	80025c4 <HAL_GetTick>
 800435e:	1b40      	subs	r0, r0, r5
 8004360:	2802      	cmp	r0, #2
 8004362:	d9f5      	bls.n	8004350 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8004364:	2003      	movs	r0, #3
 8004366:	e11a      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4a43      	ldr	r2, [pc, #268]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 800436a:	6813      	ldr	r3, [r2, #0]
 800436c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004370:	6921      	ldr	r1, [r4, #16]
 8004372:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e7dc      	b.n	8004334 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800437a:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004384:	f7fe f91e 	bl	80025c4 <HAL_GetTick>
 8004388:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f013 0f02 	tst.w	r3, #2
 8004392:	d0cf      	beq.n	8004334 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004394:	f7fe f916 	bl	80025c4 <HAL_GetTick>
 8004398:	1b40      	subs	r0, r0, r5
 800439a:	2802      	cmp	r0, #2
 800439c:	d9f5      	bls.n	800438a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800439e:	2003      	movs	r0, #3
 80043a0:	e0fd      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a2:	4a35      	ldr	r2, [pc, #212]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80043a4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe f90a 	bl	80025c4 <HAL_GetTick>
 80043b0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f013 0f02 	tst.w	r3, #2
 80043ba:	d006      	beq.n	80043ca <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043bc:	f7fe f902 	bl	80025c4 <HAL_GetTick>
 80043c0:	1b40      	subs	r0, r0, r5
 80043c2:	2802      	cmp	r0, #2
 80043c4:	d9f5      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80043c6:	2003      	movs	r0, #3
 80043c8:	e0e9      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	f013 0f04 	tst.w	r3, #4
 80043d0:	d07e      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80043da:	d11e      	bne.n	800441a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80043f0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCC_OscConfig+0x2a4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043fa:	d010      	beq.n	800441e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d021      	beq.n	8004446 <HAL_RCC_OscConfig+0x26e>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d13c      	bne.n	8004480 <HAL_RCC_OscConfig+0x2a8>
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	671a      	str	r2, [r3, #112]	; 0x70
 8004410:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004412:	f022 0204 	bic.w	r2, r2, #4
 8004416:	671a      	str	r2, [r3, #112]	; 0x70
 8004418:	e01a      	b.n	8004450 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800441a:	2500      	movs	r5, #0
 800441c:	e7e9      	b.n	80043f2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_RCC_OscConfig+0x2a4>)
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004428:	f7fe f8cc 	bl	80025c4 <HAL_GetTick>
 800442c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_RCC_OscConfig+0x2a4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004436:	d1e1      	bne.n	80043fc <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fe f8c4 	bl	80025c4 <HAL_GetTick>
 800443c:	1b80      	subs	r0, r0, r6
 800443e:	2864      	cmp	r0, #100	; 0x64
 8004440:	d9f5      	bls.n	800442e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004442:	2003      	movs	r0, #3
 8004444:	e0ab      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004446:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 8004448:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004450:	68a3      	ldr	r3, [r4, #8]
 8004452:	b35b      	cbz	r3, 80044ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fe f8b6 	bl	80025c4 <HAL_GetTick>
 8004458:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_RCC_OscConfig+0x2a0>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	f013 0f02 	tst.w	r3, #2
 8004462:	d134      	bne.n	80044ce <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fe f8ae 	bl	80025c4 <HAL_GetTick>
 8004468:	1b80      	subs	r0, r0, r6
 800446a:	f241 3388 	movw	r3, #5000	; 0x1388
 800446e:	4298      	cmp	r0, r3
 8004470:	d9f3      	bls.n	800445a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8004472:	2003      	movs	r0, #3
 8004474:	e093      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	2b05      	cmp	r3, #5
 8004482:	d009      	beq.n	8004498 <HAL_RCC_OscConfig+0x2c0>
 8004484:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 8004486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	671a      	str	r2, [r3, #112]	; 0x70
 800448e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004490:	f022 0204 	bic.w	r2, r2, #4
 8004494:	671a      	str	r2, [r3, #112]	; 0x70
 8004496:	e7db      	b.n	8004450 <HAL_RCC_OscConfig+0x278>
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 800449a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800449c:	f042 0204 	orr.w	r2, r2, #4
 80044a0:	671a      	str	r2, [r3, #112]	; 0x70
 80044a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	671a      	str	r2, [r3, #112]	; 0x70
 80044aa:	e7d1      	b.n	8004450 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe f88a 	bl	80025c4 <HAL_GetTick>
 80044b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f013 0f02 	tst.w	r3, #2
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fe f882 	bl	80025c4 <HAL_GetTick>
 80044c0:	1b80      	subs	r0, r0, r6
 80044c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80044c6:	4298      	cmp	r0, r3
 80044c8:	d9f3      	bls.n	80044b2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e067      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ce:	b9f5      	cbnz	r5, 800450e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	69a3      	ldr	r3, [r4, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d062      	beq.n	800459c <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d6:	4a34      	ldr	r2, [pc, #208]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	f002 020c 	and.w	r2, r2, #12
 80044de:	2a08      	cmp	r2, #8
 80044e0:	d05f      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d019      	beq.n	800451a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 80044e8:	6813      	ldr	r3, [r2, #0]
 80044ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe f868 	bl	80025c4 <HAL_GetTick>
 80044f4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80044fe:	d047      	beq.n	8004590 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe f860 	bl	80025c4 <HAL_GetTick>
 8004504:	1b00      	subs	r0, r0, r4
 8004506:	2802      	cmp	r0, #2
 8004508:	d9f5      	bls.n	80044f6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800450a:	2003      	movs	r0, #3
 800450c:	e047      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 8004510:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
 8004518:	e7da      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800451a:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 800451c:	6813      	ldr	r3, [r2, #0]
 800451e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004522:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004524:	f7fe f84e 	bl	80025c4 <HAL_GetTick>
 8004528:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004532:	d006      	beq.n	8004542 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe f846 	bl	80025c4 <HAL_GetTick>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	2802      	cmp	r0, #2
 800453c:	d9f5      	bls.n	800452a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800453e:	2003      	movs	r0, #3
 8004540:	e02d      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004542:	69e3      	ldr	r3, [r4, #28]
 8004544:	6a22      	ldr	r2, [r4, #32]
 8004546:	4313      	orrs	r3, r2
 8004548:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800454a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800454e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800455a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800455e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004562:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 8004564:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800456e:	f7fe f829 	bl	80025c4 <HAL_GetTick>
 8004572:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x3d0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457e:	f7fe f821 	bl	80025c4 <HAL_GetTick>
 8004582:	1b00      	subs	r0, r0, r4
 8004584:	2802      	cmp	r0, #2
 8004586:	d9f5      	bls.n	8004574 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8004588:	2003      	movs	r0, #3
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800458c:	2000      	movs	r0, #0
 800458e:	e006      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
 8004590:	2000      	movs	r0, #0
 8004592:	e004      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8004594:	2001      	movs	r0, #1
}
 8004596:	4770      	bx	lr
        return HAL_ERROR;
 8004598:	2001      	movs	r0, #1
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 800459c:	2000      	movs	r0, #0
}
 800459e:	b002      	add	sp, #8
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
 80045a4:	e7fb      	b.n	800459e <HAL_RCC_OscConfig+0x3c6>
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d044      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x96>
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4823      	ldr	r0, [pc, #140]	; (800464c <HAL_RCC_GetSysClockFreq+0xa0>)
 80045be:	4770      	bx	lr
{
 80045c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80045d2:	d013      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d4:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80045dc:	2300      	movs	r3, #0
 80045de:	481c      	ldr	r0, [pc, #112]	; (8004650 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045e0:	fba1 0100 	umull	r0, r1, r1, r0
 80045e4:	f7fc fcce 	bl	8000f84 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80045f0:	3301      	adds	r3, #1
 80045f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80045f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045f8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004604:	461e      	mov	r6, r3
 8004606:	2700      	movs	r7, #0
 8004608:	015c      	lsls	r4, r3, #5
 800460a:	2500      	movs	r5, #0
 800460c:	1ae4      	subs	r4, r4, r3
 800460e:	eb65 0507 	sbc.w	r5, r5, r7
 8004612:	01a9      	lsls	r1, r5, #6
 8004614:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004618:	01a0      	lsls	r0, r4, #6
 800461a:	1b00      	subs	r0, r0, r4
 800461c:	eb61 0105 	sbc.w	r1, r1, r5
 8004620:	00cb      	lsls	r3, r1, #3
 8004622:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004626:	00c4      	lsls	r4, r0, #3
 8004628:	19a0      	adds	r0, r4, r6
 800462a:	eb43 0107 	adc.w	r1, r3, r7
 800462e:	028b      	lsls	r3, r1, #10
 8004630:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004634:	0284      	lsls	r4, r0, #10
 8004636:	4620      	mov	r0, r4
 8004638:	4619      	mov	r1, r3
 800463a:	2300      	movs	r3, #0
 800463c:	f7fc fca2 	bl	8000f84 <__aeabi_uldivmod>
 8004640:	e7d2      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8004642:	4803      	ldr	r0, [pc, #12]	; (8004650 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	017d7840 	.word	0x017d7840

08004654 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004654:	2800      	cmp	r0, #0
 8004656:	f000 80a2 	beq.w	800479e <HAL_RCC_ClockConfig+0x14a>
{
 800465a:	b570      	push	{r4, r5, r6, lr}
 800465c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465e:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <HAL_RCC_ClockConfig+0x154>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	428b      	cmp	r3, r1
 8004668:	d20c      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4a4f      	ldr	r2, [pc, #316]	; (80047a8 <HAL_RCC_ClockConfig+0x154>)
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	f023 030f 	bic.w	r3, r3, #15
 8004672:	430b      	orrs	r3, r1
 8004674:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	428b      	cmp	r3, r1
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004680:	2001      	movs	r0, #1
}
 8004682:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f013 0f02 	tst.w	r3, #2
 800468a:	d017      	beq.n	80046bc <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	f013 0f04 	tst.w	r3, #4
 8004690:	d004      	beq.n	800469c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004692:	4a46      	ldr	r2, [pc, #280]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 8004694:	6893      	ldr	r3, [r2, #8]
 8004696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800469a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f013 0f08 	tst.w	r3, #8
 80046a2:	d004      	beq.n	80046ae <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a4:	4a41      	ldr	r2, [pc, #260]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 80046a6:	6893      	ldr	r3, [r2, #8]
 80046a8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ac:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ae:	4a3f      	ldr	r2, [pc, #252]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 80046b0:	6893      	ldr	r3, [r2, #8]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	68a0      	ldr	r0, [r4, #8]
 80046b8:	4303      	orrs	r3, r0
 80046ba:	6093      	str	r3, [r2, #8]
 80046bc:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f013 0f01 	tst.w	r3, #1
 80046c4:	d031      	beq.n	800472a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d025      	beq.n	800471c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	4a36      	ldr	r2, [pc, #216]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	f012 0f02 	tst.w	r2, #2
 80046d8:	d063      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046da:	4934      	ldr	r1, [pc, #208]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 80046dc:	688a      	ldr	r2, [r1, #8]
 80046de:	f022 0203 	bic.w	r2, r2, #3
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80046e6:	f7fd ff6d 	bl	80025c4 <HAL_GetTick>
 80046ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ec:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046fa:	d016      	beq.n	800472a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fd ff62 	bl	80025c4 <HAL_GetTick>
 8004700:	1b80      	subs	r0, r0, r6
 8004702:	f241 3388 	movw	r3, #5000	; 0x1388
 8004706:	4298      	cmp	r0, r3
 8004708:	d9f0      	bls.n	80046ec <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800470a:	2003      	movs	r0, #3
 800470c:	e7b9      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4a27      	ldr	r2, [pc, #156]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004716:	d1e0      	bne.n	80046da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004718:	2001      	movs	r0, #1
 800471a:	e7b2      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004724:	d1d9      	bne.n	80046da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
 8004728:	e7ab      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472a:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <HAL_RCC_ClockConfig+0x154>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	42ab      	cmp	r3, r5
 8004734:	d90c      	bls.n	8004750 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_RCC_ClockConfig+0x154>)
 8004738:	6813      	ldr	r3, [r2, #0]
 800473a:	f023 030f 	bic.w	r3, r3, #15
 800473e:	432b      	orrs	r3, r5
 8004740:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	42ab      	cmp	r3, r5
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
 800474e:	e798      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	f013 0f04 	tst.w	r3, #4
 8004756:	d006      	beq.n	8004766 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 800475a:	6893      	ldr	r3, [r2, #8]
 800475c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004760:	68e1      	ldr	r1, [r4, #12]
 8004762:	430b      	orrs	r3, r1
 8004764:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	f013 0f08 	tst.w	r3, #8
 800476c:	d007      	beq.n	800477e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800476e:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 8004770:	6893      	ldr	r3, [r2, #8]
 8004772:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004776:	6921      	ldr	r1, [r4, #16]
 8004778:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800477c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800477e:	f7ff ff15 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCC_ClockConfig+0x158>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_ClockConfig+0x15c>)
 800478c:	5cd3      	ldrb	r3, [r2, r3]
 800478e:	40d8      	lsrs	r0, r3
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_RCC_ClockConfig+0x160>)
 8004792:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004794:	2000      	movs	r0, #0
 8004796:	f004 fdff 	bl	8009398 <HAL_InitTick>
  return HAL_OK;
 800479a:	2000      	movs	r0, #0
 800479c:	e771      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800479e:	2001      	movs	r0, #1
}
 80047a0:	4770      	bx	lr
        return HAL_ERROR;
 80047a2:	2001      	movs	r0, #1
 80047a4:	e76d      	b.n	8004682 <HAL_RCC_ClockConfig+0x2e>
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00
 80047ac:	40023800 	.word	0x40023800
 80047b0:	0800fa9c 	.word	0x0800fa9c
 80047b4:	20000054 	.word	0x20000054

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80047b8:	4b01      	ldr	r3, [pc, #4]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000054 	.word	0x20000054

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c6:	f7ff fff7 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80047d2:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80047d6:	40d8      	lsrs	r0, r3
 80047d8:	bd08      	pop	{r3, pc}
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	0800faac 	.word	0x0800faac

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e6:	f7ff ffe7 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80047f2:	4a03      	ldr	r2, [pc, #12]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80047f6:	40d8      	lsrs	r0, r3
 80047f8:	bd08      	pop	{r3, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	0800faac 	.word	0x0800faac

08004804 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004804:	230f      	movs	r3, #15
 8004806:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_GetClockConfig+0x34>)
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	f002 0203 	and.w	r2, r2, #3
 8004810:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004818:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004820:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800482a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetClockConfig+0x38>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	600b      	str	r3, [r1, #0]
}
 8004836:	4770      	bx	lr
 8004838:	40023800 	.word	0x40023800
 800483c:	40023c00 	.word	0x40023c00

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b083      	sub	sp, #12
 8004844:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004846:	6803      	ldr	r3, [r0, #0]
 8004848:	f013 0f01 	tst.w	r3, #1
 800484c:	d00c      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800484e:	4baf      	ldr	r3, [pc, #700]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004860:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004862:	b1c3      	cbz	r3, 8004896 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8004864:	2600      	movs	r6, #0
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004868:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004870:	d015      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004872:	4aa6      	ldr	r2, [pc, #664]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004874:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004878:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800487c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800487e:	430b      	orrs	r3, r1
 8004880:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004884:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488a:	d006      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 811b 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8004892:	2500      	movs	r5, #0
 8004894:	e004      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8004896:	2601      	movs	r6, #1
 8004898:	e7e7      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800489a:	2601      	movs	r6, #1
 800489c:	e7f6      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800489e:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80048a6:	d00f      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a8:	4a98      	ldr	r2, [pc, #608]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80048ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80048b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048b4:	430b      	orrs	r3, r1
 80048b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c0:	f000 8104 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048c4:	b903      	cbnz	r3, 80048c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 80048c6:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80048ce:	d000      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 80048d0:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048d2:	f013 0f20 	tst.w	r3, #32
 80048d6:	f040 80fb 	bne.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f013 0f10 	tst.w	r3, #16
 80048e0:	d00c      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048e2:	4b8a      	ldr	r3, [pc, #552]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048e8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80048ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80048f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048f6:	430a      	orrs	r2, r1
 80048f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004902:	d008      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004904:	4a81      	ldr	r2, [pc, #516]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004906:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800490a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800490e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004910:	430b      	orrs	r3, r1
 8004912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800491c:	d008      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800491e:	4a7b      	ldr	r2, [pc, #492]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004920:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004924:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004928:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800492a:	430b      	orrs	r3, r1
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004938:	4a74      	ldr	r2, [pc, #464]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800493a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800493e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004942:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004944:	430b      	orrs	r3, r1
 8004946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004952:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004954:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004958:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800495c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800495e:	430b      	orrs	r3, r1
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f013 0f40 	tst.w	r3, #64	; 0x40
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496c:	4a67      	ldr	r2, [pc, #412]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800496e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004978:	430b      	orrs	r3, r1
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004986:	4a61      	ldr	r2, [pc, #388]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004988:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800498c:	f023 030c 	bic.w	r3, r3, #12
 8004990:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004992:	430b      	orrs	r3, r1
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800499e:	d008      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a0:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80049ac:	430b      	orrs	r3, r1
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ba:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80049c6:	430b      	orrs	r3, r1
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049d4:	4a4d      	ldr	r2, [pc, #308]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80049e0:	430b      	orrs	r3, r1
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049ee:	4a47      	ldr	r2, [pc, #284]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049fa:	430b      	orrs	r3, r1
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004a06:	d008      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a08:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a12:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a14:	430b      	orrs	r3, r1
 8004a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a22:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a2c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a3c:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a46:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a56:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a5c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004a60:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004a62:	430b      	orrs	r3, r1
 8004a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6e:	f000 8099 	beq.w	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	f013 0f08 	tst.w	r3, #8
 8004a78:	d000      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8004a7a:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004a80:	d008      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a82:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a88:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004a8c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	d179      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aba:	d075      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	f040 8106 	bne.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004ac2:	2000      	movs	r0, #0
}
 8004ac4:	b003      	add	sp, #12
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8004ac8:	2501      	movs	r5, #1
 8004aca:	e6e9      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8004acc:	2601      	movs	r6, #1
 8004ace:	e6f9      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aee:	f7fd fd69 	bl	80025c4 <HAL_GetTick>
 8004af2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004afc:	d10a      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afe:	f7fd fd61 	bl	80025c4 <HAL_GetTick>
 8004b02:	1bc0      	subs	r0, r0, r7
 8004b04:	2864      	cmp	r0, #100	; 0x64
 8004b06:	d9f5      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 8004b08:	2003      	movs	r0, #3
 8004b0a:	e7db      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b14:	4bb3      	ldr	r3, [pc, #716]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b18:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b1c:	d015      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004b1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b20:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d010      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b28:	4bae      	ldr	r3, [pc, #696]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004b32:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004b36:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004b3a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004b3e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004b40:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f013 0f01 	tst.w	r3, #1
 8004b48:	d112      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b4c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004b50:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004b54:	d01d      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004b56:	4aa3      	ldr	r2, [pc, #652]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b58:	6893      	ldr	r3, [r2, #8]
 8004b5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b5e:	6093      	str	r3, [r2, #8]
 8004b60:	49a0      	ldr	r1, [pc, #640]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b62:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004b64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b66:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	670b      	str	r3, [r1, #112]	; 0x70
 8004b6e:	e6b4      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8004b70:	f7fd fd28 	bl	80025c4 <HAL_GetTick>
 8004b74:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	4b9b      	ldr	r3, [pc, #620]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f013 0f02 	tst.w	r3, #2
 8004b7e:	d1e4      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fd fd20 	bl	80025c4 <HAL_GetTick>
 8004b84:	1bc0      	subs	r0, r0, r7
 8004b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	d9f3      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8004b8e:	2003      	movs	r0, #3
 8004b90:	e798      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b92:	4894      	ldr	r0, [pc, #592]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004b94:	6882      	ldr	r2, [r0, #8]
 8004b96:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004b9a:	4993      	ldr	r1, [pc, #588]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8004b9c:	4019      	ands	r1, r3
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	6082      	str	r2, [r0, #8]
 8004ba2:	e7dd      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8004ba4:	2501      	movs	r5, #1
 8004ba6:	e764      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba8:	4a8e      	ldr	r2, [pc, #568]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004bb2:	f7fd fd07 	bl	80025c4 <HAL_GetTick>
 8004bb6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004bc0:	d006      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fd fcff 	bl	80025c4 <HAL_GetTick>
 8004bc6:	1b80      	subs	r0, r0, r6
 8004bc8:	2864      	cmp	r0, #100	; 0x64
 8004bca:	d9f5      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8004bcc:	2003      	movs	r0, #3
 8004bce:	e779      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f013 0f01 	tst.w	r3, #1
 8004bd6:	d013      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bda:	b98b      	cbnz	r3, 8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bdc:	4a81      	ldr	r2, [pc, #516]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004bde:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004be2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be6:	6860      	ldr	r0, [r4, #4]
 8004be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004bf0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	68a1      	ldr	r1, [r4, #8]
 8004bf8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004c06:	d003      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004c08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c0a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004c0e:	d006      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004c14:	d01e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d11a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c1e:	4a71      	ldr	r2, [pc, #452]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004c20:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c24:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c28:	6860      	ldr	r0, [r4, #4]
 8004c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c2e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004c32:	68e0      	ldr	r0, [r4, #12]
 8004c34:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004c38:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c42:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004c46:	f023 031f 	bic.w	r3, r3, #31
 8004c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c4c:	3901      	subs	r1, #1
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004c5a:	d011      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c5c:	4a61      	ldr	r2, [pc, #388]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004c5e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c62:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c66:	6866      	ldr	r6, [r4, #4]
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004c70:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004c74:	4303      	orrs	r3, r0
 8004c76:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c86:	d00d      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c88:	6862      	ldr	r2, [r4, #4]
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c92:	68e2      	ldr	r2, [r4, #12]
 8004c94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c98:	68a2      	ldr	r2, [r4, #8]
 8004c9a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004c9e:	4a51      	ldr	r2, [pc, #324]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ca0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004ca4:	4a4f      	ldr	r2, [pc, #316]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004cae:	f7fd fc89 	bl	80025c4 <HAL_GetTick>
 8004cb2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004cbc:	f47f aefe 	bne.w	8004abc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cc0:	f7fd fc80 	bl	80025c4 <HAL_GetTick>
 8004cc4:	1b80      	subs	r0, r0, r6
 8004cc6:	2864      	cmp	r0, #100	; 0x64
 8004cc8:	d9f4      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8004cca:	2003      	movs	r0, #3
 8004ccc:	e6fa      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8004cce:	4a45      	ldr	r2, [pc, #276]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004cd0:	6813      	ldr	r3, [r2, #0]
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004cd8:	f7fd fc74 	bl	80025c4 <HAL_GetTick>
 8004cdc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cde:	4b41      	ldr	r3, [pc, #260]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004ce6:	d006      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ce8:	f7fd fc6c 	bl	80025c4 <HAL_GetTick>
 8004cec:	1b40      	subs	r0, r0, r5
 8004cee:	2864      	cmp	r0, #100	; 0x64
 8004cf0:	d9f5      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	e6e6      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cfe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d00:	b122      	cbz	r2, 8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004d02:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004d06:	d01d      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d0a:	b9db      	cbnz	r3, 8004d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d0c:	4a35      	ldr	r2, [pc, #212]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004d0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d12:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d16:	6960      	ldr	r0, [r4, #20]
 8004d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d1c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d20:	69a0      	ldr	r0, [r4, #24]
 8004d22:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004d26:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d30:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d34:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004d38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d3a:	3901      	subs	r1, #1
 8004d3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d4c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d52:	d031      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f013 0f08 	tst.w	r3, #8
 8004d5a:	d019      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004d5e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d66:	6960      	ldr	r0, [r4, #20]
 8004d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d6c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d70:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004d74:	430b      	orrs	r3, r1
 8004d76:	69e1      	ldr	r1, [r4, #28]
 8004d78:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d80:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d84:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004d9a:	f7fd fc13 	bl	80025c4 <HAL_GetTick>
 8004d9e:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004da8:	d119      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004daa:	f7fd fc0b 	bl	80025c4 <HAL_GetTick>
 8004dae:	1b00      	subs	r0, r0, r4
 8004db0:	2864      	cmp	r0, #100	; 0x64
 8004db2:	d9f5      	bls.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8004db4:	2003      	movs	r0, #3
 8004db6:	e685      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db8:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004dba:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dbe:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dc2:	6965      	ldr	r5, [r4, #20]
 8004dc4:	6a23      	ldr	r3, [r4, #32]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004dcc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004dd0:	4303      	orrs	r3, r0
 8004dd2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004ddc:	e7ba      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8004dde:	2000      	movs	r0, #0
 8004de0:	e670      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0ffffcff 	.word	0x0ffffcff

08004dec <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004dec:	b1d8      	cbz	r0, 8004e26 <HAL_SDRAM_Init+0x3a>
{   
 8004dee:	b538      	push	{r3, r4, r5, lr}
 8004df0:	4604      	mov	r4, r0
 8004df2:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004df4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004df8:	b183      	cbz	r3, 8004e1c <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e00:	1d21      	adds	r1, r4, #4
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	f001 fa6a 	bl	80062dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e08:	6862      	ldr	r2, [r4, #4]
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	f001 fa9f 	bl	8006350 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004e18:	2000      	movs	r0, #0
}
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004e1c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004e20:	f004 fab6 	bl	8009390 <HAL_SDRAM_MspInit>
 8004e24:	e7e9      	b.n	8004dfa <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8004e26:	2001      	movs	r0, #1
}
 8004e28:	4770      	bx	lr

08004e2a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e2a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e2c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d014      	beq.n	8004e60 <HAL_SDRAM_SendCommand+0x36>
 8004e36:	460d      	mov	r5, r1
 8004e38:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f001 fad1 	bl	80063e8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d004      	beq.n	8004e56 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004e52:	2000      	movs	r0, #0
}
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e56:	2305      	movs	r3, #5
 8004e58:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e7f9      	b.n	8004e54 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8004e60:	2002      	movs	r0, #2
 8004e62:	e7f7      	b.n	8004e54 <HAL_SDRAM_SendCommand+0x2a>

08004e64 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d00c      	beq.n	8004e88 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e72:	2302      	movs	r3, #2
 8004e74:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004e78:	6800      	ldr	r0, [r0, #0]
 8004e7a:	f001 facb 	bl	8006414 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004e84:	2000      	movs	r0, #0
}
 8004e86:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004e88:	2002      	movs	r0, #2
}
 8004e8a:	4770      	bx	lr

08004e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	460f      	mov	r7, r1
 8004e92:	4616      	mov	r6, r2
 8004e94:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	ea37 0303 	bics.w	r3, r7, r3
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	42b3      	cmp	r3, r6
 8004ea6:	d037      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004eac:	d0f3      	beq.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004eae:	f7fd fb89 	bl	80025c4 <HAL_GetTick>
 8004eb2:	9b06      	ldr	r3, [sp, #24]
 8004eb4:	1ac0      	subs	r0, r0, r3
 8004eb6:	42a0      	cmp	r0, r4
 8004eb8:	d201      	bcs.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0x32>
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	d1eb      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ebe:	682a      	ldr	r2, [r5, #0]
 8004ec0:	6853      	ldr	r3, [r2, #4]
 8004ec2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004ec6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec8:	686b      	ldr	r3, [r5, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d00b      	beq.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d014      	beq.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee4:	2003      	movs	r0, #3
 8004ee6:	e018      	b.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee8:	68ab      	ldr	r3, [r5, #8]
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	bf18      	it	ne
 8004ef0:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004ef4:	d1ec      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004ef6:	682a      	ldr	r2, [r5, #0]
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e7e6      	b.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004f02:	682a      	ldr	r2, [r5, #0]
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	682a      	ldr	r2, [r5, #0]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e7df      	b.n	8004ed8 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004f18:	2000      	movs	r0, #0
}
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	4607      	mov	r7, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	4614      	mov	r4, r2
 8004f24:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004f26:	e002      	b.n	8004f2e <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f28:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004f2c:	d10b      	bne.n	8004f46 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	6893      	ldr	r3, [r2, #8]
 8004f32:	402b      	ands	r3, r5
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d03b      	beq.n	8004fb0 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f38:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004f3c:	bf08      	it	eq
 8004f3e:	2c00      	cmpeq	r4, #0
 8004f40:	d1f2      	bne.n	8004f28 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f42:	7b13      	ldrb	r3, [r2, #12]
 8004f44:	e7f0      	b.n	8004f28 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f46:	f7fd fb3d 	bl	80025c4 <HAL_GetTick>
 8004f4a:	9b06      	ldr	r3, [sp, #24]
 8004f4c:	1ac0      	subs	r0, r0, r3
 8004f4e:	42b0      	cmp	r0, r6
 8004f50:	d201      	bcs.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	d1eb      	bne.n	8004f2e <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	6853      	ldr	r3, [r2, #4]
 8004f5a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004f5e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d00b      	beq.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	d014      	beq.n	8004f9a <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f7c:	2003      	movs	r0, #3
 8004f7e:	e018      	b.n	8004fb2 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f86:	bf18      	it	ne
 8004f88:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004f8c:	d1ec      	bne.n	8004f68 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e7e6      	b.n	8004f68 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	6813      	ldr	r3, [r2, #0]
 8004f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e7df      	b.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004fb0:	2000      	movs	r0, #0
}
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fbe:	9200      	str	r2, [sp, #0]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fc8:	f7ff ffa8 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 8004fcc:	b9b8      	cbnz	r0, 8004ffe <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fce:	9600      	str	r6, [sp, #0]
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7ff ff58 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8004fdc:	b9b8      	cbnz	r0, 800500e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fde:	9600      	str	r6, [sp, #0]
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff ff97 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	b150      	cbz	r0, 8005008 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e004      	b.n	8005008 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005000:	f043 0320 	orr.w	r3, r3, #32
 8005004:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8005008:	4618      	mov	r0, r3
 800500a:	b002      	add	sp, #8
 800500c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005010:	f043 0320 	orr.w	r3, r3, #32
 8005014:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e7f6      	b.n	8005008 <SPI_EndRxTxTransaction+0x54>

0800501a <SPI_EndRxTransaction>:
{
 800501a:	b570      	push	{r4, r5, r6, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	4604      	mov	r4, r0
 8005020:	460d      	mov	r5, r1
 8005022:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	6843      	ldr	r3, [r0, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502a:	d00f      	beq.n	800504c <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	9600      	str	r6, [sp, #0]
 800502e:	462b      	mov	r3, r5
 8005030:	2200      	movs	r2, #0
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	4620      	mov	r0, r4
 8005036:	f7ff ff29 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	b998      	cbnz	r0, 8005066 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005044:	d015      	beq.n	8005072 <SPI_EndRxTransaction+0x58>
}
 8005046:	4618      	mov	r0, r3
 8005048:	b002      	add	sp, #8
 800504a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504c:	6883      	ldr	r3, [r0, #8]
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	bf18      	it	ne
 8005054:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005058:	d1e8      	bne.n	800502c <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800505a:	6802      	ldr	r2, [r0, #0]
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e7e2      	b.n	800502c <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005066:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005068:	f043 0320 	orr.w	r3, r3, #32
 800506c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e7e9      	b.n	8005046 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005072:	68a2      	ldr	r2, [r4, #8]
 8005074:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005078:	bf18      	it	ne
 800507a:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 800507e:	d1e2      	bne.n	8005046 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005080:	9600      	str	r6, [sp, #0]
 8005082:	462b      	mov	r3, r5
 8005084:	2200      	movs	r2, #0
 8005086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800508a:	4620      	mov	r0, r4
 800508c:	f7ff ff46 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2800      	cmp	r0, #0
 8005094:	d0d7      	beq.n	8005046 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005098:	f043 0320 	orr.w	r3, r3, #32
 800509c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e7d1      	b.n	8005046 <SPI_EndRxTransaction+0x2c>

080050a2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d058      	beq.n	8005158 <HAL_SPI_Init+0xb6>
{
 80050a6:	b510      	push	{r4, lr}
 80050a8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ae:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d045      	beq.n	8005142 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80050bc:	6822      	ldr	r2, [r4, #0]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c6:	68e3      	ldr	r3, [r4, #12]
 80050c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050cc:	d93e      	bls.n	800514c <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ce:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050d4:	bf18      	it	ne
 80050d6:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 80050da:	d001      	beq.n	80050e0 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050dc:	2100      	movs	r1, #0
 80050de:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80050e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80050e2:	b921      	cbnz	r1, 80050ee <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e8:	d933      	bls.n	8005152 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80050ea:	2302      	movs	r3, #2
 80050ec:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	68a1      	ldr	r1, [r4, #8]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6921      	ldr	r1, [r4, #16]
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6961      	ldr	r1, [r4, #20]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	69a1      	ldr	r1, [r4, #24]
 80050fe:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005102:	430b      	orrs	r3, r1
 8005104:	69e1      	ldr	r1, [r4, #28]
 8005106:	430b      	orrs	r3, r1
 8005108:	6a21      	ldr	r1, [r4, #32]
 800510a:	430b      	orrs	r3, r1
 800510c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	4303      	orrs	r3, r0
 8005112:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005114:	8b63      	ldrh	r3, [r4, #26]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800511c:	430b      	orrs	r3, r1
 800511e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005120:	430b      	orrs	r3, r1
 8005122:	68e1      	ldr	r1, [r4, #12]
 8005124:	430b      	orrs	r3, r1
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	69d3      	ldr	r3, [r2, #28]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005136:	2000      	movs	r0, #0
 8005138:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800513a:	2301      	movs	r3, #1
 800513c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005140:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005142:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005146:	f004 f855 	bl	80091f4 <HAL_SPI_MspInit>
 800514a:	e7b4      	b.n	80050b6 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800514c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005150:	e7be      	b.n	80050d0 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005152:	2301      	movs	r3, #1
 8005154:	6323      	str	r3, [r4, #48]	; 0x30
 8005156:	e7ca      	b.n	80050ee <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8005158:	2001      	movs	r0, #1
}
 800515a:	4770      	bx	lr

0800515c <HAL_SPI_Transmit_IT>:
{
 800515c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800515e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8005162:	2801      	cmp	r0, #1
 8005164:	d049      	beq.n	80051fa <HAL_SPI_Transmit_IT+0x9e>
 8005166:	2001      	movs	r0, #1
 8005168:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800516c:	fab2 f082 	clz	r0, r2
 8005170:	0940      	lsrs	r0, r0, #5
 8005172:	2900      	cmp	r1, #0
 8005174:	bf08      	it	eq
 8005176:	2001      	moveq	r0, #1
 8005178:	2800      	cmp	r0, #0
 800517a:	d137      	bne.n	80051ec <HAL_SPI_Transmit_IT+0x90>
  if (hspi->State != HAL_SPI_STATE_READY)
 800517c:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8005180:	b2c0      	uxtb	r0, r0
 8005182:	2801      	cmp	r0, #1
 8005184:	d001      	beq.n	800518a <HAL_SPI_Transmit_IT+0x2e>
    errorcode = HAL_BUSY;
 8005186:	2002      	movs	r0, #2
 8005188:	e031      	b.n	80051ee <HAL_SPI_Transmit_IT+0x92>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800518a:	2003      	movs	r0, #3
 800518c:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005190:	2000      	movs	r0, #0
 8005192:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005194:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005198:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800519a:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800519c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80051a0:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80051a4:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80051ac:	d915      	bls.n	80051da <HAL_SPI_Transmit_IT+0x7e>
    hspi->TxISR = SPI_TxISR_16BIT;
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_SPI_Transmit_IT+0xa4>)
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051b8:	d012      	beq.n	80051e0 <HAL_SPI_Transmit_IT+0x84>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	684a      	ldr	r2, [r1, #4]
 80051be:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80051c2:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	6811      	ldr	r1, [r2, #0]
 80051c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80051cc:	d113      	bne.n	80051f6 <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 80051ce:	6811      	ldr	r1, [r2, #0]
 80051d0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80051d4:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051d6:	2000      	movs	r0, #0
 80051d8:	e009      	b.n	80051ee <HAL_SPI_Transmit_IT+0x92>
    hspi->TxISR = SPI_TxISR_8BIT;
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_SPI_Transmit_IT+0xa8>)
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50
 80051de:	e7e8      	b.n	80051b2 <HAL_SPI_Transmit_IT+0x56>
    SPI_1LINE_TX(hspi);
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	680a      	ldr	r2, [r1, #0]
 80051e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e8:	600a      	str	r2, [r1, #0]
 80051ea:	e7e6      	b.n	80051ba <HAL_SPI_Transmit_IT+0x5e>
    errorcode = HAL_ERROR;
 80051ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051f4:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f6:	2000      	movs	r0, #0
 80051f8:	e7f9      	b.n	80051ee <HAL_SPI_Transmit_IT+0x92>
  __HAL_LOCK(hspi);
 80051fa:	2002      	movs	r0, #2
}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	08005461 	.word	0x08005461
 8005204:	0800543b 	.word	0x0800543b

08005208 <HAL_SPI_TransmitReceive_IT>:
{
 8005208:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 800520a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800520e:	2c01      	cmp	r4, #1
 8005210:	d06b      	beq.n	80052ea <HAL_SPI_TransmitReceive_IT+0xe2>
 8005212:	2401      	movs	r4, #1
 8005214:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8005218:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800521c:	b2e4      	uxtb	r4, r4
  tmp_mode            = hspi->Init.Mode;
 800521e:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005220:	2c01      	cmp	r4, #1
 8005222:	d010      	beq.n	8005246 <HAL_SPI_TransmitReceive_IT+0x3e>
 8005224:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8005228:	d006      	beq.n	8005238 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800522c:	2200      	movs	r2, #0
 800522e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8005232:	4618      	mov	r0, r3
 8005234:	bc30      	pop	{r4, r5}
 8005236:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005238:	6885      	ldr	r5, [r0, #8]
 800523a:	2d00      	cmp	r5, #0
 800523c:	d14d      	bne.n	80052da <HAL_SPI_TransmitReceive_IT+0xd2>
 800523e:	2c04      	cmp	r4, #4
 8005240:	d001      	beq.n	8005246 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	e7f2      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005246:	fab2 f482 	clz	r4, r2
 800524a:	0964      	lsrs	r4, r4, #5
 800524c:	2900      	cmp	r1, #0
 800524e:	bf08      	it	eq
 8005250:	2401      	moveq	r4, #1
 8005252:	2c00      	cmp	r4, #0
 8005254:	d143      	bne.n	80052de <HAL_SPI_TransmitReceive_IT+0xd6>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d043      	beq.n	80052e2 <HAL_SPI_TransmitReceive_IT+0xda>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800525a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800525e:	b2e4      	uxtb	r4, r4
 8005260:	2c04      	cmp	r4, #4
 8005262:	d002      	beq.n	800526a <HAL_SPI_TransmitReceive_IT+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005264:	2405      	movs	r4, #5
 8005266:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526a:	2400      	movs	r4, #0
 800526c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800526e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005270:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005272:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005274:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005276:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 800527a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527e:	68c2      	ldr	r2, [r0, #12]
 8005280:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8005284:	d91e      	bls.n	80052c4 <HAL_SPI_TransmitReceive_IT+0xbc>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005286:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <HAL_SPI_TransmitReceive_IT+0xe8>)
 8005288:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_SPI_TransmitReceive_IT+0xec>)
 800528c:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800528e:	68c2      	ldr	r2, [r0, #12]
 8005290:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8005294:	d801      	bhi.n	800529a <HAL_SPI_TransmitReceive_IT+0x92>
 8005296:	2b01      	cmp	r3, #1
 8005298:	d919      	bls.n	80052ce <HAL_SPI_TransmitReceive_IT+0xc6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800529a:	6802      	ldr	r2, [r0, #0]
 800529c:	6853      	ldr	r3, [r2, #4]
 800529e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a2:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a4:	6802      	ldr	r2, [r0, #0]
 80052a6:	6853      	ldr	r3, [r2, #4]
 80052a8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80052ac:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ae:	6803      	ldr	r3, [r0, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80052b6:	d116      	bne.n	80052e6 <HAL_SPI_TransmitReceive_IT+0xde>
    __HAL_SPI_ENABLE(hspi);
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052be:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e7b3      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <HAL_SPI_TransmitReceive_IT+0xf0>)
 80052c6:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80052c8:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <HAL_SPI_TransmitReceive_IT+0xf4>)
 80052ca:	6502      	str	r2, [r0, #80]	; 0x50
 80052cc:	e7df      	b.n	800528e <HAL_SPI_TransmitReceive_IT+0x86>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ce:	6802      	ldr	r2, [r0, #0]
 80052d0:	6853      	ldr	r3, [r2, #4]
 80052d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d6:	6053      	str	r3, [r2, #4]
 80052d8:	e7e4      	b.n	80052a4 <HAL_SPI_TransmitReceive_IT+0x9c>
    errorcode = HAL_BUSY;
 80052da:	2302      	movs	r3, #2
 80052dc:	e7a6      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e7a4      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7a2      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e7a0      	b.n	800522c <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 80052ea:	2302      	movs	r3, #2
 80052ec:	e7a1      	b.n	8005232 <HAL_SPI_TransmitReceive_IT+0x2a>
 80052ee:	bf00      	nop
 80052f0:	08005685 	.word	0x08005685
 80052f4:	0800564d 	.word	0x0800564d
 80052f8:	080055d5 	.word	0x080055d5
 80052fc:	0800557d 	.word	0x0800557d

08005300 <HAL_SPI_Receive_IT>:
{
 8005300:	b510      	push	{r4, lr}
 8005302:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005304:	6880      	ldr	r0, [r0, #8]
 8005306:	b918      	cbnz	r0, 8005310 <HAL_SPI_Receive_IT+0x10>
 8005308:	6863      	ldr	r3, [r4, #4]
 800530a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530e:	d010      	beq.n	8005332 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 8005310:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8005314:	2801      	cmp	r0, #1
 8005316:	d05c      	beq.n	80053d2 <HAL_SPI_Receive_IT+0xd2>
 8005318:	2301      	movs	r3, #1
 800531a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800531e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005322:	b2c0      	uxtb	r0, r0
 8005324:	4298      	cmp	r0, r3
 8005326:	d00d      	beq.n	8005344 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 8005328:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800532a:	2300      	movs	r3, #0
 800532c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005330:	bd10      	pop	{r4, pc}
 8005332:	4613      	mov	r3, r2
 8005334:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005336:	2204      	movs	r2, #4
 8005338:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800533c:	460a      	mov	r2, r1
 800533e:	f7ff ff63 	bl	8005208 <HAL_SPI_TransmitReceive_IT>
 8005342:	e7f5      	b.n	8005330 <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 8005344:	fab2 f382 	clz	r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	2900      	cmp	r1, #0
 800534c:	bf08      	it	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d13a      	bne.n	80053ca <HAL_SPI_Receive_IT+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005354:	2304      	movs	r3, #4
 8005356:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535a:	2300      	movs	r3, #0
 800535c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800535e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005360:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005364:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005368:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800536a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800536c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800536e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005370:	68e3      	ldr	r3, [r4, #12]
 8005372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005376:	d91a      	bls.n	80053ae <HAL_SPI_Receive_IT+0xae>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	6853      	ldr	r3, [r2, #4]
 800537c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005380:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <HAL_SPI_Receive_IT+0xd8>)
 8005384:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	d017      	beq.n	80053be <HAL_SPI_Receive_IT+0xbe>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	6853      	ldr	r3, [r2, #4]
 8005392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005396:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053a0:	d115      	bne.n	80053ce <HAL_SPI_Receive_IT+0xce>
    __HAL_SPI_ENABLE(hspi);
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053aa:	2000      	movs	r0, #0
 80053ac:	e7bd      	b.n	800532a <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	6853      	ldr	r3, [r2, #4]
 80053b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053b6:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <HAL_SPI_Receive_IT+0xdc>)
 80053ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80053bc:	e7e3      	b.n	8005386 <HAL_SPI_Receive_IT+0x86>
    SPI_1LINE_RX(hspi);
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	6813      	ldr	r3, [r2, #0]
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e7e1      	b.n	800538e <HAL_SPI_Receive_IT+0x8e>
    errorcode = HAL_ERROR;
 80053ca:	2001      	movs	r0, #1
 80053cc:	e7ad      	b.n	800532a <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053ce:	2000      	movs	r0, #0
 80053d0:	e7ab      	b.n	800532a <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 80053d2:	2002      	movs	r0, #2
 80053d4:	e7ac      	b.n	8005330 <HAL_SPI_Receive_IT+0x30>
 80053d6:	bf00      	nop
 80053d8:	080054f3 	.word	0x080054f3
 80053dc:	080054c7 	.word	0x080054c7

080053e0 <HAL_SPI_TxRxCpltCallback>:
}
 80053e0:	4770      	bx	lr

080053e2 <HAL_SPI_ErrorCallback>:
}
 80053e2:	4770      	bx	lr

080053e4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80053e4:	b510      	push	{r4, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ea:	f7fd f8eb 	bl	80025c4 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	6853      	ldr	r3, [r2, #4]
 80053f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053f6:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053f8:	4602      	mov	r2, r0
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7ff fdd9 	bl	8004fb4 <SPI_EndRxTxTransaction>
 8005402:	b118      	cbz	r0, 800540c <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005404:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005406:	f043 0320 	orr.w	r3, r3, #32
 800540a:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800540c:	68a3      	ldr	r3, [r4, #8]
 800540e:	b933      	cbnz	r3, 800541e <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	9201      	str	r2, [sp, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800541e:	2301      	movs	r3, #1
 8005420:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005424:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005426:	b923      	cbnz	r3, 8005432 <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 8005428:	4620      	mov	r0, r4
 800542a:	f7fc fe2f 	bl	800208c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800542e:	b002      	add	sp, #8
 8005430:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff ffd5 	bl	80053e2 <HAL_SPI_ErrorCallback>
 8005438:	e7f9      	b.n	800542e <SPI_CloseTx_ISR+0x4a>

0800543a <SPI_TxISR_8BIT>:
{
 800543a:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800543c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800543e:	6803      	ldr	r3, [r0, #0]
 8005440:	7812      	ldrb	r2, [r2, #0]
 8005442:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8005444:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005446:	3301      	adds	r3, #1
 8005448:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800544a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800544c:	3b01      	subs	r3, #1
 800544e:	b29b      	uxth	r3, r3
 8005450:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005452:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005454:	b29b      	uxth	r3, r3
 8005456:	b103      	cbz	r3, 800545a <SPI_TxISR_8BIT+0x20>
}
 8005458:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800545a:	f7ff ffc3 	bl	80053e4 <SPI_CloseTx_ISR>
}
 800545e:	e7fb      	b.n	8005458 <SPI_TxISR_8BIT+0x1e>

08005460 <SPI_TxISR_16BIT>:
{
 8005460:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005462:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005464:	6803      	ldr	r3, [r0, #0]
 8005466:	8812      	ldrh	r2, [r2, #0]
 8005468:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800546a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800546c:	3302      	adds	r3, #2
 800546e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005470:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005478:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800547a:	b29b      	uxth	r3, r3
 800547c:	b103      	cbz	r3, 8005480 <SPI_TxISR_16BIT+0x20>
}
 800547e:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8005480:	f7ff ffb0 	bl	80053e4 <SPI_CloseTx_ISR>
}
 8005484:	e7fb      	b.n	800547e <SPI_TxISR_16BIT+0x1e>

08005486 <SPI_CloseRx_ISR>:
{
 8005486:	b510      	push	{r4, lr}
 8005488:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800548a:	6802      	ldr	r2, [r0, #0]
 800548c:	6853      	ldr	r3, [r2, #4]
 800548e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005492:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005494:	f7fd f896 	bl	80025c4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	4620      	mov	r0, r4
 800549e:	f7ff fdbc 	bl	800501a <SPI_EndRxTransaction>
 80054a2:	b118      	cbz	r0, 80054ac <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054a6:	f043 0320 	orr.w	r3, r3, #32
 80054aa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80054b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054b4:	b11b      	cbz	r3, 80054be <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ff93 	bl	80053e2 <HAL_SPI_ErrorCallback>
}
 80054bc:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80054be:	4620      	mov	r0, r4
 80054c0:	f7fc fdea 	bl	8002098 <HAL_SPI_RxCpltCallback>
 80054c4:	e7fa      	b.n	80054bc <SPI_CloseRx_ISR+0x36>

080054c6 <SPI_RxISR_8BIT>:
{
 80054c6:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80054c8:	6802      	ldr	r2, [r0, #0]
 80054ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054cc:	7b12      	ldrb	r2, [r2, #12]
 80054ce:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80054d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054d2:	3301      	adds	r3, #1
 80054d4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80054d6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80054e2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b103      	cbz	r3, 80054ec <SPI_RxISR_8BIT+0x26>
}
 80054ea:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 80054ec:	f7ff ffcb 	bl	8005486 <SPI_CloseRx_ISR>
}
 80054f0:	e7fb      	b.n	80054ea <SPI_RxISR_8BIT+0x24>

080054f2 <SPI_RxISR_16BIT>:
{
 80054f2:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80054f4:	6803      	ldr	r3, [r0, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054fa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054fe:	3302      	adds	r3, #2
 8005500:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8005502:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005506:	3b01      	subs	r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800550e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005512:	b29b      	uxth	r3, r3
 8005514:	b103      	cbz	r3, 8005518 <SPI_RxISR_16BIT+0x26>
}
 8005516:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005518:	f7ff ffb5 	bl	8005486 <SPI_CloseRx_ISR>
}
 800551c:	e7fb      	b.n	8005516 <SPI_RxISR_16BIT+0x24>

0800551e <SPI_CloseRxTx_ISR>:
{
 800551e:	b510      	push	{r4, lr}
 8005520:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8005522:	f7fd f84f 	bl	80025c4 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	6853      	ldr	r3, [r2, #4]
 800552a:	f023 0320 	bic.w	r3, r3, #32
 800552e:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005530:	4602      	mov	r2, r0
 8005532:	2164      	movs	r1, #100	; 0x64
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fd3d 	bl	8004fb4 <SPI_EndRxTxTransaction>
 800553a:	b118      	cbz	r0, 8005544 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800553e:	f043 0320 	orr.w	r3, r3, #32
 8005542:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005544:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005546:	b993      	cbnz	r3, 800556e <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005548:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b04      	cmp	r3, #4
 8005550:	d006      	beq.n	8005560 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 8005552:	2301      	movs	r3, #1
 8005554:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff41 	bl	80053e0 <HAL_SPI_TxRxCpltCallback>
}
 800555e:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8005560:	2301      	movs	r3, #1
 8005562:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8005566:	4620      	mov	r0, r4
 8005568:	f7fc fd96 	bl	8002098 <HAL_SPI_RxCpltCallback>
 800556c:	e7f7      	b.n	800555e <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 800556e:	2301      	movs	r3, #1
 8005570:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff ff34 	bl	80053e2 <HAL_SPI_ErrorCallback>
}
 800557a:	e7f0      	b.n	800555e <SPI_CloseRxTx_ISR+0x40>

0800557c <SPI_2linesTxISR_8BIT>:
{
 800557c:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 800557e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d917      	bls.n	80055b6 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005586:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	8812      	ldrh	r2, [r2, #0]
 800558c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800558e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005590:	3302      	adds	r3, #2
 8005592:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005594:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005596:	3b02      	subs	r3, #2
 8005598:	b29b      	uxth	r3, r3
 800559a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800559c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b943      	cbnz	r3, 80055b4 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80055a2:	6802      	ldr	r2, [r0, #0]
 80055a4:	6853      	ldr	r3, [r2, #4]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80055ac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	b163      	cbz	r3, 80055ce <SPI_2linesTxISR_8BIT+0x52>
}
 80055b4:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80055b8:	6803      	ldr	r3, [r0, #0]
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 80055be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80055c0:	3301      	adds	r3, #1
 80055c2:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80055c4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	87c3      	strh	r3, [r0, #62]	; 0x3e
 80055cc:	e7e6      	b.n	800559c <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 80055ce:	f7ff ffa6 	bl	800551e <SPI_CloseRxTx_ISR>
}
 80055d2:	e7ef      	b.n	80055b4 <SPI_2linesTxISR_8BIT+0x38>

080055d4 <SPI_2linesRxISR_8BIT>:
{
 80055d4:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 80055d6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d924      	bls.n	800562a <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055e0:	6803      	ldr	r3, [r0, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055e6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055ea:	3302      	adds	r3, #2
 80055ec:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80055ee:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055f2:	3b02      	subs	r3, #2
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80055fa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d00c      	beq.n	800561e <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 8005604:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005608:	b29b      	uxth	r3, r3
 800560a:	b93b      	cbnz	r3, 800561c <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800560c:	6802      	ldr	r2, [r0, #0]
 800560e:	6853      	ldr	r3, [r2, #4]
 8005610:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005614:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8005616:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005618:	b29b      	uxth	r3, r3
 800561a:	b1a3      	cbz	r3, 8005646 <SPI_2linesRxISR_8BIT+0x72>
}
 800561c:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800561e:	6802      	ldr	r2, [r0, #0]
 8005620:	6853      	ldr	r3, [r2, #4]
 8005622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005626:	6053      	str	r3, [r2, #4]
 8005628:	e7ec      	b.n	8005604 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800562a:	6802      	ldr	r2, [r0, #0]
 800562c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800562e:	7b12      	ldrb	r2, [r2, #12]
 8005630:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005632:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005634:	3301      	adds	r3, #1
 8005636:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8005638:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800563c:	3b01      	subs	r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8005644:	e7de      	b.n	8005604 <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 8005646:	f7ff ff6a 	bl	800551e <SPI_CloseRxTx_ISR>
}
 800564a:	e7e7      	b.n	800561c <SPI_2linesRxISR_8BIT+0x48>

0800564c <SPI_2linesTxISR_16BIT>:
{
 800564c:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800564e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005650:	6803      	ldr	r3, [r0, #0]
 8005652:	8812      	ldrh	r2, [r2, #0]
 8005654:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005656:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005658:	3302      	adds	r3, #2
 800565a:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800565c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800565e:	3b01      	subs	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005664:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	b943      	cbnz	r3, 800567c <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800566a:	6802      	ldr	r2, [r0, #0]
 800566c:	6853      	ldr	r3, [r2, #4]
 800566e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005672:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8005674:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005678:	b29b      	uxth	r3, r3
 800567a:	b103      	cbz	r3, 800567e <SPI_2linesTxISR_16BIT+0x32>
}
 800567c:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800567e:	f7ff ff4e 	bl	800551e <SPI_CloseRxTx_ISR>
}
 8005682:	e7fb      	b.n	800567c <SPI_2linesTxISR_16BIT+0x30>

08005684 <SPI_2linesRxISR_16BIT>:
{
 8005684:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005686:	6803      	ldr	r3, [r0, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800568c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800568e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005690:	3302      	adds	r3, #2
 8005692:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8005694:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005698:	3b01      	subs	r3, #1
 800569a:	b29b      	uxth	r3, r3
 800569c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80056a0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b93b      	cbnz	r3, 80056b8 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80056a8:	6802      	ldr	r2, [r0, #0]
 80056aa:	6853      	ldr	r3, [r2, #4]
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80056b2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	b103      	cbz	r3, 80056ba <SPI_2linesRxISR_16BIT+0x36>
}
 80056b8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80056ba:	f7ff ff30 	bl	800551e <SPI_CloseRxTx_ISR>
}
 80056be:	e7fb      	b.n	80056b8 <SPI_2linesRxISR_16BIT+0x34>

080056c0 <HAL_SPI_IRQHandler>:
{
 80056c0:	b530      	push	{r4, r5, lr}
 80056c2:	b085      	sub	sp, #20
 80056c4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80056c6:	6802      	ldr	r2, [r0, #0]
 80056c8:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80056ca:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056cc:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80056d0:	b949      	cbnz	r1, 80056e6 <HAL_SPI_IRQHandler+0x26>
 80056d2:	f013 0f01 	tst.w	r3, #1
 80056d6:	d006      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056dc:	d003      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 80056de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80056e0:	4620      	mov	r0, r4
 80056e2:	4798      	blx	r3
    return;
 80056e4:	e008      	b.n	80056f8 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056e6:	f013 0f02 	tst.w	r3, #2
 80056ea:	d007      	beq.n	80056fc <HAL_SPI_IRQHandler+0x3c>
 80056ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056f0:	d004      	beq.n	80056fc <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80056f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056f4:	4620      	mov	r0, r4
 80056f6:	4798      	blx	r3
}
 80056f8:	b005      	add	sp, #20
 80056fa:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056fc:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8005700:	b91d      	cbnz	r5, 800570a <HAL_SPI_IRQHandler+0x4a>
 8005702:	b911      	cbnz	r1, 800570a <HAL_SPI_IRQHandler+0x4a>
 8005704:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005708:	d0f6      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x38>
 800570a:	f010 0f20 	tst.w	r0, #32
 800570e:	d0f3      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005710:	b179      	cbz	r1, 8005732 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005712:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 8005716:	b2c9      	uxtb	r1, r1
 8005718:	2903      	cmp	r1, #3
 800571a:	d053      	beq.n	80057c4 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800571c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800571e:	f041 0104 	orr.w	r1, r1, #4
 8005722:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005724:	2100      	movs	r1, #0
 8005726:	9100      	str	r1, [sp, #0]
 8005728:	68d1      	ldr	r1, [r2, #12]
 800572a:	9100      	str	r1, [sp, #0]
 800572c:	6891      	ldr	r1, [r2, #8]
 800572e:	9100      	str	r1, [sp, #0]
 8005730:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005732:	b165      	cbz	r5, 800574e <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005734:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005736:	f041 0101 	orr.w	r1, r1, #1
 800573a:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800573c:	2100      	movs	r1, #0
 800573e:	9102      	str	r1, [sp, #8]
 8005740:	6891      	ldr	r1, [r2, #8]
 8005742:	9102      	str	r1, [sp, #8]
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800574a:	6011      	str	r1, [r2, #0]
 800574c:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800574e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005752:	d009      	beq.n	8005768 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005754:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005756:	f043 0308 	orr.w	r3, r3, #8
 800575a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800575c:	2300      	movs	r3, #0
 800575e:	9303      	str	r3, [sp, #12]
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005768:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0c4      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	6853      	ldr	r3, [r2, #4]
 8005772:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005776:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005778:	2301      	movs	r3, #1
 800577a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800577e:	f010 0f03 	tst.w	r0, #3
 8005782:	d027      	beq.n	80057d4 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	6853      	ldr	r3, [r2, #4]
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800578e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005790:	b14b      	cbz	r3, 80057a6 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <HAL_SPI_IRQHandler+0x11c>)
 8005794:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005796:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005798:	f7fd fbc9 	bl	8002f2e <HAL_DMA_Abort_IT>
 800579c:	b118      	cbz	r0, 80057a6 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800579e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a4:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80057a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0a5      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057ac:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <HAL_SPI_IRQHandler+0x11c>)
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057b2:	f7fd fbbc 	bl	8002f2e <HAL_DMA_Abort_IT>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d09e      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c0:	6623      	str	r3, [r4, #96]	; 0x60
 80057c2:	e799      	b.n	80056f8 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c4:	2300      	movs	r3, #0
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	68d3      	ldr	r3, [r2, #12]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6893      	ldr	r3, [r2, #8]
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	9b01      	ldr	r3, [sp, #4]
        return;
 80057d2:	e791      	b.n	80056f8 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff fe04 	bl	80053e2 <HAL_SPI_ErrorCallback>
 80057da:	e78d      	b.n	80056f8 <HAL_SPI_IRQHandler+0x38>
 80057dc:	080057e1 	.word	0x080057e1

080057e0 <SPI_DMAAbortOnError>:
{
 80057e0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80057ea:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80057ec:	f7ff fdf9 	bl	80053e2 <HAL_SPI_ErrorCallback>
}
 80057f0:	bd08      	pop	{r3, pc}

080057f2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f6:	6a04      	ldr	r4, [r0, #32]
 80057f8:	f024 0401 	bic.w	r4, r4, #1
 80057fc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005800:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005808:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800580c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005810:	6203      	str	r3, [r0, #32]
}
 8005812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005818:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581a:	6a03      	ldr	r3, [r0, #32]
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005822:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005824:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005826:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005832:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005836:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005838:	6203      	str	r3, [r0, #32]
}
 800583a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005840:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	4319      	orrs	r1, r3
 8005848:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584c:	6081      	str	r1, [r0, #8]
}
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005850:	6802      	ldr	r2, [r0, #0]
 8005852:	68d3      	ldr	r3, [r2, #12]
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585a:	6802      	ldr	r2, [r0, #0]
 800585c:	6891      	ldr	r1, [r2, #8]
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_TIM_Base_Start_IT+0x28>)
 8005860:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	2b06      	cmp	r3, #6
 8005864:	bf18      	it	ne
 8005866:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 800586a:	d003      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	2000      	movs	r0, #0
 8005876:	4770      	bx	lr
 8005878:	00010007 	.word	0x00010007

0800587c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_IC_CaptureCallback>:
}
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005880:	4770      	bx	lr

08005882 <HAL_TIM_TriggerCallback>:
}
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_IRQHandler>:
{
 8005884:	b510      	push	{r4, lr}
 8005886:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005888:	6803      	ldr	r3, [r0, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	f012 0f02 	tst.w	r2, #2
 8005890:	d011      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	f012 0f02 	tst.w	r2, #2
 8005898:	d00d      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800589a:	f06f 0202 	mvn.w	r2, #2
 800589e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a0:	2301      	movs	r3, #1
 80058a2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a4:	6803      	ldr	r3, [r0, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f013 0f03 	tst.w	r3, #3
 80058ac:	d079      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	f7ff ffe6 	bl	800587e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	2300      	movs	r3, #0
 80058b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	f012 0f04 	tst.w	r2, #4
 80058be:	d012      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	f012 0f04 	tst.w	r2, #4
 80058c6:	d00e      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c8:	f06f 0204 	mvn.w	r2, #4
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	2302      	movs	r3, #2
 80058d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80058da:	d068      	beq.n	80059ae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff ffce 	bl	800587e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	2300      	movs	r3, #0
 80058e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	f012 0f08 	tst.w	r2, #8
 80058ee:	d012      	beq.n	8005916 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	f012 0f08 	tst.w	r2, #8
 80058f6:	d00e      	beq.n	8005916 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058f8:	f06f 0208 	mvn.w	r2, #8
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058fe:	2304      	movs	r3, #4
 8005900:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f013 0f03 	tst.w	r3, #3
 800590a:	d057      	beq.n	80059bc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800590c:	4620      	mov	r0, r4
 800590e:	f7ff ffb6 	bl	800587e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	2300      	movs	r3, #0
 8005914:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	f012 0f10 	tst.w	r2, #16
 800591e:	d012      	beq.n	8005946 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	f012 0f10 	tst.w	r2, #16
 8005926:	d00e      	beq.n	8005946 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005928:	f06f 0210 	mvn.w	r2, #16
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592e:	2308      	movs	r3, #8
 8005930:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f413 7f40 	tst.w	r3, #768	; 0x300
 800593a:	d046      	beq.n	80059ca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800593c:	4620      	mov	r0, r4
 800593e:	f7ff ff9e 	bl	800587e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	2300      	movs	r3, #0
 8005944:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	f012 0f01 	tst.w	r2, #1
 800594e:	d003      	beq.n	8005958 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	f012 0f01 	tst.w	r2, #1
 8005956:	d13f      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005968:	d13d      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005972:	d003      	beq.n	800597c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	f012 0f80 	tst.w	r2, #128	; 0x80
 800597a:	d13b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	f012 0f40 	tst.w	r2, #64	; 0x40
 800598c:	d139      	bne.n	8005a02 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	f012 0f20 	tst.w	r2, #32
 8005996:	d003      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	f012 0f20 	tst.w	r2, #32
 800599e:	d137      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x18c>
}
 80059a0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	f7ff ff6b 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7ff ff6a 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
 80059ac:	e781      	b.n	80058b2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7ff ff64 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff ff63 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
 80059ba:	e792      	b.n	80058e2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059bc:	4620      	mov	r0, r4
 80059be:	f7ff ff5d 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ff5c 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
 80059c8:	e7a3      	b.n	8005912 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	4620      	mov	r0, r4
 80059cc:	f7ff ff56 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7ff ff55 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
 80059d6:	e7b4      	b.n	8005942 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d8:	f06f 0201 	mvn.w	r2, #1
 80059dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80059de:	4620      	mov	r0, r4
 80059e0:	f003 f9fc 	bl	8008ddc <HAL_TIM_PeriodElapsedCallback>
 80059e4:	e7b8      	b.n	8005958 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 f964 	bl	8005cba <HAL_TIMEx_BreakCallback>
 80059f2:	e7ba      	b.n	800596a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 f95e 	bl	8005cbc <HAL_TIMEx_Break2Callback>
 8005a00:	e7bc      	b.n	800597c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f7ff ff3a 	bl	8005882 <HAL_TIM_TriggerCallback>
 8005a0e:	e7be      	b.n	800598e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a10:	f06f 0220 	mvn.w	r2, #32
 8005a14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f94e 	bl	8005cb8 <HAL_TIMEx_CommutCallback>
}
 8005a1c:	e7c0      	b.n	80059a0 <HAL_TIM_IRQHandler+0x11c>
	...

08005a20 <TIM_Base_SetConfig>:
{
 8005a20:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8005a22:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	4c3a      	ldr	r4, [pc, #232]	; (8005b10 <TIM_Base_SetConfig+0xf0>)
 8005a26:	42a0      	cmp	r0, r4
 8005a28:	bf14      	ite	ne
 8005a2a:	2400      	movne	r4, #0
 8005a2c:	2401      	moveq	r4, #1
 8005a2e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a32:	bf14      	ite	ne
 8005a34:	4622      	movne	r2, r4
 8005a36:	f044 0201 	orreq.w	r2, r4, #1
 8005a3a:	b9aa      	cbnz	r2, 8005a68 <TIM_Base_SetConfig+0x48>
 8005a3c:	4d35      	ldr	r5, [pc, #212]	; (8005b14 <TIM_Base_SetConfig+0xf4>)
 8005a3e:	42a8      	cmp	r0, r5
 8005a40:	bf14      	ite	ne
 8005a42:	2500      	movne	r5, #0
 8005a44:	2501      	moveq	r5, #1
 8005a46:	4e34      	ldr	r6, [pc, #208]	; (8005b18 <TIM_Base_SetConfig+0xf8>)
 8005a48:	42b0      	cmp	r0, r6
 8005a4a:	d00d      	beq.n	8005a68 <TIM_Base_SetConfig+0x48>
 8005a4c:	b965      	cbnz	r5, 8005a68 <TIM_Base_SetConfig+0x48>
 8005a4e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8005a52:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8005a56:	42a8      	cmp	r0, r5
 8005a58:	bf14      	ite	ne
 8005a5a:	2500      	movne	r5, #0
 8005a5c:	2501      	moveq	r5, #1
 8005a5e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005a62:	42b0      	cmp	r0, r6
 8005a64:	d000      	beq.n	8005a68 <TIM_Base_SetConfig+0x48>
 8005a66:	b11d      	cbz	r5, 8005a70 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	684d      	ldr	r5, [r1, #4]
 8005a6e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	d133      	bne.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <TIM_Base_SetConfig+0xf4>)
 8005a76:	4290      	cmp	r0, r2
 8005a78:	bf14      	ite	ne
 8005a7a:	2200      	movne	r2, #0
 8005a7c:	2201      	moveq	r2, #1
 8005a7e:	4d26      	ldr	r5, [pc, #152]	; (8005b18 <TIM_Base_SetConfig+0xf8>)
 8005a80:	42a8      	cmp	r0, r5
 8005a82:	d02b      	beq.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005a84:	bb52      	cbnz	r2, 8005adc <TIM_Base_SetConfig+0xbc>
 8005a86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005a8a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005a8e:	4290      	cmp	r0, r2
 8005a90:	bf14      	ite	ne
 8005a92:	2200      	movne	r2, #0
 8005a94:	2201      	moveq	r2, #1
 8005a96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a9a:	42a8      	cmp	r0, r5
 8005a9c:	d01e      	beq.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005a9e:	b9ea      	cbnz	r2, 8005adc <TIM_Base_SetConfig+0xbc>
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <TIM_Base_SetConfig+0xfc>)
 8005aa2:	4290      	cmp	r0, r2
 8005aa4:	bf14      	ite	ne
 8005aa6:	2200      	movne	r2, #0
 8005aa8:	2201      	moveq	r2, #1
 8005aaa:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8005aae:	42a8      	cmp	r0, r5
 8005ab0:	d014      	beq.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005ab2:	b99a      	cbnz	r2, 8005adc <TIM_Base_SetConfig+0xbc>
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <TIM_Base_SetConfig+0x100>)
 8005ab6:	4290      	cmp	r0, r2
 8005ab8:	bf14      	ite	ne
 8005aba:	2200      	movne	r2, #0
 8005abc:	2201      	moveq	r2, #1
 8005abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d00a      	beq.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005ac6:	b94a      	cbnz	r2, 8005adc <TIM_Base_SetConfig+0xbc>
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_Base_SetConfig+0x104>)
 8005aca:	4290      	cmp	r0, r2
 8005acc:	bf14      	ite	ne
 8005ace:	2200      	movne	r2, #0
 8005ad0:	2201      	moveq	r2, #1
 8005ad2:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	d000      	beq.n	8005adc <TIM_Base_SetConfig+0xbc>
 8005ada:	b11a      	cbz	r2, 8005ae4 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae0:	68ca      	ldr	r2, [r1, #12]
 8005ae2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae8:	694a      	ldr	r2, [r1, #20]
 8005aea:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005aec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aee:	688a      	ldr	r2, [r1, #8]
 8005af0:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005af2:	680a      	ldr	r2, [r1, #0]
 8005af4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <TIM_Base_SetConfig+0x108>)
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bf14      	ite	ne
 8005afc:	4623      	movne	r3, r4
 8005afe:	f044 0301 	orreq.w	r3, r4, #1
 8005b02:	b10b      	cbz	r3, 8005b08 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8005b04:	690b      	ldr	r3, [r1, #16]
 8005b06:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	6143      	str	r3, [r0, #20]
}
 8005b0c:	bc70      	pop	{r4, r5, r6}
 8005b0e:	4770      	bx	lr
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40001800 	.word	0x40001800
 8005b24:	40002000 	.word	0x40002000
 8005b28:	40010400 	.word	0x40010400

08005b2c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005b2c:	b1a8      	cbz	r0, 8005b5a <HAL_TIM_Base_Init+0x2e>
{
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b36:	b15b      	cbz	r3, 8005b50 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	1d21      	adds	r1, r4, #4
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	f7ff ff6d 	bl	8005a20 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b4c:	2000      	movs	r0, #0
}
 8005b4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005b50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005b54:	f003 fba0 	bl	8009298 <HAL_TIM_Base_MspInit>
 8005b58:	e7ee      	b.n	8005b38 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005b5a:	2001      	movs	r0, #1
}
 8005b5c:	4770      	bx	lr

08005b5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b5e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b60:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b62:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b66:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6e:	6083      	str	r3, [r0, #8]
}
 8005b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005b78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d064      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0xd2>
{
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b84:	2301      	movs	r3, #1
 8005b86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b90:	6802      	ldr	r2, [r0, #0]
 8005b92:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b94:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <HAL_TIM_ConfigClockSource+0xd8>)
 8005b96:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005b98:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b9a:	680b      	ldr	r3, [r1, #0]
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d04a      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xbe>
 8005ba0:	d913      	bls.n	8005bca <HAL_TIM_ConfigClockSource+0x52>
 8005ba2:	2b60      	cmp	r3, #96	; 0x60
 8005ba4:	d03d      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xaa>
 8005ba6:	d91e      	bls.n	8005be6 <HAL_TIM_ConfigClockSource+0x6e>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d028      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x86>
 8005bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb0:	d130      	bne.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8005bb2:	68cb      	ldr	r3, [r1, #12]
 8005bb4:	684a      	ldr	r2, [r1, #4]
 8005bb6:	6889      	ldr	r1, [r1, #8]
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	f7ff ffd0 	bl	8005b5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc6:	6093      	str	r3, [r2, #8]
      break;
 8005bc8:	e024      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d006      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0x64>
 8005bce:	d904      	bls.n	8005bda <HAL_TIM_ConfigClockSource+0x62>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0x64>
 8005bd4:	2b30      	cmp	r3, #48	; 0x30
 8005bd6:	d001      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0x64>
 8005bd8:	e01c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
 8005bda:	b9db      	cbnz	r3, 8005c14 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6820      	ldr	r0, [r4, #0]
 8005be0:	f7ff fe2e 	bl	8005840 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e016      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005be6:	2b50      	cmp	r3, #80	; 0x50
 8005be8:	d114      	bne.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bea:	68ca      	ldr	r2, [r1, #12]
 8005bec:	6849      	ldr	r1, [r1, #4]
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	f7ff fdff 	bl	80057f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf4:	2150      	movs	r1, #80	; 0x50
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	f7ff fe22 	bl	8005840 <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e00a      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8005bfe:	68cb      	ldr	r3, [r1, #12]
 8005c00:	684a      	ldr	r2, [r1, #4]
 8005c02:	6889      	ldr	r1, [r1, #8]
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	f7ff ffaa 	bl	8005b5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005c12:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005c20:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c22:	68ca      	ldr	r2, [r1, #12]
 8005c24:	6849      	ldr	r1, [r1, #4]
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	f7ff fdf6 	bl	8005818 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c2c:	2160      	movs	r1, #96	; 0x60
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	f7ff fe06 	bl	8005840 <TIM_ITRx_SetConfig>
      break;
 8005c34:	e7ee      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	68ca      	ldr	r2, [r1, #12]
 8005c38:	6849      	ldr	r1, [r1, #4]
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	f7ff fdd9 	bl	80057f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c40:	2140      	movs	r1, #64	; 0x40
 8005c42:	6820      	ldr	r0, [r4, #0]
 8005c44:	f7ff fdfc 	bl	8005840 <TIM_ITRx_SetConfig>
      break;
 8005c48:	e7e4      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8005c4a:	2002      	movs	r0, #2
}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	fffe0088 	.word	0xfffe0088

08005c54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d027      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8005c5c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	2302      	movs	r3, #2
 8005c66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6e:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c70:	4e0f      	ldr	r6, [pc, #60]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005c72:	4c10      	ldr	r4, [pc, #64]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	bf18      	it	ne
 8005c78:	42b3      	cmpne	r3, r6
 8005c7a:	d103      	bne.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c80:	684c      	ldr	r4, [r1, #4]
 8005c82:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	680c      	ldr	r4, [r1, #0]
 8005c8a:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c90:	6889      	ldr	r1, [r1, #8]
 8005c92:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c94:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c96:	6803      	ldr	r3, [r0, #0]
 8005c98:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005ca6:	4618      	mov	r0, r3
}
 8005ca8:	bc70      	pop	{r4, r5, r6}
 8005caa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005cac:	2002      	movs	r0, #2
}
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cbc:	4770      	bx	lr
	...

08005cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	6883      	ldr	r3, [r0, #8]
 8005cc6:	6902      	ldr	r2, [r0, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	6942      	ldr	r2, [r0, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	69c2      	ldr	r2, [r0, #28]
 8005cd0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd2:	6801      	ldr	r1, [r0, #0]
 8005cd4:	6808      	ldr	r0, [r1, #0]
 8005cd6:	4a99      	ldr	r2, [pc, #612]	; (8005f3c <UART_SetConfig+0x27c>)
 8005cd8:	4002      	ands	r2, r0
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	6853      	ldr	r3, [r2, #4]
 8005ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ce6:	68e1      	ldr	r1, [r4, #12]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cec:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8005cee:	6a23      	ldr	r3, [r4, #32]
 8005cf0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf2:	6821      	ldr	r1, [r4, #0]
 8005cf4:	688b      	ldr	r3, [r1, #8]
 8005cf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	4a8f      	ldr	r2, [pc, #572]	; (8005f40 <UART_SetConfig+0x280>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <UART_SetConfig+0x78>
 8005d06:	4a8f      	ldr	r2, [pc, #572]	; (8005f44 <UART_SetConfig+0x284>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d028      	beq.n	8005d5e <UART_SetConfig+0x9e>
 8005d0c:	4a8e      	ldr	r2, [pc, #568]	; (8005f48 <UART_SetConfig+0x288>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03d      	beq.n	8005d8e <UART_SetConfig+0xce>
 8005d12:	4a8e      	ldr	r2, [pc, #568]	; (8005f4c <UART_SetConfig+0x28c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d050      	beq.n	8005dba <UART_SetConfig+0xfa>
 8005d18:	4a8d      	ldr	r2, [pc, #564]	; (8005f50 <UART_SetConfig+0x290>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d062      	beq.n	8005de4 <UART_SetConfig+0x124>
 8005d1e:	4a8d      	ldr	r2, [pc, #564]	; (8005f54 <UART_SetConfig+0x294>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d077      	beq.n	8005e14 <UART_SetConfig+0x154>
 8005d24:	4a8c      	ldr	r2, [pc, #560]	; (8005f58 <UART_SetConfig+0x298>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	f000 808c 	beq.w	8005e44 <UART_SetConfig+0x184>
 8005d2c:	4a8b      	ldr	r2, [pc, #556]	; (8005f5c <UART_SetConfig+0x29c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f000 80a0 	beq.w	8005e74 <UART_SetConfig+0x1b4>
 8005d34:	2310      	movs	r3, #16
 8005d36:	e0b6      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d38:	4b89      	ldr	r3, [pc, #548]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d809      	bhi.n	8005d5a <UART_SetConfig+0x9a>
 8005d46:	e8df f003 	tbb	[pc, r3]
 8005d4a:	0402      	.short	0x0402
 8005d4c:	06ad      	.short	0x06ad
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e0a9      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d52:	2304      	movs	r3, #4
 8005d54:	e0a7      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d56:	2308      	movs	r3, #8
 8005d58:	e0a5      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	e0a3      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d5e:	4b80      	ldr	r3, [pc, #512]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d80e      	bhi.n	8005d8a <UART_SetConfig+0xca>
 8005d6c:	e8df f003 	tbb	[pc, r3]
 8005d70:	0d0d0d07 	.word	0x0d0d0d07
 8005d74:	0d0d0d09 	.word	0x0d0d0d09
 8005d78:	0d0d0da9 	.word	0x0d0d0da9
 8005d7c:	0b          	.byte	0x0b
 8005d7d:	00          	.byte	0x00
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e091      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d82:	2304      	movs	r3, #4
 8005d84:	e08f      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d86:	2308      	movs	r3, #8
 8005d88:	e08d      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	e08b      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005d8e:	4b74      	ldr	r3, [pc, #464]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d00a      	beq.n	8005db2 <UART_SetConfig+0xf2>
 8005d9c:	d906      	bls.n	8005dac <UART_SetConfig+0xec>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	f000 8091 	beq.w	8005ec6 <UART_SetConfig+0x206>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d106      	bne.n	8005db6 <UART_SetConfig+0xf6>
 8005da8:	2308      	movs	r3, #8
 8005daa:	e07c      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005dac:	b91b      	cbnz	r3, 8005db6 <UART_SetConfig+0xf6>
 8005dae:	2300      	movs	r3, #0
 8005db0:	e079      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e077      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005db6:	2310      	movs	r3, #16
 8005db8:	e075      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005dba:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d009      	beq.n	8005ddc <UART_SetConfig+0x11c>
 8005dc8:	d905      	bls.n	8005dd6 <UART_SetConfig+0x116>
 8005dca:	2b80      	cmp	r3, #128	; 0x80
 8005dcc:	d07d      	beq.n	8005eca <UART_SetConfig+0x20a>
 8005dce:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd0:	d106      	bne.n	8005de0 <UART_SetConfig+0x120>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	e067      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005dd6:	b91b      	cbnz	r3, 8005de0 <UART_SetConfig+0x120>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e064      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	e062      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005de0:	2310      	movs	r3, #16
 8005de2:	e060      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005de4:	4b5e      	ldr	r3, [pc, #376]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d00b      	beq.n	8005e0c <UART_SetConfig+0x14c>
 8005df4:	d907      	bls.n	8005e06 <UART_SetConfig+0x146>
 8005df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfa:	d068      	beq.n	8005ece <UART_SetConfig+0x20e>
 8005dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e00:	d106      	bne.n	8005e10 <UART_SetConfig+0x150>
 8005e02:	2308      	movs	r3, #8
 8005e04:	e04f      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e06:	b91b      	cbnz	r3, 8005e10 <UART_SetConfig+0x150>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e04c      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	e04a      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e10:	2310      	movs	r3, #16
 8005e12:	e048      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e14:	4b52      	ldr	r3, [pc, #328]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e22:	d00b      	beq.n	8005e3c <UART_SetConfig+0x17c>
 8005e24:	d907      	bls.n	8005e36 <UART_SetConfig+0x176>
 8005e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2a:	d052      	beq.n	8005ed2 <UART_SetConfig+0x212>
 8005e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e30:	d106      	bne.n	8005e40 <UART_SetConfig+0x180>
 8005e32:	2308      	movs	r3, #8
 8005e34:	e037      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e36:	b91b      	cbnz	r3, 8005e40 <UART_SetConfig+0x180>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e034      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	e032      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e40:	2310      	movs	r3, #16
 8005e42:	e030      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e44:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d00b      	beq.n	8005e6c <UART_SetConfig+0x1ac>
 8005e54:	d907      	bls.n	8005e66 <UART_SetConfig+0x1a6>
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5a:	d03c      	beq.n	8005ed6 <UART_SetConfig+0x216>
 8005e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e60:	d106      	bne.n	8005e70 <UART_SetConfig+0x1b0>
 8005e62:	2308      	movs	r3, #8
 8005e64:	e01f      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e66:	b91b      	cbnz	r3, 8005e70 <UART_SetConfig+0x1b0>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e01c      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	e01a      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	e018      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e74:	4b3a      	ldr	r3, [pc, #232]	; (8005f60 <UART_SetConfig+0x2a0>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e82:	d00b      	beq.n	8005e9c <UART_SetConfig+0x1dc>
 8005e84:	d907      	bls.n	8005e96 <UART_SetConfig+0x1d6>
 8005e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8a:	d026      	beq.n	8005eda <UART_SetConfig+0x21a>
 8005e8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e90:	d106      	bne.n	8005ea0 <UART_SetConfig+0x1e0>
 8005e92:	2308      	movs	r3, #8
 8005e94:	e007      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e96:	b91b      	cbnz	r3, 8005ea0 <UART_SetConfig+0x1e0>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e004      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	e002      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	e000      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ea4:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	69e2      	ldr	r2, [r4, #28]
 8005ea8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005eac:	d017      	beq.n	8005ede <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	f200 80b3 	bhi.w	800601a <UART_SetConfig+0x35a>
 8005eb4:	e8df f003 	tbb	[pc, r3]
 8005eb8:	b1958b76 	.word	0xb1958b76
 8005ebc:	b1b1b19e 	.word	0xb1b1b19e
 8005ec0:	a8          	.byte	0xa8
 8005ec1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e7ef      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e7ed      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e7eb      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e7e9      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e7e7      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e7e5      	b.n	8005ea6 <UART_SetConfig+0x1e6>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e7e3      	b.n	8005ea6 <UART_SetConfig+0x1e6>
    switch (clocksource)
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d85d      	bhi.n	8005f9e <UART_SetConfig+0x2de>
 8005ee2:	e8df f003 	tbb	[pc, r3]
 8005ee6:	1f05      	.short	0x1f05
 8005ee8:	5c485c3f 	.word	0x5c485c3f
 8005eec:	5c5c      	.short	0x5c5c
 8005eee:	53          	.byte	0x53
 8005eef:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005ef0:	f7fe fc68 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8005ef4:	6862      	ldr	r2, [r4, #4]
 8005ef6:	0853      	lsrs	r3, r2, #1
 8005ef8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f00:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f02:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f04:	f1a3 0110 	sub.w	r1, r3, #16
 8005f08:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005f0c:	4291      	cmp	r1, r2
 8005f0e:	f200 8087 	bhi.w	8006020 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f18:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005f1c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	60d3      	str	r3, [r2, #12]
 8005f22:	e050      	b.n	8005fc6 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005f24:	f7fe fc5e 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	0853      	lsrs	r3, r2, #1
 8005f2c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f34:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f36:	2000      	movs	r0, #0
        break;
 8005f38:	e7e4      	b.n	8005f04 <UART_SetConfig+0x244>
 8005f3a:	bf00      	nop
 8005f3c:	efff69f3 	.word	0xefff69f3
 8005f40:	40011000 	.word	0x40011000
 8005f44:	40004400 	.word	0x40004400
 8005f48:	40004800 	.word	0x40004800
 8005f4c:	40004c00 	.word	0x40004c00
 8005f50:	40005000 	.word	0x40005000
 8005f54:	40011400 	.word	0x40011400
 8005f58:	40007800 	.word	0x40007800
 8005f5c:	40007c00 	.word	0x40007c00
 8005f60:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f64:	6862      	ldr	r2, [r4, #4]
 8005f66:	4b30      	ldr	r3, [pc, #192]	; (8006028 <UART_SetConfig+0x368>)
 8005f68:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f70:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f72:	2000      	movs	r0, #0
        break;
 8005f74:	e7c6      	b.n	8005f04 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f76:	f7fe fb19 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 8005f7a:	6862      	ldr	r2, [r4, #4]
 8005f7c:	0853      	lsrs	r3, r2, #1
 8005f7e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f86:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f88:	2000      	movs	r0, #0
        break;
 8005f8a:	e7bb      	b.n	8005f04 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f8c:	6862      	ldr	r2, [r4, #4]
 8005f8e:	0853      	lsrs	r3, r2, #1
 8005f90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f98:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f9a:	2000      	movs	r0, #0
        break;
 8005f9c:	e7b2      	b.n	8005f04 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e7af      	b.n	8005f04 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005fa4:	f7fe fc0e 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8005fa8:	6862      	ldr	r2, [r4, #4]
 8005faa:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005fae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb4:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	f1a3 0110 	sub.w	r1, r3, #16
 8005fba:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	d830      	bhi.n	8006024 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005fca:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005fcc:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005fce:	f7fe fc09 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fde:	2000      	movs	r0, #0
        break;
 8005fe0:	e7e9      	b.n	8005fb6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005fe2:	6862      	ldr	r2, [r4, #4]
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <UART_SetConfig+0x36c>)
 8005fe6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff0:	2000      	movs	r0, #0
        break;
 8005ff2:	e7e0      	b.n	8005fb6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ff4:	f7fe fada 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 8005ff8:	6862      	ldr	r2, [r4, #4]
 8005ffa:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006002:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006004:	2000      	movs	r0, #0
        break;
 8006006:	e7d6      	b.n	8005fb6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006008:	6862      	ldr	r2, [r4, #4]
 800600a:	0853      	lsrs	r3, r2, #1
 800600c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006010:	fbb3 f3f2 	udiv	r3, r3, r2
 8006014:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006016:	2000      	movs	r0, #0
        break;
 8006018:	e7cd      	b.n	8005fb6 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 800601a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800601c:	2300      	movs	r3, #0
 800601e:	e7ca      	b.n	8005fb6 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8006020:	2001      	movs	r0, #1
 8006022:	e7d0      	b.n	8005fc6 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8006024:	2001      	movs	r0, #1
 8006026:	e7ce      	b.n	8005fc6 <UART_SetConfig+0x306>
 8006028:	01e84800 	.word	0x01e84800
 800602c:	00f42400 	.word	0x00f42400

08006030 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006032:	f013 0f01 	tst.w	r3, #1
 8006036:	d006      	beq.n	8006046 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006038:	6802      	ldr	r2, [r0, #0]
 800603a:	6853      	ldr	r3, [r2, #4]
 800603c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006040:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006042:	430b      	orrs	r3, r1
 8006044:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006046:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006048:	f013 0f02 	tst.w	r3, #2
 800604c:	d006      	beq.n	800605c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800604e:	6802      	ldr	r2, [r0, #0]
 8006050:	6853      	ldr	r3, [r2, #4]
 8006052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006056:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006058:	430b      	orrs	r3, r1
 800605a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800605c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800605e:	f013 0f04 	tst.w	r3, #4
 8006062:	d006      	beq.n	8006072 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006064:	6802      	ldr	r2, [r0, #0]
 8006066:	6853      	ldr	r3, [r2, #4]
 8006068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800606e:	430b      	orrs	r3, r1
 8006070:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006072:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006074:	f013 0f08 	tst.w	r3, #8
 8006078:	d006      	beq.n	8006088 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800607a:	6802      	ldr	r2, [r0, #0]
 800607c:	6853      	ldr	r3, [r2, #4]
 800607e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006082:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006084:	430b      	orrs	r3, r1
 8006086:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006088:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800608a:	f013 0f10 	tst.w	r3, #16
 800608e:	d006      	beq.n	800609e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	6893      	ldr	r3, [r2, #8]
 8006094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006098:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800609a:	430b      	orrs	r3, r1
 800609c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800609e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060a0:	f013 0f20 	tst.w	r3, #32
 80060a4:	d006      	beq.n	80060b4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060a6:	6802      	ldr	r2, [r0, #0]
 80060a8:	6893      	ldr	r3, [r2, #8]
 80060aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060bc:	6802      	ldr	r2, [r0, #0]
 80060be:	6853      	ldr	r3, [r2, #4]
 80060c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80060cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d0:	d00b      	beq.n	80060ea <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060d8:	d006      	beq.n	80060e8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060da:	6802      	ldr	r2, [r0, #0]
 80060dc:	6853      	ldr	r3, [r2, #4]
 80060de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80060e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6053      	str	r3, [r2, #4]
  }
}
 80060e8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ea:	6802      	ldr	r2, [r0, #0]
 80060ec:	6853      	ldr	r3, [r2, #4]
 80060ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6053      	str	r3, [r2, #4]
 80060f8:	e7eb      	b.n	80060d2 <UART_AdvFeatureConfig+0xa2>

080060fa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	4605      	mov	r5, r0
 8006100:	460f      	mov	r7, r1
 8006102:	4616      	mov	r6, r2
 8006104:	4698      	mov	r8, r3
 8006106:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	ea37 0303 	bics.w	r3, r7, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	42b3      	cmp	r3, r6
 8006118:	d11c      	bne.n	8006154 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800611e:	d0f3      	beq.n	8006108 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006120:	f7fc fa50 	bl	80025c4 <HAL_GetTick>
 8006124:	eba0 0008 	sub.w	r0, r0, r8
 8006128:	42a0      	cmp	r0, r4
 800612a:	d801      	bhi.n	8006130 <UART_WaitOnFlagUntilTimeout+0x36>
 800612c:	2c00      	cmp	r4, #0
 800612e:	d1eb      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006130:	682a      	ldr	r2, [r5, #0]
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006138:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613a:	682a      	ldr	r2, [r5, #0]
 800613c:	6893      	ldr	r3, [r2, #8]
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006144:	2320      	movs	r3, #32
 8006146:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006148:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800614a:	2300      	movs	r3, #0
 800614c:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8006150:	2003      	movs	r0, #3
 8006152:	e000      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8006154:	2000      	movs	r0, #0
}
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800615a <HAL_UART_Transmit>:
{
 800615a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006162:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006164:	2b20      	cmp	r3, #32
 8006166:	d159      	bne.n	800621c <HAL_UART_Transmit+0xc2>
 8006168:	4604      	mov	r4, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800616e:	fab2 f382 	clz	r3, r2
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	2900      	cmp	r1, #0
 8006176:	bf08      	it	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d153      	bne.n	8006226 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800617e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006182:	2b01      	cmp	r3, #1
 8006184:	d051      	beq.n	800622a <HAL_UART_Transmit+0xd0>
 8006186:	2301      	movs	r3, #1
 8006188:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006190:	2321      	movs	r3, #33	; 0x21
 8006192:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8006194:	f7fc fa16 	bl	80025c4 <HAL_GetTick>
 8006198:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800619a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800619e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	e010      	b.n	80061d2 <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	b30b      	cbz	r3, 80061f8 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	e00b      	b.n	80061d2 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ba:	f838 3b02 	ldrh.w	r3, [r8], #2
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80061c6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	b18b      	cbz	r3, 80061fe <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	9600      	str	r6, [sp, #0]
 80061dc:	463b      	mov	r3, r7
 80061de:	2200      	movs	r2, #0
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff ff89 	bl	80060fa <UART_WaitOnFlagUntilTimeout>
 80061e8:	bb08      	cbnz	r0, 800622e <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	d0e5      	beq.n	80061ba <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ee:	f815 2b01 	ldrb.w	r2, [r5], #1
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
 80061f6:	e7e6      	b.n	80061c6 <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 80061f8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80061fa:	2500      	movs	r5, #0
 80061fc:	e7e9      	b.n	80061d2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	9600      	str	r6, [sp, #0]
 8006200:	463b      	mov	r3, r7
 8006202:	2200      	movs	r2, #0
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff ff77 	bl	80060fa <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	b980      	cbnz	r0, 8006232 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8006210:	2220      	movs	r2, #32
 8006212:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8006214:	2200      	movs	r2, #0
 8006216:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 800621a:	e000      	b.n	800621e <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
}
 800621e:	4618      	mov	r0, r3
 8006220:	b002      	add	sp, #8
 8006222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e7f9      	b.n	800621e <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800622a:	2302      	movs	r3, #2
 800622c:	e7f7      	b.n	800621e <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e7f5      	b.n	800621e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e7f3      	b.n	800621e <HAL_UART_Transmit+0xc4>

08006236 <UART_CheckIdleState>:
{
 8006236:	b510      	push	{r4, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	2300      	movs	r3, #0
 800623e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006240:	f7fc f9c0 	bl	80025c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	f012 0f08 	tst.w	r2, #8
 800624c:	d107      	bne.n	800625e <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 800624e:	2320      	movs	r3, #32
 8006250:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006252:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006254:	2000      	movs	r0, #0
 8006256:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800625a:	b002      	add	sp, #8
 800625c:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4603      	mov	r3, r0
 8006266:	2200      	movs	r2, #0
 8006268:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800626c:	4620      	mov	r0, r4
 800626e:	f7ff ff44 	bl	80060fa <UART_WaitOnFlagUntilTimeout>
 8006272:	2800      	cmp	r0, #0
 8006274:	d0eb      	beq.n	800624e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006276:	2003      	movs	r0, #3
 8006278:	e7ef      	b.n	800625a <UART_CheckIdleState+0x24>

0800627a <HAL_UART_Init>:
  if (huart == NULL)
 800627a:	b368      	cbz	r0, 80062d8 <HAL_UART_Init+0x5e>
{
 800627c:	b510      	push	{r4, lr}
 800627e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006280:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006282:	b303      	cbz	r3, 80062c6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006284:	2324      	movs	r3, #36	; 0x24
 8006286:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff fd14 	bl	8005cc0 <UART_SetConfig>
 8006298:	2801      	cmp	r0, #1
 800629a:	d013      	beq.n	80062c4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800629c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800629e:	b9bb      	cbnz	r3, 80062d0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	6853      	ldr	r3, [r2, #4]
 80062a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80062a8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	6893      	ldr	r3, [r2, #8]
 80062ae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80062b2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80062b4:	6822      	ldr	r2, [r4, #0]
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80062be:	4620      	mov	r0, r4
 80062c0:	f7ff ffb9 	bl	8006236 <UART_CheckIdleState>
}
 80062c4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80062c6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80062ca:	f003 f815 	bl	80092f8 <HAL_UART_MspInit>
 80062ce:	e7d9      	b.n	8006284 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80062d0:	4620      	mov	r0, r4
 80062d2:	f7ff fead 	bl	8006030 <UART_AdvFeatureConfig>
 80062d6:	e7e3      	b.n	80062a0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80062d8:	2001      	movs	r0, #1
}
 80062da:	4770      	bx	lr

080062dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80062dc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80062de:	680b      	ldr	r3, [r1, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d018      	beq.n	8006316 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80062e4:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80062e6:	4a19      	ldr	r2, [pc, #100]	; (800634c <FMC_SDRAM_Init+0x70>)
 80062e8:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062ea:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 80062ec:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062ee:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 80062f0:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 80062f2:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 80062f4:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 80062f6:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 80062f8:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 80062fa:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 80062fc:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 80062fe:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8006300:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8006302:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8006304:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8006306:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8006308:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800630a:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800630c:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800630e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006310:	2000      	movs	r0, #0
 8006312:	bc30      	pop	{r4, r5}
 8006314:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006316:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006318:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800631c:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800631e:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006320:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006322:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8006324:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006326:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006328:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800632a:	4c08      	ldr	r4, [pc, #32]	; (800634c <FMC_SDRAM_Init+0x70>)
 800632c:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800632e:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8006330:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006332:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8006334:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8006336:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8006338:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 800633a:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 800633c:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 800633e:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8006340:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8006342:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006344:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006346:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006348:	6043      	str	r3, [r0, #4]
 800634a:	e7e1      	b.n	8006310 <FMC_SDRAM_Init+0x34>
 800634c:	ffff8000 	.word	0xffff8000

08006350 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006350:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006352:	2a01      	cmp	r2, #1
 8006354:	d021      	beq.n	800639a <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006356:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006358:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800635c:	680b      	ldr	r3, [r1, #0]
 800635e:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006360:	684c      	ldr	r4, [r1, #4]
 8006362:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006364:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006368:	688c      	ldr	r4, [r1, #8]
 800636a:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800636c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006370:	68cc      	ldr	r4, [r1, #12]
 8006372:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006374:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006378:	690c      	ldr	r4, [r1, #16]
 800637a:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800637c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8006380:	694c      	ldr	r4, [r1, #20]
 8006382:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006384:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8006388:	6989      	ldr	r1, [r1, #24]
 800638a:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800638c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006390:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006392:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006394:	2000      	movs	r0, #0
 8006396:	bc30      	pop	{r4, r5}
 8006398:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800639a:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800639c:	4c11      	ldr	r4, [pc, #68]	; (80063e4 <FMC_SDRAM_Timing_Init+0x94>)
 800639e:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80063a0:	68ca      	ldr	r2, [r1, #12]
 80063a2:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 80063a4:	694b      	ldr	r3, [r1, #20]
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80063aa:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80063ae:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80063b0:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80063b2:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063b6:	680b      	ldr	r3, [r1, #0]
 80063b8:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80063ba:	684d      	ldr	r5, [r1, #4]
 80063bc:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80063c2:	688d      	ldr	r5, [r1, #8]
 80063c4:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80063c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80063ca:	690d      	ldr	r5, [r1, #16]
 80063cc:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80063ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 80063d2:	6989      	ldr	r1, [r1, #24]
 80063d4:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80063da:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80063dc:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80063de:	60c3      	str	r3, [r0, #12]
 80063e0:	e7d8      	b.n	8006394 <FMC_SDRAM_Timing_Init+0x44>
 80063e2:	bf00      	nop
 80063e4:	ff0f0fff 	.word	0xff0f0fff

080063e8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80063e8:	b410      	push	{r4}
 80063ea:	b083      	sub	sp, #12
 80063ec:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80063ee:	2000      	movs	r0, #0
 80063f0:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80063f2:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80063f4:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80063f6:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80063fc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8006400:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006402:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8006406:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 800640c:	b003      	add	sp, #12
 800640e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006412:	4770      	bx	lr

08006414 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006414:	6943      	ldr	r3, [r0, #20]
 8006416:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800641a:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800641c:	2000      	movs	r0, #0
 800641e:	4770      	bx	lr

08006420 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8006420:	4770      	bx	lr

08006422 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8006422:	2000      	movs	r0, #0
 8006424:	4770      	bx	lr

08006426 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8006426:	4770      	bx	lr

08006428 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8006428:	4b01      	ldr	r3, [pc, #4]	; (8006430 <ft5336_Get_I2C_InitializedStatus+0x8>)
 800642a:	7818      	ldrb	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200002d4 	.word	0x200002d4

08006434 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006434:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006436:	f7ff fff7 	bl	8006428 <ft5336_Get_I2C_InitializedStatus>
 800643a:	b100      	cbz	r0, 800643e <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 800643c:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 800643e:	f000 fa09 	bl	8006854 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006442:	4b02      	ldr	r3, [pc, #8]	; (800644c <ft5336_I2C_InitializeIfRequired+0x18>)
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
}
 8006448:	e7f8      	b.n	800643c <ft5336_I2C_InitializeIfRequired+0x8>
 800644a:	bf00      	nop
 800644c:	200002d4 	.word	0x200002d4

08006450 <ft5336_Init>:
{
 8006450:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 8006452:	20c8      	movs	r0, #200	; 0xc8
 8006454:	f000 fa2e 	bl	80068b4 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8006458:	f7ff ffec 	bl	8006434 <ft5336_I2C_InitializeIfRequired>
}
 800645c:	bd08      	pop	{r3, pc}

0800645e <ft5336_ReadID>:
{
 800645e:	b570      	push	{r4, r5, r6, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8006464:	2400      	movs	r4, #0
 8006466:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 800646a:	f7ff ffe3 	bl	8006434 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800646e:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006470:	e001      	b.n	8006476 <ft5336_ReadID+0x18>
 8006472:	3401      	adds	r4, #1
 8006474:	b2e4      	uxtb	r4, r4
 8006476:	f085 0301 	eor.w	r3, r5, #1
 800647a:	2c02      	cmp	r4, #2
 800647c:	bf8c      	ite	hi
 800647e:	2300      	movhi	r3, #0
 8006480:	f003 0301 	andls.w	r3, r3, #1
 8006484:	b163      	cbz	r3, 80064a0 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006486:	21a8      	movs	r1, #168	; 0xa8
 8006488:	b2f0      	uxtb	r0, r6
 800648a:	f000 f9fd 	bl	8006888 <TS_IO_Read>
 800648e:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8006492:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b51      	cmp	r3, #81	; 0x51
 800649a:	d1ea      	bne.n	8006472 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 800649c:	2501      	movs	r5, #1
 800649e:	e7e8      	b.n	8006472 <ft5336_ReadID+0x14>
  return (ucReadId);
 80064a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80064a4:	b002      	add	sp, #8
 80064a6:	bd70      	pop	{r4, r5, r6, pc}

080064a8 <ft5336_TS_DetectTouch>:
{
 80064a8:	b500      	push	{lr}
 80064aa:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80064b2:	2102      	movs	r1, #2
 80064b4:	b2c0      	uxtb	r0, r0
 80064b6:	f000 f9e7 	bl	8006888 <TS_IO_Read>
 80064ba:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80064be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80064ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b05      	cmp	r3, #5
 80064d2:	d902      	bls.n	80064da <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80064da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <ft5336_TS_DetectTouch+0x48>)
 80064e0:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80064e2:	2200      	movs	r2, #0
 80064e4:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80064e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80064ea:	b003      	add	sp, #12
 80064ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80064f0:	200002d4 	.word	0x200002d4

080064f4 <ft5336_TS_GetXY>:
{
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8006500:	4d4f      	ldr	r5, [pc, #316]	; (8006640 <ft5336_TS_GetXY+0x14c>)
 8006502:	78ab      	ldrb	r3, [r5, #2]
 8006504:	786c      	ldrb	r4, [r5, #1]
 8006506:	42a3      	cmp	r3, r4
 8006508:	f080 8096 	bcs.w	8006638 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 800650c:	2b09      	cmp	r3, #9
 800650e:	d806      	bhi.n	800651e <ft5336_TS_GetXY+0x2a>
 8006510:	e8df f003 	tbb	[pc, r3]
 8006514:	1b130b53 	.word	0x1b130b53
 8006518:	3b332b23 	.word	0x3b332b23
 800651c:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 800651e:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 8006522:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 8006524:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 8006526:	4643      	mov	r3, r8
 8006528:	e04e      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 800652a:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 800652e:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8006532:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8006536:	230a      	movs	r3, #10
      break;
 8006538:	e046      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 800653a:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 800653e:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8006542:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8006546:	2310      	movs	r3, #16
      break;
 8006548:	e03e      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 800654a:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 800654e:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 8006552:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8006556:	2316      	movs	r3, #22
      break;
 8006558:	e036      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 800655a:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 800655e:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 8006562:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8006566:	231c      	movs	r3, #28
      break;
 8006568:	e02e      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 800656a:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 800656e:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 8006572:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8006576:	2322      	movs	r3, #34	; 0x22
      break;
 8006578:	e026      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 800657a:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 800657e:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 8006582:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8006586:	2328      	movs	r3, #40	; 0x28
      break;
 8006588:	e01e      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 800658a:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 800658e:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 8006592:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8006596:	232e      	movs	r3, #46	; 0x2e
      break;
 8006598:	e016      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 800659a:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 800659e:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 80065a2:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 80065a6:	2334      	movs	r3, #52	; 0x34
      break;
 80065a8:	e00e      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 80065aa:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 80065ae:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 80065b2:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 80065b6:	233a      	movs	r3, #58	; 0x3a
      break;
 80065b8:	e006      	b.n	80065c8 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 80065ba:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 80065be:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 80065c2:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 80065c6:	2304      	movs	r3, #4
 80065c8:	4616      	mov	r6, r2
 80065ca:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80065cc:	b2c4      	uxtb	r4, r0
 80065ce:	4619      	mov	r1, r3
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 f959 	bl	8006888 <TS_IO_Read>
 80065d6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80065da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065de:	4d19      	ldr	r5, [pc, #100]	; (8006644 <ft5336_TS_GetXY+0x150>)
 80065e0:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80065e2:	4651      	mov	r1, sl
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 f94f 	bl	8006888 <TS_IO_Read>
 80065ea:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80065ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065f8:	882a      	ldrh	r2, [r5, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	802b      	strh	r3, [r5, #0]
    *X = coord;
 80065fe:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006600:	4649      	mov	r1, r9
 8006602:	4620      	mov	r0, r4
 8006604:	f000 f940 	bl	8006888 <TS_IO_Read>
 8006608:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800660c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006610:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006612:	4641      	mov	r1, r8
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f937 	bl	8006888 <TS_IO_Read>
 800661a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800661e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006628:	882a      	ldrh	r2, [r5, #0]
 800662a:	4313      	orrs	r3, r2
 800662c:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 800662e:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006630:	4a03      	ldr	r2, [pc, #12]	; (8006640 <ft5336_TS_GetXY+0x14c>)
 8006632:	7893      	ldrb	r3, [r2, #2]
 8006634:	3301      	adds	r3, #1
 8006636:	7093      	strb	r3, [r2, #2]
}
 8006638:	b002      	add	sp, #8
 800663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663e:	bf00      	nop
 8006640:	200002d4 	.word	0x200002d4
 8006644:	200002d2 	.word	0x200002d2

08006648 <ft5336_TS_EnableIT>:
{
 8006648:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800664a:	2201      	movs	r2, #1
 800664c:	21a4      	movs	r1, #164	; 0xa4
 800664e:	b2c0      	uxtb	r0, r0
 8006650:	f000 f908 	bl	8006864 <TS_IO_Write>
}
 8006654:	bd08      	pop	{r3, pc}

08006656 <ft5336_TS_DisableIT>:
{
 8006656:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006658:	2200      	movs	r2, #0
 800665a:	21a4      	movs	r1, #164	; 0xa4
 800665c:	b2c0      	uxtb	r0, r0
 800665e:	f000 f901 	bl	8006864 <TS_IO_Write>
}
 8006662:	bd08      	pop	{r3, pc}

08006664 <ft5336_TS_Start>:
{
 8006664:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8006666:	f7ff fff6 	bl	8006656 <ft5336_TS_DisableIT>
}
 800666a:	bd08      	pop	{r3, pc}

0800666c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006670:	4b44      	ldr	r3, [pc, #272]	; (8006784 <I2Cx_MspInit+0x118>)
 8006672:	4283      	cmp	r3, r0
 8006674:	d043      	beq.n	80066fe <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006676:	4c44      	ldr	r4, [pc, #272]	; (8006788 <I2Cx_MspInit+0x11c>)
 8006678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800667a:	f043 0302 	orr.w	r3, r3, #2
 800667e:	6323      	str	r3, [r4, #48]	; 0x30
 8006680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800668a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800668e:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006690:	2312      	movs	r3, #18
 8006692:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006694:	2500      	movs	r5, #0
 8006696:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006698:	2302      	movs	r3, #2
 800669a:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800669c:	2304      	movs	r3, #4
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80066a0:	4e3a      	ldr	r6, [pc, #232]	; (800678c <I2Cx_MspInit+0x120>)
 80066a2:	a905      	add	r1, sp, #20
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7fc fed5 	bl	8003454 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80066aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80066b0:	a905      	add	r1, sp, #20
 80066b2:	4630      	mov	r0, r6
 80066b4:	f7fc fece 	bl	8003454 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80066b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066be:	6423      	str	r3, [r4, #64]	; 0x40
 80066c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c6:	9304      	str	r3, [sp, #16]
 80066c8:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80066ca:	6a23      	ldr	r3, [r4, #32]
 80066cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066d0:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80066d2:	6a23      	ldr	r3, [r4, #32]
 80066d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066d8:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80066da:	462a      	mov	r2, r5
 80066dc:	210f      	movs	r1, #15
 80066de:	201f      	movs	r0, #31
 80066e0:	f7fc fa72 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80066e4:	201f      	movs	r0, #31
 80066e6:	f7fc faa1 	bl	8002c2c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80066ea:	462a      	mov	r2, r5
 80066ec:	210f      	movs	r1, #15
 80066ee:	2020      	movs	r0, #32
 80066f0:	f7fc fa6a 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80066f4:	2020      	movs	r0, #32
 80066f6:	f7fc fa99 	bl	8002c2c <HAL_NVIC_EnableIRQ>
  }
}
 80066fa:	b00a      	add	sp, #40	; 0x28
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80066fe:	4c22      	ldr	r4, [pc, #136]	; (8006788 <I2Cx_MspInit+0x11c>)
 8006700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	6323      	str	r3, [r4, #48]	; 0x30
 8006708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006716:	2312      	movs	r3, #18
 8006718:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800671a:	2500      	movs	r5, #0
 800671c:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800671e:	2302      	movs	r3, #2
 8006720:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006722:	2304      	movs	r3, #4
 8006724:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006726:	4e1a      	ldr	r6, [pc, #104]	; (8006790 <I2Cx_MspInit+0x124>)
 8006728:	a905      	add	r1, sp, #20
 800672a:	4630      	mov	r0, r6
 800672c:	f7fc fe92 	bl	8003454 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006734:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006736:	a905      	add	r1, sp, #20
 8006738:	4630      	mov	r0, r6
 800673a:	f7fc fe8b 	bl	8003454 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800673e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006744:	6423      	str	r3, [r4, #64]	; 0x40
 8006746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800674c:	9302      	str	r3, [sp, #8]
 800674e:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006750:	6a23      	ldr	r3, [r4, #32]
 8006752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006756:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006758:	6a23      	ldr	r3, [r4, #32]
 800675a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800675e:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006760:	462a      	mov	r2, r5
 8006762:	210f      	movs	r1, #15
 8006764:	2048      	movs	r0, #72	; 0x48
 8006766:	f7fc fa2f 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800676a:	2048      	movs	r0, #72	; 0x48
 800676c:	f7fc fa5e 	bl	8002c2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006770:	462a      	mov	r2, r5
 8006772:	210f      	movs	r1, #15
 8006774:	2049      	movs	r0, #73	; 0x49
 8006776:	f7fc fa27 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800677a:	2049      	movs	r0, #73	; 0x49
 800677c:	f7fc fa56 	bl	8002c2c <HAL_NVIC_EnableIRQ>
 8006780:	e7bb      	b.n	80066fa <I2Cx_MspInit+0x8e>
 8006782:	bf00      	nop
 8006784:	200002d8 	.word	0x200002d8
 8006788:	40023800 	.word	0x40023800
 800678c:	40020400 	.word	0x40020400
 8006790:	40021c00 	.word	0x40021c00

08006794 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006794:	b510      	push	{r4, lr}
 8006796:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006798:	f7fd faf6 	bl	8003d88 <HAL_I2C_GetState>
 800679c:	b9a0      	cbnz	r0, 80067c8 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <I2Cx_Init+0x3c>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d012      	beq.n	80067ca <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <I2Cx_Init+0x40>)
 80067a6:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <I2Cx_Init+0x44>)
 80067aa:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80067b0:	2201      	movs	r2, #1
 80067b2:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80067b4:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80067b6:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80067b8:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80067ba:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff ff55 	bl	800666c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7fd f8b4 	bl	8003930 <HAL_I2C_Init>
  }
}
 80067c8:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80067ca:	4b04      	ldr	r3, [pc, #16]	; (80067dc <I2Cx_Init+0x48>)
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	e7eb      	b.n	80067a8 <I2Cx_Init+0x14>
 80067d0:	200002d8 	.word	0x200002d8
 80067d4:	40005400 	.word	0x40005400
 80067d8:	40912732 	.word	0x40912732
 80067dc:	40005c00 	.word	0x40005c00

080067e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80067e4:	f7fd f903 	bl	80039ee <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff ffd3 	bl	8006794 <I2Cx_Init>
}
 80067ee:	bd10      	pop	{r4, pc}

080067f0 <I2Cx_WriteMultiple>:
{
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	4606      	mov	r6, r0
 80067f6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80067f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067fc:	9102      	str	r1, [sp, #8]
 80067fe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006802:	9101      	str	r1, [sp, #4]
 8006804:	9908      	ldr	r1, [sp, #32]
 8006806:	9100      	str	r1, [sp, #0]
 8006808:	4621      	mov	r1, r4
 800680a:	f7fd f909 	bl	8003a20 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800680e:	4605      	mov	r5, r0
 8006810:	b910      	cbnz	r0, 8006818 <I2Cx_WriteMultiple+0x28>
}
 8006812:	4628      	mov	r0, r5
 8006814:	b004      	add	sp, #16
 8006816:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8006818:	4621      	mov	r1, r4
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff ffe0 	bl	80067e0 <I2Cx_Error>
 8006820:	e7f7      	b.n	8006812 <I2Cx_WriteMultiple+0x22>

08006822 <I2Cx_ReadMultiple>:
{
 8006822:	b570      	push	{r4, r5, r6, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	4606      	mov	r6, r0
 8006828:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800682a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800682e:	9102      	str	r1, [sp, #8]
 8006830:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006834:	9101      	str	r1, [sp, #4]
 8006836:	9908      	ldr	r1, [sp, #32]
 8006838:	9100      	str	r1, [sp, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	f7fd f9c8 	bl	8003bd0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8006840:	4605      	mov	r5, r0
 8006842:	b910      	cbnz	r0, 800684a <I2Cx_ReadMultiple+0x28>
}
 8006844:	4628      	mov	r0, r5
 8006846:	b004      	add	sp, #16
 8006848:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800684a:	4621      	mov	r1, r4
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff ffc7 	bl	80067e0 <I2Cx_Error>
 8006852:	e7f7      	b.n	8006844 <I2Cx_ReadMultiple+0x22>

08006854 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006854:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8006856:	4802      	ldr	r0, [pc, #8]	; (8006860 <TS_IO_Init+0xc>)
 8006858:	f7ff ff9c 	bl	8006794 <I2Cx_Init>
}
 800685c:	bd08      	pop	{r3, pc}
 800685e:	bf00      	nop
 8006860:	200002d8 	.word	0x200002d8

08006864 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006864:	b510      	push	{r4, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	ac04      	add	r4, sp, #16
 800686a:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800686e:	2301      	movs	r3, #1
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	9400      	str	r4, [sp, #0]
 8006874:	460a      	mov	r2, r1
 8006876:	4601      	mov	r1, r0
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <TS_IO_Write+0x20>)
 800687a:	f7ff ffb9 	bl	80067f0 <I2Cx_WriteMultiple>
}
 800687e:	b004      	add	sp, #16
 8006880:	bd10      	pop	{r4, pc}
 8006882:	bf00      	nop
 8006884:	200002d8 	.word	0x200002d8

08006888 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006888:	b500      	push	{lr}
 800688a:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 800688c:	aa04      	add	r2, sp, #16
 800688e:	2300      	movs	r3, #0
 8006890:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006894:	2301      	movs	r3, #1
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	460a      	mov	r2, r1
 800689c:	4601      	mov	r1, r0
 800689e:	4804      	ldr	r0, [pc, #16]	; (80068b0 <TS_IO_Read+0x28>)
 80068a0:	f7ff ffbf 	bl	8006822 <I2Cx_ReadMultiple>

  return read_value;
}
 80068a4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80068a8:	b005      	add	sp, #20
 80068aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ae:	bf00      	nop
 80068b0:	200002d8 	.word	0x200002d8

080068b4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80068b4:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80068b6:	f7fb fe8b 	bl	80025d0 <HAL_Delay>
}
 80068ba:	bd08      	pop	{r3, pc}

080068bc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80068bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068be:	b083      	sub	sp, #12
 80068c0:	4604      	mov	r4, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80068c8:	4b18      	ldr	r3, [pc, #96]	; (800692c <LL_FillBuffer+0x70>)
 80068ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80068ce:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80068d0:	4b17      	ldr	r3, [pc, #92]	; (8006930 <LL_FillBuffer+0x74>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a17      	ldr	r2, [pc, #92]	; (8006934 <LL_FillBuffer+0x78>)
 80068d6:	2134      	movs	r1, #52	; 0x34
 80068d8:	fb01 2303 	mla	r3, r1, r3, r2
 80068dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d00c      	beq.n	80068fc <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <LL_FillBuffer+0x70>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80068e8:	4810      	ldr	r0, [pc, #64]	; (800692c <LL_FillBuffer+0x70>)
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <LL_FillBuffer+0x7c>)
 80068f0:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80068f2:	f7fc fc63 	bl	80031bc <HAL_DMA2D_Init>
 80068f6:	b128      	cbz	r0, 8006904 <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 80068f8:	b003      	add	sp, #12
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <LL_FillBuffer+0x70>)
 80068fe:	2202      	movs	r2, #2
 8006900:	609a      	str	r2, [r3, #8]
 8006902:	e7f1      	b.n	80068e8 <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006904:	4621      	mov	r1, r4
 8006906:	4809      	ldr	r0, [pc, #36]	; (800692c <LL_FillBuffer+0x70>)
 8006908:	f7fc fd42 	bl	8003390 <HAL_DMA2D_ConfigLayer>
 800690c:	2800      	cmp	r0, #0
 800690e:	d1f3      	bne.n	80068f8 <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006910:	9700      	str	r7, [sp, #0]
 8006912:	4633      	mov	r3, r6
 8006914:	462a      	mov	r2, r5
 8006916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006918:	4804      	ldr	r0, [pc, #16]	; (800692c <LL_FillBuffer+0x70>)
 800691a:	f7fc fc7d 	bl	8003218 <HAL_DMA2D_Start>
 800691e:	2800      	cmp	r0, #0
 8006920:	d1ea      	bne.n	80068f8 <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006922:	210a      	movs	r1, #10
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <LL_FillBuffer+0x70>)
 8006926:	f7fc fc93 	bl	8003250 <HAL_DMA2D_PollForTransfer>
}
 800692a:	e7e5      	b.n	80068f8 <LL_FillBuffer+0x3c>
 800692c:	20000340 	.word	0x20000340
 8006930:	20000324 	.word	0x20000324
 8006934:	200043cc 	.word	0x200043cc
 8006938:	4002b000 	.word	0x4002b000

0800693c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800693c:	4b03      	ldr	r3, [pc, #12]	; (800694c <BSP_LCD_GetXSize+0x10>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a03      	ldr	r2, [pc, #12]	; (8006950 <BSP_LCD_GetXSize+0x14>)
 8006942:	2134      	movs	r1, #52	; 0x34
 8006944:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006948:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800694a:	4770      	bx	lr
 800694c:	20000324 	.word	0x20000324
 8006950:	200043cc 	.word	0x200043cc

08006954 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006954:	4b03      	ldr	r3, [pc, #12]	; (8006964 <BSP_LCD_GetYSize+0x10>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a03      	ldr	r2, [pc, #12]	; (8006968 <BSP_LCD_GetYSize+0x14>)
 800695a:	2134      	movs	r1, #52	; 0x34
 800695c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006960:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006962:	4770      	bx	lr
 8006964:	20000324 	.word	0x20000324
 8006968:	200043cc 	.word	0x200043cc

0800696c <BSP_LCD_LayerDefaultInit>:
{     
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	4605      	mov	r5, r0
 8006972:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 8006974:	2400      	movs	r4, #0
 8006976:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006978:	f7ff ffe0 	bl	800693c <BSP_LCD_GetXSize>
 800697c:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 800697e:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006980:	f7ff ffe8 	bl	8006954 <BSP_LCD_GetYSize>
 8006984:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006986:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8006988:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 800698a:	23ff      	movs	r3, #255	; 0xff
 800698c:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 800698e:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8006990:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8006994:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8006998:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800699c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80069a0:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80069a2:	2307      	movs	r3, #7
 80069a4:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80069a6:	f7ff ffc9 	bl	800693c <BSP_LCD_GetXSize>
 80069aa:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80069ac:	f7ff ffd2 	bl	8006954 <BSP_LCD_GetYSize>
 80069b0:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80069b2:	462a      	mov	r2, r5
 80069b4:	a901      	add	r1, sp, #4
 80069b6:	480a      	ldr	r0, [pc, #40]	; (80069e0 <BSP_LCD_LayerDefaultInit+0x74>)
 80069b8:	f7fd fb9e 	bl	80040f8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <BSP_LCD_LayerDefaultInit+0x78>)
 80069be:	0068      	lsls	r0, r5, #1
 80069c0:	1941      	adds	r1, r0, r5
 80069c2:	008b      	lsls	r3, r1, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069ca:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80069cc:	4906      	ldr	r1, [pc, #24]	; (80069e8 <BSP_LCD_LayerDefaultInit+0x7c>)
 80069ce:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80069d0:	4428      	add	r0, r5
 80069d2:	0083      	lsls	r3, r0, #2
 80069d4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80069d8:	50d1      	str	r1, [r2, r3]
}
 80069da:	b00e      	add	sp, #56	; 0x38
 80069dc:	bd70      	pop	{r4, r5, r6, pc}
 80069de:	bf00      	nop
 80069e0:	200043cc 	.word	0x200043cc
 80069e4:	20000328 	.word	0x20000328
 80069e8:	2000000c 	.word	0x2000000c

080069ec <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80069ec:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <BSP_LCD_SelectLayer+0x8>)
 80069ee:	6018      	str	r0, [r3, #0]
} 
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000324 	.word	0x20000324

080069f8 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <BSP_LCD_SetTextColor+0x10>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a00:	009a      	lsls	r2, r3, #2
 8006a02:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <BSP_LCD_SetTextColor+0x14>)
 8006a04:	5098      	str	r0, [r3, r2]
}
 8006a06:	4770      	bx	lr
 8006a08:	20000324 	.word	0x20000324
 8006a0c:	20000328 	.word	0x20000328

08006a10 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <BSP_LCD_SetBackColor+0x14>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a18:	009a      	lsls	r2, r3, #2
 8006a1a:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <BSP_LCD_SetBackColor+0x18>)
 8006a1c:	4413      	add	r3, r2
 8006a1e:	6058      	str	r0, [r3, #4]
}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20000324 	.word	0x20000324
 8006a28:	20000328 	.word	0x20000328

08006a2c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <BSP_LCD_SetFont+0x14>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a34:	009a      	lsls	r2, r3, #2
 8006a36:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <BSP_LCD_SetFont+0x18>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	6098      	str	r0, [r3, #8]
}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000324 	.word	0x20000324
 8006a44:	20000328 	.word	0x20000328

08006a48 <BSP_LCD_Clear>:
{ 
 8006a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <BSP_LCD_Clear+0x34>)
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	4a0b      	ldr	r2, [pc, #44]	; (8006a80 <BSP_LCD_Clear+0x38>)
 8006a54:	2334      	movs	r3, #52	; 0x34
 8006a56:	fb03 2304 	mla	r3, r3, r4, r2
 8006a5a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006a5c:	f7ff ff6e 	bl	800693c <BSP_LCD_GetXSize>
 8006a60:	4606      	mov	r6, r0
 8006a62:	f7ff ff77 	bl	8006954 <BSP_LCD_GetYSize>
 8006a66:	9701      	str	r7, [sp, #4]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4632      	mov	r2, r6
 8006a70:	4629      	mov	r1, r5
 8006a72:	4620      	mov	r0, r4
 8006a74:	f7ff ff22 	bl	80068bc <LL_FillBuffer>
}
 8006a78:	b003      	add	sp, #12
 8006a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7c:	20000324 	.word	0x20000324
 8006a80:	200043cc 	.word	0x200043cc

08006a84 <BSP_LCD_DrawHLine>:
{
 8006a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	460e      	mov	r6, r1
 8006a8e:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <BSP_LCD_DrawHLine+0x6c>)
 8006a92:	681c      	ldr	r4, [r3, #0]
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <BSP_LCD_DrawHLine+0x70>)
 8006a96:	2334      	movs	r3, #52	; 0x34
 8006a98:	fb03 2304 	mla	r3, r3, r4, r2
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d01a      	beq.n	8006ad8 <BSP_LCD_DrawHLine+0x54>
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006aa2:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <BSP_LCD_DrawHLine+0x70>)
 8006aa4:	2334      	movs	r3, #52	; 0x34
 8006aa6:	fb03 2304 	mla	r3, r3, r4, r2
 8006aaa:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006aac:	f7ff ff46 	bl	800693c <BSP_LCD_GetXSize>
 8006ab0:	fb00 8006 	mla	r0, r0, r6, r8
 8006ab4:	eb05 0180 	add.w	r1, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006ab8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006abc:	0093      	lsls	r3, r2, #2
 8006abe:	4a0e      	ldr	r2, [pc, #56]	; (8006af8 <BSP_LCD_DrawHLine+0x74>)
 8006ac0:	58d3      	ldr	r3, [r2, r3]
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	463a      	mov	r2, r7
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fef5 	bl	80068bc <LL_FillBuffer>
}
 8006ad2:	b002      	add	sp, #8
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006ad8:	2334      	movs	r3, #52	; 0x34
 8006ada:	fb03 2304 	mla	r3, r3, r4, r2
 8006ade:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006ae0:	f7ff ff2c 	bl	800693c <BSP_LCD_GetXSize>
 8006ae4:	fb00 8006 	mla	r0, r0, r6, r8
 8006ae8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8006aec:	e7e4      	b.n	8006ab8 <BSP_LCD_DrawHLine+0x34>
 8006aee:	bf00      	nop
 8006af0:	20000324 	.word	0x20000324
 8006af4:	200043cc 	.word	0x200043cc
 8006af8:	20000328 	.word	0x20000328

08006afc <BSP_LCD_DrawPixel>:
{
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	4606      	mov	r6, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006b04:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <BSP_LCD_DrawPixel+0x4c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4910      	ldr	r1, [pc, #64]	; (8006b4c <BSP_LCD_DrawPixel+0x50>)
 8006b0a:	2234      	movs	r2, #52	; 0x34
 8006b0c:	fb02 1203 	mla	r2, r2, r3, r1
 8006b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b12:	2a02      	cmp	r2, #2
 8006b14:	d00b      	beq.n	8006b2e <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006b16:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <BSP_LCD_DrawPixel+0x50>)
 8006b18:	2134      	movs	r1, #52	; 0x34
 8006b1a:	fb01 2303 	mla	r3, r1, r3, r2
 8006b1e:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006b20:	f7ff ff0c 	bl	800693c <BSP_LCD_GetXSize>
 8006b24:	fb00 6004 	mla	r0, r0, r4, r6
 8006b28:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8006b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006b2e:	460a      	mov	r2, r1
 8006b30:	2134      	movs	r1, #52	; 0x34
 8006b32:	fb01 2303 	mla	r3, r1, r3, r2
 8006b36:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006b38:	f7ff ff00 	bl	800693c <BSP_LCD_GetXSize>
 8006b3c:	fb00 6004 	mla	r0, r0, r4, r6
 8006b40:	b2ad      	uxth	r5, r5
 8006b42:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 8006b46:	e7f1      	b.n	8006b2c <BSP_LCD_DrawPixel+0x30>
 8006b48:	20000324 	.word	0x20000324
 8006b4c:	200043cc 	.word	0x200043cc

08006b50 <DrawChar>:
{
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	b083      	sub	sp, #12
 8006b56:	4681      	mov	r9, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8006b5c:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <DrawChar+0xe0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b64:	009a      	lsls	r2, r3, #2
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <DrawChar+0xe4>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	88da      	ldrh	r2, [r3, #6]
 8006b6e:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006b70:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8006b72:	f105 0b07 	add.w	fp, r5, #7
 8006b76:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8006b7a:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8006b7e:	fa5f f888 	uxtb.w	r8, r8
 8006b82:	b2eb      	uxtb	r3, r5
 8006b84:	eba8 0803 	sub.w	r8, r8, r3
 8006b88:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8006b8c:	f04f 0a00 	mov.w	sl, #0
 8006b90:	e034      	b.n	8006bfc <DrawChar+0xac>
      line =  pchar[0];      
 8006b92:	9a00      	ldr	r2, [sp, #0]
 8006b94:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 8006b96:	2400      	movs	r4, #0
 8006b98:	e014      	b.n	8006bc4 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 8006b9a:	9900      	ldr	r1, [sp, #0]
 8006b9c:	5ccb      	ldrb	r3, [r1, r3]
 8006b9e:	7856      	ldrb	r6, [r2, #1]
 8006ba0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 8006ba4:	e7f7      	b.n	8006b96 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <DrawChar+0xe0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bae:	009a      	lsls	r2, r3, #2
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <DrawChar+0xe4>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	eb09 0004 	add.w	r0, r9, r4
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	4639      	mov	r1, r7
 8006bbc:	b280      	uxth	r0, r0
 8006bbe:	f7ff ff9d 	bl	8006afc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006bc2:	3401      	adds	r4, #1
 8006bc4:	42a5      	cmp	r5, r4
 8006bc6:	d915      	bls.n	8006bf4 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8006bc8:	1b2b      	subs	r3, r5, r4
 8006bca:	4443      	add	r3, r8
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	4233      	tst	r3, r6
 8006bd6:	d0e6      	beq.n	8006ba6 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <DrawChar+0xe0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006be0:	009a      	lsls	r2, r3, #2
 8006be2:	eb09 0004 	add.w	r0, r9, r4
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <DrawChar+0xe4>)
 8006be8:	589a      	ldr	r2, [r3, r2]
 8006bea:	4639      	mov	r1, r7
 8006bec:	b280      	uxth	r0, r0
 8006bee:	f7ff ff85 	bl	8006afc <BSP_LCD_DrawPixel>
 8006bf2:	e7e6      	b.n	8006bc2 <DrawChar+0x72>
    Ypos++;
 8006bf4:	3701      	adds	r7, #1
 8006bf6:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 8006bf8:	f10a 0a01 	add.w	sl, sl, #1
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	4553      	cmp	r3, sl
 8006c00:	d912      	bls.n	8006c28 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006c02:	fb0a f30b 	mul.w	r3, sl, fp
 8006c06:	9a00      	ldr	r2, [sp, #0]
 8006c08:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8006c0a:	f1bb 0f01 	cmp.w	fp, #1
 8006c0e:	d0c0      	beq.n	8006b92 <DrawChar+0x42>
 8006c10:	f1bb 0f02 	cmp.w	fp, #2
 8006c14:	d0c1      	beq.n	8006b9a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006c16:	9900      	ldr	r1, [sp, #0]
 8006c18:	5ccb      	ldrb	r3, [r1, r3]
 8006c1a:	7856      	ldrb	r6, [r2, #1]
 8006c1c:	0236      	lsls	r6, r6, #8
 8006c1e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8006c22:	7893      	ldrb	r3, [r2, #2]
 8006c24:	431e      	orrs	r6, r3
      break;
 8006c26:	e7b6      	b.n	8006b96 <DrawChar+0x46>
}
 8006c28:	b003      	add	sp, #12
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000324 	.word	0x20000324
 8006c34:	20000328 	.word	0x20000328

08006c38 <BSP_LCD_DisplayChar>:
{
 8006c38:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <BSP_LCD_DisplayChar+0x30>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c42:	009c      	lsls	r4, r3, #2
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <BSP_LCD_DisplayChar+0x34>)
 8006c46:	4423      	add	r3, r4
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	681c      	ldr	r4, [r3, #0]
 8006c4c:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006c50:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006c52:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006c56:	889b      	ldrh	r3, [r3, #4]
 8006c58:	3307      	adds	r3, #7
 8006c5a:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006c5c:	fb03 4202 	mla	r2, r3, r2, r4
 8006c60:	f7ff ff76 	bl	8006b50 <DrawChar>
}
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20000324 	.word	0x20000324
 8006c6c:	20000328 	.word	0x20000328

08006c70 <BSP_LCD_DisplayStringAt>:
{
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	4605      	mov	r5, r0
 8006c76:	4688      	mov	r8, r1
 8006c78:	4616      	mov	r6, r2
 8006c7a:	461f      	mov	r7, r3
  uint8_t  *ptr = Text;
 8006c7c:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 8006c7e:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8006c80:	e001      	b.n	8006c86 <BSP_LCD_DisplayStringAt+0x16>
 8006c82:	3401      	adds	r4, #1
 8006c84:	4613      	mov	r3, r2
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f9      	bne.n	8006c82 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006c8e:	f7ff fe55 	bl	800693c <BSP_LCD_GetXSize>
 8006c92:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <BSP_LCD_DisplayStringAt+0xc8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c9a:	009a      	lsls	r2, r3, #2
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <BSP_LCD_DisplayStringAt+0xcc>)
 8006c9e:	4413      	add	r3, r2
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	889a      	ldrh	r2, [r3, #4]
 8006ca4:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8006ca8:	2f01      	cmp	r7, #1
 8006caa:	d006      	beq.n	8006cba <BSP_LCD_DisplayStringAt+0x4a>
 8006cac:	2f02      	cmp	r7, #2
 8006cae:	d00c      	beq.n	8006cca <BSP_LCD_DisplayStringAt+0x5a>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006cb0:	b22b      	sxth	r3, r5
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dd3d      	ble.n	8006d32 <BSP_LCD_DisplayStringAt+0xc2>
    ref_column = 1;
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	e021      	b.n	8006cfe <BSP_LCD_DisplayStringAt+0x8e>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006cba:	1b04      	subs	r4, r0, r4
 8006cbc:	fb04 f302 	mul.w	r3, r4, r2
 8006cc0:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8006cc4:	441d      	add	r5, r3
 8006cc6:	b2ad      	uxth	r5, r5
      break;
 8006cc8:	e7f2      	b.n	8006cb0 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006cca:	1b03      	subs	r3, r0, r4
 8006ccc:	fb13 f302 	smulbb	r3, r3, r2
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	1b5d      	subs	r5, r3, r5
 8006cd4:	b2ad      	uxth	r5, r5
      break;
 8006cd6:	e7eb      	b.n	8006cb0 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006cd8:	463a      	mov	r2, r7
 8006cda:	4641      	mov	r1, r8
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f7ff ffab 	bl	8006c38 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006ce2:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <BSP_LCD_DisplayStringAt+0xc8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cea:	009a      	lsls	r2, r3, #2
 8006cec:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <BSP_LCD_DisplayStringAt+0xcc>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	889b      	ldrh	r3, [r3, #4]
 8006cf4:	441d      	add	r5, r3
 8006cf6:	b2ad      	uxth	r5, r5
    Text++;
 8006cf8:	3601      	adds	r6, #1
    i++;
 8006cfa:	3401      	adds	r4, #1
 8006cfc:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006cfe:	7837      	ldrb	r7, [r6, #0]
 8006d00:	f7ff fe1c 	bl	800693c <BSP_LCD_GetXSize>
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <BSP_LCD_DisplayStringAt+0xc8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d0c:	009a      	lsls	r2, r3, #2
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <BSP_LCD_DisplayStringAt+0xcc>)
 8006d10:	4413      	add	r3, r2
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	889b      	ldrh	r3, [r3, #4]
 8006d16:	fb03 0014 	mls	r0, r3, r4, r0
 8006d1a:	b280      	uxth	r0, r0
 8006d1c:	4298      	cmp	r0, r3
 8006d1e:	bf34      	ite	cc
 8006d20:	2000      	movcc	r0, #0
 8006d22:	2001      	movcs	r0, #1
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	bf08      	it	eq
 8006d28:	2000      	moveq	r0, #0
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d1d4      	bne.n	8006cd8 <BSP_LCD_DisplayStringAt+0x68>
}
 8006d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 8006d32:	2501      	movs	r5, #1
 8006d34:	e7bf      	b.n	8006cb6 <BSP_LCD_DisplayStringAt+0x46>
 8006d36:	bf00      	nop
 8006d38:	20000324 	.word	0x20000324
 8006d3c:	20000328 	.word	0x20000328

08006d40 <BSP_LCD_DrawCircle>:
{
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	b087      	sub	sp, #28
 8006d46:	4682      	mov	sl, r0
 8006d48:	468b      	mov	fp, r1
  decision = 3 - (Radius << 1);
 8006d4a:	0053      	lsls	r3, r2, #1
 8006d4c:	f1c3 0303 	rsb	r3, r3, #3
 8006d50:	9302      	str	r3, [sp, #8]
  current_y = Radius;
 8006d52:	9201      	str	r2, [sp, #4]
  current_x = 0;
 8006d54:	f04f 0900 	mov.w	r9, #0
  while (current_x <= current_y)
 8006d58:	e005      	b.n	8006d66 <BSP_LCD_DrawCircle+0x26>
      decision += (current_x << 2) + 6;
 8006d5a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006d5e:	3306      	adds	r3, #6
 8006d60:	9302      	str	r3, [sp, #8]
    current_x++;
 8006d62:	f109 0901 	add.w	r9, r9, #1
  while (current_x <= current_y)
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	4599      	cmp	r9, r3
 8006d6a:	d876      	bhi.n	8006e5a <BSP_LCD_DrawCircle+0x11a>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006d6c:	fa1f f489 	uxth.w	r4, r9
 8006d70:	eb04 030a 	add.w	r3, r4, sl
 8006d74:	b298      	uxth	r0, r3
 8006d76:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8006d7a:	ebab 0805 	sub.w	r8, fp, r5
 8006d7e:	fa1f f888 	uxth.w	r8, r8
 8006d82:	4e37      	ldr	r6, [pc, #220]	; (8006e60 <BSP_LCD_DrawCircle+0x120>)
 8006d84:	4f37      	ldr	r7, [pc, #220]	; (8006e64 <BSP_LCD_DrawCircle+0x124>)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d8c:	009a      	lsls	r2, r3, #2
 8006d8e:	58b2      	ldr	r2, [r6, r2]
 8006d90:	4641      	mov	r1, r8
 8006d92:	9003      	str	r0, [sp, #12]
 8006d94:	f7ff feb2 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006d98:	ebaa 0304 	sub.w	r3, sl, r4
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4618      	mov	r0, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006da6:	009a      	lsls	r2, r3, #2
 8006da8:	58b2      	ldr	r2, [r6, r2]
 8006daa:	4641      	mov	r1, r8
 8006dac:	9004      	str	r0, [sp, #16]
 8006dae:	f7ff fea5 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006db2:	eb05 030a 	add.w	r3, r5, sl
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4618      	mov	r0, r3
 8006dba:	ebab 0804 	sub.w	r8, fp, r4
 8006dbe:	fa1f f888 	uxth.w	r8, r8
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006dc8:	009a      	lsls	r2, r3, #2
 8006dca:	58b2      	ldr	r2, [r6, r2]
 8006dcc:	4641      	mov	r1, r8
 8006dce:	9005      	str	r0, [sp, #20]
 8006dd0:	f7ff fe94 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006dd4:	ebaa 0305 	sub.w	r3, sl, r5
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4618      	mov	r0, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006de2:	009a      	lsls	r2, r3, #2
 8006de4:	58b2      	ldr	r2, [r6, r2]
 8006de6:	4641      	mov	r1, r8
 8006de8:	4680      	mov	r8, r0
 8006dea:	f7ff fe87 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006dee:	445d      	add	r5, fp
 8006df0:	b2ad      	uxth	r5, r5
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006df8:	009a      	lsls	r2, r3, #2
 8006dfa:	58b2      	ldr	r2, [r6, r2]
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	9803      	ldr	r0, [sp, #12]
 8006e00:	f7ff fe7c 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e0a:	009a      	lsls	r2, r3, #2
 8006e0c:	58b2      	ldr	r2, [r6, r2]
 8006e0e:	4629      	mov	r1, r5
 8006e10:	9804      	ldr	r0, [sp, #16]
 8006e12:	f7ff fe73 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006e16:	445c      	add	r4, fp
 8006e18:	b2a4      	uxth	r4, r4
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	58b2      	ldr	r2, [r6, r2]
 8006e24:	4621      	mov	r1, r4
 8006e26:	9805      	ldr	r0, [sp, #20]
 8006e28:	f7ff fe68 	bl	8006afc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e32:	009a      	lsls	r2, r3, #2
 8006e34:	58b2      	ldr	r2, [r6, r2]
 8006e36:	4621      	mov	r1, r4
 8006e38:	4640      	mov	r0, r8
 8006e3a:	f7ff fe5f 	bl	8006afc <BSP_LCD_DrawPixel>
    if (decision < 0)
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db8a      	blt.n	8006d5a <BSP_LCD_DrawCircle+0x1a>
      decision += ((current_x - current_y) << 2) + 10;
 8006e44:	9a01      	ldr	r2, [sp, #4]
 8006e46:	eba9 0302 	sub.w	r3, r9, r2
 8006e4a:	9902      	ldr	r1, [sp, #8]
 8006e4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006e50:	330a      	adds	r3, #10
 8006e52:	9302      	str	r3, [sp, #8]
      current_y--;
 8006e54:	1e53      	subs	r3, r2, #1
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	e783      	b.n	8006d62 <BSP_LCD_DrawCircle+0x22>
}
 8006e5a:	b007      	add	sp, #28
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	20000328 	.word	0x20000328
 8006e64:	20000324 	.word	0x20000324

08006e68 <BSP_LCD_FillRect>:
{
 8006e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	4681      	mov	r9, r0
 8006e70:	460e      	mov	r6, r1
 8006e72:	4617      	mov	r7, r2
 8006e74:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006e76:	4c1d      	ldr	r4, [pc, #116]	; (8006eec <BSP_LCD_FillRect+0x84>)
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e7e:	009a      	lsls	r2, r3, #2
 8006e80:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <BSP_LCD_FillRect+0x88>)
 8006e82:	5898      	ldr	r0, [r3, r2]
 8006e84:	f7ff fdb8 	bl	80069f8 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <BSP_LCD_FillRect+0x8c>)
 8006e8c:	2334      	movs	r3, #52	; 0x34
 8006e8e:	fb03 2304 	mla	r3, r3, r4, r2
 8006e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d01d      	beq.n	8006ed4 <BSP_LCD_FillRect+0x6c>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006e98:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <BSP_LCD_FillRect+0x8c>)
 8006e9a:	2334      	movs	r3, #52	; 0x34
 8006e9c:	fb03 2304 	mla	r3, r3, r4, r2
 8006ea0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006ea2:	f7ff fd4b 	bl	800693c <BSP_LCD_GetXSize>
 8006ea6:	fb00 9006 	mla	r0, r0, r6, r9
 8006eaa:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006eae:	f7ff fd45 	bl	800693c <BSP_LCD_GetXSize>
 8006eb2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006eb6:	0093      	lsls	r3, r2, #2
 8006eb8:	4a0d      	ldr	r2, [pc, #52]	; (8006ef0 <BSP_LCD_FillRect+0x88>)
 8006eba:	58d3      	ldr	r3, [r2, r3]
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	1bc0      	subs	r0, r0, r7
 8006ec0:	9000      	str	r0, [sp, #0]
 8006ec2:	4643      	mov	r3, r8
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff fcf7 	bl	80068bc <LL_FillBuffer>
}
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006ed4:	2334      	movs	r3, #52	; 0x34
 8006ed6:	fb03 2304 	mla	r3, r3, r4, r2
 8006eda:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006edc:	f7ff fd2e 	bl	800693c <BSP_LCD_GetXSize>
 8006ee0:	fb00 9006 	mla	r0, r0, r6, r9
 8006ee4:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8006ee8:	e7e1      	b.n	8006eae <BSP_LCD_FillRect+0x46>
 8006eea:	bf00      	nop
 8006eec:	20000324 	.word	0x20000324
 8006ef0:	20000328 	.word	0x20000328
 8006ef4:	200043cc 	.word	0x200043cc

08006ef8 <BSP_LCD_FillCircle>:
{
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	b083      	sub	sp, #12
 8006efe:	4682      	mov	sl, r0
 8006f00:	4689      	mov	r9, r1
 8006f02:	4615      	mov	r5, r2
 8006f04:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 8006f06:	0056      	lsls	r6, r2, #1
 8006f08:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006f0c:	4b2e      	ldr	r3, [pc, #184]	; (8006fc8 <BSP_LCD_FillCircle+0xd0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f14:	009a      	lsls	r2, r3, #2
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <BSP_LCD_FillCircle+0xd4>)
 8006f18:	5898      	ldr	r0, [r3, r2]
 8006f1a:	f7ff fd6d 	bl	80069f8 <BSP_LCD_SetTextColor>
  current_x = 0;
 8006f1e:	2400      	movs	r4, #0
  while (current_x <= current_y)
 8006f20:	e033      	b.n	8006f8a <BSP_LCD_FillCircle+0x92>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8006f22:	b2af      	uxth	r7, r5
 8006f24:	ebaa 0b07 	sub.w	fp, sl, r7
 8006f28:	fa1f fb8b 	uxth.w	fp, fp
 8006f2c:	fa1f f884 	uxth.w	r8, r4
 8006f30:	007f      	lsls	r7, r7, #1
 8006f32:	b2bf      	uxth	r7, r7
 8006f34:	eb08 0109 	add.w	r1, r8, r9
 8006f38:	463a      	mov	r2, r7
 8006f3a:	b289      	uxth	r1, r1
 8006f3c:	4658      	mov	r0, fp
 8006f3e:	f7ff fda1 	bl	8006a84 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006f42:	eba9 0108 	sub.w	r1, r9, r8
 8006f46:	463a      	mov	r2, r7
 8006f48:	b289      	uxth	r1, r1
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f7ff fd9a 	bl	8006a84 <BSP_LCD_DrawHLine>
 8006f50:	e01f      	b.n	8006f92 <BSP_LCD_FillCircle+0x9a>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006f52:	b2a7      	uxth	r7, r4
 8006f54:	ebaa 0b07 	sub.w	fp, sl, r7
 8006f58:	fa1f fb8b 	uxth.w	fp, fp
 8006f5c:	fa1f f885 	uxth.w	r8, r5
 8006f60:	007f      	lsls	r7, r7, #1
 8006f62:	b2bf      	uxth	r7, r7
 8006f64:	eba9 0108 	sub.w	r1, r9, r8
 8006f68:	463a      	mov	r2, r7
 8006f6a:	b289      	uxth	r1, r1
 8006f6c:	4658      	mov	r0, fp
 8006f6e:	f7ff fd89 	bl	8006a84 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006f72:	eb08 0109 	add.w	r1, r8, r9
 8006f76:	463a      	mov	r2, r7
 8006f78:	b289      	uxth	r1, r1
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f7ff fd82 	bl	8006a84 <BSP_LCD_DrawHLine>
 8006f80:	e009      	b.n	8006f96 <BSP_LCD_FillCircle+0x9e>
      decision += (current_x << 2) + 6;
 8006f82:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006f86:	3606      	adds	r6, #6
    current_x++;
 8006f88:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8006f8a:	42ac      	cmp	r4, r5
 8006f8c:	d80b      	bhi.n	8006fa6 <BSP_LCD_FillCircle+0xae>
    if(current_y > 0) 
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	d1c7      	bne.n	8006f22 <BSP_LCD_FillCircle+0x2a>
    if(current_x > 0) 
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d1dd      	bne.n	8006f52 <BSP_LCD_FillCircle+0x5a>
    if (decision < 0)
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	dbf3      	blt.n	8006f82 <BSP_LCD_FillCircle+0x8a>
      decision += ((current_x - current_y) << 2) + 10;
 8006f9a:	1b63      	subs	r3, r4, r5
 8006f9c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006fa0:	360a      	adds	r6, #10
      current_y--;
 8006fa2:	3d01      	subs	r5, #1
 8006fa4:	e7f0      	b.n	8006f88 <BSP_LCD_FillCircle+0x90>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006fa6:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <BSP_LCD_FillCircle+0xd0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006fae:	009a      	lsls	r2, r3, #2
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <BSP_LCD_FillCircle+0xd4>)
 8006fb2:	5898      	ldr	r0, [r3, r2]
 8006fb4:	f7ff fd20 	bl	80069f8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006fb8:	9a01      	ldr	r2, [sp, #4]
 8006fba:	4649      	mov	r1, r9
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	f7ff febf 	bl	8006d40 <BSP_LCD_DrawCircle>
}
 8006fc2:	b003      	add	sp, #12
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc8:	20000324 	.word	0x20000324
 8006fcc:	20000328 	.word	0x20000328

08006fd0 <BSP_LCD_DisplayOn>:
{
 8006fd0:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <BSP_LCD_DisplayOn+0x28>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	6993      	ldr	r3, [r2, #24]
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fe4:	4805      	ldr	r0, [pc, #20]	; (8006ffc <BSP_LCD_DisplayOn+0x2c>)
 8006fe6:	f7fc fb2c 	bl	8003642 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006fea:	2201      	movs	r2, #1
 8006fec:	2108      	movs	r1, #8
 8006fee:	4804      	ldr	r0, [pc, #16]	; (8007000 <BSP_LCD_DisplayOn+0x30>)
 8006ff0:	f7fc fb27 	bl	8003642 <HAL_GPIO_WritePin>
}
 8006ff4:	bd08      	pop	{r3, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200043cc 	.word	0x200043cc
 8006ffc:	40022000 	.word	0x40022000
 8007000:	40022800 	.word	0x40022800

08007004 <BSP_LCD_MspInit>:
{
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8007008:	4b4a      	ldr	r3, [pc, #296]	; (8007134 <BSP_LCD_MspInit+0x130>)
 800700a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
 8007012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007014:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8007018:	9200      	str	r2, [sp, #0]
 800701a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800701c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
 8007024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007026:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800702a:	9201      	str	r2, [sp, #4]
 800702c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800702e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007030:	f042 0210 	orr.w	r2, r2, #16
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
 8007036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007038:	f002 0210 	and.w	r2, r2, #16
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007046:	631a      	str	r2, [r3, #48]	; 0x30
 8007048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800704e:	9203      	str	r2, [sp, #12]
 8007050:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
 800705a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007060:	9204      	str	r2, [sp, #16]
 8007062:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
 800706c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800706e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007072:	9205      	str	r2, [sp, #20]
 8007074:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8007076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
 800707e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007080:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8007084:	9206      	str	r2, [sp, #24]
 8007086:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
 8007090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007092:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007096:	9207      	str	r2, [sp, #28]
 8007098:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800709a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80070ac:	2310      	movs	r3, #16
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070b0:	2402      	movs	r4, #2
 80070b2:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80070b8:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80070ba:	250e      	movs	r5, #14
 80070bc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80070be:	a909      	add	r1, sp, #36	; 0x24
 80070c0:	481d      	ldr	r0, [pc, #116]	; (8007138 <BSP_LCD_MspInit+0x134>)
 80070c2:	f7fc f9c7 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80070c6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80070ca:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070cc:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80070ce:	2309      	movs	r3, #9
 80070d0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80070d2:	a909      	add	r1, sp, #36	; 0x24
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <BSP_LCD_MspInit+0x138>)
 80070d6:	f7fc f9bd 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80070da:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070e0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80070e2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80070e4:	4e16      	ldr	r6, [pc, #88]	; (8007140 <BSP_LCD_MspInit+0x13c>)
 80070e6:	a909      	add	r1, sp, #36	; 0x24
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7fc f9b3 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80070ee:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80070f2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070f4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80070f6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80070f8:	a909      	add	r1, sp, #36	; 0x24
 80070fa:	4812      	ldr	r0, [pc, #72]	; (8007144 <BSP_LCD_MspInit+0x140>)
 80070fc:	f7fc f9aa 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007100:	23f7      	movs	r3, #247	; 0xf7
 8007102:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007104:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007106:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007108:	4c0f      	ldr	r4, [pc, #60]	; (8007148 <BSP_LCD_MspInit+0x144>)
 800710a:	a909      	add	r1, sp, #36	; 0x24
 800710c:	4620      	mov	r0, r4
 800710e:	f7fc f9a1 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8007112:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007114:	2501      	movs	r5, #1
 8007116:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007118:	a909      	add	r1, sp, #36	; 0x24
 800711a:	4630      	mov	r0, r6
 800711c:	f7fc f99a 	bl	8003454 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8007120:	2308      	movs	r3, #8
 8007122:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007124:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007126:	a909      	add	r1, sp, #36	; 0x24
 8007128:	4620      	mov	r0, r4
 800712a:	f7fc f993 	bl	8003454 <HAL_GPIO_Init>
}
 800712e:	b00f      	add	sp, #60	; 0x3c
 8007130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800
 8007138:	40021000 	.word	0x40021000
 800713c:	40021800 	.word	0x40021800
 8007140:	40022000 	.word	0x40022000
 8007144:	40022400 	.word	0x40022400
 8007148:	40022800 	.word	0x40022800

0800714c <BSP_LCD_ClockConfig>:
{
 800714c:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800714e:	4806      	ldr	r0, [pc, #24]	; (8007168 <BSP_LCD_ClockConfig+0x1c>)
 8007150:	2308      	movs	r3, #8
 8007152:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8007154:	23c0      	movs	r3, #192	; 0xc0
 8007156:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8007158:	2305      	movs	r3, #5
 800715a:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800715c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007160:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8007162:	f7fd fb6d 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
}
 8007166:	bd08      	pop	{r3, pc}
 8007168:	20000380 	.word	0x20000380

0800716c <BSP_LCD_Init>:
{    
 800716c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800716e:	4c25      	ldr	r4, [pc, #148]	; (8007204 <BSP_LCD_Init+0x98>)
 8007170:	2328      	movs	r3, #40	; 0x28
 8007172:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8007174:	2309      	movs	r3, #9
 8007176:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8007178:	2335      	movs	r3, #53	; 0x35
 800717a:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800717c:	230b      	movs	r3, #11
 800717e:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8007180:	f240 131b 	movw	r3, #283	; 0x11b
 8007184:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8007186:	f240 2315 	movw	r3, #533	; 0x215
 800718a:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800718c:	f240 131d 	movw	r3, #285	; 0x11d
 8007190:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8007192:	f240 2335 	movw	r3, #565	; 0x235
 8007196:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8007198:	2100      	movs	r1, #0
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff ffd6 	bl	800714c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80071a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80071a4:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80071a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80071aa:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80071b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80071b6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80071ba:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80071bc:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80071be:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80071c0:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <BSP_LCD_Init+0x9c>)
 80071c4:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80071c6:	4620      	mov	r0, r4
 80071c8:	f7fc ffc4 	bl	8004154 <HAL_LTDC_GetState>
 80071cc:	b1a0      	cbz	r0, 80071f8 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 80071ce:	480d      	ldr	r0, [pc, #52]	; (8007204 <BSP_LCD_Init+0x98>)
 80071d0:	f7fc fea8 	bl	8003f24 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80071d4:	2201      	movs	r2, #1
 80071d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071da:	480c      	ldr	r0, [pc, #48]	; (800720c <BSP_LCD_Init+0xa0>)
 80071dc:	f7fc fa31 	bl	8003642 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80071e0:	2201      	movs	r2, #1
 80071e2:	2108      	movs	r1, #8
 80071e4:	480a      	ldr	r0, [pc, #40]	; (8007210 <BSP_LCD_Init+0xa4>)
 80071e6:	f7fc fa2c 	bl	8003642 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80071ea:	f000 f921 	bl	8007430 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80071ee:	4809      	ldr	r0, [pc, #36]	; (8007214 <BSP_LCD_Init+0xa8>)
 80071f0:	f7ff fc1c 	bl	8006a2c <BSP_LCD_SetFont>
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80071f8:	2100      	movs	r1, #0
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7ff ff02 	bl	8007004 <BSP_LCD_MspInit>
 8007200:	e7e5      	b.n	80071ce <BSP_LCD_Init+0x62>
 8007202:	bf00      	nop
 8007204:	200043cc 	.word	0x200043cc
 8007208:	40016800 	.word	0x40016800
 800720c:	40022000 	.word	0x40022000
 8007210:	40022800 	.word	0x40022800
 8007214:	2000000c 	.word	0x2000000c

08007218 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800721c:	b083      	sub	sp, #12
 800721e:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8007220:	f04f 0800 	mov.w	r8, #0
 8007224:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007228:	4c20      	ldr	r4, [pc, #128]	; (80072ac <BSP_SDRAM_Initialization_sequence+0x94>)
 800722a:	2601      	movs	r6, #1
 800722c:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800722e:	2710      	movs	r7, #16
 8007230:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8007232:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8007234:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007238:	4d1d      	ldr	r5, [pc, #116]	; (80072b0 <BSP_SDRAM_Initialization_sequence+0x98>)
 800723a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f7fd fdf2 	bl	8004e2a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007246:	4630      	mov	r0, r6
 8007248:	f7fb f9c2 	bl	80025d0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800724c:	2302      	movs	r3, #2
 800724e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007250:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8007252:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8007254:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800725c:	4621      	mov	r1, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f7fd fde3 	bl	8004e2a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007264:	2303      	movs	r3, #3
 8007266:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007268:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800726a:	2308      	movs	r3, #8
 800726c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800726e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f7fd fdd6 	bl	8004e2a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800727e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8007282:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007284:	2304      	movs	r3, #4
 8007286:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007288:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800728a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007294:	4621      	mov	r1, r4
 8007296:	4628      	mov	r0, r5
 8007298:	f7fd fdc7 	bl	8004e2a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800729c:	4649      	mov	r1, r9
 800729e:	4628      	mov	r0, r5
 80072a0:	f7fd fde0 	bl	8004e64 <HAL_SDRAM_ProgramRefreshRate>
}
 80072a4:	b003      	add	sp, #12
 80072a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072aa:	bf00      	nop
 80072ac:	20000404 	.word	0x20000404
 80072b0:	20004474 	.word	0x20004474

080072b4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80072ba:	4b54      	ldr	r3, [pc, #336]	; (800740c <BSP_SDRAM_MspInit+0x158>)
 80072bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38
 80072c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c6:	f002 0201 	and.w	r2, r2, #1
 80072ca:	9201      	str	r2, [sp, #4]
 80072cc:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80072ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80072dc:	9202      	str	r2, [sp, #8]
 80072de:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e2:	f042 0204 	orr.w	r2, r2, #4
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
 80072e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ea:	f002 0204 	and.w	r2, r2, #4
 80072ee:	9203      	str	r2, [sp, #12]
 80072f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f4:	f042 0208 	orr.w	r2, r2, #8
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
 80072fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fc:	f002 0208 	and.w	r2, r2, #8
 8007300:	9204      	str	r2, [sp, #16]
 8007302:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007306:	f042 0210 	orr.w	r2, r2, #16
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
 800730c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730e:	f002 0210 	and.w	r2, r2, #16
 8007312:	9205      	str	r2, [sp, #20]
 8007314:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007318:	f042 0220 	orr.w	r2, r2, #32
 800731c:	631a      	str	r2, [r3, #48]	; 0x30
 800731e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007320:	f002 0220 	and.w	r2, r2, #32
 8007324:	9206      	str	r2, [sp, #24]
 8007326:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
 8007330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007332:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007336:	9207      	str	r2, [sp, #28]
 8007338:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800733a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007348:	9308      	str	r3, [sp, #32]
 800734a:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800734c:	2302      	movs	r3, #2
 800734e:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007350:	2201      	movs	r2, #1
 8007352:	920b      	str	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007354:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007356:	230c      	movs	r3, #12
 8007358:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800735a:	ac0e      	add	r4, sp, #56	; 0x38
 800735c:	2308      	movs	r3, #8
 800735e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007362:	4621      	mov	r1, r4
 8007364:	482a      	ldr	r0, [pc, #168]	; (8007410 <BSP_SDRAM_MspInit+0x15c>)
 8007366:	f7fc f875 	bl	8003454 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800736a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007370:	4621      	mov	r1, r4
 8007372:	4828      	ldr	r0, [pc, #160]	; (8007414 <BSP_SDRAM_MspInit+0x160>)
 8007374:	f7fc f86e 	bl	8003454 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007378:	f64f 7383 	movw	r3, #65411	; 0xff83
 800737c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800737e:	4621      	mov	r1, r4
 8007380:	4825      	ldr	r0, [pc, #148]	; (8007418 <BSP_SDRAM_MspInit+0x164>)
 8007382:	f7fc f867 	bl	8003454 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007386:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800738a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800738c:	4621      	mov	r1, r4
 800738e:	4823      	ldr	r0, [pc, #140]	; (800741c <BSP_SDRAM_MspInit+0x168>)
 8007390:	f7fc f860 	bl	8003454 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007394:	f248 1333 	movw	r3, #33075	; 0x8133
 8007398:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800739a:	4621      	mov	r1, r4
 800739c:	4820      	ldr	r0, [pc, #128]	; (8007420 <BSP_SDRAM_MspInit+0x16c>)
 800739e:	f7fc f859 	bl	8003454 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80073a2:	2328      	movs	r3, #40	; 0x28
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80073a6:	4621      	mov	r1, r4
 80073a8:	481e      	ldr	r0, [pc, #120]	; (8007424 <BSP_SDRAM_MspInit+0x170>)
 80073aa:	f7fc f853 	bl	8003454 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80073ae:	4c1e      	ldr	r4, [pc, #120]	; (8007428 <BSP_SDRAM_MspInit+0x174>)
 80073b0:	2500      	movs	r5, #0
 80073b2:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80073b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073bc:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80073be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c2:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c8:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80073ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073ce:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80073d0:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80073d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073d6:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80073d8:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80073da:	2303      	movs	r3, #3
 80073dc:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80073de:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80073e0:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <BSP_SDRAM_MspInit+0x178>)
 80073e4:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80073e6:	6334      	str	r4, [r6, #48]	; 0x30
 80073e8:	63a6      	str	r6, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7fb fd6c 	bl	8002ec8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7fb fd03 	bl	8002dfc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80073f6:	462a      	mov	r2, r5
 80073f8:	210f      	movs	r1, #15
 80073fa:	2038      	movs	r0, #56	; 0x38
 80073fc:	f7fb fbe4 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007400:	2038      	movs	r0, #56	; 0x38
 8007402:	f7fb fc13 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 8007406:	b00e      	add	sp, #56	; 0x38
 8007408:	bd70      	pop	{r4, r5, r6, pc}
 800740a:	bf00      	nop
 800740c:	40023800 	.word	0x40023800
 8007410:	40020800 	.word	0x40020800
 8007414:	40020c00 	.word	0x40020c00
 8007418:	40021000 	.word	0x40021000
 800741c:	40021400 	.word	0x40021400
 8007420:	40021800 	.word	0x40021800
 8007424:	40021c00 	.word	0x40021c00
 8007428:	20000430 	.word	0x20000430
 800742c:	40026410 	.word	0x40026410

08007430 <BSP_SDRAM_Init>:
{ 
 8007430:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007432:	4c1b      	ldr	r4, [pc, #108]	; (80074a0 <BSP_SDRAM_Init+0x70>)
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <BSP_SDRAM_Init+0x74>)
 8007436:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8007438:	4d1b      	ldr	r5, [pc, #108]	; (80074a8 <BSP_SDRAM_Init+0x78>)
 800743a:	2302      	movs	r3, #2
 800743c:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800743e:	2107      	movs	r1, #7
 8007440:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 8007442:	2204      	movs	r2, #4
 8007444:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 8007446:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 8007448:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800744a:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800744c:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800744e:	2100      	movs	r1, #0
 8007450:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007452:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007454:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007456:	2310      	movs	r3, #16
 8007458:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800745e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007462:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007464:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800746a:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800746c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007470:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007472:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007474:	4620      	mov	r0, r4
 8007476:	f7ff ff1d 	bl	80072b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	f7fd fcb5 	bl	8004dec <HAL_SDRAM_Init>
 8007482:	b948      	cbnz	r0, 8007498 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_OK;
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <BSP_SDRAM_Init+0x7c>)
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800748a:	f240 6003 	movw	r0, #1539	; 0x603
 800748e:	f7ff fec3 	bl	8007218 <BSP_SDRAM_Initialization_sequence>
}
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <BSP_SDRAM_Init+0x7c>)
 8007494:	7818      	ldrb	r0, [r3, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_ERROR;
 8007498:	4b04      	ldr	r3, [pc, #16]	; (80074ac <BSP_SDRAM_Init+0x7c>)
 800749a:	2201      	movs	r2, #1
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e7f4      	b.n	800748a <BSP_SDRAM_Init+0x5a>
 80074a0:	20004474 	.word	0x20004474
 80074a4:	a0000140 	.word	0xa0000140
 80074a8:	20000414 	.word	0x20000414
 80074ac:	2000003c 	.word	0x2000003c

080074b0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80074b0:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <BSP_TS_Init+0x38>)
 80074b4:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <BSP_TS_Init+0x3c>)
 80074b8:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80074ba:	4c0d      	ldr	r4, [pc, #52]	; (80074f0 <BSP_TS_Init+0x40>)
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	2070      	movs	r0, #112	; 0x70
 80074c0:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	2070      	movs	r0, #112	; 0x70
 80074c6:	4798      	blx	r3
 80074c8:	2851      	cmp	r0, #81	; 0x51
 80074ca:	d10b      	bne.n	80074e4 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80074cc:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <BSP_TS_Init+0x44>)
 80074ce:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80074d0:	2070      	movs	r0, #112	; 0x70
 80074d2:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <BSP_TS_Init+0x48>)
 80074d4:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <BSP_TS_Init+0x4c>)
 80074d8:	2108      	movs	r1, #8
 80074da:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80074dc:	68e3      	ldr	r3, [r4, #12]
 80074de:	4798      	blx	r3
  uint8_t status = TS_OK;
 80074e0:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80074e2:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 80074e4:	2003      	movs	r0, #3
 80074e6:	e7fc      	b.n	80074e2 <BSP_TS_Init+0x32>
 80074e8:	2000049a 	.word	0x2000049a
 80074ec:	2000049c 	.word	0x2000049c
 80074f0:	20000014 	.word	0x20000014
 80074f4:	20000494 	.word	0x20000494
 80074f8:	20000490 	.word	0x20000490
 80074fc:	20000498 	.word	0x20000498

08007500 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007500:	2884      	cmp	r0, #132	; 0x84
 8007502:	d001      	beq.n	8007508 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007504:	3003      	adds	r0, #3
 8007506:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007508:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800750a:	4770      	bx	lr

0800750c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800750c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800750e:	f000 fa11 	bl	8007934 <vTaskStartScheduler>
  
  return osOK;
}
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}

08007516 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007518:	b085      	sub	sp, #20
 800751a:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800751c:	6844      	ldr	r4, [r0, #4]
 800751e:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007520:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007522:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007526:	f7ff ffeb 	bl	8007500 <makeFreeRtosPriority>
 800752a:	ab03      	add	r3, sp, #12
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	9000      	str	r0, [sp, #0]
 8007530:	463b      	mov	r3, r7
 8007532:	b2b2      	uxth	r2, r6
 8007534:	4629      	mov	r1, r5
 8007536:	4620      	mov	r0, r4
 8007538:	f000 f9ca 	bl	80078d0 <xTaskCreate>
 800753c:	2801      	cmp	r0, #1
 800753e:	d102      	bne.n	8007546 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007540:	9803      	ldr	r0, [sp, #12]
}
 8007542:	b005      	add	sp, #20
 8007544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8007546:	2000      	movs	r0, #0
 8007548:	e7fb      	b.n	8007542 <osThreadCreate+0x2c>

0800754a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800754a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800754c:	4603      	mov	r3, r0
 800754e:	b900      	cbnz	r0, 8007552 <osDelay+0x8>
 8007550:	2301      	movs	r3, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fb42 	bl	8007bdc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007558:	2000      	movs	r0, #0
 800755a:	bd08      	pop	{r3, pc}

0800755c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755c:	f100 0308 	add.w	r3, r0, #8
 8007560:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007566:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007568:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007570:	4770      	bx	lr

08007572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007576:	4770      	bx	lr

08007578 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007578:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800757a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007584:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007586:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007588:	6803      	ldr	r3, [r0, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	6003      	str	r3, [r0, #0]
}
 800758e:	4770      	bx	lr

08007590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007590:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007592:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007594:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007598:	d002      	beq.n	80075a0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800759a:	f100 0208 	add.w	r2, r0, #8
 800759e:	e002      	b.n	80075a6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80075a0:	6902      	ldr	r2, [r0, #16]
 80075a2:	e004      	b.n	80075ae <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a4:	461a      	mov	r2, r3
 80075a6:	6853      	ldr	r3, [r2, #4]
 80075a8:	681c      	ldr	r4, [r3, #0]
 80075aa:	42ac      	cmp	r4, r5
 80075ac:	d9fa      	bls.n	80075a4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ae:	6853      	ldr	r3, [r2, #4]
 80075b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075b2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075b4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80075b6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80075ba:	6803      	ldr	r3, [r0, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	6003      	str	r3, [r0, #0]
}
 80075c0:	bc30      	pop	{r4, r5}
 80075c2:	4770      	bx	lr

080075c4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075c4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075c6:	6842      	ldr	r2, [r0, #4]
 80075c8:	6881      	ldr	r1, [r0, #8]
 80075ca:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075cc:	6882      	ldr	r2, [r0, #8]
 80075ce:	6841      	ldr	r1, [r0, #4]
 80075d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	4282      	cmp	r2, r0
 80075d6:	d006      	beq.n	80075e6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075d8:	2200      	movs	r2, #0
 80075da:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	3a01      	subs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075e2:	6818      	ldr	r0, [r3, #0]
}
 80075e4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075e6:	6882      	ldr	r2, [r0, #8]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	e7f5      	b.n	80075d8 <uxListRemove+0x14>

080075ec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ec:	4b08      	ldr	r3, [pc, #32]	; (8007610 <prvResetNextTaskUnblockTime+0x24>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	b13b      	cbz	r3, 8007604 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <prvResetNextTaskUnblockTime+0x24>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <prvResetNextTaskUnblockTime+0x28>)
 8007600:	601a      	str	r2, [r3, #0]
	}
}
 8007602:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <prvResetNextTaskUnblockTime+0x28>)
 8007606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	200004a4 	.word	0x200004a4
 8007614:	2000057c 	.word	0x2000057c

08007618 <prvDeleteTCB>:
	{
 8007618:	b510      	push	{r4, lr}
 800761a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 800761c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800761e:	f000 fdb5 	bl	800818c <vPortFree>
			vPortFree( pxTCB );
 8007622:	4620      	mov	r0, r4
 8007624:	f000 fdb2 	bl	800818c <vPortFree>
	}
 8007628:	bd10      	pop	{r4, pc}

0800762a <prvInitialiseNewTask>:
{
 800762a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762e:	4680      	mov	r8, r0
 8007630:	4699      	mov	r9, r3
 8007632:	9d08      	ldr	r5, [sp, #32]
 8007634:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007638:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800763a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800763e:	4413      	add	r3, r2
 8007640:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007644:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007648:	2300      	movs	r3, #0
 800764a:	2b0f      	cmp	r3, #15
 800764c:	d807      	bhi.n	800765e <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800764e:	5cc8      	ldrb	r0, [r1, r3]
 8007650:	18e2      	adds	r2, r4, r3
 8007652:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8007656:	5cca      	ldrb	r2, [r1, r3]
 8007658:	b10a      	cbz	r2, 800765e <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765a:	3301      	adds	r3, #1
 800765c:	e7f5      	b.n	800764a <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800765e:	2300      	movs	r3, #0
 8007660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007664:	2d06      	cmp	r5, #6
 8007666:	d900      	bls.n	800766a <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007668:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800766a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800766c:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007676:	1d20      	adds	r0, r4, #4
 8007678:	f7ff ff7b 	bl	8007572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800767c:	f104 0018 	add.w	r0, r4, #24
 8007680:	f7ff ff77 	bl	8007572 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007684:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007686:	f1c5 0507 	rsb	r5, r5, #7
 800768a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800768c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800768e:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007692:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007696:	464a      	mov	r2, r9
 8007698:	4641      	mov	r1, r8
 800769a:	4630      	mov	r0, r6
 800769c:	f000 fb56 	bl	8007d4c <pxPortInitialiseStack>
 80076a0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80076a2:	b107      	cbz	r7, 80076a6 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076a4:	603c      	str	r4, [r7, #0]
}
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080076ac <prvInitialiseTaskLists>:
{
 80076ac:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ae:	2400      	movs	r4, #0
 80076b0:	e007      	b.n	80076c2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80076b6:	0093      	lsls	r3, r2, #2
 80076b8:	480e      	ldr	r0, [pc, #56]	; (80076f4 <prvInitialiseTaskLists+0x48>)
 80076ba:	4418      	add	r0, r3
 80076bc:	f7ff ff4e 	bl	800755c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076c0:	3401      	adds	r4, #1
 80076c2:	2c06      	cmp	r4, #6
 80076c4:	d9f5      	bls.n	80076b2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80076c6:	4d0c      	ldr	r5, [pc, #48]	; (80076f8 <prvInitialiseTaskLists+0x4c>)
 80076c8:	4628      	mov	r0, r5
 80076ca:	f7ff ff47 	bl	800755c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076ce:	4c0b      	ldr	r4, [pc, #44]	; (80076fc <prvInitialiseTaskLists+0x50>)
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff ff43 	bl	800755c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076d6:	480a      	ldr	r0, [pc, #40]	; (8007700 <prvInitialiseTaskLists+0x54>)
 80076d8:	f7ff ff40 	bl	800755c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80076dc:	4809      	ldr	r0, [pc, #36]	; (8007704 <prvInitialiseTaskLists+0x58>)
 80076de:	f7ff ff3d 	bl	800755c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80076e2:	4809      	ldr	r0, [pc, #36]	; (8007708 <prvInitialiseTaskLists+0x5c>)
 80076e4:	f7ff ff3a 	bl	800755c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80076e8:	4b08      	ldr	r3, [pc, #32]	; (800770c <prvInitialiseTaskLists+0x60>)
 80076ea:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <prvInitialiseTaskLists+0x64>)
 80076ee:	601c      	str	r4, [r3, #0]
}
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	200004ac 	.word	0x200004ac
 80076f8:	20000550 	.word	0x20000550
 80076fc:	20000564 	.word	0x20000564
 8007700:	20000584 	.word	0x20000584
 8007704:	200005b0 	.word	0x200005b0
 8007708:	2000059c 	.word	0x2000059c
 800770c:	200004a4 	.word	0x200004a4
 8007710:	200004a8 	.word	0x200004a8

08007714 <prvAddNewTaskToReadyList>:
{
 8007714:	b510      	push	{r4, lr}
 8007716:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007718:	f000 fb44 	bl	8007da4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800771c:	4a20      	ldr	r2, [pc, #128]	; (80077a0 <prvAddNewTaskToReadyList+0x8c>)
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007724:	4b1f      	ldr	r3, [pc, #124]	; (80077a4 <prvAddNewTaskToReadyList+0x90>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	b15b      	cbz	r3, 8007742 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800772a:	4b1f      	ldr	r3, [pc, #124]	; (80077a8 <prvAddNewTaskToReadyList+0x94>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b96b      	cbnz	r3, 800774c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007730:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <prvAddNewTaskToReadyList+0x90>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d807      	bhi.n	800774c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800773c:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <prvAddNewTaskToReadyList+0x90>)
 800773e:	601c      	str	r4, [r3, #0]
 8007740:	e004      	b.n	800774c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007742:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <prvAddNewTaskToReadyList+0x90>)
 8007744:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d026      	beq.n	800779a <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 800774c:	4a17      	ldr	r2, [pc, #92]	; (80077ac <prvAddNewTaskToReadyList+0x98>)
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007754:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007756:	2201      	movs	r2, #1
 8007758:	409a      	lsls	r2, r3
 800775a:	4915      	ldr	r1, [pc, #84]	; (80077b0 <prvAddNewTaskToReadyList+0x9c>)
 800775c:	6808      	ldr	r0, [r1, #0]
 800775e:	4302      	orrs	r2, r0
 8007760:	600a      	str	r2, [r1, #0]
 8007762:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007766:	009a      	lsls	r2, r3, #2
 8007768:	1d21      	adds	r1, r4, #4
 800776a:	4812      	ldr	r0, [pc, #72]	; (80077b4 <prvAddNewTaskToReadyList+0xa0>)
 800776c:	4410      	add	r0, r2
 800776e:	f7ff ff03 	bl	8007578 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007772:	f000 fb3d 	bl	8007df0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007776:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <prvAddNewTaskToReadyList+0x94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	b16b      	cbz	r3, 8007798 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <prvAddNewTaskToReadyList+0x90>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007784:	429a      	cmp	r2, r3
 8007786:	d207      	bcs.n	8007798 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <prvAddNewTaskToReadyList+0xa4>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
}
 8007798:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800779a:	f7ff ff87 	bl	80076ac <prvInitialiseTaskLists>
 800779e:	e7d5      	b.n	800774c <prvAddNewTaskToReadyList+0x38>
 80077a0:	20000538 	.word	0x20000538
 80077a4:	200004a0 	.word	0x200004a0
 80077a8:	20000598 	.word	0x20000598
 80077ac:	20000548 	.word	0x20000548
 80077b0:	2000054c 	.word	0x2000054c
 80077b4:	200004ac 	.word	0x200004ac
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077bc:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <prvCheckTasksWaitingTermination+0x40>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	b1d3      	cbz	r3, 80077f8 <prvCheckTasksWaitingTermination+0x3c>
{
 80077c2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80077c4:	f000 faee 	bl	8007da4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <prvCheckTasksWaitingTermination+0x44>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ce:	1d20      	adds	r0, r4, #4
 80077d0:	f7ff fef8 	bl	80075c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077d4:	4a0b      	ldr	r2, [pc, #44]	; (8007804 <prvCheckTasksWaitingTermination+0x48>)
 80077d6:	6813      	ldr	r3, [r2, #0]
 80077d8:	3b01      	subs	r3, #1
 80077da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077dc:	4a07      	ldr	r2, [pc, #28]	; (80077fc <prvCheckTasksWaitingTermination+0x40>)
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80077e4:	f000 fb04 	bl	8007df0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7ff ff15 	bl	8007618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <prvCheckTasksWaitingTermination+0x40>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <prvCheckTasksWaitingTermination+0x8>
}
 80077f6:	bd10      	pop	{r4, pc}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	2000053c 	.word	0x2000053c
 8007800:	200005b0 	.word	0x200005b0
 8007804:	20000538 	.word	0x20000538

08007808 <prvIdleTask>:
{
 8007808:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800780a:	f7ff ffd7 	bl	80077bc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvIdleTask+0x20>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d9f9      	bls.n	800780a <prvIdleTask+0x2>
				taskYIELD();
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <prvIdleTask+0x24>)
 8007818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	e7f0      	b.n	800780a <prvIdleTask+0x2>
 8007828:	200004ac 	.word	0x200004ac
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007836:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <prvAddCurrentTaskToDelayedList+0x84>)
 8007838:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800783a:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	3004      	adds	r0, #4
 8007840:	f7ff fec0 	bl	80075c4 <uxListRemove>
 8007844:	b950      	cbnz	r0, 800785c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007846:	4b1c      	ldr	r3, [pc, #112]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784c:	2301      	movs	r3, #1
 800784e:	fa03 f202 	lsl.w	r2, r3, r2
 8007852:	491a      	ldr	r1, [pc, #104]	; (80078bc <prvAddCurrentTaskToDelayedList+0x8c>)
 8007854:	680b      	ldr	r3, [r1, #0]
 8007856:	ea23 0302 	bic.w	r3, r3, r2
 800785a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800785c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007860:	bf14      	ite	ne
 8007862:	2300      	movne	r3, #0
 8007864:	2301      	moveq	r3, #1
 8007866:	2e00      	cmp	r6, #0
 8007868:	bf08      	it	eq
 800786a:	2300      	moveq	r3, #0
 800786c:	b99b      	cbnz	r3, 8007896 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800786e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007870:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007876:	42a5      	cmp	r5, r4
 8007878:	d814      	bhi.n	80078a4 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800787a:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 8007880:	6819      	ldr	r1, [r3, #0]
 8007882:	3104      	adds	r1, #4
 8007884:	f7ff fe84 	bl	8007590 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007888:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	42a3      	cmp	r3, r4
 800788e:	d910      	bls.n	80078b2 <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007892:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007894:	e00d      	b.n	80078b2 <prvAddCurrentTaskToDelayedList+0x82>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 8007898:	6819      	ldr	r1, [r3, #0]
 800789a:	3104      	adds	r1, #4
 800789c:	480a      	ldr	r0, [pc, #40]	; (80078c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800789e:	f7ff fe6b 	bl	8007578 <vListInsertEnd>
 80078a2:	e006      	b.n	80078b2 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a4:	4b09      	ldr	r3, [pc, #36]	; (80078cc <prvAddCurrentTaskToDelayedList+0x9c>)
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x88>)
 80078aa:	6819      	ldr	r1, [r3, #0]
 80078ac:	3104      	adds	r1, #4
 80078ae:	f7ff fe6f 	bl	8007590 <vListInsert>
}
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	200005c4 	.word	0x200005c4
 80078b8:	200004a0 	.word	0x200004a0
 80078bc:	2000054c 	.word	0x2000054c
 80078c0:	200004a4 	.word	0x200004a4
 80078c4:	2000057c 	.word	0x2000057c
 80078c8:	2000059c 	.word	0x2000059c
 80078cc:	200004a8 	.word	0x200004a8

080078d0 <xTaskCreate>:
	{
 80078d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078d4:	b085      	sub	sp, #20
 80078d6:	4607      	mov	r7, r0
 80078d8:	4688      	mov	r8, r1
 80078da:	4615      	mov	r5, r2
 80078dc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078de:	0090      	lsls	r0, r2, #2
 80078e0:	f000 fbca 	bl	8008078 <pvPortMalloc>
			if( pxStack != NULL )
 80078e4:	b1f8      	cbz	r0, 8007926 <xTaskCreate+0x56>
 80078e6:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80078e8:	2054      	movs	r0, #84	; 0x54
 80078ea:	f000 fbc5 	bl	8008078 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80078ee:	4604      	mov	r4, r0
 80078f0:	b1a8      	cbz	r0, 800791e <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80078f2:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80078f4:	b1d4      	cbz	r4, 800792c <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f6:	2300      	movs	r3, #0
 80078f8:	9303      	str	r3, [sp, #12]
 80078fa:	9402      	str	r4, [sp, #8]
 80078fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	464b      	mov	r3, r9
 8007906:	462a      	mov	r2, r5
 8007908:	4641      	mov	r1, r8
 800790a:	4638      	mov	r0, r7
 800790c:	f7ff fe8d 	bl	800762a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff feff 	bl	8007714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007916:	2001      	movs	r0, #1
	}
 8007918:	b005      	add	sp, #20
 800791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800791e:	4630      	mov	r0, r6
 8007920:	f000 fc34 	bl	800818c <vPortFree>
 8007924:	e7e6      	b.n	80078f4 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800792a:	e7f5      	b.n	8007918 <xTaskCreate+0x48>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007930:	e7f2      	b.n	8007918 <xTaskCreate+0x48>
	...

08007934 <vTaskStartScheduler>:
{
 8007934:	b500      	push	{lr}
 8007936:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8007938:	4b19      	ldr	r3, [pc, #100]	; (80079a0 <vTaskStartScheduler+0x6c>)
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	2300      	movs	r3, #0
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2280      	movs	r2, #128	; 0x80
 8007942:	4918      	ldr	r1, [pc, #96]	; (80079a4 <vTaskStartScheduler+0x70>)
 8007944:	4818      	ldr	r0, [pc, #96]	; (80079a8 <vTaskStartScheduler+0x74>)
 8007946:	f7ff ffc3 	bl	80078d0 <xTaskCreate>
	if( xReturn == pdPASS )
 800794a:	2801      	cmp	r0, #1
 800794c:	d005      	beq.n	800795a <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800794e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007952:	d019      	beq.n	8007988 <vTaskStartScheduler+0x54>
}
 8007954:	b003      	add	sp, #12
 8007956:	f85d fb04 	ldr.w	pc, [sp], #4

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	b672      	cpsid	i
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <vTaskStartScheduler+0x78>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <vTaskStartScheduler+0x7c>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <vTaskStartScheduler+0x80>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007982:	f000 fab3 	bl	8007eec <xPortStartScheduler>
 8007986:	e7e5      	b.n	8007954 <vTaskStartScheduler+0x20>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	e7fe      	b.n	800799c <vTaskStartScheduler+0x68>
 800799e:	bf00      	nop
 80079a0:	20000578 	.word	0x20000578
 80079a4:	0800fa24 	.word	0x0800fa24
 80079a8:	08007809 	.word	0x08007809
 80079ac:	2000057c 	.word	0x2000057c
 80079b0:	20000598 	.word	0x20000598
 80079b4:	200005c4 	.word	0x200005c4

080079b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80079b8:	4a02      	ldr	r2, [pc, #8]	; (80079c4 <vTaskSuspendAll+0xc>)
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	6013      	str	r3, [r2, #0]
}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000544 	.word	0x20000544

080079c8 <xTaskIncrementTick>:
{
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ca:	4b3b      	ldr	r3, [pc, #236]	; (8007ab8 <xTaskIncrementTick+0xf0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d166      	bne.n	8007aa0 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079d2:	4b3a      	ldr	r3, [pc, #232]	; (8007abc <xTaskIncrementTick+0xf4>)
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80079d8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079da:	b9d5      	cbnz	r5, 8007a12 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80079dc:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <xTaskIncrementTick+0xf8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	b153      	cbz	r3, 80079fa <xTaskIncrementTick+0x32>
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	b672      	cpsid	i
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	b662      	cpsie	i
 80079f8:	e7fe      	b.n	80079f8 <xTaskIncrementTick+0x30>
 80079fa:	4a31      	ldr	r2, [pc, #196]	; (8007ac0 <xTaskIncrementTick+0xf8>)
 80079fc:	6811      	ldr	r1, [r2, #0]
 80079fe:	4b31      	ldr	r3, [pc, #196]	; (8007ac4 <xTaskIncrementTick+0xfc>)
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	6010      	str	r0, [r2, #0]
 8007a04:	6019      	str	r1, [r3, #0]
 8007a06:	4a30      	ldr	r2, [pc, #192]	; (8007ac8 <xTaskIncrementTick+0x100>)
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	f7ff fded 	bl	80075ec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a12:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <xTaskIncrementTick+0x104>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	42ab      	cmp	r3, r5
 8007a18:	d938      	bls.n	8007a8c <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007a1a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <xTaskIncrementTick+0x108>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a26:	009a      	lsls	r2, r3, #2
 8007a28:	4b2a      	ldr	r3, [pc, #168]	; (8007ad4 <xTaskIncrementTick+0x10c>)
 8007a2a:	589b      	ldr	r3, [r3, r2]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d93c      	bls.n	8007aaa <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8007a30:	2401      	movs	r4, #1
 8007a32:	e03a      	b.n	8007aaa <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8007a34:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a36:	4b22      	ldr	r3, [pc, #136]	; (8007ac0 <xTaskIncrementTick+0xf8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	b343      	cbz	r3, 8007a90 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a3e:	4b20      	ldr	r3, [pc, #128]	; (8007ac0 <xTaskIncrementTick+0xf8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a46:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007a48:	429d      	cmp	r5, r3
 8007a4a:	d326      	bcc.n	8007a9a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a4c:	1d37      	adds	r7, r6, #4
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7ff fdb8 	bl	80075c4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007a56:	b11b      	cbz	r3, 8007a60 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a58:	f106 0018 	add.w	r0, r6, #24
 8007a5c:	f7ff fdb2 	bl	80075c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a60:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007a62:	2201      	movs	r2, #1
 8007a64:	409a      	lsls	r2, r3
 8007a66:	491c      	ldr	r1, [pc, #112]	; (8007ad8 <xTaskIncrementTick+0x110>)
 8007a68:	6808      	ldr	r0, [r1, #0]
 8007a6a:	4302      	orrs	r2, r0
 8007a6c:	600a      	str	r2, [r1, #0]
 8007a6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a72:	009a      	lsls	r2, r3, #2
 8007a74:	4639      	mov	r1, r7
 8007a76:	4817      	ldr	r0, [pc, #92]	; (8007ad4 <xTaskIncrementTick+0x10c>)
 8007a78:	4410      	add	r0, r2
 8007a7a:	f7ff fd7d 	bl	8007578 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a7e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007a80:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <xTaskIncrementTick+0x108>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d2d4      	bcs.n	8007a34 <xTaskIncrementTick+0x6c>
 8007a8a:	e7d4      	b.n	8007a36 <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 8007a8c:	2400      	movs	r4, #0
 8007a8e:	e7d2      	b.n	8007a36 <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <xTaskIncrementTick+0x104>)
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a96:	601a      	str	r2, [r3, #0]
					break;
 8007a98:	e7c0      	b.n	8007a1c <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <xTaskIncrementTick+0x104>)
 8007a9c:	6013      	str	r3, [r2, #0]
						break;
 8007a9e:	e7bd      	b.n	8007a1c <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007aa0:	4a0e      	ldr	r2, [pc, #56]	; (8007adc <xTaskIncrementTick+0x114>)
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007aa8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <xTaskIncrementTick+0x118>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 8007ab0:	2401      	movs	r4, #1
}
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000544 	.word	0x20000544
 8007abc:	200005c4 	.word	0x200005c4
 8007ac0:	200004a4 	.word	0x200004a4
 8007ac4:	200004a8 	.word	0x200004a8
 8007ac8:	20000580 	.word	0x20000580
 8007acc:	2000057c 	.word	0x2000057c
 8007ad0:	200004a0 	.word	0x200004a0
 8007ad4:	200004ac 	.word	0x200004ac
 8007ad8:	2000054c 	.word	0x2000054c
 8007adc:	20000540 	.word	0x20000540
 8007ae0:	200005c8 	.word	0x200005c8

08007ae4 <xTaskResumeAll>:
{
 8007ae4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007ae6:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <xTaskResumeAll+0xd4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b953      	cbnz	r3, 8007b02 <xTaskResumeAll+0x1e>
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	b672      	cpsid	i
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	b662      	cpsie	i
 8007b00:	e7fe      	b.n	8007b00 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007b02:	f000 f94f 	bl	8007da4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007b06:	4b2c      	ldr	r3, [pc, #176]	; (8007bb8 <xTaskResumeAll+0xd4>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	3a01      	subs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d14d      	bne.n	8007bb0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <xTaskResumeAll+0xd8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	b923      	cbnz	r3, 8007b24 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8007b1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007b1c:	f000 f968 	bl	8007df0 <vPortExitCritical>
}
 8007b20:	4620      	mov	r0, r4
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8007b24:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b26:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <xTaskResumeAll+0xdc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	b31b      	cbz	r3, 8007b74 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007b2c:	4b24      	ldr	r3, [pc, #144]	; (8007bc0 <xTaskResumeAll+0xdc>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b32:	f104 0018 	add.w	r0, r4, #24
 8007b36:	f7ff fd45 	bl	80075c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3a:	1d25      	adds	r5, r4, #4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff fd41 	bl	80075c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b44:	2201      	movs	r2, #1
 8007b46:	409a      	lsls	r2, r3
 8007b48:	491e      	ldr	r1, [pc, #120]	; (8007bc4 <xTaskResumeAll+0xe0>)
 8007b4a:	6808      	ldr	r0, [r1, #0]
 8007b4c:	4302      	orrs	r2, r0
 8007b4e:	600a      	str	r2, [r1, #0]
 8007b50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b54:	009a      	lsls	r2, r3, #2
 8007b56:	4629      	mov	r1, r5
 8007b58:	481b      	ldr	r0, [pc, #108]	; (8007bc8 <xTaskResumeAll+0xe4>)
 8007b5a:	4410      	add	r0, r2
 8007b5c:	f7ff fd0c 	bl	8007578 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007b62:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <xTaskResumeAll+0xe8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d3dc      	bcc.n	8007b26 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8007b6c:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <xTaskResumeAll+0xec>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e7d8      	b.n	8007b26 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8007b74:	b10c      	cbz	r4, 8007b7a <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8007b76:	f7ff fd39 	bl	80075ec <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <xTaskResumeAll+0xf0>)
 8007b7c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b7e:	b154      	cbz	r4, 8007b96 <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
 8007b80:	f7ff ff22 	bl	80079c8 <xTaskIncrementTick>
 8007b84:	b110      	cbz	r0, 8007b8c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007b86:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <xTaskResumeAll+0xec>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	d1f7      	bne.n	8007b80 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8007b90:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <xTaskResumeAll+0xf0>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <xTaskResumeAll+0xec>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	b15b      	cbz	r3, 8007bb4 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <xTaskResumeAll+0xf4>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007bac:	2401      	movs	r4, #1
 8007bae:	e7b5      	b.n	8007b1c <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8007bb0:	2400      	movs	r4, #0
 8007bb2:	e7b3      	b.n	8007b1c <xTaskResumeAll+0x38>
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	e7b1      	b.n	8007b1c <xTaskResumeAll+0x38>
 8007bb8:	20000544 	.word	0x20000544
 8007bbc:	20000538 	.word	0x20000538
 8007bc0:	20000584 	.word	0x20000584
 8007bc4:	2000054c 	.word	0x2000054c
 8007bc8:	200004ac 	.word	0x200004ac
 8007bcc:	200004a0 	.word	0x200004a0
 8007bd0:	200005c8 	.word	0x200005c8
 8007bd4:	20000540 	.word	0x20000540
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vTaskDelay>:
	{
 8007bdc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bde:	b1b8      	cbz	r0, 8007c10 <vTaskDelay+0x34>
 8007be0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <vTaskDelay+0x48>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	b153      	cbz	r3, 8007bfe <vTaskDelay+0x22>
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	b672      	cpsid	i
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	b662      	cpsie	i
 8007bfc:	e7fe      	b.n	8007bfc <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007bfe:	f7ff fedb 	bl	80079b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c02:	2100      	movs	r1, #0
 8007c04:	4620      	mov	r0, r4
 8007c06:	f7ff fe13 	bl	8007830 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007c0a:	f7ff ff6b 	bl	8007ae4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007c0e:	b938      	cbnz	r0, 8007c20 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <vTaskDelay+0x4c>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
	}
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	20000544 	.word	0x20000544
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c2c:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <vTaskSwitchContext+0x88>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	b11b      	cbz	r3, 8007c3a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007c32:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <vTaskSwitchContext+0x8c>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007c3a:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <vTaskSwitchContext+0x8c>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c40:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <vTaskSwitchContext+0x90>)
 8007c42:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c44:	fab3 f383 	clz	r3, r3
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f1c3 031f 	rsb	r3, r3, #31
 8007c4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007c52:	008a      	lsls	r2, r1, #2
 8007c54:	491a      	ldr	r1, [pc, #104]	; (8007cc0 <vTaskSwitchContext+0x94>)
 8007c56:	588a      	ldr	r2, [r1, r2]
 8007c58:	b952      	cbnz	r2, 8007c70 <vTaskSwitchContext+0x44>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	b672      	cpsid	i
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	b662      	cpsie	i
 8007c6e:	e7fe      	b.n	8007c6e <vTaskSwitchContext+0x42>
{
 8007c70:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c72:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <vTaskSwitchContext+0x94>)
 8007c74:	009a      	lsls	r2, r3, #2
 8007c76:	18d4      	adds	r4, r2, r3
 8007c78:	00a1      	lsls	r1, r4, #2
 8007c7a:	4401      	add	r1, r0
 8007c7c:	684c      	ldr	r4, [r1, #4]
 8007c7e:	6864      	ldr	r4, [r4, #4]
 8007c80:	604c      	str	r4, [r1, #4]
 8007c82:	441a      	add	r2, r3
 8007c84:	0091      	lsls	r1, r2, #2
 8007c86:	3108      	adds	r1, #8
 8007c88:	4408      	add	r0, r1
 8007c8a:	4284      	cmp	r4, r0
 8007c8c:	d00b      	beq.n	8007ca6 <vTaskSwitchContext+0x7a>
 8007c8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c92:	009a      	lsls	r2, r3, #2
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <vTaskSwitchContext+0x94>)
 8007c96:	4413      	add	r3, r2
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <vTaskSwitchContext+0x98>)
 8007c9e:	601a      	str	r2, [r3, #0]
}
 8007ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ca6:	6861      	ldr	r1, [r4, #4]
 8007ca8:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <vTaskSwitchContext+0x94>)
 8007caa:	2214      	movs	r2, #20
 8007cac:	fb02 0203 	mla	r2, r2, r3, r0
 8007cb0:	6051      	str	r1, [r2, #4]
 8007cb2:	e7ec      	b.n	8007c8e <vTaskSwitchContext+0x62>
 8007cb4:	20000544 	.word	0x20000544
 8007cb8:	200005c8 	.word	0x200005c8
 8007cbc:	2000054c 	.word	0x2000054c
 8007cc0:	200004ac 	.word	0x200004ac
 8007cc4:	200004a0 	.word	0x200004a0

08007cc8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cc8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <prvTaskExitError+0x44>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd6:	d00a      	beq.n	8007cee <prvTaskExitError+0x26>
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	e7fe      	b.n	8007cec <prvTaskExitError+0x24>
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	b672      	cpsid	i
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0fc      	beq.n	8007d02 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d08:	b002      	add	sp, #8
 8007d0a:	4770      	bx	lr
 8007d0c:	20000040 	.word	0x20000040

08007d10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d10:	4808      	ldr	r0, [pc, #32]	; (8007d34 <prvPortStartFirstTask+0x24>)
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	f380 8808 	msr	MSP, r0
 8007d1a:	f04f 0000 	mov.w	r0, #0
 8007d1e:	f380 8814 	msr	CONTROL, r0
 8007d22:	b662      	cpsie	i
 8007d24:	b661      	cpsie	f
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	df00      	svc	0
 8007d30:	bf00      	nop
 8007d32:	0000      	.short	0x0000
 8007d34:	e000ed08 	.word	0xe000ed08

08007d38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d48 <vPortEnableVFP+0x10>
 8007d3c:	6801      	ldr	r1, [r0, #0]
 8007d3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d42:	6001      	str	r1, [r0, #0]
 8007d44:	4770      	bx	lr
 8007d46:	0000      	.short	0x0000
 8007d48:	e000ed88 	.word	0xe000ed88

08007d4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d54:	f021 0101 	bic.w	r1, r1, #1
 8007d58:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <pxPortInitialiseStack+0x28>)
 8007d5e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d62:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d66:	f06f 0302 	mvn.w	r3, #2
 8007d6a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007d6e:	3844      	subs	r0, #68	; 0x44
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	08007cc9 	.word	0x08007cc9
	...

08007d80 <SVC_Handler>:
	__asm volatile (
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <pxCurrentTCBConst2>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	6808      	ldr	r0, [r1, #0]
 8007d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	f380 8809 	msr	PSP, r0
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	4770      	bx	lr
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst2>:
 8007da0:	200004a0 	.word	0x200004a0

08007da4 <vPortEnterCritical>:
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	b672      	cpsid	i
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	b662      	cpsie	i
	uxCriticalNesting++;
 8007db8:	4a0b      	ldr	r2, [pc, #44]	; (8007de8 <vPortEnterCritical+0x44>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d000      	beq.n	8007dc6 <vPortEnterCritical+0x22>
}
 8007dc4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <vPortEnterCritical+0x48>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dce:	d0f9      	beq.n	8007dc4 <vPortEnterCritical+0x20>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	e7fe      	b.n	8007de4 <vPortEnterCritical+0x40>
 8007de6:	bf00      	nop
 8007de8:	20000040 	.word	0x20000040
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <vPortExitCritical+0x2c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b953      	cbnz	r3, 8007e0c <vPortExitCritical+0x1c>
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	b672      	cpsid	i
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	b662      	cpsie	i
 8007e0a:	e7fe      	b.n	8007e0a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	4a03      	ldr	r2, [pc, #12]	; (8007e1c <vPortExitCritical+0x2c>)
 8007e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e12:	b90b      	cbnz	r3, 8007e18 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e14:	f383 8811 	msr	BASEPRI, r3
}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000040 	.word	0x20000040

08007e20 <PendSV_Handler>:
	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	f7ff feea 	bl	8007c2c <vTaskSwitchContext>
 8007e58:	f04f 0000 	mov.w	r0, #0
 8007e5c:	f380 8811 	msr	BASEPRI, r0
 8007e60:	bc09      	pop	{r0, r3}
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f01e 0f10 	tst.w	lr, #16
 8007e6e:	bf08      	it	eq
 8007e70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e74:	f380 8809 	msr	PSP, r0
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <pxCurrentTCBConst>:
 8007e80:	200004a0 	.word	0x200004a0

08007e84 <SysTick_Handler>:
{
 8007e84:	b508      	push	{r3, lr}
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007e9a:	f7ff fd95 	bl	80079c8 <xTaskIncrementTick>
 8007e9e:	b118      	cbz	r0, 8007ea8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <SysTick_Handler+0x2c>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f383 8811 	msr	BASEPRI, r3
}
 8007eae:	bd08      	pop	{r3, pc}
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007eb4:	4a08      	ldr	r2, [pc, #32]	; (8007ed8 <vPortSetupTimerInterrupt+0x24>)
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007eba:	4908      	ldr	r1, [pc, #32]	; (8007edc <vPortSetupTimerInterrupt+0x28>)
 8007ebc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <vPortSetupTimerInterrupt+0x2c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4908      	ldr	r1, [pc, #32]	; (8007ee4 <vPortSetupTimerInterrupt+0x30>)
 8007ec4:	fba1 1303 	umull	r1, r3, r1, r3
 8007ec8:	099b      	lsrs	r3, r3, #6
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4906      	ldr	r1, [pc, #24]	; (8007ee8 <vPortSetupTimerInterrupt+0x34>)
 8007ece:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ed0:	2307      	movs	r3, #7
 8007ed2:	6013      	str	r3, [r2, #0]
}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e010 	.word	0xe000e010
 8007edc:	e000e018 	.word	0xe000e018
 8007ee0:	20000054 	.word	0x20000054
 8007ee4:	10624dd3 	.word	0x10624dd3
 8007ee8:	e000e014 	.word	0xe000e014

08007eec <xPortStartScheduler>:
{
 8007eec:	b510      	push	{r4, lr}
 8007eee:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ef0:	4b2c      	ldr	r3, [pc, #176]	; (8007fa4 <xPortStartScheduler+0xb8>)
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ef8:	22ff      	movs	r2, #255	; 0xff
 8007efa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f0c:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <xPortStartScheduler+0xbc>)
 8007f0e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f10:	4b26      	ldr	r3, [pc, #152]	; (8007fac <xPortStartScheduler+0xc0>)
 8007f12:	2207      	movs	r2, #7
 8007f14:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f16:	e009      	b.n	8007f2c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007f18:	4a24      	ldr	r2, [pc, #144]	; (8007fac <xPortStartScheduler+0xc0>)
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f34:	d1f0      	bne.n	8007f18 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f36:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <xPortStartScheduler+0xc0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d00a      	beq.n	8007f54 <xPortStartScheduler+0x68>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	b672      	cpsid	i
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	b662      	cpsie	i
 8007f52:	e7fe      	b.n	8007f52 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f54:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f5a:	4a14      	ldr	r2, [pc, #80]	; (8007fac <xPortStartScheduler+0xc0>)
 8007f5c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <xPortStartScheduler+0xb8>)
 8007f64:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <xPortStartScheduler+0xc4>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007f6e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007f76:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007f78:	f7ff ff9c 	bl	8007eb4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007f7c:	2400      	movs	r4, #0
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <xPortStartScheduler+0xc8>)
 8007f80:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007f82:	f7ff fed9 	bl	8007d38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f86:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <xPortStartScheduler+0xcc>)
 8007f88:	6813      	ldr	r3, [r2, #0]
 8007f8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007f90:	f7ff febe 	bl	8007d10 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007f94:	f7ff fe4a 	bl	8007c2c <vTaskSwitchContext>
	prvTaskExitError();
 8007f98:	f7ff fe96 	bl	8007cc8 <prvTaskExitError>
}
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	b002      	add	sp, #8
 8007fa0:	bd10      	pop	{r4, pc}
 8007fa2:	bf00      	nop
 8007fa4:	e000e400 	.word	0xe000e400
 8007fa8:	200005cc 	.word	0x200005cc
 8007fac:	200005d0 	.word	0x200005d0
 8007fb0:	e000ed20 	.word	0xe000ed20
 8007fb4:	20000040 	.word	0x20000040
 8007fb8:	e000ef34 	.word	0xe000ef34

08007fbc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fbc:	4a12      	ldr	r2, [pc, #72]	; (8008008 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fbe:	f012 0f07 	tst.w	r2, #7
 8007fc2:	d01e      	beq.n	8008002 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fc4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fca:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8007fce:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fd0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fd2:	480e      	ldr	r0, [pc, #56]	; (800800c <prvHeapInit+0x50>)
 8007fd4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fda:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007fdc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fde:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007fe2:	480b      	ldr	r0, [pc, #44]	; (8008010 <prvHeapInit+0x54>)
 8007fe4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007fe6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fe8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fea:	1a99      	subs	r1, r3, r2
 8007fec:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fee:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff0:	4b08      	ldr	r3, [pc, #32]	; (8008014 <prvHeapInit+0x58>)
 8007ff2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff4:	4b08      	ldr	r3, [pc, #32]	; (8008018 <prvHeapInit+0x5c>)
 8007ff6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <prvHeapInit+0x60>)
 8007ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ffe:	601a      	str	r2, [r3, #0]
}
 8008000:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008002:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008006:	e7e4      	b.n	8007fd2 <prvHeapInit+0x16>
 8008008:	200005d8 	.word	0x200005d8
 800800c:	200041e4 	.word	0x200041e4
 8008010:	200005d4 	.word	0x200005d4
 8008014:	200041e0 	.word	0x200041e0
 8008018:	200041dc 	.word	0x200041dc
 800801c:	200041d8 	.word	0x200041d8

08008020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008020:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <prvInsertBlockIntoFreeList+0x50>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4282      	cmp	r2, r0
 8008028:	d31b      	bcc.n	8008062 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800802a:	6859      	ldr	r1, [r3, #4]
 800802c:	185c      	adds	r4, r3, r1
 800802e:	4284      	cmp	r4, r0
 8008030:	d103      	bne.n	800803a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008032:	6840      	ldr	r0, [r0, #4]
 8008034:	4401      	add	r1, r0
 8008036:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008038:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800803a:	6841      	ldr	r1, [r0, #4]
 800803c:	1844      	adds	r4, r0, r1
 800803e:	42a2      	cmp	r2, r4
 8008040:	d113      	bne.n	800806a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008042:	4c0c      	ldr	r4, [pc, #48]	; (8008074 <prvInsertBlockIntoFreeList+0x54>)
 8008044:	6824      	ldr	r4, [r4, #0]
 8008046:	42a2      	cmp	r2, r4
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	6852      	ldr	r2, [r2, #4]
 800804c:	4411      	add	r1, r2
 800804e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008056:	4298      	cmp	r0, r3
 8008058:	d000      	beq.n	800805c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800805a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800805c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008060:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008062:	4613      	mov	r3, r2
 8008064:	e7de      	b.n	8008024 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	6004      	str	r4, [r0, #0]
 8008068:	e7f5      	b.n	8008056 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800806a:	6002      	str	r2, [r0, #0]
 800806c:	e7f3      	b.n	8008056 <prvInsertBlockIntoFreeList+0x36>
 800806e:	bf00      	nop
 8008070:	200041e4 	.word	0x200041e4
 8008074:	200005d4 	.word	0x200005d4

08008078 <pvPortMalloc>:
{
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800807c:	f7ff fc9c 	bl	80079b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008080:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <pvPortMalloc+0x100>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	b1cb      	cbz	r3, 80080ba <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008086:	4b3d      	ldr	r3, [pc, #244]	; (800817c <pvPortMalloc+0x104>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	421c      	tst	r4, r3
 800808c:	d169      	bne.n	8008162 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800808e:	b1bc      	cbz	r4, 80080c0 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8008090:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008092:	f014 0f07 	tst.w	r4, #7
 8008096:	d013      	beq.n	80080c0 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008098:	f024 0407 	bic.w	r4, r4, #7
 800809c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800809e:	f004 0307 	and.w	r3, r4, #7
 80080a2:	b16b      	cbz	r3, 80080c0 <pvPortMalloc+0x48>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	b672      	cpsid	i
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	b662      	cpsie	i
 80080b8:	e7fe      	b.n	80080b8 <pvPortMalloc+0x40>
			prvHeapInit();
 80080ba:	f7ff ff7f 	bl	8007fbc <prvHeapInit>
 80080be:	e7e2      	b.n	8008086 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080c0:	2c00      	cmp	r4, #0
 80080c2:	d050      	beq.n	8008166 <pvPortMalloc+0xee>
 80080c4:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <pvPortMalloc+0x108>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d34e      	bcc.n	800816a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 80080cc:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <pvPortMalloc+0x10c>)
 80080ce:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080d0:	e001      	b.n	80080d6 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 80080d2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80080d4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080d6:	686a      	ldr	r2, [r5, #4]
 80080d8:	42a2      	cmp	r2, r4
 80080da:	d202      	bcs.n	80080e2 <pvPortMalloc+0x6a>
 80080dc:	682a      	ldr	r2, [r5, #0]
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1f7      	bne.n	80080d2 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 80080e2:	4a25      	ldr	r2, [pc, #148]	; (8008178 <pvPortMalloc+0x100>)
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	42aa      	cmp	r2, r5
 80080e8:	d041      	beq.n	800816e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080ea:	681e      	ldr	r6, [r3, #0]
 80080ec:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080ee:	682a      	ldr	r2, [r5, #0]
 80080f0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f2:	686b      	ldr	r3, [r5, #4]
 80080f4:	1b1b      	subs	r3, r3, r4
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d912      	bls.n	8008120 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080fa:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fc:	f010 0f07 	tst.w	r0, #7
 8008100:	d00a      	beq.n	8008118 <pvPortMalloc+0xa0>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	e7fe      	b.n	8008116 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008118:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800811a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800811c:	f7ff ff80 	bl	8008020 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008120:	686a      	ldr	r2, [r5, #4]
 8008122:	4917      	ldr	r1, [pc, #92]	; (8008180 <pvPortMalloc+0x108>)
 8008124:	680b      	ldr	r3, [r1, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800812a:	4917      	ldr	r1, [pc, #92]	; (8008188 <pvPortMalloc+0x110>)
 800812c:	6809      	ldr	r1, [r1, #0]
 800812e:	428b      	cmp	r3, r1
 8008130:	d201      	bcs.n	8008136 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008132:	4915      	ldr	r1, [pc, #84]	; (8008188 <pvPortMalloc+0x110>)
 8008134:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <pvPortMalloc+0x104>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008142:	f7ff fccf 	bl	8007ae4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008146:	f016 0f07 	tst.w	r6, #7
 800814a:	d012      	beq.n	8008172 <pvPortMalloc+0xfa>
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	b672      	cpsid	i
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	b662      	cpsie	i
 8008160:	e7fe      	b.n	8008160 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8008162:	2600      	movs	r6, #0
 8008164:	e7ed      	b.n	8008142 <pvPortMalloc+0xca>
 8008166:	2600      	movs	r6, #0
 8008168:	e7eb      	b.n	8008142 <pvPortMalloc+0xca>
 800816a:	2600      	movs	r6, #0
 800816c:	e7e9      	b.n	8008142 <pvPortMalloc+0xca>
 800816e:	2600      	movs	r6, #0
 8008170:	e7e7      	b.n	8008142 <pvPortMalloc+0xca>
}
 8008172:	4630      	mov	r0, r6
 8008174:	bd70      	pop	{r4, r5, r6, pc}
 8008176:	bf00      	nop
 8008178:	200005d4 	.word	0x200005d4
 800817c:	200041d8 	.word	0x200041d8
 8008180:	200041dc 	.word	0x200041dc
 8008184:	200041e4 	.word	0x200041e4
 8008188:	200041e0 	.word	0x200041e0

0800818c <vPortFree>:
	if( pv != NULL )
 800818c:	2800      	cmp	r0, #0
 800818e:	d034      	beq.n	80081fa <vPortFree+0x6e>
{
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008194:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008198:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800819c:	4917      	ldr	r1, [pc, #92]	; (80081fc <vPortFree+0x70>)
 800819e:	6809      	ldr	r1, [r1, #0]
 80081a0:	420a      	tst	r2, r1
 80081a2:	d10a      	bne.n	80081ba <vPortFree+0x2e>
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	b672      	cpsid	i
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	b662      	cpsie	i
 80081b8:	e7fe      	b.n	80081b8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081ba:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80081be:	b150      	cbz	r0, 80081d6 <vPortFree+0x4a>
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	e7fe      	b.n	80081d4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081d6:	ea22 0201 	bic.w	r2, r2, r1
 80081da:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80081de:	f7ff fbeb 	bl	80079b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081e2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80081e6:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vPortFree+0x74>)
 80081e8:	6813      	ldr	r3, [r2, #0]
 80081ea:	440b      	add	r3, r1
 80081ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7ff ff16 	bl	8008020 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80081f4:	f7ff fc76 	bl	8007ae4 <xTaskResumeAll>
}
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	4770      	bx	lr
 80081fc:	200041d8 	.word	0x200041d8
 8008200:	200041dc 	.word	0x200041dc

08008204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820a:	2400      	movs	r4, #0
 800820c:	940b      	str	r4, [sp, #44]	; 0x2c
 800820e:	940c      	str	r4, [sp, #48]	; 0x30
 8008210:	940d      	str	r4, [sp, #52]	; 0x34
 8008212:	940e      	str	r4, [sp, #56]	; 0x38
 8008214:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008216:	4b5e      	ldr	r3, [pc, #376]	; (8008390 <MX_GPIO_Init+0x18c>)
 8008218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821a:	f042 0210 	orr.w	r2, r2, #16
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
 8008220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008222:	f002 0210 	and.w	r2, r2, #16
 8008226:	9200      	str	r2, [sp, #0]
 8008228:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800822a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800822c:	f042 0202 	orr.w	r2, r2, #2
 8008230:	631a      	str	r2, [r3, #48]	; 0x30
 8008232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008234:	f002 0202 	and.w	r2, r2, #2
 8008238:	9201      	str	r2, [sp, #4]
 800823a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800823c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
 8008244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008246:	f002 0201 	and.w	r2, r2, #1
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800824e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
 8008256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008258:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800825c:	9203      	str	r2, [sp, #12]
 800825e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008262:	f042 0208 	orr.w	r2, r2, #8
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
 8008268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800826a:	f002 0208 	and.w	r2, r2, #8
 800826e:	9204      	str	r2, [sp, #16]
 8008270:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
 800827a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008280:	9205      	str	r2, [sp, #20]
 8008282:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
 800828c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800828e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008298:	f042 0220 	orr.w	r2, r2, #32
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
 800829e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a0:	f002 0220 	and.w	r2, r2, #32
 80082a4:	9207      	str	r2, [sp, #28]
 80082a6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80082a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
 80082b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80082b6:	9208      	str	r2, [sp, #32]
 80082b8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082bc:	f042 0204 	orr.w	r2, r2, #4
 80082c0:	631a      	str	r2, [r3, #48]	; 0x30
 80082c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c4:	f002 0204 	and.w	r2, r2, #4
 80082c8:	9209      	str	r2, [sp, #36]	; 0x24
 80082ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80082cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082da:	930a      	str	r3, [sp, #40]	; 0x28
 80082dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80082de:	4f2d      	ldr	r7, [pc, #180]	; (8008394 <MX_GPIO_Init+0x190>)
 80082e0:	4622      	mov	r2, r4
 80082e2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80082e6:	4638      	mov	r0, r7
 80082e8:	f7fb f9ab 	bl	8003642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 80082ec:	2310      	movs	r3, #16
 80082ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082f0:	4e29      	ldr	r6, [pc, #164]	; (8008398 <MX_GPIO_Init+0x194>)
 80082f2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082f4:	2501      	movs	r5, #1
 80082f6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 80082f8:	a90b      	add	r1, sp, #44	; 0x2c
 80082fa:	4828      	ldr	r0, [pc, #160]	; (800839c <MX_GPIO_Init+0x198>)
 80082fc:	f7fb f8aa 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8008300:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8008304:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008306:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008308:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800830a:	2303      	movs	r3, #3
 800830c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800830e:	a90b      	add	r1, sp, #44	; 0x2c
 8008310:	4638      	mov	r0, r7
 8008312:	f7fb f89f 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC3_B_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 8008316:	230d      	movs	r3, #13
 8008318:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800831a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800831c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800831e:	a90b      	add	r1, sp, #44	; 0x2c
 8008320:	481f      	ldr	r0, [pc, #124]	; (80083a0 <MX_GPIO_Init+0x19c>)
 8008322:	f7fb f897 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 8008326:	2740      	movs	r7, #64	; 0x40
 8008328:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800832a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800832c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 800832e:	a90b      	add	r1, sp, #44	; 0x2c
 8008330:	481c      	ldr	r0, [pc, #112]	; (80083a4 <MX_GPIO_Init+0x1a0>)
 8008332:	f7fb f88f 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8008336:	f04f 0880 	mov.w	r8, #128	; 0x80
 800833a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800833e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008340:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8008342:	a90b      	add	r1, sp, #44	; 0x2c
 8008344:	4818      	ldr	r0, [pc, #96]	; (80083a8 <MX_GPIO_Init+0x1a4>)
 8008346:	f7fb f885 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 800834a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800834e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008350:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 8008352:	a90b      	add	r1, sp, #44	; 0x2c
 8008354:	4815      	ldr	r0, [pc, #84]	; (80083ac <MX_GPIO_Init+0x1a8>)
 8008356:	f7fb f87d 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 800835a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800835c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800835e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8008360:	a90b      	add	r1, sp, #44	; 0x2c
 8008362:	4813      	ldr	r0, [pc, #76]	; (80083b0 <MX_GPIO_Init+0x1ac>)
 8008364:	f7fb f876 	bl	8003454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008368:	4622      	mov	r2, r4
 800836a:	2105      	movs	r1, #5
 800836c:	200a      	movs	r0, #10
 800836e:	f7fa fc2b 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008372:	200a      	movs	r0, #10
 8008374:	f7fa fc5a 	bl	8002c2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8008378:	4622      	mov	r2, r4
 800837a:	2105      	movs	r1, #5
 800837c:	2017      	movs	r0, #23
 800837e:	f7fa fc23 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008382:	2017      	movs	r0, #23
 8008384:	f7fa fc52 	bl	8002c2c <HAL_NVIC_EnableIRQ>

}
 8008388:	b010      	add	sp, #64	; 0x40
 800838a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800838e:	bf00      	nop
 8008390:	40023800 	.word	0x40023800
 8008394:	40020000 	.word	0x40020000
 8008398:	10110000 	.word	0x10110000
 800839c:	40020400 	.word	0x40020400
 80083a0:	40022000 	.word	0x40022000
 80083a4:	40020800 	.word	0x40020800
 80083a8:	40021800 	.word	0x40021800
 80083ac:	40021400 	.word	0x40021400
 80083b0:	40021c00 	.word	0x40021c00

080083b4 <MX_DMA_Init>:
{
 80083b4:	b500      	push	{lr}
 80083b6:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <MX_DMA_Init+0x30>)
 80083ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083bc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80083c0:	631a      	str	r2, [r3, #48]	; 0x30
 80083c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	2104      	movs	r1, #4
 80083d0:	2038      	movs	r0, #56	; 0x38
 80083d2:	f7fa fbf9 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80083d6:	2038      	movs	r0, #56	; 0x38
 80083d8:	f7fa fc28 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 80083dc:	b003      	add	sp, #12
 80083de:	f85d fb04 	ldr.w	pc, [sp], #4
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800

080083e8 <MX_SPI2_Init>:
{
 80083e8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80083ea:	480e      	ldr	r0, [pc, #56]	; (8008424 <MX_SPI2_Init+0x3c>)
 80083ec:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <MX_SPI2_Init+0x40>)
 80083ee:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80083f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80083f4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80083f6:	2300      	movs	r3, #0
 80083f8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80083fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80083fe:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008400:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008402:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008408:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800840a:	2220      	movs	r2, #32
 800840c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800840e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008410:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008412:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008414:	2207      	movs	r2, #7
 8008416:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008418:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800841a:	2308      	movs	r3, #8
 800841c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800841e:	f7fc fe40 	bl	80050a2 <HAL_SPI_Init>
}
 8008422:	bd08      	pop	{r3, pc}
 8008424:	20004224 	.word	0x20004224
 8008428:	40003800 	.word	0x40003800

0800842c <MX_USART1_UART_Init>:
{
 800842c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800842e:	4809      	ldr	r0, [pc, #36]	; (8008454 <MX_USART1_UART_Init+0x28>)
 8008430:	4b09      	ldr	r3, [pc, #36]	; (8008458 <MX_USART1_UART_Init+0x2c>)
 8008432:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8008434:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008438:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800843a:	2300      	movs	r3, #0
 800843c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800843e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008440:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008442:	220c      	movs	r2, #12
 8008444:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008446:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008448:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800844a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800844c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800844e:	f7fd ff14 	bl	800627a <HAL_UART_Init>
}
 8008452:	bd08      	pop	{r3, pc}
 8008454:	200046c8 	.word	0x200046c8
 8008458:	40011000 	.word	0x40011000

0800845c <MX_ADC3_Init>:
{
 800845c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8008460:	2500      	movs	r5, #0
 8008462:	9500      	str	r5, [sp, #0]
 8008464:	9501      	str	r5, [sp, #4]
 8008466:	9502      	str	r5, [sp, #8]
 8008468:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 800846a:	4c1d      	ldr	r4, [pc, #116]	; (80084e0 <MX_ADC3_Init+0x84>)
 800846c:	4b1d      	ldr	r3, [pc, #116]	; (80084e4 <MX_ADC3_Init+0x88>)
 800846e:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008474:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008476:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8008478:	2601      	movs	r6, #1
 800847a:	6126      	str	r6, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800847c:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800847e:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8008482:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008486:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8008488:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
 800848c:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800848e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 4;
 8008490:	2704      	movs	r7, #4
 8008492:	61e7      	str	r7, [r4, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8008494:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008498:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800849a:	4620      	mov	r0, r4
 800849c:	f7fa f946 	bl	800272c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 80084a0:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084a2:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80084a4:	2506      	movs	r5, #6
 80084a6:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80084a8:	4669      	mov	r1, sp
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7fa faa2 	bl	80029f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 80084b0:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80084b2:	2302      	movs	r3, #2
 80084b4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80084b6:	4669      	mov	r1, sp
 80084b8:	4620      	mov	r0, r4
 80084ba:	f7fa fa9b 	bl	80029f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 80084be:	2307      	movs	r3, #7
 80084c0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80084c2:	2303      	movs	r3, #3
 80084c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80084c6:	4669      	mov	r1, sp
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7fa fa93 	bl	80029f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 80084ce:	2308      	movs	r3, #8
 80084d0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80084d2:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80084d4:	4669      	mov	r1, sp
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7fa fa8c 	bl	80029f4 <HAL_ADC_ConfigChannel>
}
 80084dc:	b005      	add	sp, #20
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	20004640 	.word	0x20004640
 80084e4:	40012200 	.word	0x40012200

080084e8 <MX_CRC_Init>:
{
 80084e8:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80084ea:	4806      	ldr	r0, [pc, #24]	; (8008504 <MX_CRC_Init+0x1c>)
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <MX_CRC_Init+0x20>)
 80084ee:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80084f4:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80084f6:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80084f8:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80084fa:	2301      	movs	r3, #1
 80084fc:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80084fe:	f7fa fba3 	bl	8002c48 <HAL_CRC_Init>
}
 8008502:	bd08      	pop	{r3, pc}
 8008504:	200044dc 	.word	0x200044dc
 8008508:	40023000 	.word	0x40023000

0800850c <MX_DMA2D_Init>:
{
 800850c:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 800850e:	4c09      	ldr	r4, [pc, #36]	; (8008534 <MX_DMA2D_Init+0x28>)
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <MX_DMA2D_Init+0x2c>)
 8008512:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8008514:	2300      	movs	r3, #0
 8008516:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008518:	60a3      	str	r3, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 800851a:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800851c:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800851e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008520:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8008522:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008524:	4620      	mov	r0, r4
 8008526:	f7fa fe49 	bl	80031bc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800852a:	2101      	movs	r1, #1
 800852c:	4620      	mov	r0, r4
 800852e:	f7fa ff2f 	bl	8003390 <HAL_DMA2D_ConfigLayer>
}
 8008532:	bd10      	pop	{r4, pc}
 8008534:	200047b0 	.word	0x200047b0
 8008538:	4002b000 	.word	0x4002b000

0800853c <MX_FMC_Init>:
{
 800853c:	b500      	push	{lr}
 800853e:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008540:	480e      	ldr	r0, [pc, #56]	; (800857c <MX_FMC_Init+0x40>)
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <MX_FMC_Init+0x44>)
 8008544:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008546:	2200      	movs	r2, #0
 8008548:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800854a:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800854c:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800854e:	2310      	movs	r3, #16
 8008550:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8008552:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008558:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800855a:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800855c:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800855e:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8008560:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008562:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008564:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8008566:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008568:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 800856a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 800856c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800856e:	a901      	add	r1, sp, #4
 8008570:	f7fc fc3c 	bl	8004dec <HAL_SDRAM_Init>
}
 8008574:	b009      	add	sp, #36	; 0x24
 8008576:	f85d fb04 	ldr.w	pc, [sp], #4
 800857a:	bf00      	nop
 800857c:	200047f0 	.word	0x200047f0
 8008580:	a0000140 	.word	0xa0000140

08008584 <MX_LTDC_Init>:
{
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8008588:	2434      	movs	r4, #52	; 0x34
 800858a:	4622      	mov	r2, r4
 800858c:	2100      	movs	r1, #0
 800858e:	eb0d 0004 	add.w	r0, sp, r4
 8008592:	f001 f842 	bl	800961a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8008596:	4622      	mov	r2, r4
 8008598:	2100      	movs	r1, #0
 800859a:	4668      	mov	r0, sp
 800859c:	f001 f83d 	bl	800961a <memset>
  hltdc.Instance = LTDC;
 80085a0:	4d2b      	ldr	r5, [pc, #172]	; (8008650 <MX_LTDC_Init+0xcc>)
 80085a2:	4b2c      	ldr	r3, [pc, #176]	; (8008654 <MX_LTDC_Init+0xd0>)
 80085a4:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80085a6:	2400      	movs	r4, #0
 80085a8:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80085aa:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80085ac:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80085ae:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 80085b0:	2307      	movs	r3, #7
 80085b2:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 80085b4:	2303      	movs	r3, #3
 80085b6:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80085b8:	230e      	movs	r3, #14
 80085ba:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80085bc:	2605      	movs	r6, #5
 80085be:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80085c0:	f240 238e 	movw	r3, #654	; 0x28e
 80085c4:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80085c6:	f240 13e5 	movw	r3, #485	; 0x1e5
 80085ca:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80085cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80085d0:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80085d2:	f240 13e7 	movw	r3, #487	; 0x1e7
 80085d6:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80085d8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80085dc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80085e0:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80085e4:	4628      	mov	r0, r5
 80085e6:	f7fb fc9d 	bl	8003f24 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 80085ea:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80085ec:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80085ee:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80085f0:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80085f2:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80085f4:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80085f6:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80085f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80085fc:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80085fe:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8008600:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8008602:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8008604:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8008606:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800860a:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800860e:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008612:	4622      	mov	r2, r4
 8008614:	a90d      	add	r1, sp, #52	; 0x34
 8008616:	4628      	mov	r0, r5
 8008618:	f7fb fd6e 	bl	80040f8 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 800861c:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800861e:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8008620:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 8008622:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008624:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8008626:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8008628:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800862a:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800862c:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 800862e:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008630:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008632:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8008634:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8008638:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800863c:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8008640:	2201      	movs	r2, #1
 8008642:	4669      	mov	r1, sp
 8008644:	4628      	mov	r0, r5
 8008646:	f7fb fd57 	bl	80040f8 <HAL_LTDC_ConfigLayer>
}
 800864a:	b01b      	add	sp, #108	; 0x6c
 800864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800864e:	bf00      	nop
 8008650:	20004598 	.word	0x20004598
 8008654:	40016800 	.word	0x40016800

08008658 <MX_TIM13_Init>:
{
 8008658:	b508      	push	{r3, lr}
  htim13.Instance = TIM13;
 800865a:	4807      	ldr	r0, [pc, #28]	; (8008678 <MX_TIM13_Init+0x20>)
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <MX_TIM13_Init+0x24>)
 800865e:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 1000-1;
 8008660:	f240 33e7 	movw	r3, #999	; 0x3e7
 8008664:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008666:	2300      	movs	r3, #0
 8008668:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 108-1;
 800866a:	226b      	movs	r2, #107	; 0x6b
 800866c:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800866e:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008670:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8008672:	f7fd fa5b 	bl	8005b2c <HAL_TIM_Base_Init>
}
 8008676:	bd08      	pop	{r3, pc}
 8008678:	20004688 	.word	0x20004688
 800867c:	40001c00 	.word	0x40001c00

08008680 <MX_TIM1_Init>:
{
 8008680:	b530      	push	{r4, r5, lr}
 8008682:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008684:	2400      	movs	r4, #0
 8008686:	9404      	str	r4, [sp, #16]
 8008688:	9405      	str	r4, [sp, #20]
 800868a:	9406      	str	r4, [sp, #24]
 800868c:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800868e:	9401      	str	r4, [sp, #4]
 8008690:	9402      	str	r4, [sp, #8]
 8008692:	9403      	str	r4, [sp, #12]
  htim1.Instance = TIM1;
 8008694:	4d10      	ldr	r5, [pc, #64]	; (80086d8 <MX_TIM1_Init+0x58>)
 8008696:	4b11      	ldr	r3, [pc, #68]	; (80086dc <MX_TIM1_Init+0x5c>)
 8008698:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 100-1;
 800869a:	2363      	movs	r3, #99	; 0x63
 800869c:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800869e:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 216-1;
 80086a0:	23d7      	movs	r3, #215	; 0xd7
 80086a2:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086a4:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80086a6:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086a8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7fd fa3e 	bl	8005b2c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7fd fa5d 	bl	8005b78 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80086be:	2320      	movs	r3, #32
 80086c0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80086c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086c6:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086c8:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80086ca:	a901      	add	r1, sp, #4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7fd fac1 	bl	8005c54 <HAL_TIMEx_MasterConfigSynchronization>
}
 80086d2:	b009      	add	sp, #36	; 0x24
 80086d4:	bd30      	pop	{r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20004770 	.word	0x20004770
 80086dc:	40010000 	.word	0x40010000

080086e0 <StartDrawUI>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDrawUI */
void StartDrawUI(void const * argument)
{
 80086e0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  drawMainScreen(connection);
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <StartDrawUI+0x14>)
 80086e4:	7818      	ldrb	r0, [r3, #0]
 80086e6:	f7f9 fddd 	bl	80022a4 <drawMainScreen>
    osDelay(4);
 80086ea:	2004      	movs	r0, #4
 80086ec:	f7fe ff2d 	bl	800754a <osDelay>
 80086f0:	e7f7      	b.n	80086e2 <StartDrawUI+0x2>
 80086f2:	bf00      	nop
 80086f4:	200041ed 	.word	0x200041ed

080086f8 <SystemClock_Config>:
{
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086fc:	2230      	movs	r2, #48	; 0x30
 80086fe:	2100      	movs	r1, #0
 8008700:	a828      	add	r0, sp, #160	; 0xa0
 8008702:	f000 ff8a 	bl	800961a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008706:	2400      	movs	r4, #0
 8008708:	9423      	str	r4, [sp, #140]	; 0x8c
 800870a:	9424      	str	r4, [sp, #144]	; 0x90
 800870c:	9425      	str	r4, [sp, #148]	; 0x94
 800870e:	9426      	str	r4, [sp, #152]	; 0x98
 8008710:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008712:	2284      	movs	r2, #132	; 0x84
 8008714:	4621      	mov	r1, r4
 8008716:	a802      	add	r0, sp, #8
 8008718:	f000 ff7f 	bl	800961a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <SystemClock_Config+0xc0>)
 800871e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008724:	641a      	str	r2, [r3, #64]	; 0x40
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <SystemClock_Config+0xc4>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008744:	2601      	movs	r6, #1
 8008746:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800874c:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800874e:	2502      	movs	r5, #2
 8008750:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008756:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008758:	2319      	movs	r3, #25
 800875a:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 800875c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8008760:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008762:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8008764:	2309      	movs	r3, #9
 8008766:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008768:	a828      	add	r0, sp, #160	; 0xa0
 800876a:	f7fb fd35 	bl	80041d8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800876e:	f7fb fcf5 	bl	800415c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008772:	230f      	movs	r3, #15
 8008774:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008776:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008778:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800877a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800877e:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008784:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008786:	2107      	movs	r1, #7
 8008788:	a823      	add	r0, sp, #140	; 0x8c
 800878a:	f7fb ff63 	bl	8004654 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 800878e:	2348      	movs	r3, #72	; 0x48
 8008790:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8008792:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008796:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8008798:	2305      	movs	r3, #5
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800879c:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800879e:	2303      	movs	r3, #3
 80087a0:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80087a2:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80087a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087a8:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80087aa:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087ac:	a802      	add	r0, sp, #8
 80087ae:	f7fc f847 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
}
 80087b2:	b034      	add	sp, #208	; 0xd0
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	bf00      	nop
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40007000 	.word	0x40007000

080087c0 <main>:
{
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	b0a6      	sub	sp, #152	; 0x98
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80087c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80087c8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80087cc:	4b4e      	ldr	r3, [pc, #312]	; (8008908 <main+0x148>)
 80087ce:	2100      	movs	r1, #0
 80087d0:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80087d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80087d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80087e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80087e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80087e8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80087ec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80087f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80087f4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80087f8:	f3c4 314e 	ubfx	r1, r4, #13, #15
 80087fc:	e00f      	b.n	800881e <main+0x5e>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80087fe:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008800:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008804:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8008808:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800880c:	483e      	ldr	r0, [pc, #248]	; (8008908 <main+0x148>)
 800880e:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8008812:	1e53      	subs	r3, r2, #1
 8008814:	2a00      	cmp	r2, #0
 8008816:	d1f2      	bne.n	80087fe <main+0x3e>
    } while(sets-- != 0U);
 8008818:	1e4b      	subs	r3, r1, #1
 800881a:	b119      	cbz	r1, 8008824 <main+0x64>
 800881c:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800881e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8008822:	e7ed      	b.n	8008800 <main+0x40>
 8008824:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008828:	6943      	ldr	r3, [r0, #20]
 800882a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800882e:	6143      	str	r3, [r0, #20]
 8008830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008834:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008838:	f7f9 fea6 	bl	8002588 <HAL_Init>
  SystemClock_Config();
 800883c:	f7ff ff5c 	bl	80086f8 <SystemClock_Config>
  MX_GPIO_Init();
 8008840:	f7ff fce0 	bl	8008204 <MX_GPIO_Init>
  MX_DMA_Init();
 8008844:	f7ff fdb6 	bl	80083b4 <MX_DMA_Init>
  MX_SPI2_Init();
 8008848:	f7ff fdce 	bl	80083e8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800884c:	f7ff fdee 	bl	800842c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8008850:	f7ff fe04 	bl	800845c <MX_ADC3_Init>
  MX_CRC_Init();
 8008854:	f7ff fe48 	bl	80084e8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8008858:	f7ff fe58 	bl	800850c <MX_DMA2D_Init>
  MX_FMC_Init();
 800885c:	f7ff fe6e 	bl	800853c <MX_FMC_Init>
  MX_LTDC_Init();
 8008860:	f7ff fe90 	bl	8008584 <MX_LTDC_Init>
  MX_TIM1_Init();
 8008864:	f7ff ff0c 	bl	8008680 <MX_TIM1_Init>
  MX_TIM13_Init();
 8008868:	f7ff fef6 	bl	8008658 <MX_TIM13_Init>
	if( HAL_ADC_Start(&hadc3) == HAL_OK) {
 800886c:	4827      	ldr	r0, [pc, #156]	; (800890c <main+0x14c>)
 800886e:	f7f9 ff89 	bl	8002784 <HAL_ADC_Start>
	DWT_Init(); //For uS delays
 8008872:	f7f9 fe5d 	bl	8002530 <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8008876:	4c26      	ldr	r4, [pc, #152]	; (8008910 <main+0x150>)
 8008878:	2260      	movs	r2, #96	; 0x60
 800887a:	1d21      	adds	r1, r4, #4
 800887c:	4668      	mov	r0, sp
 800887e:	f000 fec1 	bl	8009604 <memcpy>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800888c:	4821      	ldr	r0, [pc, #132]	; (8008914 <main+0x154>)
 800888e:	f7f9 f831 	bl	80018f4 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 8008892:	4c21      	ldr	r4, [pc, #132]	; (8008918 <main+0x158>)
 8008894:	2270      	movs	r2, #112	; 0x70
 8008896:	f104 0110 	add.w	r1, r4, #16
 800889a:	4668      	mov	r0, sp
 800889c:	f000 feb2 	bl	8009604 <memcpy>
 80088a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80088a4:	f7f9 fbe0 	bl	8002068 <nrf24_DebugUART_Init>
	NRF24_stopListening();
 80088a8:	f7f8 fe41 	bl	800152e <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80088ac:	4b1b      	ldr	r3, [pc, #108]	; (800891c <main+0x15c>)
 80088ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088b2:	f7f8 fe45 	bl	8001540 <NRF24_openWritingPipe>
	printRadioSettings();
 80088b6:	f7f9 f8e7 	bl	8001a88 <printRadioSettings>
	for (int i = 0; i < 31; ++i) {
 80088ba:	2300      	movs	r3, #0
 80088bc:	e003      	b.n	80088c6 <main+0x106>
		TxData[i] = 0;
 80088be:	4a18      	ldr	r2, [pc, #96]	; (8008920 <main+0x160>)
 80088c0:	2100      	movs	r1, #0
 80088c2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 31; ++i) {
 80088c4:	3301      	adds	r3, #1
 80088c6:	2b1e      	cmp	r3, #30
 80088c8:	ddf9      	ble.n	80088be <main+0xfe>
	initLCD();
 80088ca:	f7f9 fbeb 	bl	80020a4 <initLCD>
  osThreadDef(DrawUI, StartDrawUI, osPriorityNormal, 0, 128);
 80088ce:	4c15      	ldr	r4, [pc, #84]	; (8008924 <main+0x164>)
 80088d0:	ad21      	add	r5, sp, #132	; 0x84
 80088d2:	4626      	mov	r6, r4
 80088d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80088d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	602b      	str	r3, [r5, #0]
  DrawUIHandle = osThreadCreate(osThread(DrawUI), NULL);
 80088dc:	2100      	movs	r1, #0
 80088de:	a821      	add	r0, sp, #132	; 0x84
 80088e0:	f7fe fe19 	bl	8007516 <osThreadCreate>
 80088e4:	4b10      	ldr	r3, [pc, #64]	; (8008928 <main+0x168>)
 80088e6:	6018      	str	r0, [r3, #0]
  osThreadDef(NRFTX, startNRFTX, osPriorityIdle, 0, 128);
 80088e8:	ad1c      	add	r5, sp, #112	; 0x70
 80088ea:	3414      	adds	r4, #20
 80088ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	602b      	str	r3, [r5, #0]
  NRFTXHandle = osThreadCreate(osThread(NRFTX), NULL);
 80088f4:	2100      	movs	r1, #0
 80088f6:	a81c      	add	r0, sp, #112	; 0x70
 80088f8:	f7fe fe0d 	bl	8007516 <osThreadCreate>
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <main+0x16c>)
 80088fe:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8008900:	f7fe fe04 	bl	800750c <osKernelStart>
 8008904:	e7fe      	b.n	8008904 <main+0x144>
 8008906:	bf00      	nop
 8008908:	e000ed00 	.word	0xe000ed00
 800890c:	20004640 	.word	0x20004640
 8008910:	20004224 	.word	0x20004224
 8008914:	40020000 	.word	0x40020000
 8008918:	200046c8 	.word	0x200046c8
 800891c:	20000048 	.word	0x20000048
 8008920:	2000474c 	.word	0x2000474c
 8008924:	0800d1b0 	.word	0x0800d1b0
 8008928:	200044d8 	.word	0x200044d8
 800892c:	20004508 	.word	0x20004508

08008930 <packData>:
void packData() {
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	ed2d 8b02 	vpush	{d8}
	adcArray[2] = 4096 - adcArray[2];
 8008936:	483d      	ldr	r0, [pc, #244]	; (8008a2c <packData+0xfc>)
 8008938:	6881      	ldr	r1, [r0, #8]
 800893a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800893e:	6081      	str	r1, [r0, #8]
	adcArray[4] = 4096 - adcArray[4];
 8008940:	6902      	ldr	r2, [r0, #16]
 8008942:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8008946:	6102      	str	r2, [r0, #16]
	TxData[0] = adcArray[0];
 8008948:	6804      	ldr	r4, [r0, #0]
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <packData+0x100>)
 800894c:	701c      	strb	r4, [r3, #0]
	TxData[1] = adcArray[0] >> 8;
 800894e:	0a24      	lsrs	r4, r4, #8
 8008950:	705c      	strb	r4, [r3, #1]
	TxData[2] = adcArray[3];
 8008952:	68c0      	ldr	r0, [r0, #12]
 8008954:	7098      	strb	r0, [r3, #2]
	TxData[3] = adcArray[3] >> 8;
 8008956:	0a00      	lsrs	r0, r0, #8
 8008958:	70d8      	strb	r0, [r3, #3]
	TxData[4] = adcArray[2];
 800895a:	7119      	strb	r1, [r3, #4]
	TxData[5] = adcArray[2] >> 8;
 800895c:	0a09      	lsrs	r1, r1, #8
 800895e:	7159      	strb	r1, [r3, #5]
	TxData[6] = adcArray[4];
 8008960:	719a      	strb	r2, [r3, #6]
	TxData[7] = adcArray[4] >> 8;
 8008962:	0a12      	lsrs	r2, r2, #8
 8008964:	71da      	strb	r2, [r3, #7]
	if (airmode) {
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <packData+0x104>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d052      	beq.n	8008a14 <packData+0xe4>
		TxData[8] |= 1 << 0;
 800896e:	4a30      	ldr	r2, [pc, #192]	; (8008a30 <packData+0x100>)
 8008970:	7a13      	ldrb	r3, [r2, #8]
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	7213      	strb	r3, [r2, #8]
	if (kill) {
 8008978:	4b2f      	ldr	r3, [pc, #188]	; (8008a38 <packData+0x108>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d14f      	bne.n	8008a20 <packData+0xf0>
		TxData[8] &= ~(1 << 1);
 8008980:	4a2b      	ldr	r2, [pc, #172]	; (8008a30 <packData+0x100>)
 8008982:	7a13      	ldrb	r3, [r2, #8]
 8008984:	f023 0302 	bic.w	r3, r3, #2
 8008988:	7213      	strb	r3, [r2, #8]
	uint16_t roll_p_tx = round(roll_p * 100);
 800898a:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <packData+0x10c>)
 800898c:	edd3 7a00 	vldr	s15, [r3]
 8008990:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8008a40 <packData+0x110>
 8008994:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008998:	ee17 0a90 	vmov	r0, s15
 800899c:	f7f7 fdf4 	bl	8000588 <__aeabi_f2d>
 80089a0:	ec41 0b10 	vmov	d0, r0, r1
 80089a4:	f004 fbac 	bl	800d100 <round>
 80089a8:	ec51 0b10 	vmov	r0, r1, d0
 80089ac:	f7f8 f91c 	bl	8000be8 <__aeabi_d2uiz>
 80089b0:	b285      	uxth	r5, r0
	uint16_t roll_i_tx = round(roll_i * 100) ;
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <packData+0x114>)
 80089b4:	edd3 7a00 	vldr	s15, [r3]
 80089b8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80089bc:	ee17 0a90 	vmov	r0, s15
 80089c0:	f7f7 fde2 	bl	8000588 <__aeabi_f2d>
 80089c4:	ec41 0b10 	vmov	d0, r0, r1
 80089c8:	f004 fb9a 	bl	800d100 <round>
 80089cc:	ec51 0b10 	vmov	r0, r1, d0
 80089d0:	f7f8 f90a 	bl	8000be8 <__aeabi_d2uiz>
 80089d4:	b284      	uxth	r4, r0
	uint16_t roll_d_tx = round(roll_d * 100) ;
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <packData+0x118>)
 80089d8:	edd3 7a00 	vldr	s15, [r3]
 80089dc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80089e0:	ee17 0a90 	vmov	r0, s15
 80089e4:	f7f7 fdd0 	bl	8000588 <__aeabi_f2d>
 80089e8:	ec41 0b10 	vmov	d0, r0, r1
 80089ec:	f004 fb88 	bl	800d100 <round>
 80089f0:	ec51 0b10 	vmov	r0, r1, d0
 80089f4:	f7f8 f8f8 	bl	8000be8 <__aeabi_d2uiz>
 80089f8:	b280      	uxth	r0, r0
	TxData[9] = roll_p_tx;
 80089fa:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <packData+0x100>)
 80089fc:	725d      	strb	r5, [r3, #9]
	TxData[10] = roll_p_tx >> 8;
 80089fe:	0a2d      	lsrs	r5, r5, #8
 8008a00:	729d      	strb	r5, [r3, #10]
	TxData[11] = roll_i_tx;
 8008a02:	72dc      	strb	r4, [r3, #11]
	TxData[12] = roll_i_tx >> 8;
 8008a04:	0a24      	lsrs	r4, r4, #8
 8008a06:	731c      	strb	r4, [r3, #12]
	TxData[13] = roll_d_tx;
 8008a08:	7358      	strb	r0, [r3, #13]
	TxData[14] = roll_d_tx >> 8;
 8008a0a:	0a00      	lsrs	r0, r0, #8
 8008a0c:	7398      	strb	r0, [r3, #14]
}
 8008a0e:	ecbd 8b02 	vpop	{d8}
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
		TxData[8] &= ~(1 << 0);
 8008a14:	4a06      	ldr	r2, [pc, #24]	; (8008a30 <packData+0x100>)
 8008a16:	7a13      	ldrb	r3, [r2, #8]
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	7213      	strb	r3, [r2, #8]
 8008a1e:	e7ab      	b.n	8008978 <packData+0x48>
		TxData[8] |= 1 << 1;
 8008a20:	4a03      	ldr	r2, [pc, #12]	; (8008a30 <packData+0x100>)
 8008a22:	7a13      	ldrb	r3, [r2, #8]
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	7213      	strb	r3, [r2, #8]
 8008a2a:	e7ae      	b.n	800898a <packData+0x5a>
 8008a2c:	200044c8 	.word	0x200044c8
 8008a30:	2000474c 	.word	0x2000474c
 8008a34:	200041ec 	.word	0x200041ec
 8008a38:	200041ee 	.word	0x200041ee
 8008a3c:	20004200 	.word	0x20004200
 8008a40:	42c80000 	.word	0x42c80000
 8008a44:	200041fc 	.word	0x200041fc
 8008a48:	200041f8 	.word	0x200041f8

08008a4c <unpackAckPayload>:
	if (AckPayload[0] == 0x00) {
 8008a4c:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <unpackAckPayload+0x68>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	bb7b      	cbnz	r3, 8008ab2 <unpackAckPayload+0x66>
		droneBatteryLvl = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <unpackAckPayload+0x68>)
 8008a54:	785a      	ldrb	r2, [r3, #1]
 8008a56:	7899      	ldrb	r1, [r3, #2]
 8008a58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a5c:	4916      	ldr	r1, [pc, #88]	; (8008ab8 <unpackAckPayload+0x6c>)
 8008a5e:	600a      	str	r2, [r1, #0]
		roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 8008a60:	78da      	ldrb	r2, [r3, #3]
 8008a62:	7919      	ldrb	r1, [r3, #4]
 8008a64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a68:	ee07 2a90 	vmov	s15, r2
 8008a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		roll_rx = roll_rx / 100;
 8008a70:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008abc <unpackAckPayload+0x70>
 8008a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a78:	4a11      	ldr	r2, [pc, #68]	; (8008ac0 <unpackAckPayload+0x74>)
 8008a7a:	edc2 6a00 	vstr	s13, [r2]
		pitch_rx = (AckPayload[5] & 0xFF) | (AckPayload[6] << 8);
 8008a7e:	795a      	ldrb	r2, [r3, #5]
 8008a80:	7999      	ldrb	r1, [r3, #6]
 8008a82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a86:	ee07 2a90 	vmov	s15, r2
 8008a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		pitch_rx = pitch_rx / 100;
 8008a8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a92:	4a0c      	ldr	r2, [pc, #48]	; (8008ac4 <unpackAckPayload+0x78>)
 8008a94:	edc2 6a00 	vstr	s13, [r2]
		yaw_rx = (AckPayload[7] & 0xFF) | (AckPayload[8] << 8);
 8008a98:	79da      	ldrb	r2, [r3, #7]
 8008a9a:	7a1b      	ldrb	r3, [r3, #8]
 8008a9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008aa0:	ee07 2a90 	vmov	s15, r2
 8008aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		yaw_rx = yaw_rx / 100;
 8008aa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <unpackAckPayload+0x7c>)
 8008aae:	edc3 6a00 	vstr	s13, [r3]
}
 8008ab2:	4770      	bx	lr
 8008ab4:	200044a8 	.word	0x200044a8
 8008ab8:	20000050 	.word	0x20000050
 8008abc:	42c80000 	.word	0x42c80000
 8008ac0:	20004204 	.word	0x20004204
 8008ac4:	200041f0 	.word	0x200041f0
 8008ac8:	20004210 	.word	0x20004210

08008acc <read_rotary_1>:
int8_t read_rotary_1() {
 8008acc:	b508      	push	{r3, lr}
	prevNextCode_1 <<= 2;
 8008ace:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <read_rotary_1+0x70>)
 8008ad0:	7813      	ldrb	r3, [r2, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	7013      	strb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8008ad6:	2180      	movs	r1, #128	; 0x80
 8008ad8:	4819      	ldr	r0, [pc, #100]	; (8008b40 <read_rotary_1+0x74>)
 8008ada:	f7fa fdab 	bl	8003634 <HAL_GPIO_ReadPin>
 8008ade:	2801      	cmp	r0, #1
 8008ae0:	d01a      	beq.n	8008b18 <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8008ae2:	2140      	movs	r1, #64	; 0x40
 8008ae4:	4817      	ldr	r0, [pc, #92]	; (8008b44 <read_rotary_1+0x78>)
 8008ae6:	f7fa fda5 	bl	8003634 <HAL_GPIO_ReadPin>
 8008aea:	2801      	cmp	r0, #1
 8008aec:	d01a      	beq.n	8008b24 <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 8008aee:	4913      	ldr	r1, [pc, #76]	; (8008b3c <read_rotary_1+0x70>)
 8008af0:	780b      	ldrb	r3, [r1, #0]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	700a      	strb	r2, [r1, #0]
	if  (rot_enc_table[prevNextCode_1] ) {
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <read_rotary_1+0x7c>)
 8008afa:	5698      	ldrsb	r0, [r3, r2]
 8008afc:	b158      	cbz	r0, 8008b16 <read_rotary_1+0x4a>
		store_1 <<= 4;
 8008afe:	4913      	ldr	r1, [pc, #76]	; (8008b4c <read_rotary_1+0x80>)
 8008b00:	880b      	ldrh	r3, [r1, #0]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 8008b06:	4313      	orrs	r3, r2
 8008b08:	800b      	strh	r3, [r1, #0]
 8008b0a:	b2db      	uxtb	r3, r3
		if ((store_1&0xff)==0x2b) return -1;
 8008b0c:	2b2b      	cmp	r3, #43	; 0x2b
 8008b0e:	d011      	beq.n	8008b34 <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 8008b10:	2b17      	cmp	r3, #23
 8008b12:	d00d      	beq.n	8008b30 <read_rotary_1+0x64>
	return 0;
 8008b14:	2000      	movs	r0, #0
}
 8008b16:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <read_rotary_1+0x70>)
 8008b1a:	7813      	ldrb	r3, [r2, #0]
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	7013      	strb	r3, [r2, #0]
 8008b22:	e7de      	b.n	8008ae2 <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8008b24:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <read_rotary_1+0x70>)
 8008b26:	7813      	ldrb	r3, [r2, #0]
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	7013      	strb	r3, [r2, #0]
 8008b2e:	e7de      	b.n	8008aee <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 8008b30:	2001      	movs	r0, #1
 8008b32:	e7f0      	b.n	8008b16 <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b38:	e7ed      	b.n	8008b16 <read_rotary_1+0x4a>
 8008b3a:	bf00      	nop
 8008b3c:	200041f4 	.word	0x200041f4
 8008b40:	40021400 	.word	0x40021400
 8008b44:	40020800 	.word	0x40020800
 8008b48:	0800fa2c 	.word	0x0800fa2c
 8008b4c:	20004208 	.word	0x20004208

08008b50 <read_rotary_2>:
int8_t read_rotary_2() {
 8008b50:	b508      	push	{r3, lr}
	prevNextCode_2 <<= 2;
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <read_rotary_2+0x70>)
 8008b54:	7813      	ldrb	r3, [r2, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	7013      	strb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8008b5a:	2110      	movs	r1, #16
 8008b5c:	4819      	ldr	r0, [pc, #100]	; (8008bc4 <read_rotary_2+0x74>)
 8008b5e:	f7fa fd69 	bl	8003634 <HAL_GPIO_ReadPin>
 8008b62:	2801      	cmp	r0, #1
 8008b64:	d01a      	beq.n	8008b9c <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8008b66:	2180      	movs	r1, #128	; 0x80
 8008b68:	4817      	ldr	r0, [pc, #92]	; (8008bc8 <read_rotary_2+0x78>)
 8008b6a:	f7fa fd63 	bl	8003634 <HAL_GPIO_ReadPin>
 8008b6e:	2801      	cmp	r0, #1
 8008b70:	d01a      	beq.n	8008ba8 <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 8008b72:	4913      	ldr	r1, [pc, #76]	; (8008bc0 <read_rotary_2+0x70>)
 8008b74:	780b      	ldrb	r3, [r1, #0]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	700a      	strb	r2, [r1, #0]
	if  (rot_enc_table[prevNextCode_2] ) {
 8008b7c:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <read_rotary_2+0x7c>)
 8008b7e:	5698      	ldrsb	r0, [r3, r2]
 8008b80:	b158      	cbz	r0, 8008b9a <read_rotary_2+0x4a>
		store_2 <<= 4;
 8008b82:	4913      	ldr	r1, [pc, #76]	; (8008bd0 <read_rotary_2+0x80>)
 8008b84:	880b      	ldrh	r3, [r1, #0]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	800b      	strh	r3, [r1, #0]
 8008b8e:	b2db      	uxtb	r3, r3
		if ((store_2&0xff)==0x2b) return -1;
 8008b90:	2b2b      	cmp	r3, #43	; 0x2b
 8008b92:	d011      	beq.n	8008bb8 <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 8008b94:	2b17      	cmp	r3, #23
 8008b96:	d00d      	beq.n	8008bb4 <read_rotary_2+0x64>
	return 0;
 8008b98:	2000      	movs	r0, #0
}
 8008b9a:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8008b9c:	4a08      	ldr	r2, [pc, #32]	; (8008bc0 <read_rotary_2+0x70>)
 8008b9e:	7813      	ldrb	r3, [r2, #0]
 8008ba0:	f043 0302 	orr.w	r3, r3, #2
 8008ba4:	7013      	strb	r3, [r2, #0]
 8008ba6:	e7de      	b.n	8008b66 <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8008ba8:	4a05      	ldr	r2, [pc, #20]	; (8008bc0 <read_rotary_2+0x70>)
 8008baa:	7813      	ldrb	r3, [r2, #0]
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	7013      	strb	r3, [r2, #0]
 8008bb2:	e7de      	b.n	8008b72 <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	e7f0      	b.n	8008b9a <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbc:	e7ed      	b.n	8008b9a <read_rotary_2+0x4a>
 8008bbe:	bf00      	nop
 8008bc0:	200041f5 	.word	0x200041f5
 8008bc4:	40020400 	.word	0x40020400
 8008bc8:	40021800 	.word	0x40021800
 8008bcc:	0800fa3c 	.word	0x0800fa3c
 8008bd0:	2000420a 	.word	0x2000420a

08008bd4 <read_rotary_3>:
int8_t read_rotary_3() {
 8008bd4:	b508      	push	{r3, lr}
	prevNextCode_3 <<= 2;
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <read_rotary_3+0x70>)
 8008bd8:	7813      	ldrb	r3, [r2, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	7013      	strb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8008bde:	2140      	movs	r1, #64	; 0x40
 8008be0:	4819      	ldr	r0, [pc, #100]	; (8008c48 <read_rotary_3+0x74>)
 8008be2:	f7fa fd27 	bl	8003634 <HAL_GPIO_ReadPin>
 8008be6:	2801      	cmp	r0, #1
 8008be8:	d01a      	beq.n	8008c20 <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8008bea:	2108      	movs	r1, #8
 8008bec:	4817      	ldr	r0, [pc, #92]	; (8008c4c <read_rotary_3+0x78>)
 8008bee:	f7fa fd21 	bl	8003634 <HAL_GPIO_ReadPin>
 8008bf2:	2801      	cmp	r0, #1
 8008bf4:	d01a      	beq.n	8008c2c <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 8008bf6:	4913      	ldr	r1, [pc, #76]	; (8008c44 <read_rotary_3+0x70>)
 8008bf8:	780b      	ldrb	r3, [r1, #0]
 8008bfa:	f003 020f 	and.w	r2, r3, #15
 8008bfe:	700a      	strb	r2, [r1, #0]
	if  (rot_enc_table[prevNextCode_3] ) {
 8008c00:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <read_rotary_3+0x7c>)
 8008c02:	5698      	ldrsb	r0, [r3, r2]
 8008c04:	b158      	cbz	r0, 8008c1e <read_rotary_3+0x4a>
		store_3 <<= 4;
 8008c06:	4913      	ldr	r1, [pc, #76]	; (8008c54 <read_rotary_3+0x80>)
 8008c08:	880b      	ldrh	r3, [r1, #0]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	800b      	strh	r3, [r1, #0]
 8008c12:	b2db      	uxtb	r3, r3
		if ((store_3&0xff)==0x2b) return -1;
 8008c14:	2b2b      	cmp	r3, #43	; 0x2b
 8008c16:	d011      	beq.n	8008c3c <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 8008c18:	2b17      	cmp	r3, #23
 8008c1a:	d00d      	beq.n	8008c38 <read_rotary_3+0x64>
	return 0;
 8008c1c:	2000      	movs	r0, #0
}
 8008c1e:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8008c20:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <read_rotary_3+0x70>)
 8008c22:	7813      	ldrb	r3, [r2, #0]
 8008c24:	f043 0302 	orr.w	r3, r3, #2
 8008c28:	7013      	strb	r3, [r2, #0]
 8008c2a:	e7de      	b.n	8008bea <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8008c2c:	4a05      	ldr	r2, [pc, #20]	; (8008c44 <read_rotary_3+0x70>)
 8008c2e:	7813      	ldrb	r3, [r2, #0]
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	7013      	strb	r3, [r2, #0]
 8008c36:	e7de      	b.n	8008bf6 <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 8008c38:	2001      	movs	r0, #1
 8008c3a:	e7f0      	b.n	8008c1e <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c40:	e7ed      	b.n	8008c1e <read_rotary_3+0x4a>
 8008c42:	bf00      	nop
 8008c44:	200041f6 	.word	0x200041f6
 8008c48:	40021c00 	.word	0x40021c00
 8008c4c:	40022000 	.word	0x40022000
 8008c50:	0800fa4c 	.word	0x0800fa4c
 8008c54:	2000420c 	.word	0x2000420c

08008c58 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8008c5c:	2880      	cmp	r0, #128	; 0x80
 8008c5e:	d004      	beq.n	8008c6a <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8008c60:	2c10      	cmp	r4, #16
 8008c62:	d025      	beq.n	8008cb0 <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8008c64:	2c40      	cmp	r4, #64	; 0x40
 8008c66:	d046      	beq.n	8008cf6 <HAL_GPIO_EXTI_Callback+0x9e>
}
 8008c68:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 8008c6a:	f7ff ff2f 	bl	8008acc <read_rotary_1>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0f6      	beq.n	8008c60 <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 8008c72:	4b32      	ldr	r3, [pc, #200]	; (8008d3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b0b      	cmp	r3, #11
 8008c78:	d00b      	beq.n	8008c92 <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 8008c7a:	2b07      	cmp	r3, #7
 8008c7c:	d1f0      	bne.n	8008c60 <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 8008c7e:	4b30      	ldr	r3, [pc, #192]	; (8008d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8008c80:	edd3 7a00 	vldr	s15, [r3]
 8008c84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c8c:	edc3 7a00 	vstr	s15, [r3]
 8008c90:	e7e6      	b.n	8008c60 <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 8008c92:	4a2b      	ldr	r2, [pc, #172]	; (8008d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8008c94:	edd2 7a00 	vldr	s15, [r2]
 8008c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca0:	ddeb      	ble.n	8008c7a <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 8008ca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008caa:	edc2 7a00 	vstr	s15, [r2]
 8008cae:	e7e4      	b.n	8008c7a <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 8008cb0:	f7ff ff4e 	bl	8008b50 <read_rotary_2>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d0d5      	beq.n	8008c64 <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 8008cb8:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <HAL_GPIO_EXTI_Callback+0xec>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b0b      	cmp	r3, #11
 8008cbe:	d00b      	beq.n	8008cd8 <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 8008cc0:	2b07      	cmp	r3, #7
 8008cc2:	d1cf      	bne.n	8008c64 <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 8008cc4:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8008cc6:	edd3 7a00 	vldr	s15, [r3]
 8008cca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cd2:	edc3 7a00 	vstr	s15, [r3]
 8008cd6:	e7c5      	b.n	8008c64 <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 8008cd8:	4a1b      	ldr	r2, [pc, #108]	; (8008d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8008cda:	edd2 7a00 	vldr	s15, [r2]
 8008cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce6:	ddeb      	ble.n	8008cc0 <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 8008ce8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cf0:	edc2 7a00 	vstr	s15, [r2]
 8008cf4:	e7e4      	b.n	8008cc0 <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 8008cf6:	f7ff ff6d 	bl	8008bd4 <read_rotary_3>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0b4      	beq.n	8008c68 <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <HAL_GPIO_EXTI_Callback+0xf4>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b0b      	cmp	r3, #11
 8008d04:	d00b      	beq.n	8008d1e <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 8008d06:	2b07      	cmp	r3, #7
 8008d08:	d1ae      	bne.n	8008c68 <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8008d0c:	edd3 7a00 	vldr	s15, [r3]
 8008d10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d18:	edc3 7a00 	vstr	s15, [r3]
}
 8008d1c:	e7a4      	b.n	8008c68 <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 8008d1e:	4a0c      	ldr	r2, [pc, #48]	; (8008d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8008d20:	edd2 7a00 	vldr	s15, [r2]
 8008d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	ddeb      	ble.n	8008d06 <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 8008d2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d36:	edc2 7a00 	vstr	s15, [r2]
 8008d3a:	e7e4      	b.n	8008d06 <HAL_GPIO_EXTI_Callback+0xae>
 8008d3c:	200041f4 	.word	0x200041f4
 8008d40:	200041f8 	.word	0x200041f8
 8008d44:	200041f5 	.word	0x200041f5
 8008d48:	200041fc 	.word	0x200041fc
 8008d4c:	200041f6 	.word	0x200041f6
 8008d50:	20004200 	.word	0x20004200

08008d54 <HAL_ADC_ConvCpltCallback>:
}
 8008d54:	4770      	bx	lr

08008d56 <HAL_ADC_ErrorCallback>:
}
 8008d56:	4770      	bx	lr

08008d58 <sendPayload>:
void sendPayload(){
 8008d58:	b530      	push	{r4, r5, lr}
 8008d5a:	b089      	sub	sp, #36	; 0x24
		packData();
 8008d5c:	f7ff fde8 	bl	8008930 <packData>
		if (NRF24_write(TxData, 32)) {
 8008d60:	2120      	movs	r1, #32
 8008d62:	4814      	ldr	r0, [pc, #80]	; (8008db4 <sendPayload+0x5c>)
 8008d64:	f7f8 fd46 	bl	80017f4 <NRF24_write>
 8008d68:	b930      	cbnz	r0, 8008d78 <sendPayload+0x20>
			connection = 0;
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <sendPayload+0x60>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
		unpackAckPayload();
 8008d70:	f7ff fe6c 	bl	8008a4c <unpackAckPayload>
}
 8008d74:	b009      	add	sp, #36	; 0x24
 8008d76:	bd30      	pop	{r4, r5, pc}
			NRF24_read(AckPayload, 32);
 8008d78:	4d10      	ldr	r5, [pc, #64]	; (8008dbc <sendPayload+0x64>)
 8008d7a:	2120      	movs	r1, #32
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7f8 fc56 	bl	800162e <NRF24_read>
			HAL_UART_Transmit(&huart1,
 8008d82:	4c0f      	ldr	r4, [pc, #60]	; (8008dc0 <sendPayload+0x68>)
 8008d84:	230a      	movs	r3, #10
 8008d86:	221a      	movs	r2, #26
 8008d88:	490e      	ldr	r1, [pc, #56]	; (8008dc4 <sendPayload+0x6c>)
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7fd f9e5 	bl	800615a <HAL_UART_Transmit>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8008d90:	462a      	mov	r2, r5
 8008d92:	490d      	ldr	r1, [pc, #52]	; (8008dc8 <sendPayload+0x70>)
 8008d94:	4668      	mov	r0, sp
 8008d96:	f001 fa8d 	bl	800a2b4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
 8008d9a:	4668      	mov	r0, sp
 8008d9c:	f7f7 fa38 	bl	8000210 <strlen>
 8008da0:	230a      	movs	r3, #10
 8008da2:	b282      	uxth	r2, r0
 8008da4:	4669      	mov	r1, sp
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7fd f9d7 	bl	800615a <HAL_UART_Transmit>
			connection = 1;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <sendPayload+0x60>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	e7dd      	b.n	8008d70 <sendPayload+0x18>
 8008db4:	2000474c 	.word	0x2000474c
 8008db8:	200041ed 	.word	0x200041ed
 8008dbc:	200044a8 	.word	0x200044a8
 8008dc0:	200046c8 	.word	0x200046c8
 8008dc4:	0800fa5c 	.word	0x0800fa5c
 8008dc8:	0800fa78 	.word	0x0800fa78

08008dcc <startNRFTX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNRFTX */
void startNRFTX(void const * argument)
{
 8008dcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN startNRFTX */
  /* Infinite loop */
  for(;;)
  {
	  sendPayload();
 8008dce:	f7ff ffc3 	bl	8008d58 <sendPayload>
    osDelay(1);
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	f7fe fbb9 	bl	800754a <osDelay>
 8008dd8:	e7f9      	b.n	8008dce <startNRFTX+0x2>
	...

08008ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8008dde:	6802      	ldr	r2, [r0, #0]
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d000      	beq.n	8008de8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008de6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8008de8:	f7f9 fbe0 	bl	80025ac <HAL_IncTick>
}
 8008dec:	e7fb      	b.n	8008de6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8008dee:	bf00      	nop
 8008df0:	40000400 	.word	0x40000400

08008df4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008df4:	4770      	bx	lr
	...

08008df8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	9302      	str	r3, [sp, #8]
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <HAL_FMC_MspInit+0xa8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	b10b      	cbz	r3, 8008e12 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008e0e:	b007      	add	sp, #28
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8008e12:	4b23      	ldr	r3, [pc, #140]	; (8008ea0 <HAL_FMC_MspInit+0xa8>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008e18:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <HAL_FMC_MspInit+0xac>)
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1c:	f042 0201 	orr.w	r2, r2, #1
 8008e20:	639a      	str	r2, [r3, #56]	; 0x38
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8008e2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008e30:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e32:	2602      	movs	r6, #2
 8008e34:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e36:	2503      	movs	r5, #3
 8008e38:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e3a:	240c      	movs	r4, #12
 8008e3c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e3e:	a901      	add	r1, sp, #4
 8008e40:	4819      	ldr	r0, [pc, #100]	; (8008ea8 <HAL_FMC_MspInit+0xb0>)
 8008e42:	f7fa fb07 	bl	8003454 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8008e46:	f248 1311 	movw	r3, #33041	; 0x8111
 8008e4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2700      	movs	r7, #0
 8008e50:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e52:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e54:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008e56:	a901      	add	r1, sp, #4
 8008e58:	4814      	ldr	r0, [pc, #80]	; (8008eac <HAL_FMC_MspInit+0xb4>)
 8008e5a:	f7fa fafb 	bl	8003454 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8008e5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008e62:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e64:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e66:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e68:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e6a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e6c:	a901      	add	r1, sp, #4
 8008e6e:	4810      	ldr	r0, [pc, #64]	; (8008eb0 <HAL_FMC_MspInit+0xb8>)
 8008e70:	f7fa faf0 	bl	8003454 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008e74:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008e78:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e7a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e7e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e80:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008e82:	a901      	add	r1, sp, #4
 8008e84:	480b      	ldr	r0, [pc, #44]	; (8008eb4 <HAL_FMC_MspInit+0xbc>)
 8008e86:	f7fa fae5 	bl	8003454 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8008e8a:	232c      	movs	r3, #44	; 0x2c
 8008e8c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e8e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e90:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e92:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e94:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008e96:	a901      	add	r1, sp, #4
 8008e98:	4807      	ldr	r0, [pc, #28]	; (8008eb8 <HAL_FMC_MspInit+0xc0>)
 8008e9a:	f7fa fadb 	bl	8003454 <HAL_GPIO_Init>
 8008e9e:	e7b6      	b.n	8008e0e <HAL_FMC_MspInit+0x16>
 8008ea0:	20004214 	.word	0x20004214
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	40021800 	.word	0x40021800
 8008eb0:	40020c00 	.word	0x40020c00
 8008eb4:	40021400 	.word	0x40021400
 8008eb8:	40021c00 	.word	0x40021c00

08008ebc <HAL_MspInit>:
{
 8008ebc:	b500      	push	{lr}
 8008ebe:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <HAL_MspInit+0x3c>)
 8008ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ec4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8008eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ecc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008ed0:	9200      	str	r2, [sp, #0]
 8008ed2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008eda:	645a      	str	r2, [r3, #68]	; 0x44
 8008edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	210f      	movs	r1, #15
 8008eea:	f06f 0001 	mvn.w	r0, #1
 8008eee:	f7f9 fe6b 	bl	8002bc8 <HAL_NVIC_SetPriority>
}
 8008ef2:	b003      	add	sp, #12
 8008ef4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ef8:	40023800 	.word	0x40023800

08008efc <HAL_ADC_MspInit>:
{
 8008efc:	b530      	push	{r4, r5, lr}
 8008efe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f00:	2300      	movs	r3, #0
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	9306      	str	r3, [sp, #24]
 8008f0a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8008f0c:	6802      	ldr	r2, [r0, #0]
 8008f0e:	4b2e      	ldr	r3, [pc, #184]	; (8008fc8 <HAL_ADC_MspInit+0xcc>)
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d001      	beq.n	8008f18 <HAL_ADC_MspInit+0x1c>
}
 8008f14:	b009      	add	sp, #36	; 0x24
 8008f16:	bd30      	pop	{r4, r5, pc}
 8008f18:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008f1a:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8008f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44
 8008f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f28:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008f2c:	9200      	str	r2, [sp, #0]
 8008f2e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f32:	f042 0220 	orr.w	r2, r2, #32
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
 8008f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f3a:	f002 0220 	and.w	r2, r2, #32
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f44:	f042 0201 	orr.w	r2, r2, #1
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	9302      	str	r3, [sp, #8]
 8008f52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8008f54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008f58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008f5a:	2503      	movs	r5, #3
 8008f5c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008f5e:	a903      	add	r1, sp, #12
 8008f60:	481a      	ldr	r0, [pc, #104]	; (8008fcc <HAL_ADC_MspInit+0xd0>)
 8008f62:	f7fa fa77 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 8008f66:	2301      	movs	r3, #1
 8008f68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008f6a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8008f70:	a903      	add	r1, sp, #12
 8008f72:	4817      	ldr	r0, [pc, #92]	; (8008fd0 <HAL_ADC_MspInit+0xd4>)
 8008f74:	f7fa fa6e 	bl	8003454 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8008f78:	4816      	ldr	r0, [pc, #88]	; (8008fd4 <HAL_ADC_MspInit+0xd8>)
 8008f7a:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <HAL_ADC_MspInit+0xdc>)
 8008f7c:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008f7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f82:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f84:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f86:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8008f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f8c:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f92:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f98:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8008f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f9e:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8008fa0:	6205      	str	r5, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008fa2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8008fa4:	f7f9 ff2a 	bl	8002dfc <HAL_DMA_Init>
 8008fa8:	b958      	cbnz	r0, 8008fc2 <HAL_ADC_MspInit+0xc6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8008faa:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <HAL_ADC_MspInit+0xd8>)
 8008fac:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fae:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2105      	movs	r1, #5
 8008fb4:	2012      	movs	r0, #18
 8008fb6:	f7f9 fe07 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008fba:	2012      	movs	r0, #18
 8008fbc:	f7f9 fe36 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 8008fc0:	e7a8      	b.n	8008f14 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8008fc2:	f7ff ff17 	bl	8008df4 <Error_Handler>
 8008fc6:	e7f0      	b.n	8008faa <HAL_ADC_MspInit+0xae>
 8008fc8:	40012200 	.word	0x40012200
 8008fcc:	40021400 	.word	0x40021400
 8008fd0:	40020000 	.word	0x40020000
 8008fd4:	2000451c 	.word	0x2000451c
 8008fd8:	40026410 	.word	0x40026410

08008fdc <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8008fdc:	6802      	ldr	r2, [r0, #0]
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <HAL_CRC_MspInit+0x28>)
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d000      	beq.n	8008fe6 <HAL_CRC_MspInit+0xa>
 8008fe4:	4770      	bx	lr
{
 8008fe6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8008fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	9b01      	ldr	r3, [sp, #4]
}
 8008ffe:	b002      	add	sp, #8
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40023000 	.word	0x40023000

08009008 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8009008:	6802      	ldr	r2, [r0, #0]
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <HAL_DMA2D_MspInit+0x28>)
 800900c:	429a      	cmp	r2, r3
 800900e:	d000      	beq.n	8009012 <HAL_DMA2D_MspInit+0xa>
 8009010:	4770      	bx	lr
{
 8009012:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009014:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	9b01      	ldr	r3, [sp, #4]
}
 800902a:	b002      	add	sp, #8
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	4002b000 	.word	0x4002b000

08009034 <HAL_LTDC_MspInit>:
{
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009038:	2300      	movs	r3, #0
 800903a:	9309      	str	r3, [sp, #36]	; 0x24
 800903c:	930a      	str	r3, [sp, #40]	; 0x28
 800903e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009040:	930c      	str	r3, [sp, #48]	; 0x30
 8009042:	930d      	str	r3, [sp, #52]	; 0x34
  if(hltdc->Instance==LTDC)
 8009044:	6802      	ldr	r2, [r0, #0]
 8009046:	4b62      	ldr	r3, [pc, #392]	; (80091d0 <HAL_LTDC_MspInit+0x19c>)
 8009048:	429a      	cmp	r2, r3
 800904a:	d001      	beq.n	8009050 <HAL_LTDC_MspInit+0x1c>
}
 800904c:	b00f      	add	sp, #60	; 0x3c
 800904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009050:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8009054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009056:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800905a:	645a      	str	r2, [r3, #68]	; 0x44
 800905c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009062:	9200      	str	r2, [sp, #0]
 8009064:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009068:	f042 0202 	orr.w	r2, r2, #2
 800906c:	631a      	str	r2, [r3, #48]	; 0x30
 800906e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009070:	f002 0202 	and.w	r2, r2, #2
 8009074:	9201      	str	r2, [sp, #4]
 8009076:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800907a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
 8009080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009082:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009086:	9202      	str	r2, [sp, #8]
 8009088:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800908a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908c:	f042 0201 	orr.w	r2, r2, #1
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
 8009092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009094:	f002 0201 	and.w	r2, r2, #1
 8009098:	9203      	str	r2, [sp, #12]
 800909a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800909c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800909e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
 80090a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80090aa:	9204      	str	r2, [sp, #16]
 80090ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80090ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
 80090b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80090bc:	9205      	str	r2, [sp, #20]
 80090be:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80090c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c2:	f042 0208 	orr.w	r2, r2, #8
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
 80090c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ca:	f002 0208 	and.w	r2, r2, #8
 80090ce:	9206      	str	r2, [sp, #24]
 80090d0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80090d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30
 80090da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80090e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ea:	631a      	str	r2, [r3, #48]	; 0x30
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090f2:	9308      	str	r3, [sp, #32]
 80090f4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80090f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090fa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090fc:	2502      	movs	r5, #2
 80090fe:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009100:	260e      	movs	r6, #14
 8009102:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009104:	a909      	add	r1, sp, #36	; 0x24
 8009106:	4833      	ldr	r0, [pc, #204]	; (80091d4 <HAL_LTDC_MspInit+0x1a0>)
 8009108:	f7fa f9a4 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 800910c:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009112:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009114:	2400      	movs	r4, #0
 8009116:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009118:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800911a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800911c:	4f2e      	ldr	r7, [pc, #184]	; (80091d8 <HAL_LTDC_MspInit+0x1a4>)
 800911e:	a909      	add	r1, sp, #36	; 0x24
 8009120:	4638      	mov	r0, r7
 8009122:	f7fa f997 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009126:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800912c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800912e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009130:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009132:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009134:	a909      	add	r1, sp, #36	; 0x24
 8009136:	4829      	ldr	r0, [pc, #164]	; (80091dc <HAL_LTDC_MspInit+0x1a8>)
 8009138:	f7fa f98c 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 800913c:	f244 6330 	movw	r3, #17968	; 0x4630
 8009140:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009142:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009144:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009146:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009148:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800914a:	a909      	add	r1, sp, #36	; 0x24
 800914c:	4824      	ldr	r0, [pc, #144]	; (80091e0 <HAL_LTDC_MspInit+0x1ac>)
 800914e:	f7fa f981 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 8009152:	2383      	movs	r3, #131	; 0x83
 8009154:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009156:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009158:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800915a:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800915c:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800915e:	a909      	add	r1, sp, #36	; 0x24
 8009160:	4820      	ldr	r0, [pc, #128]	; (80091e4 <HAL_LTDC_MspInit+0x1b0>)
 8009162:	f7fa f977 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009170:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009172:	2309      	movs	r3, #9
 8009174:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009176:	a909      	add	r1, sp, #36	; 0x24
 8009178:	4638      	mov	r0, r7
 800917a:	f7fa f96b 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800917e:	2308      	movs	r3, #8
 8009180:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009182:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009186:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009188:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800918a:	a909      	add	r1, sp, #36	; 0x24
 800918c:	4816      	ldr	r0, [pc, #88]	; (80091e8 <HAL_LTDC_MspInit+0x1b4>)
 800918e:	f7fa f961 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8009192:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009198:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800919c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800919e:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80091a0:	a909      	add	r1, sp, #36	; 0x24
 80091a2:	4812      	ldr	r0, [pc, #72]	; (80091ec <HAL_LTDC_MspInit+0x1b8>)
 80091a4:	f7fa f956 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80091a8:	2320      	movs	r3, #32
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ac:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ae:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091b0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091b2:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80091b4:	a909      	add	r1, sp, #36	; 0x24
 80091b6:	480e      	ldr	r0, [pc, #56]	; (80091f0 <HAL_LTDC_MspInit+0x1bc>)
 80091b8:	f7fa f94c 	bl	8003454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80091bc:	4622      	mov	r2, r4
 80091be:	2105      	movs	r1, #5
 80091c0:	2058      	movs	r0, #88	; 0x58
 80091c2:	f7f9 fd01 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80091c6:	2058      	movs	r0, #88	; 0x58
 80091c8:	f7f9 fd30 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 80091cc:	e73e      	b.n	800904c <HAL_LTDC_MspInit+0x18>
 80091ce:	bf00      	nop
 80091d0:	40016800 	.word	0x40016800
 80091d4:	40020400 	.word	0x40020400
 80091d8:	40021800 	.word	0x40021800
 80091dc:	40020000 	.word	0x40020000
 80091e0:	40022000 	.word	0x40022000
 80091e4:	40022800 	.word	0x40022800
 80091e8:	40020c00 	.word	0x40020c00
 80091ec:	40021c00 	.word	0x40021c00
 80091f0:	40022400 	.word	0x40022400

080091f4 <HAL_SPI_MspInit>:
{
 80091f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f8:	2300      	movs	r3, #0
 80091fa:	9303      	str	r3, [sp, #12]
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	9306      	str	r3, [sp, #24]
 8009202:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8009204:	6802      	ldr	r2, [r0, #0]
 8009206:	4b21      	ldr	r3, [pc, #132]	; (800928c <HAL_SPI_MspInit+0x98>)
 8009208:	429a      	cmp	r2, r3
 800920a:	d001      	beq.n	8009210 <HAL_SPI_MspInit+0x1c>
}
 800920c:	b009      	add	sp, #36	; 0x24
 800920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009210:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8009214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800921a:	641a      	str	r2, [r3, #64]	; 0x40
 800921c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800921e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009222:	9200      	str	r2, [sp, #0]
 8009224:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
 800922e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009230:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800923a:	f042 0202 	orr.w	r2, r2, #2
 800923e:	631a      	str	r2, [r3, #48]	; 0x30
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	f003 0302 	and.w	r3, r3, #2
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800924a:	2402      	movs	r4, #2
 800924c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800924e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009250:	2703      	movs	r7, #3
 8009252:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009254:	2605      	movs	r6, #5
 8009256:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009258:	a903      	add	r1, sp, #12
 800925a:	480d      	ldr	r0, [pc, #52]	; (8009290 <HAL_SPI_MspInit+0x9c>)
 800925c:	f7fa f8fa 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009260:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009264:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009266:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009268:	2500      	movs	r5, #0
 800926a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800926c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800926e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009270:	a903      	add	r1, sp, #12
 8009272:	4808      	ldr	r0, [pc, #32]	; (8009294 <HAL_SPI_MspInit+0xa0>)
 8009274:	f7fa f8ee 	bl	8003454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8009278:	462a      	mov	r2, r5
 800927a:	4621      	mov	r1, r4
 800927c:	2024      	movs	r0, #36	; 0x24
 800927e:	f7f9 fca3 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009282:	2024      	movs	r0, #36	; 0x24
 8009284:	f7f9 fcd2 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 8009288:	e7c0      	b.n	800920c <HAL_SPI_MspInit+0x18>
 800928a:	bf00      	nop
 800928c:	40003800 	.word	0x40003800
 8009290:	40022000 	.word	0x40022000
 8009294:	40020400 	.word	0x40020400

08009298 <HAL_TIM_Base_MspInit>:
{
 8009298:	b500      	push	{lr}
 800929a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800929c:	6803      	ldr	r3, [r0, #0]
 800929e:	4a13      	ldr	r2, [pc, #76]	; (80092ec <HAL_TIM_Base_MspInit+0x54>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d005      	beq.n	80092b0 <HAL_TIM_Base_MspInit+0x18>
  else if(htim_base->Instance==TIM13)
 80092a4:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <HAL_TIM_Base_MspInit+0x58>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00d      	beq.n	80092c6 <HAL_TIM_Base_MspInit+0x2e>
}
 80092aa:	b003      	add	sp, #12
 80092ac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <HAL_TIM_Base_MspInit+0x5c>)
 80092b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	645a      	str	r2, [r3, #68]	; 0x44
 80092ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	9b00      	ldr	r3, [sp, #0]
 80092c4:	e7f1      	b.n	80092aa <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80092c6:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <HAL_TIM_Base_MspInit+0x5c>)
 80092c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 3, 0);
 80092da:	2200      	movs	r2, #0
 80092dc:	2103      	movs	r1, #3
 80092de:	202c      	movs	r0, #44	; 0x2c
 80092e0:	f7f9 fc72 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80092e4:	202c      	movs	r0, #44	; 0x2c
 80092e6:	f7f9 fca1 	bl	8002c2c <HAL_NVIC_EnableIRQ>
}
 80092ea:	e7de      	b.n	80092aa <HAL_TIM_Base_MspInit+0x12>
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40001c00 	.word	0x40001c00
 80092f4:	40023800 	.word	0x40023800

080092f8 <HAL_UART_MspInit>:
{
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092fc:	2300      	movs	r3, #0
 80092fe:	9303      	str	r3, [sp, #12]
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	9306      	str	r3, [sp, #24]
 8009306:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8009308:	6802      	ldr	r2, [r0, #0]
 800930a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800930e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8009312:	429a      	cmp	r2, r3
 8009314:	d001      	beq.n	800931a <HAL_UART_MspInit+0x22>
}
 8009316:	b008      	add	sp, #32
 8009318:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800931a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800931e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009320:	f042 0210 	orr.w	r2, r2, #16
 8009324:	645a      	str	r2, [r3, #68]	; 0x44
 8009326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009328:	f002 0210 	and.w	r2, r2, #16
 800932c:	9200      	str	r2, [sp, #0]
 800932e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009332:	f042 0202 	orr.w	r2, r2, #2
 8009336:	631a      	str	r2, [r3, #48]	; 0x30
 8009338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800933a:	f002 0202 	and.w	r2, r2, #2
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009344:	f042 0201 	orr.w	r2, r2, #1
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009354:	2380      	movs	r3, #128	; 0x80
 8009356:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009358:	2602      	movs	r6, #2
 800935a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935c:	2503      	movs	r5, #3
 800935e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009360:	2407      	movs	r4, #7
 8009362:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009364:	a903      	add	r1, sp, #12
 8009366:	4808      	ldr	r0, [pc, #32]	; (8009388 <HAL_UART_MspInit+0x90>)
 8009368:	f7fa f874 	bl	8003454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800936c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009370:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009372:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009374:	2300      	movs	r3, #0
 8009376:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009378:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800937a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937c:	a903      	add	r1, sp, #12
 800937e:	4803      	ldr	r0, [pc, #12]	; (800938c <HAL_UART_MspInit+0x94>)
 8009380:	f7fa f868 	bl	8003454 <HAL_GPIO_Init>
}
 8009384:	e7c7      	b.n	8009316 <HAL_UART_MspInit+0x1e>
 8009386:	bf00      	nop
 8009388:	40020400 	.word	0x40020400
 800938c:	40020000 	.word	0x40020000

08009390 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009390:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009392:	f7ff fd31 	bl	8008df8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009396:	bd08      	pop	{r3, pc}

08009398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009398:	b500      	push	{lr}
 800939a:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800939c:	2200      	movs	r2, #0
 800939e:	4601      	mov	r1, r0
 80093a0:	201d      	movs	r0, #29
 80093a2:	f7f9 fc11 	bl	8002bc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80093a6:	201d      	movs	r0, #29
 80093a8:	f7f9 fc40 	bl	8002c2c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80093ac:	4b15      	ldr	r3, [pc, #84]	; (8009404 <HAL_InitTick+0x6c>)
 80093ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093b0:	f042 0202 	orr.w	r2, r2, #2
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80093c0:	a902      	add	r1, sp, #8
 80093c2:	a803      	add	r0, sp, #12
 80093c4:	f7fb fa1e 	bl	8004804 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80093c8:	f7fb f9fc 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 80093cc:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80093ce:	480e      	ldr	r0, [pc, #56]	; (8009408 <HAL_InitTick+0x70>)
 80093d0:	fba0 2303 	umull	r2, r3, r0, r3
 80093d4:	0c9b      	lsrs	r3, r3, #18
 80093d6:	3b01      	subs	r3, #1
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80093d8:	480c      	ldr	r0, [pc, #48]	; (800940c <HAL_InitTick+0x74>)
 80093da:	4a0d      	ldr	r2, [pc, #52]	; (8009410 <HAL_InitTick+0x78>)
 80093dc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80093de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80093e2:	60c2      	str	r2, [r0, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80093e4:	6043      	str	r3, [r0, #4]
  htim3.Init.ClockDivision = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093ea:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80093ec:	f7fc fb9e 	bl	8005b2c <HAL_TIM_Base_Init>
 80093f0:	b118      	cbz	r0, 80093fa <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80093f2:	2001      	movs	r0, #1
}
 80093f4:	b009      	add	sp, #36	; 0x24
 80093f6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim3);
 80093fa:	4804      	ldr	r0, [pc, #16]	; (800940c <HAL_InitTick+0x74>)
 80093fc:	f7fc fa28 	bl	8005850 <HAL_TIM_Base_Start_IT>
 8009400:	e7f8      	b.n	80093f4 <HAL_InitTick+0x5c>
 8009402:	bf00      	nop
 8009404:	40023800 	.word	0x40023800
 8009408:	431bde83 	.word	0x431bde83
 800940c:	20004828 	.word	0x20004828
 8009410:	40000400 	.word	0x40000400

08009414 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009414:	4770      	bx	lr

08009416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009416:	e7fe      	b.n	8009416 <HardFault_Handler>

08009418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009418:	e7fe      	b.n	8009418 <MemManage_Handler>

0800941a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800941a:	e7fe      	b.n	800941a <BusFault_Handler>

0800941c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800941c:	e7fe      	b.n	800941c <UsageFault_Handler>

0800941e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800941e:	4770      	bx	lr

08009420 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009422:	2010      	movs	r0, #16
 8009424:	f7fa f914 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009428:	bd08      	pop	{r3, pc}
	...

0800942c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800942c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800942e:	4802      	ldr	r0, [pc, #8]	; (8009438 <ADC_IRQHandler+0xc>)
 8009430:	f7f9 fa3b 	bl	80028aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009434:	bd08      	pop	{r3, pc}
 8009436:	bf00      	nop
 8009438:	20004640 	.word	0x20004640

0800943c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800943c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800943e:	2040      	movs	r0, #64	; 0x40
 8009440:	f7fa f906 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009444:	2080      	movs	r0, #128	; 0x80
 8009446:	f7fa f903 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800944a:	bd08      	pop	{r3, pc}

0800944c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800944c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800944e:	4802      	ldr	r0, [pc, #8]	; (8009458 <TIM3_IRQHandler+0xc>)
 8009450:	f7fc fa18 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009454:	bd08      	pop	{r3, pc}
 8009456:	bf00      	nop
 8009458:	20004828 	.word	0x20004828

0800945c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800945c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800945e:	4802      	ldr	r0, [pc, #8]	; (8009468 <SPI2_IRQHandler+0xc>)
 8009460:	f7fc f92e 	bl	80056c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009464:	bd08      	pop	{r3, pc}
 8009466:	bf00      	nop
 8009468:	20004224 	.word	0x20004224

0800946c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800946c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800946e:	4802      	ldr	r0, [pc, #8]	; (8009478 <TIM8_UP_TIM13_IRQHandler+0xc>)
 8009470:	f7fc fa08 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8009474:	bd08      	pop	{r3, pc}
 8009476:	bf00      	nop
 8009478:	20004688 	.word	0x20004688

0800947c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800947c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800947e:	4802      	ldr	r0, [pc, #8]	; (8009488 <DMA2_Stream0_IRQHandler+0xc>)
 8009480:	f7f9 fd68 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009484:	bd08      	pop	{r3, pc}
 8009486:	bf00      	nop
 8009488:	2000451c 	.word	0x2000451c

0800948c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800948c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800948e:	4802      	ldr	r0, [pc, #8]	; (8009498 <LTDC_IRQHandler+0xc>)
 8009490:	f7fa fdc5 	bl	800401e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009494:	bd08      	pop	{r3, pc}
 8009496:	bf00      	nop
 8009498:	20004598 	.word	0x20004598

0800949c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800949c:	b508      	push	{r3, lr}
 800949e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094a0:	4a0b      	ldr	r2, [pc, #44]	; (80094d0 <_sbrk+0x34>)
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	b142      	cbz	r2, 80094b8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80094a6:	4a0a      	ldr	r2, [pc, #40]	; (80094d0 <_sbrk+0x34>)
 80094a8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80094aa:	4403      	add	r3, r0
 80094ac:	466a      	mov	r2, sp
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d806      	bhi.n	80094c0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80094b2:	4a07      	ldr	r2, [pc, #28]	; (80094d0 <_sbrk+0x34>)
 80094b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80094b6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80094b8:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <_sbrk+0x34>)
 80094ba:	4906      	ldr	r1, [pc, #24]	; (80094d4 <_sbrk+0x38>)
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	e7f2      	b.n	80094a6 <_sbrk+0xa>
		errno = ENOMEM;
 80094c0:	f000 f85c 	bl	800957c <__errno>
 80094c4:	230c      	movs	r3, #12
 80094c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094cc:	e7f3      	b.n	80094b6 <_sbrk+0x1a>
 80094ce:	bf00      	nop
 80094d0:	20004218 	.word	0x20004218
 80094d4:	20004870 	.word	0x20004870

080094d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80094d8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80094da:	4a0f      	ldr	r2, [pc, #60]	; (8009518 <SystemInit+0x40>)
 80094dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80094e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <SystemInit+0x44>)
 80094ea:	6819      	ldr	r1, [r3, #0]
 80094ec:	f041 0101 	orr.w	r1, r1, #1
 80094f0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80094f2:	2000      	movs	r0, #0
 80094f4:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80094f6:	681c      	ldr	r4, [r3, #0]
 80094f8:	4909      	ldr	r1, [pc, #36]	; (8009520 <SystemInit+0x48>)
 80094fa:	4021      	ands	r1, r4
 80094fc:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80094fe:	4909      	ldr	r1, [pc, #36]	; (8009524 <SystemInit+0x4c>)
 8009500:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009508:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800950a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800950c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009510:	6093      	str	r3, [r2, #8]
#endif
}
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	e000ed00 	.word	0xe000ed00
 800951c:	40023800 	.word	0x40023800
 8009520:	fef6ffff 	.word	0xfef6ffff
 8009524:	24003010 	.word	0x24003010

08009528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800952c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800952e:	e003      	b.n	8009538 <LoopCopyDataInit>

08009530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009536:	3104      	adds	r1, #4

08009538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009538:	480b      	ldr	r0, [pc, #44]	; (8009568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800953a:	4b0c      	ldr	r3, [pc, #48]	; (800956c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800953c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800953e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009540:	d3f6      	bcc.n	8009530 <CopyDataInit>
  ldr  r2, =_sbss
 8009542:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009544:	e002      	b.n	800954c <LoopFillZerobss>

08009546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009548:	f842 3b04 	str.w	r3, [r2], #4

0800954c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800954e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009550:	d3f9      	bcc.n	8009546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009552:	f7ff ffc1 	bl	80094d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009556:	f000 f817 	bl	8009588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800955a:	f7ff f931 	bl	80087c0 <main>
  bx  lr    
 800955e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009560:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009564:	0800fda0 	.word	0x0800fda0
  ldr  r0, =_sdata
 8009568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800956c:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8009570:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8009574:	2000486c 	.word	0x2000486c

08009578 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009578:	e7fe      	b.n	8009578 <CAN1_RX0_IRQHandler>
	...

0800957c <__errno>:
 800957c:	4b01      	ldr	r3, [pc, #4]	; (8009584 <__errno+0x8>)
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000058 	.word	0x20000058

08009588 <__libc_init_array>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4e0d      	ldr	r6, [pc, #52]	; (80095c0 <__libc_init_array+0x38>)
 800958c:	4c0d      	ldr	r4, [pc, #52]	; (80095c4 <__libc_init_array+0x3c>)
 800958e:	1ba4      	subs	r4, r4, r6
 8009590:	10a4      	asrs	r4, r4, #2
 8009592:	2500      	movs	r5, #0
 8009594:	42a5      	cmp	r5, r4
 8009596:	d109      	bne.n	80095ac <__libc_init_array+0x24>
 8009598:	4e0b      	ldr	r6, [pc, #44]	; (80095c8 <__libc_init_array+0x40>)
 800959a:	4c0c      	ldr	r4, [pc, #48]	; (80095cc <__libc_init_array+0x44>)
 800959c:	f003 fdfa 	bl	800d194 <_init>
 80095a0:	1ba4      	subs	r4, r4, r6
 80095a2:	10a4      	asrs	r4, r4, #2
 80095a4:	2500      	movs	r5, #0
 80095a6:	42a5      	cmp	r5, r4
 80095a8:	d105      	bne.n	80095b6 <__libc_init_array+0x2e>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095b0:	4798      	blx	r3
 80095b2:	3501      	adds	r5, #1
 80095b4:	e7ee      	b.n	8009594 <__libc_init_array+0xc>
 80095b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ba:	4798      	blx	r3
 80095bc:	3501      	adds	r5, #1
 80095be:	e7f2      	b.n	80095a6 <__libc_init_array+0x1e>
 80095c0:	0800fd98 	.word	0x0800fd98
 80095c4:	0800fd98 	.word	0x0800fd98
 80095c8:	0800fd98 	.word	0x0800fd98
 80095cc:	0800fd9c 	.word	0x0800fd9c

080095d0 <__itoa>:
 80095d0:	1e93      	subs	r3, r2, #2
 80095d2:	2b22      	cmp	r3, #34	; 0x22
 80095d4:	b510      	push	{r4, lr}
 80095d6:	460c      	mov	r4, r1
 80095d8:	d904      	bls.n	80095e4 <__itoa+0x14>
 80095da:	2300      	movs	r3, #0
 80095dc:	700b      	strb	r3, [r1, #0]
 80095de:	461c      	mov	r4, r3
 80095e0:	4620      	mov	r0, r4
 80095e2:	bd10      	pop	{r4, pc}
 80095e4:	2a0a      	cmp	r2, #10
 80095e6:	d109      	bne.n	80095fc <__itoa+0x2c>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	da07      	bge.n	80095fc <__itoa+0x2c>
 80095ec:	232d      	movs	r3, #45	; 0x2d
 80095ee:	700b      	strb	r3, [r1, #0]
 80095f0:	4240      	negs	r0, r0
 80095f2:	2101      	movs	r1, #1
 80095f4:	4421      	add	r1, r4
 80095f6:	f001 fd2d 	bl	800b054 <__utoa>
 80095fa:	e7f1      	b.n	80095e0 <__itoa+0x10>
 80095fc:	2100      	movs	r1, #0
 80095fe:	e7f9      	b.n	80095f4 <__itoa+0x24>

08009600 <itoa>:
 8009600:	f7ff bfe6 	b.w	80095d0 <__itoa>

08009604 <memcpy>:
 8009604:	b510      	push	{r4, lr}
 8009606:	1e43      	subs	r3, r0, #1
 8009608:	440a      	add	r2, r1
 800960a:	4291      	cmp	r1, r2
 800960c:	d100      	bne.n	8009610 <memcpy+0xc>
 800960e:	bd10      	pop	{r4, pc}
 8009610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009618:	e7f7      	b.n	800960a <memcpy+0x6>

0800961a <memset>:
 800961a:	4402      	add	r2, r0
 800961c:	4603      	mov	r3, r0
 800961e:	4293      	cmp	r3, r2
 8009620:	d100      	bne.n	8009624 <memset+0xa>
 8009622:	4770      	bx	lr
 8009624:	f803 1b01 	strb.w	r1, [r3], #1
 8009628:	e7f9      	b.n	800961e <memset+0x4>

0800962a <__cvt>:
 800962a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800962e:	ec55 4b10 	vmov	r4, r5, d0
 8009632:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009638:	2d00      	cmp	r5, #0
 800963a:	460e      	mov	r6, r1
 800963c:	4691      	mov	r9, r2
 800963e:	4619      	mov	r1, r3
 8009640:	bfb8      	it	lt
 8009642:	4622      	movlt	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f027 0720 	bic.w	r7, r7, #32
 800964a:	bfbb      	ittet	lt
 800964c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009650:	461d      	movlt	r5, r3
 8009652:	2300      	movge	r3, #0
 8009654:	232d      	movlt	r3, #45	; 0x2d
 8009656:	bfb8      	it	lt
 8009658:	4614      	movlt	r4, r2
 800965a:	2f46      	cmp	r7, #70	; 0x46
 800965c:	700b      	strb	r3, [r1, #0]
 800965e:	d004      	beq.n	800966a <__cvt+0x40>
 8009660:	2f45      	cmp	r7, #69	; 0x45
 8009662:	d100      	bne.n	8009666 <__cvt+0x3c>
 8009664:	3601      	adds	r6, #1
 8009666:	2102      	movs	r1, #2
 8009668:	e000      	b.n	800966c <__cvt+0x42>
 800966a:	2103      	movs	r1, #3
 800966c:	ab03      	add	r3, sp, #12
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	ab02      	add	r3, sp, #8
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	4632      	mov	r2, r6
 8009676:	4653      	mov	r3, sl
 8009678:	ec45 4b10 	vmov	d0, r4, r5
 800967c:	f001 fdb4 	bl	800b1e8 <_dtoa_r>
 8009680:	2f47      	cmp	r7, #71	; 0x47
 8009682:	4680      	mov	r8, r0
 8009684:	d102      	bne.n	800968c <__cvt+0x62>
 8009686:	f019 0f01 	tst.w	r9, #1
 800968a:	d026      	beq.n	80096da <__cvt+0xb0>
 800968c:	2f46      	cmp	r7, #70	; 0x46
 800968e:	eb08 0906 	add.w	r9, r8, r6
 8009692:	d111      	bne.n	80096b8 <__cvt+0x8e>
 8009694:	f898 3000 	ldrb.w	r3, [r8]
 8009698:	2b30      	cmp	r3, #48	; 0x30
 800969a:	d10a      	bne.n	80096b2 <__cvt+0x88>
 800969c:	2200      	movs	r2, #0
 800969e:	2300      	movs	r3, #0
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f7 fa30 	bl	8000b08 <__aeabi_dcmpeq>
 80096a8:	b918      	cbnz	r0, 80096b2 <__cvt+0x88>
 80096aa:	f1c6 0601 	rsb	r6, r6, #1
 80096ae:	f8ca 6000 	str.w	r6, [sl]
 80096b2:	f8da 3000 	ldr.w	r3, [sl]
 80096b6:	4499      	add	r9, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f7 fa22 	bl	8000b08 <__aeabi_dcmpeq>
 80096c4:	b938      	cbnz	r0, 80096d6 <__cvt+0xac>
 80096c6:	2230      	movs	r2, #48	; 0x30
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	454b      	cmp	r3, r9
 80096cc:	d205      	bcs.n	80096da <__cvt+0xb0>
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e7f8      	b.n	80096c8 <__cvt+0x9e>
 80096d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096de:	eba3 0308 	sub.w	r3, r3, r8
 80096e2:	4640      	mov	r0, r8
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	b004      	add	sp, #16
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080096ec <__exponent>:
 80096ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ee:	2900      	cmp	r1, #0
 80096f0:	4604      	mov	r4, r0
 80096f2:	bfba      	itte	lt
 80096f4:	4249      	neglt	r1, r1
 80096f6:	232d      	movlt	r3, #45	; 0x2d
 80096f8:	232b      	movge	r3, #43	; 0x2b
 80096fa:	2909      	cmp	r1, #9
 80096fc:	f804 2b02 	strb.w	r2, [r4], #2
 8009700:	7043      	strb	r3, [r0, #1]
 8009702:	dd20      	ble.n	8009746 <__exponent+0x5a>
 8009704:	f10d 0307 	add.w	r3, sp, #7
 8009708:	461f      	mov	r7, r3
 800970a:	260a      	movs	r6, #10
 800970c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009710:	fb06 1115 	mls	r1, r6, r5, r1
 8009714:	3130      	adds	r1, #48	; 0x30
 8009716:	2d09      	cmp	r5, #9
 8009718:	f803 1c01 	strb.w	r1, [r3, #-1]
 800971c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009720:	4629      	mov	r1, r5
 8009722:	dc09      	bgt.n	8009738 <__exponent+0x4c>
 8009724:	3130      	adds	r1, #48	; 0x30
 8009726:	3b02      	subs	r3, #2
 8009728:	f802 1c01 	strb.w	r1, [r2, #-1]
 800972c:	42bb      	cmp	r3, r7
 800972e:	4622      	mov	r2, r4
 8009730:	d304      	bcc.n	800973c <__exponent+0x50>
 8009732:	1a10      	subs	r0, r2, r0
 8009734:	b003      	add	sp, #12
 8009736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009738:	4613      	mov	r3, r2
 800973a:	e7e7      	b.n	800970c <__exponent+0x20>
 800973c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009740:	f804 2b01 	strb.w	r2, [r4], #1
 8009744:	e7f2      	b.n	800972c <__exponent+0x40>
 8009746:	2330      	movs	r3, #48	; 0x30
 8009748:	4419      	add	r1, r3
 800974a:	7083      	strb	r3, [r0, #2]
 800974c:	1d02      	adds	r2, r0, #4
 800974e:	70c1      	strb	r1, [r0, #3]
 8009750:	e7ef      	b.n	8009732 <__exponent+0x46>
	...

08009754 <_printf_float>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	b08d      	sub	sp, #52	; 0x34
 800975a:	460c      	mov	r4, r1
 800975c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009760:	4616      	mov	r6, r2
 8009762:	461f      	mov	r7, r3
 8009764:	4605      	mov	r5, r0
 8009766:	f002 fe23 	bl	800c3b0 <_localeconv_r>
 800976a:	6803      	ldr	r3, [r0, #0]
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	4618      	mov	r0, r3
 8009770:	f7f6 fd4e 	bl	8000210 <strlen>
 8009774:	2300      	movs	r3, #0
 8009776:	930a      	str	r3, [sp, #40]	; 0x28
 8009778:	f8d8 3000 	ldr.w	r3, [r8]
 800977c:	9005      	str	r0, [sp, #20]
 800977e:	3307      	adds	r3, #7
 8009780:	f023 0307 	bic.w	r3, r3, #7
 8009784:	f103 0208 	add.w	r2, r3, #8
 8009788:	f894 a018 	ldrb.w	sl, [r4, #24]
 800978c:	f8d4 b000 	ldr.w	fp, [r4]
 8009790:	f8c8 2000 	str.w	r2, [r8]
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800979c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ae:	4ba7      	ldr	r3, [pc, #668]	; (8009a4c <_printf_float+0x2f8>)
 80097b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097b4:	f7f7 f9da 	bl	8000b6c <__aeabi_dcmpun>
 80097b8:	bb70      	cbnz	r0, 8009818 <_printf_float+0xc4>
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097be:	4ba3      	ldr	r3, [pc, #652]	; (8009a4c <_printf_float+0x2f8>)
 80097c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097c4:	f7f7 f9b4 	bl	8000b30 <__aeabi_dcmple>
 80097c8:	bb30      	cbnz	r0, 8009818 <_printf_float+0xc4>
 80097ca:	2200      	movs	r2, #0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
 80097d2:	f7f7 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80097d6:	b110      	cbz	r0, 80097de <_printf_float+0x8a>
 80097d8:	232d      	movs	r3, #45	; 0x2d
 80097da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097de:	4a9c      	ldr	r2, [pc, #624]	; (8009a50 <_printf_float+0x2fc>)
 80097e0:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <_printf_float+0x300>)
 80097e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80097e6:	bf8c      	ite	hi
 80097e8:	4690      	movhi	r8, r2
 80097ea:	4698      	movls	r8, r3
 80097ec:	2303      	movs	r3, #3
 80097ee:	f02b 0204 	bic.w	r2, fp, #4
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	f04f 0900 	mov.w	r9, #0
 80097fa:	9700      	str	r7, [sp, #0]
 80097fc:	4633      	mov	r3, r6
 80097fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f9e6 	bl	8009bd4 <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	f040 808d 	bne.w	8009928 <_printf_float+0x1d4>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009812:	b00d      	add	sp, #52	; 0x34
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f7 f9a4 	bl	8000b6c <__aeabi_dcmpun>
 8009824:	b110      	cbz	r0, 800982c <_printf_float+0xd8>
 8009826:	4a8c      	ldr	r2, [pc, #560]	; (8009a58 <_printf_float+0x304>)
 8009828:	4b8c      	ldr	r3, [pc, #560]	; (8009a5c <_printf_float+0x308>)
 800982a:	e7da      	b.n	80097e2 <_printf_float+0x8e>
 800982c:	6861      	ldr	r1, [r4, #4]
 800982e:	1c4b      	adds	r3, r1, #1
 8009830:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009834:	a80a      	add	r0, sp, #40	; 0x28
 8009836:	d13e      	bne.n	80098b6 <_printf_float+0x162>
 8009838:	2306      	movs	r3, #6
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	2300      	movs	r3, #0
 800983e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009842:	ab09      	add	r3, sp, #36	; 0x24
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	ec49 8b10 	vmov	d0, r8, r9
 800984a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	f8cd a004 	str.w	sl, [sp, #4]
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4628      	mov	r0, r5
 8009858:	f7ff fee7 	bl	800962a <__cvt>
 800985c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009860:	2b47      	cmp	r3, #71	; 0x47
 8009862:	4680      	mov	r8, r0
 8009864:	d109      	bne.n	800987a <_printf_float+0x126>
 8009866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009868:	1cd8      	adds	r0, r3, #3
 800986a:	db02      	blt.n	8009872 <_printf_float+0x11e>
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	4293      	cmp	r3, r2
 8009870:	dd47      	ble.n	8009902 <_printf_float+0x1ae>
 8009872:	f1aa 0a02 	sub.w	sl, sl, #2
 8009876:	fa5f fa8a 	uxtb.w	sl, sl
 800987a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800987e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009880:	d824      	bhi.n	80098cc <_printf_float+0x178>
 8009882:	3901      	subs	r1, #1
 8009884:	4652      	mov	r2, sl
 8009886:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800988a:	9109      	str	r1, [sp, #36]	; 0x24
 800988c:	f7ff ff2e 	bl	80096ec <__exponent>
 8009890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009892:	1813      	adds	r3, r2, r0
 8009894:	2a01      	cmp	r2, #1
 8009896:	4681      	mov	r9, r0
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	dc02      	bgt.n	80098a2 <_printf_float+0x14e>
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	07d1      	lsls	r1, r2, #31
 80098a0:	d501      	bpl.n	80098a6 <_printf_float+0x152>
 80098a2:	3301      	adds	r3, #1
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0a5      	beq.n	80097fa <_printf_float+0xa6>
 80098ae:	232d      	movs	r3, #45	; 0x2d
 80098b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b4:	e7a1      	b.n	80097fa <_printf_float+0xa6>
 80098b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80098ba:	f000 8177 	beq.w	8009bac <_printf_float+0x458>
 80098be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80098c2:	d1bb      	bne.n	800983c <_printf_float+0xe8>
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d1b9      	bne.n	800983c <_printf_float+0xe8>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7b6      	b.n	800983a <_printf_float+0xe6>
 80098cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80098d0:	d119      	bne.n	8009906 <_printf_float+0x1b2>
 80098d2:	2900      	cmp	r1, #0
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	dd0c      	ble.n	80098f2 <_printf_float+0x19e>
 80098d8:	6121      	str	r1, [r4, #16]
 80098da:	b913      	cbnz	r3, 80098e2 <_printf_float+0x18e>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	07d2      	lsls	r2, r2, #31
 80098e0:	d502      	bpl.n	80098e8 <_printf_float+0x194>
 80098e2:	3301      	adds	r3, #1
 80098e4:	440b      	add	r3, r1
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80098ec:	f04f 0900 	mov.w	r9, #0
 80098f0:	e7d9      	b.n	80098a6 <_printf_float+0x152>
 80098f2:	b913      	cbnz	r3, 80098fa <_printf_float+0x1a6>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	07d0      	lsls	r0, r2, #31
 80098f8:	d501      	bpl.n	80098fe <_printf_float+0x1aa>
 80098fa:	3302      	adds	r3, #2
 80098fc:	e7f3      	b.n	80098e6 <_printf_float+0x192>
 80098fe:	2301      	movs	r3, #1
 8009900:	e7f1      	b.n	80098e6 <_printf_float+0x192>
 8009902:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009906:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800990a:	4293      	cmp	r3, r2
 800990c:	db05      	blt.n	800991a <_printf_float+0x1c6>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	07d1      	lsls	r1, r2, #31
 8009914:	d5e8      	bpl.n	80098e8 <_printf_float+0x194>
 8009916:	3301      	adds	r3, #1
 8009918:	e7e5      	b.n	80098e6 <_printf_float+0x192>
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfd4      	ite	le
 800991e:	f1c3 0302 	rsble	r3, r3, #2
 8009922:	2301      	movgt	r3, #1
 8009924:	4413      	add	r3, r2
 8009926:	e7de      	b.n	80098e6 <_printf_float+0x192>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	055a      	lsls	r2, r3, #21
 800992c:	d407      	bmi.n	800993e <_printf_float+0x1ea>
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	4642      	mov	r2, r8
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	d12b      	bne.n	8009994 <_printf_float+0x240>
 800993c:	e767      	b.n	800980e <_printf_float+0xba>
 800993e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009942:	f240 80dc 	bls.w	8009afe <_printf_float+0x3aa>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800994e:	f7f7 f8db 	bl	8000b08 <__aeabi_dcmpeq>
 8009952:	2800      	cmp	r0, #0
 8009954:	d033      	beq.n	80099be <_printf_float+0x26a>
 8009956:	2301      	movs	r3, #1
 8009958:	4a41      	ldr	r2, [pc, #260]	; (8009a60 <_printf_float+0x30c>)
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f af54 	beq.w	800980e <_printf_float+0xba>
 8009966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996a:	429a      	cmp	r2, r3
 800996c:	db02      	blt.n	8009974 <_printf_float+0x220>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	07d8      	lsls	r0, r3, #31
 8009972:	d50f      	bpl.n	8009994 <_printf_float+0x240>
 8009974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f af45 	beq.w	800980e <_printf_float+0xba>
 8009984:	f04f 0800 	mov.w	r8, #0
 8009988:	f104 091a 	add.w	r9, r4, #26
 800998c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998e:	3b01      	subs	r3, #1
 8009990:	4543      	cmp	r3, r8
 8009992:	dc09      	bgt.n	80099a8 <_printf_float+0x254>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	f100 8103 	bmi.w	8009ba2 <_printf_float+0x44e>
 800999c:	68e0      	ldr	r0, [r4, #12]
 800999e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a0:	4298      	cmp	r0, r3
 80099a2:	bfb8      	it	lt
 80099a4:	4618      	movlt	r0, r3
 80099a6:	e734      	b.n	8009812 <_printf_float+0xbe>
 80099a8:	2301      	movs	r3, #1
 80099aa:	464a      	mov	r2, r9
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af2b 	beq.w	800980e <_printf_float+0xba>
 80099b8:	f108 0801 	add.w	r8, r8, #1
 80099bc:	e7e6      	b.n	800998c <_printf_float+0x238>
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc2b      	bgt.n	8009a1c <_printf_float+0x2c8>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4a26      	ldr	r2, [pc, #152]	; (8009a60 <_printf_float+0x30c>)
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af1d 	beq.w	800980e <_printf_float+0xba>
 80099d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d6:	b923      	cbnz	r3, 80099e2 <_printf_float+0x28e>
 80099d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099da:	b913      	cbnz	r3, 80099e2 <_printf_float+0x28e>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d5d8      	bpl.n	8009994 <_printf_float+0x240>
 80099e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f af0e 	beq.w	800980e <_printf_float+0xba>
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	f104 0a1a 	add.w	sl, r4, #26
 80099fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fc:	425b      	negs	r3, r3
 80099fe:	454b      	cmp	r3, r9
 8009a00:	dc01      	bgt.n	8009a06 <_printf_float+0x2b2>
 8009a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a04:	e794      	b.n	8009930 <_printf_float+0x1dc>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4652      	mov	r2, sl
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f aefc 	beq.w	800980e <_printf_float+0xba>
 8009a16:	f109 0901 	add.w	r9, r9, #1
 8009a1a:	e7ee      	b.n	80099fa <_printf_float+0x2a6>
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bfa8      	it	ge
 8009a24:	461a      	movge	r2, r3
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	4691      	mov	r9, r2
 8009a2a:	dd07      	ble.n	8009a3c <_printf_float+0x2e8>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4642      	mov	r2, r8
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f aee9 	beq.w	800980e <_printf_float+0xba>
 8009a3c:	f104 031a 	add.w	r3, r4, #26
 8009a40:	f04f 0b00 	mov.w	fp, #0
 8009a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a48:	9306      	str	r3, [sp, #24]
 8009a4a:	e015      	b.n	8009a78 <_printf_float+0x324>
 8009a4c:	7fefffff 	.word	0x7fefffff
 8009a50:	0800fab8 	.word	0x0800fab8
 8009a54:	0800fab4 	.word	0x0800fab4
 8009a58:	0800fac0 	.word	0x0800fac0
 8009a5c:	0800fabc 	.word	0x0800fabc
 8009a60:	0800fac4 	.word	0x0800fac4
 8009a64:	2301      	movs	r3, #1
 8009a66:	9a06      	ldr	r2, [sp, #24]
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f43f aecd 	beq.w	800980e <_printf_float+0xba>
 8009a74:	f10b 0b01 	add.w	fp, fp, #1
 8009a78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a7c:	ebaa 0309 	sub.w	r3, sl, r9
 8009a80:	455b      	cmp	r3, fp
 8009a82:	dcef      	bgt.n	8009a64 <_printf_float+0x310>
 8009a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	44d0      	add	r8, sl
 8009a8c:	db15      	blt.n	8009aba <_printf_float+0x366>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	d412      	bmi.n	8009aba <_printf_float+0x366>
 8009a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a98:	eba3 020a 	sub.w	r2, r3, sl
 8009a9c:	eba3 0a01 	sub.w	sl, r3, r1
 8009aa0:	4592      	cmp	sl, r2
 8009aa2:	bfa8      	it	ge
 8009aa4:	4692      	movge	sl, r2
 8009aa6:	f1ba 0f00 	cmp.w	sl, #0
 8009aaa:	dc0e      	bgt.n	8009aca <_printf_float+0x376>
 8009aac:	f04f 0800 	mov.w	r8, #0
 8009ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ab4:	f104 091a 	add.w	r9, r4, #26
 8009ab8:	e019      	b.n	8009aee <_printf_float+0x39a>
 8009aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b8      	blx	r7
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d1e5      	bne.n	8009a94 <_printf_float+0x340>
 8009ac8:	e6a1      	b.n	800980e <_printf_float+0xba>
 8009aca:	4653      	mov	r3, sl
 8009acc:	4642      	mov	r2, r8
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d1e9      	bne.n	8009aac <_printf_float+0x358>
 8009ad8:	e699      	b.n	800980e <_printf_float+0xba>
 8009ada:	2301      	movs	r3, #1
 8009adc:	464a      	mov	r2, r9
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b8      	blx	r7
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f43f ae92 	beq.w	800980e <_printf_float+0xba>
 8009aea:	f108 0801 	add.w	r8, r8, #1
 8009aee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	eba3 030a 	sub.w	r3, r3, sl
 8009af8:	4543      	cmp	r3, r8
 8009afa:	dcee      	bgt.n	8009ada <_printf_float+0x386>
 8009afc:	e74a      	b.n	8009994 <_printf_float+0x240>
 8009afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b00:	2a01      	cmp	r2, #1
 8009b02:	dc01      	bgt.n	8009b08 <_printf_float+0x3b4>
 8009b04:	07db      	lsls	r3, r3, #31
 8009b06:	d53a      	bpl.n	8009b7e <_printf_float+0x42a>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f ae7b 	beq.w	800980e <_printf_float+0xba>
 8009b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f108 0801 	add.w	r8, r8, #1
 8009b28:	f43f ae71 	beq.w	800980e <_printf_float+0xba>
 8009b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f7f6 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8009b3e:	b9c8      	cbnz	r0, 8009b74 <_printf_float+0x420>
 8009b40:	4653      	mov	r3, sl
 8009b42:	4642      	mov	r2, r8
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d10e      	bne.n	8009b6c <_printf_float+0x418>
 8009b4e:	e65e      	b.n	800980e <_printf_float+0xba>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f ae57 	beq.w	800980e <_printf_float+0xba>
 8009b60:	f108 0801 	add.w	r8, r8, #1
 8009b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4543      	cmp	r3, r8
 8009b6a:	dcf1      	bgt.n	8009b50 <_printf_float+0x3fc>
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b72:	e6de      	b.n	8009932 <_printf_float+0x1de>
 8009b74:	f04f 0800 	mov.w	r8, #0
 8009b78:	f104 0a1a 	add.w	sl, r4, #26
 8009b7c:	e7f2      	b.n	8009b64 <_printf_float+0x410>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e7df      	b.n	8009b42 <_printf_float+0x3ee>
 8009b82:	2301      	movs	r3, #1
 8009b84:	464a      	mov	r2, r9
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f ae3e 	beq.w	800980e <_printf_float+0xba>
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	68e3      	ldr	r3, [r4, #12]
 8009b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	4543      	cmp	r3, r8
 8009b9e:	dcf0      	bgt.n	8009b82 <_printf_float+0x42e>
 8009ba0:	e6fc      	b.n	800999c <_printf_float+0x248>
 8009ba2:	f04f 0800 	mov.w	r8, #0
 8009ba6:	f104 0919 	add.w	r9, r4, #25
 8009baa:	e7f4      	b.n	8009b96 <_printf_float+0x442>
 8009bac:	2900      	cmp	r1, #0
 8009bae:	f43f ae8b 	beq.w	80098c8 <_printf_float+0x174>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bb8:	ab09      	add	r3, sp, #36	; 0x24
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	ec49 8b10 	vmov	d0, r8, r9
 8009bc0:	6022      	str	r2, [r4, #0]
 8009bc2:	f8cd a004 	str.w	sl, [sp, #4]
 8009bc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7ff fd2d 	bl	800962a <__cvt>
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	e648      	b.n	8009866 <_printf_float+0x112>

08009bd4 <_printf_common>:
 8009bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	4691      	mov	r9, r2
 8009bda:	461f      	mov	r7, r3
 8009bdc:	688a      	ldr	r2, [r1, #8]
 8009bde:	690b      	ldr	r3, [r1, #16]
 8009be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	bfb8      	it	lt
 8009be8:	4613      	movlt	r3, r2
 8009bea:	f8c9 3000 	str.w	r3, [r9]
 8009bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	b112      	cbz	r2, 8009bfe <_printf_common+0x2a>
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	f8c9 3000 	str.w	r3, [r9]
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	0699      	lsls	r1, r3, #26
 8009c02:	bf42      	ittt	mi
 8009c04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c08:	3302      	addmi	r3, #2
 8009c0a:	f8c9 3000 	strmi.w	r3, [r9]
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	f015 0506 	ands.w	r5, r5, #6
 8009c14:	d107      	bne.n	8009c26 <_printf_common+0x52>
 8009c16:	f104 0a19 	add.w	sl, r4, #25
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	42ab      	cmp	r3, r5
 8009c24:	dc28      	bgt.n	8009c78 <_printf_common+0xa4>
 8009c26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	3300      	adds	r3, #0
 8009c2e:	bf18      	it	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	0692      	lsls	r2, r2, #26
 8009c34:	d42d      	bmi.n	8009c92 <_printf_common+0xbe>
 8009c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	47c0      	blx	r8
 8009c40:	3001      	adds	r0, #1
 8009c42:	d020      	beq.n	8009c86 <_printf_common+0xb2>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	68e5      	ldr	r5, [r4, #12]
 8009c48:	f8d9 2000 	ldr.w	r2, [r9]
 8009c4c:	f003 0306 	and.w	r3, r3, #6
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	bf08      	it	eq
 8009c54:	1aad      	subeq	r5, r5, r2
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	bf0c      	ite	eq
 8009c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c60:	2500      	movne	r5, #0
 8009c62:	4293      	cmp	r3, r2
 8009c64:	bfc4      	itt	gt
 8009c66:	1a9b      	subgt	r3, r3, r2
 8009c68:	18ed      	addgt	r5, r5, r3
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	341a      	adds	r4, #26
 8009c70:	454d      	cmp	r5, r9
 8009c72:	d11a      	bne.n	8009caa <_printf_common+0xd6>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e008      	b.n	8009c8a <_printf_common+0xb6>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	4630      	mov	r0, r6
 8009c80:	47c0      	blx	r8
 8009c82:	3001      	adds	r0, #1
 8009c84:	d103      	bne.n	8009c8e <_printf_common+0xba>
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	3501      	adds	r5, #1
 8009c90:	e7c3      	b.n	8009c1a <_printf_common+0x46>
 8009c92:	18e1      	adds	r1, r4, r3
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	2030      	movs	r0, #48	; 0x30
 8009c98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c9c:	4422      	add	r2, r4
 8009c9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	e7c5      	b.n	8009c36 <_printf_common+0x62>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4622      	mov	r2, r4
 8009cae:	4639      	mov	r1, r7
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	47c0      	blx	r8
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0e6      	beq.n	8009c86 <_printf_common+0xb2>
 8009cb8:	f109 0901 	add.w	r9, r9, #1
 8009cbc:	e7d8      	b.n	8009c70 <_printf_common+0x9c>
	...

08009cc0 <_printf_i>:
 8009cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cc8:	460c      	mov	r4, r1
 8009cca:	7e09      	ldrb	r1, [r1, #24]
 8009ccc:	b085      	sub	sp, #20
 8009cce:	296e      	cmp	r1, #110	; 0x6e
 8009cd0:	4617      	mov	r7, r2
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	4698      	mov	r8, r3
 8009cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd8:	f000 80b3 	beq.w	8009e42 <_printf_i+0x182>
 8009cdc:	d822      	bhi.n	8009d24 <_printf_i+0x64>
 8009cde:	2963      	cmp	r1, #99	; 0x63
 8009ce0:	d036      	beq.n	8009d50 <_printf_i+0x90>
 8009ce2:	d80a      	bhi.n	8009cfa <_printf_i+0x3a>
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	f000 80b9 	beq.w	8009e5c <_printf_i+0x19c>
 8009cea:	2958      	cmp	r1, #88	; 0x58
 8009cec:	f000 8083 	beq.w	8009df6 <_printf_i+0x136>
 8009cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009cf8:	e032      	b.n	8009d60 <_printf_i+0xa0>
 8009cfa:	2964      	cmp	r1, #100	; 0x64
 8009cfc:	d001      	beq.n	8009d02 <_printf_i+0x42>
 8009cfe:	2969      	cmp	r1, #105	; 0x69
 8009d00:	d1f6      	bne.n	8009cf0 <_printf_i+0x30>
 8009d02:	6820      	ldr	r0, [r4, #0]
 8009d04:	6813      	ldr	r3, [r2, #0]
 8009d06:	0605      	lsls	r5, r0, #24
 8009d08:	f103 0104 	add.w	r1, r3, #4
 8009d0c:	d52a      	bpl.n	8009d64 <_printf_i+0xa4>
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da03      	bge.n	8009d1e <_printf_i+0x5e>
 8009d16:	222d      	movs	r2, #45	; 0x2d
 8009d18:	425b      	negs	r3, r3
 8009d1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d1e:	486f      	ldr	r0, [pc, #444]	; (8009edc <_printf_i+0x21c>)
 8009d20:	220a      	movs	r2, #10
 8009d22:	e039      	b.n	8009d98 <_printf_i+0xd8>
 8009d24:	2973      	cmp	r1, #115	; 0x73
 8009d26:	f000 809d 	beq.w	8009e64 <_printf_i+0x1a4>
 8009d2a:	d808      	bhi.n	8009d3e <_printf_i+0x7e>
 8009d2c:	296f      	cmp	r1, #111	; 0x6f
 8009d2e:	d020      	beq.n	8009d72 <_printf_i+0xb2>
 8009d30:	2970      	cmp	r1, #112	; 0x70
 8009d32:	d1dd      	bne.n	8009cf0 <_printf_i+0x30>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	f043 0320 	orr.w	r3, r3, #32
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	e003      	b.n	8009d46 <_printf_i+0x86>
 8009d3e:	2975      	cmp	r1, #117	; 0x75
 8009d40:	d017      	beq.n	8009d72 <_printf_i+0xb2>
 8009d42:	2978      	cmp	r1, #120	; 0x78
 8009d44:	d1d4      	bne.n	8009cf0 <_printf_i+0x30>
 8009d46:	2378      	movs	r3, #120	; 0x78
 8009d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d4c:	4864      	ldr	r0, [pc, #400]	; (8009ee0 <_printf_i+0x220>)
 8009d4e:	e055      	b.n	8009dfc <_printf_i+0x13c>
 8009d50:	6813      	ldr	r3, [r2, #0]
 8009d52:	1d19      	adds	r1, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6011      	str	r1, [r2, #0]
 8009d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d60:	2301      	movs	r3, #1
 8009d62:	e08c      	b.n	8009e7e <_printf_i+0x1be>
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6011      	str	r1, [r2, #0]
 8009d68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d6c:	bf18      	it	ne
 8009d6e:	b21b      	sxthne	r3, r3
 8009d70:	e7cf      	b.n	8009d12 <_printf_i+0x52>
 8009d72:	6813      	ldr	r3, [r2, #0]
 8009d74:	6825      	ldr	r5, [r4, #0]
 8009d76:	1d18      	adds	r0, r3, #4
 8009d78:	6010      	str	r0, [r2, #0]
 8009d7a:	0628      	lsls	r0, r5, #24
 8009d7c:	d501      	bpl.n	8009d82 <_printf_i+0xc2>
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	e002      	b.n	8009d88 <_printf_i+0xc8>
 8009d82:	0668      	lsls	r0, r5, #25
 8009d84:	d5fb      	bpl.n	8009d7e <_printf_i+0xbe>
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	4854      	ldr	r0, [pc, #336]	; (8009edc <_printf_i+0x21c>)
 8009d8a:	296f      	cmp	r1, #111	; 0x6f
 8009d8c:	bf14      	ite	ne
 8009d8e:	220a      	movne	r2, #10
 8009d90:	2208      	moveq	r2, #8
 8009d92:	2100      	movs	r1, #0
 8009d94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d98:	6865      	ldr	r5, [r4, #4]
 8009d9a:	60a5      	str	r5, [r4, #8]
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	f2c0 8095 	blt.w	8009ecc <_printf_i+0x20c>
 8009da2:	6821      	ldr	r1, [r4, #0]
 8009da4:	f021 0104 	bic.w	r1, r1, #4
 8009da8:	6021      	str	r1, [r4, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d13d      	bne.n	8009e2a <_printf_i+0x16a>
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	f040 808e 	bne.w	8009ed0 <_printf_i+0x210>
 8009db4:	4665      	mov	r5, ip
 8009db6:	2a08      	cmp	r2, #8
 8009db8:	d10b      	bne.n	8009dd2 <_printf_i+0x112>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	07db      	lsls	r3, r3, #31
 8009dbe:	d508      	bpl.n	8009dd2 <_printf_i+0x112>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	bfde      	ittt	le
 8009dc8:	2330      	movle	r3, #48	; 0x30
 8009dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009dd2:	ebac 0305 	sub.w	r3, ip, r5
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	f8cd 8000 	str.w	r8, [sp]
 8009ddc:	463b      	mov	r3, r7
 8009dde:	aa03      	add	r2, sp, #12
 8009de0:	4621      	mov	r1, r4
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff fef6 	bl	8009bd4 <_printf_common>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d14d      	bne.n	8009e88 <_printf_i+0x1c8>
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df0:	b005      	add	sp, #20
 8009df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df6:	4839      	ldr	r0, [pc, #228]	; (8009edc <_printf_i+0x21c>)
 8009df8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009dfc:	6813      	ldr	r3, [r2, #0]
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	1d1d      	adds	r5, r3, #4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6015      	str	r5, [r2, #0]
 8009e06:	060a      	lsls	r2, r1, #24
 8009e08:	d50b      	bpl.n	8009e22 <_printf_i+0x162>
 8009e0a:	07ca      	lsls	r2, r1, #31
 8009e0c:	bf44      	itt	mi
 8009e0e:	f041 0120 	orrmi.w	r1, r1, #32
 8009e12:	6021      	strmi	r1, [r4, #0]
 8009e14:	b91b      	cbnz	r3, 8009e1e <_printf_i+0x15e>
 8009e16:	6822      	ldr	r2, [r4, #0]
 8009e18:	f022 0220 	bic.w	r2, r2, #32
 8009e1c:	6022      	str	r2, [r4, #0]
 8009e1e:	2210      	movs	r2, #16
 8009e20:	e7b7      	b.n	8009d92 <_printf_i+0xd2>
 8009e22:	064d      	lsls	r5, r1, #25
 8009e24:	bf48      	it	mi
 8009e26:	b29b      	uxthmi	r3, r3
 8009e28:	e7ef      	b.n	8009e0a <_printf_i+0x14a>
 8009e2a:	4665      	mov	r5, ip
 8009e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e30:	fb02 3311 	mls	r3, r2, r1, r3
 8009e34:	5cc3      	ldrb	r3, [r0, r3]
 8009e36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d1f5      	bne.n	8009e2c <_printf_i+0x16c>
 8009e40:	e7b9      	b.n	8009db6 <_printf_i+0xf6>
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	6825      	ldr	r5, [r4, #0]
 8009e46:	6961      	ldr	r1, [r4, #20]
 8009e48:	1d18      	adds	r0, r3, #4
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	0628      	lsls	r0, r5, #24
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	d501      	bpl.n	8009e56 <_printf_i+0x196>
 8009e52:	6019      	str	r1, [r3, #0]
 8009e54:	e002      	b.n	8009e5c <_printf_i+0x19c>
 8009e56:	066a      	lsls	r2, r5, #25
 8009e58:	d5fb      	bpl.n	8009e52 <_printf_i+0x192>
 8009e5a:	8019      	strh	r1, [r3, #0]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	4665      	mov	r5, ip
 8009e62:	e7b9      	b.n	8009dd8 <_printf_i+0x118>
 8009e64:	6813      	ldr	r3, [r2, #0]
 8009e66:	1d19      	adds	r1, r3, #4
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	681d      	ldr	r5, [r3, #0]
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7f6 f9d5 	bl	8000220 <memchr>
 8009e76:	b108      	cbz	r0, 8009e7c <_printf_i+0x1bc>
 8009e78:	1b40      	subs	r0, r0, r5
 8009e7a:	6060      	str	r0, [r4, #4]
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	2300      	movs	r3, #0
 8009e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e86:	e7a7      	b.n	8009dd8 <_printf_i+0x118>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	47c0      	blx	r8
 8009e92:	3001      	adds	r0, #1
 8009e94:	d0aa      	beq.n	8009dec <_printf_i+0x12c>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	079b      	lsls	r3, r3, #30
 8009e9a:	d413      	bmi.n	8009ec4 <_printf_i+0x204>
 8009e9c:	68e0      	ldr	r0, [r4, #12]
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	4298      	cmp	r0, r3
 8009ea2:	bfb8      	it	lt
 8009ea4:	4618      	movlt	r0, r3
 8009ea6:	e7a3      	b.n	8009df0 <_printf_i+0x130>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	464a      	mov	r2, r9
 8009eac:	4639      	mov	r1, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	47c0      	blx	r8
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d09a      	beq.n	8009dec <_printf_i+0x12c>
 8009eb6:	3501      	adds	r5, #1
 8009eb8:	68e3      	ldr	r3, [r4, #12]
 8009eba:	9a03      	ldr	r2, [sp, #12]
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	42ab      	cmp	r3, r5
 8009ec0:	dcf2      	bgt.n	8009ea8 <_printf_i+0x1e8>
 8009ec2:	e7eb      	b.n	8009e9c <_printf_i+0x1dc>
 8009ec4:	2500      	movs	r5, #0
 8009ec6:	f104 0919 	add.w	r9, r4, #25
 8009eca:	e7f5      	b.n	8009eb8 <_printf_i+0x1f8>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ac      	bne.n	8009e2a <_printf_i+0x16a>
 8009ed0:	7803      	ldrb	r3, [r0, #0]
 8009ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eda:	e76c      	b.n	8009db6 <_printf_i+0xf6>
 8009edc:	0800fac6 	.word	0x0800fac6
 8009ee0:	0800fad7 	.word	0x0800fad7

08009ee4 <_scanf_float>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	469a      	mov	sl, r3
 8009eea:	688b      	ldr	r3, [r1, #8]
 8009eec:	4616      	mov	r6, r2
 8009eee:	1e5a      	subs	r2, r3, #1
 8009ef0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ef4:	b087      	sub	sp, #28
 8009ef6:	bf83      	ittte	hi
 8009ef8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009efc:	189b      	addhi	r3, r3, r2
 8009efe:	9301      	strhi	r3, [sp, #4]
 8009f00:	2300      	movls	r3, #0
 8009f02:	bf86      	itte	hi
 8009f04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f08:	608b      	strhi	r3, [r1, #8]
 8009f0a:	9301      	strls	r3, [sp, #4]
 8009f0c:	680b      	ldr	r3, [r1, #0]
 8009f0e:	4688      	mov	r8, r1
 8009f10:	f04f 0b00 	mov.w	fp, #0
 8009f14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f18:	f848 3b1c 	str.w	r3, [r8], #28
 8009f1c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009f20:	4607      	mov	r7, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4645      	mov	r5, r8
 8009f26:	465a      	mov	r2, fp
 8009f28:	46d9      	mov	r9, fp
 8009f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f2e:	68a1      	ldr	r1, [r4, #8]
 8009f30:	b181      	cbz	r1, 8009f54 <_scanf_float+0x70>
 8009f32:	6833      	ldr	r3, [r6, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b49      	cmp	r3, #73	; 0x49
 8009f38:	d071      	beq.n	800a01e <_scanf_float+0x13a>
 8009f3a:	d84d      	bhi.n	8009fd8 <_scanf_float+0xf4>
 8009f3c:	2b39      	cmp	r3, #57	; 0x39
 8009f3e:	d840      	bhi.n	8009fc2 <_scanf_float+0xde>
 8009f40:	2b31      	cmp	r3, #49	; 0x31
 8009f42:	f080 8088 	bcs.w	800a056 <_scanf_float+0x172>
 8009f46:	2b2d      	cmp	r3, #45	; 0x2d
 8009f48:	f000 8090 	beq.w	800a06c <_scanf_float+0x188>
 8009f4c:	d815      	bhi.n	8009f7a <_scanf_float+0x96>
 8009f4e:	2b2b      	cmp	r3, #43	; 0x2b
 8009f50:	f000 808c 	beq.w	800a06c <_scanf_float+0x188>
 8009f54:	f1b9 0f00 	cmp.w	r9, #0
 8009f58:	d003      	beq.n	8009f62 <_scanf_float+0x7e>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	3a01      	subs	r2, #1
 8009f64:	2a01      	cmp	r2, #1
 8009f66:	f200 80ea 	bhi.w	800a13e <_scanf_float+0x25a>
 8009f6a:	4545      	cmp	r5, r8
 8009f6c:	f200 80dc 	bhi.w	800a128 <_scanf_float+0x244>
 8009f70:	2601      	movs	r6, #1
 8009f72:	4630      	mov	r0, r6
 8009f74:	b007      	add	sp, #28
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f7c:	f000 809f 	beq.w	800a0be <_scanf_float+0x1da>
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d1e7      	bne.n	8009f54 <_scanf_float+0x70>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009f8a:	d064      	beq.n	800a056 <_scanf_float+0x172>
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009f92:	6020      	str	r0, [r4, #0]
 8009f94:	f109 0901 	add.w	r9, r9, #1
 8009f98:	b11b      	cbz	r3, 8009fa2 <_scanf_float+0xbe>
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	3101      	adds	r1, #1
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	60a1      	str	r1, [r4, #8]
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	3301      	adds	r3, #1
 8009fac:	6123      	str	r3, [r4, #16]
 8009fae:	6873      	ldr	r3, [r6, #4]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	6073      	str	r3, [r6, #4]
 8009fb6:	f340 80ac 	ble.w	800a112 <_scanf_float+0x22e>
 8009fba:	6833      	ldr	r3, [r6, #0]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	6033      	str	r3, [r6, #0]
 8009fc0:	e7b5      	b.n	8009f2e <_scanf_float+0x4a>
 8009fc2:	2b45      	cmp	r3, #69	; 0x45
 8009fc4:	f000 8085 	beq.w	800a0d2 <_scanf_float+0x1ee>
 8009fc8:	2b46      	cmp	r3, #70	; 0x46
 8009fca:	d06a      	beq.n	800a0a2 <_scanf_float+0x1be>
 8009fcc:	2b41      	cmp	r3, #65	; 0x41
 8009fce:	d1c1      	bne.n	8009f54 <_scanf_float+0x70>
 8009fd0:	2a01      	cmp	r2, #1
 8009fd2:	d1bf      	bne.n	8009f54 <_scanf_float+0x70>
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	e046      	b.n	800a066 <_scanf_float+0x182>
 8009fd8:	2b65      	cmp	r3, #101	; 0x65
 8009fda:	d07a      	beq.n	800a0d2 <_scanf_float+0x1ee>
 8009fdc:	d818      	bhi.n	800a010 <_scanf_float+0x12c>
 8009fde:	2b54      	cmp	r3, #84	; 0x54
 8009fe0:	d066      	beq.n	800a0b0 <_scanf_float+0x1cc>
 8009fe2:	d811      	bhi.n	800a008 <_scanf_float+0x124>
 8009fe4:	2b4e      	cmp	r3, #78	; 0x4e
 8009fe6:	d1b5      	bne.n	8009f54 <_scanf_float+0x70>
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	d146      	bne.n	800a07a <_scanf_float+0x196>
 8009fec:	f1b9 0f00 	cmp.w	r9, #0
 8009ff0:	d145      	bne.n	800a07e <_scanf_float+0x19a>
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009ff8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009ffc:	d13f      	bne.n	800a07e <_scanf_float+0x19a>
 8009ffe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a002:	6021      	str	r1, [r4, #0]
 800a004:	2201      	movs	r2, #1
 800a006:	e02e      	b.n	800a066 <_scanf_float+0x182>
 800a008:	2b59      	cmp	r3, #89	; 0x59
 800a00a:	d01e      	beq.n	800a04a <_scanf_float+0x166>
 800a00c:	2b61      	cmp	r3, #97	; 0x61
 800a00e:	e7de      	b.n	8009fce <_scanf_float+0xea>
 800a010:	2b6e      	cmp	r3, #110	; 0x6e
 800a012:	d0e9      	beq.n	8009fe8 <_scanf_float+0x104>
 800a014:	d815      	bhi.n	800a042 <_scanf_float+0x15e>
 800a016:	2b66      	cmp	r3, #102	; 0x66
 800a018:	d043      	beq.n	800a0a2 <_scanf_float+0x1be>
 800a01a:	2b69      	cmp	r3, #105	; 0x69
 800a01c:	d19a      	bne.n	8009f54 <_scanf_float+0x70>
 800a01e:	f1bb 0f00 	cmp.w	fp, #0
 800a022:	d138      	bne.n	800a096 <_scanf_float+0x1b2>
 800a024:	f1b9 0f00 	cmp.w	r9, #0
 800a028:	d197      	bne.n	8009f5a <_scanf_float+0x76>
 800a02a:	6821      	ldr	r1, [r4, #0]
 800a02c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a030:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a034:	d195      	bne.n	8009f62 <_scanf_float+0x7e>
 800a036:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a03a:	6021      	str	r1, [r4, #0]
 800a03c:	f04f 0b01 	mov.w	fp, #1
 800a040:	e011      	b.n	800a066 <_scanf_float+0x182>
 800a042:	2b74      	cmp	r3, #116	; 0x74
 800a044:	d034      	beq.n	800a0b0 <_scanf_float+0x1cc>
 800a046:	2b79      	cmp	r3, #121	; 0x79
 800a048:	d184      	bne.n	8009f54 <_scanf_float+0x70>
 800a04a:	f1bb 0f07 	cmp.w	fp, #7
 800a04e:	d181      	bne.n	8009f54 <_scanf_float+0x70>
 800a050:	f04f 0b08 	mov.w	fp, #8
 800a054:	e007      	b.n	800a066 <_scanf_float+0x182>
 800a056:	eb12 0f0b 	cmn.w	r2, fp
 800a05a:	f47f af7b 	bne.w	8009f54 <_scanf_float+0x70>
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a064:	6021      	str	r1, [r4, #0]
 800a066:	702b      	strb	r3, [r5, #0]
 800a068:	3501      	adds	r5, #1
 800a06a:	e79a      	b.n	8009fa2 <_scanf_float+0xbe>
 800a06c:	6821      	ldr	r1, [r4, #0]
 800a06e:	0608      	lsls	r0, r1, #24
 800a070:	f57f af70 	bpl.w	8009f54 <_scanf_float+0x70>
 800a074:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a078:	e7f4      	b.n	800a064 <_scanf_float+0x180>
 800a07a:	2a02      	cmp	r2, #2
 800a07c:	d047      	beq.n	800a10e <_scanf_float+0x22a>
 800a07e:	f1bb 0f01 	cmp.w	fp, #1
 800a082:	d003      	beq.n	800a08c <_scanf_float+0x1a8>
 800a084:	f1bb 0f04 	cmp.w	fp, #4
 800a088:	f47f af64 	bne.w	8009f54 <_scanf_float+0x70>
 800a08c:	f10b 0b01 	add.w	fp, fp, #1
 800a090:	fa5f fb8b 	uxtb.w	fp, fp
 800a094:	e7e7      	b.n	800a066 <_scanf_float+0x182>
 800a096:	f1bb 0f03 	cmp.w	fp, #3
 800a09a:	d0f7      	beq.n	800a08c <_scanf_float+0x1a8>
 800a09c:	f1bb 0f05 	cmp.w	fp, #5
 800a0a0:	e7f2      	b.n	800a088 <_scanf_float+0x1a4>
 800a0a2:	f1bb 0f02 	cmp.w	fp, #2
 800a0a6:	f47f af55 	bne.w	8009f54 <_scanf_float+0x70>
 800a0aa:	f04f 0b03 	mov.w	fp, #3
 800a0ae:	e7da      	b.n	800a066 <_scanf_float+0x182>
 800a0b0:	f1bb 0f06 	cmp.w	fp, #6
 800a0b4:	f47f af4e 	bne.w	8009f54 <_scanf_float+0x70>
 800a0b8:	f04f 0b07 	mov.w	fp, #7
 800a0bc:	e7d3      	b.n	800a066 <_scanf_float+0x182>
 800a0be:	6821      	ldr	r1, [r4, #0]
 800a0c0:	0588      	lsls	r0, r1, #22
 800a0c2:	f57f af47 	bpl.w	8009f54 <_scanf_float+0x70>
 800a0c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a0ca:	6021      	str	r1, [r4, #0]
 800a0cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0d0:	e7c9      	b.n	800a066 <_scanf_float+0x182>
 800a0d2:	6821      	ldr	r1, [r4, #0]
 800a0d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a0d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a0dc:	d006      	beq.n	800a0ec <_scanf_float+0x208>
 800a0de:	0548      	lsls	r0, r1, #21
 800a0e0:	f57f af38 	bpl.w	8009f54 <_scanf_float+0x70>
 800a0e4:	f1b9 0f00 	cmp.w	r9, #0
 800a0e8:	f43f af3b 	beq.w	8009f62 <_scanf_float+0x7e>
 800a0ec:	0588      	lsls	r0, r1, #22
 800a0ee:	bf58      	it	pl
 800a0f0:	9802      	ldrpl	r0, [sp, #8]
 800a0f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a0f6:	bf58      	it	pl
 800a0f8:	eba9 0000 	subpl.w	r0, r9, r0
 800a0fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a100:	bf58      	it	pl
 800a102:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a106:	6021      	str	r1, [r4, #0]
 800a108:	f04f 0900 	mov.w	r9, #0
 800a10c:	e7ab      	b.n	800a066 <_scanf_float+0x182>
 800a10e:	2203      	movs	r2, #3
 800a110:	e7a9      	b.n	800a066 <_scanf_float+0x182>
 800a112:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a116:	9205      	str	r2, [sp, #20]
 800a118:	4631      	mov	r1, r6
 800a11a:	4638      	mov	r0, r7
 800a11c:	4798      	blx	r3
 800a11e:	9a05      	ldr	r2, [sp, #20]
 800a120:	2800      	cmp	r0, #0
 800a122:	f43f af04 	beq.w	8009f2e <_scanf_float+0x4a>
 800a126:	e715      	b.n	8009f54 <_scanf_float+0x70>
 800a128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a12c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a130:	4632      	mov	r2, r6
 800a132:	4638      	mov	r0, r7
 800a134:	4798      	blx	r3
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	3b01      	subs	r3, #1
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	e715      	b.n	8009f6a <_scanf_float+0x86>
 800a13e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a142:	2b06      	cmp	r3, #6
 800a144:	d80a      	bhi.n	800a15c <_scanf_float+0x278>
 800a146:	f1bb 0f02 	cmp.w	fp, #2
 800a14a:	d968      	bls.n	800a21e <_scanf_float+0x33a>
 800a14c:	f1ab 0b03 	sub.w	fp, fp, #3
 800a150:	fa5f fb8b 	uxtb.w	fp, fp
 800a154:	eba5 0b0b 	sub.w	fp, r5, fp
 800a158:	455d      	cmp	r5, fp
 800a15a:	d14b      	bne.n	800a1f4 <_scanf_float+0x310>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	05da      	lsls	r2, r3, #23
 800a160:	d51f      	bpl.n	800a1a2 <_scanf_float+0x2be>
 800a162:	055b      	lsls	r3, r3, #21
 800a164:	d468      	bmi.n	800a238 <_scanf_float+0x354>
 800a166:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	2965      	cmp	r1, #101	; 0x65
 800a16e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a172:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a176:	6123      	str	r3, [r4, #16]
 800a178:	d00d      	beq.n	800a196 <_scanf_float+0x2b2>
 800a17a:	2945      	cmp	r1, #69	; 0x45
 800a17c:	d00b      	beq.n	800a196 <_scanf_float+0x2b2>
 800a17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a182:	4632      	mov	r2, r6
 800a184:	4638      	mov	r0, r7
 800a186:	4798      	blx	r3
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a18e:	3b01      	subs	r3, #1
 800a190:	f1a5 0b02 	sub.w	fp, r5, #2
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a19a:	4632      	mov	r2, r6
 800a19c:	4638      	mov	r0, r7
 800a19e:	4798      	blx	r3
 800a1a0:	465d      	mov	r5, fp
 800a1a2:	6826      	ldr	r6, [r4, #0]
 800a1a4:	f016 0610 	ands.w	r6, r6, #16
 800a1a8:	d17a      	bne.n	800a2a0 <_scanf_float+0x3bc>
 800a1aa:	702e      	strb	r6, [r5, #0]
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1b6:	d142      	bne.n	800a23e <_scanf_float+0x35a>
 800a1b8:	9b02      	ldr	r3, [sp, #8]
 800a1ba:	eba9 0303 	sub.w	r3, r9, r3
 800a1be:	425a      	negs	r2, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d149      	bne.n	800a258 <_scanf_float+0x374>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f000 fea5 	bl	800af18 <_strtod_r>
 800a1ce:	6825      	ldr	r5, [r4, #0]
 800a1d0:	f8da 3000 	ldr.w	r3, [sl]
 800a1d4:	f015 0f02 	tst.w	r5, #2
 800a1d8:	f103 0204 	add.w	r2, r3, #4
 800a1dc:	ec59 8b10 	vmov	r8, r9, d0
 800a1e0:	f8ca 2000 	str.w	r2, [sl]
 800a1e4:	d043      	beq.n	800a26e <_scanf_float+0x38a>
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	e9c3 8900 	strd	r8, r9, [r3]
 800a1ec:	68e3      	ldr	r3, [r4, #12]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60e3      	str	r3, [r4, #12]
 800a1f2:	e6be      	b.n	8009f72 <_scanf_float+0x8e>
 800a1f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4638      	mov	r0, r7
 800a200:	4798      	blx	r3
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	3b01      	subs	r3, #1
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	e7a6      	b.n	800a158 <_scanf_float+0x274>
 800a20a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a20e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a212:	4632      	mov	r2, r6
 800a214:	4638      	mov	r0, r7
 800a216:	4798      	blx	r3
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4545      	cmp	r5, r8
 800a220:	d8f3      	bhi.n	800a20a <_scanf_float+0x326>
 800a222:	e6a5      	b.n	8009f70 <_scanf_float+0x8c>
 800a224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a228:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a22c:	4632      	mov	r2, r6
 800a22e:	4638      	mov	r0, r7
 800a230:	4798      	blx	r3
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	3b01      	subs	r3, #1
 800a236:	6123      	str	r3, [r4, #16]
 800a238:	4545      	cmp	r5, r8
 800a23a:	d8f3      	bhi.n	800a224 <_scanf_float+0x340>
 800a23c:	e698      	b.n	8009f70 <_scanf_float+0x8c>
 800a23e:	9b03      	ldr	r3, [sp, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0bf      	beq.n	800a1c4 <_scanf_float+0x2e0>
 800a244:	9904      	ldr	r1, [sp, #16]
 800a246:	230a      	movs	r3, #10
 800a248:	4632      	mov	r2, r6
 800a24a:	3101      	adds	r1, #1
 800a24c:	4638      	mov	r0, r7
 800a24e:	f000 feef 	bl	800b030 <_strtol_r>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	9d04      	ldr	r5, [sp, #16]
 800a256:	1ac2      	subs	r2, r0, r3
 800a258:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a25c:	429d      	cmp	r5, r3
 800a25e:	bf28      	it	cs
 800a260:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a264:	490f      	ldr	r1, [pc, #60]	; (800a2a4 <_scanf_float+0x3c0>)
 800a266:	4628      	mov	r0, r5
 800a268:	f000 f824 	bl	800a2b4 <siprintf>
 800a26c:	e7aa      	b.n	800a1c4 <_scanf_float+0x2e0>
 800a26e:	f015 0504 	ands.w	r5, r5, #4
 800a272:	d1b8      	bne.n	800a1e6 <_scanf_float+0x302>
 800a274:	681f      	ldr	r7, [r3, #0]
 800a276:	ee10 2a10 	vmov	r2, s0
 800a27a:	464b      	mov	r3, r9
 800a27c:	ee10 0a10 	vmov	r0, s0
 800a280:	4649      	mov	r1, r9
 800a282:	f7f6 fc73 	bl	8000b6c <__aeabi_dcmpun>
 800a286:	b128      	cbz	r0, 800a294 <_scanf_float+0x3b0>
 800a288:	4628      	mov	r0, r5
 800a28a:	f000 f80d 	bl	800a2a8 <nanf>
 800a28e:	ed87 0a00 	vstr	s0, [r7]
 800a292:	e7ab      	b.n	800a1ec <_scanf_float+0x308>
 800a294:	4640      	mov	r0, r8
 800a296:	4649      	mov	r1, r9
 800a298:	f7f6 fcc6 	bl	8000c28 <__aeabi_d2f>
 800a29c:	6038      	str	r0, [r7, #0]
 800a29e:	e7a5      	b.n	800a1ec <_scanf_float+0x308>
 800a2a0:	2600      	movs	r6, #0
 800a2a2:	e666      	b.n	8009f72 <_scanf_float+0x8e>
 800a2a4:	0800fae8 	.word	0x0800fae8

0800a2a8 <nanf>:
 800a2a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a2b0 <nanf+0x8>
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	7fc00000 	.word	0x7fc00000

0800a2b4 <siprintf>:
 800a2b4:	b40e      	push	{r1, r2, r3}
 800a2b6:	b500      	push	{lr}
 800a2b8:	b09c      	sub	sp, #112	; 0x70
 800a2ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a2bc:	9002      	str	r0, [sp, #8]
 800a2be:	9006      	str	r0, [sp, #24]
 800a2c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2c4:	4809      	ldr	r0, [pc, #36]	; (800a2ec <siprintf+0x38>)
 800a2c6:	9107      	str	r1, [sp, #28]
 800a2c8:	9104      	str	r1, [sp, #16]
 800a2ca:	4909      	ldr	r1, [pc, #36]	; (800a2f0 <siprintf+0x3c>)
 800a2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d0:	9105      	str	r1, [sp, #20]
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	a902      	add	r1, sp, #8
 800a2d8:	f002 fda2 	bl	800ce20 <_svfiprintf_r>
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	b01c      	add	sp, #112	; 0x70
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	20000058 	.word	0x20000058
 800a2f0:	ffff0208 	.word	0xffff0208

0800a2f4 <sulp>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	ec45 4b10 	vmov	d0, r4, r5
 800a2fe:	4616      	mov	r6, r2
 800a300:	f002 fb4a 	bl	800c998 <__ulp>
 800a304:	ec51 0b10 	vmov	r0, r1, d0
 800a308:	b17e      	cbz	r6, 800a32a <sulp+0x36>
 800a30a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a30e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd09      	ble.n	800a32a <sulp+0x36>
 800a316:	051b      	lsls	r3, r3, #20
 800a318:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a31c:	2400      	movs	r4, #0
 800a31e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	f7f6 f987 	bl	8000638 <__aeabi_dmul>
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	0000      	movs	r0, r0
	...

0800a330 <_strtod_l>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	461f      	mov	r7, r3
 800a336:	b0a1      	sub	sp, #132	; 0x84
 800a338:	2300      	movs	r3, #0
 800a33a:	4681      	mov	r9, r0
 800a33c:	4638      	mov	r0, r7
 800a33e:	460e      	mov	r6, r1
 800a340:	9217      	str	r2, [sp, #92]	; 0x5c
 800a342:	931c      	str	r3, [sp, #112]	; 0x70
 800a344:	f002 f831 	bl	800c3aa <__localeconv_l>
 800a348:	4680      	mov	r8, r0
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	f7f5 ff60 	bl	8000210 <strlen>
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	4604      	mov	r4, r0
 800a356:	f04f 0b00 	mov.w	fp, #0
 800a35a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a35c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	2a0d      	cmp	r2, #13
 800a362:	d832      	bhi.n	800a3ca <_strtod_l+0x9a>
 800a364:	2a09      	cmp	r2, #9
 800a366:	d236      	bcs.n	800a3d6 <_strtod_l+0xa6>
 800a368:	2a00      	cmp	r2, #0
 800a36a:	d03e      	beq.n	800a3ea <_strtod_l+0xba>
 800a36c:	2300      	movs	r3, #0
 800a36e:	930d      	str	r3, [sp, #52]	; 0x34
 800a370:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a372:	782b      	ldrb	r3, [r5, #0]
 800a374:	2b30      	cmp	r3, #48	; 0x30
 800a376:	f040 80ac 	bne.w	800a4d2 <_strtod_l+0x1a2>
 800a37a:	786b      	ldrb	r3, [r5, #1]
 800a37c:	2b58      	cmp	r3, #88	; 0x58
 800a37e:	d001      	beq.n	800a384 <_strtod_l+0x54>
 800a380:	2b78      	cmp	r3, #120	; 0x78
 800a382:	d167      	bne.n	800a454 <_strtod_l+0x124>
 800a384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	ab1c      	add	r3, sp, #112	; 0x70
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	9702      	str	r7, [sp, #8]
 800a38e:	ab1d      	add	r3, sp, #116	; 0x74
 800a390:	4a88      	ldr	r2, [pc, #544]	; (800a5b4 <_strtod_l+0x284>)
 800a392:	a91b      	add	r1, sp, #108	; 0x6c
 800a394:	4648      	mov	r0, r9
 800a396:	f001 fd2e 	bl	800bdf6 <__gethex>
 800a39a:	f010 0407 	ands.w	r4, r0, #7
 800a39e:	4606      	mov	r6, r0
 800a3a0:	d005      	beq.n	800a3ae <_strtod_l+0x7e>
 800a3a2:	2c06      	cmp	r4, #6
 800a3a4:	d12b      	bne.n	800a3fe <_strtod_l+0xce>
 800a3a6:	3501      	adds	r5, #1
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	951b      	str	r5, [sp, #108]	; 0x6c
 800a3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 859a 	bne.w	800aeea <_strtod_l+0xbba>
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b8:	b1e3      	cbz	r3, 800a3f4 <_strtod_l+0xc4>
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3c0:	ec43 2b10 	vmov	d0, r2, r3
 800a3c4:	b021      	add	sp, #132	; 0x84
 800a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ca:	2a2b      	cmp	r2, #43	; 0x2b
 800a3cc:	d015      	beq.n	800a3fa <_strtod_l+0xca>
 800a3ce:	2a2d      	cmp	r2, #45	; 0x2d
 800a3d0:	d004      	beq.n	800a3dc <_strtod_l+0xac>
 800a3d2:	2a20      	cmp	r2, #32
 800a3d4:	d1ca      	bne.n	800a36c <_strtod_l+0x3c>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3da:	e7bf      	b.n	800a35c <_strtod_l+0x2c>
 800a3dc:	2201      	movs	r2, #1
 800a3de:	920d      	str	r2, [sp, #52]	; 0x34
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1c2      	bne.n	800a370 <_strtod_l+0x40>
 800a3ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3ec:	961b      	str	r6, [sp, #108]	; 0x6c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f040 8579 	bne.w	800aee6 <_strtod_l+0xbb6>
 800a3f4:	4652      	mov	r2, sl
 800a3f6:	465b      	mov	r3, fp
 800a3f8:	e7e2      	b.n	800a3c0 <_strtod_l+0x90>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	e7ef      	b.n	800a3de <_strtod_l+0xae>
 800a3fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a400:	b13a      	cbz	r2, 800a412 <_strtod_l+0xe2>
 800a402:	2135      	movs	r1, #53	; 0x35
 800a404:	a81e      	add	r0, sp, #120	; 0x78
 800a406:	f002 fbbf 	bl	800cb88 <__copybits>
 800a40a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a40c:	4648      	mov	r0, r9
 800a40e:	f002 f82b 	bl	800c468 <_Bfree>
 800a412:	3c01      	subs	r4, #1
 800a414:	2c04      	cmp	r4, #4
 800a416:	d806      	bhi.n	800a426 <_strtod_l+0xf6>
 800a418:	e8df f004 	tbb	[pc, r4]
 800a41c:	1714030a 	.word	0x1714030a
 800a420:	0a          	.byte	0x0a
 800a421:	00          	.byte	0x00
 800a422:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a426:	0730      	lsls	r0, r6, #28
 800a428:	d5c1      	bpl.n	800a3ae <_strtod_l+0x7e>
 800a42a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a42e:	e7be      	b.n	800a3ae <_strtod_l+0x7e>
 800a430:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a434:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a436:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a43a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a43e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a442:	e7f0      	b.n	800a426 <_strtod_l+0xf6>
 800a444:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a5b8 <_strtod_l+0x288>
 800a448:	e7ed      	b.n	800a426 <_strtod_l+0xf6>
 800a44a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a44e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a452:	e7e8      	b.n	800a426 <_strtod_l+0xf6>
 800a454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	921b      	str	r2, [sp, #108]	; 0x6c
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	2b30      	cmp	r3, #48	; 0x30
 800a45e:	d0f9      	beq.n	800a454 <_strtod_l+0x124>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0a4      	beq.n	800a3ae <_strtod_l+0x7e>
 800a464:	2301      	movs	r3, #1
 800a466:	2500      	movs	r5, #0
 800a468:	9306      	str	r3, [sp, #24]
 800a46a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a46c:	9308      	str	r3, [sp, #32]
 800a46e:	9507      	str	r5, [sp, #28]
 800a470:	9505      	str	r5, [sp, #20]
 800a472:	220a      	movs	r2, #10
 800a474:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a476:	7807      	ldrb	r7, [r0, #0]
 800a478:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a47c:	b2d9      	uxtb	r1, r3
 800a47e:	2909      	cmp	r1, #9
 800a480:	d929      	bls.n	800a4d6 <_strtod_l+0x1a6>
 800a482:	4622      	mov	r2, r4
 800a484:	f8d8 1000 	ldr.w	r1, [r8]
 800a488:	f002 fdd2 	bl	800d030 <strncmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d031      	beq.n	800a4f4 <_strtod_l+0x1c4>
 800a490:	2000      	movs	r0, #0
 800a492:	9c05      	ldr	r4, [sp, #20]
 800a494:	9004      	str	r0, [sp, #16]
 800a496:	463b      	mov	r3, r7
 800a498:	4602      	mov	r2, r0
 800a49a:	2b65      	cmp	r3, #101	; 0x65
 800a49c:	d001      	beq.n	800a4a2 <_strtod_l+0x172>
 800a49e:	2b45      	cmp	r3, #69	; 0x45
 800a4a0:	d114      	bne.n	800a4cc <_strtod_l+0x19c>
 800a4a2:	b924      	cbnz	r4, 800a4ae <_strtod_l+0x17e>
 800a4a4:	b910      	cbnz	r0, 800a4ac <_strtod_l+0x17c>
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d09e      	beq.n	800a3ea <_strtod_l+0xba>
 800a4ac:	2400      	movs	r4, #0
 800a4ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a4b0:	1c73      	adds	r3, r6, #1
 800a4b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4b4:	7873      	ldrb	r3, [r6, #1]
 800a4b6:	2b2b      	cmp	r3, #43	; 0x2b
 800a4b8:	d078      	beq.n	800a5ac <_strtod_l+0x27c>
 800a4ba:	2b2d      	cmp	r3, #45	; 0x2d
 800a4bc:	d070      	beq.n	800a5a0 <_strtod_l+0x270>
 800a4be:	f04f 0c00 	mov.w	ip, #0
 800a4c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a4c6:	2f09      	cmp	r7, #9
 800a4c8:	d97c      	bls.n	800a5c4 <_strtod_l+0x294>
 800a4ca:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4cc:	f04f 0e00 	mov.w	lr, #0
 800a4d0:	e09a      	b.n	800a608 <_strtod_l+0x2d8>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e7c7      	b.n	800a466 <_strtod_l+0x136>
 800a4d6:	9905      	ldr	r1, [sp, #20]
 800a4d8:	2908      	cmp	r1, #8
 800a4da:	bfdd      	ittte	le
 800a4dc:	9907      	ldrle	r1, [sp, #28]
 800a4de:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4e2:	9307      	strle	r3, [sp, #28]
 800a4e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	901b      	str	r0, [sp, #108]	; 0x6c
 800a4f2:	e7bf      	b.n	800a474 <_strtod_l+0x144>
 800a4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4f6:	191a      	adds	r2, r3, r4
 800a4f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4fa:	9a05      	ldr	r2, [sp, #20]
 800a4fc:	5d1b      	ldrb	r3, [r3, r4]
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d037      	beq.n	800a572 <_strtod_l+0x242>
 800a502:	9c05      	ldr	r4, [sp, #20]
 800a504:	4602      	mov	r2, r0
 800a506:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a50a:	2909      	cmp	r1, #9
 800a50c:	d913      	bls.n	800a536 <_strtod_l+0x206>
 800a50e:	2101      	movs	r1, #1
 800a510:	9104      	str	r1, [sp, #16]
 800a512:	e7c2      	b.n	800a49a <_strtod_l+0x16a>
 800a514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	921b      	str	r2, [sp, #108]	; 0x6c
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	3001      	adds	r0, #1
 800a51e:	2b30      	cmp	r3, #48	; 0x30
 800a520:	d0f8      	beq.n	800a514 <_strtod_l+0x1e4>
 800a522:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a526:	2a08      	cmp	r2, #8
 800a528:	f200 84e4 	bhi.w	800aef4 <_strtod_l+0xbc4>
 800a52c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a52e:	9208      	str	r2, [sp, #32]
 800a530:	4602      	mov	r2, r0
 800a532:	2000      	movs	r0, #0
 800a534:	4604      	mov	r4, r0
 800a536:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a53a:	f100 0101 	add.w	r1, r0, #1
 800a53e:	d012      	beq.n	800a566 <_strtod_l+0x236>
 800a540:	440a      	add	r2, r1
 800a542:	eb00 0c04 	add.w	ip, r0, r4
 800a546:	4621      	mov	r1, r4
 800a548:	270a      	movs	r7, #10
 800a54a:	458c      	cmp	ip, r1
 800a54c:	d113      	bne.n	800a576 <_strtod_l+0x246>
 800a54e:	1821      	adds	r1, r4, r0
 800a550:	2908      	cmp	r1, #8
 800a552:	f104 0401 	add.w	r4, r4, #1
 800a556:	4404      	add	r4, r0
 800a558:	dc19      	bgt.n	800a58e <_strtod_l+0x25e>
 800a55a:	9b07      	ldr	r3, [sp, #28]
 800a55c:	210a      	movs	r1, #10
 800a55e:	fb01 e303 	mla	r3, r1, r3, lr
 800a562:	9307      	str	r3, [sp, #28]
 800a564:	2100      	movs	r1, #0
 800a566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a568:	1c58      	adds	r0, r3, #1
 800a56a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	4608      	mov	r0, r1
 800a570:	e7c9      	b.n	800a506 <_strtod_l+0x1d6>
 800a572:	9805      	ldr	r0, [sp, #20]
 800a574:	e7d3      	b.n	800a51e <_strtod_l+0x1ee>
 800a576:	2908      	cmp	r1, #8
 800a578:	f101 0101 	add.w	r1, r1, #1
 800a57c:	dc03      	bgt.n	800a586 <_strtod_l+0x256>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	437b      	muls	r3, r7
 800a582:	9307      	str	r3, [sp, #28]
 800a584:	e7e1      	b.n	800a54a <_strtod_l+0x21a>
 800a586:	2910      	cmp	r1, #16
 800a588:	bfd8      	it	le
 800a58a:	437d      	mulle	r5, r7
 800a58c:	e7dd      	b.n	800a54a <_strtod_l+0x21a>
 800a58e:	2c10      	cmp	r4, #16
 800a590:	bfdc      	itt	le
 800a592:	210a      	movle	r1, #10
 800a594:	fb01 e505 	mlale	r5, r1, r5, lr
 800a598:	e7e4      	b.n	800a564 <_strtod_l+0x234>
 800a59a:	2301      	movs	r3, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	e781      	b.n	800a4a4 <_strtod_l+0x174>
 800a5a0:	f04f 0c01 	mov.w	ip, #1
 800a5a4:	1cb3      	adds	r3, r6, #2
 800a5a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5a8:	78b3      	ldrb	r3, [r6, #2]
 800a5aa:	e78a      	b.n	800a4c2 <_strtod_l+0x192>
 800a5ac:	f04f 0c00 	mov.w	ip, #0
 800a5b0:	e7f8      	b.n	800a5a4 <_strtod_l+0x274>
 800a5b2:	bf00      	nop
 800a5b4:	0800faf0 	.word	0x0800faf0
 800a5b8:	7ff00000 	.word	0x7ff00000
 800a5bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5be:	1c5f      	adds	r7, r3, #1
 800a5c0:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	2b30      	cmp	r3, #48	; 0x30
 800a5c6:	d0f9      	beq.n	800a5bc <_strtod_l+0x28c>
 800a5c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a5cc:	2f08      	cmp	r7, #8
 800a5ce:	f63f af7d 	bhi.w	800a4cc <_strtod_l+0x19c>
 800a5d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a5d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5dc:	1c5f      	adds	r7, r3, #1
 800a5de:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a5e6:	f1b8 0f09 	cmp.w	r8, #9
 800a5ea:	d937      	bls.n	800a65c <_strtod_l+0x32c>
 800a5ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5ee:	1a7f      	subs	r7, r7, r1
 800a5f0:	2f08      	cmp	r7, #8
 800a5f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5f6:	dc37      	bgt.n	800a668 <_strtod_l+0x338>
 800a5f8:	45be      	cmp	lr, r7
 800a5fa:	bfa8      	it	ge
 800a5fc:	46be      	movge	lr, r7
 800a5fe:	f1bc 0f00 	cmp.w	ip, #0
 800a602:	d001      	beq.n	800a608 <_strtod_l+0x2d8>
 800a604:	f1ce 0e00 	rsb	lr, lr, #0
 800a608:	2c00      	cmp	r4, #0
 800a60a:	d151      	bne.n	800a6b0 <_strtod_l+0x380>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f47f aece 	bne.w	800a3ae <_strtod_l+0x7e>
 800a612:	9a06      	ldr	r2, [sp, #24]
 800a614:	2a00      	cmp	r2, #0
 800a616:	f47f aeca 	bne.w	800a3ae <_strtod_l+0x7e>
 800a61a:	9a04      	ldr	r2, [sp, #16]
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	f47f aee4 	bne.w	800a3ea <_strtod_l+0xba>
 800a622:	2b4e      	cmp	r3, #78	; 0x4e
 800a624:	d027      	beq.n	800a676 <_strtod_l+0x346>
 800a626:	dc21      	bgt.n	800a66c <_strtod_l+0x33c>
 800a628:	2b49      	cmp	r3, #73	; 0x49
 800a62a:	f47f aede 	bne.w	800a3ea <_strtod_l+0xba>
 800a62e:	49a0      	ldr	r1, [pc, #640]	; (800a8b0 <_strtod_l+0x580>)
 800a630:	a81b      	add	r0, sp, #108	; 0x6c
 800a632:	f001 fe13 	bl	800c25c <__match>
 800a636:	2800      	cmp	r0, #0
 800a638:	f43f aed7 	beq.w	800a3ea <_strtod_l+0xba>
 800a63c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a63e:	499d      	ldr	r1, [pc, #628]	; (800a8b4 <_strtod_l+0x584>)
 800a640:	3b01      	subs	r3, #1
 800a642:	a81b      	add	r0, sp, #108	; 0x6c
 800a644:	931b      	str	r3, [sp, #108]	; 0x6c
 800a646:	f001 fe09 	bl	800c25c <__match>
 800a64a:	b910      	cbnz	r0, 800a652 <_strtod_l+0x322>
 800a64c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a64e:	3301      	adds	r3, #1
 800a650:	931b      	str	r3, [sp, #108]	; 0x6c
 800a652:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a8c8 <_strtod_l+0x598>
 800a656:	f04f 0a00 	mov.w	sl, #0
 800a65a:	e6a8      	b.n	800a3ae <_strtod_l+0x7e>
 800a65c:	210a      	movs	r1, #10
 800a65e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a662:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a666:	e7b8      	b.n	800a5da <_strtod_l+0x2aa>
 800a668:	46be      	mov	lr, r7
 800a66a:	e7c8      	b.n	800a5fe <_strtod_l+0x2ce>
 800a66c:	2b69      	cmp	r3, #105	; 0x69
 800a66e:	d0de      	beq.n	800a62e <_strtod_l+0x2fe>
 800a670:	2b6e      	cmp	r3, #110	; 0x6e
 800a672:	f47f aeba 	bne.w	800a3ea <_strtod_l+0xba>
 800a676:	4990      	ldr	r1, [pc, #576]	; (800a8b8 <_strtod_l+0x588>)
 800a678:	a81b      	add	r0, sp, #108	; 0x6c
 800a67a:	f001 fdef 	bl	800c25c <__match>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f43f aeb3 	beq.w	800a3ea <_strtod_l+0xba>
 800a684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b28      	cmp	r3, #40	; 0x28
 800a68a:	d10e      	bne.n	800a6aa <_strtod_l+0x37a>
 800a68c:	aa1e      	add	r2, sp, #120	; 0x78
 800a68e:	498b      	ldr	r1, [pc, #556]	; (800a8bc <_strtod_l+0x58c>)
 800a690:	a81b      	add	r0, sp, #108	; 0x6c
 800a692:	f001 fdf7 	bl	800c284 <__hexnan>
 800a696:	2805      	cmp	r0, #5
 800a698:	d107      	bne.n	800a6aa <_strtod_l+0x37a>
 800a69a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a69c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a6a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a6a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a6a8:	e681      	b.n	800a3ae <_strtod_l+0x7e>
 800a6aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a8d0 <_strtod_l+0x5a0>
 800a6ae:	e7d2      	b.n	800a656 <_strtod_l+0x326>
 800a6b0:	ebae 0302 	sub.w	r3, lr, r2
 800a6b4:	9306      	str	r3, [sp, #24]
 800a6b6:	9b05      	ldr	r3, [sp, #20]
 800a6b8:	9807      	ldr	r0, [sp, #28]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bf08      	it	eq
 800a6be:	4623      	moveq	r3, r4
 800a6c0:	2c10      	cmp	r4, #16
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	46a0      	mov	r8, r4
 800a6c6:	bfa8      	it	ge
 800a6c8:	f04f 0810 	movge.w	r8, #16
 800a6cc:	f7f5 ff3a 	bl	8000544 <__aeabi_ui2d>
 800a6d0:	2c09      	cmp	r4, #9
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	468b      	mov	fp, r1
 800a6d6:	dc13      	bgt.n	800a700 <_strtod_l+0x3d0>
 800a6d8:	9b06      	ldr	r3, [sp, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f43f ae67 	beq.w	800a3ae <_strtod_l+0x7e>
 800a6e0:	9b06      	ldr	r3, [sp, #24]
 800a6e2:	dd7a      	ble.n	800a7da <_strtod_l+0x4aa>
 800a6e4:	2b16      	cmp	r3, #22
 800a6e6:	dc61      	bgt.n	800a7ac <_strtod_l+0x47c>
 800a6e8:	4a75      	ldr	r2, [pc, #468]	; (800a8c0 <_strtod_l+0x590>)
 800a6ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a6ee:	e9de 0100 	ldrd	r0, r1, [lr]
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	f7f5 ff9f 	bl	8000638 <__aeabi_dmul>
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	468b      	mov	fp, r1
 800a6fe:	e656      	b.n	800a3ae <_strtod_l+0x7e>
 800a700:	4b6f      	ldr	r3, [pc, #444]	; (800a8c0 <_strtod_l+0x590>)
 800a702:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a706:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a70a:	f7f5 ff95 	bl	8000638 <__aeabi_dmul>
 800a70e:	4606      	mov	r6, r0
 800a710:	4628      	mov	r0, r5
 800a712:	460f      	mov	r7, r1
 800a714:	f7f5 ff16 	bl	8000544 <__aeabi_ui2d>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f5 fdd4 	bl	80002cc <__adddf3>
 800a724:	2c0f      	cmp	r4, #15
 800a726:	4682      	mov	sl, r0
 800a728:	468b      	mov	fp, r1
 800a72a:	ddd5      	ble.n	800a6d8 <_strtod_l+0x3a8>
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	eba4 0808 	sub.w	r8, r4, r8
 800a732:	4498      	add	r8, r3
 800a734:	f1b8 0f00 	cmp.w	r8, #0
 800a738:	f340 8096 	ble.w	800a868 <_strtod_l+0x538>
 800a73c:	f018 030f 	ands.w	r3, r8, #15
 800a740:	d00a      	beq.n	800a758 <_strtod_l+0x428>
 800a742:	495f      	ldr	r1, [pc, #380]	; (800a8c0 <_strtod_l+0x590>)
 800a744:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a748:	4652      	mov	r2, sl
 800a74a:	465b      	mov	r3, fp
 800a74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a750:	f7f5 ff72 	bl	8000638 <__aeabi_dmul>
 800a754:	4682      	mov	sl, r0
 800a756:	468b      	mov	fp, r1
 800a758:	f038 080f 	bics.w	r8, r8, #15
 800a75c:	d073      	beq.n	800a846 <_strtod_l+0x516>
 800a75e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a762:	dd47      	ble.n	800a7f4 <_strtod_l+0x4c4>
 800a764:	2400      	movs	r4, #0
 800a766:	46a0      	mov	r8, r4
 800a768:	9407      	str	r4, [sp, #28]
 800a76a:	9405      	str	r4, [sp, #20]
 800a76c:	2322      	movs	r3, #34	; 0x22
 800a76e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a8c8 <_strtod_l+0x598>
 800a772:	f8c9 3000 	str.w	r3, [r9]
 800a776:	f04f 0a00 	mov.w	sl, #0
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f43f ae16 	beq.w	800a3ae <_strtod_l+0x7e>
 800a782:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a784:	4648      	mov	r0, r9
 800a786:	f001 fe6f 	bl	800c468 <_Bfree>
 800a78a:	9905      	ldr	r1, [sp, #20]
 800a78c:	4648      	mov	r0, r9
 800a78e:	f001 fe6b 	bl	800c468 <_Bfree>
 800a792:	4641      	mov	r1, r8
 800a794:	4648      	mov	r0, r9
 800a796:	f001 fe67 	bl	800c468 <_Bfree>
 800a79a:	9907      	ldr	r1, [sp, #28]
 800a79c:	4648      	mov	r0, r9
 800a79e:	f001 fe63 	bl	800c468 <_Bfree>
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4648      	mov	r0, r9
 800a7a6:	f001 fe5f 	bl	800c468 <_Bfree>
 800a7aa:	e600      	b.n	800a3ae <_strtod_l+0x7e>
 800a7ac:	9a06      	ldr	r2, [sp, #24]
 800a7ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	dbba      	blt.n	800a72c <_strtod_l+0x3fc>
 800a7b6:	4d42      	ldr	r5, [pc, #264]	; (800a8c0 <_strtod_l+0x590>)
 800a7b8:	f1c4 040f 	rsb	r4, r4, #15
 800a7bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	465b      	mov	r3, fp
 800a7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7c8:	f7f5 ff36 	bl	8000638 <__aeabi_dmul>
 800a7cc:	9b06      	ldr	r3, [sp, #24]
 800a7ce:	1b1c      	subs	r4, r3, r4
 800a7d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a7d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7d8:	e78d      	b.n	800a6f6 <_strtod_l+0x3c6>
 800a7da:	f113 0f16 	cmn.w	r3, #22
 800a7de:	dba5      	blt.n	800a72c <_strtod_l+0x3fc>
 800a7e0:	4a37      	ldr	r2, [pc, #220]	; (800a8c0 <_strtod_l+0x590>)
 800a7e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a7e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	f7f6 f84d 	bl	800088c <__aeabi_ddiv>
 800a7f2:	e782      	b.n	800a6fa <_strtod_l+0x3ca>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4e33      	ldr	r6, [pc, #204]	; (800a8c4 <_strtod_l+0x594>)
 800a7f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	4659      	mov	r1, fp
 800a800:	461d      	mov	r5, r3
 800a802:	f1b8 0f01 	cmp.w	r8, #1
 800a806:	dc21      	bgt.n	800a84c <_strtod_l+0x51c>
 800a808:	b10b      	cbz	r3, 800a80e <_strtod_l+0x4de>
 800a80a:	4682      	mov	sl, r0
 800a80c:	468b      	mov	fp, r1
 800a80e:	4b2d      	ldr	r3, [pc, #180]	; (800a8c4 <_strtod_l+0x594>)
 800a810:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a814:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a818:	4652      	mov	r2, sl
 800a81a:	465b      	mov	r3, fp
 800a81c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a820:	f7f5 ff0a 	bl	8000638 <__aeabi_dmul>
 800a824:	4b28      	ldr	r3, [pc, #160]	; (800a8c8 <_strtod_l+0x598>)
 800a826:	460a      	mov	r2, r1
 800a828:	400b      	ands	r3, r1
 800a82a:	4928      	ldr	r1, [pc, #160]	; (800a8cc <_strtod_l+0x59c>)
 800a82c:	428b      	cmp	r3, r1
 800a82e:	4682      	mov	sl, r0
 800a830:	d898      	bhi.n	800a764 <_strtod_l+0x434>
 800a832:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a836:	428b      	cmp	r3, r1
 800a838:	bf86      	itte	hi
 800a83a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a8d4 <_strtod_l+0x5a4>
 800a83e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a842:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a846:	2300      	movs	r3, #0
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	e077      	b.n	800a93c <_strtod_l+0x60c>
 800a84c:	f018 0f01 	tst.w	r8, #1
 800a850:	d006      	beq.n	800a860 <_strtod_l+0x530>
 800a852:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 feed 	bl	8000638 <__aeabi_dmul>
 800a85e:	2301      	movs	r3, #1
 800a860:	3501      	adds	r5, #1
 800a862:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a866:	e7cc      	b.n	800a802 <_strtod_l+0x4d2>
 800a868:	d0ed      	beq.n	800a846 <_strtod_l+0x516>
 800a86a:	f1c8 0800 	rsb	r8, r8, #0
 800a86e:	f018 020f 	ands.w	r2, r8, #15
 800a872:	d00a      	beq.n	800a88a <_strtod_l+0x55a>
 800a874:	4b12      	ldr	r3, [pc, #72]	; (800a8c0 <_strtod_l+0x590>)
 800a876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f6 f803 	bl	800088c <__aeabi_ddiv>
 800a886:	4682      	mov	sl, r0
 800a888:	468b      	mov	fp, r1
 800a88a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a88e:	d0da      	beq.n	800a846 <_strtod_l+0x516>
 800a890:	f1b8 0f1f 	cmp.w	r8, #31
 800a894:	dd20      	ble.n	800a8d8 <_strtod_l+0x5a8>
 800a896:	2400      	movs	r4, #0
 800a898:	46a0      	mov	r8, r4
 800a89a:	9407      	str	r4, [sp, #28]
 800a89c:	9405      	str	r4, [sp, #20]
 800a89e:	2322      	movs	r3, #34	; 0x22
 800a8a0:	f04f 0a00 	mov.w	sl, #0
 800a8a4:	f04f 0b00 	mov.w	fp, #0
 800a8a8:	f8c9 3000 	str.w	r3, [r9]
 800a8ac:	e765      	b.n	800a77a <_strtod_l+0x44a>
 800a8ae:	bf00      	nop
 800a8b0:	0800fab9 	.word	0x0800fab9
 800a8b4:	0800fb68 	.word	0x0800fb68
 800a8b8:	0800fac1 	.word	0x0800fac1
 800a8bc:	0800fb04 	.word	0x0800fb04
 800a8c0:	0800fba8 	.word	0x0800fba8
 800a8c4:	0800fb80 	.word	0x0800fb80
 800a8c8:	7ff00000 	.word	0x7ff00000
 800a8cc:	7ca00000 	.word	0x7ca00000
 800a8d0:	fff80000 	.word	0xfff80000
 800a8d4:	7fefffff 	.word	0x7fefffff
 800a8d8:	f018 0310 	ands.w	r3, r8, #16
 800a8dc:	bf18      	it	ne
 800a8de:	236a      	movne	r3, #106	; 0x6a
 800a8e0:	4da0      	ldr	r5, [pc, #640]	; (800ab64 <_strtod_l+0x834>)
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	4650      	mov	r0, sl
 800a8e6:	4659      	mov	r1, fp
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f1b8 0f00 	cmp.w	r8, #0
 800a8ee:	f300 810a 	bgt.w	800ab06 <_strtod_l+0x7d6>
 800a8f2:	b10b      	cbz	r3, 800a8f8 <_strtod_l+0x5c8>
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	468b      	mov	fp, r1
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	b1bb      	cbz	r3, 800a92c <_strtod_l+0x5fc>
 800a8fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a900:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a904:	2b00      	cmp	r3, #0
 800a906:	4659      	mov	r1, fp
 800a908:	dd10      	ble.n	800a92c <_strtod_l+0x5fc>
 800a90a:	2b1f      	cmp	r3, #31
 800a90c:	f340 8107 	ble.w	800ab1e <_strtod_l+0x7ee>
 800a910:	2b34      	cmp	r3, #52	; 0x34
 800a912:	bfde      	ittt	le
 800a914:	3b20      	suble	r3, #32
 800a916:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a91a:	fa02 f303 	lslle.w	r3, r2, r3
 800a91e:	f04f 0a00 	mov.w	sl, #0
 800a922:	bfcc      	ite	gt
 800a924:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a928:	ea03 0b01 	andle.w	fp, r3, r1
 800a92c:	2200      	movs	r2, #0
 800a92e:	2300      	movs	r3, #0
 800a930:	4650      	mov	r0, sl
 800a932:	4659      	mov	r1, fp
 800a934:	f7f6 f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d1ac      	bne.n	800a896 <_strtod_l+0x566>
 800a93c:	9b07      	ldr	r3, [sp, #28]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	9a05      	ldr	r2, [sp, #20]
 800a942:	9908      	ldr	r1, [sp, #32]
 800a944:	4623      	mov	r3, r4
 800a946:	4648      	mov	r0, r9
 800a948:	f001 fde0 	bl	800c50c <__s2b>
 800a94c:	9007      	str	r0, [sp, #28]
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f af08 	beq.w	800a764 <_strtod_l+0x434>
 800a954:	9a06      	ldr	r2, [sp, #24]
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	2a00      	cmp	r2, #0
 800a95a:	f1c3 0300 	rsb	r3, r3, #0
 800a95e:	bfa8      	it	ge
 800a960:	2300      	movge	r3, #0
 800a962:	930e      	str	r3, [sp, #56]	; 0x38
 800a964:	2400      	movs	r4, #0
 800a966:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a96a:	9316      	str	r3, [sp, #88]	; 0x58
 800a96c:	46a0      	mov	r8, r4
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	4648      	mov	r0, r9
 800a972:	6859      	ldr	r1, [r3, #4]
 800a974:	f001 fd44 	bl	800c400 <_Balloc>
 800a978:	9005      	str	r0, [sp, #20]
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f43f aef6 	beq.w	800a76c <_strtod_l+0x43c>
 800a980:	9b07      	ldr	r3, [sp, #28]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	3202      	adds	r2, #2
 800a986:	f103 010c 	add.w	r1, r3, #12
 800a98a:	0092      	lsls	r2, r2, #2
 800a98c:	300c      	adds	r0, #12
 800a98e:	f7fe fe39 	bl	8009604 <memcpy>
 800a992:	aa1e      	add	r2, sp, #120	; 0x78
 800a994:	a91d      	add	r1, sp, #116	; 0x74
 800a996:	ec4b ab10 	vmov	d0, sl, fp
 800a99a:	4648      	mov	r0, r9
 800a99c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a9a0:	f002 f870 	bl	800ca84 <__d2b>
 800a9a4:	901c      	str	r0, [sp, #112]	; 0x70
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f43f aee0 	beq.w	800a76c <_strtod_l+0x43c>
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	4648      	mov	r0, r9
 800a9b0:	f001 fe38 	bl	800c624 <__i2b>
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aed8 	beq.w	800a76c <_strtod_l+0x43c>
 800a9bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a9be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	bfab      	itete	ge
 800a9c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a9c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a9c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a9ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a9cc:	bfac      	ite	ge
 800a9ce:	18f7      	addge	r7, r6, r3
 800a9d0:	1b9d      	sublt	r5, r3, r6
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	1af6      	subs	r6, r6, r3
 800a9d6:	4416      	add	r6, r2
 800a9d8:	4b63      	ldr	r3, [pc, #396]	; (800ab68 <_strtod_l+0x838>)
 800a9da:	3e01      	subs	r6, #1
 800a9dc:	429e      	cmp	r6, r3
 800a9de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9e2:	f280 80af 	bge.w	800ab44 <_strtod_l+0x814>
 800a9e6:	1b9b      	subs	r3, r3, r6
 800a9e8:	2b1f      	cmp	r3, #31
 800a9ea:	eba2 0203 	sub.w	r2, r2, r3
 800a9ee:	f04f 0101 	mov.w	r1, #1
 800a9f2:	f300 809b 	bgt.w	800ab2c <_strtod_l+0x7fc>
 800a9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800aa00:	18be      	adds	r6, r7, r2
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	42b7      	cmp	r7, r6
 800aa06:	4415      	add	r5, r2
 800aa08:	441d      	add	r5, r3
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	bfa8      	it	ge
 800aa0e:	4633      	movge	r3, r6
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	bfa8      	it	ge
 800aa14:	462b      	movge	r3, r5
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfc2      	ittt	gt
 800aa1a:	1af6      	subgt	r6, r6, r3
 800aa1c:	1aed      	subgt	r5, r5, r3
 800aa1e:	1aff      	subgt	r7, r7, r3
 800aa20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa22:	b1bb      	cbz	r3, 800aa54 <_strtod_l+0x724>
 800aa24:	4641      	mov	r1, r8
 800aa26:	461a      	mov	r2, r3
 800aa28:	4648      	mov	r0, r9
 800aa2a:	f001 fe9b 	bl	800c764 <__pow5mult>
 800aa2e:	4680      	mov	r8, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f43f ae9b 	beq.w	800a76c <_strtod_l+0x43c>
 800aa36:	4601      	mov	r1, r0
 800aa38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa3a:	4648      	mov	r0, r9
 800aa3c:	f001 fdfb 	bl	800c636 <__multiply>
 800aa40:	900c      	str	r0, [sp, #48]	; 0x30
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f43f ae92 	beq.w	800a76c <_strtod_l+0x43c>
 800aa48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa4a:	4648      	mov	r0, r9
 800aa4c:	f001 fd0c 	bl	800c468 <_Bfree>
 800aa50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa52:	931c      	str	r3, [sp, #112]	; 0x70
 800aa54:	2e00      	cmp	r6, #0
 800aa56:	dc7a      	bgt.n	800ab4e <_strtod_l+0x81e>
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd08      	ble.n	800aa70 <_strtod_l+0x740>
 800aa5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa60:	9905      	ldr	r1, [sp, #20]
 800aa62:	4648      	mov	r0, r9
 800aa64:	f001 fe7e 	bl	800c764 <__pow5mult>
 800aa68:	9005      	str	r0, [sp, #20]
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f43f ae7e 	beq.w	800a76c <_strtod_l+0x43c>
 800aa70:	2d00      	cmp	r5, #0
 800aa72:	dd08      	ble.n	800aa86 <_strtod_l+0x756>
 800aa74:	462a      	mov	r2, r5
 800aa76:	9905      	ldr	r1, [sp, #20]
 800aa78:	4648      	mov	r0, r9
 800aa7a:	f001 fec1 	bl	800c800 <__lshift>
 800aa7e:	9005      	str	r0, [sp, #20]
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f43f ae73 	beq.w	800a76c <_strtod_l+0x43c>
 800aa86:	2f00      	cmp	r7, #0
 800aa88:	dd08      	ble.n	800aa9c <_strtod_l+0x76c>
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	463a      	mov	r2, r7
 800aa8e:	4648      	mov	r0, r9
 800aa90:	f001 feb6 	bl	800c800 <__lshift>
 800aa94:	4680      	mov	r8, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f43f ae68 	beq.w	800a76c <_strtod_l+0x43c>
 800aa9c:	9a05      	ldr	r2, [sp, #20]
 800aa9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aaa0:	4648      	mov	r0, r9
 800aaa2:	f001 ff1b 	bl	800c8dc <__mdiff>
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f43f ae5f 	beq.w	800a76c <_strtod_l+0x43c>
 800aaae:	68c3      	ldr	r3, [r0, #12]
 800aab0:	930c      	str	r3, [sp, #48]	; 0x30
 800aab2:	2300      	movs	r3, #0
 800aab4:	60c3      	str	r3, [r0, #12]
 800aab6:	4641      	mov	r1, r8
 800aab8:	f001 fef6 	bl	800c8a8 <__mcmp>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	da55      	bge.n	800ab6c <_strtod_l+0x83c>
 800aac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aac2:	b9e3      	cbnz	r3, 800aafe <_strtod_l+0x7ce>
 800aac4:	f1ba 0f00 	cmp.w	sl, #0
 800aac8:	d119      	bne.n	800aafe <_strtod_l+0x7ce>
 800aaca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aace:	b9b3      	cbnz	r3, 800aafe <_strtod_l+0x7ce>
 800aad0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aad4:	0d1b      	lsrs	r3, r3, #20
 800aad6:	051b      	lsls	r3, r3, #20
 800aad8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aadc:	d90f      	bls.n	800aafe <_strtod_l+0x7ce>
 800aade:	6963      	ldr	r3, [r4, #20]
 800aae0:	b913      	cbnz	r3, 800aae8 <_strtod_l+0x7b8>
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	dd0a      	ble.n	800aafe <_strtod_l+0x7ce>
 800aae8:	4621      	mov	r1, r4
 800aaea:	2201      	movs	r2, #1
 800aaec:	4648      	mov	r0, r9
 800aaee:	f001 fe87 	bl	800c800 <__lshift>
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	f001 fed7 	bl	800c8a8 <__mcmp>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	dc67      	bgt.n	800abce <_strtod_l+0x89e>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d171      	bne.n	800abe8 <_strtod_l+0x8b8>
 800ab04:	e63d      	b.n	800a782 <_strtod_l+0x452>
 800ab06:	f018 0f01 	tst.w	r8, #1
 800ab0a:	d004      	beq.n	800ab16 <_strtod_l+0x7e6>
 800ab0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab10:	f7f5 fd92 	bl	8000638 <__aeabi_dmul>
 800ab14:	2301      	movs	r3, #1
 800ab16:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab1a:	3508      	adds	r5, #8
 800ab1c:	e6e5      	b.n	800a8ea <_strtod_l+0x5ba>
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	ea03 0a0a 	and.w	sl, r3, sl
 800ab2a:	e6ff      	b.n	800a92c <_strtod_l+0x5fc>
 800ab2c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab30:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab34:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab38:	36e2      	adds	r6, #226	; 0xe2
 800ab3a:	fa01 f306 	lsl.w	r3, r1, r6
 800ab3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab40:	910f      	str	r1, [sp, #60]	; 0x3c
 800ab42:	e75d      	b.n	800aa00 <_strtod_l+0x6d0>
 800ab44:	2300      	movs	r3, #0
 800ab46:	930a      	str	r3, [sp, #40]	; 0x28
 800ab48:	2301      	movs	r3, #1
 800ab4a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab4c:	e758      	b.n	800aa00 <_strtod_l+0x6d0>
 800ab4e:	4632      	mov	r2, r6
 800ab50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab52:	4648      	mov	r0, r9
 800ab54:	f001 fe54 	bl	800c800 <__lshift>
 800ab58:	901c      	str	r0, [sp, #112]	; 0x70
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f47f af7c 	bne.w	800aa58 <_strtod_l+0x728>
 800ab60:	e604      	b.n	800a76c <_strtod_l+0x43c>
 800ab62:	bf00      	nop
 800ab64:	0800fb18 	.word	0x0800fb18
 800ab68:	fffffc02 	.word	0xfffffc02
 800ab6c:	465d      	mov	r5, fp
 800ab6e:	f040 8086 	bne.w	800ac7e <_strtod_l+0x94e>
 800ab72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab78:	b32a      	cbz	r2, 800abc6 <_strtod_l+0x896>
 800ab7a:	4aaf      	ldr	r2, [pc, #700]	; (800ae38 <_strtod_l+0xb08>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d153      	bne.n	800ac28 <_strtod_l+0x8f8>
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	4650      	mov	r0, sl
 800ab84:	b1d3      	cbz	r3, 800abbc <_strtod_l+0x88c>
 800ab86:	4aad      	ldr	r2, [pc, #692]	; (800ae3c <_strtod_l+0xb0c>)
 800ab88:	402a      	ands	r2, r5
 800ab8a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ab92:	d816      	bhi.n	800abc2 <_strtod_l+0x892>
 800ab94:	0d12      	lsrs	r2, r2, #20
 800ab96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9e:	4298      	cmp	r0, r3
 800aba0:	d142      	bne.n	800ac28 <_strtod_l+0x8f8>
 800aba2:	4ba7      	ldr	r3, [pc, #668]	; (800ae40 <_strtod_l+0xb10>)
 800aba4:	429d      	cmp	r5, r3
 800aba6:	d102      	bne.n	800abae <_strtod_l+0x87e>
 800aba8:	3001      	adds	r0, #1
 800abaa:	f43f addf 	beq.w	800a76c <_strtod_l+0x43c>
 800abae:	4ba3      	ldr	r3, [pc, #652]	; (800ae3c <_strtod_l+0xb0c>)
 800abb0:	402b      	ands	r3, r5
 800abb2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800abb6:	f04f 0a00 	mov.w	sl, #0
 800abba:	e7a0      	b.n	800aafe <_strtod_l+0x7ce>
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc0:	e7ed      	b.n	800ab9e <_strtod_l+0x86e>
 800abc2:	460b      	mov	r3, r1
 800abc4:	e7eb      	b.n	800ab9e <_strtod_l+0x86e>
 800abc6:	bb7b      	cbnz	r3, 800ac28 <_strtod_l+0x8f8>
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	d12c      	bne.n	800ac28 <_strtod_l+0x8f8>
 800abce:	9904      	ldr	r1, [sp, #16]
 800abd0:	4a9a      	ldr	r2, [pc, #616]	; (800ae3c <_strtod_l+0xb0c>)
 800abd2:	465b      	mov	r3, fp
 800abd4:	b1f1      	cbz	r1, 800ac14 <_strtod_l+0x8e4>
 800abd6:	ea02 010b 	and.w	r1, r2, fp
 800abda:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abde:	dc19      	bgt.n	800ac14 <_strtod_l+0x8e4>
 800abe0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abe4:	f77f ae5b 	ble.w	800a89e <_strtod_l+0x56e>
 800abe8:	4a96      	ldr	r2, [pc, #600]	; (800ae44 <_strtod_l+0xb14>)
 800abea:	2300      	movs	r3, #0
 800abec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800abf0:	4650      	mov	r0, sl
 800abf2:	4659      	mov	r1, fp
 800abf4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800abf8:	f7f5 fd1e 	bl	8000638 <__aeabi_dmul>
 800abfc:	4682      	mov	sl, r0
 800abfe:	468b      	mov	fp, r1
 800ac00:	2900      	cmp	r1, #0
 800ac02:	f47f adbe 	bne.w	800a782 <_strtod_l+0x452>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f47f adbb 	bne.w	800a782 <_strtod_l+0x452>
 800ac0c:	2322      	movs	r3, #34	; 0x22
 800ac0e:	f8c9 3000 	str.w	r3, [r9]
 800ac12:	e5b6      	b.n	800a782 <_strtod_l+0x452>
 800ac14:	4013      	ands	r3, r2
 800ac16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac22:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac26:	e76a      	b.n	800aafe <_strtod_l+0x7ce>
 800ac28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2a:	b193      	cbz	r3, 800ac52 <_strtod_l+0x922>
 800ac2c:	422b      	tst	r3, r5
 800ac2e:	f43f af66 	beq.w	800aafe <_strtod_l+0x7ce>
 800ac32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac34:	9a04      	ldr	r2, [sp, #16]
 800ac36:	4650      	mov	r0, sl
 800ac38:	4659      	mov	r1, fp
 800ac3a:	b173      	cbz	r3, 800ac5a <_strtod_l+0x92a>
 800ac3c:	f7ff fb5a 	bl	800a2f4 <sulp>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac48:	f7f5 fb40 	bl	80002cc <__adddf3>
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	468b      	mov	fp, r1
 800ac50:	e755      	b.n	800aafe <_strtod_l+0x7ce>
 800ac52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac54:	ea13 0f0a 	tst.w	r3, sl
 800ac58:	e7e9      	b.n	800ac2e <_strtod_l+0x8fe>
 800ac5a:	f7ff fb4b 	bl	800a2f4 <sulp>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac66:	f7f5 fb2f 	bl	80002c8 <__aeabi_dsub>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4682      	mov	sl, r0
 800ac70:	468b      	mov	fp, r1
 800ac72:	f7f5 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f47f ae11 	bne.w	800a89e <_strtod_l+0x56e>
 800ac7c:	e73f      	b.n	800aafe <_strtod_l+0x7ce>
 800ac7e:	4641      	mov	r1, r8
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 ff4e 	bl	800cb22 <__ratio>
 800ac86:	ec57 6b10 	vmov	r6, r7, d0
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac90:	ee10 0a10 	vmov	r0, s0
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 ff4b 	bl	8000b30 <__aeabi_dcmple>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d077      	beq.n	800ad8e <_strtod_l+0xa5e>
 800ac9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d04a      	beq.n	800ad3a <_strtod_l+0xa0a>
 800aca4:	4b68      	ldr	r3, [pc, #416]	; (800ae48 <_strtod_l+0xb18>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800acac:	4f66      	ldr	r7, [pc, #408]	; (800ae48 <_strtod_l+0xb18>)
 800acae:	2600      	movs	r6, #0
 800acb0:	4b62      	ldr	r3, [pc, #392]	; (800ae3c <_strtod_l+0xb0c>)
 800acb2:	402b      	ands	r3, r5
 800acb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acb8:	4b64      	ldr	r3, [pc, #400]	; (800ae4c <_strtod_l+0xb1c>)
 800acba:	429a      	cmp	r2, r3
 800acbc:	f040 80ce 	bne.w	800ae5c <_strtod_l+0xb2c>
 800acc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acc8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800accc:	ec4b ab10 	vmov	d0, sl, fp
 800acd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800acd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acd8:	f001 fe5e 	bl	800c998 <__ulp>
 800acdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ace0:	ec53 2b10 	vmov	r2, r3, d0
 800ace4:	f7f5 fca8 	bl	8000638 <__aeabi_dmul>
 800ace8:	4652      	mov	r2, sl
 800acea:	465b      	mov	r3, fp
 800acec:	f7f5 faee 	bl	80002cc <__adddf3>
 800acf0:	460b      	mov	r3, r1
 800acf2:	4952      	ldr	r1, [pc, #328]	; (800ae3c <_strtod_l+0xb0c>)
 800acf4:	4a56      	ldr	r2, [pc, #344]	; (800ae50 <_strtod_l+0xb20>)
 800acf6:	4019      	ands	r1, r3
 800acf8:	4291      	cmp	r1, r2
 800acfa:	4682      	mov	sl, r0
 800acfc:	d95b      	bls.n	800adb6 <_strtod_l+0xa86>
 800acfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d103      	bne.n	800ad10 <_strtod_l+0x9e0>
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	f43f ad2e 	beq.w	800a76c <_strtod_l+0x43c>
 800ad10:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ae40 <_strtod_l+0xb10>
 800ad14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ad18:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad1a:	4648      	mov	r0, r9
 800ad1c:	f001 fba4 	bl	800c468 <_Bfree>
 800ad20:	9905      	ldr	r1, [sp, #20]
 800ad22:	4648      	mov	r0, r9
 800ad24:	f001 fba0 	bl	800c468 <_Bfree>
 800ad28:	4641      	mov	r1, r8
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f001 fb9c 	bl	800c468 <_Bfree>
 800ad30:	4621      	mov	r1, r4
 800ad32:	4648      	mov	r0, r9
 800ad34:	f001 fb98 	bl	800c468 <_Bfree>
 800ad38:	e619      	b.n	800a96e <_strtod_l+0x63e>
 800ad3a:	f1ba 0f00 	cmp.w	sl, #0
 800ad3e:	d11a      	bne.n	800ad76 <_strtod_l+0xa46>
 800ad40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad44:	b9eb      	cbnz	r3, 800ad82 <_strtod_l+0xa52>
 800ad46:	2200      	movs	r2, #0
 800ad48:	4b3f      	ldr	r3, [pc, #252]	; (800ae48 <_strtod_l+0xb18>)
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	f7f5 fee5 	bl	8000b1c <__aeabi_dcmplt>
 800ad52:	b9c8      	cbnz	r0, 800ad88 <_strtod_l+0xa58>
 800ad54:	4630      	mov	r0, r6
 800ad56:	4639      	mov	r1, r7
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4b3e      	ldr	r3, [pc, #248]	; (800ae54 <_strtod_l+0xb24>)
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	4606      	mov	r6, r0
 800ad62:	460f      	mov	r7, r1
 800ad64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ad68:	9618      	str	r6, [sp, #96]	; 0x60
 800ad6a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad6c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ad70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad74:	e79c      	b.n	800acb0 <_strtod_l+0x980>
 800ad76:	f1ba 0f01 	cmp.w	sl, #1
 800ad7a:	d102      	bne.n	800ad82 <_strtod_l+0xa52>
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	f43f ad8e 	beq.w	800a89e <_strtod_l+0x56e>
 800ad82:	2200      	movs	r2, #0
 800ad84:	4b34      	ldr	r3, [pc, #208]	; (800ae58 <_strtod_l+0xb28>)
 800ad86:	e78f      	b.n	800aca8 <_strtod_l+0x978>
 800ad88:	2600      	movs	r6, #0
 800ad8a:	4f32      	ldr	r7, [pc, #200]	; (800ae54 <_strtod_l+0xb24>)
 800ad8c:	e7ea      	b.n	800ad64 <_strtod_l+0xa34>
 800ad8e:	4b31      	ldr	r3, [pc, #196]	; (800ae54 <_strtod_l+0xb24>)
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	2200      	movs	r2, #0
 800ad96:	f7f5 fc4f 	bl	8000638 <__aeabi_dmul>
 800ad9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	b933      	cbnz	r3, 800adb0 <_strtod_l+0xa80>
 800ada2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ada6:	9010      	str	r0, [sp, #64]	; 0x40
 800ada8:	9311      	str	r3, [sp, #68]	; 0x44
 800adaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adae:	e7df      	b.n	800ad70 <_strtod_l+0xa40>
 800adb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800adb4:	e7f9      	b.n	800adaa <_strtod_l+0xa7a>
 800adb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1ab      	bne.n	800ad18 <_strtod_l+0x9e8>
 800adc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adc4:	0d1b      	lsrs	r3, r3, #20
 800adc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	429a      	cmp	r2, r3
 800adcc:	465d      	mov	r5, fp
 800adce:	d1a3      	bne.n	800ad18 <_strtod_l+0x9e8>
 800add0:	4639      	mov	r1, r7
 800add2:	4630      	mov	r0, r6
 800add4:	f7f5 fee0 	bl	8000b98 <__aeabi_d2iz>
 800add8:	f7f5 fbc4 	bl	8000564 <__aeabi_i2d>
 800addc:	460b      	mov	r3, r1
 800adde:	4602      	mov	r2, r0
 800ade0:	4639      	mov	r1, r7
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7f5 fa70 	bl	80002c8 <__aeabi_dsub>
 800ade8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adea:	4606      	mov	r6, r0
 800adec:	460f      	mov	r7, r1
 800adee:	b933      	cbnz	r3, 800adfe <_strtod_l+0xace>
 800adf0:	f1ba 0f00 	cmp.w	sl, #0
 800adf4:	d103      	bne.n	800adfe <_strtod_l+0xace>
 800adf6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	d06d      	beq.n	800aeda <_strtod_l+0xbaa>
 800adfe:	a30a      	add	r3, pc, #40	; (adr r3, 800ae28 <_strtod_l+0xaf8>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	4630      	mov	r0, r6
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fe88 	bl	8000b1c <__aeabi_dcmplt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f47f acb8 	bne.w	800a782 <_strtod_l+0x452>
 800ae12:	a307      	add	r3, pc, #28	; (adr r3, 800ae30 <_strtod_l+0xb00>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	4630      	mov	r0, r6
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	f7f5 fe9c 	bl	8000b58 <__aeabi_dcmpgt>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f43f af79 	beq.w	800ad18 <_strtod_l+0x9e8>
 800ae26:	e4ac      	b.n	800a782 <_strtod_l+0x452>
 800ae28:	94a03595 	.word	0x94a03595
 800ae2c:	3fdfffff 	.word	0x3fdfffff
 800ae30:	35afe535 	.word	0x35afe535
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	000fffff 	.word	0x000fffff
 800ae3c:	7ff00000 	.word	0x7ff00000
 800ae40:	7fefffff 	.word	0x7fefffff
 800ae44:	39500000 	.word	0x39500000
 800ae48:	3ff00000 	.word	0x3ff00000
 800ae4c:	7fe00000 	.word	0x7fe00000
 800ae50:	7c9fffff 	.word	0x7c9fffff
 800ae54:	3fe00000 	.word	0x3fe00000
 800ae58:	bff00000 	.word	0xbff00000
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	b333      	cbz	r3, 800aeae <_strtod_l+0xb7e>
 800ae60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae66:	d822      	bhi.n	800aeae <_strtod_l+0xb7e>
 800ae68:	a327      	add	r3, pc, #156	; (adr r3, 800af08 <_strtod_l+0xbd8>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 fe5d 	bl	8000b30 <__aeabi_dcmple>
 800ae76:	b1a0      	cbz	r0, 800aea2 <_strtod_l+0xb72>
 800ae78:	4639      	mov	r1, r7
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7f5 feb4 	bl	8000be8 <__aeabi_d2uiz>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	bf08      	it	eq
 800ae84:	2001      	moveq	r0, #1
 800ae86:	f7f5 fb5d 	bl	8000544 <__aeabi_ui2d>
 800ae8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	bb03      	cbnz	r3, 800aed4 <_strtod_l+0xba4>
 800ae92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae96:	9012      	str	r0, [sp, #72]	; 0x48
 800ae98:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ae9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aea6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeae:	ed9d 0b08 	vldr	d0, [sp, #32]
 800aeb2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800aeb6:	f001 fd6f 	bl	800c998 <__ulp>
 800aeba:	4650      	mov	r0, sl
 800aebc:	ec53 2b10 	vmov	r2, r3, d0
 800aec0:	4659      	mov	r1, fp
 800aec2:	f7f5 fbb9 	bl	8000638 <__aeabi_dmul>
 800aec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aeca:	f7f5 f9ff 	bl	80002cc <__adddf3>
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	e772      	b.n	800adba <_strtod_l+0xa8a>
 800aed4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800aed8:	e7df      	b.n	800ae9a <_strtod_l+0xb6a>
 800aeda:	a30d      	add	r3, pc, #52	; (adr r3, 800af10 <_strtod_l+0xbe0>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 fe1c 	bl	8000b1c <__aeabi_dcmplt>
 800aee4:	e79c      	b.n	800ae20 <_strtod_l+0xaf0>
 800aee6:	2300      	movs	r3, #0
 800aee8:	930d      	str	r3, [sp, #52]	; 0x34
 800aeea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	f7ff ba61 	b.w	800a3b6 <_strtod_l+0x86>
 800aef4:	2b65      	cmp	r3, #101	; 0x65
 800aef6:	f04f 0200 	mov.w	r2, #0
 800aefa:	f43f ab4e 	beq.w	800a59a <_strtod_l+0x26a>
 800aefe:	2101      	movs	r1, #1
 800af00:	4614      	mov	r4, r2
 800af02:	9104      	str	r1, [sp, #16]
 800af04:	f7ff bacb 	b.w	800a49e <_strtod_l+0x16e>
 800af08:	ffc00000 	.word	0xffc00000
 800af0c:	41dfffff 	.word	0x41dfffff
 800af10:	94a03595 	.word	0x94a03595
 800af14:	3fcfffff 	.word	0x3fcfffff

0800af18 <_strtod_r>:
 800af18:	4b05      	ldr	r3, [pc, #20]	; (800af30 <_strtod_r+0x18>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	b410      	push	{r4}
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	4c04      	ldr	r4, [pc, #16]	; (800af34 <_strtod_r+0x1c>)
 800af22:	2b00      	cmp	r3, #0
 800af24:	bf08      	it	eq
 800af26:	4623      	moveq	r3, r4
 800af28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af2c:	f7ff ba00 	b.w	800a330 <_strtod_l>
 800af30:	20000058 	.word	0x20000058
 800af34:	200000bc 	.word	0x200000bc

0800af38 <_strtol_l.isra.0>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	4680      	mov	r8, r0
 800af3e:	4689      	mov	r9, r1
 800af40:	4692      	mov	sl, r2
 800af42:	461e      	mov	r6, r3
 800af44:	460f      	mov	r7, r1
 800af46:	463d      	mov	r5, r7
 800af48:	9808      	ldr	r0, [sp, #32]
 800af4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af4e:	f001 fa29 	bl	800c3a4 <__locale_ctype_ptr_l>
 800af52:	4420      	add	r0, r4
 800af54:	7843      	ldrb	r3, [r0, #1]
 800af56:	f013 0308 	ands.w	r3, r3, #8
 800af5a:	d132      	bne.n	800afc2 <_strtol_l.isra.0+0x8a>
 800af5c:	2c2d      	cmp	r4, #45	; 0x2d
 800af5e:	d132      	bne.n	800afc6 <_strtol_l.isra.0+0x8e>
 800af60:	787c      	ldrb	r4, [r7, #1]
 800af62:	1cbd      	adds	r5, r7, #2
 800af64:	2201      	movs	r2, #1
 800af66:	2e00      	cmp	r6, #0
 800af68:	d05d      	beq.n	800b026 <_strtol_l.isra.0+0xee>
 800af6a:	2e10      	cmp	r6, #16
 800af6c:	d109      	bne.n	800af82 <_strtol_l.isra.0+0x4a>
 800af6e:	2c30      	cmp	r4, #48	; 0x30
 800af70:	d107      	bne.n	800af82 <_strtol_l.isra.0+0x4a>
 800af72:	782b      	ldrb	r3, [r5, #0]
 800af74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af78:	2b58      	cmp	r3, #88	; 0x58
 800af7a:	d14f      	bne.n	800b01c <_strtol_l.isra.0+0xe4>
 800af7c:	786c      	ldrb	r4, [r5, #1]
 800af7e:	2610      	movs	r6, #16
 800af80:	3502      	adds	r5, #2
 800af82:	2a00      	cmp	r2, #0
 800af84:	bf14      	ite	ne
 800af86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800af8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800af8e:	2700      	movs	r7, #0
 800af90:	fbb1 fcf6 	udiv	ip, r1, r6
 800af94:	4638      	mov	r0, r7
 800af96:	fb06 1e1c 	mls	lr, r6, ip, r1
 800af9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800af9e:	2b09      	cmp	r3, #9
 800afa0:	d817      	bhi.n	800afd2 <_strtol_l.isra.0+0x9a>
 800afa2:	461c      	mov	r4, r3
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	dd23      	ble.n	800aff0 <_strtol_l.isra.0+0xb8>
 800afa8:	1c7b      	adds	r3, r7, #1
 800afaa:	d007      	beq.n	800afbc <_strtol_l.isra.0+0x84>
 800afac:	4584      	cmp	ip, r0
 800afae:	d31c      	bcc.n	800afea <_strtol_l.isra.0+0xb2>
 800afb0:	d101      	bne.n	800afb6 <_strtol_l.isra.0+0x7e>
 800afb2:	45a6      	cmp	lr, r4
 800afb4:	db19      	blt.n	800afea <_strtol_l.isra.0+0xb2>
 800afb6:	fb00 4006 	mla	r0, r0, r6, r4
 800afba:	2701      	movs	r7, #1
 800afbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc0:	e7eb      	b.n	800af9a <_strtol_l.isra.0+0x62>
 800afc2:	462f      	mov	r7, r5
 800afc4:	e7bf      	b.n	800af46 <_strtol_l.isra.0+0xe>
 800afc6:	2c2b      	cmp	r4, #43	; 0x2b
 800afc8:	bf04      	itt	eq
 800afca:	1cbd      	addeq	r5, r7, #2
 800afcc:	787c      	ldrbeq	r4, [r7, #1]
 800afce:	461a      	mov	r2, r3
 800afd0:	e7c9      	b.n	800af66 <_strtol_l.isra.0+0x2e>
 800afd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800afd6:	2b19      	cmp	r3, #25
 800afd8:	d801      	bhi.n	800afde <_strtol_l.isra.0+0xa6>
 800afda:	3c37      	subs	r4, #55	; 0x37
 800afdc:	e7e2      	b.n	800afa4 <_strtol_l.isra.0+0x6c>
 800afde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800afe2:	2b19      	cmp	r3, #25
 800afe4:	d804      	bhi.n	800aff0 <_strtol_l.isra.0+0xb8>
 800afe6:	3c57      	subs	r4, #87	; 0x57
 800afe8:	e7dc      	b.n	800afa4 <_strtol_l.isra.0+0x6c>
 800afea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800afee:	e7e5      	b.n	800afbc <_strtol_l.isra.0+0x84>
 800aff0:	1c7b      	adds	r3, r7, #1
 800aff2:	d108      	bne.n	800b006 <_strtol_l.isra.0+0xce>
 800aff4:	2322      	movs	r3, #34	; 0x22
 800aff6:	f8c8 3000 	str.w	r3, [r8]
 800affa:	4608      	mov	r0, r1
 800affc:	f1ba 0f00 	cmp.w	sl, #0
 800b000:	d107      	bne.n	800b012 <_strtol_l.isra.0+0xda>
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	b102      	cbz	r2, 800b00a <_strtol_l.isra.0+0xd2>
 800b008:	4240      	negs	r0, r0
 800b00a:	f1ba 0f00 	cmp.w	sl, #0
 800b00e:	d0f8      	beq.n	800b002 <_strtol_l.isra.0+0xca>
 800b010:	b10f      	cbz	r7, 800b016 <_strtol_l.isra.0+0xde>
 800b012:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b016:	f8ca 9000 	str.w	r9, [sl]
 800b01a:	e7f2      	b.n	800b002 <_strtol_l.isra.0+0xca>
 800b01c:	2430      	movs	r4, #48	; 0x30
 800b01e:	2e00      	cmp	r6, #0
 800b020:	d1af      	bne.n	800af82 <_strtol_l.isra.0+0x4a>
 800b022:	2608      	movs	r6, #8
 800b024:	e7ad      	b.n	800af82 <_strtol_l.isra.0+0x4a>
 800b026:	2c30      	cmp	r4, #48	; 0x30
 800b028:	d0a3      	beq.n	800af72 <_strtol_l.isra.0+0x3a>
 800b02a:	260a      	movs	r6, #10
 800b02c:	e7a9      	b.n	800af82 <_strtol_l.isra.0+0x4a>
	...

0800b030 <_strtol_r>:
 800b030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b032:	4c06      	ldr	r4, [pc, #24]	; (800b04c <_strtol_r+0x1c>)
 800b034:	4d06      	ldr	r5, [pc, #24]	; (800b050 <_strtol_r+0x20>)
 800b036:	6824      	ldr	r4, [r4, #0]
 800b038:	6a24      	ldr	r4, [r4, #32]
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	bf08      	it	eq
 800b03e:	462c      	moveq	r4, r5
 800b040:	9400      	str	r4, [sp, #0]
 800b042:	f7ff ff79 	bl	800af38 <_strtol_l.isra.0>
 800b046:	b003      	add	sp, #12
 800b048:	bd30      	pop	{r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	20000058 	.word	0x20000058
 800b050:	200000bc 	.word	0x200000bc

0800b054 <__utoa>:
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <__utoa+0x78>)
 800b058:	b08b      	sub	sp, #44	; 0x2c
 800b05a:	4605      	mov	r5, r0
 800b05c:	460c      	mov	r4, r1
 800b05e:	466e      	mov	r6, sp
 800b060:	f103 0c20 	add.w	ip, r3, #32
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	6859      	ldr	r1, [r3, #4]
 800b068:	4637      	mov	r7, r6
 800b06a:	c703      	stmia	r7!, {r0, r1}
 800b06c:	3308      	adds	r3, #8
 800b06e:	4563      	cmp	r3, ip
 800b070:	463e      	mov	r6, r7
 800b072:	d1f7      	bne.n	800b064 <__utoa+0x10>
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	791b      	ldrb	r3, [r3, #4]
 800b078:	713b      	strb	r3, [r7, #4]
 800b07a:	1e93      	subs	r3, r2, #2
 800b07c:	2b22      	cmp	r3, #34	; 0x22
 800b07e:	6038      	str	r0, [r7, #0]
 800b080:	f04f 0300 	mov.w	r3, #0
 800b084:	d904      	bls.n	800b090 <__utoa+0x3c>
 800b086:	7023      	strb	r3, [r4, #0]
 800b088:	461c      	mov	r4, r3
 800b08a:	4620      	mov	r0, r4
 800b08c:	b00b      	add	sp, #44	; 0x2c
 800b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b090:	1e66      	subs	r6, r4, #1
 800b092:	fbb5 f0f2 	udiv	r0, r5, r2
 800b096:	af0a      	add	r7, sp, #40	; 0x28
 800b098:	fb02 5510 	mls	r5, r2, r0, r5
 800b09c:	443d      	add	r5, r7
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b0a4:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	b968      	cbnz	r0, 800b0c8 <__utoa+0x74>
 800b0ac:	5460      	strb	r0, [r4, r1]
 800b0ae:	4423      	add	r3, r4
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	1b19      	subs	r1, r3, r4
 800b0b4:	1b10      	subs	r0, r2, r4
 800b0b6:	4281      	cmp	r1, r0
 800b0b8:	dde7      	ble.n	800b08a <__utoa+0x36>
 800b0ba:	7811      	ldrb	r1, [r2, #0]
 800b0bc:	7818      	ldrb	r0, [r3, #0]
 800b0be:	f802 0b01 	strb.w	r0, [r2], #1
 800b0c2:	f803 1901 	strb.w	r1, [r3], #-1
 800b0c6:	e7f4      	b.n	800b0b2 <__utoa+0x5e>
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	e7e2      	b.n	800b092 <__utoa+0x3e>
 800b0cc:	0800fb40 	.word	0x0800fb40

0800b0d0 <quorem>:
 800b0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	6903      	ldr	r3, [r0, #16]
 800b0d6:	690c      	ldr	r4, [r1, #16]
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	4680      	mov	r8, r0
 800b0dc:	f2c0 8082 	blt.w	800b1e4 <quorem+0x114>
 800b0e0:	3c01      	subs	r4, #1
 800b0e2:	f101 0714 	add.w	r7, r1, #20
 800b0e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b0ea:	f100 0614 	add.w	r6, r0, #20
 800b0ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b0f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b0f6:	eb06 030c 	add.w	r3, r6, ip
 800b0fa:	3501      	adds	r5, #1
 800b0fc:	eb07 090c 	add.w	r9, r7, ip
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	fbb0 f5f5 	udiv	r5, r0, r5
 800b106:	b395      	cbz	r5, 800b16e <quorem+0x9e>
 800b108:	f04f 0a00 	mov.w	sl, #0
 800b10c:	4638      	mov	r0, r7
 800b10e:	46b6      	mov	lr, r6
 800b110:	46d3      	mov	fp, sl
 800b112:	f850 2b04 	ldr.w	r2, [r0], #4
 800b116:	b293      	uxth	r3, r2
 800b118:	fb05 a303 	mla	r3, r5, r3, sl
 800b11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b120:	b29b      	uxth	r3, r3
 800b122:	ebab 0303 	sub.w	r3, fp, r3
 800b126:	0c12      	lsrs	r2, r2, #16
 800b128:	f8de b000 	ldr.w	fp, [lr]
 800b12c:	fb05 a202 	mla	r2, r5, r2, sl
 800b130:	fa13 f38b 	uxtah	r3, r3, fp
 800b134:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b138:	fa1f fb82 	uxth.w	fp, r2
 800b13c:	f8de 2000 	ldr.w	r2, [lr]
 800b140:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b148:	b29b      	uxth	r3, r3
 800b14a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b14e:	4581      	cmp	r9, r0
 800b150:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b154:	f84e 3b04 	str.w	r3, [lr], #4
 800b158:	d2db      	bcs.n	800b112 <quorem+0x42>
 800b15a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b15e:	b933      	cbnz	r3, 800b16e <quorem+0x9e>
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	3b04      	subs	r3, #4
 800b164:	429e      	cmp	r6, r3
 800b166:	461a      	mov	r2, r3
 800b168:	d330      	bcc.n	800b1cc <quorem+0xfc>
 800b16a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b16e:	4640      	mov	r0, r8
 800b170:	f001 fb9a 	bl	800c8a8 <__mcmp>
 800b174:	2800      	cmp	r0, #0
 800b176:	db25      	blt.n	800b1c4 <quorem+0xf4>
 800b178:	3501      	adds	r5, #1
 800b17a:	4630      	mov	r0, r6
 800b17c:	f04f 0c00 	mov.w	ip, #0
 800b180:	f857 2b04 	ldr.w	r2, [r7], #4
 800b184:	f8d0 e000 	ldr.w	lr, [r0]
 800b188:	b293      	uxth	r3, r2
 800b18a:	ebac 0303 	sub.w	r3, ip, r3
 800b18e:	0c12      	lsrs	r2, r2, #16
 800b190:	fa13 f38e 	uxtah	r3, r3, lr
 800b194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1a2:	45b9      	cmp	r9, r7
 800b1a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1a8:	f840 3b04 	str.w	r3, [r0], #4
 800b1ac:	d2e8      	bcs.n	800b180 <quorem+0xb0>
 800b1ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b1b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b1b6:	b92a      	cbnz	r2, 800b1c4 <quorem+0xf4>
 800b1b8:	3b04      	subs	r3, #4
 800b1ba:	429e      	cmp	r6, r3
 800b1bc:	461a      	mov	r2, r3
 800b1be:	d30b      	bcc.n	800b1d8 <quorem+0x108>
 800b1c0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	b003      	add	sp, #12
 800b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	3b04      	subs	r3, #4
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d1ca      	bne.n	800b16a <quorem+0x9a>
 800b1d4:	3c01      	subs	r4, #1
 800b1d6:	e7c5      	b.n	800b164 <quorem+0x94>
 800b1d8:	6812      	ldr	r2, [r2, #0]
 800b1da:	3b04      	subs	r3, #4
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	d1ef      	bne.n	800b1c0 <quorem+0xf0>
 800b1e0:	3c01      	subs	r4, #1
 800b1e2:	e7ea      	b.n	800b1ba <quorem+0xea>
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e7ee      	b.n	800b1c6 <quorem+0xf6>

0800b1e8 <_dtoa_r>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	ec57 6b10 	vmov	r6, r7, d0
 800b1f0:	b097      	sub	sp, #92	; 0x5c
 800b1f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1f4:	9106      	str	r1, [sp, #24]
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1fa:	9312      	str	r3, [sp, #72]	; 0x48
 800b1fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b200:	e9cd 6700 	strd	r6, r7, [sp]
 800b204:	b93d      	cbnz	r5, 800b216 <_dtoa_r+0x2e>
 800b206:	2010      	movs	r0, #16
 800b208:	f001 f8e0 	bl	800c3cc <malloc>
 800b20c:	6260      	str	r0, [r4, #36]	; 0x24
 800b20e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b212:	6005      	str	r5, [r0, #0]
 800b214:	60c5      	str	r5, [r0, #12]
 800b216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b218:	6819      	ldr	r1, [r3, #0]
 800b21a:	b151      	cbz	r1, 800b232 <_dtoa_r+0x4a>
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	604a      	str	r2, [r1, #4]
 800b220:	2301      	movs	r3, #1
 800b222:	4093      	lsls	r3, r2
 800b224:	608b      	str	r3, [r1, #8]
 800b226:	4620      	mov	r0, r4
 800b228:	f001 f91e 	bl	800c468 <_Bfree>
 800b22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	1e3b      	subs	r3, r7, #0
 800b234:	bfbb      	ittet	lt
 800b236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b23a:	9301      	strlt	r3, [sp, #4]
 800b23c:	2300      	movge	r3, #0
 800b23e:	2201      	movlt	r2, #1
 800b240:	bfac      	ite	ge
 800b242:	f8c8 3000 	strge.w	r3, [r8]
 800b246:	f8c8 2000 	strlt.w	r2, [r8]
 800b24a:	4baf      	ldr	r3, [pc, #700]	; (800b508 <_dtoa_r+0x320>)
 800b24c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b250:	ea33 0308 	bics.w	r3, r3, r8
 800b254:	d114      	bne.n	800b280 <_dtoa_r+0x98>
 800b256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b258:	f242 730f 	movw	r3, #9999	; 0x270f
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	9b00      	ldr	r3, [sp, #0]
 800b260:	b923      	cbnz	r3, 800b26c <_dtoa_r+0x84>
 800b262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b266:	2800      	cmp	r0, #0
 800b268:	f000 8542 	beq.w	800bcf0 <_dtoa_r+0xb08>
 800b26c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b26e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b51c <_dtoa_r+0x334>
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8544 	beq.w	800bd00 <_dtoa_r+0xb18>
 800b278:	f10b 0303 	add.w	r3, fp, #3
 800b27c:	f000 bd3e 	b.w	800bcfc <_dtoa_r+0xb14>
 800b280:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc3c 	bl	8000b08 <__aeabi_dcmpeq>
 800b290:	4681      	mov	r9, r0
 800b292:	b168      	cbz	r0, 800b2b0 <_dtoa_r+0xc8>
 800b294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b296:	2301      	movs	r3, #1
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8524 	beq.w	800bcea <_dtoa_r+0xb02>
 800b2a2:	4b9a      	ldr	r3, [pc, #616]	; (800b50c <_dtoa_r+0x324>)
 800b2a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	f000 bd28 	b.w	800bd00 <_dtoa_r+0xb18>
 800b2b0:	aa14      	add	r2, sp, #80	; 0x50
 800b2b2:	a915      	add	r1, sp, #84	; 0x54
 800b2b4:	ec47 6b10 	vmov	d0, r6, r7
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 fbe3 	bl	800ca84 <__d2b>
 800b2be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b2c2:	9004      	str	r0, [sp, #16]
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	d07c      	beq.n	800b3c2 <_dtoa_r+0x1da>
 800b2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b2d0:	46b2      	mov	sl, r6
 800b2d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b8b      	ldr	r3, [pc, #556]	; (800b510 <_dtoa_r+0x328>)
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	f7f4 ffef 	bl	80002c8 <__aeabi_dsub>
 800b2ea:	a381      	add	r3, pc, #516	; (adr r3, 800b4f0 <_dtoa_r+0x308>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f5 f9a2 	bl	8000638 <__aeabi_dmul>
 800b2f4:	a380      	add	r3, pc, #512	; (adr r3, 800b4f8 <_dtoa_r+0x310>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ffe7 	bl	80002cc <__adddf3>
 800b2fe:	4606      	mov	r6, r0
 800b300:	4628      	mov	r0, r5
 800b302:	460f      	mov	r7, r1
 800b304:	f7f5 f92e 	bl	8000564 <__aeabi_i2d>
 800b308:	a37d      	add	r3, pc, #500	; (adr r3, 800b500 <_dtoa_r+0x318>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ffd7 	bl	80002cc <__adddf3>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	f7f5 fc39 	bl	8000b98 <__aeabi_d2iz>
 800b326:	2200      	movs	r2, #0
 800b328:	4682      	mov	sl, r0
 800b32a:	2300      	movs	r3, #0
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 800b334:	b148      	cbz	r0, 800b34a <_dtoa_r+0x162>
 800b336:	4650      	mov	r0, sl
 800b338:	f7f5 f914 	bl	8000564 <__aeabi_i2d>
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	f7f5 fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 800b344:	b908      	cbnz	r0, 800b34a <_dtoa_r+0x162>
 800b346:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b34a:	f1ba 0f16 	cmp.w	sl, #22
 800b34e:	d859      	bhi.n	800b404 <_dtoa_r+0x21c>
 800b350:	4970      	ldr	r1, [pc, #448]	; (800b514 <_dtoa_r+0x32c>)
 800b352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b35e:	f7f5 fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 800b362:	2800      	cmp	r0, #0
 800b364:	d050      	beq.n	800b408 <_dtoa_r+0x220>
 800b366:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b36a:	2300      	movs	r3, #0
 800b36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b370:	1b5d      	subs	r5, r3, r5
 800b372:	f1b5 0801 	subs.w	r8, r5, #1
 800b376:	bf49      	itett	mi
 800b378:	f1c5 0301 	rsbmi	r3, r5, #1
 800b37c:	2300      	movpl	r3, #0
 800b37e:	9305      	strmi	r3, [sp, #20]
 800b380:	f04f 0800 	movmi.w	r8, #0
 800b384:	bf58      	it	pl
 800b386:	9305      	strpl	r3, [sp, #20]
 800b388:	f1ba 0f00 	cmp.w	sl, #0
 800b38c:	db3e      	blt.n	800b40c <_dtoa_r+0x224>
 800b38e:	2300      	movs	r3, #0
 800b390:	44d0      	add	r8, sl
 800b392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	9b06      	ldr	r3, [sp, #24]
 800b39a:	2b09      	cmp	r3, #9
 800b39c:	f200 8090 	bhi.w	800b4c0 <_dtoa_r+0x2d8>
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	bfc4      	itt	gt
 800b3a4:	3b04      	subgt	r3, #4
 800b3a6:	9306      	strgt	r3, [sp, #24]
 800b3a8:	9b06      	ldr	r3, [sp, #24]
 800b3aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b3ae:	bfcc      	ite	gt
 800b3b0:	2500      	movgt	r5, #0
 800b3b2:	2501      	movle	r5, #1
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	f200 808f 	bhi.w	800b4d8 <_dtoa_r+0x2f0>
 800b3ba:	e8df f003 	tbb	[pc, r3]
 800b3be:	7f7d      	.short	0x7f7d
 800b3c0:	7131      	.short	0x7131
 800b3c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b3c6:	441d      	add	r5, r3
 800b3c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b3cc:	2820      	cmp	r0, #32
 800b3ce:	dd13      	ble.n	800b3f8 <_dtoa_r+0x210>
 800b3d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	fa08 f800 	lsl.w	r8, r8, r0
 800b3da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b3de:	fa23 f000 	lsr.w	r0, r3, r0
 800b3e2:	ea48 0000 	orr.w	r0, r8, r0
 800b3e6:	f7f5 f8ad 	bl	8000544 <__aeabi_ui2d>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b3f2:	3d01      	subs	r5, #1
 800b3f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3f6:	e772      	b.n	800b2de <_dtoa_r+0xf6>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	f1c0 0020 	rsb	r0, r0, #32
 800b3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b402:	e7f0      	b.n	800b3e6 <_dtoa_r+0x1fe>
 800b404:	2301      	movs	r3, #1
 800b406:	e7b1      	b.n	800b36c <_dtoa_r+0x184>
 800b408:	900f      	str	r0, [sp, #60]	; 0x3c
 800b40a:	e7b0      	b.n	800b36e <_dtoa_r+0x186>
 800b40c:	9b05      	ldr	r3, [sp, #20]
 800b40e:	eba3 030a 	sub.w	r3, r3, sl
 800b412:	9305      	str	r3, [sp, #20]
 800b414:	f1ca 0300 	rsb	r3, sl, #0
 800b418:	9307      	str	r3, [sp, #28]
 800b41a:	2300      	movs	r3, #0
 800b41c:	930e      	str	r3, [sp, #56]	; 0x38
 800b41e:	e7bb      	b.n	800b398 <_dtoa_r+0x1b0>
 800b420:	2301      	movs	r3, #1
 800b422:	930a      	str	r3, [sp, #40]	; 0x28
 800b424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b426:	2b00      	cmp	r3, #0
 800b428:	dd59      	ble.n	800b4de <_dtoa_r+0x2f6>
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	4699      	mov	r9, r3
 800b42e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b430:	2200      	movs	r2, #0
 800b432:	6072      	str	r2, [r6, #4]
 800b434:	2204      	movs	r2, #4
 800b436:	f102 0014 	add.w	r0, r2, #20
 800b43a:	4298      	cmp	r0, r3
 800b43c:	6871      	ldr	r1, [r6, #4]
 800b43e:	d953      	bls.n	800b4e8 <_dtoa_r+0x300>
 800b440:	4620      	mov	r0, r4
 800b442:	f000 ffdd 	bl	800c400 <_Balloc>
 800b446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	f1b9 0f0e 	cmp.w	r9, #14
 800b44e:	f8d3 b000 	ldr.w	fp, [r3]
 800b452:	f200 80e6 	bhi.w	800b622 <_dtoa_r+0x43a>
 800b456:	2d00      	cmp	r5, #0
 800b458:	f000 80e3 	beq.w	800b622 <_dtoa_r+0x43a>
 800b45c:	ed9d 7b00 	vldr	d7, [sp]
 800b460:	f1ba 0f00 	cmp.w	sl, #0
 800b464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b468:	dd74      	ble.n	800b554 <_dtoa_r+0x36c>
 800b46a:	4a2a      	ldr	r2, [pc, #168]	; (800b514 <_dtoa_r+0x32c>)
 800b46c:	f00a 030f 	and.w	r3, sl, #15
 800b470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b474:	ed93 7b00 	vldr	d7, [r3]
 800b478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b47c:	06f0      	lsls	r0, r6, #27
 800b47e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b482:	d565      	bpl.n	800b550 <_dtoa_r+0x368>
 800b484:	4b24      	ldr	r3, [pc, #144]	; (800b518 <_dtoa_r+0x330>)
 800b486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b48a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48e:	f7f5 f9fd 	bl	800088c <__aeabi_ddiv>
 800b492:	e9cd 0100 	strd	r0, r1, [sp]
 800b496:	f006 060f 	and.w	r6, r6, #15
 800b49a:	2503      	movs	r5, #3
 800b49c:	4f1e      	ldr	r7, [pc, #120]	; (800b518 <_dtoa_r+0x330>)
 800b49e:	e04c      	b.n	800b53a <_dtoa_r+0x352>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a6:	4453      	add	r3, sl
 800b4a8:	f103 0901 	add.w	r9, r3, #1
 800b4ac:	9302      	str	r3, [sp, #8]
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	bfb8      	it	lt
 800b4b4:	2301      	movlt	r3, #1
 800b4b6:	e7ba      	b.n	800b42e <_dtoa_r+0x246>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e7b2      	b.n	800b422 <_dtoa_r+0x23a>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e7f0      	b.n	800b4a2 <_dtoa_r+0x2ba>
 800b4c0:	2501      	movs	r5, #1
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9306      	str	r3, [sp, #24]
 800b4c6:	950a      	str	r5, [sp, #40]	; 0x28
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	4699      	mov	r9, r3
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2312      	movs	r3, #18
 800b4d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4d6:	e7aa      	b.n	800b42e <_dtoa_r+0x246>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	930a      	str	r3, [sp, #40]	; 0x28
 800b4dc:	e7f4      	b.n	800b4c8 <_dtoa_r+0x2e0>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	4699      	mov	r9, r3
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	e7f5      	b.n	800b4d4 <_dtoa_r+0x2ec>
 800b4e8:	3101      	adds	r1, #1
 800b4ea:	6071      	str	r1, [r6, #4]
 800b4ec:	0052      	lsls	r2, r2, #1
 800b4ee:	e7a2      	b.n	800b436 <_dtoa_r+0x24e>
 800b4f0:	636f4361 	.word	0x636f4361
 800b4f4:	3fd287a7 	.word	0x3fd287a7
 800b4f8:	8b60c8b3 	.word	0x8b60c8b3
 800b4fc:	3fc68a28 	.word	0x3fc68a28
 800b500:	509f79fb 	.word	0x509f79fb
 800b504:	3fd34413 	.word	0x3fd34413
 800b508:	7ff00000 	.word	0x7ff00000
 800b50c:	0800fac5 	.word	0x0800fac5
 800b510:	3ff80000 	.word	0x3ff80000
 800b514:	0800fba8 	.word	0x0800fba8
 800b518:	0800fb80 	.word	0x0800fb80
 800b51c:	0800fb6e 	.word	0x0800fb6e
 800b520:	07f1      	lsls	r1, r6, #31
 800b522:	d508      	bpl.n	800b536 <_dtoa_r+0x34e>
 800b524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b52c:	f7f5 f884 	bl	8000638 <__aeabi_dmul>
 800b530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b534:	3501      	adds	r5, #1
 800b536:	1076      	asrs	r6, r6, #1
 800b538:	3708      	adds	r7, #8
 800b53a:	2e00      	cmp	r6, #0
 800b53c:	d1f0      	bne.n	800b520 <_dtoa_r+0x338>
 800b53e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b542:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b546:	f7f5 f9a1 	bl	800088c <__aeabi_ddiv>
 800b54a:	e9cd 0100 	strd	r0, r1, [sp]
 800b54e:	e01a      	b.n	800b586 <_dtoa_r+0x39e>
 800b550:	2502      	movs	r5, #2
 800b552:	e7a3      	b.n	800b49c <_dtoa_r+0x2b4>
 800b554:	f000 80a0 	beq.w	800b698 <_dtoa_r+0x4b0>
 800b558:	f1ca 0600 	rsb	r6, sl, #0
 800b55c:	4b9f      	ldr	r3, [pc, #636]	; (800b7dc <_dtoa_r+0x5f4>)
 800b55e:	4fa0      	ldr	r7, [pc, #640]	; (800b7e0 <_dtoa_r+0x5f8>)
 800b560:	f006 020f 	and.w	r2, r6, #15
 800b564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b570:	f7f5 f862 	bl	8000638 <__aeabi_dmul>
 800b574:	e9cd 0100 	strd	r0, r1, [sp]
 800b578:	1136      	asrs	r6, r6, #4
 800b57a:	2300      	movs	r3, #0
 800b57c:	2502      	movs	r5, #2
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d17f      	bne.n	800b682 <_dtoa_r+0x49a>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1e1      	bne.n	800b54a <_dtoa_r+0x362>
 800b586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 8087 	beq.w	800b69c <_dtoa_r+0x4b4>
 800b58e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b592:	2200      	movs	r2, #0
 800b594:	4b93      	ldr	r3, [pc, #588]	; (800b7e4 <_dtoa_r+0x5fc>)
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d07c      	beq.n	800b69c <_dtoa_r+0x4b4>
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	d079      	beq.n	800b69c <_dtoa_r+0x4b4>
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd35      	ble.n	800b61a <_dtoa_r+0x432>
 800b5ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4b8b      	ldr	r3, [pc, #556]	; (800b7e8 <_dtoa_r+0x600>)
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7f5 f83c 	bl	8000638 <__aeabi_dmul>
 800b5c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b5c4:	9f02      	ldr	r7, [sp, #8]
 800b5c6:	3501      	adds	r5, #1
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7f4 ffcb 	bl	8000564 <__aeabi_i2d>
 800b5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5d2:	f7f5 f831 	bl	8000638 <__aeabi_dmul>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b84      	ldr	r3, [pc, #528]	; (800b7ec <_dtoa_r+0x604>)
 800b5da:	f7f4 fe77 	bl	80002cc <__adddf3>
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	d15d      	bne.n	800b6a4 <_dtoa_r+0x4bc>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4b81      	ldr	r3, [pc, #516]	; (800b7f0 <_dtoa_r+0x608>)
 800b5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f0:	f7f4 fe6a 	bl	80002c8 <__aeabi_dsub>
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4633      	mov	r3, r6
 800b5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b5fc:	f7f5 faac 	bl	8000b58 <__aeabi_dcmpgt>
 800b600:	2800      	cmp	r0, #0
 800b602:	f040 8288 	bne.w	800bb16 <_dtoa_r+0x92e>
 800b606:	462a      	mov	r2, r5
 800b608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b610:	f7f5 fa84 	bl	8000b1c <__aeabi_dcmplt>
 800b614:	2800      	cmp	r0, #0
 800b616:	f040 827c 	bne.w	800bb12 <_dtoa_r+0x92a>
 800b61a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b61e:	e9cd 2300 	strd	r2, r3, [sp]
 800b622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b624:	2b00      	cmp	r3, #0
 800b626:	f2c0 8150 	blt.w	800b8ca <_dtoa_r+0x6e2>
 800b62a:	f1ba 0f0e 	cmp.w	sl, #14
 800b62e:	f300 814c 	bgt.w	800b8ca <_dtoa_r+0x6e2>
 800b632:	4b6a      	ldr	r3, [pc, #424]	; (800b7dc <_dtoa_r+0x5f4>)
 800b634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b638:	ed93 7b00 	vldr	d7, [r3]
 800b63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b644:	f280 80d8 	bge.w	800b7f8 <_dtoa_r+0x610>
 800b648:	f1b9 0f00 	cmp.w	r9, #0
 800b64c:	f300 80d4 	bgt.w	800b7f8 <_dtoa_r+0x610>
 800b650:	f040 825e 	bne.w	800bb10 <_dtoa_r+0x928>
 800b654:	2200      	movs	r2, #0
 800b656:	4b66      	ldr	r3, [pc, #408]	; (800b7f0 <_dtoa_r+0x608>)
 800b658:	ec51 0b17 	vmov	r0, r1, d7
 800b65c:	f7f4 ffec 	bl	8000638 <__aeabi_dmul>
 800b660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b664:	f7f5 fa6e 	bl	8000b44 <__aeabi_dcmpge>
 800b668:	464f      	mov	r7, r9
 800b66a:	464e      	mov	r6, r9
 800b66c:	2800      	cmp	r0, #0
 800b66e:	f040 8234 	bne.w	800bada <_dtoa_r+0x8f2>
 800b672:	2331      	movs	r3, #49	; 0x31
 800b674:	f10b 0501 	add.w	r5, fp, #1
 800b678:	f88b 3000 	strb.w	r3, [fp]
 800b67c:	f10a 0a01 	add.w	sl, sl, #1
 800b680:	e22f      	b.n	800bae2 <_dtoa_r+0x8fa>
 800b682:	07f2      	lsls	r2, r6, #31
 800b684:	d505      	bpl.n	800b692 <_dtoa_r+0x4aa>
 800b686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b68a:	f7f4 ffd5 	bl	8000638 <__aeabi_dmul>
 800b68e:	3501      	adds	r5, #1
 800b690:	2301      	movs	r3, #1
 800b692:	1076      	asrs	r6, r6, #1
 800b694:	3708      	adds	r7, #8
 800b696:	e772      	b.n	800b57e <_dtoa_r+0x396>
 800b698:	2502      	movs	r5, #2
 800b69a:	e774      	b.n	800b586 <_dtoa_r+0x39e>
 800b69c:	f8cd a020 	str.w	sl, [sp, #32]
 800b6a0:	464f      	mov	r7, r9
 800b6a2:	e791      	b.n	800b5c8 <_dtoa_r+0x3e0>
 800b6a4:	4b4d      	ldr	r3, [pc, #308]	; (800b7dc <_dtoa_r+0x5f4>)
 800b6a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d047      	beq.n	800b744 <_dtoa_r+0x55c>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	494e      	ldr	r1, [pc, #312]	; (800b7f4 <_dtoa_r+0x60c>)
 800b6bc:	f7f5 f8e6 	bl	800088c <__aeabi_ddiv>
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	4633      	mov	r3, r6
 800b6c4:	f7f4 fe00 	bl	80002c8 <__aeabi_dsub>
 800b6c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6cc:	465d      	mov	r5, fp
 800b6ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6d2:	f7f5 fa61 	bl	8000b98 <__aeabi_d2iz>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	f7f4 ff44 	bl	8000564 <__aeabi_i2d>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6e4:	f7f4 fdf0 	bl	80002c8 <__aeabi_dsub>
 800b6e8:	3630      	adds	r6, #48	; 0x30
 800b6ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b6f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6f6:	f7f5 fa11 	bl	8000b1c <__aeabi_dcmplt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d163      	bne.n	800b7c6 <_dtoa_r+0x5de>
 800b6fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b702:	2000      	movs	r0, #0
 800b704:	4937      	ldr	r1, [pc, #220]	; (800b7e4 <_dtoa_r+0x5fc>)
 800b706:	f7f4 fddf 	bl	80002c8 <__aeabi_dsub>
 800b70a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b70e:	f7f5 fa05 	bl	8000b1c <__aeabi_dcmplt>
 800b712:	2800      	cmp	r0, #0
 800b714:	f040 80b7 	bne.w	800b886 <_dtoa_r+0x69e>
 800b718:	eba5 030b 	sub.w	r3, r5, fp
 800b71c:	429f      	cmp	r7, r3
 800b71e:	f77f af7c 	ble.w	800b61a <_dtoa_r+0x432>
 800b722:	2200      	movs	r2, #0
 800b724:	4b30      	ldr	r3, [pc, #192]	; (800b7e8 <_dtoa_r+0x600>)
 800b726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b72a:	f7f4 ff85 	bl	8000638 <__aeabi_dmul>
 800b72e:	2200      	movs	r2, #0
 800b730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b734:	4b2c      	ldr	r3, [pc, #176]	; (800b7e8 <_dtoa_r+0x600>)
 800b736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b73a:	f7f4 ff7d 	bl	8000638 <__aeabi_dmul>
 800b73e:	e9cd 0100 	strd	r0, r1, [sp]
 800b742:	e7c4      	b.n	800b6ce <_dtoa_r+0x4e6>
 800b744:	462a      	mov	r2, r5
 800b746:	4633      	mov	r3, r6
 800b748:	f7f4 ff76 	bl	8000638 <__aeabi_dmul>
 800b74c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b750:	eb0b 0507 	add.w	r5, fp, r7
 800b754:	465e      	mov	r6, fp
 800b756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b75a:	f7f5 fa1d 	bl	8000b98 <__aeabi_d2iz>
 800b75e:	4607      	mov	r7, r0
 800b760:	f7f4 ff00 	bl	8000564 <__aeabi_i2d>
 800b764:	3730      	adds	r7, #48	; 0x30
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b76e:	f7f4 fdab 	bl	80002c8 <__aeabi_dsub>
 800b772:	f806 7b01 	strb.w	r7, [r6], #1
 800b776:	42ae      	cmp	r6, r5
 800b778:	e9cd 0100 	strd	r0, r1, [sp]
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	d126      	bne.n	800b7d0 <_dtoa_r+0x5e8>
 800b782:	4b1c      	ldr	r3, [pc, #112]	; (800b7f4 <_dtoa_r+0x60c>)
 800b784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b788:	f7f4 fda0 	bl	80002cc <__adddf3>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b794:	f7f5 f9e0 	bl	8000b58 <__aeabi_dcmpgt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d174      	bne.n	800b886 <_dtoa_r+0x69e>
 800b79c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	4914      	ldr	r1, [pc, #80]	; (800b7f4 <_dtoa_r+0x60c>)
 800b7a4:	f7f4 fd90 	bl	80002c8 <__aeabi_dsub>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b0:	f7f5 f9b4 	bl	8000b1c <__aeabi_dcmplt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f43f af30 	beq.w	800b61a <_dtoa_r+0x432>
 800b7ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7be:	2b30      	cmp	r3, #48	; 0x30
 800b7c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b7c4:	d002      	beq.n	800b7cc <_dtoa_r+0x5e4>
 800b7c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b7ca:	e04a      	b.n	800b862 <_dtoa_r+0x67a>
 800b7cc:	4615      	mov	r5, r2
 800b7ce:	e7f4      	b.n	800b7ba <_dtoa_r+0x5d2>
 800b7d0:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <_dtoa_r+0x600>)
 800b7d2:	f7f4 ff31 	bl	8000638 <__aeabi_dmul>
 800b7d6:	e9cd 0100 	strd	r0, r1, [sp]
 800b7da:	e7bc      	b.n	800b756 <_dtoa_r+0x56e>
 800b7dc:	0800fba8 	.word	0x0800fba8
 800b7e0:	0800fb80 	.word	0x0800fb80
 800b7e4:	3ff00000 	.word	0x3ff00000
 800b7e8:	40240000 	.word	0x40240000
 800b7ec:	401c0000 	.word	0x401c0000
 800b7f0:	40140000 	.word	0x40140000
 800b7f4:	3fe00000 	.word	0x3fe00000
 800b7f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7fc:	465d      	mov	r5, fp
 800b7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f5 f841 	bl	800088c <__aeabi_ddiv>
 800b80a:	f7f5 f9c5 	bl	8000b98 <__aeabi_d2iz>
 800b80e:	4680      	mov	r8, r0
 800b810:	f7f4 fea8 	bl	8000564 <__aeabi_i2d>
 800b814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b818:	f7f4 ff0e 	bl	8000638 <__aeabi_dmul>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b828:	f7f4 fd4e 	bl	80002c8 <__aeabi_dsub>
 800b82c:	f805 6b01 	strb.w	r6, [r5], #1
 800b830:	eba5 060b 	sub.w	r6, r5, fp
 800b834:	45b1      	cmp	r9, r6
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	d139      	bne.n	800b8b0 <_dtoa_r+0x6c8>
 800b83c:	f7f4 fd46 	bl	80002cc <__adddf3>
 800b840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b844:	4606      	mov	r6, r0
 800b846:	460f      	mov	r7, r1
 800b848:	f7f5 f986 	bl	8000b58 <__aeabi_dcmpgt>
 800b84c:	b9c8      	cbnz	r0, 800b882 <_dtoa_r+0x69a>
 800b84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f5 f957 	bl	8000b08 <__aeabi_dcmpeq>
 800b85a:	b110      	cbz	r0, 800b862 <_dtoa_r+0x67a>
 800b85c:	f018 0f01 	tst.w	r8, #1
 800b860:	d10f      	bne.n	800b882 <_dtoa_r+0x69a>
 800b862:	9904      	ldr	r1, [sp, #16]
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fdff 	bl	800c468 <_Bfree>
 800b86a:	2300      	movs	r3, #0
 800b86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b86e:	702b      	strb	r3, [r5, #0]
 800b870:	f10a 0301 	add.w	r3, sl, #1
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 8241 	beq.w	800bd00 <_dtoa_r+0xb18>
 800b87e:	601d      	str	r5, [r3, #0]
 800b880:	e23e      	b.n	800bd00 <_dtoa_r+0xb18>
 800b882:	f8cd a020 	str.w	sl, [sp, #32]
 800b886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b88a:	2a39      	cmp	r2, #57	; 0x39
 800b88c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800b890:	d108      	bne.n	800b8a4 <_dtoa_r+0x6bc>
 800b892:	459b      	cmp	fp, r3
 800b894:	d10a      	bne.n	800b8ac <_dtoa_r+0x6c4>
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	3301      	adds	r3, #1
 800b89a:	9308      	str	r3, [sp, #32]
 800b89c:	2330      	movs	r3, #48	; 0x30
 800b89e:	f88b 3000 	strb.w	r3, [fp]
 800b8a2:	465b      	mov	r3, fp
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e78c      	b.n	800b7c6 <_dtoa_r+0x5de>
 800b8ac:	461d      	mov	r5, r3
 800b8ae:	e7ea      	b.n	800b886 <_dtoa_r+0x69e>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	4b9b      	ldr	r3, [pc, #620]	; (800bb20 <_dtoa_r+0x938>)
 800b8b4:	f7f4 fec0 	bl	8000638 <__aeabi_dmul>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	f7f5 f922 	bl	8000b08 <__aeabi_dcmpeq>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d09a      	beq.n	800b7fe <_dtoa_r+0x616>
 800b8c8:	e7cb      	b.n	800b862 <_dtoa_r+0x67a>
 800b8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	f000 808b 	beq.w	800b9e8 <_dtoa_r+0x800>
 800b8d2:	9a06      	ldr	r2, [sp, #24]
 800b8d4:	2a01      	cmp	r2, #1
 800b8d6:	dc6e      	bgt.n	800b9b6 <_dtoa_r+0x7ce>
 800b8d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	d067      	beq.n	800b9ae <_dtoa_r+0x7c6>
 800b8de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8e2:	9f07      	ldr	r7, [sp, #28]
 800b8e4:	9d05      	ldr	r5, [sp, #20]
 800b8e6:	9a05      	ldr	r2, [sp, #20]
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	441a      	add	r2, r3
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	9205      	str	r2, [sp, #20]
 800b8f0:	4498      	add	r8, r3
 800b8f2:	f000 fe97 	bl	800c624 <__i2b>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	dd0c      	ble.n	800b916 <_dtoa_r+0x72e>
 800b8fc:	f1b8 0f00 	cmp.w	r8, #0
 800b900:	dd09      	ble.n	800b916 <_dtoa_r+0x72e>
 800b902:	4545      	cmp	r5, r8
 800b904:	9a05      	ldr	r2, [sp, #20]
 800b906:	462b      	mov	r3, r5
 800b908:	bfa8      	it	ge
 800b90a:	4643      	movge	r3, r8
 800b90c:	1ad2      	subs	r2, r2, r3
 800b90e:	9205      	str	r2, [sp, #20]
 800b910:	1aed      	subs	r5, r5, r3
 800b912:	eba8 0803 	sub.w	r8, r8, r3
 800b916:	9b07      	ldr	r3, [sp, #28]
 800b918:	b1eb      	cbz	r3, 800b956 <_dtoa_r+0x76e>
 800b91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d067      	beq.n	800b9f0 <_dtoa_r+0x808>
 800b920:	b18f      	cbz	r7, 800b946 <_dtoa_r+0x75e>
 800b922:	4631      	mov	r1, r6
 800b924:	463a      	mov	r2, r7
 800b926:	4620      	mov	r0, r4
 800b928:	f000 ff1c 	bl	800c764 <__pow5mult>
 800b92c:	9a04      	ldr	r2, [sp, #16]
 800b92e:	4601      	mov	r1, r0
 800b930:	4606      	mov	r6, r0
 800b932:	4620      	mov	r0, r4
 800b934:	f000 fe7f 	bl	800c636 <__multiply>
 800b938:	9904      	ldr	r1, [sp, #16]
 800b93a:	9008      	str	r0, [sp, #32]
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 fd93 	bl	800c468 <_Bfree>
 800b942:	9b08      	ldr	r3, [sp, #32]
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	1bda      	subs	r2, r3, r7
 800b94a:	d004      	beq.n	800b956 <_dtoa_r+0x76e>
 800b94c:	9904      	ldr	r1, [sp, #16]
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 ff08 	bl	800c764 <__pow5mult>
 800b954:	9004      	str	r0, [sp, #16]
 800b956:	2101      	movs	r1, #1
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fe63 	bl	800c624 <__i2b>
 800b95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b960:	4607      	mov	r7, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 81d0 	beq.w	800bd08 <_dtoa_r+0xb20>
 800b968:	461a      	mov	r2, r3
 800b96a:	4601      	mov	r1, r0
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 fef9 	bl	800c764 <__pow5mult>
 800b972:	9b06      	ldr	r3, [sp, #24]
 800b974:	2b01      	cmp	r3, #1
 800b976:	4607      	mov	r7, r0
 800b978:	dc40      	bgt.n	800b9fc <_dtoa_r+0x814>
 800b97a:	9b00      	ldr	r3, [sp, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d139      	bne.n	800b9f4 <_dtoa_r+0x80c>
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b986:	2b00      	cmp	r3, #0
 800b988:	d136      	bne.n	800b9f8 <_dtoa_r+0x810>
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	051b      	lsls	r3, r3, #20
 800b994:	b12b      	cbz	r3, 800b9a2 <_dtoa_r+0x7ba>
 800b996:	9b05      	ldr	r3, [sp, #20]
 800b998:	3301      	adds	r3, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	f108 0801 	add.w	r8, r8, #1
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d12a      	bne.n	800ba00 <_dtoa_r+0x818>
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e030      	b.n	800ba10 <_dtoa_r+0x828>
 800b9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9b4:	e795      	b.n	800b8e2 <_dtoa_r+0x6fa>
 800b9b6:	9b07      	ldr	r3, [sp, #28]
 800b9b8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800b9bc:	42bb      	cmp	r3, r7
 800b9be:	bfbf      	itttt	lt
 800b9c0:	9b07      	ldrlt	r3, [sp, #28]
 800b9c2:	9707      	strlt	r7, [sp, #28]
 800b9c4:	1afa      	sublt	r2, r7, r3
 800b9c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b9c8:	bfbb      	ittet	lt
 800b9ca:	189b      	addlt	r3, r3, r2
 800b9cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b9ce:	1bdf      	subge	r7, r3, r7
 800b9d0:	2700      	movlt	r7, #0
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	bfb5      	itete	lt
 800b9d8:	9b05      	ldrlt	r3, [sp, #20]
 800b9da:	9d05      	ldrge	r5, [sp, #20]
 800b9dc:	eba3 0509 	sublt.w	r5, r3, r9
 800b9e0:	464b      	movge	r3, r9
 800b9e2:	bfb8      	it	lt
 800b9e4:	2300      	movlt	r3, #0
 800b9e6:	e77e      	b.n	800b8e6 <_dtoa_r+0x6fe>
 800b9e8:	9f07      	ldr	r7, [sp, #28]
 800b9ea:	9d05      	ldr	r5, [sp, #20]
 800b9ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b9ee:	e783      	b.n	800b8f8 <_dtoa_r+0x710>
 800b9f0:	9a07      	ldr	r2, [sp, #28]
 800b9f2:	e7ab      	b.n	800b94c <_dtoa_r+0x764>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e7d4      	b.n	800b9a2 <_dtoa_r+0x7ba>
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	e7d2      	b.n	800b9a2 <_dtoa_r+0x7ba>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ba06:	6918      	ldr	r0, [r3, #16]
 800ba08:	f000 fdbe 	bl	800c588 <__hi0bits>
 800ba0c:	f1c0 0020 	rsb	r0, r0, #32
 800ba10:	4440      	add	r0, r8
 800ba12:	f010 001f 	ands.w	r0, r0, #31
 800ba16:	d047      	beq.n	800baa8 <_dtoa_r+0x8c0>
 800ba18:	f1c0 0320 	rsb	r3, r0, #32
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	dd3b      	ble.n	800ba98 <_dtoa_r+0x8b0>
 800ba20:	9b05      	ldr	r3, [sp, #20]
 800ba22:	f1c0 001c 	rsb	r0, r0, #28
 800ba26:	4403      	add	r3, r0
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	4405      	add	r5, r0
 800ba2c:	4480      	add	r8, r0
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dd05      	ble.n	800ba40 <_dtoa_r+0x858>
 800ba34:	461a      	mov	r2, r3
 800ba36:	9904      	ldr	r1, [sp, #16]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 fee1 	bl	800c800 <__lshift>
 800ba3e:	9004      	str	r0, [sp, #16]
 800ba40:	f1b8 0f00 	cmp.w	r8, #0
 800ba44:	dd05      	ble.n	800ba52 <_dtoa_r+0x86a>
 800ba46:	4639      	mov	r1, r7
 800ba48:	4642      	mov	r2, r8
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fed8 	bl	800c800 <__lshift>
 800ba50:	4607      	mov	r7, r0
 800ba52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba54:	b353      	cbz	r3, 800baac <_dtoa_r+0x8c4>
 800ba56:	4639      	mov	r1, r7
 800ba58:	9804      	ldr	r0, [sp, #16]
 800ba5a:	f000 ff25 	bl	800c8a8 <__mcmp>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	da24      	bge.n	800baac <_dtoa_r+0x8c4>
 800ba62:	2300      	movs	r3, #0
 800ba64:	220a      	movs	r2, #10
 800ba66:	9904      	ldr	r1, [sp, #16]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 fd14 	bl	800c496 <__multadd>
 800ba6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba70:	9004      	str	r0, [sp, #16]
 800ba72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 814d 	beq.w	800bd16 <_dtoa_r+0xb2e>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4631      	mov	r1, r6
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fd07 	bl	800c496 <__multadd>
 800ba88:	9b02      	ldr	r3, [sp, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	dc4f      	bgt.n	800bb30 <_dtoa_r+0x948>
 800ba90:	9b06      	ldr	r3, [sp, #24]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	dd4c      	ble.n	800bb30 <_dtoa_r+0x948>
 800ba96:	e011      	b.n	800babc <_dtoa_r+0x8d4>
 800ba98:	d0c9      	beq.n	800ba2e <_dtoa_r+0x846>
 800ba9a:	9a05      	ldr	r2, [sp, #20]
 800ba9c:	331c      	adds	r3, #28
 800ba9e:	441a      	add	r2, r3
 800baa0:	9205      	str	r2, [sp, #20]
 800baa2:	441d      	add	r5, r3
 800baa4:	4498      	add	r8, r3
 800baa6:	e7c2      	b.n	800ba2e <_dtoa_r+0x846>
 800baa8:	4603      	mov	r3, r0
 800baaa:	e7f6      	b.n	800ba9a <_dtoa_r+0x8b2>
 800baac:	f1b9 0f00 	cmp.w	r9, #0
 800bab0:	dc38      	bgt.n	800bb24 <_dtoa_r+0x93c>
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	dd35      	ble.n	800bb24 <_dtoa_r+0x93c>
 800bab8:	f8cd 9008 	str.w	r9, [sp, #8]
 800babc:	9b02      	ldr	r3, [sp, #8]
 800babe:	b963      	cbnz	r3, 800bada <_dtoa_r+0x8f2>
 800bac0:	4639      	mov	r1, r7
 800bac2:	2205      	movs	r2, #5
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fce6 	bl	800c496 <__multadd>
 800baca:	4601      	mov	r1, r0
 800bacc:	4607      	mov	r7, r0
 800bace:	9804      	ldr	r0, [sp, #16]
 800bad0:	f000 feea 	bl	800c8a8 <__mcmp>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f73f adcc 	bgt.w	800b672 <_dtoa_r+0x48a>
 800bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800badc:	465d      	mov	r5, fp
 800bade:	ea6f 0a03 	mvn.w	sl, r3
 800bae2:	f04f 0900 	mov.w	r9, #0
 800bae6:	4639      	mov	r1, r7
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fcbd 	bl	800c468 <_Bfree>
 800baee:	2e00      	cmp	r6, #0
 800baf0:	f43f aeb7 	beq.w	800b862 <_dtoa_r+0x67a>
 800baf4:	f1b9 0f00 	cmp.w	r9, #0
 800baf8:	d005      	beq.n	800bb06 <_dtoa_r+0x91e>
 800bafa:	45b1      	cmp	r9, r6
 800bafc:	d003      	beq.n	800bb06 <_dtoa_r+0x91e>
 800bafe:	4649      	mov	r1, r9
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fcb1 	bl	800c468 <_Bfree>
 800bb06:	4631      	mov	r1, r6
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fcad 	bl	800c468 <_Bfree>
 800bb0e:	e6a8      	b.n	800b862 <_dtoa_r+0x67a>
 800bb10:	2700      	movs	r7, #0
 800bb12:	463e      	mov	r6, r7
 800bb14:	e7e1      	b.n	800bada <_dtoa_r+0x8f2>
 800bb16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bb1a:	463e      	mov	r6, r7
 800bb1c:	e5a9      	b.n	800b672 <_dtoa_r+0x48a>
 800bb1e:	bf00      	nop
 800bb20:	40240000 	.word	0x40240000
 800bb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb26:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 80fa 	beq.w	800bd24 <_dtoa_r+0xb3c>
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dd05      	ble.n	800bb40 <_dtoa_r+0x958>
 800bb34:	4631      	mov	r1, r6
 800bb36:	462a      	mov	r2, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fe61 	bl	800c800 <__lshift>
 800bb3e:	4606      	mov	r6, r0
 800bb40:	9b07      	ldr	r3, [sp, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d04c      	beq.n	800bbe0 <_dtoa_r+0x9f8>
 800bb46:	6871      	ldr	r1, [r6, #4]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 fc59 	bl	800c400 <_Balloc>
 800bb4e:	6932      	ldr	r2, [r6, #16]
 800bb50:	3202      	adds	r2, #2
 800bb52:	4605      	mov	r5, r0
 800bb54:	0092      	lsls	r2, r2, #2
 800bb56:	f106 010c 	add.w	r1, r6, #12
 800bb5a:	300c      	adds	r0, #12
 800bb5c:	f7fd fd52 	bl	8009604 <memcpy>
 800bb60:	2201      	movs	r2, #1
 800bb62:	4629      	mov	r1, r5
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fe4b 	bl	800c800 <__lshift>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	f8cd b014 	str.w	fp, [sp, #20]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	46b1      	mov	r9, r6
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	4606      	mov	r6, r0
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	9804      	ldr	r0, [sp, #16]
 800bb7e:	f7ff faa7 	bl	800b0d0 <quorem>
 800bb82:	4649      	mov	r1, r9
 800bb84:	4605      	mov	r5, r0
 800bb86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb8a:	9804      	ldr	r0, [sp, #16]
 800bb8c:	f000 fe8c 	bl	800c8a8 <__mcmp>
 800bb90:	4632      	mov	r2, r6
 800bb92:	9000      	str	r0, [sp, #0]
 800bb94:	4639      	mov	r1, r7
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 fea0 	bl	800c8dc <__mdiff>
 800bb9c:	68c3      	ldr	r3, [r0, #12]
 800bb9e:	4602      	mov	r2, r0
 800bba0:	bb03      	cbnz	r3, 800bbe4 <_dtoa_r+0x9fc>
 800bba2:	4601      	mov	r1, r0
 800bba4:	9008      	str	r0, [sp, #32]
 800bba6:	9804      	ldr	r0, [sp, #16]
 800bba8:	f000 fe7e 	bl	800c8a8 <__mcmp>
 800bbac:	9a08      	ldr	r2, [sp, #32]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	9308      	str	r3, [sp, #32]
 800bbb6:	f000 fc57 	bl	800c468 <_Bfree>
 800bbba:	9b08      	ldr	r3, [sp, #32]
 800bbbc:	b9a3      	cbnz	r3, 800bbe8 <_dtoa_r+0xa00>
 800bbbe:	9a06      	ldr	r2, [sp, #24]
 800bbc0:	b992      	cbnz	r2, 800bbe8 <_dtoa_r+0xa00>
 800bbc2:	9a07      	ldr	r2, [sp, #28]
 800bbc4:	b982      	cbnz	r2, 800bbe8 <_dtoa_r+0xa00>
 800bbc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bbca:	d029      	beq.n	800bc20 <_dtoa_r+0xa38>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dd01      	ble.n	800bbd6 <_dtoa_r+0x9ee>
 800bbd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bbd6:	9b05      	ldr	r3, [sp, #20]
 800bbd8:	1c5d      	adds	r5, r3, #1
 800bbda:	f883 8000 	strb.w	r8, [r3]
 800bbde:	e782      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	e7c2      	b.n	800bb6a <_dtoa_r+0x982>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e7e3      	b.n	800bbb0 <_dtoa_r+0x9c8>
 800bbe8:	9a00      	ldr	r2, [sp, #0]
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	db04      	blt.n	800bbf8 <_dtoa_r+0xa10>
 800bbee:	d125      	bne.n	800bc3c <_dtoa_r+0xa54>
 800bbf0:	9a06      	ldr	r2, [sp, #24]
 800bbf2:	bb1a      	cbnz	r2, 800bc3c <_dtoa_r+0xa54>
 800bbf4:	9a07      	ldr	r2, [sp, #28]
 800bbf6:	bb0a      	cbnz	r2, 800bc3c <_dtoa_r+0xa54>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	ddec      	ble.n	800bbd6 <_dtoa_r+0x9ee>
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	9904      	ldr	r1, [sp, #16]
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fdfd 	bl	800c800 <__lshift>
 800bc06:	4639      	mov	r1, r7
 800bc08:	9004      	str	r0, [sp, #16]
 800bc0a:	f000 fe4d 	bl	800c8a8 <__mcmp>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	dc03      	bgt.n	800bc1a <_dtoa_r+0xa32>
 800bc12:	d1e0      	bne.n	800bbd6 <_dtoa_r+0x9ee>
 800bc14:	f018 0f01 	tst.w	r8, #1
 800bc18:	d0dd      	beq.n	800bbd6 <_dtoa_r+0x9ee>
 800bc1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc1e:	d1d8      	bne.n	800bbd2 <_dtoa_r+0x9ea>
 800bc20:	9b05      	ldr	r3, [sp, #20]
 800bc22:	9a05      	ldr	r2, [sp, #20]
 800bc24:	1c5d      	adds	r5, r3, #1
 800bc26:	2339      	movs	r3, #57	; 0x39
 800bc28:	7013      	strb	r3, [r2, #0]
 800bc2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc2e:	2b39      	cmp	r3, #57	; 0x39
 800bc30:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bc34:	d04f      	beq.n	800bcd6 <_dtoa_r+0xaee>
 800bc36:	3301      	adds	r3, #1
 800bc38:	7013      	strb	r3, [r2, #0]
 800bc3a:	e754      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bc3c:	9a05      	ldr	r2, [sp, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f102 0501 	add.w	r5, r2, #1
 800bc44:	dd06      	ble.n	800bc54 <_dtoa_r+0xa6c>
 800bc46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc4a:	d0e9      	beq.n	800bc20 <_dtoa_r+0xa38>
 800bc4c:	f108 0801 	add.w	r8, r8, #1
 800bc50:	9b05      	ldr	r3, [sp, #20]
 800bc52:	e7c2      	b.n	800bbda <_dtoa_r+0x9f2>
 800bc54:	9a02      	ldr	r2, [sp, #8]
 800bc56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bc5a:	eba5 030b 	sub.w	r3, r5, fp
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d021      	beq.n	800bca6 <_dtoa_r+0xabe>
 800bc62:	2300      	movs	r3, #0
 800bc64:	220a      	movs	r2, #10
 800bc66:	9904      	ldr	r1, [sp, #16]
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fc14 	bl	800c496 <__multadd>
 800bc6e:	45b1      	cmp	r9, r6
 800bc70:	9004      	str	r0, [sp, #16]
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	f04f 020a 	mov.w	r2, #10
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	d105      	bne.n	800bc8c <_dtoa_r+0xaa4>
 800bc80:	f000 fc09 	bl	800c496 <__multadd>
 800bc84:	4681      	mov	r9, r0
 800bc86:	4606      	mov	r6, r0
 800bc88:	9505      	str	r5, [sp, #20]
 800bc8a:	e776      	b.n	800bb7a <_dtoa_r+0x992>
 800bc8c:	f000 fc03 	bl	800c496 <__multadd>
 800bc90:	4631      	mov	r1, r6
 800bc92:	4681      	mov	r9, r0
 800bc94:	2300      	movs	r3, #0
 800bc96:	220a      	movs	r2, #10
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 fbfc 	bl	800c496 <__multadd>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	e7f2      	b.n	800bc88 <_dtoa_r+0xaa0>
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	2201      	movs	r2, #1
 800bca8:	9904      	ldr	r1, [sp, #16]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 fda8 	bl	800c800 <__lshift>
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	9004      	str	r0, [sp, #16]
 800bcb4:	f000 fdf8 	bl	800c8a8 <__mcmp>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	dcb6      	bgt.n	800bc2a <_dtoa_r+0xa42>
 800bcbc:	d102      	bne.n	800bcc4 <_dtoa_r+0xadc>
 800bcbe:	f018 0f01 	tst.w	r8, #1
 800bcc2:	d1b2      	bne.n	800bc2a <_dtoa_r+0xa42>
 800bcc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcc8:	2b30      	cmp	r3, #48	; 0x30
 800bcca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bcce:	f47f af0a 	bne.w	800bae6 <_dtoa_r+0x8fe>
 800bcd2:	4615      	mov	r5, r2
 800bcd4:	e7f6      	b.n	800bcc4 <_dtoa_r+0xadc>
 800bcd6:	4593      	cmp	fp, r2
 800bcd8:	d105      	bne.n	800bce6 <_dtoa_r+0xafe>
 800bcda:	2331      	movs	r3, #49	; 0x31
 800bcdc:	f10a 0a01 	add.w	sl, sl, #1
 800bce0:	f88b 3000 	strb.w	r3, [fp]
 800bce4:	e6ff      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bce6:	4615      	mov	r5, r2
 800bce8:	e79f      	b.n	800bc2a <_dtoa_r+0xa42>
 800bcea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bd50 <_dtoa_r+0xb68>
 800bcee:	e007      	b.n	800bd00 <_dtoa_r+0xb18>
 800bcf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bd54 <_dtoa_r+0xb6c>
 800bcf6:	b11b      	cbz	r3, 800bd00 <_dtoa_r+0xb18>
 800bcf8:	f10b 0308 	add.w	r3, fp, #8
 800bcfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	4658      	mov	r0, fp
 800bd02:	b017      	add	sp, #92	; 0x5c
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	f77f ae35 	ble.w	800b97a <_dtoa_r+0x792>
 800bd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	e649      	b.n	800b9aa <_dtoa_r+0x7c2>
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dc03      	bgt.n	800bd24 <_dtoa_r+0xb3c>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	f73f aecc 	bgt.w	800babc <_dtoa_r+0x8d4>
 800bd24:	465d      	mov	r5, fp
 800bd26:	4639      	mov	r1, r7
 800bd28:	9804      	ldr	r0, [sp, #16]
 800bd2a:	f7ff f9d1 	bl	800b0d0 <quorem>
 800bd2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bd32:	f805 8b01 	strb.w	r8, [r5], #1
 800bd36:	9a02      	ldr	r2, [sp, #8]
 800bd38:	eba5 030b 	sub.w	r3, r5, fp
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	ddb0      	ble.n	800bca2 <_dtoa_r+0xaba>
 800bd40:	2300      	movs	r3, #0
 800bd42:	220a      	movs	r2, #10
 800bd44:	9904      	ldr	r1, [sp, #16]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 fba5 	bl	800c496 <__multadd>
 800bd4c:	9004      	str	r0, [sp, #16]
 800bd4e:	e7ea      	b.n	800bd26 <_dtoa_r+0xb3e>
 800bd50:	0800fac4 	.word	0x0800fac4
 800bd54:	0800fb65 	.word	0x0800fb65

0800bd58 <rshift>:
 800bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5a:	6906      	ldr	r6, [r0, #16]
 800bd5c:	114b      	asrs	r3, r1, #5
 800bd5e:	429e      	cmp	r6, r3
 800bd60:	f100 0414 	add.w	r4, r0, #20
 800bd64:	dd30      	ble.n	800bdc8 <rshift+0x70>
 800bd66:	f011 011f 	ands.w	r1, r1, #31
 800bd6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bd6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bd72:	d108      	bne.n	800bd86 <rshift+0x2e>
 800bd74:	4621      	mov	r1, r4
 800bd76:	42b2      	cmp	r2, r6
 800bd78:	460b      	mov	r3, r1
 800bd7a:	d211      	bcs.n	800bda0 <rshift+0x48>
 800bd7c:	f852 3b04 	ldr.w	r3, [r2], #4
 800bd80:	f841 3b04 	str.w	r3, [r1], #4
 800bd84:	e7f7      	b.n	800bd76 <rshift+0x1e>
 800bd86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bd8a:	f1c1 0c20 	rsb	ip, r1, #32
 800bd8e:	40cd      	lsrs	r5, r1
 800bd90:	3204      	adds	r2, #4
 800bd92:	4623      	mov	r3, r4
 800bd94:	42b2      	cmp	r2, r6
 800bd96:	4617      	mov	r7, r2
 800bd98:	d30c      	bcc.n	800bdb4 <rshift+0x5c>
 800bd9a:	601d      	str	r5, [r3, #0]
 800bd9c:	b105      	cbz	r5, 800bda0 <rshift+0x48>
 800bd9e:	3304      	adds	r3, #4
 800bda0:	1b1a      	subs	r2, r3, r4
 800bda2:	42a3      	cmp	r3, r4
 800bda4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bda8:	bf08      	it	eq
 800bdaa:	2300      	moveq	r3, #0
 800bdac:	6102      	str	r2, [r0, #16]
 800bdae:	bf08      	it	eq
 800bdb0:	6143      	streq	r3, [r0, #20]
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb4:	683f      	ldr	r7, [r7, #0]
 800bdb6:	fa07 f70c 	lsl.w	r7, r7, ip
 800bdba:	433d      	orrs	r5, r7
 800bdbc:	f843 5b04 	str.w	r5, [r3], #4
 800bdc0:	f852 5b04 	ldr.w	r5, [r2], #4
 800bdc4:	40cd      	lsrs	r5, r1
 800bdc6:	e7e5      	b.n	800bd94 <rshift+0x3c>
 800bdc8:	4623      	mov	r3, r4
 800bdca:	e7e9      	b.n	800bda0 <rshift+0x48>

0800bdcc <__hexdig_fun>:
 800bdcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bdd0:	2b09      	cmp	r3, #9
 800bdd2:	d802      	bhi.n	800bdda <__hexdig_fun+0xe>
 800bdd4:	3820      	subs	r0, #32
 800bdd6:	b2c0      	uxtb	r0, r0
 800bdd8:	4770      	bx	lr
 800bdda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	d801      	bhi.n	800bde6 <__hexdig_fun+0x1a>
 800bde2:	3847      	subs	r0, #71	; 0x47
 800bde4:	e7f7      	b.n	800bdd6 <__hexdig_fun+0xa>
 800bde6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	d801      	bhi.n	800bdf2 <__hexdig_fun+0x26>
 800bdee:	3827      	subs	r0, #39	; 0x27
 800bdf0:	e7f1      	b.n	800bdd6 <__hexdig_fun+0xa>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	4770      	bx	lr

0800bdf6 <__gethex>:
 800bdf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfa:	b08b      	sub	sp, #44	; 0x2c
 800bdfc:	468a      	mov	sl, r1
 800bdfe:	9002      	str	r0, [sp, #8]
 800be00:	9816      	ldr	r0, [sp, #88]	; 0x58
 800be02:	9306      	str	r3, [sp, #24]
 800be04:	4690      	mov	r8, r2
 800be06:	f000 fad0 	bl	800c3aa <__localeconv_l>
 800be0a:	6803      	ldr	r3, [r0, #0]
 800be0c:	9303      	str	r3, [sp, #12]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f4 f9fe 	bl	8000210 <strlen>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	9001      	str	r0, [sp, #4]
 800be18:	4403      	add	r3, r0
 800be1a:	f04f 0b00 	mov.w	fp, #0
 800be1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be22:	9307      	str	r3, [sp, #28]
 800be24:	f8da 3000 	ldr.w	r3, [sl]
 800be28:	3302      	adds	r3, #2
 800be2a:	461f      	mov	r7, r3
 800be2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be30:	2830      	cmp	r0, #48	; 0x30
 800be32:	d06c      	beq.n	800bf0e <__gethex+0x118>
 800be34:	f7ff ffca 	bl	800bdcc <__hexdig_fun>
 800be38:	4604      	mov	r4, r0
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d16a      	bne.n	800bf14 <__gethex+0x11e>
 800be3e:	9a01      	ldr	r2, [sp, #4]
 800be40:	9903      	ldr	r1, [sp, #12]
 800be42:	4638      	mov	r0, r7
 800be44:	f001 f8f4 	bl	800d030 <strncmp>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d166      	bne.n	800bf1a <__gethex+0x124>
 800be4c:	9b01      	ldr	r3, [sp, #4]
 800be4e:	5cf8      	ldrb	r0, [r7, r3]
 800be50:	18fe      	adds	r6, r7, r3
 800be52:	f7ff ffbb 	bl	800bdcc <__hexdig_fun>
 800be56:	2800      	cmp	r0, #0
 800be58:	d062      	beq.n	800bf20 <__gethex+0x12a>
 800be5a:	4633      	mov	r3, r6
 800be5c:	7818      	ldrb	r0, [r3, #0]
 800be5e:	2830      	cmp	r0, #48	; 0x30
 800be60:	461f      	mov	r7, r3
 800be62:	f103 0301 	add.w	r3, r3, #1
 800be66:	d0f9      	beq.n	800be5c <__gethex+0x66>
 800be68:	f7ff ffb0 	bl	800bdcc <__hexdig_fun>
 800be6c:	fab0 f580 	clz	r5, r0
 800be70:	096d      	lsrs	r5, r5, #5
 800be72:	4634      	mov	r4, r6
 800be74:	f04f 0b01 	mov.w	fp, #1
 800be78:	463a      	mov	r2, r7
 800be7a:	4616      	mov	r6, r2
 800be7c:	3201      	adds	r2, #1
 800be7e:	7830      	ldrb	r0, [r6, #0]
 800be80:	f7ff ffa4 	bl	800bdcc <__hexdig_fun>
 800be84:	2800      	cmp	r0, #0
 800be86:	d1f8      	bne.n	800be7a <__gethex+0x84>
 800be88:	9a01      	ldr	r2, [sp, #4]
 800be8a:	9903      	ldr	r1, [sp, #12]
 800be8c:	4630      	mov	r0, r6
 800be8e:	f001 f8cf 	bl	800d030 <strncmp>
 800be92:	b950      	cbnz	r0, 800beaa <__gethex+0xb4>
 800be94:	b954      	cbnz	r4, 800beac <__gethex+0xb6>
 800be96:	9b01      	ldr	r3, [sp, #4]
 800be98:	18f4      	adds	r4, r6, r3
 800be9a:	4622      	mov	r2, r4
 800be9c:	4616      	mov	r6, r2
 800be9e:	3201      	adds	r2, #1
 800bea0:	7830      	ldrb	r0, [r6, #0]
 800bea2:	f7ff ff93 	bl	800bdcc <__hexdig_fun>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d1f8      	bne.n	800be9c <__gethex+0xa6>
 800beaa:	b10c      	cbz	r4, 800beb0 <__gethex+0xba>
 800beac:	1ba4      	subs	r4, r4, r6
 800beae:	00a4      	lsls	r4, r4, #2
 800beb0:	7833      	ldrb	r3, [r6, #0]
 800beb2:	2b50      	cmp	r3, #80	; 0x50
 800beb4:	d001      	beq.n	800beba <__gethex+0xc4>
 800beb6:	2b70      	cmp	r3, #112	; 0x70
 800beb8:	d140      	bne.n	800bf3c <__gethex+0x146>
 800beba:	7873      	ldrb	r3, [r6, #1]
 800bebc:	2b2b      	cmp	r3, #43	; 0x2b
 800bebe:	d031      	beq.n	800bf24 <__gethex+0x12e>
 800bec0:	2b2d      	cmp	r3, #45	; 0x2d
 800bec2:	d033      	beq.n	800bf2c <__gethex+0x136>
 800bec4:	1c71      	adds	r1, r6, #1
 800bec6:	f04f 0900 	mov.w	r9, #0
 800beca:	7808      	ldrb	r0, [r1, #0]
 800becc:	f7ff ff7e 	bl	800bdcc <__hexdig_fun>
 800bed0:	1e43      	subs	r3, r0, #1
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	2b18      	cmp	r3, #24
 800bed6:	d831      	bhi.n	800bf3c <__gethex+0x146>
 800bed8:	f1a0 0210 	sub.w	r2, r0, #16
 800bedc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bee0:	f7ff ff74 	bl	800bdcc <__hexdig_fun>
 800bee4:	1e43      	subs	r3, r0, #1
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b18      	cmp	r3, #24
 800beea:	d922      	bls.n	800bf32 <__gethex+0x13c>
 800beec:	f1b9 0f00 	cmp.w	r9, #0
 800bef0:	d000      	beq.n	800bef4 <__gethex+0xfe>
 800bef2:	4252      	negs	r2, r2
 800bef4:	4414      	add	r4, r2
 800bef6:	f8ca 1000 	str.w	r1, [sl]
 800befa:	b30d      	cbz	r5, 800bf40 <__gethex+0x14a>
 800befc:	f1bb 0f00 	cmp.w	fp, #0
 800bf00:	bf0c      	ite	eq
 800bf02:	2706      	moveq	r7, #6
 800bf04:	2700      	movne	r7, #0
 800bf06:	4638      	mov	r0, r7
 800bf08:	b00b      	add	sp, #44	; 0x2c
 800bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0e:	f10b 0b01 	add.w	fp, fp, #1
 800bf12:	e78a      	b.n	800be2a <__gethex+0x34>
 800bf14:	2500      	movs	r5, #0
 800bf16:	462c      	mov	r4, r5
 800bf18:	e7ae      	b.n	800be78 <__gethex+0x82>
 800bf1a:	463e      	mov	r6, r7
 800bf1c:	2501      	movs	r5, #1
 800bf1e:	e7c7      	b.n	800beb0 <__gethex+0xba>
 800bf20:	4604      	mov	r4, r0
 800bf22:	e7fb      	b.n	800bf1c <__gethex+0x126>
 800bf24:	f04f 0900 	mov.w	r9, #0
 800bf28:	1cb1      	adds	r1, r6, #2
 800bf2a:	e7ce      	b.n	800beca <__gethex+0xd4>
 800bf2c:	f04f 0901 	mov.w	r9, #1
 800bf30:	e7fa      	b.n	800bf28 <__gethex+0x132>
 800bf32:	230a      	movs	r3, #10
 800bf34:	fb03 0202 	mla	r2, r3, r2, r0
 800bf38:	3a10      	subs	r2, #16
 800bf3a:	e7cf      	b.n	800bedc <__gethex+0xe6>
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	e7da      	b.n	800bef6 <__gethex+0x100>
 800bf40:	1bf3      	subs	r3, r6, r7
 800bf42:	3b01      	subs	r3, #1
 800bf44:	4629      	mov	r1, r5
 800bf46:	2b07      	cmp	r3, #7
 800bf48:	dc49      	bgt.n	800bfde <__gethex+0x1e8>
 800bf4a:	9802      	ldr	r0, [sp, #8]
 800bf4c:	f000 fa58 	bl	800c400 <_Balloc>
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	f100 0914 	add.w	r9, r0, #20
 800bf56:	f04f 0b00 	mov.w	fp, #0
 800bf5a:	f1c3 0301 	rsb	r3, r3, #1
 800bf5e:	4605      	mov	r5, r0
 800bf60:	f8cd 9010 	str.w	r9, [sp, #16]
 800bf64:	46da      	mov	sl, fp
 800bf66:	9308      	str	r3, [sp, #32]
 800bf68:	42b7      	cmp	r7, r6
 800bf6a:	d33b      	bcc.n	800bfe4 <__gethex+0x1ee>
 800bf6c:	9804      	ldr	r0, [sp, #16]
 800bf6e:	f840 ab04 	str.w	sl, [r0], #4
 800bf72:	eba0 0009 	sub.w	r0, r0, r9
 800bf76:	1080      	asrs	r0, r0, #2
 800bf78:	6128      	str	r0, [r5, #16]
 800bf7a:	0147      	lsls	r7, r0, #5
 800bf7c:	4650      	mov	r0, sl
 800bf7e:	f000 fb03 	bl	800c588 <__hi0bits>
 800bf82:	f8d8 6000 	ldr.w	r6, [r8]
 800bf86:	1a3f      	subs	r7, r7, r0
 800bf88:	42b7      	cmp	r7, r6
 800bf8a:	dd64      	ble.n	800c056 <__gethex+0x260>
 800bf8c:	1bbf      	subs	r7, r7, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	4628      	mov	r0, r5
 800bf92:	f000 fe13 	bl	800cbbc <__any_on>
 800bf96:	4682      	mov	sl, r0
 800bf98:	b178      	cbz	r0, 800bfba <__gethex+0x1c4>
 800bf9a:	1e7b      	subs	r3, r7, #1
 800bf9c:	1159      	asrs	r1, r3, #5
 800bf9e:	f003 021f 	and.w	r2, r3, #31
 800bfa2:	f04f 0a01 	mov.w	sl, #1
 800bfa6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bfaa:	fa0a f202 	lsl.w	r2, sl, r2
 800bfae:	420a      	tst	r2, r1
 800bfb0:	d003      	beq.n	800bfba <__gethex+0x1c4>
 800bfb2:	4553      	cmp	r3, sl
 800bfb4:	dc46      	bgt.n	800c044 <__gethex+0x24e>
 800bfb6:	f04f 0a02 	mov.w	sl, #2
 800bfba:	4639      	mov	r1, r7
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f7ff fecb 	bl	800bd58 <rshift>
 800bfc2:	443c      	add	r4, r7
 800bfc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	da52      	bge.n	800c072 <__gethex+0x27c>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	9802      	ldr	r0, [sp, #8]
 800bfd0:	f000 fa4a 	bl	800c468 <_Bfree>
 800bfd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	27a3      	movs	r7, #163	; 0xa3
 800bfdc:	e793      	b.n	800bf06 <__gethex+0x110>
 800bfde:	3101      	adds	r1, #1
 800bfe0:	105b      	asrs	r3, r3, #1
 800bfe2:	e7b0      	b.n	800bf46 <__gethex+0x150>
 800bfe4:	1e73      	subs	r3, r6, #1
 800bfe6:	9305      	str	r3, [sp, #20]
 800bfe8:	9a07      	ldr	r2, [sp, #28]
 800bfea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d018      	beq.n	800c024 <__gethex+0x22e>
 800bff2:	f1bb 0f20 	cmp.w	fp, #32
 800bff6:	d107      	bne.n	800c008 <__gethex+0x212>
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	f8c3 a000 	str.w	sl, [r3]
 800bffe:	3304      	adds	r3, #4
 800c000:	f04f 0a00 	mov.w	sl, #0
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	46d3      	mov	fp, sl
 800c008:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c00c:	f7ff fede 	bl	800bdcc <__hexdig_fun>
 800c010:	f000 000f 	and.w	r0, r0, #15
 800c014:	fa00 f00b 	lsl.w	r0, r0, fp
 800c018:	ea4a 0a00 	orr.w	sl, sl, r0
 800c01c:	f10b 0b04 	add.w	fp, fp, #4
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	e00d      	b.n	800c040 <__gethex+0x24a>
 800c024:	9b05      	ldr	r3, [sp, #20]
 800c026:	9a08      	ldr	r2, [sp, #32]
 800c028:	4413      	add	r3, r2
 800c02a:	42bb      	cmp	r3, r7
 800c02c:	d3e1      	bcc.n	800bff2 <__gethex+0x1fc>
 800c02e:	4618      	mov	r0, r3
 800c030:	9a01      	ldr	r2, [sp, #4]
 800c032:	9903      	ldr	r1, [sp, #12]
 800c034:	9309      	str	r3, [sp, #36]	; 0x24
 800c036:	f000 fffb 	bl	800d030 <strncmp>
 800c03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d1d8      	bne.n	800bff2 <__gethex+0x1fc>
 800c040:	461e      	mov	r6, r3
 800c042:	e791      	b.n	800bf68 <__gethex+0x172>
 800c044:	1eb9      	subs	r1, r7, #2
 800c046:	4628      	mov	r0, r5
 800c048:	f000 fdb8 	bl	800cbbc <__any_on>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d0b2      	beq.n	800bfb6 <__gethex+0x1c0>
 800c050:	f04f 0a03 	mov.w	sl, #3
 800c054:	e7b1      	b.n	800bfba <__gethex+0x1c4>
 800c056:	da09      	bge.n	800c06c <__gethex+0x276>
 800c058:	1bf7      	subs	r7, r6, r7
 800c05a:	4629      	mov	r1, r5
 800c05c:	463a      	mov	r2, r7
 800c05e:	9802      	ldr	r0, [sp, #8]
 800c060:	f000 fbce 	bl	800c800 <__lshift>
 800c064:	1be4      	subs	r4, r4, r7
 800c066:	4605      	mov	r5, r0
 800c068:	f100 0914 	add.w	r9, r0, #20
 800c06c:	f04f 0a00 	mov.w	sl, #0
 800c070:	e7a8      	b.n	800bfc4 <__gethex+0x1ce>
 800c072:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c076:	42a0      	cmp	r0, r4
 800c078:	dd6a      	ble.n	800c150 <__gethex+0x35a>
 800c07a:	1b04      	subs	r4, r0, r4
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	dc2e      	bgt.n	800c0de <__gethex+0x2e8>
 800c080:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c084:	2b02      	cmp	r3, #2
 800c086:	d022      	beq.n	800c0ce <__gethex+0x2d8>
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d024      	beq.n	800c0d6 <__gethex+0x2e0>
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d115      	bne.n	800c0bc <__gethex+0x2c6>
 800c090:	42a6      	cmp	r6, r4
 800c092:	d113      	bne.n	800c0bc <__gethex+0x2c6>
 800c094:	2e01      	cmp	r6, #1
 800c096:	dc0b      	bgt.n	800c0b0 <__gethex+0x2ba>
 800c098:	9a06      	ldr	r2, [sp, #24]
 800c09a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	612b      	str	r3, [r5, #16]
 800c0a4:	f8c9 3000 	str.w	r3, [r9]
 800c0a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0aa:	2762      	movs	r7, #98	; 0x62
 800c0ac:	601d      	str	r5, [r3, #0]
 800c0ae:	e72a      	b.n	800bf06 <__gethex+0x110>
 800c0b0:	1e71      	subs	r1, r6, #1
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 fd82 	bl	800cbbc <__any_on>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d1ed      	bne.n	800c098 <__gethex+0x2a2>
 800c0bc:	4629      	mov	r1, r5
 800c0be:	9802      	ldr	r0, [sp, #8]
 800c0c0:	f000 f9d2 	bl	800c468 <_Bfree>
 800c0c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6013      	str	r3, [r2, #0]
 800c0ca:	2750      	movs	r7, #80	; 0x50
 800c0cc:	e71b      	b.n	800bf06 <__gethex+0x110>
 800c0ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0e1      	beq.n	800c098 <__gethex+0x2a2>
 800c0d4:	e7f2      	b.n	800c0bc <__gethex+0x2c6>
 800c0d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1dd      	bne.n	800c098 <__gethex+0x2a2>
 800c0dc:	e7ee      	b.n	800c0bc <__gethex+0x2c6>
 800c0de:	1e67      	subs	r7, r4, #1
 800c0e0:	f1ba 0f00 	cmp.w	sl, #0
 800c0e4:	d131      	bne.n	800c14a <__gethex+0x354>
 800c0e6:	b127      	cbz	r7, 800c0f2 <__gethex+0x2fc>
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f000 fd66 	bl	800cbbc <__any_on>
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	117a      	asrs	r2, r7, #5
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f007 071f 	and.w	r7, r7, #31
 800c0fa:	fa03 f707 	lsl.w	r7, r3, r7
 800c0fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c102:	4621      	mov	r1, r4
 800c104:	421f      	tst	r7, r3
 800c106:	4628      	mov	r0, r5
 800c108:	bf18      	it	ne
 800c10a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c10e:	1b36      	subs	r6, r6, r4
 800c110:	f7ff fe22 	bl	800bd58 <rshift>
 800c114:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c118:	2702      	movs	r7, #2
 800c11a:	f1ba 0f00 	cmp.w	sl, #0
 800c11e:	d048      	beq.n	800c1b2 <__gethex+0x3bc>
 800c120:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d015      	beq.n	800c154 <__gethex+0x35e>
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d017      	beq.n	800c15c <__gethex+0x366>
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d109      	bne.n	800c144 <__gethex+0x34e>
 800c130:	f01a 0f02 	tst.w	sl, #2
 800c134:	d006      	beq.n	800c144 <__gethex+0x34e>
 800c136:	f8d9 3000 	ldr.w	r3, [r9]
 800c13a:	ea4a 0a03 	orr.w	sl, sl, r3
 800c13e:	f01a 0f01 	tst.w	sl, #1
 800c142:	d10e      	bne.n	800c162 <__gethex+0x36c>
 800c144:	f047 0710 	orr.w	r7, r7, #16
 800c148:	e033      	b.n	800c1b2 <__gethex+0x3bc>
 800c14a:	f04f 0a01 	mov.w	sl, #1
 800c14e:	e7d0      	b.n	800c0f2 <__gethex+0x2fc>
 800c150:	2701      	movs	r7, #1
 800c152:	e7e2      	b.n	800c11a <__gethex+0x324>
 800c154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c156:	f1c3 0301 	rsb	r3, r3, #1
 800c15a:	9315      	str	r3, [sp, #84]	; 0x54
 800c15c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0f0      	beq.n	800c144 <__gethex+0x34e>
 800c162:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c166:	f105 0314 	add.w	r3, r5, #20
 800c16a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c16e:	eb03 010a 	add.w	r1, r3, sl
 800c172:	f04f 0c00 	mov.w	ip, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c180:	d01c      	beq.n	800c1bc <__gethex+0x3c6>
 800c182:	3201      	adds	r2, #1
 800c184:	6002      	str	r2, [r0, #0]
 800c186:	2f02      	cmp	r7, #2
 800c188:	f105 0314 	add.w	r3, r5, #20
 800c18c:	d138      	bne.n	800c200 <__gethex+0x40a>
 800c18e:	f8d8 2000 	ldr.w	r2, [r8]
 800c192:	3a01      	subs	r2, #1
 800c194:	42b2      	cmp	r2, r6
 800c196:	d10a      	bne.n	800c1ae <__gethex+0x3b8>
 800c198:	1171      	asrs	r1, r6, #5
 800c19a:	2201      	movs	r2, #1
 800c19c:	f006 061f 	and.w	r6, r6, #31
 800c1a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1a4:	fa02 f606 	lsl.w	r6, r2, r6
 800c1a8:	421e      	tst	r6, r3
 800c1aa:	bf18      	it	ne
 800c1ac:	4617      	movne	r7, r2
 800c1ae:	f047 0720 	orr.w	r7, r7, #32
 800c1b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1b4:	601d      	str	r5, [r3, #0]
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	601c      	str	r4, [r3, #0]
 800c1ba:	e6a4      	b.n	800bf06 <__gethex+0x110>
 800c1bc:	4299      	cmp	r1, r3
 800c1be:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1c2:	d8d8      	bhi.n	800c176 <__gethex+0x380>
 800c1c4:	68ab      	ldr	r3, [r5, #8]
 800c1c6:	4599      	cmp	r9, r3
 800c1c8:	db12      	blt.n	800c1f0 <__gethex+0x3fa>
 800c1ca:	6869      	ldr	r1, [r5, #4]
 800c1cc:	9802      	ldr	r0, [sp, #8]
 800c1ce:	3101      	adds	r1, #1
 800c1d0:	f000 f916 	bl	800c400 <_Balloc>
 800c1d4:	692a      	ldr	r2, [r5, #16]
 800c1d6:	3202      	adds	r2, #2
 800c1d8:	f105 010c 	add.w	r1, r5, #12
 800c1dc:	4683      	mov	fp, r0
 800c1de:	0092      	lsls	r2, r2, #2
 800c1e0:	300c      	adds	r0, #12
 800c1e2:	f7fd fa0f 	bl	8009604 <memcpy>
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	9802      	ldr	r0, [sp, #8]
 800c1ea:	f000 f93d 	bl	800c468 <_Bfree>
 800c1ee:	465d      	mov	r5, fp
 800c1f0:	692b      	ldr	r3, [r5, #16]
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c1f8:	612a      	str	r2, [r5, #16]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	615a      	str	r2, [r3, #20]
 800c1fe:	e7c2      	b.n	800c186 <__gethex+0x390>
 800c200:	692a      	ldr	r2, [r5, #16]
 800c202:	454a      	cmp	r2, r9
 800c204:	dd0b      	ble.n	800c21e <__gethex+0x428>
 800c206:	2101      	movs	r1, #1
 800c208:	4628      	mov	r0, r5
 800c20a:	f7ff fda5 	bl	800bd58 <rshift>
 800c20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c212:	3401      	adds	r4, #1
 800c214:	42a3      	cmp	r3, r4
 800c216:	f6ff aed9 	blt.w	800bfcc <__gethex+0x1d6>
 800c21a:	2701      	movs	r7, #1
 800c21c:	e7c7      	b.n	800c1ae <__gethex+0x3b8>
 800c21e:	f016 061f 	ands.w	r6, r6, #31
 800c222:	d0fa      	beq.n	800c21a <__gethex+0x424>
 800c224:	449a      	add	sl, r3
 800c226:	f1c6 0620 	rsb	r6, r6, #32
 800c22a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c22e:	f000 f9ab 	bl	800c588 <__hi0bits>
 800c232:	42b0      	cmp	r0, r6
 800c234:	dbe7      	blt.n	800c206 <__gethex+0x410>
 800c236:	e7f0      	b.n	800c21a <__gethex+0x424>

0800c238 <L_shift>:
 800c238:	f1c2 0208 	rsb	r2, r2, #8
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	b570      	push	{r4, r5, r6, lr}
 800c240:	f1c2 0620 	rsb	r6, r2, #32
 800c244:	6843      	ldr	r3, [r0, #4]
 800c246:	6804      	ldr	r4, [r0, #0]
 800c248:	fa03 f506 	lsl.w	r5, r3, r6
 800c24c:	432c      	orrs	r4, r5
 800c24e:	40d3      	lsrs	r3, r2
 800c250:	6004      	str	r4, [r0, #0]
 800c252:	f840 3f04 	str.w	r3, [r0, #4]!
 800c256:	4288      	cmp	r0, r1
 800c258:	d3f4      	bcc.n	800c244 <L_shift+0xc>
 800c25a:	bd70      	pop	{r4, r5, r6, pc}

0800c25c <__match>:
 800c25c:	b530      	push	{r4, r5, lr}
 800c25e:	6803      	ldr	r3, [r0, #0]
 800c260:	3301      	adds	r3, #1
 800c262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c266:	b914      	cbnz	r4, 800c26e <__match+0x12>
 800c268:	6003      	str	r3, [r0, #0]
 800c26a:	2001      	movs	r0, #1
 800c26c:	bd30      	pop	{r4, r5, pc}
 800c26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c272:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c276:	2d19      	cmp	r5, #25
 800c278:	bf98      	it	ls
 800c27a:	3220      	addls	r2, #32
 800c27c:	42a2      	cmp	r2, r4
 800c27e:	d0f0      	beq.n	800c262 <__match+0x6>
 800c280:	2000      	movs	r0, #0
 800c282:	e7f3      	b.n	800c26c <__match+0x10>

0800c284 <__hexnan>:
 800c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	680b      	ldr	r3, [r1, #0]
 800c28a:	6801      	ldr	r1, [r0, #0]
 800c28c:	115f      	asrs	r7, r3, #5
 800c28e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c292:	f013 031f 	ands.w	r3, r3, #31
 800c296:	b087      	sub	sp, #28
 800c298:	bf18      	it	ne
 800c29a:	3704      	addne	r7, #4
 800c29c:	2500      	movs	r5, #0
 800c29e:	1f3e      	subs	r6, r7, #4
 800c2a0:	4682      	mov	sl, r0
 800c2a2:	4690      	mov	r8, r2
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	f847 5c04 	str.w	r5, [r7, #-4]
 800c2aa:	46b1      	mov	r9, r6
 800c2ac:	4634      	mov	r4, r6
 800c2ae:	9502      	str	r5, [sp, #8]
 800c2b0:	46ab      	mov	fp, r5
 800c2b2:	784a      	ldrb	r2, [r1, #1]
 800c2b4:	1c4b      	adds	r3, r1, #1
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	b342      	cbz	r2, 800c30c <__hexnan+0x88>
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	9105      	str	r1, [sp, #20]
 800c2be:	9204      	str	r2, [sp, #16]
 800c2c0:	f7ff fd84 	bl	800bdcc <__hexdig_fun>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d143      	bne.n	800c350 <__hexnan+0xcc>
 800c2c8:	9a04      	ldr	r2, [sp, #16]
 800c2ca:	9905      	ldr	r1, [sp, #20]
 800c2cc:	2a20      	cmp	r2, #32
 800c2ce:	d818      	bhi.n	800c302 <__hexnan+0x7e>
 800c2d0:	9b02      	ldr	r3, [sp, #8]
 800c2d2:	459b      	cmp	fp, r3
 800c2d4:	dd13      	ble.n	800c2fe <__hexnan+0x7a>
 800c2d6:	454c      	cmp	r4, r9
 800c2d8:	d206      	bcs.n	800c2e8 <__hexnan+0x64>
 800c2da:	2d07      	cmp	r5, #7
 800c2dc:	dc04      	bgt.n	800c2e8 <__hexnan+0x64>
 800c2de:	462a      	mov	r2, r5
 800c2e0:	4649      	mov	r1, r9
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f7ff ffa8 	bl	800c238 <L_shift>
 800c2e8:	4544      	cmp	r4, r8
 800c2ea:	d944      	bls.n	800c376 <__hexnan+0xf2>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f1a4 0904 	sub.w	r9, r4, #4
 800c2f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2f6:	f8cd b008 	str.w	fp, [sp, #8]
 800c2fa:	464c      	mov	r4, r9
 800c2fc:	461d      	mov	r5, r3
 800c2fe:	9903      	ldr	r1, [sp, #12]
 800c300:	e7d7      	b.n	800c2b2 <__hexnan+0x2e>
 800c302:	2a29      	cmp	r2, #41	; 0x29
 800c304:	d14a      	bne.n	800c39c <__hexnan+0x118>
 800c306:	3102      	adds	r1, #2
 800c308:	f8ca 1000 	str.w	r1, [sl]
 800c30c:	f1bb 0f00 	cmp.w	fp, #0
 800c310:	d044      	beq.n	800c39c <__hexnan+0x118>
 800c312:	454c      	cmp	r4, r9
 800c314:	d206      	bcs.n	800c324 <__hexnan+0xa0>
 800c316:	2d07      	cmp	r5, #7
 800c318:	dc04      	bgt.n	800c324 <__hexnan+0xa0>
 800c31a:	462a      	mov	r2, r5
 800c31c:	4649      	mov	r1, r9
 800c31e:	4620      	mov	r0, r4
 800c320:	f7ff ff8a 	bl	800c238 <L_shift>
 800c324:	4544      	cmp	r4, r8
 800c326:	d928      	bls.n	800c37a <__hexnan+0xf6>
 800c328:	4643      	mov	r3, r8
 800c32a:	f854 2b04 	ldr.w	r2, [r4], #4
 800c32e:	f843 2b04 	str.w	r2, [r3], #4
 800c332:	42a6      	cmp	r6, r4
 800c334:	d2f9      	bcs.n	800c32a <__hexnan+0xa6>
 800c336:	2200      	movs	r2, #0
 800c338:	f843 2b04 	str.w	r2, [r3], #4
 800c33c:	429e      	cmp	r6, r3
 800c33e:	d2fb      	bcs.n	800c338 <__hexnan+0xb4>
 800c340:	6833      	ldr	r3, [r6, #0]
 800c342:	b91b      	cbnz	r3, 800c34c <__hexnan+0xc8>
 800c344:	4546      	cmp	r6, r8
 800c346:	d127      	bne.n	800c398 <__hexnan+0x114>
 800c348:	2301      	movs	r3, #1
 800c34a:	6033      	str	r3, [r6, #0]
 800c34c:	2005      	movs	r0, #5
 800c34e:	e026      	b.n	800c39e <__hexnan+0x11a>
 800c350:	3501      	adds	r5, #1
 800c352:	2d08      	cmp	r5, #8
 800c354:	f10b 0b01 	add.w	fp, fp, #1
 800c358:	dd06      	ble.n	800c368 <__hexnan+0xe4>
 800c35a:	4544      	cmp	r4, r8
 800c35c:	d9cf      	bls.n	800c2fe <__hexnan+0x7a>
 800c35e:	2300      	movs	r3, #0
 800c360:	f844 3c04 	str.w	r3, [r4, #-4]
 800c364:	2501      	movs	r5, #1
 800c366:	3c04      	subs	r4, #4
 800c368:	6822      	ldr	r2, [r4, #0]
 800c36a:	f000 000f 	and.w	r0, r0, #15
 800c36e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c372:	6020      	str	r0, [r4, #0]
 800c374:	e7c3      	b.n	800c2fe <__hexnan+0x7a>
 800c376:	2508      	movs	r5, #8
 800c378:	e7c1      	b.n	800c2fe <__hexnan+0x7a>
 800c37a:	9b01      	ldr	r3, [sp, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0df      	beq.n	800c340 <__hexnan+0xbc>
 800c380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c384:	f1c3 0320 	rsb	r3, r3, #32
 800c388:	fa22 f303 	lsr.w	r3, r2, r3
 800c38c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c390:	401a      	ands	r2, r3
 800c392:	f847 2c04 	str.w	r2, [r7, #-4]
 800c396:	e7d3      	b.n	800c340 <__hexnan+0xbc>
 800c398:	3e04      	subs	r6, #4
 800c39a:	e7d1      	b.n	800c340 <__hexnan+0xbc>
 800c39c:	2004      	movs	r0, #4
 800c39e:	b007      	add	sp, #28
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3a4 <__locale_ctype_ptr_l>:
 800c3a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c3a8:	4770      	bx	lr

0800c3aa <__localeconv_l>:
 800c3aa:	30f0      	adds	r0, #240	; 0xf0
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <_localeconv_r>:
 800c3b0:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <_localeconv_r+0x14>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6a18      	ldr	r0, [r3, #32]
 800c3b6:	4b04      	ldr	r3, [pc, #16]	; (800c3c8 <_localeconv_r+0x18>)
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	bf08      	it	eq
 800c3bc:	4618      	moveq	r0, r3
 800c3be:	30f0      	adds	r0, #240	; 0xf0
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20000058 	.word	0x20000058
 800c3c8:	200000bc 	.word	0x200000bc

0800c3cc <malloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <malloc+0xc>)
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f000 bc71 	b.w	800ccb8 <_malloc_r>
 800c3d6:	bf00      	nop
 800c3d8:	20000058 	.word	0x20000058

0800c3dc <__ascii_mbtowc>:
 800c3dc:	b082      	sub	sp, #8
 800c3de:	b901      	cbnz	r1, 800c3e2 <__ascii_mbtowc+0x6>
 800c3e0:	a901      	add	r1, sp, #4
 800c3e2:	b142      	cbz	r2, 800c3f6 <__ascii_mbtowc+0x1a>
 800c3e4:	b14b      	cbz	r3, 800c3fa <__ascii_mbtowc+0x1e>
 800c3e6:	7813      	ldrb	r3, [r2, #0]
 800c3e8:	600b      	str	r3, [r1, #0]
 800c3ea:	7812      	ldrb	r2, [r2, #0]
 800c3ec:	1c10      	adds	r0, r2, #0
 800c3ee:	bf18      	it	ne
 800c3f0:	2001      	movne	r0, #1
 800c3f2:	b002      	add	sp, #8
 800c3f4:	4770      	bx	lr
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	e7fb      	b.n	800c3f2 <__ascii_mbtowc+0x16>
 800c3fa:	f06f 0001 	mvn.w	r0, #1
 800c3fe:	e7f8      	b.n	800c3f2 <__ascii_mbtowc+0x16>

0800c400 <_Balloc>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c404:	4604      	mov	r4, r0
 800c406:	460e      	mov	r6, r1
 800c408:	b93d      	cbnz	r5, 800c41a <_Balloc+0x1a>
 800c40a:	2010      	movs	r0, #16
 800c40c:	f7ff ffde 	bl	800c3cc <malloc>
 800c410:	6260      	str	r0, [r4, #36]	; 0x24
 800c412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c416:	6005      	str	r5, [r0, #0]
 800c418:	60c5      	str	r5, [r0, #12]
 800c41a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c41c:	68eb      	ldr	r3, [r5, #12]
 800c41e:	b183      	cbz	r3, 800c442 <_Balloc+0x42>
 800c420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c428:	b9b8      	cbnz	r0, 800c45a <_Balloc+0x5a>
 800c42a:	2101      	movs	r1, #1
 800c42c:	fa01 f506 	lsl.w	r5, r1, r6
 800c430:	1d6a      	adds	r2, r5, #5
 800c432:	0092      	lsls	r2, r2, #2
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fbe2 	bl	800cbfe <_calloc_r>
 800c43a:	b160      	cbz	r0, 800c456 <_Balloc+0x56>
 800c43c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c440:	e00e      	b.n	800c460 <_Balloc+0x60>
 800c442:	2221      	movs	r2, #33	; 0x21
 800c444:	2104      	movs	r1, #4
 800c446:	4620      	mov	r0, r4
 800c448:	f000 fbd9 	bl	800cbfe <_calloc_r>
 800c44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44e:	60e8      	str	r0, [r5, #12]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e4      	bne.n	800c420 <_Balloc+0x20>
 800c456:	2000      	movs	r0, #0
 800c458:	bd70      	pop	{r4, r5, r6, pc}
 800c45a:	6802      	ldr	r2, [r0, #0]
 800c45c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c460:	2300      	movs	r3, #0
 800c462:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c466:	e7f7      	b.n	800c458 <_Balloc+0x58>

0800c468 <_Bfree>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c46c:	4606      	mov	r6, r0
 800c46e:	460d      	mov	r5, r1
 800c470:	b93c      	cbnz	r4, 800c482 <_Bfree+0x1a>
 800c472:	2010      	movs	r0, #16
 800c474:	f7ff ffaa 	bl	800c3cc <malloc>
 800c478:	6270      	str	r0, [r6, #36]	; 0x24
 800c47a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c47e:	6004      	str	r4, [r0, #0]
 800c480:	60c4      	str	r4, [r0, #12]
 800c482:	b13d      	cbz	r5, 800c494 <_Bfree+0x2c>
 800c484:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c486:	686a      	ldr	r2, [r5, #4]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c48e:	6029      	str	r1, [r5, #0]
 800c490:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c494:	bd70      	pop	{r4, r5, r6, pc}

0800c496 <__multadd>:
 800c496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	690d      	ldr	r5, [r1, #16]
 800c49c:	461f      	mov	r7, r3
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	f101 0c14 	add.w	ip, r1, #20
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f8dc 0000 	ldr.w	r0, [ip]
 800c4ac:	b281      	uxth	r1, r0
 800c4ae:	fb02 7101 	mla	r1, r2, r1, r7
 800c4b2:	0c0f      	lsrs	r7, r1, #16
 800c4b4:	0c00      	lsrs	r0, r0, #16
 800c4b6:	fb02 7000 	mla	r0, r2, r0, r7
 800c4ba:	b289      	uxth	r1, r1
 800c4bc:	3301      	adds	r3, #1
 800c4be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c4c8:	f84c 1b04 	str.w	r1, [ip], #4
 800c4cc:	dcec      	bgt.n	800c4a8 <__multadd+0x12>
 800c4ce:	b1d7      	cbz	r7, 800c506 <__multadd+0x70>
 800c4d0:	68a3      	ldr	r3, [r4, #8]
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	dc12      	bgt.n	800c4fc <__multadd+0x66>
 800c4d6:	6861      	ldr	r1, [r4, #4]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	3101      	adds	r1, #1
 800c4dc:	f7ff ff90 	bl	800c400 <_Balloc>
 800c4e0:	6922      	ldr	r2, [r4, #16]
 800c4e2:	3202      	adds	r2, #2
 800c4e4:	f104 010c 	add.w	r1, r4, #12
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	300c      	adds	r0, #12
 800c4ee:	f7fd f889 	bl	8009604 <memcpy>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff ffb7 	bl	800c468 <_Bfree>
 800c4fa:	4644      	mov	r4, r8
 800c4fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c500:	3501      	adds	r5, #1
 800c502:	615f      	str	r7, [r3, #20]
 800c504:	6125      	str	r5, [r4, #16]
 800c506:	4620      	mov	r0, r4
 800c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c50c <__s2b>:
 800c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c510:	460c      	mov	r4, r1
 800c512:	4615      	mov	r5, r2
 800c514:	461f      	mov	r7, r3
 800c516:	2209      	movs	r2, #9
 800c518:	3308      	adds	r3, #8
 800c51a:	4606      	mov	r6, r0
 800c51c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c520:	2100      	movs	r1, #0
 800c522:	2201      	movs	r2, #1
 800c524:	429a      	cmp	r2, r3
 800c526:	db20      	blt.n	800c56a <__s2b+0x5e>
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff ff69 	bl	800c400 <_Balloc>
 800c52e:	9b08      	ldr	r3, [sp, #32]
 800c530:	6143      	str	r3, [r0, #20]
 800c532:	2d09      	cmp	r5, #9
 800c534:	f04f 0301 	mov.w	r3, #1
 800c538:	6103      	str	r3, [r0, #16]
 800c53a:	dd19      	ble.n	800c570 <__s2b+0x64>
 800c53c:	f104 0809 	add.w	r8, r4, #9
 800c540:	46c1      	mov	r9, r8
 800c542:	442c      	add	r4, r5
 800c544:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c548:	4601      	mov	r1, r0
 800c54a:	3b30      	subs	r3, #48	; 0x30
 800c54c:	220a      	movs	r2, #10
 800c54e:	4630      	mov	r0, r6
 800c550:	f7ff ffa1 	bl	800c496 <__multadd>
 800c554:	45a1      	cmp	r9, r4
 800c556:	d1f5      	bne.n	800c544 <__s2b+0x38>
 800c558:	eb08 0405 	add.w	r4, r8, r5
 800c55c:	3c08      	subs	r4, #8
 800c55e:	1b2d      	subs	r5, r5, r4
 800c560:	1963      	adds	r3, r4, r5
 800c562:	42bb      	cmp	r3, r7
 800c564:	db07      	blt.n	800c576 <__s2b+0x6a>
 800c566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c56a:	0052      	lsls	r2, r2, #1
 800c56c:	3101      	adds	r1, #1
 800c56e:	e7d9      	b.n	800c524 <__s2b+0x18>
 800c570:	340a      	adds	r4, #10
 800c572:	2509      	movs	r5, #9
 800c574:	e7f3      	b.n	800c55e <__s2b+0x52>
 800c576:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c57a:	4601      	mov	r1, r0
 800c57c:	3b30      	subs	r3, #48	; 0x30
 800c57e:	220a      	movs	r2, #10
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff ff88 	bl	800c496 <__multadd>
 800c586:	e7eb      	b.n	800c560 <__s2b+0x54>

0800c588 <__hi0bits>:
 800c588:	0c02      	lsrs	r2, r0, #16
 800c58a:	0412      	lsls	r2, r2, #16
 800c58c:	4603      	mov	r3, r0
 800c58e:	b9b2      	cbnz	r2, 800c5be <__hi0bits+0x36>
 800c590:	0403      	lsls	r3, r0, #16
 800c592:	2010      	movs	r0, #16
 800c594:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c598:	bf04      	itt	eq
 800c59a:	021b      	lsleq	r3, r3, #8
 800c59c:	3008      	addeq	r0, #8
 800c59e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5a2:	bf04      	itt	eq
 800c5a4:	011b      	lsleq	r3, r3, #4
 800c5a6:	3004      	addeq	r0, #4
 800c5a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c5ac:	bf04      	itt	eq
 800c5ae:	009b      	lsleq	r3, r3, #2
 800c5b0:	3002      	addeq	r0, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	db06      	blt.n	800c5c4 <__hi0bits+0x3c>
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	d503      	bpl.n	800c5c2 <__hi0bits+0x3a>
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	4770      	bx	lr
 800c5be:	2000      	movs	r0, #0
 800c5c0:	e7e8      	b.n	800c594 <__hi0bits+0xc>
 800c5c2:	2020      	movs	r0, #32
 800c5c4:	4770      	bx	lr

0800c5c6 <__lo0bits>:
 800c5c6:	6803      	ldr	r3, [r0, #0]
 800c5c8:	f013 0207 	ands.w	r2, r3, #7
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	d00b      	beq.n	800c5e8 <__lo0bits+0x22>
 800c5d0:	07da      	lsls	r2, r3, #31
 800c5d2:	d423      	bmi.n	800c61c <__lo0bits+0x56>
 800c5d4:	0798      	lsls	r0, r3, #30
 800c5d6:	bf49      	itett	mi
 800c5d8:	085b      	lsrmi	r3, r3, #1
 800c5da:	089b      	lsrpl	r3, r3, #2
 800c5dc:	2001      	movmi	r0, #1
 800c5de:	600b      	strmi	r3, [r1, #0]
 800c5e0:	bf5c      	itt	pl
 800c5e2:	600b      	strpl	r3, [r1, #0]
 800c5e4:	2002      	movpl	r0, #2
 800c5e6:	4770      	bx	lr
 800c5e8:	b298      	uxth	r0, r3
 800c5ea:	b9a8      	cbnz	r0, 800c618 <__lo0bits+0x52>
 800c5ec:	0c1b      	lsrs	r3, r3, #16
 800c5ee:	2010      	movs	r0, #16
 800c5f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c5f4:	bf04      	itt	eq
 800c5f6:	0a1b      	lsreq	r3, r3, #8
 800c5f8:	3008      	addeq	r0, #8
 800c5fa:	071a      	lsls	r2, r3, #28
 800c5fc:	bf04      	itt	eq
 800c5fe:	091b      	lsreq	r3, r3, #4
 800c600:	3004      	addeq	r0, #4
 800c602:	079a      	lsls	r2, r3, #30
 800c604:	bf04      	itt	eq
 800c606:	089b      	lsreq	r3, r3, #2
 800c608:	3002      	addeq	r0, #2
 800c60a:	07da      	lsls	r2, r3, #31
 800c60c:	d402      	bmi.n	800c614 <__lo0bits+0x4e>
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	d006      	beq.n	800c620 <__lo0bits+0x5a>
 800c612:	3001      	adds	r0, #1
 800c614:	600b      	str	r3, [r1, #0]
 800c616:	4770      	bx	lr
 800c618:	4610      	mov	r0, r2
 800c61a:	e7e9      	b.n	800c5f0 <__lo0bits+0x2a>
 800c61c:	2000      	movs	r0, #0
 800c61e:	4770      	bx	lr
 800c620:	2020      	movs	r0, #32
 800c622:	4770      	bx	lr

0800c624 <__i2b>:
 800c624:	b510      	push	{r4, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	2101      	movs	r1, #1
 800c62a:	f7ff fee9 	bl	800c400 <_Balloc>
 800c62e:	2201      	movs	r2, #1
 800c630:	6144      	str	r4, [r0, #20]
 800c632:	6102      	str	r2, [r0, #16]
 800c634:	bd10      	pop	{r4, pc}

0800c636 <__multiply>:
 800c636:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	4614      	mov	r4, r2
 800c63c:	690a      	ldr	r2, [r1, #16]
 800c63e:	6923      	ldr	r3, [r4, #16]
 800c640:	429a      	cmp	r2, r3
 800c642:	bfb8      	it	lt
 800c644:	460b      	movlt	r3, r1
 800c646:	4688      	mov	r8, r1
 800c648:	bfbc      	itt	lt
 800c64a:	46a0      	movlt	r8, r4
 800c64c:	461c      	movlt	r4, r3
 800c64e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c652:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c65a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c65e:	eb07 0609 	add.w	r6, r7, r9
 800c662:	42b3      	cmp	r3, r6
 800c664:	bfb8      	it	lt
 800c666:	3101      	addlt	r1, #1
 800c668:	f7ff feca 	bl	800c400 <_Balloc>
 800c66c:	f100 0514 	add.w	r5, r0, #20
 800c670:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c674:	462b      	mov	r3, r5
 800c676:	2200      	movs	r2, #0
 800c678:	4573      	cmp	r3, lr
 800c67a:	d316      	bcc.n	800c6aa <__multiply+0x74>
 800c67c:	f104 0214 	add.w	r2, r4, #20
 800c680:	f108 0114 	add.w	r1, r8, #20
 800c684:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c688:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	9201      	str	r2, [sp, #4]
 800c692:	4293      	cmp	r3, r2
 800c694:	d80c      	bhi.n	800c6b0 <__multiply+0x7a>
 800c696:	2e00      	cmp	r6, #0
 800c698:	dd03      	ble.n	800c6a2 <__multiply+0x6c>
 800c69a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d05d      	beq.n	800c75e <__multiply+0x128>
 800c6a2:	6106      	str	r6, [r0, #16]
 800c6a4:	b003      	add	sp, #12
 800c6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6aa:	f843 2b04 	str.w	r2, [r3], #4
 800c6ae:	e7e3      	b.n	800c678 <__multiply+0x42>
 800c6b0:	f8b2 b000 	ldrh.w	fp, [r2]
 800c6b4:	f1bb 0f00 	cmp.w	fp, #0
 800c6b8:	d023      	beq.n	800c702 <__multiply+0xcc>
 800c6ba:	4689      	mov	r9, r1
 800c6bc:	46ac      	mov	ip, r5
 800c6be:	f04f 0800 	mov.w	r8, #0
 800c6c2:	f859 4b04 	ldr.w	r4, [r9], #4
 800c6c6:	f8dc a000 	ldr.w	sl, [ip]
 800c6ca:	b2a3      	uxth	r3, r4
 800c6cc:	fa1f fa8a 	uxth.w	sl, sl
 800c6d0:	fb0b a303 	mla	r3, fp, r3, sl
 800c6d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c6d8:	f8dc 4000 	ldr.w	r4, [ip]
 800c6dc:	4443      	add	r3, r8
 800c6de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6e2:	fb0b 840a 	mla	r4, fp, sl, r8
 800c6e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c6ea:	46e2      	mov	sl, ip
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c6f2:	454f      	cmp	r7, r9
 800c6f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6f8:	f84a 3b04 	str.w	r3, [sl], #4
 800c6fc:	d82b      	bhi.n	800c756 <__multiply+0x120>
 800c6fe:	f8cc 8004 	str.w	r8, [ip, #4]
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c708:	3204      	adds	r2, #4
 800c70a:	f1ba 0f00 	cmp.w	sl, #0
 800c70e:	d020      	beq.n	800c752 <__multiply+0x11c>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	4689      	mov	r9, r1
 800c714:	46a8      	mov	r8, r5
 800c716:	f04f 0b00 	mov.w	fp, #0
 800c71a:	f8b9 c000 	ldrh.w	ip, [r9]
 800c71e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c722:	fb0a 440c 	mla	r4, sl, ip, r4
 800c726:	445c      	add	r4, fp
 800c728:	46c4      	mov	ip, r8
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c730:	f84c 3b04 	str.w	r3, [ip], #4
 800c734:	f859 3b04 	ldr.w	r3, [r9], #4
 800c738:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c73c:	0c1b      	lsrs	r3, r3, #16
 800c73e:	fb0a b303 	mla	r3, sl, r3, fp
 800c742:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c746:	454f      	cmp	r7, r9
 800c748:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c74c:	d805      	bhi.n	800c75a <__multiply+0x124>
 800c74e:	f8c8 3004 	str.w	r3, [r8, #4]
 800c752:	3504      	adds	r5, #4
 800c754:	e79b      	b.n	800c68e <__multiply+0x58>
 800c756:	46d4      	mov	ip, sl
 800c758:	e7b3      	b.n	800c6c2 <__multiply+0x8c>
 800c75a:	46e0      	mov	r8, ip
 800c75c:	e7dd      	b.n	800c71a <__multiply+0xe4>
 800c75e:	3e01      	subs	r6, #1
 800c760:	e799      	b.n	800c696 <__multiply+0x60>
	...

0800c764 <__pow5mult>:
 800c764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c768:	4615      	mov	r5, r2
 800c76a:	f012 0203 	ands.w	r2, r2, #3
 800c76e:	4606      	mov	r6, r0
 800c770:	460f      	mov	r7, r1
 800c772:	d007      	beq.n	800c784 <__pow5mult+0x20>
 800c774:	3a01      	subs	r2, #1
 800c776:	4c21      	ldr	r4, [pc, #132]	; (800c7fc <__pow5mult+0x98>)
 800c778:	2300      	movs	r3, #0
 800c77a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c77e:	f7ff fe8a 	bl	800c496 <__multadd>
 800c782:	4607      	mov	r7, r0
 800c784:	10ad      	asrs	r5, r5, #2
 800c786:	d035      	beq.n	800c7f4 <__pow5mult+0x90>
 800c788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c78a:	b93c      	cbnz	r4, 800c79c <__pow5mult+0x38>
 800c78c:	2010      	movs	r0, #16
 800c78e:	f7ff fe1d 	bl	800c3cc <malloc>
 800c792:	6270      	str	r0, [r6, #36]	; 0x24
 800c794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c798:	6004      	str	r4, [r0, #0]
 800c79a:	60c4      	str	r4, [r0, #12]
 800c79c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7a4:	b94c      	cbnz	r4, 800c7ba <__pow5mult+0x56>
 800c7a6:	f240 2171 	movw	r1, #625	; 0x271
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ff3a 	bl	800c624 <__i2b>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	6003      	str	r3, [r0, #0]
 800c7ba:	f04f 0800 	mov.w	r8, #0
 800c7be:	07eb      	lsls	r3, r5, #31
 800c7c0:	d50a      	bpl.n	800c7d8 <__pow5mult+0x74>
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7ff ff35 	bl	800c636 <__multiply>
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	4681      	mov	r9, r0
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7ff fe49 	bl	800c468 <_Bfree>
 800c7d6:	464f      	mov	r7, r9
 800c7d8:	106d      	asrs	r5, r5, #1
 800c7da:	d00b      	beq.n	800c7f4 <__pow5mult+0x90>
 800c7dc:	6820      	ldr	r0, [r4, #0]
 800c7de:	b938      	cbnz	r0, 800c7f0 <__pow5mult+0x8c>
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f7ff ff26 	bl	800c636 <__multiply>
 800c7ea:	6020      	str	r0, [r4, #0]
 800c7ec:	f8c0 8000 	str.w	r8, [r0]
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	e7e4      	b.n	800c7be <__pow5mult+0x5a>
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7fa:	bf00      	nop
 800c7fc:	0800fc70 	.word	0x0800fc70

0800c800 <__lshift>:
 800c800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c804:	460c      	mov	r4, r1
 800c806:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6849      	ldr	r1, [r1, #4]
 800c80e:	eb0a 0903 	add.w	r9, sl, r3
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	4607      	mov	r7, r0
 800c816:	4616      	mov	r6, r2
 800c818:	f109 0501 	add.w	r5, r9, #1
 800c81c:	42ab      	cmp	r3, r5
 800c81e:	db32      	blt.n	800c886 <__lshift+0x86>
 800c820:	4638      	mov	r0, r7
 800c822:	f7ff fded 	bl	800c400 <_Balloc>
 800c826:	2300      	movs	r3, #0
 800c828:	4680      	mov	r8, r0
 800c82a:	f100 0114 	add.w	r1, r0, #20
 800c82e:	461a      	mov	r2, r3
 800c830:	4553      	cmp	r3, sl
 800c832:	db2b      	blt.n	800c88c <__lshift+0x8c>
 800c834:	6920      	ldr	r0, [r4, #16]
 800c836:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c83a:	f104 0314 	add.w	r3, r4, #20
 800c83e:	f016 021f 	ands.w	r2, r6, #31
 800c842:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c846:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c84a:	d025      	beq.n	800c898 <__lshift+0x98>
 800c84c:	f1c2 0e20 	rsb	lr, r2, #32
 800c850:	2000      	movs	r0, #0
 800c852:	681e      	ldr	r6, [r3, #0]
 800c854:	468a      	mov	sl, r1
 800c856:	4096      	lsls	r6, r2
 800c858:	4330      	orrs	r0, r6
 800c85a:	f84a 0b04 	str.w	r0, [sl], #4
 800c85e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c862:	459c      	cmp	ip, r3
 800c864:	fa20 f00e 	lsr.w	r0, r0, lr
 800c868:	d814      	bhi.n	800c894 <__lshift+0x94>
 800c86a:	6048      	str	r0, [r1, #4]
 800c86c:	b108      	cbz	r0, 800c872 <__lshift+0x72>
 800c86e:	f109 0502 	add.w	r5, r9, #2
 800c872:	3d01      	subs	r5, #1
 800c874:	4638      	mov	r0, r7
 800c876:	f8c8 5010 	str.w	r5, [r8, #16]
 800c87a:	4621      	mov	r1, r4
 800c87c:	f7ff fdf4 	bl	800c468 <_Bfree>
 800c880:	4640      	mov	r0, r8
 800c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c886:	3101      	adds	r1, #1
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	e7c7      	b.n	800c81c <__lshift+0x1c>
 800c88c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c890:	3301      	adds	r3, #1
 800c892:	e7cd      	b.n	800c830 <__lshift+0x30>
 800c894:	4651      	mov	r1, sl
 800c896:	e7dc      	b.n	800c852 <__lshift+0x52>
 800c898:	3904      	subs	r1, #4
 800c89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c89e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8a2:	459c      	cmp	ip, r3
 800c8a4:	d8f9      	bhi.n	800c89a <__lshift+0x9a>
 800c8a6:	e7e4      	b.n	800c872 <__lshift+0x72>

0800c8a8 <__mcmp>:
 800c8a8:	6903      	ldr	r3, [r0, #16]
 800c8aa:	690a      	ldr	r2, [r1, #16]
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	b530      	push	{r4, r5, lr}
 800c8b0:	d10c      	bne.n	800c8cc <__mcmp+0x24>
 800c8b2:	0092      	lsls	r2, r2, #2
 800c8b4:	3014      	adds	r0, #20
 800c8b6:	3114      	adds	r1, #20
 800c8b8:	1884      	adds	r4, r0, r2
 800c8ba:	4411      	add	r1, r2
 800c8bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8c4:	4295      	cmp	r5, r2
 800c8c6:	d003      	beq.n	800c8d0 <__mcmp+0x28>
 800c8c8:	d305      	bcc.n	800c8d6 <__mcmp+0x2e>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	bd30      	pop	{r4, r5, pc}
 800c8d0:	42a0      	cmp	r0, r4
 800c8d2:	d3f3      	bcc.n	800c8bc <__mcmp+0x14>
 800c8d4:	e7fa      	b.n	800c8cc <__mcmp+0x24>
 800c8d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8da:	e7f7      	b.n	800c8cc <__mcmp+0x24>

0800c8dc <__mdiff>:
 800c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e0:	460d      	mov	r5, r1
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	4614      	mov	r4, r2
 800c8ea:	f7ff ffdd 	bl	800c8a8 <__mcmp>
 800c8ee:	1e06      	subs	r6, r0, #0
 800c8f0:	d108      	bne.n	800c904 <__mdiff+0x28>
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff fd83 	bl	800c400 <_Balloc>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c904:	bfa4      	itt	ge
 800c906:	4623      	movge	r3, r4
 800c908:	462c      	movge	r4, r5
 800c90a:	4638      	mov	r0, r7
 800c90c:	6861      	ldr	r1, [r4, #4]
 800c90e:	bfa6      	itte	ge
 800c910:	461d      	movge	r5, r3
 800c912:	2600      	movge	r6, #0
 800c914:	2601      	movlt	r6, #1
 800c916:	f7ff fd73 	bl	800c400 <_Balloc>
 800c91a:	692b      	ldr	r3, [r5, #16]
 800c91c:	60c6      	str	r6, [r0, #12]
 800c91e:	6926      	ldr	r6, [r4, #16]
 800c920:	f105 0914 	add.w	r9, r5, #20
 800c924:	f104 0214 	add.w	r2, r4, #20
 800c928:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c92c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c930:	f100 0514 	add.w	r5, r0, #20
 800c934:	f04f 0e00 	mov.w	lr, #0
 800c938:	f852 ab04 	ldr.w	sl, [r2], #4
 800c93c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c940:	fa1e f18a 	uxtah	r1, lr, sl
 800c944:	b2a3      	uxth	r3, r4
 800c946:	1ac9      	subs	r1, r1, r3
 800c948:	0c23      	lsrs	r3, r4, #16
 800c94a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c94e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c952:	b289      	uxth	r1, r1
 800c954:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c958:	45c8      	cmp	r8, r9
 800c95a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c95e:	4694      	mov	ip, r2
 800c960:	f845 3b04 	str.w	r3, [r5], #4
 800c964:	d8e8      	bhi.n	800c938 <__mdiff+0x5c>
 800c966:	45bc      	cmp	ip, r7
 800c968:	d304      	bcc.n	800c974 <__mdiff+0x98>
 800c96a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c96e:	b183      	cbz	r3, 800c992 <__mdiff+0xb6>
 800c970:	6106      	str	r6, [r0, #16]
 800c972:	e7c5      	b.n	800c900 <__mdiff+0x24>
 800c974:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c978:	fa1e f381 	uxtah	r3, lr, r1
 800c97c:	141a      	asrs	r2, r3, #16
 800c97e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c982:	b29b      	uxth	r3, r3
 800c984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c988:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c98c:	f845 3b04 	str.w	r3, [r5], #4
 800c990:	e7e9      	b.n	800c966 <__mdiff+0x8a>
 800c992:	3e01      	subs	r6, #1
 800c994:	e7e9      	b.n	800c96a <__mdiff+0x8e>
	...

0800c998 <__ulp>:
 800c998:	4b12      	ldr	r3, [pc, #72]	; (800c9e4 <__ulp+0x4c>)
 800c99a:	ee10 2a90 	vmov	r2, s1
 800c99e:	401a      	ands	r2, r3
 800c9a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dd04      	ble.n	800c9b2 <__ulp+0x1a>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	ec41 0b10 	vmov	d0, r0, r1
 800c9b0:	4770      	bx	lr
 800c9b2:	425b      	negs	r3, r3
 800c9b4:	151b      	asrs	r3, r3, #20
 800c9b6:	2b13      	cmp	r3, #19
 800c9b8:	f04f 0000 	mov.w	r0, #0
 800c9bc:	f04f 0100 	mov.w	r1, #0
 800c9c0:	dc04      	bgt.n	800c9cc <__ulp+0x34>
 800c9c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c9c6:	fa42 f103 	asr.w	r1, r2, r3
 800c9ca:	e7ef      	b.n	800c9ac <__ulp+0x14>
 800c9cc:	3b14      	subs	r3, #20
 800c9ce:	2b1e      	cmp	r3, #30
 800c9d0:	f04f 0201 	mov.w	r2, #1
 800c9d4:	bfda      	itte	le
 800c9d6:	f1c3 031f 	rsble	r3, r3, #31
 800c9da:	fa02 f303 	lslle.w	r3, r2, r3
 800c9de:	4613      	movgt	r3, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	e7e3      	b.n	800c9ac <__ulp+0x14>
 800c9e4:	7ff00000 	.word	0x7ff00000

0800c9e8 <__b2d>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	6905      	ldr	r5, [r0, #16]
 800c9ec:	f100 0714 	add.w	r7, r0, #20
 800c9f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c9f4:	1f2e      	subs	r6, r5, #4
 800c9f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff fdc4 	bl	800c588 <__hi0bits>
 800ca00:	f1c0 0320 	rsb	r3, r0, #32
 800ca04:	280a      	cmp	r0, #10
 800ca06:	600b      	str	r3, [r1, #0]
 800ca08:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ca80 <__b2d+0x98>
 800ca0c:	dc14      	bgt.n	800ca38 <__b2d+0x50>
 800ca0e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca12:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca16:	42b7      	cmp	r7, r6
 800ca18:	ea41 030c 	orr.w	r3, r1, ip
 800ca1c:	bf34      	ite	cc
 800ca1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca22:	2100      	movcs	r1, #0
 800ca24:	3015      	adds	r0, #21
 800ca26:	fa04 f000 	lsl.w	r0, r4, r0
 800ca2a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca2e:	ea40 0201 	orr.w	r2, r0, r1
 800ca32:	ec43 2b10 	vmov	d0, r2, r3
 800ca36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca38:	42b7      	cmp	r7, r6
 800ca3a:	bf3a      	itte	cc
 800ca3c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca44:	2100      	movcs	r1, #0
 800ca46:	380b      	subs	r0, #11
 800ca48:	d015      	beq.n	800ca76 <__b2d+0x8e>
 800ca4a:	4084      	lsls	r4, r0
 800ca4c:	f1c0 0520 	rsb	r5, r0, #32
 800ca50:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ca54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ca58:	42be      	cmp	r6, r7
 800ca5a:	fa21 fc05 	lsr.w	ip, r1, r5
 800ca5e:	ea44 030c 	orr.w	r3, r4, ip
 800ca62:	bf8c      	ite	hi
 800ca64:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca68:	2400      	movls	r4, #0
 800ca6a:	fa01 f000 	lsl.w	r0, r1, r0
 800ca6e:	40ec      	lsrs	r4, r5
 800ca70:	ea40 0204 	orr.w	r2, r0, r4
 800ca74:	e7dd      	b.n	800ca32 <__b2d+0x4a>
 800ca76:	ea44 030c 	orr.w	r3, r4, ip
 800ca7a:	460a      	mov	r2, r1
 800ca7c:	e7d9      	b.n	800ca32 <__b2d+0x4a>
 800ca7e:	bf00      	nop
 800ca80:	3ff00000 	.word	0x3ff00000

0800ca84 <__d2b>:
 800ca84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca88:	460e      	mov	r6, r1
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	ec59 8b10 	vmov	r8, r9, d0
 800ca90:	4615      	mov	r5, r2
 800ca92:	f7ff fcb5 	bl	800c400 <_Balloc>
 800ca96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ca9a:	4607      	mov	r7, r0
 800ca9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800caa0:	bb34      	cbnz	r4, 800caf0 <__d2b+0x6c>
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	f1b8 0300 	subs.w	r3, r8, #0
 800caa8:	d027      	beq.n	800cafa <__d2b+0x76>
 800caaa:	a802      	add	r0, sp, #8
 800caac:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cab0:	f7ff fd89 	bl	800c5c6 <__lo0bits>
 800cab4:	9900      	ldr	r1, [sp, #0]
 800cab6:	b1f0      	cbz	r0, 800caf6 <__d2b+0x72>
 800cab8:	9a01      	ldr	r2, [sp, #4]
 800caba:	f1c0 0320 	rsb	r3, r0, #32
 800cabe:	fa02 f303 	lsl.w	r3, r2, r3
 800cac2:	430b      	orrs	r3, r1
 800cac4:	40c2      	lsrs	r2, r0
 800cac6:	617b      	str	r3, [r7, #20]
 800cac8:	9201      	str	r2, [sp, #4]
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	61bb      	str	r3, [r7, #24]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bf14      	ite	ne
 800cad2:	2102      	movne	r1, #2
 800cad4:	2101      	moveq	r1, #1
 800cad6:	6139      	str	r1, [r7, #16]
 800cad8:	b1c4      	cbz	r4, 800cb0c <__d2b+0x88>
 800cada:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cade:	4404      	add	r4, r0
 800cae0:	6034      	str	r4, [r6, #0]
 800cae2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cae6:	6028      	str	r0, [r5, #0]
 800cae8:	4638      	mov	r0, r7
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf4:	e7d5      	b.n	800caa2 <__d2b+0x1e>
 800caf6:	6179      	str	r1, [r7, #20]
 800caf8:	e7e7      	b.n	800caca <__d2b+0x46>
 800cafa:	a801      	add	r0, sp, #4
 800cafc:	f7ff fd63 	bl	800c5c6 <__lo0bits>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	2101      	movs	r1, #1
 800cb06:	6139      	str	r1, [r7, #16]
 800cb08:	3020      	adds	r0, #32
 800cb0a:	e7e5      	b.n	800cad8 <__d2b+0x54>
 800cb0c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cb10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb14:	6030      	str	r0, [r6, #0]
 800cb16:	6918      	ldr	r0, [r3, #16]
 800cb18:	f7ff fd36 	bl	800c588 <__hi0bits>
 800cb1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb20:	e7e1      	b.n	800cae6 <__d2b+0x62>

0800cb22 <__ratio>:
 800cb22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb26:	4688      	mov	r8, r1
 800cb28:	4669      	mov	r1, sp
 800cb2a:	4681      	mov	r9, r0
 800cb2c:	f7ff ff5c 	bl	800c9e8 <__b2d>
 800cb30:	a901      	add	r1, sp, #4
 800cb32:	4640      	mov	r0, r8
 800cb34:	ec57 6b10 	vmov	r6, r7, d0
 800cb38:	f7ff ff56 	bl	800c9e8 <__b2d>
 800cb3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb44:	eba3 0c02 	sub.w	ip, r3, r2
 800cb48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb52:	ec5b ab10 	vmov	sl, fp, d0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	bfce      	itee	gt
 800cb5a:	463a      	movgt	r2, r7
 800cb5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb60:	465a      	movle	r2, fp
 800cb62:	4659      	mov	r1, fp
 800cb64:	463d      	mov	r5, r7
 800cb66:	bfd4      	ite	le
 800cb68:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800cb6c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800cb70:	4630      	mov	r0, r6
 800cb72:	ee10 2a10 	vmov	r2, s0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7f3 fe87 	bl	800088c <__aeabi_ddiv>
 800cb7e:	ec41 0b10 	vmov	d0, r0, r1
 800cb82:	b003      	add	sp, #12
 800cb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb88 <__copybits>:
 800cb88:	3901      	subs	r1, #1
 800cb8a:	b510      	push	{r4, lr}
 800cb8c:	1149      	asrs	r1, r1, #5
 800cb8e:	6914      	ldr	r4, [r2, #16]
 800cb90:	3101      	adds	r1, #1
 800cb92:	f102 0314 	add.w	r3, r2, #20
 800cb96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb9e:	42a3      	cmp	r3, r4
 800cba0:	4602      	mov	r2, r0
 800cba2:	d303      	bcc.n	800cbac <__copybits+0x24>
 800cba4:	2300      	movs	r3, #0
 800cba6:	428a      	cmp	r2, r1
 800cba8:	d305      	bcc.n	800cbb6 <__copybits+0x2e>
 800cbaa:	bd10      	pop	{r4, pc}
 800cbac:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb0:	f840 2b04 	str.w	r2, [r0], #4
 800cbb4:	e7f3      	b.n	800cb9e <__copybits+0x16>
 800cbb6:	f842 3b04 	str.w	r3, [r2], #4
 800cbba:	e7f4      	b.n	800cba6 <__copybits+0x1e>

0800cbbc <__any_on>:
 800cbbc:	f100 0214 	add.w	r2, r0, #20
 800cbc0:	6900      	ldr	r0, [r0, #16]
 800cbc2:	114b      	asrs	r3, r1, #5
 800cbc4:	4298      	cmp	r0, r3
 800cbc6:	b510      	push	{r4, lr}
 800cbc8:	db11      	blt.n	800cbee <__any_on+0x32>
 800cbca:	dd0a      	ble.n	800cbe2 <__any_on+0x26>
 800cbcc:	f011 011f 	ands.w	r1, r1, #31
 800cbd0:	d007      	beq.n	800cbe2 <__any_on+0x26>
 800cbd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbd6:	fa24 f001 	lsr.w	r0, r4, r1
 800cbda:	fa00 f101 	lsl.w	r1, r0, r1
 800cbde:	428c      	cmp	r4, r1
 800cbe0:	d10b      	bne.n	800cbfa <__any_on+0x3e>
 800cbe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d803      	bhi.n	800cbf2 <__any_on+0x36>
 800cbea:	2000      	movs	r0, #0
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	4603      	mov	r3, r0
 800cbf0:	e7f7      	b.n	800cbe2 <__any_on+0x26>
 800cbf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	d0f5      	beq.n	800cbe6 <__any_on+0x2a>
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	e7f6      	b.n	800cbec <__any_on+0x30>

0800cbfe <_calloc_r>:
 800cbfe:	b538      	push	{r3, r4, r5, lr}
 800cc00:	fb02 f401 	mul.w	r4, r2, r1
 800cc04:	4621      	mov	r1, r4
 800cc06:	f000 f857 	bl	800ccb8 <_malloc_r>
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	b118      	cbz	r0, 800cc16 <_calloc_r+0x18>
 800cc0e:	4622      	mov	r2, r4
 800cc10:	2100      	movs	r1, #0
 800cc12:	f7fc fd02 	bl	800961a <memset>
 800cc16:	4628      	mov	r0, r5
 800cc18:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cc1c <_free_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4605      	mov	r5, r0
 800cc20:	2900      	cmp	r1, #0
 800cc22:	d045      	beq.n	800ccb0 <_free_r+0x94>
 800cc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc28:	1f0c      	subs	r4, r1, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bfb8      	it	lt
 800cc2e:	18e4      	addlt	r4, r4, r3
 800cc30:	f000 fa36 	bl	800d0a0 <__malloc_lock>
 800cc34:	4a1f      	ldr	r2, [pc, #124]	; (800ccb4 <_free_r+0x98>)
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	4610      	mov	r0, r2
 800cc3a:	b933      	cbnz	r3, 800cc4a <_free_r+0x2e>
 800cc3c:	6063      	str	r3, [r4, #4]
 800cc3e:	6014      	str	r4, [r2, #0]
 800cc40:	4628      	mov	r0, r5
 800cc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc46:	f000 ba2c 	b.w	800d0a2 <__malloc_unlock>
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	d90c      	bls.n	800cc68 <_free_r+0x4c>
 800cc4e:	6821      	ldr	r1, [r4, #0]
 800cc50:	1862      	adds	r2, r4, r1
 800cc52:	4293      	cmp	r3, r2
 800cc54:	bf04      	itt	eq
 800cc56:	681a      	ldreq	r2, [r3, #0]
 800cc58:	685b      	ldreq	r3, [r3, #4]
 800cc5a:	6063      	str	r3, [r4, #4]
 800cc5c:	bf04      	itt	eq
 800cc5e:	1852      	addeq	r2, r2, r1
 800cc60:	6022      	streq	r2, [r4, #0]
 800cc62:	6004      	str	r4, [r0, #0]
 800cc64:	e7ec      	b.n	800cc40 <_free_r+0x24>
 800cc66:	4613      	mov	r3, r2
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	b10a      	cbz	r2, 800cc70 <_free_r+0x54>
 800cc6c:	42a2      	cmp	r2, r4
 800cc6e:	d9fa      	bls.n	800cc66 <_free_r+0x4a>
 800cc70:	6819      	ldr	r1, [r3, #0]
 800cc72:	1858      	adds	r0, r3, r1
 800cc74:	42a0      	cmp	r0, r4
 800cc76:	d10b      	bne.n	800cc90 <_free_r+0x74>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	4401      	add	r1, r0
 800cc7c:	1858      	adds	r0, r3, r1
 800cc7e:	4282      	cmp	r2, r0
 800cc80:	6019      	str	r1, [r3, #0]
 800cc82:	d1dd      	bne.n	800cc40 <_free_r+0x24>
 800cc84:	6810      	ldr	r0, [r2, #0]
 800cc86:	6852      	ldr	r2, [r2, #4]
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	4401      	add	r1, r0
 800cc8c:	6019      	str	r1, [r3, #0]
 800cc8e:	e7d7      	b.n	800cc40 <_free_r+0x24>
 800cc90:	d902      	bls.n	800cc98 <_free_r+0x7c>
 800cc92:	230c      	movs	r3, #12
 800cc94:	602b      	str	r3, [r5, #0]
 800cc96:	e7d3      	b.n	800cc40 <_free_r+0x24>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	1821      	adds	r1, r4, r0
 800cc9c:	428a      	cmp	r2, r1
 800cc9e:	bf04      	itt	eq
 800cca0:	6811      	ldreq	r1, [r2, #0]
 800cca2:	6852      	ldreq	r2, [r2, #4]
 800cca4:	6062      	str	r2, [r4, #4]
 800cca6:	bf04      	itt	eq
 800cca8:	1809      	addeq	r1, r1, r0
 800ccaa:	6021      	streq	r1, [r4, #0]
 800ccac:	605c      	str	r4, [r3, #4]
 800ccae:	e7c7      	b.n	800cc40 <_free_r+0x24>
 800ccb0:	bd38      	pop	{r3, r4, r5, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000421c 	.word	0x2000421c

0800ccb8 <_malloc_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	1ccd      	adds	r5, r1, #3
 800ccbc:	f025 0503 	bic.w	r5, r5, #3
 800ccc0:	3508      	adds	r5, #8
 800ccc2:	2d0c      	cmp	r5, #12
 800ccc4:	bf38      	it	cc
 800ccc6:	250c      	movcc	r5, #12
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	4606      	mov	r6, r0
 800cccc:	db01      	blt.n	800ccd2 <_malloc_r+0x1a>
 800ccce:	42a9      	cmp	r1, r5
 800ccd0:	d903      	bls.n	800ccda <_malloc_r+0x22>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
 800ccda:	f000 f9e1 	bl	800d0a0 <__malloc_lock>
 800ccde:	4a21      	ldr	r2, [pc, #132]	; (800cd64 <_malloc_r+0xac>)
 800cce0:	6814      	ldr	r4, [r2, #0]
 800cce2:	4621      	mov	r1, r4
 800cce4:	b991      	cbnz	r1, 800cd0c <_malloc_r+0x54>
 800cce6:	4c20      	ldr	r4, [pc, #128]	; (800cd68 <_malloc_r+0xb0>)
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	b91b      	cbnz	r3, 800ccf4 <_malloc_r+0x3c>
 800ccec:	4630      	mov	r0, r6
 800ccee:	f000 f98f 	bl	800d010 <_sbrk_r>
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f000 f98a 	bl	800d010 <_sbrk_r>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d124      	bne.n	800cd4a <_malloc_r+0x92>
 800cd00:	230c      	movs	r3, #12
 800cd02:	6033      	str	r3, [r6, #0]
 800cd04:	4630      	mov	r0, r6
 800cd06:	f000 f9cc 	bl	800d0a2 <__malloc_unlock>
 800cd0a:	e7e4      	b.n	800ccd6 <_malloc_r+0x1e>
 800cd0c:	680b      	ldr	r3, [r1, #0]
 800cd0e:	1b5b      	subs	r3, r3, r5
 800cd10:	d418      	bmi.n	800cd44 <_malloc_r+0x8c>
 800cd12:	2b0b      	cmp	r3, #11
 800cd14:	d90f      	bls.n	800cd36 <_malloc_r+0x7e>
 800cd16:	600b      	str	r3, [r1, #0]
 800cd18:	50cd      	str	r5, [r1, r3]
 800cd1a:	18cc      	adds	r4, r1, r3
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 f9c0 	bl	800d0a2 <__malloc_unlock>
 800cd22:	f104 000b 	add.w	r0, r4, #11
 800cd26:	1d23      	adds	r3, r4, #4
 800cd28:	f020 0007 	bic.w	r0, r0, #7
 800cd2c:	1ac3      	subs	r3, r0, r3
 800cd2e:	d0d3      	beq.n	800ccd8 <_malloc_r+0x20>
 800cd30:	425a      	negs	r2, r3
 800cd32:	50e2      	str	r2, [r4, r3]
 800cd34:	e7d0      	b.n	800ccd8 <_malloc_r+0x20>
 800cd36:	428c      	cmp	r4, r1
 800cd38:	684b      	ldr	r3, [r1, #4]
 800cd3a:	bf16      	itet	ne
 800cd3c:	6063      	strne	r3, [r4, #4]
 800cd3e:	6013      	streq	r3, [r2, #0]
 800cd40:	460c      	movne	r4, r1
 800cd42:	e7eb      	b.n	800cd1c <_malloc_r+0x64>
 800cd44:	460c      	mov	r4, r1
 800cd46:	6849      	ldr	r1, [r1, #4]
 800cd48:	e7cc      	b.n	800cce4 <_malloc_r+0x2c>
 800cd4a:	1cc4      	adds	r4, r0, #3
 800cd4c:	f024 0403 	bic.w	r4, r4, #3
 800cd50:	42a0      	cmp	r0, r4
 800cd52:	d005      	beq.n	800cd60 <_malloc_r+0xa8>
 800cd54:	1a21      	subs	r1, r4, r0
 800cd56:	4630      	mov	r0, r6
 800cd58:	f000 f95a 	bl	800d010 <_sbrk_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d0cf      	beq.n	800cd00 <_malloc_r+0x48>
 800cd60:	6025      	str	r5, [r4, #0]
 800cd62:	e7db      	b.n	800cd1c <_malloc_r+0x64>
 800cd64:	2000421c 	.word	0x2000421c
 800cd68:	20004220 	.word	0x20004220

0800cd6c <__ssputs_r>:
 800cd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd70:	688e      	ldr	r6, [r1, #8]
 800cd72:	429e      	cmp	r6, r3
 800cd74:	4682      	mov	sl, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	4690      	mov	r8, r2
 800cd7a:	4699      	mov	r9, r3
 800cd7c:	d837      	bhi.n	800cdee <__ssputs_r+0x82>
 800cd7e:	898a      	ldrh	r2, [r1, #12]
 800cd80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd84:	d031      	beq.n	800cdea <__ssputs_r+0x7e>
 800cd86:	6825      	ldr	r5, [r4, #0]
 800cd88:	6909      	ldr	r1, [r1, #16]
 800cd8a:	1a6f      	subs	r7, r5, r1
 800cd8c:	6965      	ldr	r5, [r4, #20]
 800cd8e:	2302      	movs	r3, #2
 800cd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd94:	fb95 f5f3 	sdiv	r5, r5, r3
 800cd98:	f109 0301 	add.w	r3, r9, #1
 800cd9c:	443b      	add	r3, r7
 800cd9e:	429d      	cmp	r5, r3
 800cda0:	bf38      	it	cc
 800cda2:	461d      	movcc	r5, r3
 800cda4:	0553      	lsls	r3, r2, #21
 800cda6:	d530      	bpl.n	800ce0a <__ssputs_r+0x9e>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f7ff ff85 	bl	800ccb8 <_malloc_r>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	b950      	cbnz	r0, 800cdc8 <__ssputs_r+0x5c>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	f8ca 3000 	str.w	r3, [sl]
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	463a      	mov	r2, r7
 800cdca:	6921      	ldr	r1, [r4, #16]
 800cdcc:	f7fc fc1a 	bl	8009604 <memcpy>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdda:	81a3      	strh	r3, [r4, #12]
 800cddc:	6126      	str	r6, [r4, #16]
 800cdde:	6165      	str	r5, [r4, #20]
 800cde0:	443e      	add	r6, r7
 800cde2:	1bed      	subs	r5, r5, r7
 800cde4:	6026      	str	r6, [r4, #0]
 800cde6:	60a5      	str	r5, [r4, #8]
 800cde8:	464e      	mov	r6, r9
 800cdea:	454e      	cmp	r6, r9
 800cdec:	d900      	bls.n	800cdf0 <__ssputs_r+0x84>
 800cdee:	464e      	mov	r6, r9
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	4641      	mov	r1, r8
 800cdf4:	6820      	ldr	r0, [r4, #0]
 800cdf6:	f000 f93a 	bl	800d06e <memmove>
 800cdfa:	68a3      	ldr	r3, [r4, #8]
 800cdfc:	1b9b      	subs	r3, r3, r6
 800cdfe:	60a3      	str	r3, [r4, #8]
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	441e      	add	r6, r3
 800ce04:	6026      	str	r6, [r4, #0]
 800ce06:	2000      	movs	r0, #0
 800ce08:	e7dc      	b.n	800cdc4 <__ssputs_r+0x58>
 800ce0a:	462a      	mov	r2, r5
 800ce0c:	f000 f94a 	bl	800d0a4 <_realloc_r>
 800ce10:	4606      	mov	r6, r0
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d1e2      	bne.n	800cddc <__ssputs_r+0x70>
 800ce16:	6921      	ldr	r1, [r4, #16]
 800ce18:	4650      	mov	r0, sl
 800ce1a:	f7ff feff 	bl	800cc1c <_free_r>
 800ce1e:	e7c8      	b.n	800cdb2 <__ssputs_r+0x46>

0800ce20 <_svfiprintf_r>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	461d      	mov	r5, r3
 800ce26:	898b      	ldrh	r3, [r1, #12]
 800ce28:	061f      	lsls	r7, r3, #24
 800ce2a:	b09d      	sub	sp, #116	; 0x74
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	460c      	mov	r4, r1
 800ce30:	4616      	mov	r6, r2
 800ce32:	d50f      	bpl.n	800ce54 <_svfiprintf_r+0x34>
 800ce34:	690b      	ldr	r3, [r1, #16]
 800ce36:	b96b      	cbnz	r3, 800ce54 <_svfiprintf_r+0x34>
 800ce38:	2140      	movs	r1, #64	; 0x40
 800ce3a:	f7ff ff3d 	bl	800ccb8 <_malloc_r>
 800ce3e:	6020      	str	r0, [r4, #0]
 800ce40:	6120      	str	r0, [r4, #16]
 800ce42:	b928      	cbnz	r0, 800ce50 <_svfiprintf_r+0x30>
 800ce44:	230c      	movs	r3, #12
 800ce46:	f8c8 3000 	str.w	r3, [r8]
 800ce4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce4e:	e0c8      	b.n	800cfe2 <_svfiprintf_r+0x1c2>
 800ce50:	2340      	movs	r3, #64	; 0x40
 800ce52:	6163      	str	r3, [r4, #20]
 800ce54:	2300      	movs	r3, #0
 800ce56:	9309      	str	r3, [sp, #36]	; 0x24
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce5e:	2330      	movs	r3, #48	; 0x30
 800ce60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce64:	9503      	str	r5, [sp, #12]
 800ce66:	f04f 0b01 	mov.w	fp, #1
 800ce6a:	4637      	mov	r7, r6
 800ce6c:	463d      	mov	r5, r7
 800ce6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce72:	b10b      	cbz	r3, 800ce78 <_svfiprintf_r+0x58>
 800ce74:	2b25      	cmp	r3, #37	; 0x25
 800ce76:	d13e      	bne.n	800cef6 <_svfiprintf_r+0xd6>
 800ce78:	ebb7 0a06 	subs.w	sl, r7, r6
 800ce7c:	d00b      	beq.n	800ce96 <_svfiprintf_r+0x76>
 800ce7e:	4653      	mov	r3, sl
 800ce80:	4632      	mov	r2, r6
 800ce82:	4621      	mov	r1, r4
 800ce84:	4640      	mov	r0, r8
 800ce86:	f7ff ff71 	bl	800cd6c <__ssputs_r>
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f000 80a4 	beq.w	800cfd8 <_svfiprintf_r+0x1b8>
 800ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce92:	4453      	add	r3, sl
 800ce94:	9309      	str	r3, [sp, #36]	; 0x24
 800ce96:	783b      	ldrb	r3, [r7, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f000 809d 	beq.w	800cfd8 <_svfiprintf_r+0x1b8>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	9307      	str	r3, [sp, #28]
 800ceac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceb0:	931a      	str	r3, [sp, #104]	; 0x68
 800ceb2:	462f      	mov	r7, r5
 800ceb4:	2205      	movs	r2, #5
 800ceb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ceba:	4850      	ldr	r0, [pc, #320]	; (800cffc <_svfiprintf_r+0x1dc>)
 800cebc:	f7f3 f9b0 	bl	8000220 <memchr>
 800cec0:	9b04      	ldr	r3, [sp, #16]
 800cec2:	b9d0      	cbnz	r0, 800cefa <_svfiprintf_r+0xda>
 800cec4:	06d9      	lsls	r1, r3, #27
 800cec6:	bf44      	itt	mi
 800cec8:	2220      	movmi	r2, #32
 800ceca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cece:	071a      	lsls	r2, r3, #28
 800ced0:	bf44      	itt	mi
 800ced2:	222b      	movmi	r2, #43	; 0x2b
 800ced4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ced8:	782a      	ldrb	r2, [r5, #0]
 800ceda:	2a2a      	cmp	r2, #42	; 0x2a
 800cedc:	d015      	beq.n	800cf0a <_svfiprintf_r+0xea>
 800cede:	9a07      	ldr	r2, [sp, #28]
 800cee0:	462f      	mov	r7, r5
 800cee2:	2000      	movs	r0, #0
 800cee4:	250a      	movs	r5, #10
 800cee6:	4639      	mov	r1, r7
 800cee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceec:	3b30      	subs	r3, #48	; 0x30
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	d94d      	bls.n	800cf8e <_svfiprintf_r+0x16e>
 800cef2:	b1b8      	cbz	r0, 800cf24 <_svfiprintf_r+0x104>
 800cef4:	e00f      	b.n	800cf16 <_svfiprintf_r+0xf6>
 800cef6:	462f      	mov	r7, r5
 800cef8:	e7b8      	b.n	800ce6c <_svfiprintf_r+0x4c>
 800cefa:	4a40      	ldr	r2, [pc, #256]	; (800cffc <_svfiprintf_r+0x1dc>)
 800cefc:	1a80      	subs	r0, r0, r2
 800cefe:	fa0b f000 	lsl.w	r0, fp, r0
 800cf02:	4318      	orrs	r0, r3
 800cf04:	9004      	str	r0, [sp, #16]
 800cf06:	463d      	mov	r5, r7
 800cf08:	e7d3      	b.n	800ceb2 <_svfiprintf_r+0x92>
 800cf0a:	9a03      	ldr	r2, [sp, #12]
 800cf0c:	1d11      	adds	r1, r2, #4
 800cf0e:	6812      	ldr	r2, [r2, #0]
 800cf10:	9103      	str	r1, [sp, #12]
 800cf12:	2a00      	cmp	r2, #0
 800cf14:	db01      	blt.n	800cf1a <_svfiprintf_r+0xfa>
 800cf16:	9207      	str	r2, [sp, #28]
 800cf18:	e004      	b.n	800cf24 <_svfiprintf_r+0x104>
 800cf1a:	4252      	negs	r2, r2
 800cf1c:	f043 0302 	orr.w	r3, r3, #2
 800cf20:	9207      	str	r2, [sp, #28]
 800cf22:	9304      	str	r3, [sp, #16]
 800cf24:	783b      	ldrb	r3, [r7, #0]
 800cf26:	2b2e      	cmp	r3, #46	; 0x2e
 800cf28:	d10c      	bne.n	800cf44 <_svfiprintf_r+0x124>
 800cf2a:	787b      	ldrb	r3, [r7, #1]
 800cf2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf2e:	d133      	bne.n	800cf98 <_svfiprintf_r+0x178>
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	1d1a      	adds	r2, r3, #4
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	9203      	str	r2, [sp, #12]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	bfb8      	it	lt
 800cf3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf40:	3702      	adds	r7, #2
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	4d2e      	ldr	r5, [pc, #184]	; (800d000 <_svfiprintf_r+0x1e0>)
 800cf46:	7839      	ldrb	r1, [r7, #0]
 800cf48:	2203      	movs	r2, #3
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7f3 f968 	bl	8000220 <memchr>
 800cf50:	b138      	cbz	r0, 800cf62 <_svfiprintf_r+0x142>
 800cf52:	2340      	movs	r3, #64	; 0x40
 800cf54:	1b40      	subs	r0, r0, r5
 800cf56:	fa03 f000 	lsl.w	r0, r3, r0
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	4303      	orrs	r3, r0
 800cf5e:	3701      	adds	r7, #1
 800cf60:	9304      	str	r3, [sp, #16]
 800cf62:	7839      	ldrb	r1, [r7, #0]
 800cf64:	4827      	ldr	r0, [pc, #156]	; (800d004 <_svfiprintf_r+0x1e4>)
 800cf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf6a:	2206      	movs	r2, #6
 800cf6c:	1c7e      	adds	r6, r7, #1
 800cf6e:	f7f3 f957 	bl	8000220 <memchr>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d038      	beq.n	800cfe8 <_svfiprintf_r+0x1c8>
 800cf76:	4b24      	ldr	r3, [pc, #144]	; (800d008 <_svfiprintf_r+0x1e8>)
 800cf78:	bb13      	cbnz	r3, 800cfc0 <_svfiprintf_r+0x1a0>
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	3307      	adds	r3, #7
 800cf7e:	f023 0307 	bic.w	r3, r3, #7
 800cf82:	3308      	adds	r3, #8
 800cf84:	9303      	str	r3, [sp, #12]
 800cf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf88:	444b      	add	r3, r9
 800cf8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8c:	e76d      	b.n	800ce6a <_svfiprintf_r+0x4a>
 800cf8e:	fb05 3202 	mla	r2, r5, r2, r3
 800cf92:	2001      	movs	r0, #1
 800cf94:	460f      	mov	r7, r1
 800cf96:	e7a6      	b.n	800cee6 <_svfiprintf_r+0xc6>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	3701      	adds	r7, #1
 800cf9c:	9305      	str	r3, [sp, #20]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	250a      	movs	r5, #10
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa8:	3a30      	subs	r2, #48	; 0x30
 800cfaa:	2a09      	cmp	r2, #9
 800cfac:	d903      	bls.n	800cfb6 <_svfiprintf_r+0x196>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c8      	beq.n	800cf44 <_svfiprintf_r+0x124>
 800cfb2:	9105      	str	r1, [sp, #20]
 800cfb4:	e7c6      	b.n	800cf44 <_svfiprintf_r+0x124>
 800cfb6:	fb05 2101 	mla	r1, r5, r1, r2
 800cfba:	2301      	movs	r3, #1
 800cfbc:	4607      	mov	r7, r0
 800cfbe:	e7f0      	b.n	800cfa2 <_svfiprintf_r+0x182>
 800cfc0:	ab03      	add	r3, sp, #12
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4b11      	ldr	r3, [pc, #68]	; (800d00c <_svfiprintf_r+0x1ec>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	4640      	mov	r0, r8
 800cfcc:	f7fc fbc2 	bl	8009754 <_printf_float>
 800cfd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cfd4:	4681      	mov	r9, r0
 800cfd6:	d1d6      	bne.n	800cf86 <_svfiprintf_r+0x166>
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	065b      	lsls	r3, r3, #25
 800cfdc:	f53f af35 	bmi.w	800ce4a <_svfiprintf_r+0x2a>
 800cfe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe2:	b01d      	add	sp, #116	; 0x74
 800cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe8:	ab03      	add	r3, sp, #12
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4622      	mov	r2, r4
 800cfee:	4b07      	ldr	r3, [pc, #28]	; (800d00c <_svfiprintf_r+0x1ec>)
 800cff0:	a904      	add	r1, sp, #16
 800cff2:	4640      	mov	r0, r8
 800cff4:	f7fc fe64 	bl	8009cc0 <_printf_i>
 800cff8:	e7ea      	b.n	800cfd0 <_svfiprintf_r+0x1b0>
 800cffa:	bf00      	nop
 800cffc:	0800fc7c 	.word	0x0800fc7c
 800d000:	0800fc82 	.word	0x0800fc82
 800d004:	0800fc86 	.word	0x0800fc86
 800d008:	08009755 	.word	0x08009755
 800d00c:	0800cd6d 	.word	0x0800cd6d

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4c06      	ldr	r4, [pc, #24]	; (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4605      	mov	r5, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	f7fc fa3e 	bl	800949c <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	602b      	str	r3, [r5, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20004868 	.word	0x20004868

0800d030 <strncmp>:
 800d030:	b510      	push	{r4, lr}
 800d032:	b16a      	cbz	r2, 800d050 <strncmp+0x20>
 800d034:	3901      	subs	r1, #1
 800d036:	1884      	adds	r4, r0, r2
 800d038:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d03c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d040:	4293      	cmp	r3, r2
 800d042:	d103      	bne.n	800d04c <strncmp+0x1c>
 800d044:	42a0      	cmp	r0, r4
 800d046:	d001      	beq.n	800d04c <strncmp+0x1c>
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f5      	bne.n	800d038 <strncmp+0x8>
 800d04c:	1a98      	subs	r0, r3, r2
 800d04e:	bd10      	pop	{r4, pc}
 800d050:	4610      	mov	r0, r2
 800d052:	e7fc      	b.n	800d04e <strncmp+0x1e>

0800d054 <__ascii_wctomb>:
 800d054:	b149      	cbz	r1, 800d06a <__ascii_wctomb+0x16>
 800d056:	2aff      	cmp	r2, #255	; 0xff
 800d058:	bf85      	ittet	hi
 800d05a:	238a      	movhi	r3, #138	; 0x8a
 800d05c:	6003      	strhi	r3, [r0, #0]
 800d05e:	700a      	strbls	r2, [r1, #0]
 800d060:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d064:	bf98      	it	ls
 800d066:	2001      	movls	r0, #1
 800d068:	4770      	bx	lr
 800d06a:	4608      	mov	r0, r1
 800d06c:	4770      	bx	lr

0800d06e <memmove>:
 800d06e:	4288      	cmp	r0, r1
 800d070:	b510      	push	{r4, lr}
 800d072:	eb01 0302 	add.w	r3, r1, r2
 800d076:	d807      	bhi.n	800d088 <memmove+0x1a>
 800d078:	1e42      	subs	r2, r0, #1
 800d07a:	4299      	cmp	r1, r3
 800d07c:	d00a      	beq.n	800d094 <memmove+0x26>
 800d07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d082:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d086:	e7f8      	b.n	800d07a <memmove+0xc>
 800d088:	4283      	cmp	r3, r0
 800d08a:	d9f5      	bls.n	800d078 <memmove+0xa>
 800d08c:	1881      	adds	r1, r0, r2
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	42d3      	cmn	r3, r2
 800d092:	d100      	bne.n	800d096 <memmove+0x28>
 800d094:	bd10      	pop	{r4, pc}
 800d096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d09a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d09e:	e7f7      	b.n	800d090 <memmove+0x22>

0800d0a0 <__malloc_lock>:
 800d0a0:	4770      	bx	lr

0800d0a2 <__malloc_unlock>:
 800d0a2:	4770      	bx	lr

0800d0a4 <_realloc_r>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	460e      	mov	r6, r1
 800d0ac:	b921      	cbnz	r1, 800d0b8 <_realloc_r+0x14>
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d0b4:	f7ff be00 	b.w	800ccb8 <_malloc_r>
 800d0b8:	b922      	cbnz	r2, 800d0c4 <_realloc_r+0x20>
 800d0ba:	f7ff fdaf 	bl	800cc1c <_free_r>
 800d0be:	4625      	mov	r5, r4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0c4:	f000 f814 	bl	800d0f0 <_malloc_usable_size_r>
 800d0c8:	42a0      	cmp	r0, r4
 800d0ca:	d20f      	bcs.n	800d0ec <_realloc_r+0x48>
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	f7ff fdf2 	bl	800ccb8 <_malloc_r>
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0f2      	beq.n	800d0c0 <_realloc_r+0x1c>
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4622      	mov	r2, r4
 800d0de:	f7fc fa91 	bl	8009604 <memcpy>
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f7ff fd99 	bl	800cc1c <_free_r>
 800d0ea:	e7e9      	b.n	800d0c0 <_realloc_r+0x1c>
 800d0ec:	4635      	mov	r5, r6
 800d0ee:	e7e7      	b.n	800d0c0 <_realloc_r+0x1c>

0800d0f0 <_malloc_usable_size_r>:
 800d0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f4:	1f18      	subs	r0, r3, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bfbc      	itt	lt
 800d0fa:	580b      	ldrlt	r3, [r1, r0]
 800d0fc:	18c0      	addlt	r0, r0, r3
 800d0fe:	4770      	bx	lr

0800d100 <round>:
 800d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d102:	ec57 6b10 	vmov	r6, r7, d0
 800d106:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800d10a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800d10e:	2c13      	cmp	r4, #19
 800d110:	463b      	mov	r3, r7
 800d112:	463d      	mov	r5, r7
 800d114:	dc17      	bgt.n	800d146 <round+0x46>
 800d116:	2c00      	cmp	r4, #0
 800d118:	da09      	bge.n	800d12e <round+0x2e>
 800d11a:	3401      	adds	r4, #1
 800d11c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800d120:	d103      	bne.n	800d12a <round+0x2a>
 800d122:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d126:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d12a:	2100      	movs	r1, #0
 800d12c:	e02c      	b.n	800d188 <round+0x88>
 800d12e:	4a18      	ldr	r2, [pc, #96]	; (800d190 <round+0x90>)
 800d130:	4122      	asrs	r2, r4
 800d132:	4217      	tst	r7, r2
 800d134:	d100      	bne.n	800d138 <round+0x38>
 800d136:	b19e      	cbz	r6, 800d160 <round+0x60>
 800d138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d13c:	4123      	asrs	r3, r4
 800d13e:	442b      	add	r3, r5
 800d140:	ea23 0302 	bic.w	r3, r3, r2
 800d144:	e7f1      	b.n	800d12a <round+0x2a>
 800d146:	2c33      	cmp	r4, #51	; 0x33
 800d148:	dd0d      	ble.n	800d166 <round+0x66>
 800d14a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d14e:	d107      	bne.n	800d160 <round+0x60>
 800d150:	4630      	mov	r0, r6
 800d152:	4639      	mov	r1, r7
 800d154:	ee10 2a10 	vmov	r2, s0
 800d158:	f7f3 f8b8 	bl	80002cc <__adddf3>
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	ec47 6b10 	vmov	d0, r6, r7
 800d164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d166:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800d16a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d16e:	40d0      	lsrs	r0, r2
 800d170:	4206      	tst	r6, r0
 800d172:	d0f5      	beq.n	800d160 <round+0x60>
 800d174:	2201      	movs	r2, #1
 800d176:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d17a:	fa02 f404 	lsl.w	r4, r2, r4
 800d17e:	1931      	adds	r1, r6, r4
 800d180:	bf28      	it	cs
 800d182:	189b      	addcs	r3, r3, r2
 800d184:	ea21 0100 	bic.w	r1, r1, r0
 800d188:	461f      	mov	r7, r3
 800d18a:	460e      	mov	r6, r1
 800d18c:	e7e8      	b.n	800d160 <round+0x60>
 800d18e:	bf00      	nop
 800d190:	000fffff 	.word	0x000fffff

0800d194 <_init>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_fini>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr
