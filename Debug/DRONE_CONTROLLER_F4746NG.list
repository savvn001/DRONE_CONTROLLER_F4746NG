
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800a070  0800a070  0001a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f0  0800a7f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f8  0800a7f8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a800  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001e8  0800a9e8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  0800a9e8  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020172  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003896  00000000  00000000  0004038a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001057b  00000000  00000000  00043c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001770  00000000  00000000  000541a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001640  00000000  00000000  00055910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00029326  00000000  00000000  00056f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014005  00000000  00000000  00080276  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fe619  00000000  00000000  0009427b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00192894  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f08  00000000  00000000  00192910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a054 	.word	0x0800a054

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a054 	.word	0x0800a054

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 0;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000fc8:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8000fca:	f000 feed 	bl	8001da8 <DWT_Delay>

}
 8000fce:	bd08      	pop	{r3, pc}

08000fd0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fd0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fd2:	b938      	cbnz	r0, 8000fe4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <NRF24_csn+0x24>)
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <NRF24_csn+0x28>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 fe5e 	bl	8002c9e <HAL_GPIO_WritePin>
}
 8000fe2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <NRF24_csn+0x24>)
 8000fe8:	8819      	ldrh	r1, [r3, #0]
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <NRF24_csn+0x28>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	f001 fe56 	bl	8002c9e <HAL_GPIO_WritePin>
 8000ff2:	e7f6      	b.n	8000fe2 <NRF24_csn+0x12>
 8000ff4:	2000020a 	.word	0x2000020a
 8000ff8:	2000020c 	.word	0x2000020c

08000ffc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000ffc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ffe:	b938      	cbnz	r0, 8001010 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <NRF24_ce+0x24>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <NRF24_ce+0x28>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f001 fe48 	bl	8002c9e <HAL_GPIO_WritePin>
}
 800100e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	4b03      	ldr	r3, [pc, #12]	; (8001020 <NRF24_ce+0x24>)
 8001014:	8819      	ldrh	r1, [r3, #0]
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <NRF24_ce+0x28>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f001 fe40 	bl	8002c9e <HAL_GPIO_WritePin>
 800101e:	e7f6      	b.n	800100e <NRF24_ce+0x12>
 8001020:	20000208 	.word	0x20000208
 8001024:	2000020c 	.word	0x2000020c

08001028 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ffce 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001034:	f004 041f 	and.w	r4, r4, #31
 8001038:	a902      	add	r1, sp, #8
 800103a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <NRF24_read_register+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <NRF24_read_register+0x5c>)
 8001048:	f002 ffd2 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <NRF24_read_register+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0fb      	beq.n	800104c <NRF24_read_register+0x24>
	}
	//Receive data
	SPI_RxCplt = 0;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <NRF24_read_register+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, &spiBuf[1], 1);
 800105a:	2201      	movs	r2, #1
 800105c:	f10d 0105 	add.w	r1, sp, #5
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <NRF24_read_register+0x5c>)
 8001062:	f003 f897 	bl	8004194 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <NRF24_read_register+0x60>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0fb      	beq.n	8001066 <NRF24_read_register+0x3e>
	}
	retData = spiBuf[1];
 800106e:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ffac 	bl	8000fd0 <NRF24_csn>
	return retData;
}
 8001078:	4620      	mov	r0, r4
 800107a:	b002      	add	sp, #8
 800107c:	bd10      	pop	{r4, pc}
 800107e:	bf00      	nop
 8001080:	20000205 	.word	0x20000205
 8001084:	200002c4 	.word	0x200002c4
 8001088:	20000204 	.word	0x20000204

0800108c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff9a 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800109c:	f004 041f 	and.w	r4, r4, #31
 80010a0:	a902      	add	r1, sp, #8
 80010a2:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	SPI_TxCplt = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <NRF24_read_registerN+0x54>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <NRF24_read_registerN+0x58>)
 80010b0:	f002 ff9e 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <NRF24_read_registerN+0x54>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0fb      	beq.n	80010b4 <NRF24_read_registerN+0x28>
	}
	//Receive data
	SPI_RxCplt = 0;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <NRF24_read_registerN+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, len);
 80010c2:	4632      	mov	r2, r6
 80010c4:	4629      	mov	r1, r5
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <NRF24_read_registerN+0x58>)
 80010c8:	f003 f864 	bl	8004194 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <NRF24_read_registerN+0x5c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0fb      	beq.n	80010cc <NRF24_read_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff7b 	bl	8000fd0 <NRF24_csn>
}
 80010da:	b002      	add	sp, #8
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
 80010de:	bf00      	nop
 80010e0:	20000205 	.word	0x20000205
 80010e4:	200002c4 	.word	0x200002c4
 80010e8:	20000204 	.word	0x20000204

080010ec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010ec:	b530      	push	{r4, r5, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	4604      	mov	r4, r0
 80010f2:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff6b 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010fa:	f044 0420 	orr.w	r4, r4, #32
 80010fe:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8001102:	f88d 5005 	strb.w	r5, [sp, #5]
	SPI_TxCplt = 0;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <NRF24_write_register+0x3c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 2);
 800110c:	2202      	movs	r2, #2
 800110e:	a901      	add	r1, sp, #4
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <NRF24_write_register+0x40>)
 8001112:	f002 ff6d 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <NRF24_write_register+0x3c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0fb      	beq.n	8001116 <NRF24_write_register+0x2a>
	}
	//Bring CSN high
	NRF24_csn(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff ff56 	bl	8000fd0 <NRF24_csn>
}
 8001124:	b003      	add	sp, #12
 8001126:	bd30      	pop	{r4, r5, pc}
 8001128:	20000205 	.word	0x20000205
 800112c:	200002c4 	.word	0x200002c4

08001130 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff48 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001140:	f044 0420 	orr.w	r4, r4, #32
 8001144:	a902      	add	r1, sp, #8
 8001146:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <NRF24_write_registerN+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <NRF24_write_registerN+0x58>)
 8001154:	f002 ff4c 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <NRF24_write_registerN+0x54>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0fb      	beq.n	8001158 <NRF24_write_registerN+0x28>
	}
	SPI_TxCplt = 0;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <NRF24_write_registerN+0x54>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)buf, len);
 8001166:	4632      	mov	r2, r6
 8001168:	4629      	mov	r1, r5
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <NRF24_write_registerN+0x58>)
 800116c:	f002 ff40 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <NRF24_write_registerN+0x54>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0fb      	beq.n	8001170 <NRF24_write_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff ff29 	bl	8000fd0 <NRF24_csn>
}
 800117e:	b002      	add	sp, #8
 8001180:	bd70      	pop	{r4, r5, r6, pc}
 8001182:	bf00      	nop
 8001184:	20000205 	.word	0x20000205
 8001188:	200002c4 	.word	0x200002c4

0800118c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800118c:	b530      	push	{r4, r5, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff1b 	bl	8000fd0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800119a:	a902      	add	r1, sp, #8
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <NRF24_write_payload+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &wrPayloadCmd, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <NRF24_write_payload+0x54>)
 80011ac:	f002 ff20 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <NRF24_write_payload+0x50>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0fb      	beq.n	80011b0 <NRF24_write_payload+0x24>
	}
	SPI_TxCplt = 0;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <NRF24_write_payload+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)buf, len);
 80011be:	462a      	mov	r2, r5
 80011c0:	4621      	mov	r1, r4
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <NRF24_write_payload+0x54>)
 80011c4:	f002 ff14 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <NRF24_write_payload+0x50>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0fb      	beq.n	80011c8 <NRF24_write_payload+0x3c>
	}
	//Bring CSN high
	NRF24_csn(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fefd 	bl	8000fd0 <NRF24_csn>
}
 80011d6:	b003      	add	sp, #12
 80011d8:	bd30      	pop	{r4, r5, pc}
 80011da:	bf00      	nop
 80011dc:	20000205 	.word	0x20000205
 80011e0:	200002c4 	.word	0x200002c4

080011e4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80011e4:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	20e1      	movs	r0, #225	; 0xe1
 80011ea:	f7ff ff7f 	bl	80010ec <NRF24_write_register>
}
 80011ee:	bd08      	pop	{r3, pc}

080011f0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80011f0:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	20e2      	movs	r0, #226	; 0xe2
 80011f6:	f7ff ff79 	bl	80010ec <NRF24_write_register>
}
 80011fa:	bd08      	pop	{r3, pc}

080011fc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80011fc:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80011fe:	2007      	movs	r0, #7
 8001200:	f7ff ff12 	bl	8001028 <NRF24_read_register>
	return statReg;
}
 8001204:	bd08      	pop	{r3, pc}

08001206 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001206:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fef7 	bl	8000ffc <NRF24_ce>
	NRF24_flush_tx();
 800120e:	f7ff ffe9 	bl	80011e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001212:	f7ff ffed 	bl	80011f0 <NRF24_flush_rx>
}
 8001216:	bd08      	pop	{r3, pc}

08001218 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	ac02      	add	r4, sp, #8
 800121e:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001222:	2205      	movs	r2, #5
 8001224:	4621      	mov	r1, r4
 8001226:	200a      	movs	r0, #10
 8001228:	f7ff ff82 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800122c:	2205      	movs	r2, #5
 800122e:	4621      	mov	r1, r4
 8001230:	2010      	movs	r0, #16
 8001232:	f7ff ff7d 	bl	8001130 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <NRF24_openWritingPipe+0x34>)
 8001238:	7819      	ldrb	r1, [r3, #0]
 800123a:	2920      	cmp	r1, #32
 800123c:	bf28      	it	cs
 800123e:	2120      	movcs	r1, #32
 8001240:	2011      	movs	r0, #17
 8001242:	f7ff ff53 	bl	80010ec <NRF24_write_register>
}
 8001246:	b002      	add	sp, #8
 8001248:	bd10      	pop	{r4, pc}
 800124a:	bf00      	nop
 800124c:	20000290 	.word	0x20000290

08001250 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001250:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001252:	f001 010f 	and.w	r1, r1, #15
 8001256:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800125a:	b2c9      	uxtb	r1, r1
 800125c:	2004      	movs	r0, #4
 800125e:	f7ff ff45 	bl	80010ec <NRF24_write_register>
}
 8001262:	bd08      	pop	{r3, pc}

08001264 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001264:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001266:	4601      	mov	r1, r0
 8001268:	287f      	cmp	r0, #127	; 0x7f
 800126a:	bf28      	it	cs
 800126c:	217f      	movcs	r1, #127	; 0x7f
 800126e:	2005      	movs	r0, #5
 8001270:	f7ff ff3c 	bl	80010ec <NRF24_write_register>
}
 8001274:	bd08      	pop	{r3, pc}
	...

08001278 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8001278:	2820      	cmp	r0, #32
 800127a:	bf28      	it	cs
 800127c:	2020      	movcs	r0, #32
 800127e:	4b01      	ldr	r3, [pc, #4]	; (8001284 <NRF24_setPayloadSize+0xc>)
 8001280:	7018      	strb	r0, [r3, #0]
}
 8001282:	4770      	bx	lr
 8001284:	20000290 	.word	0x20000290

08001288 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <NRF24_getPayloadSize+0x8>)
 800128a:	7818      	ldrb	r0, [r3, #0]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000290 	.word	0x20000290

08001294 <NRF24_read_payload>:
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	4606      	mov	r6, r0
 800129a:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800129c:	f7ff fff4 	bl	8001288 <NRF24_getPayloadSize>
 80012a0:	4604      	mov	r4, r0
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d900      	bls.n	80012a8 <NRF24_read_payload+0x14>
 80012a6:	462c      	mov	r4, r5
	NRF24_csn(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fe91 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80012ae:	a902      	add	r1, sp, #8
 80012b0:	2361      	movs	r3, #97	; 0x61
 80012b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <NRF24_read_payload+0x5c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &cmdRxBuf, 1);
 80012bc:	2201      	movs	r2, #1
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <NRF24_read_payload+0x60>)
 80012c0:	f002 fe96 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <NRF24_read_payload+0x5c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0fb      	beq.n	80012c4 <NRF24_read_payload+0x30>
	SPI_RxCplt = 0;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <NRF24_read_payload+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, data_len);
 80012d2:	b2a2      	uxth	r2, r4
 80012d4:	4631      	mov	r1, r6
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <NRF24_read_payload+0x60>)
 80012d8:	f002 ff5c 	bl	8004194 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <NRF24_read_payload+0x64>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fb      	beq.n	80012dc <NRF24_read_payload+0x48>
	NRF24_csn(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fe73 	bl	8000fd0 <NRF24_csn>
}
 80012ea:	b002      	add	sp, #8
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	bf00      	nop
 80012f0:	20000205 	.word	0x20000205
 80012f4:	200002c4 	.word	0x200002c4
 80012f8:	20000204 	.word	0x20000204

080012fc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80012fc:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80012fe:	2060      	movs	r0, #96	; 0x60
 8001300:	f7ff fe92 	bl	8001028 <NRF24_read_register>
}
 8001304:	bd08      	pop	{r3, pc}

08001306 <NRF24_read>:
{
 8001306:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001308:	f7ff ffc4 	bl	8001294 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800130c:	2017      	movs	r0, #23
 800130e:	f7ff fe8b 	bl	8001028 <NRF24_read_register>
 8001312:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001316:	f7ff ff6b 	bl	80011f0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800131a:	f7ff ffef 	bl	80012fc <NRF24_getDynamicPayloadSize>
}
 800131e:	4620      	mov	r0, r4
 8001320:	bd10      	pop	{r4, pc}

08001322 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8001322:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001324:	201d      	movs	r0, #29
 8001326:	f7ff fe7f 	bl	8001028 <NRF24_read_register>
 800132a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800132e:	201d      	movs	r0, #29
 8001330:	f7ff fedc 	bl	80010ec <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001334:	2100      	movs	r1, #0
 8001336:	201c      	movs	r0, #28
 8001338:	f7ff fed8 	bl	80010ec <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 800133c:	bd08      	pop	{r3, pc}

0800133e <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800133e:	b508      	push	{r3, lr}
	if ( enable )
 8001340:	b920      	cbnz	r0, 800134c <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fed1 	bl	80010ec <NRF24_write_register>
}
 800134a:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 800134c:	213f      	movs	r1, #63	; 0x3f
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fecc 	bl	80010ec <NRF24_write_register>
 8001354:	e7f9      	b.n	800134a <NRF24_setAutoAck+0xc>

08001356 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001356:	b510      	push	{r4, lr}
 8001358:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800135a:	2006      	movs	r0, #6
 800135c:	f7ff fe64 	bl	8001028 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001360:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 8001364:	2c03      	cmp	r4, #3
 8001366:	d009      	beq.n	800137c <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8001368:	2c02      	cmp	r4, #2
 800136a:	d00d      	beq.n	8001388 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 800136c:	2c01      	cmp	r4, #1
 800136e:	d00e      	beq.n	800138e <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 8001370:	b134      	cbz	r4, 8001380 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 8001372:	2c04      	cmp	r4, #4
 8001374:	d104      	bne.n	8001380 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001376:	f041 0106 	orr.w	r1, r1, #6
 800137a:	e001      	b.n	8001380 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800137c:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff feb3 	bl	80010ec <NRF24_write_register>
}
 8001386:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8001388:	f041 0104 	orr.w	r1, r1, #4
 800138c:	e7f8      	b.n	8001380 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 800138e:	f041 0102 	orr.w	r1, r1, #2
 8001392:	e7f5      	b.n	8001380 <NRF24_setPALevel+0x2a>

08001394 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001398:	2006      	movs	r0, #6
 800139a:	f7ff fe45 	bl	8001028 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800139e:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 80013a2:	2d02      	cmp	r5, #2
 80013a4:	d00c      	beq.n	80013c0 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 80013a6:	2d01      	cmp	r5, #1
 80013a8:	d00d      	beq.n	80013c6 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 80013aa:	4621      	mov	r1, r4
 80013ac:	2006      	movs	r0, #6
 80013ae:	f7ff fe9d 	bl	80010ec <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80013b2:	2006      	movs	r0, #6
 80013b4:	f7ff fe38 	bl	8001028 <NRF24_read_register>
 80013b8:	42a0      	cmp	r0, r4
 80013ba:	d007      	beq.n	80013cc <NRF24_setDataRate+0x38>
	bool result = false;
 80013bc:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 80013be:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 80013c0:	f044 0420 	orr.w	r4, r4, #32
 80013c4:	e7f1      	b.n	80013aa <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 80013c6:	f044 0408 	orr.w	r4, r4, #8
 80013ca:	e7ee      	b.n	80013aa <NRF24_setDataRate+0x16>
		result = true;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e7f6      	b.n	80013be <NRF24_setDataRate+0x2a>

080013d0 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe27 	bl	8001028 <NRF24_read_register>
 80013da:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 80013de:	b11c      	cbz	r4, 80013e8 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 80013e0:	2c01      	cmp	r4, #1
 80013e2:	d005      	beq.n	80013f0 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 80013e4:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fe7f 	bl	80010ec <NRF24_write_register>
}
 80013ee:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 80013f0:	f041 0108 	orr.w	r1, r1, #8
 80013f4:	e7f8      	b.n	80013e8 <NRF24_setCRCLength+0x18>

080013f6 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80013f6:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fe15 	bl	8001028 <NRF24_read_register>
 80013fe:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fe72 	bl	80010ec <NRF24_write_register>
}
 8001408:	bd08      	pop	{r3, pc}

0800140a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800140e:	f7ff fef5 	bl	80011fc <NRF24_get_status>
 8001412:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2501      	movne	r5, #1
 800141c:	2500      	moveq	r5, #0

	if (result)
 800141e:	d00b      	beq.n	8001438 <NRF24_availablePipe+0x2e>
 8001420:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8001422:	b116      	cbz	r6, 800142a <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001424:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001428:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	2007      	movs	r0, #7
 800142e:	f7ff fe5d 	bl	80010ec <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8001432:	f014 0f20 	tst.w	r4, #32
 8001436:	d101      	bne.n	800143c <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8001438:	4628      	mov	r0, r5
 800143a:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800143c:	2120      	movs	r1, #32
 800143e:	2007      	movs	r0, #7
 8001440:	f7ff fe54 	bl	80010ec <NRF24_write_register>
 8001444:	e7f8      	b.n	8001438 <NRF24_availablePipe+0x2e>

08001446 <NRF24_available>:
{
 8001446:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ffde 	bl	800140a <NRF24_availablePipe>
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fde6 	bl	8001028 <NRF24_read_register>
 800145c:	f020 0101 	bic.w	r1, r0, #1
 8001460:	f041 0102 	orr.w	r1, r1, #2
 8001464:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fe3f 	bl	80010ec <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 800146e:	2096      	movs	r0, #150	; 0x96
 8001470:	f7ff fdaa 	bl	8000fc8 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 8001474:	4629      	mov	r1, r5
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff fe88 	bl	800118c <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fdbd 	bl	8000ffc <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001482:	200f      	movs	r0, #15
 8001484:	f7ff fda0 	bl	8000fc8 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fdb7 	bl	8000ffc <NRF24_ce>
}
 800148e:	bd38      	pop	{r3, r4, r5, pc}

08001490 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	4605      	mov	r5, r0
 8001494:	460f      	mov	r7, r1
 8001496:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 8001498:	f7ff feb0 	bl	80011fc <NRF24_get_status>
 800149c:	4604      	mov	r4, r0
	*tx_ok = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80014a2:	2170      	movs	r1, #112	; 0x70
 80014a4:	2007      	movs	r0, #7
 80014a6:	f7ff fe21 	bl	80010ec <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80014aa:	f3c4 1340 	ubfx	r3, r4, #5, #1
 80014ae:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80014b0:	f3c4 1300 	ubfx	r3, r4, #4, #1
 80014b4:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80014b6:	f3c4 1480 	ubfx	r4, r4, #6, #1
 80014ba:	7034      	strb	r4, [r6, #0]
}
 80014bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014be <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80014be:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80014c0:	2170      	movs	r1, #112	; 0x70
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff fe12 	bl	80010ec <NRF24_write_register>
}
 80014c8:	bd08      	pop	{r3, pc}
	...

080014cc <NRF24_write>:
{
 80014cc:	b530      	push	{r4, r5, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	4604      	mov	r4, r0
 80014d2:	460d      	mov	r5, r1
	NRF24_resetStatus();
 80014d4:	f7ff fff3 	bl	80014be <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80014d8:	4629      	mov	r1, r5
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ffb8 	bl	8001450 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 80014e0:	f000 fcbc 	bl	8001e5c <HAL_GetTick>
 80014e4:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f10d 0107 	add.w	r1, sp, #7
 80014ec:	2008      	movs	r0, #8
 80014ee:	f7ff fdcd 	bl	800108c <NRF24_read_registerN>
		status = NRF24_get_status();
 80014f2:	f7ff fe83 	bl	80011fc <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80014f6:	f010 0f30 	tst.w	r0, #48	; 0x30
 80014fa:	d104      	bne.n	8001506 <NRF24_write+0x3a>
 80014fc:	f000 fcae 	bl	8001e5c <HAL_GetTick>
 8001500:	1b00      	subs	r0, r0, r4
 8001502:	2809      	cmp	r0, #9
 8001504:	d9ef      	bls.n	80014e6 <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001506:	4c0c      	ldr	r4, [pc, #48]	; (8001538 <NRF24_write+0x6c>)
 8001508:	4622      	mov	r2, r4
 800150a:	f10d 0105 	add.w	r1, sp, #5
 800150e:	f10d 0006 	add.w	r0, sp, #6
 8001512:	f7ff ffbd 	bl	8001490 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001516:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 800151a:	7823      	ldrb	r3, [r4, #0]
 800151c:	b933      	cbnz	r3, 800152c <NRF24_write+0x60>
	NRF24_available();
 800151e:	f7ff ff92 	bl	8001446 <NRF24_available>
	NRF24_flush_tx();
 8001522:	f7ff fe5f 	bl	80011e4 <NRF24_flush_tx>
}
 8001526:	4628      	mov	r0, r5
 8001528:	b003      	add	sp, #12
 800152a:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 800152c:	f7ff fee6 	bl	80012fc <NRF24_getDynamicPayloadSize>
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <NRF24_write+0x70>)
 8001532:	7018      	strb	r0, [r3, #0]
 8001534:	e7f3      	b.n	800151e <NRF24_write+0x52>
 8001536:	bf00      	nop
 8001538:	20000206 	.word	0x20000206
 800153c:	20000207 	.word	0x20000207

08001540 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001540:	b500      	push	{lr}
 8001542:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fd43 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800154a:	2350      	movs	r3, #80	; 0x50
 800154c:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8001550:	2373      	movs	r3, #115	; 0x73
 8001552:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxCplt = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <NRF24_ACTIVATE_cmd+0x3c>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, cmdRxBuf, 2);
 800155c:	2202      	movs	r2, #2
 800155e:	a901      	add	r1, sp, #4
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <NRF24_ACTIVATE_cmd+0x40>)
 8001562:	f002 fd45 	bl	8003ff0 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <NRF24_ACTIVATE_cmd+0x3c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0fb      	beq.n	8001566 <NRF24_ACTIVATE_cmd+0x26>
	}

	NRF24_csn(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fd2e 	bl	8000fd0 <NRF24_csn>
}
 8001574:	b003      	add	sp, #12
 8001576:	f85d fb04 	ldr.w	pc, [sp], #4
 800157a:	bf00      	nop
 800157c:	20000205 	.word	0x20000205
 8001580:	200002c4 	.word	0x200002c4

08001584 <NRF24_enableAckPayload>:
{
 8001584:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001586:	201d      	movs	r0, #29
 8001588:	f7ff fd4e 	bl	8001028 <NRF24_read_register>
 800158c:	f040 0106 	orr.w	r1, r0, #6
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	201d      	movs	r0, #29
 8001594:	f7ff fdaa 	bl	80010ec <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001598:	201d      	movs	r0, #29
 800159a:	f7ff fd45 	bl	8001028 <NRF24_read_register>
 800159e:	b148      	cbz	r0, 80015b4 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80015a0:	201c      	movs	r0, #28
 80015a2:	f7ff fd41 	bl	8001028 <NRF24_read_register>
 80015a6:	f040 0103 	orr.w	r1, r0, #3
 80015aa:	b2c9      	uxtb	r1, r1
 80015ac:	201c      	movs	r0, #28
 80015ae:	f7ff fd9d 	bl	80010ec <NRF24_write_register>
}
 80015b2:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 80015b4:	f7ff ffc4 	bl	8001540 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80015b8:	201d      	movs	r0, #29
 80015ba:	f7ff fd35 	bl	8001028 <NRF24_read_register>
 80015be:	f040 0106 	orr.w	r1, r0, #6
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	201d      	movs	r0, #29
 80015c6:	f7ff fd91 	bl	80010ec <NRF24_write_register>
 80015ca:	e7e9      	b.n	80015a0 <NRF24_enableAckPayload+0x1c>

080015cc <NRF24_begin>:
{
 80015cc:	b082      	sub	sp, #8
 80015ce:	b530      	push	{r4, r5, lr}
 80015d0:	b083      	sub	sp, #12
 80015d2:	9307      	str	r3, [sp, #28]
	nrf24_PORT = nrf24PORT;
 80015d4:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <NRF24_begin+0x188>)
 80015d6:	6018      	str	r0, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <NRF24_begin+0x18c>)
 80015da:	8019      	strh	r1, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <NRF24_begin+0x190>)
 80015de:	801a      	strh	r2, [r3, #0]
	NRF24_csn(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fcf5 	bl	8000fd0 <NRF24_csn>
	NRF24_ce(0);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fd08 	bl	8000ffc <NRF24_ce>
	HAL_Delay(5);
 80015ec:	2005      	movs	r0, #5
 80015ee:	f000 fc3b 	bl	8001e68 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 80015f2:	2108      	movs	r1, #8
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fd79 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80015fa:	213f      	movs	r1, #63	; 0x3f
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd75 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001602:	2103      	movs	r1, #3
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff fd71 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800160a:	2103      	movs	r1, #3
 800160c:	4608      	mov	r0, r1
 800160e:	f7ff fd6d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001612:	2103      	movs	r1, #3
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff fd69 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800161a:	2102      	movs	r1, #2
 800161c:	2005      	movs	r0, #5
 800161e:	f7ff fd65 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001622:	210f      	movs	r1, #15
 8001624:	2006      	movs	r0, #6
 8001626:	f7ff fd61 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800162a:	210e      	movs	r1, #14
 800162c:	2007      	movs	r0, #7
 800162e:	f7ff fd5d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001632:	2100      	movs	r1, #0
 8001634:	2008      	movs	r0, #8
 8001636:	f7ff fd59 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800163a:	2100      	movs	r1, #0
 800163c:	2009      	movs	r0, #9
 800163e:	f7ff fd55 	bl	80010ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001642:	24e7      	movs	r4, #231	; 0xe7
 8001644:	f88d 4004 	strb.w	r4, [sp, #4]
 8001648:	f88d 4003 	strb.w	r4, [sp, #3]
 800164c:	f88d 4002 	strb.w	r4, [sp, #2]
 8001650:	f88d 4001 	strb.w	r4, [sp, #1]
 8001654:	ad02      	add	r5, sp, #8
 8001656:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800165a:	2205      	movs	r2, #5
 800165c:	4629      	mov	r1, r5
 800165e:	200a      	movs	r0, #10
 8001660:	f7ff fd66 	bl	8001130 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001664:	23c2      	movs	r3, #194	; 0xc2
 8001666:	f88d 3004 	strb.w	r3, [sp, #4]
 800166a:	f88d 3003 	strb.w	r3, [sp, #3]
 800166e:	f88d 3002 	strb.w	r3, [sp, #2]
 8001672:	f88d 3001 	strb.w	r3, [sp, #1]
 8001676:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800167a:	2205      	movs	r2, #5
 800167c:	4629      	mov	r1, r5
 800167e:	200b      	movs	r0, #11
 8001680:	f7ff fd56 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001684:	21c3      	movs	r1, #195	; 0xc3
 8001686:	200c      	movs	r0, #12
 8001688:	f7ff fd30 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800168c:	21c4      	movs	r1, #196	; 0xc4
 800168e:	200d      	movs	r0, #13
 8001690:	f7ff fd2c 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001694:	21c5      	movs	r1, #197	; 0xc5
 8001696:	200e      	movs	r0, #14
 8001698:	f7ff fd28 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800169c:	21c6      	movs	r1, #198	; 0xc6
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fd24 	bl	80010ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80016a4:	f88d 4004 	strb.w	r4, [sp, #4]
 80016a8:	f88d 4003 	strb.w	r4, [sp, #3]
 80016ac:	f88d 4002 	strb.w	r4, [sp, #2]
 80016b0:	f88d 4001 	strb.w	r4, [sp, #1]
 80016b4:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80016b8:	2205      	movs	r2, #5
 80016ba:	4629      	mov	r1, r5
 80016bc:	2010      	movs	r0, #16
 80016be:	f7ff fd37 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2011      	movs	r0, #17
 80016c6:	f7ff fd11 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2012      	movs	r0, #18
 80016ce:	f7ff fd0d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	2013      	movs	r0, #19
 80016d6:	f7ff fd09 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80016da:	2100      	movs	r1, #0
 80016dc:	2014      	movs	r0, #20
 80016de:	f7ff fd05 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2015      	movs	r0, #21
 80016e6:	f7ff fd01 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2016      	movs	r0, #22
 80016ee:	f7ff fcfd 	bl	80010ec <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80016f2:	f7ff ff25 	bl	8001540 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	201c      	movs	r0, #28
 80016fa:	f7ff fcf7 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	201d      	movs	r0, #29
 8001702:	f7ff fcf3 	bl	80010ec <NRF24_write_register>
	NRF24_setRetries(15, 15);
 8001706:	210f      	movs	r1, #15
 8001708:	4608      	mov	r0, r1
 800170a:	f7ff fda1 	bl	8001250 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff fe21 	bl	8001356 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fe3d 	bl	8001394 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fe58 	bl	80013d0 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8001720:	f7ff fdff 	bl	8001322 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8001724:	2020      	movs	r0, #32
 8001726:	f7ff fda7 	bl	8001278 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fe07 	bl	800133e <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8001730:	f7ff ff28 	bl	8001584 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8001734:	f7ff fec3 	bl	80014be <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001738:	204c      	movs	r0, #76	; 0x4c
 800173a:	f7ff fd93 	bl	8001264 <NRF24_setChannel>
	NRF24_flush_tx();
 800173e:	f7ff fd51 	bl	80011e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001742:	f7ff fd55 	bl	80011f0 <NRF24_flush_rx>
	NRF24_powerDown();
 8001746:	f7ff fe56 	bl	80013f6 <NRF24_powerDown>
}
 800174a:	b003      	add	sp, #12
 800174c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001750:	b002      	add	sp, #8
 8001752:	4770      	bx	lr
 8001754:	2000020c 	.word	0x2000020c
 8001758:	2000020a 	.word	0x2000020a
 800175c:	20000208 	.word	0x20000208

08001760 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001764:	ac07      	add	r4, sp, #28
 8001766:	4dc4      	ldr	r5, [pc, #784]	; (8001a78 <printRadioSettings+0x318>)
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	f824 3b02 	strh.w	r3, [r4], #2
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800177e:	a807      	add	r0, sp, #28
 8001780:	f7fe fd46 	bl	8000210 <strlen>
 8001784:	230a      	movs	r3, #10
 8001786:	b282      	uxth	r2, r0
 8001788:	a907      	add	r1, sp, #28
 800178a:	48bc      	ldr	r0, [pc, #752]	; (8001a7c <printRadioSettings+0x31c>)
 800178c:	f003 fc2f 	bl	8004fee <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fc49 	bl	8001028 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001796:	f010 0f08 	tst.w	r0, #8
 800179a:	f000 8261 	beq.w	8001c60 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800179e:	f010 0f04 	tst.w	r0, #4
 80017a2:	f000 8251 	beq.w	8001c48 <printRadioSettings+0x4e8>
 80017a6:	ac07      	add	r4, sp, #28
 80017a8:	4db5      	ldr	r5, [pc, #724]	; (8001a80 <printRadioSettings+0x320>)
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017b6:	a807      	add	r0, sp, #28
 80017b8:	f7fe fd2a 	bl	8000210 <strlen>
 80017bc:	4caf      	ldr	r4, [pc, #700]	; (8001a7c <printRadioSettings+0x31c>)
 80017be:	230a      	movs	r3, #10
 80017c0:	b282      	uxth	r2, r0
 80017c2:	a907      	add	r1, sp, #28
 80017c4:	4620      	mov	r0, r4
 80017c6:	f003 fc12 	bl	8004fee <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fc2c 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80017d4:	9303      	str	r3, [sp, #12]
 80017d6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80017ec:	f000 0201 	and.w	r2, r0, #1
 80017f0:	49a4      	ldr	r1, [pc, #656]	; (8001a84 <printRadioSettings+0x324>)
 80017f2:	a807      	add	r0, sp, #28
 80017f4:	f005 fcfc 	bl	80071f0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f8:	a807      	add	r0, sp, #28
 80017fa:	f7fe fd09 	bl	8000210 <strlen>
 80017fe:	230a      	movs	r3, #10
 8001800:	b282      	uxth	r2, r0
 8001802:	a907      	add	r1, sp, #28
 8001804:	4620      	mov	r0, r4
 8001806:	f003 fbf2 	bl	8004fee <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fc0c 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001810:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001814:	9303      	str	r3, [sp, #12]
 8001816:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800182c:	f000 0201 	and.w	r2, r0, #1
 8001830:	4995      	ldr	r1, [pc, #596]	; (8001a88 <printRadioSettings+0x328>)
 8001832:	a807      	add	r0, sp, #28
 8001834:	f005 fcdc 	bl	80071f0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001838:	a807      	add	r0, sp, #28
 800183a:	f7fe fce9 	bl	8000210 <strlen>
 800183e:	230a      	movs	r3, #10
 8001840:	b282      	uxth	r2, r0
 8001842:	a907      	add	r1, sp, #28
 8001844:	4620      	mov	r0, r4
 8001846:	f003 fbd2 	bl	8004fee <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800184a:	2003      	movs	r0, #3
 800184c:	f7ff fbec 	bl	8001028 <NRF24_read_register>
 8001850:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001854:	3202      	adds	r2, #2
 8001856:	498d      	ldr	r1, [pc, #564]	; (8001a8c <printRadioSettings+0x32c>)
 8001858:	a807      	add	r0, sp, #28
 800185a:	f005 fcc9 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185e:	a807      	add	r0, sp, #28
 8001860:	f7fe fcd6 	bl	8000210 <strlen>
 8001864:	230a      	movs	r3, #10
 8001866:	b282      	uxth	r2, r0
 8001868:	a907      	add	r1, sp, #28
 800186a:	4620      	mov	r0, r4
 800186c:	f003 fbbf 	bl	8004fee <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001870:	2005      	movs	r0, #5
 8001872:	f7ff fbd9 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001876:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800187a:	4985      	ldr	r1, [pc, #532]	; (8001a90 <printRadioSettings+0x330>)
 800187c:	a807      	add	r0, sp, #28
 800187e:	f005 fcb7 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001882:	a807      	add	r0, sp, #28
 8001884:	f7fe fcc4 	bl	8000210 <strlen>
 8001888:	230a      	movs	r3, #10
 800188a:	b282      	uxth	r2, r0
 800188c:	a907      	add	r1, sp, #28
 800188e:	4620      	mov	r0, r4
 8001890:	f003 fbad 	bl	8004fee <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001894:	2006      	movs	r0, #6
 8001896:	f7ff fbc7 	bl	8001028 <NRF24_read_register>
 800189a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800189c:	f010 0f08 	tst.w	r0, #8
 80018a0:	f000 81e5 	beq.w	8001c6e <printRadioSettings+0x50e>
 80018a4:	ad07      	add	r5, sp, #28
 80018a6:	4e7b      	ldr	r6, [pc, #492]	; (8001a94 <printRadioSettings+0x334>)
 80018a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80018b0:	f845 0b04 	str.w	r0, [r5], #4
 80018b4:	f825 1b02 	strh.w	r1, [r5], #2
 80018b8:	0c09      	lsrs	r1, r1, #16
 80018ba:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	a807      	add	r0, sp, #28
 80018be:	f7fe fca7 	bl	8000210 <strlen>
 80018c2:	230a      	movs	r3, #10
 80018c4:	b282      	uxth	r2, r0
 80018c6:	a907      	add	r1, sp, #28
 80018c8:	486c      	ldr	r0, [pc, #432]	; (8001a7c <printRadioSettings+0x31c>)
 80018ca:	f003 fb90 	bl	8004fee <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80018ce:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80018d2:	2c00      	cmp	r4, #0
 80018d4:	f000 81d8 	beq.w	8001c88 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80018d8:	2c01      	cmp	r4, #1
 80018da:	f000 81dc 	beq.w	8001c96 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80018de:	2c02      	cmp	r4, #2
 80018e0:	f000 81e0 	beq.w	8001ca4 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80018e4:	2c03      	cmp	r4, #3
 80018e6:	f000 81e7 	beq.w	8001cb8 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ea:	a807      	add	r0, sp, #28
 80018ec:	f7fe fc90 	bl	8000210 <strlen>
 80018f0:	4c62      	ldr	r4, [pc, #392]	; (8001a7c <printRadioSettings+0x31c>)
 80018f2:	230a      	movs	r3, #10
 80018f4:	b282      	uxth	r2, r0
 80018f6:	a907      	add	r1, sp, #28
 80018f8:	4620      	mov	r0, r4
 80018fa:	f003 fb78 	bl	8004fee <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80018fe:	2205      	movs	r2, #5
 8001900:	a905      	add	r1, sp, #20
 8001902:	200a      	movs	r0, #10
 8001904:	f7ff fbc2 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001908:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800190c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001910:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001914:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001918:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800191c:	9502      	str	r5, [sp, #8]
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	9100      	str	r1, [sp, #0]
 8001922:	495d      	ldr	r1, [pc, #372]	; (8001a98 <printRadioSettings+0x338>)
 8001924:	a807      	add	r0, sp, #28
 8001926:	f005 fc63 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800192a:	a807      	add	r0, sp, #28
 800192c:	f7fe fc70 	bl	8000210 <strlen>
 8001930:	230a      	movs	r3, #10
 8001932:	b282      	uxth	r2, r0
 8001934:	a907      	add	r1, sp, #28
 8001936:	4620      	mov	r0, r4
 8001938:	f003 fb59 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800193c:	2205      	movs	r2, #5
 800193e:	a905      	add	r1, sp, #20
 8001940:	200b      	movs	r0, #11
 8001942:	f7ff fba3 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001946:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800194a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800194e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001952:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001956:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800195a:	9502      	str	r5, [sp, #8]
 800195c:	9001      	str	r0, [sp, #4]
 800195e:	9100      	str	r1, [sp, #0]
 8001960:	494e      	ldr	r1, [pc, #312]	; (8001a9c <printRadioSettings+0x33c>)
 8001962:	a807      	add	r0, sp, #28
 8001964:	f005 fc44 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001968:	a807      	add	r0, sp, #28
 800196a:	f7fe fc51 	bl	8000210 <strlen>
 800196e:	230a      	movs	r3, #10
 8001970:	b282      	uxth	r2, r0
 8001972:	a907      	add	r1, sp, #28
 8001974:	4620      	mov	r0, r4
 8001976:	f003 fb3a 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	a905      	add	r1, sp, #20
 800197e:	200c      	movs	r0, #12
 8001980:	f7ff fb84 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001984:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001988:	4945      	ldr	r1, [pc, #276]	; (8001aa0 <printRadioSettings+0x340>)
 800198a:	a807      	add	r0, sp, #28
 800198c:	f005 fc30 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001990:	a807      	add	r0, sp, #28
 8001992:	f7fe fc3d 	bl	8000210 <strlen>
 8001996:	230a      	movs	r3, #10
 8001998:	b282      	uxth	r2, r0
 800199a:	a907      	add	r1, sp, #28
 800199c:	4620      	mov	r0, r4
 800199e:	f003 fb26 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	a905      	add	r1, sp, #20
 80019a6:	200d      	movs	r0, #13
 80019a8:	f7ff fb70 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80019b0:	493c      	ldr	r1, [pc, #240]	; (8001aa4 <printRadioSettings+0x344>)
 80019b2:	a807      	add	r0, sp, #28
 80019b4:	f005 fc1c 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b8:	a807      	add	r0, sp, #28
 80019ba:	f7fe fc29 	bl	8000210 <strlen>
 80019be:	230a      	movs	r3, #10
 80019c0:	b282      	uxth	r2, r0
 80019c2:	a907      	add	r1, sp, #28
 80019c4:	4620      	mov	r0, r4
 80019c6:	f003 fb12 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	a905      	add	r1, sp, #20
 80019ce:	200e      	movs	r0, #14
 80019d0:	f7ff fb5c 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019d4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80019d8:	4933      	ldr	r1, [pc, #204]	; (8001aa8 <printRadioSettings+0x348>)
 80019da:	a807      	add	r0, sp, #28
 80019dc:	f005 fc08 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e0:	a807      	add	r0, sp, #28
 80019e2:	f7fe fc15 	bl	8000210 <strlen>
 80019e6:	230a      	movs	r3, #10
 80019e8:	b282      	uxth	r2, r0
 80019ea:	a907      	add	r1, sp, #28
 80019ec:	4620      	mov	r0, r4
 80019ee:	f003 fafe 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	a905      	add	r1, sp, #20
 80019f6:	200f      	movs	r0, #15
 80019f8:	f7ff fb48 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001a00:	492a      	ldr	r1, [pc, #168]	; (8001aac <printRadioSettings+0x34c>)
 8001a02:	a807      	add	r0, sp, #28
 8001a04:	f005 fbf4 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a08:	a807      	add	r0, sp, #28
 8001a0a:	f7fe fc01 	bl	8000210 <strlen>
 8001a0e:	230a      	movs	r3, #10
 8001a10:	b282      	uxth	r2, r0
 8001a12:	a907      	add	r1, sp, #28
 8001a14:	4620      	mov	r0, r4
 8001a16:	f003 faea 	bl	8004fee <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	a905      	add	r1, sp, #20
 8001a1e:	2010      	movs	r0, #16
 8001a20:	f7ff fb34 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a24:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001a28:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a2c:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001a30:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001a34:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001a38:	9502      	str	r5, [sp, #8]
 8001a3a:	9001      	str	r0, [sp, #4]
 8001a3c:	9100      	str	r1, [sp, #0]
 8001a3e:	491c      	ldr	r1, [pc, #112]	; (8001ab0 <printRadioSettings+0x350>)
 8001a40:	a807      	add	r0, sp, #28
 8001a42:	f005 fbd5 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a46:	a807      	add	r0, sp, #28
 8001a48:	f7fe fbe2 	bl	8000210 <strlen>
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	b282      	uxth	r2, r0
 8001a50:	a907      	add	r1, sp, #28
 8001a52:	4620      	mov	r0, r4
 8001a54:	f003 facb 	bl	8004fee <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a58:	2011      	movs	r0, #17
 8001a5a:	f7ff fae5 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a5e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <printRadioSettings+0x354>)
 8001a64:	a807      	add	r0, sp, #28
 8001a66:	f005 fbc3 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a6a:	a807      	add	r0, sp, #28
 8001a6c:	f7fe fbd0 	bl	8000210 <strlen>
 8001a70:	230a      	movs	r3, #10
 8001a72:	b282      	uxth	r2, r0
 8001a74:	e020      	b.n	8001ab8 <printRadioSettings+0x358>
 8001a76:	bf00      	nop
 8001a78:	0800a070 	.word	0x0800a070
 8001a7c:	20000210 	.word	0x20000210
 8001a80:	0800a0a4 	.word	0x0800a0a4
 8001a84:	0800a0f0 	.word	0x0800a0f0
 8001a88:	0800a134 	.word	0x0800a134
 8001a8c:	0800a180 	.word	0x0800a180
 8001a90:	0800a19c 	.word	0x0800a19c
 8001a94:	0800a1b0 	.word	0x0800a1b0
 8001a98:	0800a230 	.word	0x0800a230
 8001a9c:	0800a260 	.word	0x0800a260
 8001aa0:	0800a290 	.word	0x0800a290
 8001aa4:	0800a2b8 	.word	0x0800a2b8
 8001aa8:	0800a2e0 	.word	0x0800a2e0
 8001aac:	0800a308 	.word	0x0800a308
 8001ab0:	0800a330 	.word	0x0800a330
 8001ab4:	0800a35c 	.word	0x0800a35c
 8001ab8:	a907      	add	r1, sp, #28
 8001aba:	4620      	mov	r0, r4
 8001abc:	f003 fa97 	bl	8004fee <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f7ff fab1 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001aca:	498a      	ldr	r1, [pc, #552]	; (8001cf4 <printRadioSettings+0x594>)
 8001acc:	a807      	add	r0, sp, #28
 8001ace:	f005 fb8f 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad2:	a807      	add	r0, sp, #28
 8001ad4:	f7fe fb9c 	bl	8000210 <strlen>
 8001ad8:	230a      	movs	r3, #10
 8001ada:	b282      	uxth	r2, r0
 8001adc:	a907      	add	r1, sp, #28
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f003 fa85 	bl	8004fee <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001ae4:	2013      	movs	r0, #19
 8001ae6:	f7ff fa9f 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aea:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001aee:	4982      	ldr	r1, [pc, #520]	; (8001cf8 <printRadioSettings+0x598>)
 8001af0:	a807      	add	r0, sp, #28
 8001af2:	f005 fb7d 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001af6:	a807      	add	r0, sp, #28
 8001af8:	f7fe fb8a 	bl	8000210 <strlen>
 8001afc:	230a      	movs	r3, #10
 8001afe:	b282      	uxth	r2, r0
 8001b00:	a907      	add	r1, sp, #28
 8001b02:	4620      	mov	r0, r4
 8001b04:	f003 fa73 	bl	8004fee <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001b08:	2014      	movs	r0, #20
 8001b0a:	f7ff fa8d 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b12:	497a      	ldr	r1, [pc, #488]	; (8001cfc <printRadioSettings+0x59c>)
 8001b14:	a807      	add	r0, sp, #28
 8001b16:	f005 fb6b 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	a807      	add	r0, sp, #28
 8001b1c:	f7fe fb78 	bl	8000210 <strlen>
 8001b20:	230a      	movs	r3, #10
 8001b22:	b282      	uxth	r2, r0
 8001b24:	a907      	add	r1, sp, #28
 8001b26:	4620      	mov	r0, r4
 8001b28:	f003 fa61 	bl	8004fee <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001b2c:	2015      	movs	r0, #21
 8001b2e:	f7ff fa7b 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b32:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b36:	4972      	ldr	r1, [pc, #456]	; (8001d00 <printRadioSettings+0x5a0>)
 8001b38:	a807      	add	r0, sp, #28
 8001b3a:	f005 fb59 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b3e:	a807      	add	r0, sp, #28
 8001b40:	f7fe fb66 	bl	8000210 <strlen>
 8001b44:	230a      	movs	r3, #10
 8001b46:	b282      	uxth	r2, r0
 8001b48:	a907      	add	r1, sp, #28
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f003 fa4f 	bl	8004fee <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001b50:	2016      	movs	r0, #22
 8001b52:	f7ff fa69 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b56:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b5a:	496a      	ldr	r1, [pc, #424]	; (8001d04 <printRadioSettings+0x5a4>)
 8001b5c:	a807      	add	r0, sp, #28
 8001b5e:	f005 fb47 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b62:	a807      	add	r0, sp, #28
 8001b64:	f7fe fb54 	bl	8000210 <strlen>
 8001b68:	230a      	movs	r3, #10
 8001b6a:	b282      	uxth	r2, r0
 8001b6c:	a907      	add	r1, sp, #28
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f003 fa3d 	bl	8004fee <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b74:	201c      	movs	r0, #28
 8001b76:	f7ff fa57 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b7a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001b7e:	9303      	str	r3, [sp, #12]
 8001b80:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001b96:	f000 0201 	and.w	r2, r0, #1
 8001b9a:	495b      	ldr	r1, [pc, #364]	; (8001d08 <printRadioSettings+0x5a8>)
 8001b9c:	a807      	add	r0, sp, #28
 8001b9e:	f005 fb27 	bl	80071f0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba2:	a807      	add	r0, sp, #28
 8001ba4:	f7fe fb34 	bl	8000210 <strlen>
 8001ba8:	230a      	movs	r3, #10
 8001baa:	b282      	uxth	r2, r0
 8001bac:	a907      	add	r1, sp, #28
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f003 fa1d 	bl	8004fee <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001bb4:	201d      	movs	r0, #29
 8001bb6:	f7ff fa37 	bl	8001028 <NRF24_read_register>
 8001bba:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001bbc:	f010 0f04 	tst.w	r0, #4
 8001bc0:	f000 8081 	beq.w	8001cc6 <printRadioSettings+0x566>
 8001bc4:	ac07      	add	r4, sp, #28
 8001bc6:	4d51      	ldr	r5, [pc, #324]	; (8001d0c <printRadioSettings+0x5ac>)
 8001bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bd0:	f844 0b04 	str.w	r0, [r4], #4
 8001bd4:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bd6:	a807      	add	r0, sp, #28
 8001bd8:	f7fe fb1a 	bl	8000210 <strlen>
 8001bdc:	230a      	movs	r3, #10
 8001bde:	b282      	uxth	r2, r0
 8001be0:	a907      	add	r1, sp, #28
 8001be2:	484b      	ldr	r0, [pc, #300]	; (8001d10 <printRadioSettings+0x5b0>)
 8001be4:	f003 fa03 	bl	8004fee <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001be8:	f016 0f02 	tst.w	r6, #2
 8001bec:	d178      	bne.n	8001ce0 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001bee:	ac07      	add	r4, sp, #28
 8001bf0:	4d48      	ldr	r5, [pc, #288]	; (8001d14 <printRadioSettings+0x5b4>)
 8001bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bfa:	c403      	stmia	r4!, {r0, r1}
 8001bfc:	f824 2b02 	strh.w	r2, [r4], #2
 8001c00:	0c12      	lsrs	r2, r2, #16
 8001c02:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c04:	a807      	add	r0, sp, #28
 8001c06:	f7fe fb03 	bl	8000210 <strlen>
 8001c0a:	4e41      	ldr	r6, [pc, #260]	; (8001d10 <printRadioSettings+0x5b0>)
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	b282      	uxth	r2, r0
 8001c10:	a907      	add	r1, sp, #28
 8001c12:	4630      	mov	r0, r6
 8001c14:	f003 f9eb 	bl	8004fee <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001c18:	ac07      	add	r4, sp, #28
 8001c1a:	4d3f      	ldr	r5, [pc, #252]	; (8001d18 <printRadioSettings+0x5b8>)
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	f824 3b02 	strh.w	r3, [r4], #2
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c32:	a807      	add	r0, sp, #28
 8001c34:	f7fe faec 	bl	8000210 <strlen>
 8001c38:	230a      	movs	r3, #10
 8001c3a:	b282      	uxth	r2, r0
 8001c3c:	a907      	add	r1, sp, #28
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f003 f9d5 	bl	8004fee <HAL_UART_Transmit>
}
 8001c44:	b020      	add	sp, #128	; 0x80
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001c48:	ac07      	add	r4, sp, #28
 8001c4a:	4d34      	ldr	r5, [pc, #208]	; (8001d1c <printRadioSettings+0x5bc>)
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c54:	c403      	stmia	r4!, {r0, r1}
 8001c56:	f824 2b02 	strh.w	r2, [r4], #2
 8001c5a:	0c12      	lsrs	r2, r2, #16
 8001c5c:	7022      	strb	r2, [r4, #0]
 8001c5e:	e5aa      	b.n	80017b6 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001c60:	ac07      	add	r4, sp, #28
 8001c62:	4d2f      	ldr	r5, [pc, #188]	; (8001d20 <printRadioSettings+0x5c0>)
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	6023      	str	r3, [r4, #0]
 8001c6c:	e5a3      	b.n	80017b6 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001c6e:	ad07      	add	r5, sp, #28
 8001c70:	4e2c      	ldr	r6, [pc, #176]	; (8001d24 <printRadioSettings+0x5c4>)
 8001c72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001c7a:	f845 0b04 	str.w	r0, [r5], #4
 8001c7e:	f825 1b02 	strh.w	r1, [r5], #2
 8001c82:	0c09      	lsrs	r1, r1, #16
 8001c84:	7029      	strb	r1, [r5, #0]
 8001c86:	e619      	b.n	80018bc <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001c88:	ac07      	add	r4, sp, #28
 8001c8a:	4d27      	ldr	r5, [pc, #156]	; (8001d28 <printRadioSettings+0x5c8>)
 8001c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	6023      	str	r3, [r4, #0]
 8001c94:	e629      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001c96:	ac07      	add	r4, sp, #28
 8001c98:	4d24      	ldr	r5, [pc, #144]	; (8001d2c <printRadioSettings+0x5cc>)
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	e622      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001ca4:	ac07      	add	r4, sp, #28
 8001ca6:	4d22      	ldr	r5, [pc, #136]	; (8001d30 <printRadioSettings+0x5d0>)
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	f824 3b02 	strh.w	r3, [r4], #2
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	7023      	strb	r3, [r4, #0]
 8001cb6:	e618      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001cb8:	ac07      	add	r4, sp, #28
 8001cba:	4d1e      	ldr	r5, [pc, #120]	; (8001d34 <printRadioSettings+0x5d4>)
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	8023      	strh	r3, [r4, #0]
 8001cc4:	e611      	b.n	80018ea <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001cc6:	ac07      	add	r4, sp, #28
 8001cc8:	4d1b      	ldr	r5, [pc, #108]	; (8001d38 <printRadioSettings+0x5d8>)
 8001cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cd2:	f844 0b04 	str.w	r0, [r4], #4
 8001cd6:	f824 1b02 	strh.w	r1, [r4], #2
 8001cda:	0c09      	lsrs	r1, r1, #16
 8001cdc:	7021      	strb	r1, [r4, #0]
 8001cde:	e77a      	b.n	8001bd6 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ce0:	ac07      	add	r4, sp, #28
 8001ce2:	4d16      	ldr	r5, [pc, #88]	; (8001d3c <printRadioSettings+0x5dc>)
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cec:	c403      	stmia	r4!, {r0, r1}
 8001cee:	8022      	strh	r2, [r4, #0]
 8001cf0:	e788      	b.n	8001c04 <printRadioSettings+0x4a4>
 8001cf2:	bf00      	nop
 8001cf4:	0800a378 	.word	0x0800a378
 8001cf8:	0800a394 	.word	0x0800a394
 8001cfc:	0800a3b0 	.word	0x0800a3b0
 8001d00:	0800a3cc 	.word	0x0800a3cc
 8001d04:	0800a3e8 	.word	0x0800a3e8
 8001d08:	0800a404 	.word	0x0800a404
 8001d0c:	0800a450 	.word	0x0800a450
 8001d10:	20000210 	.word	0x20000210
 8001d14:	0800a49c 	.word	0x0800a49c
 8001d18:	0800a070 	.word	0x0800a070
 8001d1c:	0800a0c0 	.word	0x0800a0c0
 8001d20:	0800a0dc 	.word	0x0800a0dc
 8001d24:	0800a1c8 	.word	0x0800a1c8
 8001d28:	0800a1e0 	.word	0x0800a1e0
 8001d2c:	0800a1f4 	.word	0x0800a1f4
 8001d30:	0800a208 	.word	0x0800a208
 8001d34:	0800a21c 	.word	0x0800a21c
 8001d38:	0800a468 	.word	0x0800a468
 8001d3c:	0800a480 	.word	0x0800a480

08001d40 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001d40:	b084      	sub	sp, #16
 8001d42:	b508      	push	{r3, lr}
 8001d44:	f10d 0c08 	add.w	ip, sp, #8
 8001d48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	4661      	mov	r1, ip
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <nrf24_DebugUART_Init+0x20>)
 8001d52:	f004 fbf5 	bl	8006540 <memcpy>
}
 8001d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d5a:	b004      	add	sp, #16
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000210 	.word	0x20000210

08001d64 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_TxCplt = 1;
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_SPI_TxCpltCallback+0x8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000205 	.word	0x20000205

08001d70 <HAL_SPI_RxCpltCallback>:



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_RxCplt = 1;
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <HAL_SPI_RxCpltCallback+0x8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
}
 8001d76:	4770      	bx	lr
 8001d78:	20000204 	.word	0x20000204

08001d7c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <DWT_Init+0x20>)
 8001d7e:	68d3      	ldr	r3, [r2, #12]
 8001d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d84:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <DWT_Init+0x24>)
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <DWT_Init+0x28>)
 8001d8a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000edf0 	.word	0xe000edf0
 8001da0:	e0001000 	.word	0xe0001000
 8001da4:	c5acce55 	.word	0xc5acce55

08001da8 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <DWT_Delay+0x20>)
 8001daa:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <DWT_Delay+0x24>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <DWT_Delay+0x28>)
 8001db2:	fba1 1303 	umull	r1, r3, r1, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <DWT_Delay+0x20>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	4283      	cmp	r3, r0
 8001dc4:	d3fa      	bcc.n	8001dbc <DWT_Delay+0x14>
}
 8001dc6:	4770      	bx	lr
 8001dc8:	e0001000 	.word	0xe0001000
 8001dcc:	20000014 	.word	0x20000014
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_InitTick+0x40>)
 8001dda:	7818      	ldrb	r0, [r3, #0]
 8001ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_InitTick+0x44>)
 8001de6:	6810      	ldr	r0, [r2, #0]
 8001de8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dec:	f000 fb78 	bl	80024e0 <HAL_SYSTICK_Config>
 8001df0:	b968      	cbnz	r0, 8001e0e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	2c0f      	cmp	r4, #15
 8001df4:	d901      	bls.n	8001dfa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
 8001df8:	e00a      	b.n	8001e10 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e02:	f000 fb2d 	bl	8002460 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_InitTick+0x48>)
 8001e08:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
}
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000014 	.word	0x20000014
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_Init>:
{
 8001e20:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001e22:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x20>)
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 fb05 	bl	800243c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff ffce 	bl	8001dd4 <HAL_InitTick>
  HAL_MspInit();
 8001e38:	f004 f840 	bl	8005ebc <HAL_MspInit>
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	bd08      	pop	{r3, pc}
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e44:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <HAL_IncTick+0x10>)
 8001e46:	6811      	ldr	r1, [r2, #0]
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_IncTick+0x14>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000328 	.word	0x20000328
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e5c:	4b01      	ldr	r3, [pc, #4]	; (8001e64 <HAL_GetTick+0x8>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000328 	.word	0x20000328

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fff6 	bl	8001e5c <HAL_GetTick>
 8001e70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001e76:	d002      	beq.n	8001e7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_Delay+0x24>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	f7ff ffed 	bl	8001e5c <HAL_GetTick>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	42a0      	cmp	r0, r4
 8001e86:	d3fa      	bcc.n	8001e7e <HAL_Delay+0x16>
  {
  }
}
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <ADC_Init+0x12c>)
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e98:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	6841      	ldr	r1, [r0, #4]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea2:	6802      	ldr	r2, [r0, #0]
 8001ea4:	6853      	ldr	r3, [r2, #4]
 8001ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eaa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eac:	6802      	ldr	r2, [r0, #0]
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	6901      	ldr	r1, [r0, #16]
 8001eb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eb6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb8:	6802      	ldr	r2, [r0, #0]
 8001eba:	6853      	ldr	r3, [r2, #4]
 8001ebc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ec0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec2:	6802      	ldr	r2, [r0, #0]
 8001ec4:	6853      	ldr	r3, [r2, #4]
 8001ec6:	6881      	ldr	r1, [r0, #8]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ecc:	6802      	ldr	r2, [r0, #0]
 8001ece:	6893      	ldr	r3, [r2, #8]
 8001ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed6:	6802      	ldr	r2, [r0, #0]
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	68c1      	ldr	r1, [r0, #12]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <ADC_Init+0x130>)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d04b      	beq.n	8001f80 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	6893      	ldr	r3, [r2, #8]
 8001eec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ef0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef2:	6802      	ldr	r2, [r0, #0]
 8001ef4:	6893      	ldr	r3, [r2, #8]
 8001ef6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efc:	6802      	ldr	r2, [r0, #0]
 8001efe:	6893      	ldr	r3, [r2, #8]
 8001f00:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f04:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f06:	6802      	ldr	r2, [r0, #0]
 8001f08:	6893      	ldr	r3, [r2, #8]
 8001f0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f10:	6802      	ldr	r2, [r0, #0]
 8001f12:	6893      	ldr	r3, [r2, #8]
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	6893      	ldr	r3, [r2, #8]
 8001f1e:	6981      	ldr	r1, [r0, #24]
 8001f20:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001f24:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f26:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d133      	bne.n	8001f96 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f2e:	6802      	ldr	r2, [r0, #0]
 8001f30:	6853      	ldr	r3, [r2, #4]
 8001f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f36:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f40:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f46:	69c2      	ldr	r2, [r0, #28]
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	6893      	ldr	r3, [r2, #8]
 8001f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f58:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	6893      	ldr	r3, [r2, #8]
 8001f5e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001f62:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001f66:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6893      	ldr	r3, [r2, #8]
 8001f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f70:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	6893      	ldr	r3, [r2, #8]
 8001f76:	6941      	ldr	r1, [r0, #20]
 8001f78:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001f7c:	6093      	str	r3, [r2, #8]
}
 8001f7e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	6893      	ldr	r3, [r2, #8]
 8001f84:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f88:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f92:	6093      	str	r3, [r2, #8]
 8001f94:	e7bc      	b.n	8001f10 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	6853      	ldr	r3, [r2, #4]
 8001f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f9e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa0:	6802      	ldr	r2, [r0, #0]
 8001fa2:	6853      	ldr	r3, [r2, #4]
 8001fa4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fa8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001faa:	6801      	ldr	r1, [r0, #0]
 8001fac:	684b      	ldr	r3, [r1, #4]
 8001fae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e7be      	b.n	8001f38 <ADC_Init+0xa8>
 8001fba:	bf00      	nop
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	0f000001 	.word	0x0f000001

08001fc4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001fc4:	b328      	cbz	r0, 8002012 <HAL_ADC_Init+0x4e>
{
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fcc:	b143      	cbz	r3, 8001fe0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fd0:	f013 0f10 	tst.w	r3, #16
 8001fd4:	d00b      	beq.n	8001fee <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001fd6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001fde:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001fe0:	f003 ff84 	bl	8005eec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001fe8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001fec:	e7ef      	b.n	8001fce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_ADC_Init+0x54>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ff48 	bl	8001e90 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002000:	2000      	movs	r0, #0
 8002002:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6423      	str	r3, [r4, #64]	; 0x40
 8002010:	e7e2      	b.n	8001fd8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002012:	2001      	movs	r0, #1
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	ffffeefd 	.word	0xffffeefd

0800201c <HAL_ADC_Start>:
{
 800201c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002022:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002026:	2b01      	cmp	r3, #1
 8002028:	d073      	beq.n	8002112 <HAL_ADC_Start+0xf6>
 800202a:	2301      	movs	r3, #1
 800202c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	f012 0f01 	tst.w	r2, #1
 8002038:	d113      	bne.n	8002062 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_ADC_Start+0x10c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a39      	ldr	r2, [pc, #228]	; (800212c <HAL_ADC_Start+0x110>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002052:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8002054:	e002      	b.n	800205c <HAL_ADC_Start+0x40>
      counter--;
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	3b01      	subs	r3, #1
 800205a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	6893      	ldr	r3, [r2, #8]
 8002066:	f013 0f01 	tst.w	r3, #1
 800206a:	d054      	beq.n	8002116 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_ADC_Start+0x114>)
 8002070:	400b      	ands	r3, r1
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002078:	6853      	ldr	r3, [r2, #4]
 800207a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800207e:	d005      	beq.n	800208c <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002080:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002082:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208a:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800208e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002092:	d019      	beq.n	80020c8 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002094:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002096:	f023 0306 	bic.w	r3, r3, #6
 800209a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800209c:	2300      	movs	r3, #0
 800209e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020a2:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80020a6:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_ADC_Start+0x118>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f013 0f1f 	tst.w	r3, #31
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020b2:	6803      	ldr	r3, [r0, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020ba:	d12f      	bne.n	800211c <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e027      	b.n	8002118 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 80020c8:	2300      	movs	r3, #0
 80020ca:	6443      	str	r3, [r0, #68]	; 0x44
 80020cc:	e7e6      	b.n	800209c <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ce:	6803      	ldr	r3, [r0, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_ADC_Start+0x11c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00a      	beq.n	80020ec <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_ADC_Start+0x118>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f013 0f10 	tst.w	r3, #16
 80020de:	d11f      	bne.n	8002120 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_ADC_Start+0x120>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00a      	beq.n	80020fe <HAL_ADC_Start+0xe2>
  return HAL_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e015      	b.n	8002118 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020f2:	d1f0      	bne.n	80020d6 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e7eb      	b.n	80020d6 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002104:	d10e      	bne.n	8002124 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800210c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800210e:	2000      	movs	r0, #0
 8002110:	e002      	b.n	8002118 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 8002112:	2002      	movs	r0, #2
 8002114:	e000      	b.n	8002118 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 8002116:	2000      	movs	r0, #0
}
 8002118:	b002      	add	sp, #8
 800211a:	4770      	bx	lr
  return HAL_OK;
 800211c:	2000      	movs	r0, #0
 800211e:	e7fb      	b.n	8002118 <HAL_ADC_Start+0xfc>
 8002120:	2000      	movs	r0, #0
 8002122:	e7f9      	b.n	8002118 <HAL_ADC_Start+0xfc>
 8002124:	2000      	movs	r0, #0
 8002126:	e7f7      	b.n	8002118 <HAL_ADC_Start+0xfc>
 8002128:	20000014 	.word	0x20000014
 800212c:	431bde83 	.word	0x431bde83
 8002130:	fffff8fe 	.word	0xfffff8fe
 8002134:	40012300 	.word	0x40012300
 8002138:	40012000 	.word	0x40012000
 800213c:	40012200 	.word	0x40012200

08002140 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002140:	4770      	bx	lr

08002142 <HAL_ADC_IRQHandler>:
{
 8002142:	b538      	push	{r3, r4, r5, lr}
 8002144:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002146:	6801      	ldr	r1, [r0, #0]
 8002148:	680a      	ldr	r2, [r1, #0]
 800214a:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800214e:	684b      	ldr	r3, [r1, #4]
 8002150:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 8002154:	421a      	tst	r2, r3
 8002156:	d02c      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002158:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800215a:	f013 0f10 	tst.w	r3, #16
 800215e:	d103      	bne.n	8002168 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002160:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002168:	688b      	ldr	r3, [r1, #8]
 800216a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800216e:	d119      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002170:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002172:	b9bb      	cbnz	r3, 80021a4 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002174:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002176:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800217a:	d003      	beq.n	8002184 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800217c:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800217e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002182:	d10f      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002184:	684b      	ldr	r3, [r1, #4]
 8002186:	f023 0320 	bic.w	r3, r3, #32
 800218a:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800218e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002192:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002196:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800219a:	d103      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f003 fde1 	bl	8005d6c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f06f 0212 	mvn.w	r2, #18
 80021b0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 80021c0:	4211      	tst	r1, r2
 80021c2:	d034      	beq.n	800222e <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021c6:	f012 0f10 	tst.w	r2, #16
 80021ca:	d103      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80021da:	d121      	bne.n	8002220 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80021dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021de:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80021e2:	d003      	beq.n	80021ec <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021e4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80021e6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80021ea:	d119      	bne.n	8002220 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ec:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021ee:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80021f2:	d115      	bne.n	8002220 <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021f4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80021fa:	d111      	bne.n	8002220 <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80021fc:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021fe:	b97a      	cbnz	r2, 8002220 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002206:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800220a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800220e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002212:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002216:	d103      	bne.n	8002220 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002220:	4620      	mov	r0, r4
 8002222:	f000 f909 	bl	8002438 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f06f 020c 	mvn.w	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002232:	6853      	ldr	r3, [r2, #4]
 8002234:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8002238:	4219      	tst	r1, r3
 800223a:	d003      	beq.n	8002244 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	f013 0f01 	tst.w	r3, #1
 8002242:	d109      	bne.n	8002258 <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002244:	6821      	ldr	r1, [r4, #0]
 8002246:	680a      	ldr	r2, [r1, #0]
 8002248:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800224c:	684b      	ldr	r3, [r1, #4]
 800224e:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 8002252:	421a      	tst	r2, r3
 8002254:	d10c      	bne.n	8002270 <HAL_ADC_IRQHandler+0x12e>
}
 8002256:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ff6d 	bl	8002140 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	f06f 0201 	mvn.w	r2, #1
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e7e9      	b.n	8002244 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002270:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002278:	f06f 0520 	mvn.w	r5, #32
 800227c:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 800227e:	4620      	mov	r0, r4
 8002280:	f003 fd75 	bl	8005d6e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	601d      	str	r5, [r3, #0]
}
 8002288:	e7e5      	b.n	8002256 <HAL_ADC_IRQHandler+0x114>
	...

0800228c <HAL_ADC_ConfigChannel>:
{
 800228c:	b430      	push	{r4, r5}
 800228e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	f000 80c0 	beq.w	800241e <HAL_ADC_ConfigChannel+0x192>
 800229e:	2301      	movs	r3, #1
 80022a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 80022a4:	680b      	ldr	r3, [r1, #0]
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d922      	bls.n	80022f0 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022aa:	6805      	ldr	r5, [r0, #0]
 80022ac:	68ea      	ldr	r2, [r5, #12]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022b4:	3b1e      	subs	r3, #30
 80022b6:	2407      	movs	r4, #7
 80022b8:	fa04 f303 	lsl.w	r3, r4, r3
 80022bc:	ea22 0303 	bic.w	r3, r2, r3
 80022c0:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c2:	680b      	ldr	r3, [r1, #0]
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_ADC_ConfigChannel+0x198>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00b      	beq.n	80022e2 <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ca:	6805      	ldr	r5, [r0, #0]
 80022cc:	68ea      	ldr	r2, [r5, #12]
 80022ce:	688c      	ldr	r4, [r1, #8]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022d6:	3b1e      	subs	r3, #30
 80022d8:	fa04 f303 	lsl.w	r3, r4, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	60eb      	str	r3, [r5, #12]
 80022e0:	e01b      	b.n	800231a <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022e2:	6802      	ldr	r2, [r0, #0]
 80022e4:	68d3      	ldr	r3, [r2, #12]
 80022e6:	688c      	ldr	r4, [r1, #8]
 80022e8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80022ec:	60d3      	str	r3, [r2, #12]
 80022ee:	e014      	b.n	800231a <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f0:	6805      	ldr	r5, [r0, #0]
 80022f2:	692a      	ldr	r2, [r5, #16]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022fa:	2407      	movs	r4, #7
 80022fc:	fa04 f303 	lsl.w	r3, r4, r3
 8002300:	ea22 0303 	bic.w	r3, r2, r3
 8002304:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002306:	6805      	ldr	r5, [r0, #0]
 8002308:	692a      	ldr	r2, [r5, #16]
 800230a:	688c      	ldr	r4, [r1, #8]
 800230c:	880b      	ldrh	r3, [r1, #0]
 800230e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002312:	fa04 f303 	lsl.w	r3, r4, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 800231a:	684b      	ldr	r3, [r1, #4]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d824      	bhi.n	800236a <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002320:	6805      	ldr	r5, [r0, #0]
 8002322:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002324:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002328:	3b05      	subs	r3, #5
 800232a:	241f      	movs	r4, #31
 800232c:	fa04 f303 	lsl.w	r3, r4, r3
 8002330:	ea22 0303 	bic.w	r3, r2, r3
 8002334:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002336:	6805      	ldr	r5, [r0, #0]
 8002338:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800233a:	684b      	ldr	r3, [r1, #4]
 800233c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002340:	3b05      	subs	r3, #5
 8002342:	880c      	ldrh	r4, [r1, #0]
 8002344:	fa04 f303 	lsl.w	r3, r4, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800234c:	6802      	ldr	r2, [r0, #0]
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_ADC_ConfigChannel+0x19c>)
 8002350:	429a      	cmp	r2, r3
 8002352:	d03a      	beq.n	80023ca <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002354:	6802      	ldr	r2, [r0, #0]
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_ADC_ConfigChannel+0x19c>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d03f      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 800235c:	2300      	movs	r3, #0
 800235e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002362:	4618      	mov	r0, r3
}
 8002364:	b002      	add	sp, #8
 8002366:	bc30      	pop	{r4, r5}
 8002368:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d816      	bhi.n	800239c <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800236e:	6805      	ldr	r5, [r0, #0]
 8002370:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002376:	3b23      	subs	r3, #35	; 0x23
 8002378:	241f      	movs	r4, #31
 800237a:	fa04 f303 	lsl.w	r3, r4, r3
 800237e:	ea22 0303 	bic.w	r3, r2, r3
 8002382:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002384:	6805      	ldr	r5, [r0, #0]
 8002386:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002388:	684b      	ldr	r3, [r1, #4]
 800238a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800238e:	3b23      	subs	r3, #35	; 0x23
 8002390:	880c      	ldrh	r4, [r1, #0]
 8002392:	fa04 f303 	lsl.w	r3, r4, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	632b      	str	r3, [r5, #48]	; 0x30
 800239a:	e7d7      	b.n	800234c <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800239c:	6805      	ldr	r5, [r0, #0]
 800239e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023a4:	3b41      	subs	r3, #65	; 0x41
 80023a6:	241f      	movs	r4, #31
 80023a8:	fa04 f303 	lsl.w	r3, r4, r3
 80023ac:	ea22 0303 	bic.w	r3, r2, r3
 80023b0:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b2:	6805      	ldr	r5, [r0, #0]
 80023b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023b6:	684b      	ldr	r3, [r1, #4]
 80023b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023bc:	3b41      	subs	r3, #65	; 0x41
 80023be:	880c      	ldrh	r4, [r1, #0]
 80023c0:	fa04 f303 	lsl.w	r3, r4, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62eb      	str	r3, [r5, #44]	; 0x2c
 80023c8:	e7c0      	b.n	800234c <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ca:	680b      	ldr	r3, [r1, #0]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d1c1      	bne.n	8002354 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_ADC_ConfigChannel+0x1a0>)
 80023d2:	6853      	ldr	r3, [r2, #4]
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	6053      	str	r3, [r2, #4]
 80023da:	e7bb      	b.n	8002354 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023dc:	680b      	ldr	r3, [r1, #0]
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_ADC_ConfigChannel+0x198>)
 80023e0:	2b11      	cmp	r3, #17
 80023e2:	bf18      	it	ne
 80023e4:	4293      	cmpne	r3, r2
 80023e6:	d1b9      	bne.n	800235c <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023e8:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_ADC_ConfigChannel+0x1a0>)
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f0:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f2:	680a      	ldr	r2, [r1, #0]
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_ADC_ConfigChannel+0x198>)
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d1b0      	bne.n	800235c <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_ADC_ConfigChannel+0x1a4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_ADC_ConfigChannel+0x1a8>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800240a:	005a      	lsls	r2, r3, #1
 800240c:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800240e:	e002      	b.n	8002416 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8002410:	9b01      	ldr	r3, [sp, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002416:	9b01      	ldr	r3, [sp, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x184>
 800241c:	e79e      	b.n	800235c <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 800241e:	2002      	movs	r0, #2
 8002420:	e7a0      	b.n	8002364 <HAL_ADC_ConfigChannel+0xd8>
 8002422:	bf00      	nop
 8002424:	10000012 	.word	0x10000012
 8002428:	40012000 	.word	0x40012000
 800242c:	40012300 	.word	0x40012300
 8002430:	20000014 	.word	0x20000014
 8002434:	431bde83 	.word	0x431bde83

08002438 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002438:	4770      	bx	lr
	...

0800243c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800243e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002440:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	0200      	lsls	r0, r0, #8
 800244a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002452:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002454:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00
 800245c:	05fa0000 	.word	0x05fa0000

08002460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002460:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_NVIC_SetPriority+0x58>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246a:	f1c3 0407 	rsb	r4, r3, #7
 800246e:	2c04      	cmp	r4, #4
 8002470:	bf28      	it	cs
 8002472:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002474:	1d1d      	adds	r5, r3, #4
 8002476:	2d06      	cmp	r5, #6
 8002478:	d914      	bls.n	80024a4 <HAL_NVIC_SetPriority+0x44>
 800247a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002480:	fa05 f404 	lsl.w	r4, r5, r4
 8002484:	ea21 0104 	bic.w	r1, r1, r4
 8002488:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248a:	fa05 f303 	lsl.w	r3, r5, r3
 800248e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002492:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002494:	2800      	cmp	r0, #0
 8002496:	db07      	blt.n	80024a8 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	0109      	lsls	r1, r1, #4
 800249a:	b2c9      	uxtb	r1, r1
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_NVIC_SetPriority+0x5c>)
 800249e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024a0:	bc30      	pop	{r4, r5}
 80024a2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a4:	2300      	movs	r3, #0
 80024a6:	e7e9      	b.n	800247c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	f000 000f 	and.w	r0, r0, #15
 80024ac:	0109      	lsls	r1, r1, #4
 80024ae:	b2c9      	uxtb	r1, r1
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_NVIC_SetPriority+0x60>)
 80024b2:	5419      	strb	r1, [r3, r0]
 80024b4:	e7f4      	b.n	80024a0 <HAL_NVIC_SetPriority+0x40>
 80024b6:	bf00      	nop
 80024b8:	e000ed00 	.word	0xe000ed00
 80024bc:	e000e400 	.word	0xe000e400
 80024c0:	e000ed14 	.word	0xe000ed14

080024c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024c4:	2800      	cmp	r0, #0
 80024c6:	db07      	blt.n	80024d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c8:	f000 021f 	and.w	r2, r0, #31
 80024cc:	0940      	lsrs	r0, r0, #5
 80024ce:	2301      	movs	r3, #1
 80024d0:	4093      	lsls	r3, r2
 80024d2:	4a02      	ldr	r2, [pc, #8]	; (80024dc <HAL_NVIC_EnableIRQ+0x18>)
 80024d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	3801      	subs	r0, #1
 80024e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024e6:	d20a      	bcs.n	80024fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_SYSTICK_Config+0x24>)
 80024ea:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_SYSTICK_Config+0x28>)
 80024ee:	21f0      	movs	r1, #240	; 0xf0
 80024f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	2000      	movs	r0, #0
 80024f6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800250c:	2800      	cmp	r0, #0
 800250e:	d038      	beq.n	8002582 <HAL_CRC_Init+0x76>
{
 8002510:	b510      	push	{r4, lr}
 8002512:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002514:	7f43      	ldrb	r3, [r0, #29]
 8002516:	b31b      	cbz	r3, 8002560 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800251c:	7923      	ldrb	r3, [r4, #4]
 800251e:	bb1b      	cbnz	r3, 8002568 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_CRC_Init+0x7c>)
 8002524:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6893      	ldr	r3, [r2, #8]
 800252a:	f023 0318 	bic.w	r3, r3, #24
 800252e:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002530:	7963      	ldrb	r3, [r4, #5]
 8002532:	bb13      	cbnz	r3, 800257a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800253a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800253c:	6822      	ldr	r2, [r4, #0]
 800253e:	6893      	ldr	r3, [r2, #8]
 8002540:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002544:	6961      	ldr	r1, [r4, #20]
 8002546:	430b      	orrs	r3, r1
 8002548:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	6893      	ldr	r3, [r2, #8]
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	69a1      	ldr	r1, [r4, #24]
 8002554:	430b      	orrs	r3, r1
 8002556:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002558:	2301      	movs	r3, #1
 800255a:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
}
 800255e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002560:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002562:	f003 fd33 	bl	8005fcc <HAL_CRC_MspInit>
 8002566:	e7d7      	b.n	8002518 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002568:	68e2      	ldr	r2, [r4, #12]
 800256a:	68a1      	ldr	r1, [r4, #8]
 800256c:	4620      	mov	r0, r4
 800256e:	f000 f80d 	bl	800258c <HAL_CRCEx_Polynomial_Set>
 8002572:	2800      	cmp	r0, #0
 8002574:	d0dc      	beq.n	8002530 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8002576:	2001      	movs	r0, #1
 8002578:	e7f1      	b.n	800255e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	6922      	ldr	r2, [r4, #16]
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	e7dc      	b.n	800253c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	04c11db7 	.word	0x04c11db7

0800258c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800258c:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800258e:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002590:	1e65      	subs	r5, r4, #1
 8002592:	b13c      	cbz	r4, 80025a4 <HAL_CRCEx_Polynomial_Set+0x18>
 8002594:	f005 031f 	and.w	r3, r5, #31
 8002598:	fa21 f303 	lsr.w	r3, r1, r3
 800259c:	462c      	mov	r4, r5
 800259e:	f013 0f01 	tst.w	r3, #1
 80025a2:	d0f5      	beq.n	8002590 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80025a4:	2a18      	cmp	r2, #24
 80025a6:	d823      	bhi.n	80025f0 <HAL_CRCEx_Polynomial_Set+0x64>
 80025a8:	e8df f002 	tbb	[pc, r2]
 80025ac:	2222220f 	.word	0x2222220f
 80025b0:	22222222 	.word	0x22222222
 80025b4:	2222221e 	.word	0x2222221e
 80025b8:	22222222 	.word	0x22222222
 80025bc:	2222221a 	.word	0x2222221a
 80025c0:	22222222 	.word	0x22222222
 80025c4:	0d          	.byte	0x0d
 80025c5:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80025c6:	2d06      	cmp	r5, #6
 80025c8:	d814      	bhi.n	80025f4 <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025ca:	6803      	ldr	r3, [r0, #0]
 80025cc:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025ce:	6801      	ldr	r1, [r0, #0]
 80025d0:	688b      	ldr	r3, [r1, #8]
 80025d2:	f023 0318 	bic.w	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	608a      	str	r2, [r1, #8]
 80025da:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80025dc:	bc30      	pop	{r4, r5}
 80025de:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 80025e0:	2d07      	cmp	r5, #7
 80025e2:	d9f2      	bls.n	80025ca <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
 80025e6:	e7f9      	b.n	80025dc <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 80025e8:	2d0f      	cmp	r5, #15
 80025ea:	d9ee      	bls.n	80025ca <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
 80025ee:	e7f5      	b.n	80025dc <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	e7f3      	b.n	80025dc <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e7f1      	b.n	80025dc <HAL_CRCEx_Polynomial_Set+0x50>

080025f8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f8:	6802      	ldr	r2, [r0, #0]
 80025fa:	b2d3      	uxtb	r3, r2
 80025fc:	3b10      	subs	r3, #16
 80025fe:	4909      	ldr	r1, [pc, #36]	; (8002624 <DMA_CalcBaseAndBitshift+0x2c>)
 8002600:	fba1 1303 	umull	r1, r3, r1, r3
 8002604:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <DMA_CalcBaseAndBitshift+0x30>)
 8002608:	5cc9      	ldrb	r1, [r1, r3]
 800260a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800260c:	2b03      	cmp	r3, #3
 800260e:	d804      	bhi.n	800261a <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <DMA_CalcBaseAndBitshift+0x34>)
 8002612:	4013      	ands	r3, r2
 8002614:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002616:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002618:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <DMA_CalcBaseAndBitshift+0x34>)
 800261c:	4013      	ands	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	6583      	str	r3, [r0, #88]	; 0x58
 8002622:	e7f8      	b.n	8002616 <DMA_CalcBaseAndBitshift+0x1e>
 8002624:	aaaaaaab 	.word	0xaaaaaaab
 8002628:	0800a4b8 	.word	0x0800a4b8
 800262c:	fffffc00 	.word	0xfffffc00

08002630 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002630:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002632:	6982      	ldr	r2, [r0, #24]
 8002634:	b992      	cbnz	r2, 800265c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002636:	2b01      	cmp	r3, #1
 8002638:	d00a      	beq.n	8002650 <DMA_CheckFifoParam+0x20>
 800263a:	b11b      	cbz	r3, 8002644 <DMA_CheckFifoParam+0x14>
 800263c:	2b02      	cmp	r3, #2
 800263e:	d001      	beq.n	8002644 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002644:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002646:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800264a:	d12c      	bne.n	80026a6 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2000      	movs	r0, #0
 800264e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002650:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002656:	d028      	beq.n	80026aa <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2000      	movs	r0, #0
 800265a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002660:	d005      	beq.n	800266e <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002662:	2b02      	cmp	r3, #2
 8002664:	d929      	bls.n	80026ba <DMA_CheckFifoParam+0x8a>
 8002666:	2b03      	cmp	r3, #3
 8002668:	d015      	beq.n	8002696 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800266a:	2000      	movs	r0, #0
 800266c:	4770      	bx	lr
    switch (tmp)
 800266e:	2b03      	cmp	r3, #3
 8002670:	d803      	bhi.n	800267a <DMA_CheckFifoParam+0x4a>
 8002672:	e8df f003 	tbb	[pc, r3]
 8002676:	041c      	.short	0x041c
 8002678:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002680:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002684:	d115      	bne.n	80026b2 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2000      	movs	r0, #0
 8002688:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800268c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002690:	d011      	beq.n	80026b6 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002696:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002698:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800269c:	d001      	beq.n	80026a2 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800269e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80026a0:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2000      	movs	r0, #0
 80026a4:	4770      	bx	lr
        status = HAL_ERROR;
 80026a6:	2001      	movs	r0, #1
 80026a8:	4770      	bx	lr
        status = HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
 80026ac:	4770      	bx	lr
      status = HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	4770      	bx	lr
        status = HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
 80026b4:	4770      	bx	lr
        status = HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
 80026b8:	4770      	bx	lr
      status = HAL_ERROR;
 80026ba:	2001      	movs	r0, #1
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_DMA_Init>:
{
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff fbca 	bl	8001e5c <HAL_GetTick>
  if(hdma == NULL)
 80026c8:	2c00      	cmp	r4, #0
 80026ca:	d05b      	beq.n	8002784 <HAL_DMA_Init+0xc4>
 80026cc:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80026ce:	2300      	movs	r3, #0
 80026d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f012 0f01 	tst.w	r2, #1
 80026ec:	d00a      	beq.n	8002704 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ee:	f7ff fbb5 	bl	8001e5c <HAL_GetTick>
 80026f2:	1b40      	subs	r0, r0, r5
 80026f4:	2805      	cmp	r0, #5
 80026f6:	d9f5      	bls.n	80026e4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f8:	2320      	movs	r3, #32
 80026fa:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fc:	2003      	movs	r0, #3
 80026fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002702:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002704:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002706:	4820      	ldr	r0, [pc, #128]	; (8002788 <HAL_DMA_Init+0xc8>)
 8002708:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270a:	6861      	ldr	r1, [r4, #4]
 800270c:	68a2      	ldr	r2, [r4, #8]
 800270e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002710:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002714:	6921      	ldr	r1, [r4, #16]
 8002716:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271c:	69a1      	ldr	r1, [r4, #24]
 800271e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002720:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002724:	6a21      	ldr	r1, [r4, #32]
 8002726:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002728:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800272c:	2904      	cmp	r1, #4
 800272e:	d01e      	beq.n	800276e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002730:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002732:	6826      	ldr	r6, [r4, #0]
 8002734:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002736:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800273a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800273c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273e:	2b04      	cmp	r3, #4
 8002740:	d107      	bne.n	8002752 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002744:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002748:	b11b      	cbz	r3, 8002752 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ff70 	bl	8002630 <DMA_CheckFifoParam>
 8002750:	b990      	cbnz	r0, 8002778 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002752:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff ff4f 	bl	80025f8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800275c:	233f      	movs	r3, #63	; 0x3f
 800275e:	4093      	lsls	r3, r2
 8002760:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002762:	2000      	movs	r0, #0
 8002764:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	2301      	movs	r3, #1
 8002768:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800276c:	e7c9      	b.n	8002702 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800276e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002770:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002772:	4301      	orrs	r1, r0
 8002774:	430a      	orrs	r2, r1
 8002776:	e7db      	b.n	8002730 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800277c:	2001      	movs	r0, #1
 800277e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002782:	e7be      	b.n	8002702 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
 8002786:	e7bc      	b.n	8002702 <HAL_DMA_Init+0x42>
 8002788:	f010803f 	.word	0xf010803f

0800278c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
 800279c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800279e:	2305      	movs	r3, #5
 80027a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80027a4:	6802      	ldr	r2, [r0, #0]
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80027ae:	2000      	movs	r0, #0
}
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_DMA_IRQHandler>:
{
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80027be:	4b72      	ldr	r3, [pc, #456]	; (8002988 <HAL_DMA_IRQHandler+0x1d4>)
 80027c0:	681d      	ldr	r5, [r3, #0]
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_DMA_IRQHandler+0x1d8>)
 80027c4:	fba3 3505 	umull	r3, r5, r3, r5
 80027c8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ca:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80027cc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027d0:	2308      	movs	r3, #8
 80027d2:	4093      	lsls	r3, r2
 80027d4:	4233      	tst	r3, r6
 80027d6:	d010      	beq.n	80027fa <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f012 0f04 	tst.w	r2, #4
 80027e0:	d00b      	beq.n	80027fa <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f022 0204 	bic.w	r2, r2, #4
 80027e8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027ec:	2308      	movs	r3, #8
 80027ee:	4093      	lsls	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80027fc:	2301      	movs	r3, #1
 80027fe:	4093      	lsls	r3, r2
 8002800:	4233      	tst	r3, r6
 8002802:	d009      	beq.n	8002818 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	6952      	ldr	r2, [r2, #20]
 8002808:	f012 0f80 	tst.w	r2, #128	; 0x80
 800280c:	d004      	beq.n	8002818 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800280e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002810:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800281a:	2304      	movs	r3, #4
 800281c:	4093      	lsls	r3, r2
 800281e:	4233      	tst	r3, r6
 8002820:	d009      	beq.n	8002836 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	f012 0f02 	tst.w	r2, #2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800282c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800282e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002838:	2310      	movs	r3, #16
 800283a:	4093      	lsls	r3, r2
 800283c:	4233      	tst	r3, r6
 800283e:	d024      	beq.n	800288a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	f012 0f08 	tst.w	r2, #8
 8002848:	d01f      	beq.n	800288a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800284a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002854:	d00d      	beq.n	8002872 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800285c:	d104      	bne.n	8002868 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800285e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002860:	b19b      	cbz	r3, 800288a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002862:	4620      	mov	r0, r4
 8002864:	4798      	blx	r3
 8002866:	e010      	b.n	800288a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002868:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800286a:	b173      	cbz	r3, 800288a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800286c:	4620      	mov	r0, r4
 800286e:	4798      	blx	r3
 8002870:	e00b      	b.n	800288a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002878:	d103      	bne.n	8002882 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f022 0208 	bic.w	r2, r2, #8
 8002880:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002884:	b10b      	cbz	r3, 800288a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002886:	4620      	mov	r0, r4
 8002888:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800288c:	2320      	movs	r3, #32
 800288e:	4093      	lsls	r3, r2
 8002890:	4233      	tst	r3, r6
 8002892:	d055      	beq.n	8002940 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	f012 0f10 	tst.w	r2, #16
 800289c:	d050      	beq.n	8002940 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800289e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028a0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d00e      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80028b2:	d033      	beq.n	800291c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80028ba:	d12a      	bne.n	8002912 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80028bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03e      	beq.n	8002940 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80028c2:	4620      	mov	r0, r4
 80028c4:	4798      	blx	r3
 80028c6:	e03b      	b.n	8002940 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	f023 0316 	bic.w	r3, r3, #22
 80028d0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	6953      	ldr	r3, [r2, #20]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028de:	b1a3      	cbz	r3, 800290a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e0:	6822      	ldr	r2, [r4, #0]
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f023 0308 	bic.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028ec:	233f      	movs	r3, #63	; 0x3f
 80028ee:	4093      	lsls	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80028f2:	2300      	movs	r3, #0
 80028f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80028fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03f      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002904:	4620      	mov	r0, r4
 8002906:	4798      	blx	r3
 8002908:	e03c      	b.n	8002984 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800290a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e7      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x12c>
 8002910:	e7eb      	b.n	80028ea <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002914:	b1a3      	cbz	r3, 8002940 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002916:	4620      	mov	r0, r4
 8002918:	4798      	blx	r3
 800291a:	e011      	b.n	8002940 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002922:	d109      	bne.n	8002938 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f022 0210 	bic.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800292c:	2300      	movs	r3, #0
 800292e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002932:	2301      	movs	r3, #1
 8002934:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800293a:	b10b      	cbz	r3, 8002940 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800293c:	4620      	mov	r0, r4
 800293e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002940:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002942:	b1fb      	cbz	r3, 8002984 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002944:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002946:	f013 0f01 	tst.w	r3, #1
 800294a:	d017      	beq.n	800297c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800294c:	2305      	movs	r3, #5
 800294e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800295c:	9b01      	ldr	r3, [sp, #4]
 800295e:	3301      	adds	r3, #1
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	42ab      	cmp	r3, r5
 8002964:	d804      	bhi.n	8002970 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f013 0f01 	tst.w	r3, #1
 800296e:	d1f5      	bne.n	800295c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002970:	2300      	movs	r3, #0
 8002972:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	2301      	movs	r3, #1
 8002978:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800297c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800297e:	b10b      	cbz	r3, 8002984 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002980:	4620      	mov	r0, r4
 8002982:	4798      	blx	r3
}
 8002984:	b003      	add	sp, #12
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002988:	20000014 	.word	0x20000014
 800298c:	1b4e81b5 	.word	0x1b4e81b5

08002990 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002990:	b338      	cbz	r0, 80029e2 <HAL_DMA2D_Init+0x52>
{
 8002992:	b510      	push	{r4, lr}
 8002994:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002996:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800299a:	b1eb      	cbz	r3, 80029d8 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800299c:	2302      	movs	r3, #2
 800299e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029a2:	6822      	ldr	r2, [r4, #0]
 80029a4:	6813      	ldr	r3, [r2, #0]
 80029a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029aa:	6861      	ldr	r1, [r4, #4]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80029b4:	f023 0307 	bic.w	r3, r3, #7
 80029b8:	68a1      	ldr	r1, [r4, #8]
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_DMA2D_Init+0x58>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	68e1      	ldr	r1, [r4, #12]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029cc:	2000      	movs	r0, #0
 80029ce:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80029d6:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80029d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80029dc:	f003 fb0c 	bl	8005ff8 <HAL_DMA2D_MspInit>
 80029e0:	e7dc      	b.n	800299c <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 80029e2:	2001      	movs	r0, #1
}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	ffffc000 	.word	0xffffc000

080029ec <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d059      	beq.n	8002aa8 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80029f4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80029f6:	2301      	movs	r3, #1
 80029f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a02:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	1c8b      	adds	r3, r1, #2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	58c3      	ldr	r3, [r0, r3]
 8002a0e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a12:	3a09      	subs	r2, #9
 8002a14:	2a01      	cmp	r2, #1
 8002a16:	d91e      	bls.n	8002a56 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a18:	1c8a      	adds	r2, r1, #2
 8002a1a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a24:	bb41      	cbnz	r1, 8002a78 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a26:	6804      	ldr	r4, [r0, #0]
 8002a28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002a2a:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_DMA2D_ConfigLayer+0xc0>)
 8002a2c:	402a      	ands	r2, r5
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a32:	6802      	ldr	r2, [r0, #0]
 8002a34:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002a38:	699c      	ldr	r4, [r3, #24]
 8002a3a:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	3b09      	subs	r3, #9
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d910      	bls.n	8002a66 <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002a50:	4618      	mov	r0, r3
}
 8002a52:	bc30      	pop	{r4, r5}
 8002a54:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a56:	1c8a      	adds	r2, r1, #2
 8002a58:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002a5c:	6852      	ldr	r2, [r2, #4]
 8002a5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a62:	4313      	orrs	r3, r2
 8002a64:	e7de      	b.n	8002a24 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002a66:	3102      	adds	r1, #2
 8002a68:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002a6c:	684b      	ldr	r3, [r1, #4]
 8002a6e:	6802      	ldr	r2, [r0, #0]
 8002a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	6293      	str	r3, [r2, #40]	; 0x28
 8002a76:	e7e5      	b.n	8002a44 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a78:	6804      	ldr	r4, [r0, #0]
 8002a7a:	69e5      	ldr	r5, [r4, #28]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_DMA2D_ConfigLayer+0xc0>)
 8002a7e:	402a      	ands	r2, r5
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a84:	6802      	ldr	r2, [r0, #0]
 8002a86:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002a8a:	699c      	ldr	r4, [r3, #24]
 8002a8c:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	3b09      	subs	r3, #9
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d8d6      	bhi.n	8002a44 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002a96:	3102      	adds	r1, #2
 8002a98:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002a9c:	684b      	ldr	r3, [r1, #4]
 8002a9e:	6802      	ldr	r2, [r0, #0]
 8002aa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aa4:	6213      	str	r3, [r2, #32]
 8002aa6:	e7cd      	b.n	8002a44 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002aa8:	2002      	movs	r0, #2
}
 8002aaa:	4770      	bx	lr
 8002aac:	00fcfff0 	.word	0x00fcfff0

08002ab0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f200 80e2 	bhi.w	8002c7c <HAL_GPIO_Init+0x1cc>
{
 8002ab8:	b4f0      	push	{r4, r5, r6, r7}
 8002aba:	b082      	sub	sp, #8
 8002abc:	e039      	b.n	8002b32 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002abe:	2209      	movs	r2, #9
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	40b2      	lsls	r2, r6
 8002ac6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ac8:	3402      	adds	r4, #2
 8002aca:	4e6d      	ldr	r6, [pc, #436]	; (8002c80 <HAL_GPIO_Init+0x1d0>)
 8002acc:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4a6c      	ldr	r2, [pc, #432]	; (8002c84 <HAL_GPIO_Init+0x1d4>)
 8002ad2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	43ea      	mvns	r2, r5
 8002ad6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ada:	684f      	ldr	r7, [r1, #4]
 8002adc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002ae0:	d001      	beq.n	8002ae6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002ae2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002ae6:	4c67      	ldr	r4, [pc, #412]	; (8002c84 <HAL_GPIO_Init+0x1d4>)
 8002ae8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002aea:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	684f      	ldr	r7, [r1, #4]
 8002af2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002af6:	d001      	beq.n	8002afc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002af8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002afc:	4c61      	ldr	r4, [pc, #388]	; (8002c84 <HAL_GPIO_Init+0x1d4>)
 8002afe:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b00:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b06:	684f      	ldr	r7, [r1, #4]
 8002b08:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002b0c:	d001      	beq.n	8002b12 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002b0e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002b12:	4c5c      	ldr	r4, [pc, #368]	; (8002c84 <HAL_GPIO_Init+0x1d4>)
 8002b14:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002b16:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1a:	684e      	ldr	r6, [r1, #4]
 8002b1c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002b20:	d001      	beq.n	8002b26 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002b22:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002b26:	4c57      	ldr	r4, [pc, #348]	; (8002c84 <HAL_GPIO_Init+0x1d4>)
 8002b28:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	f200 80a2 	bhi.w	8002c76 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b36:	680c      	ldr	r4, [r1, #0]
 8002b38:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002b3c:	42aa      	cmp	r2, r5
 8002b3e:	d1f4      	bne.n	8002b2a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b40:	684c      	ldr	r4, [r1, #4]
 8002b42:	2c12      	cmp	r4, #18
 8002b44:	bf18      	it	ne
 8002b46:	2c02      	cmpne	r4, #2
 8002b48:	d110      	bne.n	8002b6c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8002b4a:	08de      	lsrs	r6, r3, #3
 8002b4c:	3608      	adds	r6, #8
 8002b4e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b52:	f003 0407 	and.w	r4, r3, #7
 8002b56:	00a7      	lsls	r7, r4, #2
 8002b58:	240f      	movs	r4, #15
 8002b5a:	40bc      	lsls	r4, r7
 8002b5c:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b60:	690c      	ldr	r4, [r1, #16]
 8002b62:	40bc      	lsls	r4, r7
 8002b64:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8002b68:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002b6c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b6e:	005f      	lsls	r7, r3, #1
 8002b70:	2603      	movs	r6, #3
 8002b72:	40be      	lsls	r6, r7
 8002b74:	43f6      	mvns	r6, r6
 8002b76:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b7a:	684c      	ldr	r4, [r1, #4]
 8002b7c:	f004 0403 	and.w	r4, r4, #3
 8002b80:	40bc      	lsls	r4, r7
 8002b82:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002b86:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b88:	684c      	ldr	r4, [r1, #4]
 8002b8a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002b8e:	2c11      	cmp	r4, #17
 8002b90:	bf18      	it	ne
 8002b92:	f1bc 0f01 	cmpne.w	ip, #1
 8002b96:	d901      	bls.n	8002b9c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b98:	2c12      	cmp	r4, #18
 8002b9a:	d111      	bne.n	8002bc0 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8002b9c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b9e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ba2:	68cc      	ldr	r4, [r1, #12]
 8002ba4:	40bc      	lsls	r4, r7
 8002ba6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002baa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bae:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002bb2:	684c      	ldr	r4, [r1, #4]
 8002bb4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8002bbe:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002bc0:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc2:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bc4:	688a      	ldr	r2, [r1, #8]
 8002bc6:	40ba      	lsls	r2, r7
 8002bc8:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002bca:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bcc:	684a      	ldr	r2, [r1, #4]
 8002bce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002bd2:	d0aa      	beq.n	8002b2a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <HAL_GPIO_Init+0x1d8>)
 8002bd6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002bd8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002bdc:	6454      	str	r4, [r2, #68]	; 0x44
 8002bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002be0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002be8:	089c      	lsrs	r4, r3, #2
 8002bea:	1ca6      	adds	r6, r4, #2
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_GPIO_Init+0x1d0>)
 8002bee:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	0096      	lsls	r6, r2, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	40b2      	lsls	r2, r6
 8002bfc:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c00:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_GPIO_Init+0x1dc>)
 8002c02:	4290      	cmp	r0, r2
 8002c04:	f43f af5d 	beq.w	8002ac2 <HAL_GPIO_Init+0x12>
 8002c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c0c:	4290      	cmp	r0, r2
 8002c0e:	d022      	beq.n	8002c56 <HAL_GPIO_Init+0x1a6>
 8002c10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d020      	beq.n	8002c5a <HAL_GPIO_Init+0x1aa>
 8002c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1c:	4290      	cmp	r0, r2
 8002c1e:	d01e      	beq.n	8002c5e <HAL_GPIO_Init+0x1ae>
 8002c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c24:	4290      	cmp	r0, r2
 8002c26:	d01c      	beq.n	8002c62 <HAL_GPIO_Init+0x1b2>
 8002c28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c2c:	4290      	cmp	r0, r2
 8002c2e:	d01a      	beq.n	8002c66 <HAL_GPIO_Init+0x1b6>
 8002c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c34:	4290      	cmp	r0, r2
 8002c36:	d018      	beq.n	8002c6a <HAL_GPIO_Init+0x1ba>
 8002c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c3c:	4290      	cmp	r0, r2
 8002c3e:	d016      	beq.n	8002c6e <HAL_GPIO_Init+0x1be>
 8002c40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c44:	4290      	cmp	r0, r2
 8002c46:	d014      	beq.n	8002c72 <HAL_GPIO_Init+0x1c2>
 8002c48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c4c:	4290      	cmp	r0, r2
 8002c4e:	f43f af36 	beq.w	8002abe <HAL_GPIO_Init+0xe>
 8002c52:	220a      	movs	r2, #10
 8002c54:	e736      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c56:	2201      	movs	r2, #1
 8002c58:	e734      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	e732      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c5e:	2203      	movs	r2, #3
 8002c60:	e730      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c62:	2204      	movs	r2, #4
 8002c64:	e72e      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c66:	2205      	movs	r2, #5
 8002c68:	e72c      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c6a:	2206      	movs	r2, #6
 8002c6c:	e72a      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c6e:	2207      	movs	r2, #7
 8002c70:	e728      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
 8002c72:	2208      	movs	r2, #8
 8002c74:	e726      	b.n	8002ac4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002c76:	b002      	add	sp, #8
 8002c78:	bcf0      	pop	{r4, r5, r6, r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40013c00 	.word	0x40013c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	6903      	ldr	r3, [r0, #16]
 8002c92:	4219      	tst	r1, r3
 8002c94:	d101      	bne.n	8002c9a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c96:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002c98:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	4770      	bx	lr

08002c9e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c9e:	b912      	cbnz	r2, 8002ca6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ca0:	0409      	lsls	r1, r1, #16
 8002ca2:	6181      	str	r1, [r0, #24]
  }
}
 8002ca4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002ca6:	6181      	str	r1, [r0, #24]
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4203      	tst	r3, r0
 8002cb4:	d100      	bne.n	8002cb8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002cb6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002cba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cbc:	f002 ffd8 	bl	8005c70 <HAL_GPIO_EXTI_Callback>
}
 8002cc0:	e7f9      	b.n	8002cb6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002cc2:	bf00      	nop
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cc8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cca:	684d      	ldr	r5, [r1, #4]
 8002ccc:	6804      	ldr	r4, [r0, #0]
 8002cce:	68e3      	ldr	r3, [r4, #12]
 8002cd0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002cd4:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cd6:	01d2      	lsls	r2, r2, #7
 8002cd8:	4414      	add	r4, r2
 8002cda:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ce2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ce6:	680b      	ldr	r3, [r1, #0]
 8002ce8:	6804      	ldr	r4, [r0, #0]
 8002cea:	68e6      	ldr	r6, [r4, #12]
 8002cec:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002cf0:	4433      	add	r3, r6
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4414      	add	r4, r2
 8002cf6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002cfa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002cfe:	68cd      	ldr	r5, [r1, #12]
 8002d00:	6804      	ldr	r4, [r0, #0]
 8002d02:	68e3      	ldr	r3, [r4, #12]
 8002d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d08:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d0a:	4414      	add	r4, r2
 8002d0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d10:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d18:	688b      	ldr	r3, [r1, #8]
 8002d1a:	6804      	ldr	r4, [r0, #0]
 8002d1c:	68e6      	ldr	r6, [r4, #12]
 8002d1e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002d22:	4433      	add	r3, r6
 8002d24:	3301      	adds	r3, #1
 8002d26:	4414      	add	r4, r2
 8002d28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002d2c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d30:	6803      	ldr	r3, [r0, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002d38:	f024 0407 	bic.w	r4, r4, #7
 8002d3c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	690c      	ldr	r4, [r1, #16]
 8002d46:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002d4a:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002d4e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002d52:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002d54:	6805      	ldr	r5, [r0, #0]
 8002d56:	4415      	add	r5, r2
 8002d58:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002d5c:	2400      	movs	r4, #0
 8002d5e:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002d62:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002d66:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002d6a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002d6e:	6805      	ldr	r5, [r0, #0]
 8002d70:	4415      	add	r5, r2
 8002d72:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002d76:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002d7a:	6803      	ldr	r3, [r0, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002d82:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002d86:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	694d      	ldr	r5, [r1, #20]
 8002d90:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d94:	6803      	ldr	r3, [r0, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8002d9c:	4d2d      	ldr	r5, [pc, #180]	; (8002e54 <LTDC_SetConfig+0x18c>)
 8002d9e:	4035      	ands	r5, r6
 8002da0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002da4:	69cd      	ldr	r5, [r1, #28]
 8002da6:	6a0e      	ldr	r6, [r1, #32]
 8002da8:	6803      	ldr	r3, [r0, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4335      	orrs	r5, r6
 8002dae:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8002dba:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002dc4:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002dc8:	690b      	ldr	r3, [r1, #16]
 8002dca:	b16b      	cbz	r3, 8002de8 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d03a      	beq.n	8002e46 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	bf18      	it	ne
 8002dd4:	2b04      	cmpne	r3, #4
 8002dd6:	d038      	beq.n	8002e4a <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d038      	beq.n	8002e4e <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ddc:	2b07      	cmp	r3, #7
 8002dde:	d001      	beq.n	8002de4 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e002      	b.n	8002dea <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002de4:	2302      	movs	r3, #2
 8002de6:	e000      	b.n	8002dea <LTDC_SetConfig+0x122>
    tmp = 4U;
 8002de8:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002dea:	6804      	ldr	r4, [r0, #0]
 8002dec:	4414      	add	r4, r2
 8002dee:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8002df2:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002df6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002dfa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002dfc:	fb03 f504 	mul.w	r5, r3, r4
 8002e00:	684c      	ldr	r4, [r1, #4]
 8002e02:	680e      	ldr	r6, [r1, #0]
 8002e04:	1ba4      	subs	r4, r4, r6
 8002e06:	fb03 f304 	mul.w	r3, r3, r4
 8002e0a:	3303      	adds	r3, #3
 8002e0c:	6804      	ldr	r4, [r0, #0]
 8002e0e:	4414      	add	r4, r2
 8002e10:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002e14:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8002e20:	4c0d      	ldr	r4, [pc, #52]	; (8002e58 <LTDC_SetConfig+0x190>)
 8002e22:	402c      	ands	r4, r5
 8002e24:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e28:	6803      	ldr	r3, [r0, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002e2e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	441a      	add	r2, r3
 8002e36:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8002e42:	bcf0      	pop	{r4, r5, r6, r7}
 8002e44:	4770      	bx	lr
    tmp = 3U;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e7cf      	b.n	8002dea <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e7cd      	b.n	8002dea <LTDC_SetConfig+0x122>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e7cb      	b.n	8002dea <LTDC_SetConfig+0x122>
 8002e52:	bf00      	nop
 8002e54:	fffff8f8 	.word	0xfffff8f8
 8002e58:	fffff800 	.word	0xfffff800

08002e5c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d072      	beq.n	8002f46 <HAL_LTDC_Init+0xea>
{
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002e64:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d067      	beq.n	8002f3c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	6993      	ldr	r3, [r2, #24]
 8002e76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e7a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	698a      	ldr	r2, [r1, #24]
 8002e80:	6863      	ldr	r3, [r4, #4]
 8002e82:	68a0      	ldr	r0, [r4, #8]
 8002e84:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e86:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e88:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e8a:	6920      	ldr	r0, [r4, #16]
 8002e8c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	688a      	ldr	r2, [r1, #8]
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_LTDC_Init+0xf0>)
 8002e98:	401a      	ands	r2, r3
 8002e9a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e9c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e9e:	6820      	ldr	r0, [r4, #0]
 8002ea0:	6882      	ldr	r2, [r0, #8]
 8002ea2:	69a1      	ldr	r1, [r4, #24]
 8002ea4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002eac:	6821      	ldr	r1, [r4, #0]
 8002eae:	68ca      	ldr	r2, [r1, #12]
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002eb4:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	68c2      	ldr	r2, [r0, #12]
 8002eba:	6a21      	ldr	r1, [r4, #32]
 8002ebc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	690a      	ldr	r2, [r1, #16]
 8002ec8:	401a      	ands	r2, r3
 8002eca:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002ecc:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	6902      	ldr	r2, [r0, #16]
 8002ed2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ed4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002edc:	6821      	ldr	r1, [r4, #0]
 8002ede:	694a      	ldr	r2, [r1, #20]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002ee4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	694b      	ldr	r3, [r1, #20]
 8002eea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002eec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002ef4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ef8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002efc:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002f02:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f06:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002f0c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f10:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002f14:	4303      	orrs	r3, r0
 8002f16:	4313      	orrs	r3, r2
 8002f18:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002f1e:	f043 0306 	orr.w	r3, r3, #6
 8002f22:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	6993      	ldr	r3, [r2, #24]
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002f3c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002f40:	f003 f870 	bl	8006024 <HAL_LTDC_MspInit>
 8002f44:	e792      	b.n	8002e6c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002f46:	2001      	movs	r0, #1
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	f000f800 	.word	0xf000f800

08002f50 <HAL_LTDC_ErrorCallback>:
}
 8002f50:	4770      	bx	lr

08002f52 <HAL_LTDC_LineEventCallback>:
}
 8002f52:	4770      	bx	lr

08002f54 <HAL_LTDC_ReloadEventCallback>:
}
 8002f54:	4770      	bx	lr

08002f56 <HAL_LTDC_IRQHandler>:
{
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002f5e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002f60:	f015 0f04 	tst.w	r5, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_LTDC_IRQHandler+0x16>
 8002f66:	f016 0f04 	tst.w	r6, #4
 8002f6a:	d112      	bne.n	8002f92 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002f6c:	f015 0f02 	tst.w	r5, #2
 8002f70:	d002      	beq.n	8002f78 <HAL_LTDC_IRQHandler+0x22>
 8002f72:	f016 0f02 	tst.w	r6, #2
 8002f76:	d121      	bne.n	8002fbc <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002f78:	f015 0f01 	tst.w	r5, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_LTDC_IRQHandler+0x2e>
 8002f7e:	f016 0f01 	tst.w	r6, #1
 8002f82:	d132      	bne.n	8002fea <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002f84:	f015 0f08 	tst.w	r5, #8
 8002f88:	d002      	beq.n	8002f90 <HAL_LTDC_IRQHandler+0x3a>
 8002f8a:	f016 0f08 	tst.w	r6, #8
 8002f8e:	d13d      	bne.n	800300c <HAL_LTDC_IRQHandler+0xb6>
}
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002f9a:	6803      	ldr	r3, [r0, #0]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002fa0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fac:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002fb6:	f7ff ffcb 	bl	8002f50 <HAL_LTDC_ErrorCallback>
 8002fba:	e7d7      	b.n	8002f6c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002fcc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7ff ffb4 	bl	8002f50 <HAL_LTDC_ErrorCallback>
 8002fe8:	e7c6      	b.n	8002f78 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002ffa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002ffe:	2300      	movs	r3, #0
 8003000:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff ffa4 	bl	8002f52 <HAL_LTDC_LineEventCallback>
 800300a:	e7bb      	b.n	8002f84 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800300c:	6822      	ldr	r2, [r4, #0]
 800300e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003010:	f023 0308 	bic.w	r3, r3, #8
 8003014:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800301c:	2301      	movs	r3, #1
 800301e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003022:	2300      	movs	r3, #0
 8003024:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff ff93 	bl	8002f54 <HAL_LTDC_ReloadEventCallback>
}
 800302e:	e7af      	b.n	8002f90 <HAL_LTDC_IRQHandler+0x3a>

08003030 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003030:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003034:	2b01      	cmp	r3, #1
 8003036:	d027      	beq.n	8003088 <HAL_LTDC_ConfigLayer+0x58>
{
 8003038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303c:	4694      	mov	ip, r2
 800303e:	460f      	mov	r7, r1
 8003040:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003042:	f04f 0801 	mov.w	r8, #1
 8003046:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003050:	2434      	movs	r4, #52	; 0x34
 8003052:	fb04 0402 	mla	r4, r4, r2, r0
 8003056:	3438      	adds	r4, #56	; 0x38
 8003058:	460d      	mov	r5, r1
 800305a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800306a:	4662      	mov	r2, ip
 800306c:	4639      	mov	r1, r7
 800306e:	4630      	mov	r0, r6
 8003070:	f7ff fe2a 	bl	8002cc8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003074:	6833      	ldr	r3, [r6, #0]
 8003076:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800307a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800307e:	2000      	movs	r0, #0
 8003080:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003088:	2002      	movs	r0, #2
}
 800308a:	4770      	bx	lr

0800308c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_PWREx_EnableOverDrive+0x74>)
 8003092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003094:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_PWREx_EnableOverDrive+0x78>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ae:	f7fe fed5 	bl	8001e5c <HAL_GetTick>
 80030b2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_PWREx_EnableOverDrive+0x78>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030bc:	d108      	bne.n	80030d0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030be:	f7fe fecd 	bl	8001e5c <HAL_GetTick>
 80030c2:	1b00      	subs	r0, r0, r4
 80030c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030c8:	d9f4      	bls.n	80030b4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80030ca:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80030cc:	b002      	add	sp, #8
 80030ce:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_PWREx_EnableOverDrive+0x78>)
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80030da:	f7fe febf 	bl	8001e5c <HAL_GetTick>
 80030de:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_PWREx_EnableOverDrive+0x78>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030e8:	d107      	bne.n	80030fa <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ea:	f7fe feb7 	bl	8001e5c <HAL_GetTick>
 80030ee:	1b00      	subs	r0, r0, r4
 80030f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030f4:	d9f4      	bls.n	80030e0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80030f6:	2003      	movs	r0, #3
 80030f8:	e7e8      	b.n	80030cc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80030fa:	2000      	movs	r0, #0
 80030fc:	e7e6      	b.n	80030cc <HAL_PWREx_EnableOverDrive+0x40>
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40007000 	.word	0x40007000

08003108 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003108:	2800      	cmp	r0, #0
 800310a:	f000 81db 	beq.w	80034c4 <HAL_RCC_OscConfig+0x3bc>
{
 800310e:	b570      	push	{r4, r5, r6, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	6803      	ldr	r3, [r0, #0]
 8003116:	f013 0f01 	tst.w	r3, #1
 800311a:	d029      	beq.n	8003170 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800311c:	4ba2      	ldr	r3, [pc, #648]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b04      	cmp	r3, #4
 8003126:	d01a      	beq.n	800315e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003128:	4b9f      	ldr	r3, [pc, #636]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d00f      	beq.n	8003154 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d040      	beq.n	80031be <HAL_RCC_OscConfig+0xb6>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d154      	bne.n	80031ea <HAL_RCC_OscConfig+0xe2>
 8003140:	4b99      	ldr	r3, [pc, #612]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e039      	b.n	80031c8 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003154:	4b94      	ldr	r3, [pc, #592]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800315c:	d0ea      	beq.n	8003134 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315e:	4b92      	ldr	r3, [pc, #584]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003166:	d003      	beq.n	8003170 <HAL_RCC_OscConfig+0x68>
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 81ac 	beq.w	80034c8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	f013 0f02 	tst.w	r3, #2
 8003176:	d075      	beq.n	8003264 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003178:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f013 0f0c 	tst.w	r3, #12
 8003180:	d05e      	beq.n	8003240 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b89      	ldr	r3, [pc, #548]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d053      	beq.n	8003236 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800318e:	68e3      	ldr	r3, [r4, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 808a 	beq.w	80032aa <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003196:	4a84      	ldr	r2, [pc, #528]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fe5c 	bl	8001e5c <HAL_GetTick>
 80031a4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b80      	ldr	r3, [pc, #512]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f013 0f02 	tst.w	r3, #2
 80031ae:	d173      	bne.n	8003298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe fe54 	bl	8001e5c <HAL_GetTick>
 80031b4:	1b40      	subs	r0, r0, r5
 80031b6:	2802      	cmp	r0, #2
 80031b8:	d9f5      	bls.n	80031a6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80031ba:	2003      	movs	r0, #3
 80031bc:	e187      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031be:	4a7a      	ldr	r2, [pc, #488]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	6863      	ldr	r3, [r4, #4]
 80031ca:	b32b      	cbz	r3, 8003218 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80031cc:	f7fe fe46 	bl	8001e5c <HAL_GetTick>
 80031d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b75      	ldr	r3, [pc, #468]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031da:	d1c9      	bne.n	8003170 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fe3e 	bl	8001e5c <HAL_GetTick>
 80031e0:	1b40      	subs	r0, r0, r5
 80031e2:	2864      	cmp	r0, #100	; 0x64
 80031e4:	d9f5      	bls.n	80031d2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80031e6:	2003      	movs	r0, #3
 80031e8:	e171      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ee:	d009      	beq.n	8003204 <HAL_RCC_OscConfig+0xfc>
 80031f0:	4b6d      	ldr	r3, [pc, #436]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e7e1      	b.n	80031c8 <HAL_RCC_OscConfig+0xc0>
 8003204:	4b68      	ldr	r3, [pc, #416]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e7d7      	b.n	80031c8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003218:	f7fe fe20 	bl	8001e5c <HAL_GetTick>
 800321c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003226:	d0a3      	beq.n	8003170 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe fe18 	bl	8001e5c <HAL_GetTick>
 800322c:	1b40      	subs	r0, r0, r5
 800322e:	2864      	cmp	r0, #100	; 0x64
 8003230:	d9f5      	bls.n	800321e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8003232:	2003      	movs	r0, #3
 8003234:	e14b      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b5c      	ldr	r3, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800323e:	d1a6      	bne.n	800318e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f013 0f02 	tst.w	r3, #2
 8003248:	d004      	beq.n	8003254 <HAL_RCC_OscConfig+0x14c>
 800324a:	68e3      	ldr	r3, [r4, #12]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
 8003252:	e13c      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800325c:	6921      	ldr	r1, [r4, #16]
 800325e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003262:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	f013 0f08 	tst.w	r3, #8
 800326a:	d046      	beq.n	80032fa <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326c:	6963      	ldr	r3, [r4, #20]
 800326e:	b383      	cbz	r3, 80032d2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003270:	4a4d      	ldr	r2, [pc, #308]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003272:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe fdef 	bl	8001e5c <HAL_GetTick>
 800327e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003280:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f013 0f02 	tst.w	r3, #2
 8003288:	d137      	bne.n	80032fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fde7 	bl	8001e5c <HAL_GetTick>
 800328e:	1b40      	subs	r0, r0, r5
 8003290:	2802      	cmp	r0, #2
 8003292:	d9f5      	bls.n	8003280 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8003294:	2003      	movs	r0, #3
 8003296:	e11a      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4a43      	ldr	r2, [pc, #268]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032a0:	6921      	ldr	r1, [r4, #16]
 80032a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e7dc      	b.n	8003264 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80032aa:	4a3f      	ldr	r2, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80032ac:	6813      	ldr	r3, [r2, #0]
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032b4:	f7fe fdd2 	bl	8001e5c <HAL_GetTick>
 80032b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f013 0f02 	tst.w	r3, #2
 80032c2:	d0cf      	beq.n	8003264 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe fdca 	bl	8001e5c <HAL_GetTick>
 80032c8:	1b40      	subs	r0, r0, r5
 80032ca:	2802      	cmp	r0, #2
 80032cc:	d9f5      	bls.n	80032ba <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80032ce:	2003      	movs	r0, #3
 80032d0:	e0fd      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80032d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe fdbe 	bl	8001e5c <HAL_GetTick>
 80032e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f013 0f02 	tst.w	r3, #2
 80032ea:	d006      	beq.n	80032fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe fdb6 	bl	8001e5c <HAL_GetTick>
 80032f0:	1b40      	subs	r0, r0, r5
 80032f2:	2802      	cmp	r0, #2
 80032f4:	d9f5      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80032f6:	2003      	movs	r0, #3
 80032f8:	e0e9      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	f013 0f04 	tst.w	r3, #4
 8003300:	d07e      	beq.n	8003400 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800330a:	d11e      	bne.n	800334a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003320:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCC_OscConfig+0x2a4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f413 7f80 	tst.w	r3, #256	; 0x100
 800332a:	d010      	beq.n	800334e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	68a3      	ldr	r3, [r4, #8]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d021      	beq.n	8003376 <HAL_RCC_OscConfig+0x26e>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d13c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2a8>
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	671a      	str	r2, [r3, #112]	; 0x70
 8003340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	671a      	str	r2, [r3, #112]	; 0x70
 8003348:	e01a      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800334a:	2500      	movs	r5, #0
 800334c:	e7e9      	b.n	8003322 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_RCC_OscConfig+0x2a4>)
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003358:	f7fe fd80 	bl	8001e5c <HAL_GetTick>
 800335c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_RCC_OscConfig+0x2a4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003366:	d1e1      	bne.n	800332c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fe fd78 	bl	8001e5c <HAL_GetTick>
 800336c:	1b80      	subs	r0, r0, r6
 800336e:	2864      	cmp	r0, #100	; 0x64
 8003370:	d9f5      	bls.n	800335e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8003372:	2003      	movs	r0, #3
 8003374:	e0ab      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 8003378:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	68a3      	ldr	r3, [r4, #8]
 8003382:	b35b      	cbz	r3, 80033dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe fd6a 	bl	8001e5c <HAL_GetTick>
 8003388:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_RCC_OscConfig+0x2a0>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	f013 0f02 	tst.w	r3, #2
 8003392:	d134      	bne.n	80033fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe fd62 	bl	8001e5c <HAL_GetTick>
 8003398:	1b80      	subs	r0, r0, r6
 800339a:	f241 3388 	movw	r3, #5000	; 0x1388
 800339e:	4298      	cmp	r0, r3
 80033a0:	d9f3      	bls.n	800338a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80033a2:	2003      	movs	r0, #3
 80033a4:	e093      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d009      	beq.n	80033c8 <HAL_RCC_OscConfig+0x2c0>
 80033b4:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 80033b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	671a      	str	r2, [r3, #112]	; 0x70
 80033be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033c0:	f022 0204 	bic.w	r2, r2, #4
 80033c4:	671a      	str	r2, [r3, #112]	; 0x70
 80033c6:	e7db      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 80033ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033cc:	f042 0204 	orr.w	r2, r2, #4
 80033d0:	671a      	str	r2, [r3, #112]	; 0x70
 80033d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	671a      	str	r2, [r3, #112]	; 0x70
 80033da:	e7d1      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fd3e 	bl	8001e5c <HAL_GetTick>
 80033e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f013 0f02 	tst.w	r3, #2
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe fd36 	bl	8001e5c <HAL_GetTick>
 80033f0:	1b80      	subs	r0, r0, r6
 80033f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80033f6:	4298      	cmp	r0, r3
 80033f8:	d9f3      	bls.n	80033e2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80033fa:	2003      	movs	r0, #3
 80033fc:	e067      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fe:	b9f5      	cbnz	r5, 800343e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003400:	69a3      	ldr	r3, [r4, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d062      	beq.n	80034cc <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003406:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	f002 020c 	and.w	r2, r2, #12
 800340e:	2a08      	cmp	r2, #8
 8003410:	d05f      	beq.n	80034d2 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003412:	2b02      	cmp	r3, #2
 8003414:	d019      	beq.n	800344a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4a30      	ldr	r2, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fd1c 	bl	8001e5c <HAL_GetTick>
 8003424:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800342e:	d047      	beq.n	80034c0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fd14 	bl	8001e5c <HAL_GetTick>
 8003434:	1b00      	subs	r0, r0, r4
 8003436:	2802      	cmp	r0, #2
 8003438:	d9f5      	bls.n	8003426 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800343a:	2003      	movs	r0, #3
 800343c:	e047      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 8003440:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	e7da      	b.n	8003400 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800344a:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003454:	f7fe fd02 	bl	8001e5c <HAL_GetTick>
 8003458:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003462:	d006      	beq.n	8003472 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fcfa 	bl	8001e5c <HAL_GetTick>
 8003468:	1b40      	subs	r0, r0, r5
 800346a:	2802      	cmp	r0, #2
 800346c:	d9f5      	bls.n	800345a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
 8003470:	e02d      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	69e3      	ldr	r3, [r4, #28]
 8003474:	6a22      	ldr	r2, [r4, #32]
 8003476:	4313      	orrs	r3, r2
 8003478:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800347a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800347e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003480:	0852      	lsrs	r2, r2, #1
 8003482:	3a01      	subs	r2, #1
 8003484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800348a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800348e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003492:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 8003494:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800349e:	f7fe fcdd 	bl	8001e5c <HAL_GetTick>
 80034a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCC_OscConfig+0x3d0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fcd5 	bl	8001e5c <HAL_GetTick>
 80034b2:	1b00      	subs	r0, r0, r4
 80034b4:	2802      	cmp	r0, #2
 80034b6:	d9f5      	bls.n	80034a4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80034b8:	2003      	movs	r0, #3
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80034bc:	2000      	movs	r0, #0
 80034be:	e006      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
 80034c0:	2000      	movs	r0, #0
 80034c2:	e004      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
}
 80034c6:	4770      	bx	lr
        return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80034cc:	2000      	movs	r0, #0
}
 80034ce:	b002      	add	sp, #8
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7fb      	b.n	80034ce <HAL_RCC_OscConfig+0x3c6>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d044      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x96>
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4823      	ldr	r0, [pc, #140]	; (800357c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ee:	4770      	bx	lr
{
 80034f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003502:	d013      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800350c:	2300      	movs	r3, #0
 800350e:	481c      	ldr	r0, [pc, #112]	; (8003580 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003510:	fba1 0100 	umull	r0, r1, r1, r0
 8003514:	f7fd fbd8 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003520:	3301      	adds	r3, #1
 8003522:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003524:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003528:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003534:	461e      	mov	r6, r3
 8003536:	2700      	movs	r7, #0
 8003538:	015c      	lsls	r4, r3, #5
 800353a:	2500      	movs	r5, #0
 800353c:	1ae4      	subs	r4, r4, r3
 800353e:	eb65 0507 	sbc.w	r5, r5, r7
 8003542:	01a9      	lsls	r1, r5, #6
 8003544:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003548:	01a0      	lsls	r0, r4, #6
 800354a:	1b00      	subs	r0, r0, r4
 800354c:	eb61 0105 	sbc.w	r1, r1, r5
 8003550:	00cb      	lsls	r3, r1, #3
 8003552:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003556:	00c4      	lsls	r4, r0, #3
 8003558:	19a0      	adds	r0, r4, r6
 800355a:	eb43 0107 	adc.w	r1, r3, r7
 800355e:	028b      	lsls	r3, r1, #10
 8003560:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003564:	0284      	lsls	r4, r0, #10
 8003566:	4620      	mov	r0, r4
 8003568:	4619      	mov	r1, r3
 800356a:	2300      	movs	r3, #0
 800356c:	f7fd fbac 	bl	8000cc8 <__aeabi_uldivmod>
 8003570:	e7d2      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	017d7840 	.word	0x017d7840

08003584 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003584:	2800      	cmp	r0, #0
 8003586:	f000 80a2 	beq.w	80036ce <HAL_RCC_ClockConfig+0x14a>
{
 800358a:	b570      	push	{r4, r5, r6, lr}
 800358c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358e:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x154>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	428b      	cmp	r3, r1
 8003598:	d20c      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_RCC_ClockConfig+0x154>)
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	f023 030f 	bic.w	r3, r3, #15
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	428b      	cmp	r3, r1
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80035b0:	2001      	movs	r0, #1
}
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	f013 0f02 	tst.w	r3, #2
 80035ba:	d017      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	f013 0f04 	tst.w	r3, #4
 80035c0:	d004      	beq.n	80035cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c2:	4a46      	ldr	r2, [pc, #280]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 80035c4:	6893      	ldr	r3, [r2, #8]
 80035c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ca:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f013 0f08 	tst.w	r3, #8
 80035d2:	d004      	beq.n	80035de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d4:	4a41      	ldr	r2, [pc, #260]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 80035d6:	6893      	ldr	r3, [r2, #8]
 80035d8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035de:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 80035e0:	6893      	ldr	r3, [r2, #8]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e6:	68a0      	ldr	r0, [r4, #8]
 80035e8:	4303      	orrs	r3, r0
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f013 0f01 	tst.w	r3, #1
 80035f4:	d031      	beq.n	800365a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d025      	beq.n	800364c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4a36      	ldr	r2, [pc, #216]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	f012 0f02 	tst.w	r2, #2
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4934      	ldr	r1, [pc, #208]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 800360c:	688a      	ldr	r2, [r1, #8]
 800360e:	f022 0203 	bic.w	r2, r2, #3
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003616:	f7fe fc21 	bl	8001e5c <HAL_GetTick>
 800361a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	6862      	ldr	r2, [r4, #4]
 8003626:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800362a:	d016      	beq.n	800365a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fc16 	bl	8001e5c <HAL_GetTick>
 8003630:	1b80      	subs	r0, r0, r6
 8003632:	f241 3388 	movw	r3, #5000	; 0x1388
 8003636:	4298      	cmp	r0, r3
 8003638:	d9f0      	bls.n	800361c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800363a:	2003      	movs	r0, #3
 800363c:	e7b9      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4a27      	ldr	r2, [pc, #156]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003646:	d1e0      	bne.n	800360a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e7b2      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003654:	d1d9      	bne.n	800360a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003656:	2001      	movs	r0, #1
 8003658:	e7ab      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_RCC_ClockConfig+0x154>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	42ab      	cmp	r3, r5
 8003664:	d90c      	bls.n	8003680 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_RCC_ClockConfig+0x154>)
 8003668:	6813      	ldr	r3, [r2, #0]
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	432b      	orrs	r3, r5
 8003670:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	42ab      	cmp	r3, r5
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e798      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f013 0f04 	tst.w	r3, #4
 8003686:	d006      	beq.n	8003696 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 800368a:	6893      	ldr	r3, [r2, #8]
 800368c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003690:	68e1      	ldr	r1, [r4, #12]
 8003692:	430b      	orrs	r3, r1
 8003694:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f013 0f08 	tst.w	r3, #8
 800369c:	d007      	beq.n	80036ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80036a6:	6921      	ldr	r1, [r4, #16]
 80036a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ae:	f7ff ff15 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x158>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x15c>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
 80036be:	40d8      	lsrs	r0, r3
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_RCC_ClockConfig+0x160>)
 80036c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fe fb85 	bl	8001dd4 <HAL_InitTick>
  return HAL_OK;
 80036ca:	2000      	movs	r0, #0
 80036cc:	e771      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
}
 80036d0:	4770      	bx	lr
        return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
 80036d4:	e76d      	b.n	80035b2 <HAL_RCC_ClockConfig+0x2e>
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800a520 	.word	0x0800a520
 80036e4:	20000014 	.word	0x20000014

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80036e8:	4b01      	ldr	r3, [pc, #4]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000014 	.word	0x20000014

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f6:	f7ff fff7 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCC_GetPCLK1Freq+0x18>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003702:	4a03      	ldr	r2, [pc, #12]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
}
 8003706:	40d8      	lsrs	r0, r3
 8003708:	bd08      	pop	{r3, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	0800a530 	.word	0x0800a530

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003716:	f7ff ffe7 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_RCC_GetPCLK2Freq+0x18>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003722:	4a03      	ldr	r2, [pc, #12]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
}
 8003726:	40d8      	lsrs	r0, r3
 8003728:	bd08      	pop	{r3, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	0800a530 	.word	0x0800a530

08003734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b083      	sub	sp, #12
 8003738:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800373a:	6803      	ldr	r3, [r0, #0]
 800373c:	f013 0f01 	tst.w	r3, #1
 8003740:	d00c      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003742:	4baf      	ldr	r3, [pc, #700]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003754:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003756:	b1c3      	cbz	r3, 800378a <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8003758:	2600      	movs	r6, #0
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800375c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003764:	d015      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003766:	4aa6      	ldr	r2, [pc, #664]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003768:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800376c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003770:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003772:	430b      	orrs	r3, r1
 8003774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377e:	d006      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 811b 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8003786:	2500      	movs	r5, #0
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800378a:	2601      	movs	r6, #1
 800378c:	e7e7      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800378e:	2601      	movs	r6, #1
 8003790:	e7f6      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8003792:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800379a:	d00f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800379c:	4a98      	ldr	r2, [pc, #608]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800379e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80037a8:	430b      	orrs	r3, r1
 80037aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	f000 8104 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037b8:	b903      	cbnz	r3, 80037bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 80037ba:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80037c2:	d000      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 80037c4:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037c6:	f013 0f20 	tst.w	r3, #32
 80037ca:	f040 80fb 	bne.w	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f013 0f10 	tst.w	r3, #16
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d6:	4b8a      	ldr	r3, [pc, #552]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80037e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80037e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037ea:	430a      	orrs	r2, r1
 80037ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f8:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80037fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003802:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003804:	430b      	orrs	r3, r1
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003812:	4a7b      	ldr	r2, [pc, #492]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003814:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003818:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800381c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800381e:	430b      	orrs	r3, r1
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800382a:	d008      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800382c:	4a74      	ldr	r2, [pc, #464]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800382e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003832:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003836:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003838:	430b      	orrs	r3, r1
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003846:	4a6e      	ldr	r2, [pc, #440]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003848:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800384c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003850:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003852:	430b      	orrs	r3, r1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003860:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003862:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800387a:	4a61      	ldr	r2, [pc, #388]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800387c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003880:	f023 030c 	bic.w	r3, r3, #12
 8003884:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003886:	430b      	orrs	r3, r1
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003894:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003896:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800389a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800389e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80038a0:	430b      	orrs	r3, r1
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ae:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c8:	4a4d      	ldr	r2, [pc, #308]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038d4:	430b      	orrs	r3, r1
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80038e0:	d008      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038e2:	4a47      	ldr	r2, [pc, #284]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038ee:	430b      	orrs	r3, r1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038fc:	4a40      	ldr	r2, [pc, #256]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003906:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003908:	430b      	orrs	r3, r1
 800390a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003916:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003918:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800391c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003920:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003922:	430b      	orrs	r3, r1
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003930:	4a33      	ldr	r2, [pc, #204]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003932:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800393c:	430b      	orrs	r3, r1
 800393e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003948:	d00d      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800394a:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800394c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003950:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003954:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800395c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003962:	f000 8099 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f013 0f08 	tst.w	r3, #8
 800396c:	d000      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 800396e:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003970:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003974:	d008      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003976:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003978:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800397c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003980:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003982:	430b      	orrs	r3, r1
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003990:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003992:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800399e:	430b      	orrs	r3, r1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039a4:	2e00      	cmp	r6, #0
 80039a6:	d179      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ae:	d075      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039b0:	2d00      	cmp	r5, #0
 80039b2:	f040 8106 	bne.w	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80039b6:	2000      	movs	r0, #0
}
 80039b8:	b003      	add	sp, #12
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80039bc:	2501      	movs	r5, #1
 80039be:	e6e9      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80039c0:	2601      	movs	r6, #1
 80039c2:	e6f9      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80039e2:	f7fe fa3b 	bl	8001e5c <HAL_GetTick>
 80039e6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe fa33 	bl	8001e5c <HAL_GetTick>
 80039f6:	1bc0      	subs	r0, r0, r7
 80039f8:	2864      	cmp	r0, #100	; 0x64
 80039fa:	d9f5      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 80039fc:	2003      	movs	r0, #3
 80039fe:	e7db      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a08:	4bb3      	ldr	r3, [pc, #716]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a0c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003a10:	d015      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003a12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a14:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1c:	4bae      	ldr	r3, [pc, #696]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a26:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003a2a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a2e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003a32:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003a34:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f013 0f01 	tst.w	r3, #1
 8003a3c:	d112      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a40:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003a44:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003a48:	d01d      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003a4a:	4aa3      	ldr	r2, [pc, #652]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a4c:	6893      	ldr	r3, [r2, #8]
 8003a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a52:	6093      	str	r3, [r2, #8]
 8003a54:	49a0      	ldr	r1, [pc, #640]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a56:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003a58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	670b      	str	r3, [r1, #112]	; 0x70
 8003a62:	e6b4      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003a64:	f7fe f9fa 	bl	8001e5c <HAL_GetTick>
 8003a68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	4b9b      	ldr	r3, [pc, #620]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	f013 0f02 	tst.w	r3, #2
 8003a72:	d1e4      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fe f9f2 	bl	8001e5c <HAL_GetTick>
 8003a78:	1bc0      	subs	r0, r0, r7
 8003a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a7e:	4298      	cmp	r0, r3
 8003a80:	d9f3      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8003a82:	2003      	movs	r0, #3
 8003a84:	e798      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a86:	4894      	ldr	r0, [pc, #592]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a88:	6882      	ldr	r2, [r0, #8]
 8003a8a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003a8e:	4993      	ldr	r1, [pc, #588]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003a90:	4019      	ands	r1, r3
 8003a92:	430a      	orrs	r2, r1
 8003a94:	6082      	str	r2, [r0, #8]
 8003a96:	e7dd      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8003a98:	2501      	movs	r5, #1
 8003a9a:	e764      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8003a9c:	4a8e      	ldr	r2, [pc, #568]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003aa6:	f7fe f9d9 	bl	8001e5c <HAL_GetTick>
 8003aaa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aac:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ab4:	d006      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab6:	f7fe f9d1 	bl	8001e5c <HAL_GetTick>
 8003aba:	1b80      	subs	r0, r0, r6
 8003abc:	2864      	cmp	r0, #100	; 0x64
 8003abe:	d9f5      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	e779      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f013 0f01 	tst.w	r3, #1
 8003aca:	d013      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ace:	b98b      	cbnz	r3, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ad0:	4a81      	ldr	r2, [pc, #516]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003ad2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ada:	6860      	ldr	r0, [r4, #4]
 8003adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003ae4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	68a1      	ldr	r1, [r4, #8]
 8003aec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003af0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003afc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003afe:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003b02:	d006      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003b08:	d01e      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b10:	d11a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b12:	4a71      	ldr	r2, [pc, #452]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b14:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b18:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b1c:	6860      	ldr	r0, [r4, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b22:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b26:	68e0      	ldr	r0, [r4, #12]
 8003b28:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003b2c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003b30:	430b      	orrs	r3, r1
 8003b32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003b3a:	f023 031f 	bic.w	r3, r3, #31
 8003b3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b40:	3901      	subs	r1, #1
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b4e:	d011      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b50:	4a61      	ldr	r2, [pc, #388]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b52:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b56:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b5a:	6866      	ldr	r6, [r4, #4]
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003b64:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003b68:	4303      	orrs	r3, r0
 8003b6a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b7c:	6862      	ldr	r2, [r4, #4]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b86:	68e2      	ldr	r2, [r4, #12]
 8003b88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b8c:	68a2      	ldr	r2, [r4, #8]
 8003b8e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003b92:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003b98:	4a4f      	ldr	r2, [pc, #316]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ba2:	f7fe f95b 	bl	8001e5c <HAL_GetTick>
 8003ba6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003bb0:	f47f aefe 	bne.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bb4:	f7fe f952 	bl	8001e5c <HAL_GetTick>
 8003bb8:	1b80      	subs	r0, r0, r6
 8003bba:	2864      	cmp	r0, #100	; 0x64
 8003bbc:	d9f4      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8003bbe:	2003      	movs	r0, #3
 8003bc0:	e6fa      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8003bc2:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003bc4:	6813      	ldr	r3, [r2, #0]
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003bcc:	f7fe f946 	bl	8001e5c <HAL_GetTick>
 8003bd0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003bda:	d006      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bdc:	f7fe f93e 	bl	8001e5c <HAL_GetTick>
 8003be0:	1b40      	subs	r0, r0, r5
 8003be2:	2864      	cmp	r0, #100	; 0x64
 8003be4:	d9f5      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8003be6:	2003      	movs	r0, #3
 8003be8:	e6e6      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003bf2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bf4:	b122      	cbz	r2, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003bf6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003bfa:	d01d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bfe:	b9db      	cbnz	r3, 8003c38 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c00:	4a35      	ldr	r2, [pc, #212]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c06:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c0a:	6960      	ldr	r0, [r4, #20]
 8003c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c10:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c14:	69a0      	ldr	r0, [r4, #24]
 8003c16:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c1a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c24:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c2e:	3901      	subs	r1, #1
 8003c30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c40:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c46:	d031      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f013 0f08 	tst.w	r3, #8
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c50:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c52:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c5a:	6960      	ldr	r0, [r4, #20]
 8003c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c60:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c64:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	69e1      	ldr	r1, [r4, #28]
 8003c6c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c74:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c8e:	f7fe f8e5 	bl	8001e5c <HAL_GetTick>
 8003c92:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c9e:	f7fe f8dd 	bl	8001e5c <HAL_GetTick>
 8003ca2:	1b00      	subs	r0, r0, r4
 8003ca4:	2864      	cmp	r0, #100	; 0x64
 8003ca6:	d9f5      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8003ca8:	2003      	movs	r0, #3
 8003caa:	e685      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003cae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cb6:	6965      	ldr	r5, [r4, #20]
 8003cb8:	6a23      	ldr	r3, [r4, #32]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003cc0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003cc4:	4303      	orrs	r3, r0
 8003cc6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003cd0:	e7ba      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e670      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	0ffffcff 	.word	0x0ffffcff

08003ce0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003ce0:	b1d8      	cbz	r0, 8003d1a <HAL_SDRAM_Init+0x3a>
{   
 8003ce2:	b538      	push	{r3, r4, r5, lr}
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003ce8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003cec:	b183      	cbz	r3, 8003d10 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003cf4:	1d21      	adds	r1, r4, #4
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	f001 fa3a 	bl	8005170 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003cfc:	6862      	ldr	r2, [r4, #4]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	f001 fa6f 	bl	80051e4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003d0c:	2000      	movs	r0, #0
}
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003d10:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003d14:	f002 fb34 	bl	8006380 <HAL_SDRAM_MspInit>
 8003d18:	e7e9      	b.n	8003cee <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003d1a:	2001      	movs	r0, #1
}
 8003d1c:	4770      	bx	lr

08003d1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d20:	4605      	mov	r5, r0
 8003d22:	460f      	mov	r7, r1
 8003d24:	4616      	mov	r6, r2
 8003d26:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	ea37 0303 	bics.w	r3, r7, r3
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	d037      	beq.n	8003daa <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003d3e:	d0f3      	beq.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d40:	f7fe f88c 	bl	8001e5c <HAL_GetTick>
 8003d44:	9b06      	ldr	r3, [sp, #24]
 8003d46:	1ac0      	subs	r0, r0, r3
 8003d48:	42a0      	cmp	r0, r4
 8003d4a:	d201      	bcs.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x32>
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	d1eb      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d50:	682a      	ldr	r2, [r5, #0]
 8003d52:	6853      	ldr	r3, [r2, #4]
 8003d54:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003d58:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5a:	686b      	ldr	r3, [r5, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d60:	d00b      	beq.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d62:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d68:	d014      	beq.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d70:	2300      	movs	r3, #0
 8003d72:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d76:	2003      	movs	r0, #3
 8003d78:	e018      	b.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68ab      	ldr	r3, [r5, #8]
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	bf18      	it	ne
 8003d82:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003d86:	d1ec      	bne.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003d88:	682a      	ldr	r2, [r5, #0]
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e7e6      	b.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8003d94:	682a      	ldr	r2, [r5, #0]
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	682a      	ldr	r2, [r5, #0]
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e7df      	b.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dae <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db0:	4607      	mov	r7, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8003db8:	e002      	b.n	8003dc0 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dba:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003dbe:	d10b      	bne.n	8003dd8 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	6893      	ldr	r3, [r2, #8]
 8003dc4:	402b      	ands	r3, r5
 8003dc6:	42a3      	cmp	r3, r4
 8003dc8:	d03b      	beq.n	8003e42 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dca:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8003dce:	bf08      	it	eq
 8003dd0:	2c00      	cmpeq	r4, #0
 8003dd2:	d1f2      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003dd4:	7b13      	ldrb	r3, [r2, #12]
 8003dd6:	e7f0      	b.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dd8:	f7fe f840 	bl	8001e5c <HAL_GetTick>
 8003ddc:	9b06      	ldr	r3, [sp, #24]
 8003dde:	1ac0      	subs	r0, r0, r3
 8003de0:	42b0      	cmp	r0, r6
 8003de2:	d201      	bcs.n	8003de8 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8003de4:	2e00      	cmp	r6, #0
 8003de6:	d1eb      	bne.n	8003dc0 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	6853      	ldr	r3, [r2, #4]
 8003dec:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003df0:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df8:	d00b      	beq.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e00:	d014      	beq.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e0e:	2003      	movs	r0, #3
 8003e10:	e018      	b.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e18:	bf18      	it	ne
 8003e1a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003e1e:	d1ec      	bne.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e7e6      	b.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	6813      	ldr	r3, [r2, #0]
 8003e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e7df      	b.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8003e42:	2000      	movs	r0, #0
}
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e46 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	460b      	mov	r3, r1
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e5a:	f7ff ffa8 	bl	8003dae <SPI_WaitFifoStateUntilTimeout>
 8003e5e:	b9b8      	cbnz	r0, 8003e90 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	9600      	str	r6, [sp, #0]
 8003e62:	462b      	mov	r3, r5
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7ff ff58 	bl	8003d1e <SPI_WaitFlagStateUntilTimeout>
 8003e6e:	b9b8      	cbnz	r0, 8003ea0 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e70:	9600      	str	r6, [sp, #0]
 8003e72:	462b      	mov	r3, r5
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ff97 	bl	8003dae <SPI_WaitFifoStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b150      	cbz	r0, 8003e9a <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e86:	f043 0320 	orr.w	r3, r3, #32
 8003e8a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e004      	b.n	8003e9a <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e92:	f043 0320 	orr.w	r3, r3, #32
 8003e96:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ea2:	f043 0320 	orr.w	r3, r3, #32
 8003ea6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e7f6      	b.n	8003e9a <SPI_EndRxTxTransaction+0x54>

08003eac <SPI_EndRxTransaction>:
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb6:	6843      	ldr	r3, [r0, #4]
 8003eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ebc:	d00f      	beq.n	8003ede <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebe:	9600      	str	r6, [sp, #0]
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff ff29 	bl	8003d1e <SPI_WaitFlagStateUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	b998      	cbnz	r0, 8003ef8 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed0:	6862      	ldr	r2, [r4, #4]
 8003ed2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003ed6:	d015      	beq.n	8003f04 <SPI_EndRxTransaction+0x58>
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	b002      	add	sp, #8
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ede:	6883      	ldr	r3, [r0, #8]
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	bf18      	it	ne
 8003ee6:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003eea:	d1e8      	bne.n	8003ebe <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003eec:	6802      	ldr	r2, [r0, #0]
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e7e2      	b.n	8003ebe <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003efa:	f043 0320 	orr.w	r3, r3, #32
 8003efe:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e7e9      	b.n	8003ed8 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f04:	68a2      	ldr	r2, [r4, #8]
 8003f06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003f0a:	bf18      	it	ne
 8003f0c:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 8003f10:	d1e2      	bne.n	8003ed8 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f12:	9600      	str	r6, [sp, #0]
 8003f14:	462b      	mov	r3, r5
 8003f16:	2200      	movs	r2, #0
 8003f18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff ff46 	bl	8003dae <SPI_WaitFifoStateUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d0d7      	beq.n	8003ed8 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f2a:	f043 0320 	orr.w	r3, r3, #32
 8003f2e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e7d1      	b.n	8003ed8 <SPI_EndRxTransaction+0x2c>

08003f34 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d058      	beq.n	8003fea <HAL_SPI_Init+0xb6>
{
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f40:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d045      	beq.n	8003fd4 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f5e:	d93e      	bls.n	8003fde <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f60:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f66:	bf18      	it	ne
 8003f68:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8003f6c:	d001      	beq.n	8003f72 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6e:	2100      	movs	r1, #0
 8003f70:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003f72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003f74:	b921      	cbnz	r1, 8003f80 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f7a:	d933      	bls.n	8003fe4 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003f80:	6863      	ldr	r3, [r4, #4]
 8003f82:	68a1      	ldr	r1, [r4, #8]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6921      	ldr	r1, [r4, #16]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6961      	ldr	r1, [r4, #20]
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	69a1      	ldr	r1, [r4, #24]
 8003f90:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003f94:	430b      	orrs	r3, r1
 8003f96:	69e1      	ldr	r1, [r4, #28]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6a21      	ldr	r1, [r4, #32]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	4303      	orrs	r3, r0
 8003fa4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003fa6:	8b63      	ldrh	r3, [r4, #26]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	68e1      	ldr	r1, [r4, #12]
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6821      	ldr	r1, [r4, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	69d3      	ldr	r3, [r2, #28]
 8003fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc8:	2000      	movs	r0, #0
 8003fca:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003fd2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003fd4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003fd8:	f002 f904 	bl	80061e4 <HAL_SPI_MspInit>
 8003fdc:	e7b4      	b.n	8003f48 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fe2:	e7be      	b.n	8003f62 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe8:	e7ca      	b.n	8003f80 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
}
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_SPI_Transmit_IT>:
{
 8003ff0:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8003ff2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003ff6:	2801      	cmp	r0, #1
 8003ff8:	d049      	beq.n	800408e <HAL_SPI_Transmit_IT+0x9e>
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8004000:	fab2 f082 	clz	r0, r2
 8004004:	0940      	lsrs	r0, r0, #5
 8004006:	2900      	cmp	r1, #0
 8004008:	bf08      	it	eq
 800400a:	2001      	moveq	r0, #1
 800400c:	2800      	cmp	r0, #0
 800400e:	d137      	bne.n	8004080 <HAL_SPI_Transmit_IT+0x90>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004010:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8004014:	b2c0      	uxtb	r0, r0
 8004016:	2801      	cmp	r0, #1
 8004018:	d001      	beq.n	800401e <HAL_SPI_Transmit_IT+0x2e>
    errorcode = HAL_BUSY;
 800401a:	2002      	movs	r0, #2
 800401c:	e031      	b.n	8004082 <HAL_SPI_Transmit_IT+0x92>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401e:	2003      	movs	r0, #3
 8004020:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004024:	2000      	movs	r0, #0
 8004026:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004028:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800402a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800402e:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004030:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004034:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004038:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004040:	d915      	bls.n	800406e <HAL_SPI_Transmit_IT+0x7e>
    hspi->TxISR = SPI_TxISR_16BIT;
 8004042:	4a14      	ldr	r2, [pc, #80]	; (8004094 <HAL_SPI_Transmit_IT+0xa4>)
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800404c:	d012      	beq.n	8004074 <HAL_SPI_Transmit_IT+0x84>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	684a      	ldr	r2, [r1, #4]
 8004052:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004056:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	6811      	ldr	r1, [r2, #0]
 800405c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004060:	d113      	bne.n	800408a <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 8004062:	6811      	ldr	r1, [r2, #0]
 8004064:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004068:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406a:	2000      	movs	r0, #0
 800406c:	e009      	b.n	8004082 <HAL_SPI_Transmit_IT+0x92>
    hspi->TxISR = SPI_TxISR_8BIT;
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_SPI_Transmit_IT+0xa8>)
 8004070:	651a      	str	r2, [r3, #80]	; 0x50
 8004072:	e7e8      	b.n	8004046 <HAL_SPI_Transmit_IT+0x56>
    SPI_1LINE_TX(hspi);
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	680a      	ldr	r2, [r1, #0]
 8004078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800407c:	600a      	str	r2, [r1, #0]
 800407e:	e7e6      	b.n	800404e <HAL_SPI_Transmit_IT+0x5e>
    errorcode = HAL_ERROR;
 8004080:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8004082:	2200      	movs	r2, #0
 8004084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004088:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408a:	2000      	movs	r0, #0
 800408c:	e7f9      	b.n	8004082 <HAL_SPI_Transmit_IT+0x92>
  __HAL_LOCK(hspi);
 800408e:	2002      	movs	r0, #2
}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	080042f5 	.word	0x080042f5
 8004098:	080042cf 	.word	0x080042cf

0800409c <HAL_SPI_TransmitReceive_IT>:
{
 800409c:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 800409e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80040a2:	2c01      	cmp	r4, #1
 80040a4:	d06b      	beq.n	800417e <HAL_SPI_TransmitReceive_IT+0xe2>
 80040a6:	2401      	movs	r4, #1
 80040a8:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 80040ac:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80040b0:	b2e4      	uxtb	r4, r4
  tmp_mode            = hspi->Init.Mode;
 80040b2:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040b4:	2c01      	cmp	r4, #1
 80040b6:	d010      	beq.n	80040da <HAL_SPI_TransmitReceive_IT+0x3e>
 80040b8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80040bc:	d006      	beq.n	80040cc <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80040c0:	2200      	movs	r2, #0
 80040c2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	bc30      	pop	{r4, r5}
 80040ca:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040cc:	6885      	ldr	r5, [r0, #8]
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	d14d      	bne.n	800416e <HAL_SPI_TransmitReceive_IT+0xd2>
 80040d2:	2c04      	cmp	r4, #4
 80040d4:	d001      	beq.n	80040da <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
 80040d8:	e7f2      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040da:	fab2 f482 	clz	r4, r2
 80040de:	0964      	lsrs	r4, r4, #5
 80040e0:	2900      	cmp	r1, #0
 80040e2:	bf08      	it	eq
 80040e4:	2401      	moveq	r4, #1
 80040e6:	2c00      	cmp	r4, #0
 80040e8:	d143      	bne.n	8004172 <HAL_SPI_TransmitReceive_IT+0xd6>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d043      	beq.n	8004176 <HAL_SPI_TransmitReceive_IT+0xda>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ee:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80040f2:	b2e4      	uxtb	r4, r4
 80040f4:	2c04      	cmp	r4, #4
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_TransmitReceive_IT+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f8:	2405      	movs	r4, #5
 80040fa:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040fe:	2400      	movs	r4, #0
 8004100:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004102:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004104:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004106:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004108:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800410a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 800410e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004112:	68c2      	ldr	r2, [r0, #12]
 8004114:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004118:	d91e      	bls.n	8004158 <HAL_SPI_TransmitReceive_IT+0xbc>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_SPI_TransmitReceive_IT+0xe8>)
 800411c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_SPI_TransmitReceive_IT+0xec>)
 8004120:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004122:	68c2      	ldr	r2, [r0, #12]
 8004124:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004128:	d801      	bhi.n	800412e <HAL_SPI_TransmitReceive_IT+0x92>
 800412a:	2b01      	cmp	r3, #1
 800412c:	d919      	bls.n	8004162 <HAL_SPI_TransmitReceive_IT+0xc6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412e:	6802      	ldr	r2, [r0, #0]
 8004130:	6853      	ldr	r3, [r2, #4]
 8004132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004136:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	6853      	ldr	r3, [r2, #4]
 800413c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004140:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	6803      	ldr	r3, [r0, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f012 0f40 	tst.w	r2, #64	; 0x40
 800414a:	d116      	bne.n	800417a <HAL_SPI_TransmitReceive_IT+0xde>
    __HAL_SPI_ENABLE(hspi);
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e7b3      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004158:	4a0c      	ldr	r2, [pc, #48]	; (800418c <HAL_SPI_TransmitReceive_IT+0xf0>)
 800415a:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800415c:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <HAL_SPI_TransmitReceive_IT+0xf4>)
 800415e:	6502      	str	r2, [r0, #80]	; 0x50
 8004160:	e7df      	b.n	8004122 <HAL_SPI_TransmitReceive_IT+0x86>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004162:	6802      	ldr	r2, [r0, #0]
 8004164:	6853      	ldr	r3, [r2, #4]
 8004166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416a:	6053      	str	r3, [r2, #4]
 800416c:	e7e4      	b.n	8004138 <HAL_SPI_TransmitReceive_IT+0x9c>
    errorcode = HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e7a6      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e7a4      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
 8004176:	2301      	movs	r3, #1
 8004178:	e7a2      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e7a0      	b.n	80040c0 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 800417e:	2302      	movs	r3, #2
 8004180:	e7a1      	b.n	80040c6 <HAL_SPI_TransmitReceive_IT+0x2a>
 8004182:	bf00      	nop
 8004184:	08004519 	.word	0x08004519
 8004188:	080044e1 	.word	0x080044e1
 800418c:	08004469 	.word	0x08004469
 8004190:	08004411 	.word	0x08004411

08004194 <HAL_SPI_Receive_IT>:
{
 8004194:	b510      	push	{r4, lr}
 8004196:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004198:	6880      	ldr	r0, [r0, #8]
 800419a:	b918      	cbnz	r0, 80041a4 <HAL_SPI_Receive_IT+0x10>
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d010      	beq.n	80041c6 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 80041a4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 80041a8:	2801      	cmp	r0, #1
 80041aa:	d05c      	beq.n	8004266 <HAL_SPI_Receive_IT+0xd2>
 80041ac:	2301      	movs	r3, #1
 80041ae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80041b2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80041b6:	b2c0      	uxtb	r0, r0
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d00d      	beq.n	80041d8 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 80041bc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	4613      	mov	r3, r2
 80041c8:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041ca:	2204      	movs	r2, #4
 80041cc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80041d0:	460a      	mov	r2, r1
 80041d2:	f7ff ff63 	bl	800409c <HAL_SPI_TransmitReceive_IT>
 80041d6:	e7f5      	b.n	80041c4 <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 80041d8:	fab2 f382 	clz	r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	2900      	cmp	r1, #0
 80041e0:	bf08      	it	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d13a      	bne.n	800425e <HAL_SPI_Receive_IT+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041e8:	2304      	movs	r3, #4
 80041ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041f2:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041f4:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041f8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041fc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004200:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004202:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800420a:	d91a      	bls.n	8004242 <HAL_SPI_Receive_IT+0xae>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	6853      	ldr	r3, [r2, #4]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004214:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_SPI_Receive_IT+0xd8>)
 8004218:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68a3      	ldr	r3, [r4, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004220:	d017      	beq.n	8004252 <HAL_SPI_Receive_IT+0xbe>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	6853      	ldr	r3, [r2, #4]
 8004226:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800422a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004234:	d115      	bne.n	8004262 <HAL_SPI_Receive_IT+0xce>
    __HAL_SPI_ENABLE(hspi);
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800423e:	2000      	movs	r0, #0
 8004240:	e7bd      	b.n	80041be <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004242:	6822      	ldr	r2, [r4, #0]
 8004244:	6853      	ldr	r3, [r2, #4]
 8004246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800424a:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_SPI_Receive_IT+0xdc>)
 800424e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004250:	e7e3      	b.n	800421a <HAL_SPI_Receive_IT+0x86>
    SPI_1LINE_RX(hspi);
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	e7e1      	b.n	8004222 <HAL_SPI_Receive_IT+0x8e>
    errorcode = HAL_ERROR;
 800425e:	2001      	movs	r0, #1
 8004260:	e7ad      	b.n	80041be <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004262:	2000      	movs	r0, #0
 8004264:	e7ab      	b.n	80041be <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 8004266:	2002      	movs	r0, #2
 8004268:	e7ac      	b.n	80041c4 <HAL_SPI_Receive_IT+0x30>
 800426a:	bf00      	nop
 800426c:	08004387 	.word	0x08004387
 8004270:	0800435b 	.word	0x0800435b

08004274 <HAL_SPI_TxRxCpltCallback>:
}
 8004274:	4770      	bx	lr

08004276 <HAL_SPI_ErrorCallback>:
}
 8004276:	4770      	bx	lr

08004278 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004278:	b510      	push	{r4, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800427e:	f7fd fded 	bl	8001e5c <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	6853      	ldr	r3, [r2, #4]
 8004286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428a:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800428c:	4602      	mov	r2, r0
 800428e:	2164      	movs	r1, #100	; 0x64
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff fdd8 	bl	8003e46 <SPI_EndRxTxTransaction>
 8004296:	b118      	cbz	r0, 80042a0 <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004298:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800429a:	f043 0320 	orr.w	r3, r3, #32
 800429e:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	b933      	cbnz	r3, 80042b2 <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	9201      	str	r2, [sp, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042ba:	b923      	cbnz	r3, 80042c6 <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 80042bc:	4620      	mov	r0, r4
 80042be:	f7fd fd51 	bl	8001d64 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80042c2:	b002      	add	sp, #8
 80042c4:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff ffd5 	bl	8004276 <HAL_SPI_ErrorCallback>
 80042cc:	e7f9      	b.n	80042c2 <SPI_CloseTx_ISR+0x4a>

080042ce <SPI_TxISR_8BIT>:
{
 80042ce:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80042d2:	6803      	ldr	r3, [r0, #0]
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80042d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042da:	3301      	adds	r3, #1
 80042dc:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80042de:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80042e6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b103      	cbz	r3, 80042ee <SPI_TxISR_8BIT+0x20>
}
 80042ec:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80042ee:	f7ff ffc3 	bl	8004278 <SPI_CloseTx_ISR>
}
 80042f2:	e7fb      	b.n	80042ec <SPI_TxISR_8BIT+0x1e>

080042f4 <SPI_TxISR_16BIT>:
{
 80042f4:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	8812      	ldrh	r2, [r2, #0]
 80042fc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004300:	3302      	adds	r3, #2
 8004302:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004304:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004306:	3b01      	subs	r3, #1
 8004308:	b29b      	uxth	r3, r3
 800430a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800430c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	b103      	cbz	r3, 8004314 <SPI_TxISR_16BIT+0x20>
}
 8004312:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8004314:	f7ff ffb0 	bl	8004278 <SPI_CloseTx_ISR>
}
 8004318:	e7fb      	b.n	8004312 <SPI_TxISR_16BIT+0x1e>

0800431a <SPI_CloseRx_ISR>:
{
 800431a:	b510      	push	{r4, lr}
 800431c:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800431e:	6802      	ldr	r2, [r0, #0]
 8004320:	6853      	ldr	r3, [r2, #4]
 8004322:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004326:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004328:	f7fd fd98 	bl	8001e5c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	2164      	movs	r1, #100	; 0x64
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff fdbb 	bl	8003eac <SPI_EndRxTransaction>
 8004336:	b118      	cbz	r0, 8004340 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004338:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800433a:	f043 0320 	orr.w	r3, r3, #32
 800433e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004340:	2301      	movs	r3, #1
 8004342:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004346:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004348:	b11b      	cbz	r3, 8004352 <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff ff93 	bl	8004276 <HAL_SPI_ErrorCallback>
}
 8004350:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8004352:	4620      	mov	r0, r4
 8004354:	f7fd fd0c 	bl	8001d70 <HAL_SPI_RxCpltCallback>
 8004358:	e7fa      	b.n	8004350 <SPI_CloseRx_ISR+0x36>

0800435a <SPI_RxISR_8BIT>:
{
 800435a:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800435c:	6802      	ldr	r2, [r0, #0]
 800435e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004360:	7b12      	ldrb	r2, [r2, #12]
 8004362:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004364:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004366:	3301      	adds	r3, #1
 8004368:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800436a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800436e:	3b01      	subs	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8004376:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800437a:	b29b      	uxth	r3, r3
 800437c:	b103      	cbz	r3, 8004380 <SPI_RxISR_8BIT+0x26>
}
 800437e:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8004380:	f7ff ffcb 	bl	800431a <SPI_CloseRx_ISR>
}
 8004384:	e7fb      	b.n	800437e <SPI_RxISR_8BIT+0x24>

08004386 <SPI_RxISR_16BIT>:
{
 8004386:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004388:	6803      	ldr	r3, [r0, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800438e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004390:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004392:	3302      	adds	r3, #2
 8004394:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004396:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800439a:	3b01      	subs	r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80043a2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	b103      	cbz	r3, 80043ac <SPI_RxISR_16BIT+0x26>
}
 80043aa:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 80043ac:	f7ff ffb5 	bl	800431a <SPI_CloseRx_ISR>
}
 80043b0:	e7fb      	b.n	80043aa <SPI_RxISR_16BIT+0x24>

080043b2 <SPI_CloseRxTx_ISR>:
{
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80043b6:	f7fd fd51 	bl	8001e5c <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	6853      	ldr	r3, [r2, #4]
 80043be:	f023 0320 	bic.w	r3, r3, #32
 80043c2:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043c4:	4602      	mov	r2, r0
 80043c6:	2164      	movs	r1, #100	; 0x64
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7ff fd3c 	bl	8003e46 <SPI_EndRxTxTransaction>
 80043ce:	b118      	cbz	r0, 80043d8 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80043d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043da:	b993      	cbnz	r3, 8004402 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80043dc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d006      	beq.n	80043f4 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7ff ff41 	bl	8004274 <HAL_SPI_TxRxCpltCallback>
}
 80043f2:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7fd fcb8 	bl	8001d70 <HAL_SPI_RxCpltCallback>
 8004400:	e7f7      	b.n	80043f2 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 8004402:	2301      	movs	r3, #1
 8004404:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004408:	4620      	mov	r0, r4
 800440a:	f7ff ff34 	bl	8004276 <HAL_SPI_ErrorCallback>
}
 800440e:	e7f0      	b.n	80043f2 <SPI_CloseRxTx_ISR+0x40>

08004410 <SPI_2linesTxISR_8BIT>:
{
 8004410:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8004412:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d917      	bls.n	800444a <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800441c:	6803      	ldr	r3, [r0, #0]
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004422:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004424:	3302      	adds	r3, #2
 8004426:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004428:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800442a:	3b02      	subs	r3, #2
 800442c:	b29b      	uxth	r3, r3
 800442e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004430:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	b943      	cbnz	r3, 8004448 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004436:	6802      	ldr	r2, [r0, #0]
 8004438:	6853      	ldr	r3, [r2, #4]
 800443a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443e:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8004440:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	b163      	cbz	r3, 8004462 <SPI_2linesTxISR_8BIT+0x52>
}
 8004448:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800444a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800444c:	6803      	ldr	r3, [r0, #0]
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 8004452:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004454:	3301      	adds	r3, #1
 8004456:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8004458:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800445a:	3b01      	subs	r3, #1
 800445c:	b29b      	uxth	r3, r3
 800445e:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004460:	e7e6      	b.n	8004430 <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 8004462:	f7ff ffa6 	bl	80043b2 <SPI_CloseRxTx_ISR>
}
 8004466:	e7ef      	b.n	8004448 <SPI_2linesTxISR_8BIT+0x38>

08004468 <SPI_2linesRxISR_8BIT>:
{
 8004468:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 800446a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d924      	bls.n	80044be <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800447a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800447c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800447e:	3302      	adds	r3, #2
 8004480:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004482:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004486:	3b02      	subs	r3, #2
 8004488:	b29b      	uxth	r3, r3
 800448a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800448e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00c      	beq.n	80044b2 <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 8004498:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	b93b      	cbnz	r3, 80044b0 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80044a0:	6802      	ldr	r2, [r0, #0]
 80044a2:	6853      	ldr	r3, [r2, #4]
 80044a4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80044a8:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80044aa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b1a3      	cbz	r3, 80044da <SPI_2linesRxISR_8BIT+0x72>
}
 80044b0:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b2:	6802      	ldr	r2, [r0, #0]
 80044b4:	6853      	ldr	r3, [r2, #4]
 80044b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044ba:	6053      	str	r3, [r2, #4]
 80044bc:	e7ec      	b.n	8004498 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80044be:	6802      	ldr	r2, [r0, #0]
 80044c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044c2:	7b12      	ldrb	r2, [r2, #12]
 80044c4:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80044c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044c8:	3301      	adds	r3, #1
 80044ca:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 80044cc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80044d8:	e7de      	b.n	8004498 <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 80044da:	f7ff ff6a 	bl	80043b2 <SPI_CloseRxTx_ISR>
}
 80044de:	e7e7      	b.n	80044b0 <SPI_2linesRxISR_8BIT+0x48>

080044e0 <SPI_2linesTxISR_16BIT>:
{
 80044e0:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80044e4:	6803      	ldr	r3, [r0, #0]
 80044e6:	8812      	ldrh	r2, [r2, #0]
 80044e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044ec:	3302      	adds	r3, #2
 80044ee:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80044f0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80044f8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	b943      	cbnz	r3, 8004510 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80044fe:	6802      	ldr	r2, [r0, #0]
 8004500:	6853      	ldr	r3, [r2, #4]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8004508:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800450c:	b29b      	uxth	r3, r3
 800450e:	b103      	cbz	r3, 8004512 <SPI_2linesTxISR_16BIT+0x32>
}
 8004510:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8004512:	f7ff ff4e 	bl	80043b2 <SPI_CloseRxTx_ISR>
}
 8004516:	e7fb      	b.n	8004510 <SPI_2linesTxISR_16BIT+0x30>

08004518 <SPI_2linesRxISR_16BIT>:
{
 8004518:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800451a:	6803      	ldr	r3, [r0, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004520:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004522:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004524:	3302      	adds	r3, #2
 8004526:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004528:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800452c:	3b01      	subs	r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8004534:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004538:	b29b      	uxth	r3, r3
 800453a:	b93b      	cbnz	r3, 800454c <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800453c:	6802      	ldr	r2, [r0, #0]
 800453e:	6853      	ldr	r3, [r2, #4]
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8004546:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	b103      	cbz	r3, 800454e <SPI_2linesRxISR_16BIT+0x36>
}
 800454c:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800454e:	f7ff ff30 	bl	80043b2 <SPI_CloseRxTx_ISR>
}
 8004552:	e7fb      	b.n	800454c <SPI_2linesRxISR_16BIT+0x34>

08004554 <HAL_SPI_IRQHandler>:
{
 8004554:	b530      	push	{r4, r5, lr}
 8004556:	b085      	sub	sp, #20
 8004558:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800455a:	6802      	ldr	r2, [r0, #0]
 800455c:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800455e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004560:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8004564:	b949      	cbnz	r1, 800457a <HAL_SPI_IRQHandler+0x26>
 8004566:	f013 0f01 	tst.w	r3, #1
 800456a:	d006      	beq.n	800457a <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800456c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004570:	d003      	beq.n	800457a <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8004572:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004574:	4620      	mov	r0, r4
 8004576:	4798      	blx	r3
    return;
 8004578:	e008      	b.n	800458c <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800457a:	f013 0f02 	tst.w	r3, #2
 800457e:	d007      	beq.n	8004590 <HAL_SPI_IRQHandler+0x3c>
 8004580:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004584:	d004      	beq.n	8004590 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8004586:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004588:	4620      	mov	r0, r4
 800458a:	4798      	blx	r3
}
 800458c:	b005      	add	sp, #20
 800458e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004590:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8004594:	b91d      	cbnz	r5, 800459e <HAL_SPI_IRQHandler+0x4a>
 8004596:	b911      	cbnz	r1, 800459e <HAL_SPI_IRQHandler+0x4a>
 8004598:	f413 7f80 	tst.w	r3, #256	; 0x100
 800459c:	d0f6      	beq.n	800458c <HAL_SPI_IRQHandler+0x38>
 800459e:	f010 0f20 	tst.w	r0, #32
 80045a2:	d0f3      	beq.n	800458c <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045a4:	b179      	cbz	r1, 80045c6 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045a6:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 80045aa:	b2c9      	uxtb	r1, r1
 80045ac:	2903      	cmp	r1, #3
 80045ae:	d053      	beq.n	8004658 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80045b2:	f041 0104 	orr.w	r1, r1, #4
 80045b6:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045b8:	2100      	movs	r1, #0
 80045ba:	9100      	str	r1, [sp, #0]
 80045bc:	68d1      	ldr	r1, [r2, #12]
 80045be:	9100      	str	r1, [sp, #0]
 80045c0:	6891      	ldr	r1, [r2, #8]
 80045c2:	9100      	str	r1, [sp, #0]
 80045c4:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045c6:	b165      	cbz	r5, 80045e2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045c8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80045ca:	f041 0101 	orr.w	r1, r1, #1
 80045ce:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045d0:	2100      	movs	r1, #0
 80045d2:	9102      	str	r1, [sp, #8]
 80045d4:	6891      	ldr	r1, [r2, #8]
 80045d6:	9102      	str	r1, [sp, #8]
 80045d8:	6811      	ldr	r1, [r2, #0]
 80045da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80045de:	6011      	str	r1, [r2, #0]
 80045e0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045e6:	d009      	beq.n	80045fc <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045f0:	2300      	movs	r3, #0
 80045f2:	9303      	str	r3, [sp, #12]
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0c4      	beq.n	800458c <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	6853      	ldr	r3, [r2, #4]
 8004606:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800460a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800460c:	2301      	movs	r3, #1
 800460e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004612:	f010 0f03 	tst.w	r0, #3
 8004616:	d027      	beq.n	8004668 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	6853      	ldr	r3, [r2, #4]
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004624:	b14b      	cbz	r3, 800463a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_SPI_IRQHandler+0x11c>)
 8004628:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800462a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462c:	f7fe f8ae 	bl	800278c <HAL_DMA_Abort_IT>
 8004630:	b118      	cbz	r0, 800463a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004632:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004638:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800463a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0a5      	beq.n	800458c <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004640:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <HAL_SPI_IRQHandler+0x11c>)
 8004642:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004646:	f7fe f8a1 	bl	800278c <HAL_DMA_Abort_IT>
 800464a:	2800      	cmp	r0, #0
 800464c:	d09e      	beq.n	800458c <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800464e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004654:	6623      	str	r3, [r4, #96]	; 0x60
 8004656:	e799      	b.n	800458c <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004658:	2300      	movs	r3, #0
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	68d3      	ldr	r3, [r2, #12]
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	6893      	ldr	r3, [r2, #8]
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	9b01      	ldr	r3, [sp, #4]
        return;
 8004666:	e791      	b.n	800458c <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff fe04 	bl	8004276 <HAL_SPI_ErrorCallback>
 800466e:	e78d      	b.n	800458c <HAL_SPI_IRQHandler+0x38>
 8004670:	08004675 	.word	0x08004675

08004674 <SPI_DMAAbortOnError>:
{
 8004674:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004676:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800467e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004680:	f7ff fdf9 	bl	8004276 <HAL_SPI_ErrorCallback>
}
 8004684:	bd08      	pop	{r3, pc}

08004686 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004686:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004688:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	6a04      	ldr	r4, [r0, #32]
 800468c:	f024 0401 	bic.w	r4, r4, #1
 8004690:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004694:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004698:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80046a0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80046a4:	6203      	str	r3, [r0, #32]
}
 80046a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ac:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	6a03      	ldr	r3, [r0, #32]
 80046b0:	f023 0310 	bic.w	r3, r3, #16
 80046b4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80046b8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ba:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046be:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80046cc:	6203      	str	r3, [r0, #32]
}
 80046ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	4319      	orrs	r1, r3
 80046dc:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e0:	6081      	str	r1, [r0, #8]
}
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e4:	6802      	ldr	r2, [r0, #0]
 80046e6:	68d3      	ldr	r3, [r2, #12]
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	6891      	ldr	r1, [r2, #8]
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_TIM_Base_Start_IT+0x28>)
 80046f4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	bf18      	it	ne
 80046fa:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80046fe:	d003      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	2000      	movs	r0, #0
 800470a:	4770      	bx	lr
 800470c:	00010007 	.word	0x00010007

08004710 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_IC_CaptureCallback>:
}
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_TriggerCallback>:
}
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_IRQHandler>:
{
 8004718:	b510      	push	{r4, lr}
 800471a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800471c:	6803      	ldr	r3, [r0, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	f012 0f02 	tst.w	r2, #2
 8004724:	d011      	beq.n	800474a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	f012 0f02 	tst.w	r2, #2
 800472c:	d00d      	beq.n	800474a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800472e:	f06f 0202 	mvn.w	r2, #2
 8004732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004734:	2301      	movs	r3, #1
 8004736:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004738:	6803      	ldr	r3, [r0, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f013 0f03 	tst.w	r3, #3
 8004740:	d079      	beq.n	8004836 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004742:	f7ff ffe6 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	2300      	movs	r3, #0
 8004748:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	f012 0f04 	tst.w	r2, #4
 8004752:	d012      	beq.n	800477a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	f012 0f04 	tst.w	r2, #4
 800475a:	d00e      	beq.n	800477a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800475c:	f06f 0204 	mvn.w	r2, #4
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004762:	2302      	movs	r3, #2
 8004764:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800476e:	d068      	beq.n	8004842 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004770:	4620      	mov	r0, r4
 8004772:	f7ff ffce 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	2300      	movs	r3, #0
 8004778:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	f012 0f08 	tst.w	r2, #8
 8004782:	d012      	beq.n	80047aa <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	f012 0f08 	tst.w	r2, #8
 800478a:	d00e      	beq.n	80047aa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800478c:	f06f 0208 	mvn.w	r2, #8
 8004790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004792:	2304      	movs	r3, #4
 8004794:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f013 0f03 	tst.w	r3, #3
 800479e:	d057      	beq.n	8004850 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff ffb6 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	2300      	movs	r3, #0
 80047a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	f012 0f10 	tst.w	r2, #16
 80047b2:	d012      	beq.n	80047da <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	f012 0f10 	tst.w	r2, #16
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	2308      	movs	r3, #8
 80047c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 80047ce:	d046      	beq.n	800485e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7ff ff9e 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	2300      	movs	r3, #0
 80047d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	f012 0f01 	tst.w	r2, #1
 80047e2:	d003      	beq.n	80047ec <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	f012 0f01 	tst.w	r2, #1
 80047ea:	d13f      	bne.n	800486c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047fc:	d13d      	bne.n	800487a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004806:	d003      	beq.n	8004810 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800480e:	d13b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004820:	d139      	bne.n	8004896 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	f012 0f20 	tst.w	r2, #32
 800482a:	d003      	beq.n	8004834 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	f012 0f20 	tst.w	r2, #32
 8004832:	d137      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x18c>
}
 8004834:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	f7ff ff6b 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ff6a 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
 8004840:	e781      	b.n	8004746 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	4620      	mov	r0, r4
 8004844:	f7ff ff64 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff ff63 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
 800484e:	e792      	b.n	8004776 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004850:	4620      	mov	r0, r4
 8004852:	f7ff ff5d 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004856:	4620      	mov	r0, r4
 8004858:	f7ff ff5c 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
 800485c:	e7a3      	b.n	80047a6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	4620      	mov	r0, r4
 8004860:	f7ff ff56 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff ff55 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
 800486a:	e7b4      	b.n	80047d6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	f06f 0201 	mvn.w	r2, #1
 8004870:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004872:	4620      	mov	r0, r4
 8004874:	f001 fa7c 	bl	8005d70 <HAL_TIM_PeriodElapsedCallback>
 8004878:	e7b8      	b.n	80047ec <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800487a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800487e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004880:	4620      	mov	r0, r4
 8004882:	f000 f964 	bl	8004b4e <HAL_TIMEx_BreakCallback>
 8004886:	e7ba      	b.n	80047fe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004888:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800488c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800488e:	4620      	mov	r0, r4
 8004890:	f000 f95e 	bl	8004b50 <HAL_TIMEx_Break2Callback>
 8004894:	e7bc      	b.n	8004810 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff ff3a 	bl	8004716 <HAL_TIM_TriggerCallback>
 80048a2:	e7be      	b.n	8004822 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a4:	f06f 0220 	mvn.w	r2, #32
 80048a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 f94e 	bl	8004b4c <HAL_TIMEx_CommutCallback>
}
 80048b0:	e7c0      	b.n	8004834 <HAL_TIM_IRQHandler+0x11c>
	...

080048b4 <TIM_Base_SetConfig>:
{
 80048b4:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80048b6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	4c3a      	ldr	r4, [pc, #232]	; (80049a4 <TIM_Base_SetConfig+0xf0>)
 80048ba:	42a0      	cmp	r0, r4
 80048bc:	bf14      	ite	ne
 80048be:	2400      	movne	r4, #0
 80048c0:	2401      	moveq	r4, #1
 80048c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048c6:	bf14      	ite	ne
 80048c8:	4622      	movne	r2, r4
 80048ca:	f044 0201 	orreq.w	r2, r4, #1
 80048ce:	b9aa      	cbnz	r2, 80048fc <TIM_Base_SetConfig+0x48>
 80048d0:	4d35      	ldr	r5, [pc, #212]	; (80049a8 <TIM_Base_SetConfig+0xf4>)
 80048d2:	42a8      	cmp	r0, r5
 80048d4:	bf14      	ite	ne
 80048d6:	2500      	movne	r5, #0
 80048d8:	2501      	moveq	r5, #1
 80048da:	4e34      	ldr	r6, [pc, #208]	; (80049ac <TIM_Base_SetConfig+0xf8>)
 80048dc:	42b0      	cmp	r0, r6
 80048de:	d00d      	beq.n	80048fc <TIM_Base_SetConfig+0x48>
 80048e0:	b965      	cbnz	r5, 80048fc <TIM_Base_SetConfig+0x48>
 80048e2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80048e6:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80048ea:	42a8      	cmp	r0, r5
 80048ec:	bf14      	ite	ne
 80048ee:	2500      	movne	r5, #0
 80048f0:	2501      	moveq	r5, #1
 80048f2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80048f6:	42b0      	cmp	r0, r6
 80048f8:	d000      	beq.n	80048fc <TIM_Base_SetConfig+0x48>
 80048fa:	b11d      	cbz	r5, 8004904 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004900:	684d      	ldr	r5, [r1, #4]
 8004902:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004904:	2a00      	cmp	r2, #0
 8004906:	d133      	bne.n	8004970 <TIM_Base_SetConfig+0xbc>
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0xf4>)
 800490a:	4290      	cmp	r0, r2
 800490c:	bf14      	ite	ne
 800490e:	2200      	movne	r2, #0
 8004910:	2201      	moveq	r2, #1
 8004912:	4d26      	ldr	r5, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0xf8>)
 8004914:	42a8      	cmp	r0, r5
 8004916:	d02b      	beq.n	8004970 <TIM_Base_SetConfig+0xbc>
 8004918:	bb52      	cbnz	r2, 8004970 <TIM_Base_SetConfig+0xbc>
 800491a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800491e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004922:	4290      	cmp	r0, r2
 8004924:	bf14      	ite	ne
 8004926:	2200      	movne	r2, #0
 8004928:	2201      	moveq	r2, #1
 800492a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800492e:	42a8      	cmp	r0, r5
 8004930:	d01e      	beq.n	8004970 <TIM_Base_SetConfig+0xbc>
 8004932:	b9ea      	cbnz	r2, 8004970 <TIM_Base_SetConfig+0xbc>
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <TIM_Base_SetConfig+0xfc>)
 8004936:	4290      	cmp	r0, r2
 8004938:	bf14      	ite	ne
 800493a:	2200      	movne	r2, #0
 800493c:	2201      	moveq	r2, #1
 800493e:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004942:	42a8      	cmp	r0, r5
 8004944:	d014      	beq.n	8004970 <TIM_Base_SetConfig+0xbc>
 8004946:	b99a      	cbnz	r2, 8004970 <TIM_Base_SetConfig+0xbc>
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <TIM_Base_SetConfig+0x100>)
 800494a:	4290      	cmp	r0, r2
 800494c:	bf14      	ite	ne
 800494e:	2200      	movne	r2, #0
 8004950:	2201      	moveq	r2, #1
 8004952:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004956:	42a8      	cmp	r0, r5
 8004958:	d00a      	beq.n	8004970 <TIM_Base_SetConfig+0xbc>
 800495a:	b94a      	cbnz	r2, 8004970 <TIM_Base_SetConfig+0xbc>
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <TIM_Base_SetConfig+0x104>)
 800495e:	4290      	cmp	r0, r2
 8004960:	bf14      	ite	ne
 8004962:	2200      	movne	r2, #0
 8004964:	2201      	moveq	r2, #1
 8004966:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800496a:	42a8      	cmp	r0, r5
 800496c:	d000      	beq.n	8004970 <TIM_Base_SetConfig+0xbc>
 800496e:	b11a      	cbz	r2, 8004978 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004974:	68ca      	ldr	r2, [r1, #12]
 8004976:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497c:	694a      	ldr	r2, [r1, #20]
 800497e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004980:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004982:	688a      	ldr	r2, [r1, #8]
 8004984:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004986:	680a      	ldr	r2, [r1, #0]
 8004988:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498a:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <TIM_Base_SetConfig+0x108>)
 800498c:	4298      	cmp	r0, r3
 800498e:	bf14      	ite	ne
 8004990:	4623      	movne	r3, r4
 8004992:	f044 0301 	orreq.w	r3, r4, #1
 8004996:	b10b      	cbz	r3, 800499c <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	690b      	ldr	r3, [r1, #16]
 800499a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800499c:	2301      	movs	r3, #1
 800499e:	6143      	str	r3, [r0, #20]
}
 80049a0:	bc70      	pop	{r4, r5, r6}
 80049a2:	4770      	bx	lr
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40001800 	.word	0x40001800
 80049b8:	40002000 	.word	0x40002000
 80049bc:	40010400 	.word	0x40010400

080049c0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80049c0:	b1a8      	cbz	r0, 80049ee <HAL_TIM_Base_Init+0x2e>
{
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049ca:	b15b      	cbz	r3, 80049e4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	2302      	movs	r3, #2
 80049ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d2:	1d21      	adds	r1, r4, #4
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	f7ff ff6d 	bl	80048b4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80049da:	2301      	movs	r3, #1
 80049dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
}
 80049e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049e8:	f001 fc4e 	bl	8006288 <HAL_TIM_Base_MspInit>
 80049ec:	e7ee      	b.n	80049cc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80049ee:	2001      	movs	r0, #1
}
 80049f0:	4770      	bx	lr

080049f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80049fe:	430b      	orrs	r3, r1
 8004a00:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	6083      	str	r3, [r0, #8]
}
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004a0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d064      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xd2>
{
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a24:	6802      	ldr	r2, [r0, #0]
 8004a26:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_TIM_ConfigClockSource+0xd8>)
 8004a2a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004a2c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d04a      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xbe>
 8004a34:	d913      	bls.n	8004a5e <HAL_TIM_ConfigClockSource+0x52>
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d03d      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xaa>
 8004a3a:	d91e      	bls.n	8004a7a <HAL_TIM_ConfigClockSource+0x6e>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d028      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x86>
 8004a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a44:	d130      	bne.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a46:	68cb      	ldr	r3, [r1, #12]
 8004a48:	684a      	ldr	r2, [r1, #4]
 8004a4a:	6889      	ldr	r1, [r1, #8]
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	f7ff ffd0 	bl	80049f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	6893      	ldr	r3, [r2, #8]
 8004a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a5a:	6093      	str	r3, [r2, #8]
      break;
 8004a5c:	e024      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d006      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0x64>
 8004a62:	d904      	bls.n	8004a6e <HAL_TIM_ConfigClockSource+0x62>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0x64>
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d001      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0x64>
 8004a6c:	e01c      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
 8004a6e:	b9db      	cbnz	r3, 8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a70:	4619      	mov	r1, r3
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	f7ff fe2e 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004a78:	e016      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004a7a:	2b50      	cmp	r3, #80	; 0x50
 8004a7c:	d114      	bne.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	68ca      	ldr	r2, [r1, #12]
 8004a80:	6849      	ldr	r1, [r1, #4]
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	f7ff fdff 	bl	8004686 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a88:	2150      	movs	r1, #80	; 0x50
 8004a8a:	6820      	ldr	r0, [r4, #0]
 8004a8c:	f7ff fe22 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004a90:	e00a      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	68cb      	ldr	r3, [r1, #12]
 8004a94:	684a      	ldr	r2, [r1, #4]
 8004a96:	6889      	ldr	r1, [r1, #8]
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	f7ff ffaa 	bl	80049f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004aa6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004ab4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab6:	68ca      	ldr	r2, [r1, #12]
 8004ab8:	6849      	ldr	r1, [r1, #4]
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	f7ff fdf6 	bl	80046ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	2160      	movs	r1, #96	; 0x60
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	f7ff fe06 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e7ee      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	68ca      	ldr	r2, [r1, #12]
 8004acc:	6849      	ldr	r1, [r1, #4]
 8004ace:	6820      	ldr	r0, [r4, #0]
 8004ad0:	f7ff fdd9 	bl	8004686 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ad4:	2140      	movs	r1, #64	; 0x40
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	f7ff fdfc 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004adc:	e7e4      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8004ade:	2002      	movs	r0, #2
}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	fffe0088 	.word	0xfffe0088

08004ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d027      	beq.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8004af0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004af2:	2301      	movs	r3, #1
 8004af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b02:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b04:	4e0f      	ldr	r6, [pc, #60]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004b06:	4c10      	ldr	r4, [pc, #64]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf18      	it	ne
 8004b0c:	42b3      	cmpne	r3, r6
 8004b0e:	d103      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b14:	684c      	ldr	r4, [r1, #4]
 8004b16:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b1c:	680c      	ldr	r4, [r1, #0]
 8004b1e:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b20:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b24:	6889      	ldr	r1, [r1, #8]
 8004b26:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b28:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b2a:	6803      	ldr	r3, [r0, #0]
 8004b2c:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	2300      	movs	r3, #0
 8004b36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004b3a:	4618      	mov	r0, r3
}
 8004b3c:	bc70      	pop	{r4, r5, r6}
 8004b3e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b40:	2002      	movs	r0, #2
}
 8004b42:	4770      	bx	lr
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b4c:	4770      	bx	lr

08004b4e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b50:	4770      	bx	lr
	...

08004b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	b510      	push	{r4, lr}
 8004b56:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	6883      	ldr	r3, [r0, #8]
 8004b5a:	6902      	ldr	r2, [r0, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	6942      	ldr	r2, [r0, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	69c2      	ldr	r2, [r0, #28]
 8004b64:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b66:	6801      	ldr	r1, [r0, #0]
 8004b68:	6808      	ldr	r0, [r1, #0]
 8004b6a:	4a99      	ldr	r2, [pc, #612]	; (8004dd0 <UART_SetConfig+0x27c>)
 8004b6c:	4002      	ands	r2, r0
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	6853      	ldr	r3, [r2, #4]
 8004b76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b7a:	68e1      	ldr	r1, [r4, #12]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b80:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8004b82:	6a23      	ldr	r3, [r4, #32]
 8004b84:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	688b      	ldr	r3, [r1, #8]
 8004b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	4a8f      	ldr	r2, [pc, #572]	; (8004dd4 <UART_SetConfig+0x280>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <UART_SetConfig+0x78>
 8004b9a:	4a8f      	ldr	r2, [pc, #572]	; (8004dd8 <UART_SetConfig+0x284>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d028      	beq.n	8004bf2 <UART_SetConfig+0x9e>
 8004ba0:	4a8e      	ldr	r2, [pc, #568]	; (8004ddc <UART_SetConfig+0x288>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03d      	beq.n	8004c22 <UART_SetConfig+0xce>
 8004ba6:	4a8e      	ldr	r2, [pc, #568]	; (8004de0 <UART_SetConfig+0x28c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d050      	beq.n	8004c4e <UART_SetConfig+0xfa>
 8004bac:	4a8d      	ldr	r2, [pc, #564]	; (8004de4 <UART_SetConfig+0x290>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d062      	beq.n	8004c78 <UART_SetConfig+0x124>
 8004bb2:	4a8d      	ldr	r2, [pc, #564]	; (8004de8 <UART_SetConfig+0x294>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d077      	beq.n	8004ca8 <UART_SetConfig+0x154>
 8004bb8:	4a8c      	ldr	r2, [pc, #560]	; (8004dec <UART_SetConfig+0x298>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	f000 808c 	beq.w	8004cd8 <UART_SetConfig+0x184>
 8004bc0:	4a8b      	ldr	r2, [pc, #556]	; (8004df0 <UART_SetConfig+0x29c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	f000 80a0 	beq.w	8004d08 <UART_SetConfig+0x1b4>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	e0b6      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004bcc:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d809      	bhi.n	8004bee <UART_SetConfig+0x9a>
 8004bda:	e8df f003 	tbb	[pc, r3]
 8004bde:	0402      	.short	0x0402
 8004be0:	06ad      	.short	0x06ad
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0a9      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004be6:	2304      	movs	r3, #4
 8004be8:	e0a7      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004bea:	2308      	movs	r3, #8
 8004bec:	e0a5      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e0a3      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004bf2:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d80e      	bhi.n	8004c1e <UART_SetConfig+0xca>
 8004c00:	e8df f003 	tbb	[pc, r3]
 8004c04:	0d0d0d07 	.word	0x0d0d0d07
 8004c08:	0d0d0d09 	.word	0x0d0d0d09
 8004c0c:	0d0d0da9 	.word	0x0d0d0da9
 8004c10:	0b          	.byte	0x0b
 8004c11:	00          	.byte	0x00
 8004c12:	2300      	movs	r3, #0
 8004c14:	e091      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c16:	2304      	movs	r3, #4
 8004c18:	e08f      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	e08d      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	e08b      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c22:	4b74      	ldr	r3, [pc, #464]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d00a      	beq.n	8004c46 <UART_SetConfig+0xf2>
 8004c30:	d906      	bls.n	8004c40 <UART_SetConfig+0xec>
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f000 8091 	beq.w	8004d5a <UART_SetConfig+0x206>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d106      	bne.n	8004c4a <UART_SetConfig+0xf6>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	e07c      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c40:	b91b      	cbnz	r3, 8004c4a <UART_SetConfig+0xf6>
 8004c42:	2300      	movs	r3, #0
 8004c44:	e079      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c46:	2304      	movs	r3, #4
 8004c48:	e077      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e075      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c4e:	4b69      	ldr	r3, [pc, #420]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d009      	beq.n	8004c70 <UART_SetConfig+0x11c>
 8004c5c:	d905      	bls.n	8004c6a <UART_SetConfig+0x116>
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d07d      	beq.n	8004d5e <UART_SetConfig+0x20a>
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d106      	bne.n	8004c74 <UART_SetConfig+0x120>
 8004c66:	2308      	movs	r3, #8
 8004c68:	e067      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c6a:	b91b      	cbnz	r3, 8004c74 <UART_SetConfig+0x120>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e064      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c70:	2304      	movs	r3, #4
 8004c72:	e062      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e060      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c78:	4b5e      	ldr	r3, [pc, #376]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d00b      	beq.n	8004ca0 <UART_SetConfig+0x14c>
 8004c88:	d907      	bls.n	8004c9a <UART_SetConfig+0x146>
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8e:	d068      	beq.n	8004d62 <UART_SetConfig+0x20e>
 8004c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c94:	d106      	bne.n	8004ca4 <UART_SetConfig+0x150>
 8004c96:	2308      	movs	r3, #8
 8004c98:	e04f      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004c9a:	b91b      	cbnz	r3, 8004ca4 <UART_SetConfig+0x150>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e04c      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	e04a      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	e048      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004ca8:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d00b      	beq.n	8004cd0 <UART_SetConfig+0x17c>
 8004cb8:	d907      	bls.n	8004cca <UART_SetConfig+0x176>
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbe:	d052      	beq.n	8004d66 <UART_SetConfig+0x212>
 8004cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cc4:	d106      	bne.n	8004cd4 <UART_SetConfig+0x180>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e037      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004cca:	b91b      	cbnz	r3, 8004cd4 <UART_SetConfig+0x180>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e034      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	e032      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	e030      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004cd8:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d00b      	beq.n	8004d00 <UART_SetConfig+0x1ac>
 8004ce8:	d907      	bls.n	8004cfa <UART_SetConfig+0x1a6>
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cee:	d03c      	beq.n	8004d6a <UART_SetConfig+0x216>
 8004cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cf4:	d106      	bne.n	8004d04 <UART_SetConfig+0x1b0>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	e01f      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004cfa:	b91b      	cbnz	r3, 8004d04 <UART_SetConfig+0x1b0>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e01c      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d00:	2304      	movs	r3, #4
 8004d02:	e01a      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d04:	2310      	movs	r3, #16
 8004d06:	e018      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d08:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <UART_SetConfig+0x2a0>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d16:	d00b      	beq.n	8004d30 <UART_SetConfig+0x1dc>
 8004d18:	d907      	bls.n	8004d2a <UART_SetConfig+0x1d6>
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1e:	d026      	beq.n	8004d6e <UART_SetConfig+0x21a>
 8004d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d24:	d106      	bne.n	8004d34 <UART_SetConfig+0x1e0>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e007      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d2a:	b91b      	cbnz	r3, 8004d34 <UART_SetConfig+0x1e0>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e004      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d30:	2304      	movs	r3, #4
 8004d32:	e002      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d34:	2310      	movs	r3, #16
 8004d36:	e000      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d38:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3a:	69e2      	ldr	r2, [r4, #28]
 8004d3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004d40:	d017      	beq.n	8004d72 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	f200 80b3 	bhi.w	8004eae <UART_SetConfig+0x35a>
 8004d48:	e8df f003 	tbb	[pc, r3]
 8004d4c:	b1958b76 	.word	0xb1958b76
 8004d50:	b1b1b19e 	.word	0xb1b1b19e
 8004d54:	a8          	.byte	0xa8
 8004d55:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d56:	2302      	movs	r3, #2
 8004d58:	e7ef      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e7ed      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e7eb      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e7e9      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e7e7      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e7e5      	b.n	8004d3a <UART_SetConfig+0x1e6>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e7e3      	b.n	8004d3a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d85d      	bhi.n	8004e32 <UART_SetConfig+0x2de>
 8004d76:	e8df f003 	tbb	[pc, r3]
 8004d7a:	1f05      	.short	0x1f05
 8004d7c:	5c485c3f 	.word	0x5c485c3f
 8004d80:	5c5c      	.short	0x5c5c
 8004d82:	53          	.byte	0x53
 8004d83:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d84:	f7fe fcb6 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8004d88:	6862      	ldr	r2, [r4, #4]
 8004d8a:	0853      	lsrs	r3, r2, #1
 8004d8c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d94:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d96:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d98:	f1a3 0110 	sub.w	r1, r3, #16
 8004d9c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004da0:	4291      	cmp	r1, r2
 8004da2:	f200 8087 	bhi.w	8004eb4 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004db0:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	60d3      	str	r3, [r2, #12]
 8004db6:	e050      	b.n	8004e5a <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004db8:	f7fe fcac 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	6862      	ldr	r2, [r4, #4]
 8004dbe:	0853      	lsrs	r3, r2, #1
 8004dc0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dca:	2000      	movs	r0, #0
        break;
 8004dcc:	e7e4      	b.n	8004d98 <UART_SetConfig+0x244>
 8004dce:	bf00      	nop
 8004dd0:	efff69f3 	.word	0xefff69f3
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	40005000 	.word	0x40005000
 8004de8:	40011400 	.word	0x40011400
 8004dec:	40007800 	.word	0x40007800
 8004df0:	40007c00 	.word	0x40007c00
 8004df4:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004df8:	6862      	ldr	r2, [r4, #4]
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <UART_SetConfig+0x368>)
 8004dfc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e04:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e06:	2000      	movs	r0, #0
        break;
 8004e08:	e7c6      	b.n	8004d98 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e0a:	f7fe fb67 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8004e0e:	6862      	ldr	r2, [r4, #4]
 8004e10:	0853      	lsrs	r3, r2, #1
 8004e12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e1a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1c:	2000      	movs	r0, #0
        break;
 8004e1e:	e7bb      	b.n	8004d98 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	0853      	lsrs	r3, r2, #1
 8004e24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e2e:	2000      	movs	r0, #0
        break;
 8004e30:	e7b2      	b.n	8004d98 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8004e32:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e7af      	b.n	8004d98 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e38:	f7fe fc5c 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	6862      	ldr	r2, [r4, #4]
 8004e3e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e46:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e48:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4a:	f1a3 0110 	sub.w	r1, r3, #16
 8004e4e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004e52:	4291      	cmp	r1, r2
 8004e54:	d830      	bhi.n	8004eb8 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004e5e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004e60:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e62:	f7fe fc57 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e70:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e72:	2000      	movs	r0, #0
        break;
 8004e74:	e7e9      	b.n	8004e4a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <UART_SetConfig+0x36c>)
 8004e7a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e82:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e84:	2000      	movs	r0, #0
        break;
 8004e86:	e7e0      	b.n	8004e4a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e88:	f7fe fb28 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e96:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e98:	2000      	movs	r0, #0
        break;
 8004e9a:	e7d6      	b.n	8004e4a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e9c:	6862      	ldr	r2, [r4, #4]
 8004e9e:	0853      	lsrs	r3, r2, #1
 8004ea0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eaa:	2000      	movs	r0, #0
        break;
 8004eac:	e7cd      	b.n	8004e4a <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e7ca      	b.n	8004e4a <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7d0      	b.n	8004e5a <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8004eb8:	2001      	movs	r0, #1
 8004eba:	e7ce      	b.n	8004e5a <UART_SetConfig+0x306>
 8004ebc:	01e84800 	.word	0x01e84800
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ec6:	f013 0f01 	tst.w	r3, #1
 8004eca:	d006      	beq.n	8004eda <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ecc:	6802      	ldr	r2, [r0, #0]
 8004ece:	6853      	ldr	r3, [r2, #4]
 8004ed0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ed4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004edc:	f013 0f02 	tst.w	r3, #2
 8004ee0:	d006      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee2:	6802      	ldr	r2, [r0, #0]
 8004ee4:	6853      	ldr	r3, [r2, #4]
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ef2:	f013 0f04 	tst.w	r3, #4
 8004ef6:	d006      	beq.n	8004f06 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef8:	6802      	ldr	r2, [r0, #0]
 8004efa:	6853      	ldr	r3, [r2, #4]
 8004efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f08:	f013 0f08 	tst.w	r3, #8
 8004f0c:	d006      	beq.n	8004f1c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f0e:	6802      	ldr	r2, [r0, #0]
 8004f10:	6853      	ldr	r3, [r2, #4]
 8004f12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f16:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f1e:	f013 0f10 	tst.w	r3, #16
 8004f22:	d006      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f24:	6802      	ldr	r2, [r0, #0]
 8004f26:	6893      	ldr	r3, [r2, #8]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f34:	f013 0f20 	tst.w	r3, #32
 8004f38:	d006      	beq.n	8004f48 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	6802      	ldr	r2, [r0, #0]
 8004f3c:	6893      	ldr	r3, [r2, #8]
 8004f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f42:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f50:	6802      	ldr	r2, [r0, #0]
 8004f52:	6853      	ldr	r3, [r2, #4]
 8004f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f64:	d00b      	beq.n	8004f7e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f6c:	d006      	beq.n	8004f7c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6e:	6802      	ldr	r2, [r0, #0]
 8004f70:	6853      	ldr	r3, [r2, #4]
 8004f72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004f76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6053      	str	r3, [r2, #4]
  }
}
 8004f7c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7e:	6802      	ldr	r2, [r0, #0]
 8004f80:	6853      	ldr	r3, [r2, #4]
 8004f82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f86:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	e7eb      	b.n	8004f66 <UART_AdvFeatureConfig+0xa2>

08004f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	4616      	mov	r6, r2
 8004f98:	4698      	mov	r8, r3
 8004f9a:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	ea37 0303 	bics.w	r3, r7, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	42b3      	cmp	r3, r6
 8004fac:	d11c      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004fb2:	d0f3      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb4:	f7fc ff52 	bl	8001e5c <HAL_GetTick>
 8004fb8:	eba0 0008 	sub.w	r0, r0, r8
 8004fbc:	42a0      	cmp	r0, r4
 8004fbe:	d801      	bhi.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x36>
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	d1eb      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc4:	682a      	ldr	r2, [r5, #0]
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fcc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	682a      	ldr	r2, [r5, #0]
 8004fd0:	6893      	ldr	r3, [r2, #8]
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fd8:	2320      	movs	r3, #32
 8004fda:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fe4:	2003      	movs	r0, #3
 8004fe6:	e000      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2000      	movs	r0, #0
}
 8004fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fee <HAL_UART_Transmit>:
{
 8004fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d159      	bne.n	80050b0 <HAL_UART_Transmit+0xc2>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	460d      	mov	r5, r1
 8005000:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005002:	fab2 f382 	clz	r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2900      	cmp	r1, #0
 800500a:	bf08      	it	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d153      	bne.n	80050ba <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005012:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005016:	2b01      	cmp	r3, #1
 8005018:	d051      	beq.n	80050be <HAL_UART_Transmit+0xd0>
 800501a:	2301      	movs	r3, #1
 800501c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	2300      	movs	r3, #0
 8005022:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005024:	2321      	movs	r3, #33	; 0x21
 8005026:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005028:	f7fc ff18 	bl	8001e5c <HAL_GetTick>
 800502c:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800502e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8005032:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d002      	beq.n	8005044 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800503e:	f04f 0800 	mov.w	r8, #0
 8005042:	e010      	b.n	8005066 <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005044:	6923      	ldr	r3, [r4, #16]
 8005046:	b30b      	cbz	r3, 800508c <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8005048:	f04f 0800 	mov.w	r8, #0
 800504c:	e00b      	b.n	8005066 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800505a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800505e:	3b01      	subs	r3, #1
 8005060:	b29b      	uxth	r3, r3
 8005062:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005066:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800506a:	b29b      	uxth	r3, r3
 800506c:	b18b      	cbz	r3, 8005092 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	9600      	str	r6, [sp, #0]
 8005070:	463b      	mov	r3, r7
 8005072:	2200      	movs	r2, #0
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	4620      	mov	r0, r4
 8005078:	f7ff ff89 	bl	8004f8e <UART_WaitOnFlagUntilTimeout>
 800507c:	bb08      	cbnz	r0, 80050c2 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 800507e:	2d00      	cmp	r5, #0
 8005080:	d0e5      	beq.n	800504e <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005082:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
 800508a:	e7e6      	b.n	800505a <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 800508c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800508e:	2500      	movs	r5, #0
 8005090:	e7e9      	b.n	8005066 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	9600      	str	r6, [sp, #0]
 8005094:	463b      	mov	r3, r7
 8005096:	2200      	movs	r2, #0
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	4620      	mov	r0, r4
 800509c:	f7ff ff77 	bl	8004f8e <UART_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	b980      	cbnz	r0, 80050c6 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 80050a4:	2220      	movs	r2, #32
 80050a6:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 80050ae:	e000      	b.n	80050b2 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	b002      	add	sp, #8
 80050b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e7f9      	b.n	80050b2 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80050be:	2302      	movs	r3, #2
 80050c0:	e7f7      	b.n	80050b2 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e7f5      	b.n	80050b2 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e7f3      	b.n	80050b2 <HAL_UART_Transmit+0xc4>

080050ca <UART_CheckIdleState>:
{
 80050ca:	b510      	push	{r4, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80050d4:	f7fc fec2 	bl	8001e5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	f012 0f08 	tst.w	r2, #8
 80050e0:	d107      	bne.n	80050f2 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80050e2:	2320      	movs	r3, #32
 80050e4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050e6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80050ee:	b002      	add	sp, #8
 80050f0:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4603      	mov	r3, r0
 80050fa:	2200      	movs	r2, #0
 80050fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff ff44 	bl	8004f8e <UART_WaitOnFlagUntilTimeout>
 8005106:	2800      	cmp	r0, #0
 8005108:	d0eb      	beq.n	80050e2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800510a:	2003      	movs	r0, #3
 800510c:	e7ef      	b.n	80050ee <UART_CheckIdleState+0x24>

0800510e <HAL_UART_Init>:
  if (huart == NULL)
 800510e:	b368      	cbz	r0, 800516c <HAL_UART_Init+0x5e>
{
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005114:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005116:	b303      	cbz	r3, 800515a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005118:	2324      	movs	r3, #36	; 0x24
 800511a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005126:	4620      	mov	r0, r4
 8005128:	f7ff fd14 	bl	8004b54 <UART_SetConfig>
 800512c:	2801      	cmp	r0, #1
 800512e:	d013      	beq.n	8005158 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005132:	b9bb      	cbnz	r3, 8005164 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	6853      	ldr	r3, [r2, #4]
 8005138:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800513c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	6893      	ldr	r3, [r2, #8]
 8005142:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005146:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff ffb9 	bl	80050ca <UART_CheckIdleState>
}
 8005158:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800515a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800515e:	f001 f8c3 	bl	80062e8 <HAL_UART_MspInit>
 8005162:	e7d9      	b.n	8005118 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff fead 	bl	8004ec4 <UART_AdvFeatureConfig>
 800516a:	e7e3      	b.n	8005134 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800516c:	2001      	movs	r0, #1
}
 800516e:	4770      	bx	lr

08005170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005170:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005172:	680b      	ldr	r3, [r1, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d018      	beq.n	80051aa <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005178:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800517a:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <FMC_SDRAM_Init+0x70>)
 800517c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800517e:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005180:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005182:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8005184:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8005186:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005188:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800518a:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 800518c:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 800518e:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005190:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005192:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005194:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8005196:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005198:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800519a:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 800519c:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800519e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051a0:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051a2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80051a4:	2000      	movs	r0, #0
 80051a6:	bc30      	pop	{r4, r5}
 80051a8:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80051aa:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80051ac:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051b0:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80051b2:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80051b6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80051b8:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051ba:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80051bc:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80051be:	4c08      	ldr	r4, [pc, #32]	; (80051e0 <FMC_SDRAM_Init+0x70>)
 80051c0:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051c2:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80051c4:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051c6:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80051c8:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80051ca:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80051cc:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80051ce:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80051d0:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80051d2:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80051d4:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80051d6:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051d8:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051da:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80051dc:	6043      	str	r3, [r0, #4]
 80051de:	e7e1      	b.n	80051a4 <FMC_SDRAM_Init+0x34>
 80051e0:	ffff8000 	.word	0xffff8000

080051e4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80051e4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80051e6:	2a01      	cmp	r2, #1
 80051e8:	d021      	beq.n	800522e <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80051ea:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80051ec:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051f0:	680b      	ldr	r3, [r1, #0]
 80051f2:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80051f4:	684c      	ldr	r4, [r1, #4]
 80051f6:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051f8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80051fc:	688c      	ldr	r4, [r1, #8]
 80051fe:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005200:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005204:	68cc      	ldr	r4, [r1, #12]
 8005206:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005208:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800520c:	690c      	ldr	r4, [r1, #16]
 800520e:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8005214:	694c      	ldr	r4, [r1, #20]
 8005216:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005218:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800521c:	6989      	ldr	r1, [r1, #24]
 800521e:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005220:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005224:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005226:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005228:	2000      	movs	r0, #0
 800522a:	bc30      	pop	{r4, r5}
 800522c:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800522e:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005230:	4c11      	ldr	r4, [pc, #68]	; (8005278 <FMC_SDRAM_Timing_Init+0x94>)
 8005232:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005234:	68ca      	ldr	r2, [r1, #12]
 8005236:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8005238:	694b      	ldr	r3, [r1, #20]
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800523e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8005242:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005244:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005246:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800524a:	680b      	ldr	r3, [r1, #0]
 800524c:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800524e:	684d      	ldr	r5, [r1, #4]
 8005250:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005252:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005256:	688d      	ldr	r5, [r1, #8]
 8005258:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800525a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800525e:	690d      	ldr	r5, [r1, #16]
 8005260:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005262:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8005266:	6989      	ldr	r1, [r1, #24]
 8005268:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800526a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800526e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005270:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005272:	60c3      	str	r3, [r0, #12]
 8005274:	e7d8      	b.n	8005228 <FMC_SDRAM_Timing_Init+0x44>
 8005276:	bf00      	nop
 8005278:	ff0f0fff 	.word	0xff0f0fff

0800527c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005282:	2400      	movs	r4, #0
 8005284:	940b      	str	r4, [sp, #44]	; 0x2c
 8005286:	940c      	str	r4, [sp, #48]	; 0x30
 8005288:	940d      	str	r4, [sp, #52]	; 0x34
 800528a:	940e      	str	r4, [sp, #56]	; 0x38
 800528c:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800528e:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <MX_GPIO_Init+0x18c>)
 8005290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005292:	f042 0210 	orr.w	r2, r2, #16
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
 8005298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529a:	f002 0210 	and.w	r2, r2, #16
 800529e:	9200      	str	r2, [sp, #0]
 80052a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a4:	f042 0202 	orr.w	r2, r2, #2
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
 80052aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ac:	f002 0202 	and.w	r2, r2, #2
 80052b0:	9201      	str	r2, [sp, #4]
 80052b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
 80052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052be:	f002 0201 	and.w	r2, r2, #1
 80052c2:	9202      	str	r2, [sp, #8]
 80052c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80052c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
 80052ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80052d4:	9203      	str	r2, [sp, #12]
 80052d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
 80052e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e2:	f002 0208 	and.w	r2, r2, #8
 80052e6:	9204      	str	r2, [sp, #16]
 80052e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80052f8:	9205      	str	r2, [sp, #20]
 80052fa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
 8005304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005306:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800530a:	9206      	str	r2, [sp, #24]
 800530c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800530e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
 8005316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005318:	f002 0220 	and.w	r2, r2, #32
 800531c:	9207      	str	r2, [sp, #28]
 800531e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800532e:	9208      	str	r2, [sp, #32]
 8005330:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	f042 0204 	orr.w	r2, r2, #4
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
 800533a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533c:	f002 0204 	and.w	r2, r2, #4
 8005340:	9209      	str	r2, [sp, #36]	; 0x24
 8005342:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005352:	930a      	str	r3, [sp, #40]	; 0x28
 8005354:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8005356:	4f2d      	ldr	r7, [pc, #180]	; (800540c <MX_GPIO_Init+0x190>)
 8005358:	4622      	mov	r2, r4
 800535a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800535e:	4638      	mov	r0, r7
 8005360:	f7fd fc9d 	bl	8002c9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 8005364:	2310      	movs	r3, #16
 8005366:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005368:	4e29      	ldr	r6, [pc, #164]	; (8005410 <MX_GPIO_Init+0x194>)
 800536a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800536c:	2501      	movs	r5, #1
 800536e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 8005370:	a90b      	add	r1, sp, #44	; 0x2c
 8005372:	4828      	ldr	r0, [pc, #160]	; (8005414 <MX_GPIO_Init+0x198>)
 8005374:	f7fd fb9c 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8005378:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800537c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005382:	2303      	movs	r3, #3
 8005384:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	a90b      	add	r1, sp, #44	; 0x2c
 8005388:	4638      	mov	r0, r7
 800538a:	f7fd fb91 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC3_B_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 800538e:	230d      	movs	r3, #13
 8005390:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005392:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005394:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005396:	a90b      	add	r1, sp, #44	; 0x2c
 8005398:	481f      	ldr	r0, [pc, #124]	; (8005418 <MX_GPIO_Init+0x19c>)
 800539a:	f7fd fb89 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 800539e:	2740      	movs	r7, #64	; 0x40
 80053a0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053a2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053a4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 80053a6:	a90b      	add	r1, sp, #44	; 0x2c
 80053a8:	481c      	ldr	r0, [pc, #112]	; (800541c <MX_GPIO_Init+0x1a0>)
 80053aa:	f7fd fb81 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 80053ae:	f04f 0880 	mov.w	r8, #128	; 0x80
 80053b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053b6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 80053ba:	a90b      	add	r1, sp, #44	; 0x2c
 80053bc:	4818      	ldr	r0, [pc, #96]	; (8005420 <MX_GPIO_Init+0x1a4>)
 80053be:	f7fd fb77 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 80053c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053c6:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053c8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 80053ca:	a90b      	add	r1, sp, #44	; 0x2c
 80053cc:	4815      	ldr	r0, [pc, #84]	; (8005424 <MX_GPIO_Init+0x1a8>)
 80053ce:	f7fd fb6f 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 80053d2:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053d4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053d6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 80053d8:	a90b      	add	r1, sp, #44	; 0x2c
 80053da:	4813      	ldr	r0, [pc, #76]	; (8005428 <MX_GPIO_Init+0x1ac>)
 80053dc:	f7fd fb68 	bl	8002ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80053e0:	4622      	mov	r2, r4
 80053e2:	4621      	mov	r1, r4
 80053e4:	200a      	movs	r0, #10
 80053e6:	f7fd f83b 	bl	8002460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80053ea:	200a      	movs	r0, #10
 80053ec:	f7fd f86a 	bl	80024c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80053f0:	4622      	mov	r2, r4
 80053f2:	4621      	mov	r1, r4
 80053f4:	2017      	movs	r0, #23
 80053f6:	f7fd f833 	bl	8002460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053fa:	2017      	movs	r0, #23
 80053fc:	f7fd f862 	bl	80024c4 <HAL_NVIC_EnableIRQ>

}
 8005400:	b010      	add	sp, #64	; 0x40
 8005402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	40020000 	.word	0x40020000
 8005410:	10110000 	.word	0x10110000
 8005414:	40020400 	.word	0x40020400
 8005418:	40022000 	.word	0x40022000
 800541c:	40020800 	.word	0x40020800
 8005420:	40021800 	.word	0x40021800
 8005424:	40021400 	.word	0x40021400
 8005428:	40021c00 	.word	0x40021c00

0800542c <MX_DMA_Init>:
{
 800542c:	b500      	push	{lr}
 800542e:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <MX_DMA_Init+0x30>)
 8005432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005434:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 8005444:	2200      	movs	r2, #0
 8005446:	2104      	movs	r1, #4
 8005448:	2038      	movs	r0, #56	; 0x38
 800544a:	f7fd f809 	bl	8002460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800544e:	2038      	movs	r0, #56	; 0x38
 8005450:	f7fd f838 	bl	80024c4 <HAL_NVIC_EnableIRQ>
}
 8005454:	b003      	add	sp, #12
 8005456:	f85d fb04 	ldr.w	pc, [sp], #4
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800

08005460 <MX_SPI2_Init>:
{
 8005460:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8005462:	480e      	ldr	r0, [pc, #56]	; (800549c <MX_SPI2_Init+0x3c>)
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <MX_SPI2_Init+0x40>)
 8005466:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005468:	f44f 7382 	mov.w	r3, #260	; 0x104
 800546c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800546e:	2300      	movs	r3, #0
 8005470:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005472:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005476:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005478:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800547a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005482:	2220      	movs	r2, #32
 8005484:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005486:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005488:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800548c:	2207      	movs	r2, #7
 800548e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005490:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005492:	2308      	movs	r3, #8
 8005494:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005496:	f7fe fd4d 	bl	8003f34 <HAL_SPI_Init>
}
 800549a:	bd08      	pop	{r3, pc}
 800549c:	200002c4 	.word	0x200002c4
 80054a0:	40003800 	.word	0x40003800

080054a4 <MX_USART1_UART_Init>:
{
 80054a4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80054a6:	4809      	ldr	r0, [pc, #36]	; (80054cc <MX_USART1_UART_Init+0x28>)
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <MX_USART1_UART_Init+0x2c>)
 80054aa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80054ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80054b0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054b2:	2300      	movs	r3, #0
 80054b4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054b6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054b8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054ba:	220c      	movs	r2, #12
 80054bc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054c0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054c2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054c4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054c6:	f7ff fe22 	bl	800510e <HAL_UART_Init>
}
 80054ca:	bd08      	pop	{r3, pc}
 80054cc:	20000570 	.word	0x20000570
 80054d0:	40011000 	.word	0x40011000

080054d4 <MX_ADC3_Init>:
{
 80054d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80054d8:	2500      	movs	r5, #0
 80054da:	9500      	str	r5, [sp, #0]
 80054dc:	9501      	str	r5, [sp, #4]
 80054de:	9502      	str	r5, [sp, #8]
 80054e0:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 80054e2:	4c1d      	ldr	r4, [pc, #116]	; (8005558 <MX_ADC3_Init+0x84>)
 80054e4:	4b1d      	ldr	r3, [pc, #116]	; (800555c <MX_ADC3_Init+0x88>)
 80054e6:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80054e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ec:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80054ee:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80054f0:	2601      	movs	r6, #1
 80054f2:	6126      	str	r6, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80054f4:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80054f6:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80054fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8005500:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
 8005504:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005506:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 4;
 8005508:	2704      	movs	r7, #4
 800550a:	61e7      	str	r7, [r4, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800550c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005510:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005512:	4620      	mov	r0, r4
 8005514:	f7fc fd56 	bl	8001fc4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8005518:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800551a:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800551c:	2506      	movs	r5, #6
 800551e:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005520:	4669      	mov	r1, sp
 8005522:	4620      	mov	r0, r4
 8005524:	f7fc feb2 	bl	800228c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8005528:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800552a:	2302      	movs	r3, #2
 800552c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800552e:	4669      	mov	r1, sp
 8005530:	4620      	mov	r0, r4
 8005532:	f7fc feab 	bl	800228c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8005536:	2307      	movs	r3, #7
 8005538:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800553a:	2303      	movs	r3, #3
 800553c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800553e:	4669      	mov	r1, sp
 8005540:	4620      	mov	r0, r4
 8005542:	f7fc fea3 	bl	800228c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8005546:	2308      	movs	r3, #8
 8005548:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800554a:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800554c:	4669      	mov	r1, sp
 800554e:	4620      	mov	r0, r4
 8005550:	f7fc fe9c 	bl	800228c <HAL_ADC_ConfigChannel>
}
 8005554:	b005      	add	sp, #20
 8005556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005558:	200004e8 	.word	0x200004e8
 800555c:	40012200 	.word	0x40012200

08005560 <MX_CRC_Init>:
{
 8005560:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8005562:	4806      	ldr	r0, [pc, #24]	; (800557c <MX_CRC_Init+0x1c>)
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <MX_CRC_Init+0x20>)
 8005566:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8005568:	2300      	movs	r3, #0
 800556a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800556c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800556e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8005570:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005572:	2301      	movs	r3, #1
 8005574:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005576:	f7fc ffc9 	bl	800250c <HAL_CRC_Init>
}
 800557a:	bd08      	pop	{r3, pc}
 800557c:	2000035c 	.word	0x2000035c
 8005580:	40023000 	.word	0x40023000

08005584 <MX_DMA2D_Init>:
{
 8005584:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8005586:	4c09      	ldr	r4, [pc, #36]	; (80055ac <MX_DMA2D_Init+0x28>)
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <MX_DMA2D_Init+0x2c>)
 800558a:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800558c:	2300      	movs	r3, #0
 800558e:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005590:	60a3      	str	r3, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8005592:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005594:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005596:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005598:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800559a:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800559c:	4620      	mov	r0, r4
 800559e:	f7fd f9f7 	bl	8002990 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80055a2:	2101      	movs	r1, #1
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7fd fa21 	bl	80029ec <HAL_DMA2D_ConfigLayer>
}
 80055aa:	bd10      	pop	{r4, pc}
 80055ac:	20000658 	.word	0x20000658
 80055b0:	4002b000 	.word	0x4002b000

080055b4 <MX_FMC_Init>:
{
 80055b4:	b500      	push	{lr}
 80055b6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80055b8:	480e      	ldr	r0, [pc, #56]	; (80055f4 <MX_FMC_Init+0x40>)
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <MX_FMC_Init+0x44>)
 80055bc:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80055be:	2200      	movs	r2, #0
 80055c0:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80055c2:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80055c4:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80055c6:	2310      	movs	r3, #16
 80055c8:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80055ca:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80055cc:	2180      	movs	r1, #128	; 0x80
 80055ce:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80055d0:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80055d2:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80055d4:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80055d6:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 80055d8:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80055da:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 80055dc:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 80055de:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80055e0:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 80055e2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 80055e4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80055e6:	a901      	add	r1, sp, #4
 80055e8:	f7fe fb7a 	bl	8003ce0 <HAL_SDRAM_Init>
}
 80055ec:	b009      	add	sp, #36	; 0x24
 80055ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80055f2:	bf00      	nop
 80055f4:	20000698 	.word	0x20000698
 80055f8:	a0000140 	.word	0xa0000140

080055fc <MX_LTDC_Init>:
{
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005600:	2434      	movs	r4, #52	; 0x34
 8005602:	4622      	mov	r2, r4
 8005604:	2100      	movs	r1, #0
 8005606:	eb0d 0004 	add.w	r0, sp, r4
 800560a:	f000 ffa4 	bl	8006556 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800560e:	4622      	mov	r2, r4
 8005610:	2100      	movs	r1, #0
 8005612:	4668      	mov	r0, sp
 8005614:	f000 ff9f 	bl	8006556 <memset>
  hltdc.Instance = LTDC;
 8005618:	4d2b      	ldr	r5, [pc, #172]	; (80056c8 <MX_LTDC_Init+0xcc>)
 800561a:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <MX_LTDC_Init+0xd0>)
 800561c:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800561e:	2400      	movs	r4, #0
 8005620:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005622:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005624:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005626:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 8005628:	2307      	movs	r3, #7
 800562a:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 800562c:	2303      	movs	r3, #3
 800562e:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005630:	230e      	movs	r3, #14
 8005632:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8005634:	2605      	movs	r6, #5
 8005636:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8005638:	f240 238e 	movw	r3, #654	; 0x28e
 800563c:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800563e:	f240 13e5 	movw	r3, #485	; 0x1e5
 8005642:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8005644:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005648:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800564a:	f240 13e7 	movw	r3, #487	; 0x1e7
 800564e:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005650:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8005654:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005658:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800565c:	4628      	mov	r0, r5
 800565e:	f7fd fbfd 	bl	8002e5c <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8005662:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8005664:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8005666:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8005668:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800566a:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800566c:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800566e:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005670:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005674:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005676:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8005678:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800567a:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800567c:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800567e:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8005682:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8005686:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800568a:	4622      	mov	r2, r4
 800568c:	a90d      	add	r1, sp, #52	; 0x34
 800568e:	4628      	mov	r0, r5
 8005690:	f7fd fcce 	bl	8003030 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 8005694:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 8005696:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8005698:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 800569a:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800569c:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 800569e:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 80056a0:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80056a2:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80056a4:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 80056a6:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80056a8:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80056aa:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80056ac:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80056b0:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80056b4:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80056b8:	2201      	movs	r2, #1
 80056ba:	4669      	mov	r1, sp
 80056bc:	4628      	mov	r0, r5
 80056be:	f7fd fcb7 	bl	8003030 <HAL_LTDC_ConfigLayer>
}
 80056c2:	b01b      	add	sp, #108	; 0x6c
 80056c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000440 	.word	0x20000440
 80056cc:	40016800 	.word	0x40016800

080056d0 <MX_TIM13_Init>:
{
 80056d0:	b508      	push	{r3, lr}
  htim13.Instance = TIM13;
 80056d2:	4807      	ldr	r0, [pc, #28]	; (80056f0 <MX_TIM13_Init+0x20>)
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <MX_TIM13_Init+0x24>)
 80056d6:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 1000-1;
 80056d8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80056dc:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056de:	2300      	movs	r3, #0
 80056e0:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 108-1;
 80056e2:	226b      	movs	r2, #107	; 0x6b
 80056e4:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056e6:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80056ea:	f7ff f969 	bl	80049c0 <HAL_TIM_Base_Init>
}
 80056ee:	bd08      	pop	{r3, pc}
 80056f0:	20000530 	.word	0x20000530
 80056f4:	40001c00 	.word	0x40001c00

080056f8 <MX_TIM1_Init>:
{
 80056f8:	b530      	push	{r4, r5, lr}
 80056fa:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056fc:	2400      	movs	r4, #0
 80056fe:	9404      	str	r4, [sp, #16]
 8005700:	9405      	str	r4, [sp, #20]
 8005702:	9406      	str	r4, [sp, #24]
 8005704:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005706:	9401      	str	r4, [sp, #4]
 8005708:	9402      	str	r4, [sp, #8]
 800570a:	9403      	str	r4, [sp, #12]
  htim1.Instance = TIM1;
 800570c:	4d10      	ldr	r5, [pc, #64]	; (8005750 <MX_TIM1_Init+0x58>)
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <MX_TIM1_Init+0x5c>)
 8005710:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 100-1;
 8005712:	2363      	movs	r3, #99	; 0x63
 8005714:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005716:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 216-1;
 8005718:	23d7      	movs	r3, #215	; 0xd7
 800571a:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800571c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800571e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005720:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005722:	4628      	mov	r0, r5
 8005724:	f7ff f94c 	bl	80049c0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800572c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800572e:	a904      	add	r1, sp, #16
 8005730:	4628      	mov	r0, r5
 8005732:	f7ff f96b 	bl	8004a0c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005736:	2320      	movs	r3, #32
 8005738:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800573a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800573e:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005740:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005742:	a901      	add	r1, sp, #4
 8005744:	4628      	mov	r0, r5
 8005746:	f7ff f9cf 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
}
 800574a:	b009      	add	sp, #36	; 0x24
 800574c:	bd30      	pop	{r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	20000618 	.word	0x20000618
 8005754:	40010000 	.word	0x40010000

08005758 <SystemClock_Config>:
{
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800575c:	2230      	movs	r2, #48	; 0x30
 800575e:	2100      	movs	r1, #0
 8005760:	a828      	add	r0, sp, #160	; 0xa0
 8005762:	f000 fef8 	bl	8006556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005766:	2400      	movs	r4, #0
 8005768:	9423      	str	r4, [sp, #140]	; 0x8c
 800576a:	9424      	str	r4, [sp, #144]	; 0x90
 800576c:	9425      	str	r4, [sp, #148]	; 0x94
 800576e:	9426      	str	r4, [sp, #152]	; 0x98
 8005770:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005772:	2284      	movs	r2, #132	; 0x84
 8005774:	4621      	mov	r1, r4
 8005776:	a802      	add	r0, sp, #8
 8005778:	f000 feed 	bl	8006556 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <SystemClock_Config+0xc0>)
 800577e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005780:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <SystemClock_Config+0xc4>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057a4:	2601      	movs	r6, #1
 80057a6:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057ac:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057ae:	2502      	movs	r5, #2
 80057b0:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057b6:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80057b8:	2319      	movs	r3, #25
 80057ba:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80057bc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80057c0:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057c2:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80057c4:	2309      	movs	r3, #9
 80057c6:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057c8:	a828      	add	r0, sp, #160	; 0xa0
 80057ca:	f7fd fc9d 	bl	8003108 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80057ce:	f7fd fc5d 	bl	800308c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057d2:	230f      	movs	r3, #15
 80057d4:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057d6:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057d8:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80057de:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80057e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e4:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80057e6:	2107      	movs	r1, #7
 80057e8:	a823      	add	r0, sp, #140	; 0x8c
 80057ea:	f7fd fecb 	bl	8003584 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 80057ee:	2348      	movs	r3, #72	; 0x48
 80057f0:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80057f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80057f6:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80057f8:	2305      	movs	r3, #5
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80057fc:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80057fe:	2303      	movs	r3, #3
 8005800:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005802:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005808:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800580a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800580c:	a802      	add	r0, sp, #8
 800580e:	f7fd ff91 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
}
 8005812:	b034      	add	sp, #208	; 0xd0
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	bf00      	nop
 8005818:	40023800 	.word	0x40023800
 800581c:	40007000 	.word	0x40007000

08005820 <main>:
{
 8005820:	b510      	push	{r4, lr}
 8005822:	b09c      	sub	sp, #112	; 0x70
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005824:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005828:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800582c:	4b41      	ldr	r3, [pc, #260]	; (8005934 <main+0x114>)
 800582e:	2100      	movs	r1, #0
 8005830:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005838:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005842:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005848:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800584c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005850:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005854:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005858:	f3c4 314e 	ubfx	r1, r4, #13, #15
 800585c:	e00f      	b.n	800587e <main+0x5e>
      } while (ways-- != 0U);
 800585e:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005860:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005864:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8005868:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800586c:	4831      	ldr	r0, [pc, #196]	; (8005934 <main+0x114>)
 800586e:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8005872:	1e53      	subs	r3, r2, #1
 8005874:	2a00      	cmp	r2, #0
 8005876:	d1f2      	bne.n	800585e <main+0x3e>
    } while(sets-- != 0U);
 8005878:	1e4b      	subs	r3, r1, #1
 800587a:	b119      	cbz	r1, 8005884 <main+0x64>
 800587c:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800587e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8005882:	e7ed      	b.n	8005860 <main+0x40>
 8005884:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005888:	6943      	ldr	r3, [r0, #20]
 800588a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588e:	6143      	str	r3, [r0, #20]
 8005890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005894:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005898:	f7fc fac2 	bl	8001e20 <HAL_Init>
  SystemClock_Config();
 800589c:	f7ff ff5c 	bl	8005758 <SystemClock_Config>
  MX_GPIO_Init();
 80058a0:	f7ff fcec 	bl	800527c <MX_GPIO_Init>
  MX_DMA_Init();
 80058a4:	f7ff fdc2 	bl	800542c <MX_DMA_Init>
  MX_SPI2_Init();
 80058a8:	f7ff fdda 	bl	8005460 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80058ac:	f7ff fdfa 	bl	80054a4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80058b0:	f7ff fe10 	bl	80054d4 <MX_ADC3_Init>
  MX_CRC_Init();
 80058b4:	f7ff fe54 	bl	8005560 <MX_CRC_Init>
  MX_DMA2D_Init();
 80058b8:	f7ff fe64 	bl	8005584 <MX_DMA2D_Init>
  MX_FMC_Init();
 80058bc:	f7ff fe7a 	bl	80055b4 <MX_FMC_Init>
  MX_LTDC_Init();
 80058c0:	f7ff fe9c 	bl	80055fc <MX_LTDC_Init>
  MX_TIM1_Init();
 80058c4:	f7ff ff18 	bl	80056f8 <MX_TIM1_Init>
  MX_TIM13_Init();
 80058c8:	f7ff ff02 	bl	80056d0 <MX_TIM13_Init>
	if( HAL_ADC_Start(&hadc3) == HAL_OK) {
 80058cc:	481a      	ldr	r0, [pc, #104]	; (8005938 <main+0x118>)
 80058ce:	f7fc fba5 	bl	800201c <HAL_ADC_Start>
	DWT_Init(); //For uS delays
 80058d2:	f7fc fa53 	bl	8001d7c <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 80058d6:	4c19      	ldr	r4, [pc, #100]	; (800593c <main+0x11c>)
 80058d8:	2260      	movs	r2, #96	; 0x60
 80058da:	1d21      	adds	r1, r4, #4
 80058dc:	4668      	mov	r0, sp
 80058de:	f000 fe2f 	bl	8006540 <memcpy>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058ec:	4814      	ldr	r0, [pc, #80]	; (8005940 <main+0x120>)
 80058ee:	f7fb fe6d 	bl	80015cc <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80058f2:	4c14      	ldr	r4, [pc, #80]	; (8005944 <main+0x124>)
 80058f4:	2270      	movs	r2, #112	; 0x70
 80058f6:	f104 0110 	add.w	r1, r4, #16
 80058fa:	4668      	mov	r0, sp
 80058fc:	f000 fe20 	bl	8006540 <memcpy>
 8005900:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005904:	f7fc fa1c 	bl	8001d40 <nrf24_DebugUART_Init>
	NRF24_stopListening();
 8005908:	f7fb fc7d 	bl	8001206 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <main+0x128>)
 800590e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005912:	f7fb fc81 	bl	8001218 <NRF24_openWritingPipe>
	printRadioSettings();
 8005916:	f7fb ff23 	bl	8001760 <printRadioSettings>
	for (int i = 0; i < 31; ++i) {
 800591a:	2300      	movs	r3, #0
 800591c:	e003      	b.n	8005926 <main+0x106>
		TxData[i] = 0;
 800591e:	4a0b      	ldr	r2, [pc, #44]	; (800594c <main+0x12c>)
 8005920:	2100      	movs	r1, #0
 8005922:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 31; ++i) {
 8005924:	3301      	adds	r3, #1
 8005926:	2b1e      	cmp	r3, #30
 8005928:	ddf9      	ble.n	800591e <main+0xfe>
	HAL_TIM_Base_Start_IT(&htim13);
 800592a:	4809      	ldr	r0, [pc, #36]	; (8005950 <main+0x130>)
 800592c:	f7fe feda 	bl	80046e4 <HAL_TIM_Base_Start_IT>
 8005930:	e7fe      	b.n	8005930 <main+0x110>
 8005932:	bf00      	nop
 8005934:	e000ed00 	.word	0xe000ed00
 8005938:	200004e8 	.word	0x200004e8
 800593c:	200002c4 	.word	0x200002c4
 8005940:	40020000 	.word	0x40020000
 8005944:	20000570 	.word	0x20000570
 8005948:	20000008 	.word	0x20000008
 800594c:	200005f4 	.word	0x200005f4
 8005950:	20000530 	.word	0x20000530

08005954 <packData>:

/* USER CODE BEGIN 4 */
void packData() {
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	ed2d 8b02 	vpush	{d8}

	//Reverse A2 and A3 as joystick is upside down
	adcArray[2] = 4096 - adcArray[2];
 800595a:	483d      	ldr	r0, [pc, #244]	; (8005a50 <packData+0xfc>)
 800595c:	6881      	ldr	r1, [r0, #8]
 800595e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8005962:	6081      	str	r1, [r0, #8]
	adcArray[4] = 4096 - adcArray[4];
 8005964:	6902      	ldr	r2, [r0, #16]
 8005966:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800596a:	6102      	str	r2, [r0, #16]

	//L Joystick X
	//First byte = first byte of A0
	TxData[0] = adcArray[0];
 800596c:	6804      	ldr	r4, [r0, #0]
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <packData+0x100>)
 8005970:	701c      	strb	r4, [r3, #0]
	//Second bytes = last byte of A0
	TxData[1] = adcArray[0] >> 8;
 8005972:	0a24      	lsrs	r4, r4, #8
 8005974:	705c      	strb	r4, [r3, #1]

	//L Joystick Y
	TxData[2] = adcArray[3];
 8005976:	68c0      	ldr	r0, [r0, #12]
 8005978:	7098      	strb	r0, [r3, #2]
	//4th byte = last 8 bits of A1
	TxData[3] = adcArray[3] >> 8;
 800597a:	0a00      	lsrs	r0, r0, #8
 800597c:	70d8      	strb	r0, [r3, #3]

	//R Joystick X
	TxData[4] = adcArray[2];
 800597e:	7119      	strb	r1, [r3, #4]
	TxData[5] = adcArray[2] >> 8;
 8005980:	0a09      	lsrs	r1, r1, #8
 8005982:	7159      	strb	r1, [r3, #5]
	//R Joystick Y
	TxData[6] = adcArray[4];
 8005984:	719a      	strb	r2, [r3, #6]
	TxData[7] = adcArray[4] >> 8;
 8005986:	0a12      	lsrs	r2, r2, #8
 8005988:	71da      	strb	r2, [r3, #7]

	//Air mode bit
	if (airmode) {
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <packData+0x104>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d052      	beq.n	8005a38 <packData+0xe4>
		TxData[8] |= 1 << 0;
 8005992:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <packData+0x100>)
 8005994:	7a13      	ldrb	r3, [r2, #8]
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	7213      	strb	r3, [r2, #8]
	} else {
		TxData[8] &= ~(1 << 0);
	}

	//Kill switch
	if (kill) {
 800599c:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <packData+0x108>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d14f      	bne.n	8005a44 <packData+0xf0>

		TxData[8] |= 1 << 1;
	} else {
		TxData[8] &= ~(1 << 1);
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <packData+0x100>)
 80059a6:	7a13      	ldrb	r3, [r2, #8]
 80059a8:	f023 0302 	bic.w	r3, r3, #2
 80059ac:	7213      	strb	r3, [r2, #8]
	}


	uint16_t roll_p_tx = round(roll_p * 100);
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <packData+0x10c>)
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8005a64 <packData+0x110>
 80059b8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059bc:	ee17 0a90 	vmov	r0, s15
 80059c0:	f7fa fde2 	bl	8000588 <__aeabi_f2d>
 80059c4:	ec41 0b10 	vmov	d0, r0, r1
 80059c8:	f004 fafa 	bl	8009fc0 <round>
 80059cc:	ec51 0b10 	vmov	r0, r1, d0
 80059d0:	f7fb f90a 	bl	8000be8 <__aeabi_d2uiz>
 80059d4:	b285      	uxth	r5, r0
	uint16_t roll_i_tx = round(roll_i * 100) ;
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <packData+0x114>)
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059e0:	ee17 0a90 	vmov	r0, s15
 80059e4:	f7fa fdd0 	bl	8000588 <__aeabi_f2d>
 80059e8:	ec41 0b10 	vmov	d0, r0, r1
 80059ec:	f004 fae8 	bl	8009fc0 <round>
 80059f0:	ec51 0b10 	vmov	r0, r1, d0
 80059f4:	f7fb f8f8 	bl	8000be8 <__aeabi_d2uiz>
 80059f8:	b284      	uxth	r4, r0
	uint16_t roll_d_tx = round(roll_d * 100) ;
 80059fa:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <packData+0x118>)
 80059fc:	edd3 7a00 	vldr	s15, [r3]
 8005a00:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005a04:	ee17 0a90 	vmov	r0, s15
 8005a08:	f7fa fdbe 	bl	8000588 <__aeabi_f2d>
 8005a0c:	ec41 0b10 	vmov	d0, r0, r1
 8005a10:	f004 fad6 	bl	8009fc0 <round>
 8005a14:	ec51 0b10 	vmov	r0, r1, d0
 8005a18:	f7fb f8e6 	bl	8000be8 <__aeabi_d2uiz>
 8005a1c:	b280      	uxth	r0, r0

	TxData[9] = roll_p_tx;
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <packData+0x100>)
 8005a20:	725d      	strb	r5, [r3, #9]
	TxData[10] = roll_p_tx >> 8;
 8005a22:	0a2d      	lsrs	r5, r5, #8
 8005a24:	729d      	strb	r5, [r3, #10]

	TxData[11] = roll_i_tx;
 8005a26:	72dc      	strb	r4, [r3, #11]
	TxData[12] = roll_i_tx >> 8;
 8005a28:	0a24      	lsrs	r4, r4, #8
 8005a2a:	731c      	strb	r4, [r3, #12]

	TxData[13] = roll_d_tx;
 8005a2c:	7358      	strb	r0, [r3, #13]
	TxData[14] = roll_d_tx >> 8;
 8005a2e:	0a00      	lsrs	r0, r0, #8
 8005a30:	7398      	strb	r0, [r3, #14]

}
 8005a32:	ecbd 8b02 	vpop	{d8}
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
		TxData[8] &= ~(1 << 0);
 8005a38:	4a06      	ldr	r2, [pc, #24]	; (8005a54 <packData+0x100>)
 8005a3a:	7a13      	ldrb	r3, [r2, #8]
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	7213      	strb	r3, [r2, #8]
 8005a42:	e7ab      	b.n	800599c <packData+0x48>
		TxData[8] |= 1 << 1;
 8005a44:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <packData+0x100>)
 8005a46:	7a13      	ldrb	r3, [r2, #8]
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	7213      	strb	r3, [r2, #8]
 8005a4e:	e7ae      	b.n	80059ae <packData+0x5a>
 8005a50:	2000034c 	.word	0x2000034c
 8005a54:	200005f4 	.word	0x200005f4
 8005a58:	20000291 	.word	0x20000291
 8005a5c:	20000293 	.word	0x20000293
 8005a60:	200002a8 	.word	0x200002a8
 8005a64:	42c80000 	.word	0x42c80000
 8005a68:	200002a4 	.word	0x200002a4
 8005a6c:	200002a0 	.word	0x200002a0

08005a70 <unpackAckPayload>:

void unpackAckPayload() {

	//Check if this is packet 0 or packet 1
	if (AckPayload[0] == 0x00) {
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <unpackAckPayload+0x60>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	bb5b      	cbnz	r3, 8005ace <unpackAckPayload+0x5e>

		droneBatteryLvl = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 8005a76:	4916      	ldr	r1, [pc, #88]	; (8005ad0 <unpackAckPayload+0x60>)
 8005a78:	784b      	ldrb	r3, [r1, #1]
 8005a7a:	788a      	ldrb	r2, [r1, #2]
 8005a7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <unpackAckPayload+0x64>)
 8005a82:	6013      	str	r3, [r2, #0]
		int16_t roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 8005a84:	78ca      	ldrb	r2, [r1, #3]
 8005a86:	790b      	ldrb	r3, [r1, #4]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	431a      	orrs	r2, r3
		roll = roll_rx / 100;
 8005a8e:	4812      	ldr	r0, [pc, #72]	; (8005ad8 <unpackAckPayload+0x68>)
 8005a90:	fb80 c302 	smull	ip, r3, r0, r2
 8005a94:	17d2      	asrs	r2, r2, #31
 8005a96:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8005a9a:	b212      	sxth	r2, r2
 8005a9c:	ee07 2a90 	vmov	s15, r2
 8005aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <unpackAckPayload+0x6c>)
 8005aa6:	edc3 7a00 	vstr	s15, [r3]


		int16_t pitch_rx = (AckPayload[5] & 0xFF) | (AckPayload[6] << 8);
 8005aaa:	794b      	ldrb	r3, [r1, #5]
 8005aac:	798a      	ldrb	r2, [r1, #6]
 8005aae:	0212      	lsls	r2, r2, #8
 8005ab0:	b212      	sxth	r2, r2
 8005ab2:	4313      	orrs	r3, r2
		pitch = pitch_rx / 100;
 8005ab4:	fb80 2003 	smull	r2, r0, r0, r3
 8005ab8:	17db      	asrs	r3, r3, #31
 8005aba:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8005abe:	b21b      	sxth	r3, r3
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <unpackAckPayload+0x70>)
 8005aca:	edc3 7a00 	vstr	s15, [r3]
	//This is packet 1, only sent every
	if (AckPayload[0] == 0xFF) {

	}

}
 8005ace:	4770      	bx	lr
 8005ad0:	2000032c 	.word	0x2000032c
 8005ad4:	20000010 	.word	0x20000010
 8005ad8:	51eb851f 	.word	0x51eb851f
 8005adc:	2000029c 	.word	0x2000029c
 8005ae0:	20000294 	.word	0x20000294

08005ae4 <read_rotary_1>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 8005ae4:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_1 <<= 2;
 8005ae6:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <read_rotary_1+0x70>)
 8005ae8:	7813      	ldrb	r3, [r2, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	4819      	ldr	r0, [pc, #100]	; (8005b58 <read_rotary_1+0x74>)
 8005af2:	f7fd f8cd 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005af6:	2801      	cmp	r0, #1
 8005af8:	d01a      	beq.n	8005b30 <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	4817      	ldr	r0, [pc, #92]	; (8005b5c <read_rotary_1+0x78>)
 8005afe:	f7fd f8c7 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005b02:	2801      	cmp	r0, #1
 8005b04:	d01a      	beq.n	8005b3c <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 8005b06:	4913      	ldr	r1, [pc, #76]	; (8005b54 <read_rotary_1+0x70>)
 8005b08:	780b      	ldrb	r3, [r1, #0]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_1] ) {
 8005b10:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <read_rotary_1+0x7c>)
 8005b12:	5698      	ldrsb	r0, [r3, r2]
 8005b14:	b158      	cbz	r0, 8005b2e <read_rotary_1+0x4a>
		store_1 <<= 4;
 8005b16:	4913      	ldr	r1, [pc, #76]	; (8005b64 <read_rotary_1+0x80>)
 8005b18:	880b      	ldrh	r3, [r1, #0]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	800b      	strh	r3, [r1, #0]
 8005b22:	b2db      	uxtb	r3, r3

		if ((store_1&0xff)==0x2b) return -1;
 8005b24:	2b2b      	cmp	r3, #43	; 0x2b
 8005b26:	d011      	beq.n	8005b4c <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 8005b28:	2b17      	cmp	r3, #23
 8005b2a:	d00d      	beq.n	8005b48 <read_rotary_1+0x64>
	}
	return 0;
 8005b2c:	2000      	movs	r0, #0
}
 8005b2e:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <read_rotary_1+0x70>)
 8005b32:	7813      	ldrb	r3, [r2, #0]
 8005b34:	f043 0302 	orr.w	r3, r3, #2
 8005b38:	7013      	strb	r3, [r2, #0]
 8005b3a:	e7de      	b.n	8005afa <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8005b3c:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <read_rotary_1+0x70>)
 8005b3e:	7813      	ldrb	r3, [r2, #0]
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	7013      	strb	r3, [r2, #0]
 8005b46:	e7de      	b.n	8005b06 <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 8005b48:	2001      	movs	r0, #1
 8005b4a:	e7f0      	b.n	8005b2e <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b50:	e7ed      	b.n	8005b2e <read_rotary_1+0x4a>
 8005b52:	bf00      	nop
 8005b54:	20000298 	.word	0x20000298
 8005b58:	40021400 	.word	0x40021400
 8005b5c:	40020800 	.word	0x40020800
 8005b60:	0800a4f0 	.word	0x0800a4f0
 8005b64:	200002ac 	.word	0x200002ac

08005b68 <read_rotary_2>:


// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 8005b68:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_2 <<= 2;
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <read_rotary_2+0x70>)
 8005b6c:	7813      	ldrb	r3, [r2, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8005b72:	2110      	movs	r1, #16
 8005b74:	4819      	ldr	r0, [pc, #100]	; (8005bdc <read_rotary_2+0x74>)
 8005b76:	f7fd f88b 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005b7a:	2801      	cmp	r0, #1
 8005b7c:	d01a      	beq.n	8005bb4 <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	4817      	ldr	r0, [pc, #92]	; (8005be0 <read_rotary_2+0x78>)
 8005b82:	f7fd f885 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005b86:	2801      	cmp	r0, #1
 8005b88:	d01a      	beq.n	8005bc0 <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 8005b8a:	4913      	ldr	r1, [pc, #76]	; (8005bd8 <read_rotary_2+0x70>)
 8005b8c:	780b      	ldrb	r3, [r1, #0]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if  (rot_enc_table[prevNextCode_2] ) {
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <read_rotary_2+0x7c>)
 8005b96:	5698      	ldrsb	r0, [r3, r2]
 8005b98:	b158      	cbz	r0, 8005bb2 <read_rotary_2+0x4a>
		store_2 <<= 4;
 8005b9a:	4913      	ldr	r1, [pc, #76]	; (8005be8 <read_rotary_2+0x80>)
 8005b9c:	880b      	ldrh	r3, [r1, #0]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	800b      	strh	r3, [r1, #0]
 8005ba6:	b2db      	uxtb	r3, r3

		if ((store_2&0xff)==0x2b) return -1;
 8005ba8:	2b2b      	cmp	r3, #43	; 0x2b
 8005baa:	d011      	beq.n	8005bd0 <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 8005bac:	2b17      	cmp	r3, #23
 8005bae:	d00d      	beq.n	8005bcc <read_rotary_2+0x64>
	}
	return 0;
 8005bb0:	2000      	movs	r0, #0
}
 8005bb2:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <read_rotary_2+0x70>)
 8005bb6:	7813      	ldrb	r3, [r2, #0]
 8005bb8:	f043 0302 	orr.w	r3, r3, #2
 8005bbc:	7013      	strb	r3, [r2, #0]
 8005bbe:	e7de      	b.n	8005b7e <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8005bc0:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <read_rotary_2+0x70>)
 8005bc2:	7813      	ldrb	r3, [r2, #0]
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	7013      	strb	r3, [r2, #0]
 8005bca:	e7de      	b.n	8005b8a <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e7f0      	b.n	8005bb2 <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd4:	e7ed      	b.n	8005bb2 <read_rotary_2+0x4a>
 8005bd6:	bf00      	nop
 8005bd8:	20000299 	.word	0x20000299
 8005bdc:	40020400 	.word	0x40020400
 8005be0:	40021800 	.word	0x40021800
 8005be4:	0800a500 	.word	0x0800a500
 8005be8:	200002ae 	.word	0x200002ae

08005bec <read_rotary_3>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 8005bec:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_3 <<= 2;
 8005bee:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <read_rotary_3+0x70>)
 8005bf0:	7813      	ldrb	r3, [r2, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8005bf6:	2140      	movs	r1, #64	; 0x40
 8005bf8:	4819      	ldr	r0, [pc, #100]	; (8005c60 <read_rotary_3+0x74>)
 8005bfa:	f7fd f849 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005bfe:	2801      	cmp	r0, #1
 8005c00:	d01a      	beq.n	8005c38 <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8005c02:	2108      	movs	r1, #8
 8005c04:	4817      	ldr	r0, [pc, #92]	; (8005c64 <read_rotary_3+0x78>)
 8005c06:	f7fd f843 	bl	8002c90 <HAL_GPIO_ReadPin>
 8005c0a:	2801      	cmp	r0, #1
 8005c0c:	d01a      	beq.n	8005c44 <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 8005c0e:	4913      	ldr	r1, [pc, #76]	; (8005c5c <read_rotary_3+0x70>)
 8005c10:	780b      	ldrb	r3, [r1, #0]
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_3] ) {
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <read_rotary_3+0x7c>)
 8005c1a:	5698      	ldrsb	r0, [r3, r2]
 8005c1c:	b158      	cbz	r0, 8005c36 <read_rotary_3+0x4a>
		store_3 <<= 4;
 8005c1e:	4913      	ldr	r1, [pc, #76]	; (8005c6c <read_rotary_3+0x80>)
 8005c20:	880b      	ldrh	r3, [r1, #0]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 8005c26:	4313      	orrs	r3, r2
 8005c28:	800b      	strh	r3, [r1, #0]
 8005c2a:	b2db      	uxtb	r3, r3

		if ((store_3&0xff)==0x2b) return -1;
 8005c2c:	2b2b      	cmp	r3, #43	; 0x2b
 8005c2e:	d011      	beq.n	8005c54 <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 8005c30:	2b17      	cmp	r3, #23
 8005c32:	d00d      	beq.n	8005c50 <read_rotary_3+0x64>
	}
	return 0;
 8005c34:	2000      	movs	r0, #0
}
 8005c36:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <read_rotary_3+0x70>)
 8005c3a:	7813      	ldrb	r3, [r2, #0]
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	7013      	strb	r3, [r2, #0]
 8005c42:	e7de      	b.n	8005c02 <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8005c44:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <read_rotary_3+0x70>)
 8005c46:	7813      	ldrb	r3, [r2, #0]
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	7013      	strb	r3, [r2, #0]
 8005c4e:	e7de      	b.n	8005c0e <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7f0      	b.n	8005c36 <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c58:	e7ed      	b.n	8005c36 <read_rotary_3+0x4a>
 8005c5a:	bf00      	nop
 8005c5c:	2000029a 	.word	0x2000029a
 8005c60:	40021c00 	.word	0x40021c00
 8005c64:	40022000 	.word	0x40022000
 8005c68:	0800a510 	.word	0x0800a510
 8005c6c:	200002b0 	.word	0x200002b0

08005c70 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005c70:	b510      	push	{r4, lr}
 8005c72:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8005c74:	2880      	cmp	r0, #128	; 0x80
 8005c76:	d004      	beq.n	8005c82 <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8005c78:	2c10      	cmp	r4, #16
 8005c7a:	d025      	beq.n	8005cc8 <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8005c7c:	2c40      	cmp	r4, #64	; 0x40
 8005c7e:	d046      	beq.n	8005d0e <HAL_GPIO_EXTI_Callback+0x9e>
}
 8005c80:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 8005c82:	f7ff ff2f 	bl	8005ae4 <read_rotary_1>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d0f6      	beq.n	8005c78 <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 8005c8a:	4b32      	ldr	r3, [pc, #200]	; (8005d54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b0b      	cmp	r3, #11
 8005c90:	d00b      	beq.n	8005caa <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 8005c92:	2b07      	cmp	r3, #7
 8005c94:	d1f0      	bne.n	8005c78 <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 8005c96:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8005c98:	edd3 7a00 	vldr	s15, [r3]
 8005c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
 8005ca8:	e7e6      	b.n	8005c78 <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 8005caa:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8005cac:	edd2 7a00 	vldr	s15, [r2]
 8005cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb8:	ddeb      	ble.n	8005c92 <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 8005cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cc2:	edc2 7a00 	vstr	s15, [r2]
 8005cc6:	e7e4      	b.n	8005c92 <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 8005cc8:	f7ff ff4e 	bl	8005b68 <read_rotary_2>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d0d5      	beq.n	8005c7c <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 8005cd0:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <HAL_GPIO_EXTI_Callback+0xec>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b0b      	cmp	r3, #11
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 8005cd8:	2b07      	cmp	r3, #7
 8005cda:	d1cf      	bne.n	8005c7c <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005cde:	edd3 7a00 	vldr	s15, [r3]
 8005ce2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cea:	edc3 7a00 	vstr	s15, [r3]
 8005cee:	e7c5      	b.n	8005c7c <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005cf2:	edd2 7a00 	vldr	s15, [r2]
 8005cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	ddeb      	ble.n	8005cd8 <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 8005d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d08:	edc2 7a00 	vstr	s15, [r2]
 8005d0c:	e7e4      	b.n	8005cd8 <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 8005d0e:	f7ff ff6d 	bl	8005bec <read_rotary_3>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0b4      	beq.n	8005c80 <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 8005d16:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b0b      	cmp	r3, #11
 8005d1c:	d00b      	beq.n	8005d36 <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 8005d1e:	2b07      	cmp	r3, #7
 8005d20:	d1ae      	bne.n	8005c80 <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d30:	edc3 7a00 	vstr	s15, [r3]
}
 8005d34:	e7a4      	b.n	8005c80 <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 8005d36:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005d38:	edd2 7a00 	vldr	s15, [r2]
 8005d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	ddeb      	ble.n	8005d1e <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 8005d46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d4e:	edc2 7a00 	vstr	s15, [r2]
 8005d52:	e7e4      	b.n	8005d1e <HAL_GPIO_EXTI_Callback+0xae>
 8005d54:	20000298 	.word	0x20000298
 8005d58:	200002a0 	.word	0x200002a0
 8005d5c:	20000299 	.word	0x20000299
 8005d60:	200002a4 	.word	0x200002a4
 8005d64:	2000029a 	.word	0x2000029a
 8005d68:	200002a8 	.word	0x200002a8

08005d6c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){




}
 8005d6c:	4770      	bx	lr

08005d6e <HAL_ADC_ErrorCallback>:





}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if (htim->Instance == TIM13) {
 8005d70:	6802      	ldr	r2, [r0, #0]
 8005d72:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d000      	beq.n	8005d7a <HAL_TIM_PeriodElapsedCallback+0xa>
 8005d78:	4770      	bx	lr
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005d7a:	b530      	push	{r4, r5, lr}
 8005d7c:	b089      	sub	sp, #36	; 0x24
		packData();
 8005d7e:	f7ff fde9 	bl	8005954 <packData>

		//Transmit payload to drone
		if (NRF24_write(TxData, 32)) {
 8005d82:	2120      	movs	r1, #32
 8005d84:	4815      	ldr	r0, [pc, #84]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005d86:	f7fb fba1 	bl	80014cc <NRF24_write>
 8005d8a:	b930      	cbnz	r0, 8005d9a <HAL_TIM_PeriodElapsedCallback+0x2a>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
					10);
			connection = 1;
		} else {
			connection = 0;
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
		}

		unpackAckPayload();
 8005d92:	f7ff fe6d 	bl	8005a70 <unpackAckPayload>
	}

}
 8005d96:	b009      	add	sp, #36	; 0x24
 8005d98:	bd30      	pop	{r4, r5, pc}
			NRF24_read(AckPayload, 32);
 8005d9a:	4d12      	ldr	r5, [pc, #72]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7fb fab1 	bl	8001306 <NRF24_read>
			HAL_UART_Transmit(&huart1,
 8005da4:	4c10      	ldr	r4, [pc, #64]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005da6:	230a      	movs	r3, #10
 8005da8:	221a      	movs	r2, #26
 8005daa:	4910      	ldr	r1, [pc, #64]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7ff f91e 	bl	8004fee <HAL_UART_Transmit>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8005db2:	462a      	mov	r2, r5
 8005db4:	490e      	ldr	r1, [pc, #56]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005db6:	4668      	mov	r0, sp
 8005db8:	f001 fa1a 	bl	80071f0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
 8005dbc:	4668      	mov	r0, sp
 8005dbe:	f7fa fa27 	bl	8000210 <strlen>
 8005dc2:	230a      	movs	r3, #10
 8005dc4:	b282      	uxth	r2, r0
 8005dc6:	4669      	mov	r1, sp
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7ff f910 	bl	8004fee <HAL_UART_Transmit>
			connection = 1;
 8005dce:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e7dd      	b.n	8005d92 <HAL_TIM_PeriodElapsedCallback+0x22>
 8005dd6:	bf00      	nop
 8005dd8:	40001c00 	.word	0x40001c00
 8005ddc:	200005f4 	.word	0x200005f4
 8005de0:	20000292 	.word	0x20000292
 8005de4:	2000032c 	.word	0x2000032c
 8005de8:	20000570 	.word	0x20000570
 8005dec:	0800a4c0 	.word	0x0800a4c0
 8005df0:	0800a4dc 	.word	0x0800a4dc

08005df4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9302      	str	r3, [sp, #8]
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_FMC_MspInit+0xa8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	b10b      	cbz	r3, 8005e12 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005e0e:	b007      	add	sp, #28
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_FMC_MspInit+0xa8>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_FMC_MspInit+0xac>)
 8005e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8005e2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005e30:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e32:	2602      	movs	r6, #2
 8005e34:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e36:	2503      	movs	r5, #3
 8005e38:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e3a:	240c      	movs	r4, #12
 8005e3c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e3e:	a901      	add	r1, sp, #4
 8005e40:	4819      	ldr	r0, [pc, #100]	; (8005ea8 <HAL_FMC_MspInit+0xb0>)
 8005e42:	f7fc fe35 	bl	8002ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8005e46:	f248 1311 	movw	r3, #33041	; 0x8111
 8005e4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	2700      	movs	r7, #0
 8005e50:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e52:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e54:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e56:	a901      	add	r1, sp, #4
 8005e58:	4814      	ldr	r0, [pc, #80]	; (8005eac <HAL_FMC_MspInit+0xb4>)
 8005e5a:	f7fc fe29 	bl	8002ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8005e5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005e62:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e66:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e68:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e6a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e6c:	a901      	add	r1, sp, #4
 8005e6e:	4810      	ldr	r0, [pc, #64]	; (8005eb0 <HAL_FMC_MspInit+0xb8>)
 8005e70:	f7fc fe1e 	bl	8002ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005e74:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005e78:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e80:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e82:	a901      	add	r1, sp, #4
 8005e84:	480b      	ldr	r0, [pc, #44]	; (8005eb4 <HAL_FMC_MspInit+0xbc>)
 8005e86:	f7fc fe13 	bl	8002ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8005e8a:	232c      	movs	r3, #44	; 0x2c
 8005e8c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e90:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e92:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e94:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005e96:	a901      	add	r1, sp, #4
 8005e98:	4807      	ldr	r0, [pc, #28]	; (8005eb8 <HAL_FMC_MspInit+0xc0>)
 8005e9a:	f7fc fe09 	bl	8002ab0 <HAL_GPIO_Init>
 8005e9e:	e7b6      	b.n	8005e0e <HAL_FMC_MspInit+0x16>
 8005ea0:	200002b4 	.word	0x200002b4
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40021800 	.word	0x40021800
 8005eb0:	40020c00 	.word	0x40020c00
 8005eb4:	40021400 	.word	0x40021400
 8005eb8:	40021c00 	.word	0x40021c00

08005ebc <HAL_MspInit>:
{
 8005ebc:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_MspInit+0x2c>)
 8005ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8005ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eca:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005ece:	9200      	str	r2, [sp, #0]
 8005ed0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	9b01      	ldr	r3, [sp, #4]
}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	4770      	bx	lr
 8005ee8:	40023800 	.word	0x40023800

08005eec <HAL_ADC_MspInit>:
{
 8005eec:	b530      	push	{r4, r5, lr}
 8005eee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	9305      	str	r3, [sp, #20]
 8005ef8:	9306      	str	r3, [sp, #24]
 8005efa:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8005efc:	6802      	ldr	r2, [r0, #0]
 8005efe:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <HAL_ADC_MspInit+0xcc>)
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_ADC_MspInit+0x1c>
}
 8005f04:	b009      	add	sp, #36	; 0x24
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005f0a:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8005f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
 8005f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f18:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005f1c:	9200      	str	r2, [sp, #0]
 8005f1e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f22:	f042 0220 	orr.w	r2, r2, #32
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
 8005f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2a:	f002 0220 	and.w	r2, r2, #32
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8005f44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005f48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f4a:	2503      	movs	r5, #3
 8005f4c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f4e:	a903      	add	r1, sp, #12
 8005f50:	481a      	ldr	r0, [pc, #104]	; (8005fbc <HAL_ADC_MspInit+0xd0>)
 8005f52:	f7fc fdad 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 8005f56:	2301      	movs	r3, #1
 8005f58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f5a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8005f60:	a903      	add	r1, sp, #12
 8005f62:	4817      	ldr	r0, [pc, #92]	; (8005fc0 <HAL_ADC_MspInit+0xd4>)
 8005f64:	f7fc fda4 	bl	8002ab0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8005f68:	4816      	ldr	r0, [pc, #88]	; (8005fc4 <HAL_ADC_MspInit+0xd8>)
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <HAL_ADC_MspInit+0xdc>)
 8005f6c:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005f6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f72:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f74:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f76:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7c:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f82:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f88:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f8e:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005f90:	6205      	str	r5, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f92:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005f94:	f7fc fb94 	bl	80026c0 <HAL_DMA_Init>
 8005f98:	b958      	cbnz	r0, 8005fb2 <HAL_ADC_MspInit+0xc6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <HAL_ADC_MspInit+0xd8>)
 8005f9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f9e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	2012      	movs	r0, #18
 8005fa6:	f7fc fa5b 	bl	8002460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005faa:	2012      	movs	r0, #18
 8005fac:	f7fc fa8a 	bl	80024c4 <HAL_NVIC_EnableIRQ>
}
 8005fb0:	e7a8      	b.n	8005f04 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8005fb2:	f7ff ff1f 	bl	8005df4 <Error_Handler>
 8005fb6:	e7f0      	b.n	8005f9a <HAL_ADC_MspInit+0xae>
 8005fb8:	40012200 	.word	0x40012200
 8005fbc:	40021400 	.word	0x40021400
 8005fc0:	40020000 	.word	0x40020000
 8005fc4:	200003c4 	.word	0x200003c4
 8005fc8:	40026410 	.word	0x40026410

08005fcc <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8005fcc:	6802      	ldr	r2, [r0, #0]
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_CRC_MspInit+0x28>)
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d000      	beq.n	8005fd6 <HAL_CRC_MspInit+0xa>
 8005fd4:	4770      	bx	lr
{
 8005fd6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9b01      	ldr	r3, [sp, #4]
}
 8005fee:	b002      	add	sp, #8
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40023000 	.word	0x40023000

08005ff8 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8005ff8:	6802      	ldr	r2, [r0, #0]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_DMA2D_MspInit+0x28>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d000      	beq.n	8006002 <HAL_DMA2D_MspInit+0xa>
 8006000:	4770      	bx	lr
{
 8006002:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006004:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8006008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	9b01      	ldr	r3, [sp, #4]
}
 800601a:	b002      	add	sp, #8
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	4002b000 	.word	0x4002b000

08006024 <HAL_LTDC_MspInit>:
{
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006026:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	2300      	movs	r3, #0
 800602a:	9309      	str	r3, [sp, #36]	; 0x24
 800602c:	930a      	str	r3, [sp, #40]	; 0x28
 800602e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006030:	930c      	str	r3, [sp, #48]	; 0x30
 8006032:	930d      	str	r3, [sp, #52]	; 0x34
  if(hltdc->Instance==LTDC)
 8006034:	6802      	ldr	r2, [r0, #0]
 8006036:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <HAL_LTDC_MspInit+0x19c>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_LTDC_MspInit+0x1c>
}
 800603c:	b00f      	add	sp, #60	; 0x3c
 800603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006040:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8006044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006046:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
 800604c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006052:	9200      	str	r2, [sp, #0]
 8006054:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006058:	f042 0202 	orr.w	r2, r2, #2
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
 800605e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006060:	f002 0202 	and.w	r2, r2, #2
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
 8006070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006072:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
 8006082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006084:	f002 0201 	and.w	r2, r2, #1
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800608c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
 8006094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006096:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800609a:	9204      	str	r2, [sp, #16]
 800609c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800609e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
 80060a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80060ac:	9205      	str	r2, [sp, #20]
 80060ae:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
 80060b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ba:	f002 0208 	and.w	r2, r2, #8
 80060be:	9206      	str	r2, [sp, #24]
 80060c0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80060c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
 80060ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80060d0:	9207      	str	r2, [sp, #28]
 80060d2:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80060d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80060e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80060ea:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ec:	2502      	movs	r5, #2
 80060ee:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80060f0:	260e      	movs	r6, #14
 80060f2:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f4:	a909      	add	r1, sp, #36	; 0x24
 80060f6:	4833      	ldr	r0, [pc, #204]	; (80061c4 <HAL_LTDC_MspInit+0x1a0>)
 80060f8:	f7fc fcda 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 80060fc:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8006100:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006102:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006104:	2400      	movs	r4, #0
 8006106:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006108:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800610a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800610c:	4f2e      	ldr	r7, [pc, #184]	; (80061c8 <HAL_LTDC_MspInit+0x1a4>)
 800610e:	a909      	add	r1, sp, #36	; 0x24
 8006110:	4638      	mov	r0, r7
 8006112:	f7fc fccd 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8006116:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800611a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006120:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006122:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006124:	a909      	add	r1, sp, #36	; 0x24
 8006126:	4829      	ldr	r0, [pc, #164]	; (80061cc <HAL_LTDC_MspInit+0x1a8>)
 8006128:	f7fc fcc2 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 800612c:	f244 6330 	movw	r3, #17968	; 0x4630
 8006130:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006132:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006136:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006138:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800613a:	a909      	add	r1, sp, #36	; 0x24
 800613c:	4824      	ldr	r0, [pc, #144]	; (80061d0 <HAL_LTDC_MspInit+0x1ac>)
 800613e:	f7fc fcb7 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 8006142:	2383      	movs	r3, #131	; 0x83
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006146:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006148:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800614a:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800614c:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800614e:	a909      	add	r1, sp, #36	; 0x24
 8006150:	4820      	ldr	r0, [pc, #128]	; (80061d4 <HAL_LTDC_MspInit+0x1b0>)
 8006152:	f7fc fcad 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006160:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006162:	2309      	movs	r3, #9
 8006164:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006166:	a909      	add	r1, sp, #36	; 0x24
 8006168:	4638      	mov	r0, r7
 800616a:	f7fc fca1 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800616e:	2308      	movs	r3, #8
 8006170:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006172:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006174:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006176:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006178:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800617a:	a909      	add	r1, sp, #36	; 0x24
 800617c:	4816      	ldr	r0, [pc, #88]	; (80061d8 <HAL_LTDC_MspInit+0x1b4>)
 800617e:	f7fc fc97 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8006182:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006188:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800618e:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006190:	a909      	add	r1, sp, #36	; 0x24
 8006192:	4812      	ldr	r0, [pc, #72]	; (80061dc <HAL_LTDC_MspInit+0x1b8>)
 8006194:	f7fc fc8c 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006198:	2320      	movs	r3, #32
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061a2:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80061a4:	a909      	add	r1, sp, #36	; 0x24
 80061a6:	480e      	ldr	r0, [pc, #56]	; (80061e0 <HAL_LTDC_MspInit+0x1bc>)
 80061a8:	f7fc fc82 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80061ac:	4622      	mov	r2, r4
 80061ae:	4621      	mov	r1, r4
 80061b0:	2058      	movs	r0, #88	; 0x58
 80061b2:	f7fc f955 	bl	8002460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80061b6:	2058      	movs	r0, #88	; 0x58
 80061b8:	f7fc f984 	bl	80024c4 <HAL_NVIC_EnableIRQ>
}
 80061bc:	e73e      	b.n	800603c <HAL_LTDC_MspInit+0x18>
 80061be:	bf00      	nop
 80061c0:	40016800 	.word	0x40016800
 80061c4:	40020400 	.word	0x40020400
 80061c8:	40021800 	.word	0x40021800
 80061cc:	40020000 	.word	0x40020000
 80061d0:	40022000 	.word	0x40022000
 80061d4:	40022800 	.word	0x40022800
 80061d8:	40020c00 	.word	0x40020c00
 80061dc:	40021c00 	.word	0x40021c00
 80061e0:	40022400 	.word	0x40022400

080061e4 <HAL_SPI_MspInit>:
{
 80061e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e8:	2300      	movs	r3, #0
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	9306      	str	r3, [sp, #24]
 80061f2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80061f4:	6802      	ldr	r2, [r0, #0]
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_SPI_MspInit+0x98>)
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_SPI_MspInit+0x1c>
}
 80061fc:	b009      	add	sp, #36	; 0x24
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006200:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
 800620c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800620e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006212:	9200      	str	r2, [sp, #0]
 8006214:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
 800621e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006220:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622a:	f042 0202 	orr.w	r2, r2, #2
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800623a:	2402      	movs	r4, #2
 800623c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006240:	2703      	movs	r7, #3
 8006242:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006244:	2605      	movs	r6, #5
 8006246:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006248:	a903      	add	r1, sp, #12
 800624a:	480d      	ldr	r0, [pc, #52]	; (8006280 <HAL_SPI_MspInit+0x9c>)
 800624c:	f7fc fc30 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006250:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006256:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	2500      	movs	r5, #0
 800625a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800625c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800625e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006260:	a903      	add	r1, sp, #12
 8006262:	4808      	ldr	r0, [pc, #32]	; (8006284 <HAL_SPI_MspInit+0xa0>)
 8006264:	f7fc fc24 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8006268:	462a      	mov	r2, r5
 800626a:	4621      	mov	r1, r4
 800626c:	2024      	movs	r0, #36	; 0x24
 800626e:	f7fc f8f7 	bl	8002460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006272:	2024      	movs	r0, #36	; 0x24
 8006274:	f7fc f926 	bl	80024c4 <HAL_NVIC_EnableIRQ>
}
 8006278:	e7c0      	b.n	80061fc <HAL_SPI_MspInit+0x18>
 800627a:	bf00      	nop
 800627c:	40003800 	.word	0x40003800
 8006280:	40022000 	.word	0x40022000
 8006284:	40020400 	.word	0x40020400

08006288 <HAL_TIM_Base_MspInit>:
{
 8006288:	b500      	push	{lr}
 800628a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800628c:	6803      	ldr	r3, [r0, #0]
 800628e:	4a13      	ldr	r2, [pc, #76]	; (80062dc <HAL_TIM_Base_MspInit+0x54>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d005      	beq.n	80062a0 <HAL_TIM_Base_MspInit+0x18>
  else if(htim_base->Instance==TIM13)
 8006294:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <HAL_TIM_Base_MspInit+0x58>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00d      	beq.n	80062b6 <HAL_TIM_Base_MspInit+0x2e>
}
 800629a:	b003      	add	sp, #12
 800629c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062a0:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <HAL_TIM_Base_MspInit+0x5c>)
 80062a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	e7f1      	b.n	800629a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_TIM_Base_MspInit+0x5c>)
 80062b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 3, 0);
 80062ca:	2200      	movs	r2, #0
 80062cc:	2103      	movs	r1, #3
 80062ce:	202c      	movs	r0, #44	; 0x2c
 80062d0:	f7fc f8c6 	bl	8002460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80062d4:	202c      	movs	r0, #44	; 0x2c
 80062d6:	f7fc f8f5 	bl	80024c4 <HAL_NVIC_EnableIRQ>
}
 80062da:	e7de      	b.n	800629a <HAL_TIM_Base_MspInit+0x12>
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40001c00 	.word	0x40001c00
 80062e4:	40023800 	.word	0x40023800

080062e8 <HAL_UART_MspInit>:
{
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ec:	2300      	movs	r3, #0
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	9306      	str	r3, [sp, #24]
 80062f6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80062f8:	6802      	ldr	r2, [r0, #0]
 80062fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062fe:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8006302:	429a      	cmp	r2, r3
 8006304:	d001      	beq.n	800630a <HAL_UART_MspInit+0x22>
}
 8006306:	b008      	add	sp, #32
 8006308:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800630a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800630e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006310:	f042 0210 	orr.w	r2, r2, #16
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
 8006316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006318:	f002 0210 	and.w	r2, r2, #16
 800631c:	9200      	str	r2, [sp, #0]
 800631e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006322:	f042 0202 	orr.w	r2, r2, #2
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
 8006328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632a:	f002 0202 	and.w	r2, r2, #2
 800632e:	9201      	str	r2, [sp, #4]
 8006330:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	9302      	str	r3, [sp, #8]
 8006342:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006348:	2602      	movs	r6, #2
 800634a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800634c:	2503      	movs	r5, #3
 800634e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006350:	2407      	movs	r4, #7
 8006352:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006354:	a903      	add	r1, sp, #12
 8006356:	4808      	ldr	r0, [pc, #32]	; (8006378 <HAL_UART_MspInit+0x90>)
 8006358:	f7fc fbaa 	bl	8002ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800635c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006360:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006362:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006364:	2300      	movs	r3, #0
 8006366:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006368:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800636a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800636c:	a903      	add	r1, sp, #12
 800636e:	4803      	ldr	r0, [pc, #12]	; (800637c <HAL_UART_MspInit+0x94>)
 8006370:	f7fc fb9e 	bl	8002ab0 <HAL_GPIO_Init>
}
 8006374:	e7c7      	b.n	8006306 <HAL_UART_MspInit+0x1e>
 8006376:	bf00      	nop
 8006378:	40020400 	.word	0x40020400
 800637c:	40020000 	.word	0x40020000

08006380 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006382:	f7ff fd39 	bl	8005df8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006386:	bd08      	pop	{r3, pc}

08006388 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006388:	4770      	bx	lr

0800638a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800638a:	e7fe      	b.n	800638a <HardFault_Handler>

0800638c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800638c:	e7fe      	b.n	800638c <MemManage_Handler>

0800638e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800638e:	e7fe      	b.n	800638e <BusFault_Handler>

08006390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006390:	e7fe      	b.n	8006390 <UsageFault_Handler>

08006392 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006392:	4770      	bx	lr

08006394 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006394:	4770      	bx	lr

08006396 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006396:	4770      	bx	lr

08006398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800639a:	f7fb fd53 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800639e:	bd08      	pop	{r3, pc}

080063a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80063a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80063a2:	2010      	movs	r0, #16
 80063a4:	f7fc fc82 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80063a8:	bd08      	pop	{r3, pc}
	...

080063ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80063ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80063ae:	4802      	ldr	r0, [pc, #8]	; (80063b8 <ADC_IRQHandler+0xc>)
 80063b0:	f7fb fec7 	bl	8002142 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80063b4:	bd08      	pop	{r3, pc}
 80063b6:	bf00      	nop
 80063b8:	200004e8 	.word	0x200004e8

080063bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80063bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80063be:	2040      	movs	r0, #64	; 0x40
 80063c0:	f7fc fc74 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80063c4:	2080      	movs	r0, #128	; 0x80
 80063c6:	f7fc fc71 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80063ca:	bd08      	pop	{r3, pc}

080063cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80063cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80063ce:	4802      	ldr	r0, [pc, #8]	; (80063d8 <SPI2_IRQHandler+0xc>)
 80063d0:	f7fe f8c0 	bl	8004554 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80063d4:	bd08      	pop	{r3, pc}
 80063d6:	bf00      	nop
 80063d8:	200002c4 	.word	0x200002c4

080063dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80063dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80063de:	4802      	ldr	r0, [pc, #8]	; (80063e8 <TIM8_UP_TIM13_IRQHandler+0xc>)
 80063e0:	f7fe f99a 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80063e4:	bd08      	pop	{r3, pc}
 80063e6:	bf00      	nop
 80063e8:	20000530 	.word	0x20000530

080063ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80063ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80063ee:	4802      	ldr	r0, [pc, #8]	; (80063f8 <DMA2_Stream0_IRQHandler+0xc>)
 80063f0:	f7fc f9e0 	bl	80027b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80063f4:	bd08      	pop	{r3, pc}
 80063f6:	bf00      	nop
 80063f8:	200003c4 	.word	0x200003c4

080063fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80063fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80063fe:	4802      	ldr	r0, [pc, #8]	; (8006408 <LTDC_IRQHandler+0xc>)
 8006400:	f7fc fda9 	bl	8002f56 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006404:	bd08      	pop	{r3, pc}
 8006406:	bf00      	nop
 8006408:	20000440 	.word	0x20000440

0800640c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800640c:	b508      	push	{r3, lr}
 800640e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006410:	4a0b      	ldr	r2, [pc, #44]	; (8006440 <_sbrk+0x34>)
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	b142      	cbz	r2, 8006428 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <_sbrk+0x34>)
 8006418:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800641a:	4403      	add	r3, r0
 800641c:	466a      	mov	r2, sp
 800641e:	4293      	cmp	r3, r2
 8006420:	d806      	bhi.n	8006430 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006422:	4a07      	ldr	r2, [pc, #28]	; (8006440 <_sbrk+0x34>)
 8006424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006426:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006428:	4a05      	ldr	r2, [pc, #20]	; (8006440 <_sbrk+0x34>)
 800642a:	4906      	ldr	r1, [pc, #24]	; (8006444 <_sbrk+0x38>)
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	e7f2      	b.n	8006416 <_sbrk+0xa>
		errno = ENOMEM;
 8006430:	f000 f85c 	bl	80064ec <__errno>
 8006434:	230c      	movs	r3, #12
 8006436:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800643c:	e7f3      	b.n	8006426 <_sbrk+0x1a>
 800643e:	bf00      	nop
 8006440:	200002b8 	.word	0x200002b8
 8006444:	200006d8 	.word	0x200006d8

08006448 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006448:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800644a:	4a0f      	ldr	r2, [pc, #60]	; (8006488 <SystemInit+0x40>)
 800644c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <SystemInit+0x44>)
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	f041 0101 	orr.w	r1, r1, #1
 8006460:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006462:	2000      	movs	r0, #0
 8006464:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006466:	681c      	ldr	r4, [r3, #0]
 8006468:	4909      	ldr	r1, [pc, #36]	; (8006490 <SystemInit+0x48>)
 800646a:	4021      	ands	r1, r4
 800646c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800646e:	4909      	ldr	r1, [pc, #36]	; (8006494 <SystemInit+0x4c>)
 8006470:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006478:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800647a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800647c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006480:	6093      	str	r3, [r2, #8]
#endif
}
 8006482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00
 800648c:	40023800 	.word	0x40023800
 8006490:	fef6ffff 	.word	0xfef6ffff
 8006494:	24003010 	.word	0x24003010

08006498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800649c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800649e:	e003      	b.n	80064a8 <LoopCopyDataInit>

080064a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064a6:	3104      	adds	r1, #4

080064a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064a8:	480b      	ldr	r0, [pc, #44]	; (80064d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80064ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064b0:	d3f6      	bcc.n	80064a0 <CopyDataInit>
  ldr  r2, =_sbss
 80064b2:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80064b4:	e002      	b.n	80064bc <LoopFillZerobss>

080064b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80064b8:	f842 3b04 	str.w	r3, [r2], #4

080064bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80064be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80064c0:	d3f9      	bcc.n	80064b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80064c2:	f7ff ffc1 	bl	8006448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064c6:	f000 f817 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064ca:	f7ff f9a9 	bl	8005820 <main>
  bx  lr    
 80064ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80064d0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80064d4:	0800a800 	.word	0x0800a800
  ldr  r0, =_sdata
 80064d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80064dc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80064e0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80064e4:	200006d4 	.word	0x200006d4

080064e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064e8:	e7fe      	b.n	80064e8 <CAN1_RX0_IRQHandler>
	...

080064ec <__errno>:
 80064ec:	4b01      	ldr	r3, [pc, #4]	; (80064f4 <__errno+0x8>)
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000018 	.word	0x20000018

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4e0d      	ldr	r6, [pc, #52]	; (8006530 <__libc_init_array+0x38>)
 80064fc:	4c0d      	ldr	r4, [pc, #52]	; (8006534 <__libc_init_array+0x3c>)
 80064fe:	1ba4      	subs	r4, r4, r6
 8006500:	10a4      	asrs	r4, r4, #2
 8006502:	2500      	movs	r5, #0
 8006504:	42a5      	cmp	r5, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	4e0b      	ldr	r6, [pc, #44]	; (8006538 <__libc_init_array+0x40>)
 800650a:	4c0c      	ldr	r4, [pc, #48]	; (800653c <__libc_init_array+0x44>)
 800650c:	f003 fda2 	bl	800a054 <_init>
 8006510:	1ba4      	subs	r4, r4, r6
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	2500      	movs	r5, #0
 8006516:	42a5      	cmp	r5, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006520:	4798      	blx	r3
 8006522:	3501      	adds	r5, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800652a:	4798      	blx	r3
 800652c:	3501      	adds	r5, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	0800a7f8 	.word	0x0800a7f8
 8006534:	0800a7f8 	.word	0x0800a7f8
 8006538:	0800a7f8 	.word	0x0800a7f8
 800653c:	0800a7fc 	.word	0x0800a7fc

08006540 <memcpy>:
 8006540:	b510      	push	{r4, lr}
 8006542:	1e43      	subs	r3, r0, #1
 8006544:	440a      	add	r2, r1
 8006546:	4291      	cmp	r1, r2
 8006548:	d100      	bne.n	800654c <memcpy+0xc>
 800654a:	bd10      	pop	{r4, pc}
 800654c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006554:	e7f7      	b.n	8006546 <memcpy+0x6>

08006556 <memset>:
 8006556:	4402      	add	r2, r0
 8006558:	4603      	mov	r3, r0
 800655a:	4293      	cmp	r3, r2
 800655c:	d100      	bne.n	8006560 <memset+0xa>
 800655e:	4770      	bx	lr
 8006560:	f803 1b01 	strb.w	r1, [r3], #1
 8006564:	e7f9      	b.n	800655a <memset+0x4>

08006566 <__cvt>:
 8006566:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800656a:	ec55 4b10 	vmov	r4, r5, d0
 800656e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006570:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006574:	2d00      	cmp	r5, #0
 8006576:	460e      	mov	r6, r1
 8006578:	4691      	mov	r9, r2
 800657a:	4619      	mov	r1, r3
 800657c:	bfb8      	it	lt
 800657e:	4622      	movlt	r2, r4
 8006580:	462b      	mov	r3, r5
 8006582:	f027 0720 	bic.w	r7, r7, #32
 8006586:	bfbb      	ittet	lt
 8006588:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800658c:	461d      	movlt	r5, r3
 800658e:	2300      	movge	r3, #0
 8006590:	232d      	movlt	r3, #45	; 0x2d
 8006592:	bfb8      	it	lt
 8006594:	4614      	movlt	r4, r2
 8006596:	2f46      	cmp	r7, #70	; 0x46
 8006598:	700b      	strb	r3, [r1, #0]
 800659a:	d004      	beq.n	80065a6 <__cvt+0x40>
 800659c:	2f45      	cmp	r7, #69	; 0x45
 800659e:	d100      	bne.n	80065a2 <__cvt+0x3c>
 80065a0:	3601      	adds	r6, #1
 80065a2:	2102      	movs	r1, #2
 80065a4:	e000      	b.n	80065a8 <__cvt+0x42>
 80065a6:	2103      	movs	r1, #3
 80065a8:	ab03      	add	r3, sp, #12
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	ab02      	add	r3, sp, #8
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4632      	mov	r2, r6
 80065b2:	4653      	mov	r3, sl
 80065b4:	ec45 4b10 	vmov	d0, r4, r5
 80065b8:	f001 fd76 	bl	80080a8 <_dtoa_r>
 80065bc:	2f47      	cmp	r7, #71	; 0x47
 80065be:	4680      	mov	r8, r0
 80065c0:	d102      	bne.n	80065c8 <__cvt+0x62>
 80065c2:	f019 0f01 	tst.w	r9, #1
 80065c6:	d026      	beq.n	8006616 <__cvt+0xb0>
 80065c8:	2f46      	cmp	r7, #70	; 0x46
 80065ca:	eb08 0906 	add.w	r9, r8, r6
 80065ce:	d111      	bne.n	80065f4 <__cvt+0x8e>
 80065d0:	f898 3000 	ldrb.w	r3, [r8]
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d10a      	bne.n	80065ee <__cvt+0x88>
 80065d8:	2200      	movs	r2, #0
 80065da:	2300      	movs	r3, #0
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7fa fa92 	bl	8000b08 <__aeabi_dcmpeq>
 80065e4:	b918      	cbnz	r0, 80065ee <__cvt+0x88>
 80065e6:	f1c6 0601 	rsb	r6, r6, #1
 80065ea:	f8ca 6000 	str.w	r6, [sl]
 80065ee:	f8da 3000 	ldr.w	r3, [sl]
 80065f2:	4499      	add	r9, r3
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7fa fa84 	bl	8000b08 <__aeabi_dcmpeq>
 8006600:	b938      	cbnz	r0, 8006612 <__cvt+0xac>
 8006602:	2230      	movs	r2, #48	; 0x30
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	454b      	cmp	r3, r9
 8006608:	d205      	bcs.n	8006616 <__cvt+0xb0>
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	9103      	str	r1, [sp, #12]
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e7f8      	b.n	8006604 <__cvt+0x9e>
 8006612:	f8cd 900c 	str.w	r9, [sp, #12]
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661a:	eba3 0308 	sub.w	r3, r3, r8
 800661e:	4640      	mov	r0, r8
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	b004      	add	sp, #16
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006628 <__exponent>:
 8006628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662a:	2900      	cmp	r1, #0
 800662c:	4604      	mov	r4, r0
 800662e:	bfba      	itte	lt
 8006630:	4249      	neglt	r1, r1
 8006632:	232d      	movlt	r3, #45	; 0x2d
 8006634:	232b      	movge	r3, #43	; 0x2b
 8006636:	2909      	cmp	r1, #9
 8006638:	f804 2b02 	strb.w	r2, [r4], #2
 800663c:	7043      	strb	r3, [r0, #1]
 800663e:	dd20      	ble.n	8006682 <__exponent+0x5a>
 8006640:	f10d 0307 	add.w	r3, sp, #7
 8006644:	461f      	mov	r7, r3
 8006646:	260a      	movs	r6, #10
 8006648:	fb91 f5f6 	sdiv	r5, r1, r6
 800664c:	fb06 1115 	mls	r1, r6, r5, r1
 8006650:	3130      	adds	r1, #48	; 0x30
 8006652:	2d09      	cmp	r5, #9
 8006654:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006658:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800665c:	4629      	mov	r1, r5
 800665e:	dc09      	bgt.n	8006674 <__exponent+0x4c>
 8006660:	3130      	adds	r1, #48	; 0x30
 8006662:	3b02      	subs	r3, #2
 8006664:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006668:	42bb      	cmp	r3, r7
 800666a:	4622      	mov	r2, r4
 800666c:	d304      	bcc.n	8006678 <__exponent+0x50>
 800666e:	1a10      	subs	r0, r2, r0
 8006670:	b003      	add	sp, #12
 8006672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006674:	4613      	mov	r3, r2
 8006676:	e7e7      	b.n	8006648 <__exponent+0x20>
 8006678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800667c:	f804 2b01 	strb.w	r2, [r4], #1
 8006680:	e7f2      	b.n	8006668 <__exponent+0x40>
 8006682:	2330      	movs	r3, #48	; 0x30
 8006684:	4419      	add	r1, r3
 8006686:	7083      	strb	r3, [r0, #2]
 8006688:	1d02      	adds	r2, r0, #4
 800668a:	70c1      	strb	r1, [r0, #3]
 800668c:	e7ef      	b.n	800666e <__exponent+0x46>
	...

08006690 <_printf_float>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b08d      	sub	sp, #52	; 0x34
 8006696:	460c      	mov	r4, r1
 8006698:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800669c:	4616      	mov	r6, r2
 800669e:	461f      	mov	r7, r3
 80066a0:	4605      	mov	r5, r0
 80066a2:	f002 fde5 	bl	8009270 <_localeconv_r>
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 fdb0 	bl	8000210 <strlen>
 80066b0:	2300      	movs	r3, #0
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	9005      	str	r0, [sp, #20]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066c8:	f8d4 b000 	ldr.w	fp, [r4]
 80066cc:	f8c8 2000 	str.w	r2, [r8]
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ea:	4ba7      	ldr	r3, [pc, #668]	; (8006988 <_printf_float+0x2f8>)
 80066ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f0:	f7fa fa3c 	bl	8000b6c <__aeabi_dcmpun>
 80066f4:	bb70      	cbnz	r0, 8006754 <_printf_float+0xc4>
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066fa:	4ba3      	ldr	r3, [pc, #652]	; (8006988 <_printf_float+0x2f8>)
 80066fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006700:	f7fa fa16 	bl	8000b30 <__aeabi_dcmple>
 8006704:	bb30      	cbnz	r0, 8006754 <_printf_float+0xc4>
 8006706:	2200      	movs	r2, #0
 8006708:	2300      	movs	r3, #0
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7fa fa05 	bl	8000b1c <__aeabi_dcmplt>
 8006712:	b110      	cbz	r0, 800671a <_printf_float+0x8a>
 8006714:	232d      	movs	r3, #45	; 0x2d
 8006716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671a:	4a9c      	ldr	r2, [pc, #624]	; (800698c <_printf_float+0x2fc>)
 800671c:	4b9c      	ldr	r3, [pc, #624]	; (8006990 <_printf_float+0x300>)
 800671e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006722:	bf8c      	ite	hi
 8006724:	4690      	movhi	r8, r2
 8006726:	4698      	movls	r8, r3
 8006728:	2303      	movs	r3, #3
 800672a:	f02b 0204 	bic.w	r2, fp, #4
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	9700      	str	r7, [sp, #0]
 8006738:	4633      	mov	r3, r6
 800673a:	aa0b      	add	r2, sp, #44	; 0x2c
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f9e6 	bl	8006b10 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	f040 808d 	bne.w	8006864 <_printf_float+0x1d4>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800674e:	b00d      	add	sp, #52	; 0x34
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa fa06 	bl	8000b6c <__aeabi_dcmpun>
 8006760:	b110      	cbz	r0, 8006768 <_printf_float+0xd8>
 8006762:	4a8c      	ldr	r2, [pc, #560]	; (8006994 <_printf_float+0x304>)
 8006764:	4b8c      	ldr	r3, [pc, #560]	; (8006998 <_printf_float+0x308>)
 8006766:	e7da      	b.n	800671e <_printf_float+0x8e>
 8006768:	6861      	ldr	r1, [r4, #4]
 800676a:	1c4b      	adds	r3, r1, #1
 800676c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006770:	a80a      	add	r0, sp, #40	; 0x28
 8006772:	d13e      	bne.n	80067f2 <_printf_float+0x162>
 8006774:	2306      	movs	r3, #6
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	2300      	movs	r3, #0
 800677a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800677e:	ab09      	add	r3, sp, #36	; 0x24
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	ec49 8b10 	vmov	d0, r8, r9
 8006786:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	f8cd a004 	str.w	sl, [sp, #4]
 8006790:	6861      	ldr	r1, [r4, #4]
 8006792:	4628      	mov	r0, r5
 8006794:	f7ff fee7 	bl	8006566 <__cvt>
 8006798:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800679c:	2b47      	cmp	r3, #71	; 0x47
 800679e:	4680      	mov	r8, r0
 80067a0:	d109      	bne.n	80067b6 <_printf_float+0x126>
 80067a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a4:	1cd8      	adds	r0, r3, #3
 80067a6:	db02      	blt.n	80067ae <_printf_float+0x11e>
 80067a8:	6862      	ldr	r2, [r4, #4]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	dd47      	ble.n	800683e <_printf_float+0x1ae>
 80067ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80067b2:	fa5f fa8a 	uxtb.w	sl, sl
 80067b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067bc:	d824      	bhi.n	8006808 <_printf_float+0x178>
 80067be:	3901      	subs	r1, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067c6:	9109      	str	r1, [sp, #36]	; 0x24
 80067c8:	f7ff ff2e 	bl	8006628 <__exponent>
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	1813      	adds	r3, r2, r0
 80067d0:	2a01      	cmp	r2, #1
 80067d2:	4681      	mov	r9, r0
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	dc02      	bgt.n	80067de <_printf_float+0x14e>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	07d1      	lsls	r1, r2, #31
 80067dc:	d501      	bpl.n	80067e2 <_printf_float+0x152>
 80067de:	3301      	adds	r3, #1
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0a5      	beq.n	8006736 <_printf_float+0xa6>
 80067ea:	232d      	movs	r3, #45	; 0x2d
 80067ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f0:	e7a1      	b.n	8006736 <_printf_float+0xa6>
 80067f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067f6:	f000 8177 	beq.w	8006ae8 <_printf_float+0x458>
 80067fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067fe:	d1bb      	bne.n	8006778 <_printf_float+0xe8>
 8006800:	2900      	cmp	r1, #0
 8006802:	d1b9      	bne.n	8006778 <_printf_float+0xe8>
 8006804:	2301      	movs	r3, #1
 8006806:	e7b6      	b.n	8006776 <_printf_float+0xe6>
 8006808:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800680c:	d119      	bne.n	8006842 <_printf_float+0x1b2>
 800680e:	2900      	cmp	r1, #0
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	dd0c      	ble.n	800682e <_printf_float+0x19e>
 8006814:	6121      	str	r1, [r4, #16]
 8006816:	b913      	cbnz	r3, 800681e <_printf_float+0x18e>
 8006818:	6822      	ldr	r2, [r4, #0]
 800681a:	07d2      	lsls	r2, r2, #31
 800681c:	d502      	bpl.n	8006824 <_printf_float+0x194>
 800681e:	3301      	adds	r3, #1
 8006820:	440b      	add	r3, r1
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	65a3      	str	r3, [r4, #88]	; 0x58
 8006828:	f04f 0900 	mov.w	r9, #0
 800682c:	e7d9      	b.n	80067e2 <_printf_float+0x152>
 800682e:	b913      	cbnz	r3, 8006836 <_printf_float+0x1a6>
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	07d0      	lsls	r0, r2, #31
 8006834:	d501      	bpl.n	800683a <_printf_float+0x1aa>
 8006836:	3302      	adds	r3, #2
 8006838:	e7f3      	b.n	8006822 <_printf_float+0x192>
 800683a:	2301      	movs	r3, #1
 800683c:	e7f1      	b.n	8006822 <_printf_float+0x192>
 800683e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006842:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006846:	4293      	cmp	r3, r2
 8006848:	db05      	blt.n	8006856 <_printf_float+0x1c6>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	07d1      	lsls	r1, r2, #31
 8006850:	d5e8      	bpl.n	8006824 <_printf_float+0x194>
 8006852:	3301      	adds	r3, #1
 8006854:	e7e5      	b.n	8006822 <_printf_float+0x192>
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfd4      	ite	le
 800685a:	f1c3 0302 	rsble	r3, r3, #2
 800685e:	2301      	movgt	r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	e7de      	b.n	8006822 <_printf_float+0x192>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	055a      	lsls	r2, r3, #21
 8006868:	d407      	bmi.n	800687a <_printf_float+0x1ea>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	4642      	mov	r2, r8
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	d12b      	bne.n	80068d0 <_printf_float+0x240>
 8006878:	e767      	b.n	800674a <_printf_float+0xba>
 800687a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800687e:	f240 80dc 	bls.w	8006a3a <_printf_float+0x3aa>
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800688a:	f7fa f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800688e:	2800      	cmp	r0, #0
 8006890:	d033      	beq.n	80068fa <_printf_float+0x26a>
 8006892:	2301      	movs	r3, #1
 8006894:	4a41      	ldr	r2, [pc, #260]	; (800699c <_printf_float+0x30c>)
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f af54 	beq.w	800674a <_printf_float+0xba>
 80068a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a6:	429a      	cmp	r2, r3
 80068a8:	db02      	blt.n	80068b0 <_printf_float+0x220>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	07d8      	lsls	r0, r3, #31
 80068ae:	d50f      	bpl.n	80068d0 <_printf_float+0x240>
 80068b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af45 	beq.w	800674a <_printf_float+0xba>
 80068c0:	f04f 0800 	mov.w	r8, #0
 80068c4:	f104 091a 	add.w	r9, r4, #26
 80068c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4543      	cmp	r3, r8
 80068ce:	dc09      	bgt.n	80068e4 <_printf_float+0x254>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	079b      	lsls	r3, r3, #30
 80068d4:	f100 8103 	bmi.w	8006ade <_printf_float+0x44e>
 80068d8:	68e0      	ldr	r0, [r4, #12]
 80068da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068dc:	4298      	cmp	r0, r3
 80068de:	bfb8      	it	lt
 80068e0:	4618      	movlt	r0, r3
 80068e2:	e734      	b.n	800674e <_printf_float+0xbe>
 80068e4:	2301      	movs	r3, #1
 80068e6:	464a      	mov	r2, r9
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af2b 	beq.w	800674a <_printf_float+0xba>
 80068f4:	f108 0801 	add.w	r8, r8, #1
 80068f8:	e7e6      	b.n	80068c8 <_printf_float+0x238>
 80068fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dc2b      	bgt.n	8006958 <_printf_float+0x2c8>
 8006900:	2301      	movs	r3, #1
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <_printf_float+0x30c>)
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af1d 	beq.w	800674a <_printf_float+0xba>
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	b923      	cbnz	r3, 800691e <_printf_float+0x28e>
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	b913      	cbnz	r3, 800691e <_printf_float+0x28e>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07d9      	lsls	r1, r3, #31
 800691c:	d5d8      	bpl.n	80068d0 <_printf_float+0x240>
 800691e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f af0e 	beq.w	800674a <_printf_float+0xba>
 800692e:	f04f 0900 	mov.w	r9, #0
 8006932:	f104 0a1a 	add.w	sl, r4, #26
 8006936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006938:	425b      	negs	r3, r3
 800693a:	454b      	cmp	r3, r9
 800693c:	dc01      	bgt.n	8006942 <_printf_float+0x2b2>
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	e794      	b.n	800686c <_printf_float+0x1dc>
 8006942:	2301      	movs	r3, #1
 8006944:	4652      	mov	r2, sl
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f aefc 	beq.w	800674a <_printf_float+0xba>
 8006952:	f109 0901 	add.w	r9, r9, #1
 8006956:	e7ee      	b.n	8006936 <_printf_float+0x2a6>
 8006958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695c:	429a      	cmp	r2, r3
 800695e:	bfa8      	it	ge
 8006960:	461a      	movge	r2, r3
 8006962:	2a00      	cmp	r2, #0
 8006964:	4691      	mov	r9, r2
 8006966:	dd07      	ble.n	8006978 <_printf_float+0x2e8>
 8006968:	4613      	mov	r3, r2
 800696a:	4631      	mov	r1, r6
 800696c:	4642      	mov	r2, r8
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f aee9 	beq.w	800674a <_printf_float+0xba>
 8006978:	f104 031a 	add.w	r3, r4, #26
 800697c:	f04f 0b00 	mov.w	fp, #0
 8006980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	e015      	b.n	80069b4 <_printf_float+0x324>
 8006988:	7fefffff 	.word	0x7fefffff
 800698c:	0800a53c 	.word	0x0800a53c
 8006990:	0800a538 	.word	0x0800a538
 8006994:	0800a544 	.word	0x0800a544
 8006998:	0800a540 	.word	0x0800a540
 800699c:	0800a548 	.word	0x0800a548
 80069a0:	2301      	movs	r3, #1
 80069a2:	9a06      	ldr	r2, [sp, #24]
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f aecd 	beq.w	800674a <_printf_float+0xba>
 80069b0:	f10b 0b01 	add.w	fp, fp, #1
 80069b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069b8:	ebaa 0309 	sub.w	r3, sl, r9
 80069bc:	455b      	cmp	r3, fp
 80069be:	dcef      	bgt.n	80069a0 <_printf_float+0x310>
 80069c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c4:	429a      	cmp	r2, r3
 80069c6:	44d0      	add	r8, sl
 80069c8:	db15      	blt.n	80069f6 <_printf_float+0x366>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	07da      	lsls	r2, r3, #31
 80069ce:	d412      	bmi.n	80069f6 <_printf_float+0x366>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d4:	eba3 020a 	sub.w	r2, r3, sl
 80069d8:	eba3 0a01 	sub.w	sl, r3, r1
 80069dc:	4592      	cmp	sl, r2
 80069de:	bfa8      	it	ge
 80069e0:	4692      	movge	sl, r2
 80069e2:	f1ba 0f00 	cmp.w	sl, #0
 80069e6:	dc0e      	bgt.n	8006a06 <_printf_float+0x376>
 80069e8:	f04f 0800 	mov.w	r8, #0
 80069ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069f0:	f104 091a 	add.w	r9, r4, #26
 80069f4:	e019      	b.n	8006a2a <_printf_float+0x39a>
 80069f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	d1e5      	bne.n	80069d0 <_printf_float+0x340>
 8006a04:	e6a1      	b.n	800674a <_printf_float+0xba>
 8006a06:	4653      	mov	r3, sl
 8006a08:	4642      	mov	r2, r8
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1e9      	bne.n	80069e8 <_printf_float+0x358>
 8006a14:	e699      	b.n	800674a <_printf_float+0xba>
 8006a16:	2301      	movs	r3, #1
 8006a18:	464a      	mov	r2, r9
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	f43f ae92 	beq.w	800674a <_printf_float+0xba>
 8006a26:	f108 0801 	add.w	r8, r8, #1
 8006a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	eba3 030a 	sub.w	r3, r3, sl
 8006a34:	4543      	cmp	r3, r8
 8006a36:	dcee      	bgt.n	8006a16 <_printf_float+0x386>
 8006a38:	e74a      	b.n	80068d0 <_printf_float+0x240>
 8006a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a3c:	2a01      	cmp	r2, #1
 8006a3e:	dc01      	bgt.n	8006a44 <_printf_float+0x3b4>
 8006a40:	07db      	lsls	r3, r3, #31
 8006a42:	d53a      	bpl.n	8006aba <_printf_float+0x42a>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4642      	mov	r2, r8
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f ae7b 	beq.w	800674a <_printf_float+0xba>
 8006a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f108 0801 	add.w	r8, r8, #1
 8006a64:	f43f ae71 	beq.w	800674a <_printf_float+0xba>
 8006a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a74:	2300      	movs	r3, #0
 8006a76:	f7fa f847 	bl	8000b08 <__aeabi_dcmpeq>
 8006a7a:	b9c8      	cbnz	r0, 8006ab0 <_printf_float+0x420>
 8006a7c:	4653      	mov	r3, sl
 8006a7e:	4642      	mov	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	d10e      	bne.n	8006aa8 <_printf_float+0x418>
 8006a8a:	e65e      	b.n	800674a <_printf_float+0xba>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae57 	beq.w	800674a <_printf_float+0xba>
 8006a9c:	f108 0801 	add.w	r8, r8, #1
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	dcf1      	bgt.n	8006a8c <_printf_float+0x3fc>
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aae:	e6de      	b.n	800686e <_printf_float+0x1de>
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	f104 0a1a 	add.w	sl, r4, #26
 8006ab8:	e7f2      	b.n	8006aa0 <_printf_float+0x410>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7df      	b.n	8006a7e <_printf_float+0x3ee>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae3e 	beq.w	800674a <_printf_float+0xba>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	4543      	cmp	r3, r8
 8006ada:	dcf0      	bgt.n	8006abe <_printf_float+0x42e>
 8006adc:	e6fc      	b.n	80068d8 <_printf_float+0x248>
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	f104 0919 	add.w	r9, r4, #25
 8006ae6:	e7f4      	b.n	8006ad2 <_printf_float+0x442>
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	f43f ae8b 	beq.w	8006804 <_printf_float+0x174>
 8006aee:	2300      	movs	r3, #0
 8006af0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006af4:	ab09      	add	r3, sp, #36	; 0x24
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	ec49 8b10 	vmov	d0, r8, r9
 8006afc:	6022      	str	r2, [r4, #0]
 8006afe:	f8cd a004 	str.w	sl, [sp, #4]
 8006b02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7ff fd2d 	bl	8006566 <__cvt>
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	e648      	b.n	80067a2 <_printf_float+0x112>

08006b10 <_printf_common>:
 8006b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	4691      	mov	r9, r2
 8006b16:	461f      	mov	r7, r3
 8006b18:	688a      	ldr	r2, [r1, #8]
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	bfb8      	it	lt
 8006b24:	4613      	movlt	r3, r2
 8006b26:	f8c9 3000 	str.w	r3, [r9]
 8006b2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	b112      	cbz	r2, 8006b3a <_printf_common+0x2a>
 8006b34:	3301      	adds	r3, #1
 8006b36:	f8c9 3000 	str.w	r3, [r9]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b44:	3302      	addmi	r3, #2
 8006b46:	f8c9 3000 	strmi.w	r3, [r9]
 8006b4a:	6825      	ldr	r5, [r4, #0]
 8006b4c:	f015 0506 	ands.w	r5, r5, #6
 8006b50:	d107      	bne.n	8006b62 <_printf_common+0x52>
 8006b52:	f104 0a19 	add.w	sl, r4, #25
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	f8d9 2000 	ldr.w	r2, [r9]
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	dc28      	bgt.n	8006bb4 <_printf_common+0xa4>
 8006b62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	3300      	adds	r3, #0
 8006b6a:	bf18      	it	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	0692      	lsls	r2, r2, #26
 8006b70:	d42d      	bmi.n	8006bce <_printf_common+0xbe>
 8006b72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b76:	4639      	mov	r1, r7
 8006b78:	4630      	mov	r0, r6
 8006b7a:	47c0      	blx	r8
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d020      	beq.n	8006bc2 <_printf_common+0xb2>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	68e5      	ldr	r5, [r4, #12]
 8006b84:	f8d9 2000 	ldr.w	r2, [r9]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	f04f 0900 	mov.w	r9, #0
 8006baa:	341a      	adds	r4, #26
 8006bac:	454d      	cmp	r5, r9
 8006bae:	d11a      	bne.n	8006be6 <_printf_common+0xd6>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e008      	b.n	8006bc6 <_printf_common+0xb6>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	4639      	mov	r1, r7
 8006bba:	4630      	mov	r0, r6
 8006bbc:	47c0      	blx	r8
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d103      	bne.n	8006bca <_printf_common+0xba>
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bca:	3501      	adds	r5, #1
 8006bcc:	e7c3      	b.n	8006b56 <_printf_common+0x46>
 8006bce:	18e1      	adds	r1, r4, r3
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	2030      	movs	r0, #48	; 0x30
 8006bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd8:	4422      	add	r2, r4
 8006bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be2:	3302      	adds	r3, #2
 8006be4:	e7c5      	b.n	8006b72 <_printf_common+0x62>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4622      	mov	r2, r4
 8006bea:	4639      	mov	r1, r7
 8006bec:	4630      	mov	r0, r6
 8006bee:	47c0      	blx	r8
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0e6      	beq.n	8006bc2 <_printf_common+0xb2>
 8006bf4:	f109 0901 	add.w	r9, r9, #1
 8006bf8:	e7d8      	b.n	8006bac <_printf_common+0x9c>
	...

08006bfc <_printf_i>:
 8006bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c04:	460c      	mov	r4, r1
 8006c06:	7e09      	ldrb	r1, [r1, #24]
 8006c08:	b085      	sub	sp, #20
 8006c0a:	296e      	cmp	r1, #110	; 0x6e
 8006c0c:	4617      	mov	r7, r2
 8006c0e:	4606      	mov	r6, r0
 8006c10:	4698      	mov	r8, r3
 8006c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c14:	f000 80b3 	beq.w	8006d7e <_printf_i+0x182>
 8006c18:	d822      	bhi.n	8006c60 <_printf_i+0x64>
 8006c1a:	2963      	cmp	r1, #99	; 0x63
 8006c1c:	d036      	beq.n	8006c8c <_printf_i+0x90>
 8006c1e:	d80a      	bhi.n	8006c36 <_printf_i+0x3a>
 8006c20:	2900      	cmp	r1, #0
 8006c22:	f000 80b9 	beq.w	8006d98 <_printf_i+0x19c>
 8006c26:	2958      	cmp	r1, #88	; 0x58
 8006c28:	f000 8083 	beq.w	8006d32 <_printf_i+0x136>
 8006c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c34:	e032      	b.n	8006c9c <_printf_i+0xa0>
 8006c36:	2964      	cmp	r1, #100	; 0x64
 8006c38:	d001      	beq.n	8006c3e <_printf_i+0x42>
 8006c3a:	2969      	cmp	r1, #105	; 0x69
 8006c3c:	d1f6      	bne.n	8006c2c <_printf_i+0x30>
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	6813      	ldr	r3, [r2, #0]
 8006c42:	0605      	lsls	r5, r0, #24
 8006c44:	f103 0104 	add.w	r1, r3, #4
 8006c48:	d52a      	bpl.n	8006ca0 <_printf_i+0xa4>
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6011      	str	r1, [r2, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da03      	bge.n	8006c5a <_printf_i+0x5e>
 8006c52:	222d      	movs	r2, #45	; 0x2d
 8006c54:	425b      	negs	r3, r3
 8006c56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c5a:	486f      	ldr	r0, [pc, #444]	; (8006e18 <_printf_i+0x21c>)
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	e039      	b.n	8006cd4 <_printf_i+0xd8>
 8006c60:	2973      	cmp	r1, #115	; 0x73
 8006c62:	f000 809d 	beq.w	8006da0 <_printf_i+0x1a4>
 8006c66:	d808      	bhi.n	8006c7a <_printf_i+0x7e>
 8006c68:	296f      	cmp	r1, #111	; 0x6f
 8006c6a:	d020      	beq.n	8006cae <_printf_i+0xb2>
 8006c6c:	2970      	cmp	r1, #112	; 0x70
 8006c6e:	d1dd      	bne.n	8006c2c <_printf_i+0x30>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	f043 0320 	orr.w	r3, r3, #32
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	e003      	b.n	8006c82 <_printf_i+0x86>
 8006c7a:	2975      	cmp	r1, #117	; 0x75
 8006c7c:	d017      	beq.n	8006cae <_printf_i+0xb2>
 8006c7e:	2978      	cmp	r1, #120	; 0x78
 8006c80:	d1d4      	bne.n	8006c2c <_printf_i+0x30>
 8006c82:	2378      	movs	r3, #120	; 0x78
 8006c84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c88:	4864      	ldr	r0, [pc, #400]	; (8006e1c <_printf_i+0x220>)
 8006c8a:	e055      	b.n	8006d38 <_printf_i+0x13c>
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	1d19      	adds	r1, r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6011      	str	r1, [r2, #0]
 8006c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e08c      	b.n	8006dba <_printf_i+0x1be>
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6011      	str	r1, [r2, #0]
 8006ca4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ca8:	bf18      	it	ne
 8006caa:	b21b      	sxthne	r3, r3
 8006cac:	e7cf      	b.n	8006c4e <_printf_i+0x52>
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	6825      	ldr	r5, [r4, #0]
 8006cb2:	1d18      	adds	r0, r3, #4
 8006cb4:	6010      	str	r0, [r2, #0]
 8006cb6:	0628      	lsls	r0, r5, #24
 8006cb8:	d501      	bpl.n	8006cbe <_printf_i+0xc2>
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <_printf_i+0xc8>
 8006cbe:	0668      	lsls	r0, r5, #25
 8006cc0:	d5fb      	bpl.n	8006cba <_printf_i+0xbe>
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	4854      	ldr	r0, [pc, #336]	; (8006e18 <_printf_i+0x21c>)
 8006cc6:	296f      	cmp	r1, #111	; 0x6f
 8006cc8:	bf14      	ite	ne
 8006cca:	220a      	movne	r2, #10
 8006ccc:	2208      	moveq	r2, #8
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd4:	6865      	ldr	r5, [r4, #4]
 8006cd6:	60a5      	str	r5, [r4, #8]
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	f2c0 8095 	blt.w	8006e08 <_printf_i+0x20c>
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	f021 0104 	bic.w	r1, r1, #4
 8006ce4:	6021      	str	r1, [r4, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d13d      	bne.n	8006d66 <_printf_i+0x16a>
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	f040 808e 	bne.w	8006e0c <_printf_i+0x210>
 8006cf0:	4665      	mov	r5, ip
 8006cf2:	2a08      	cmp	r2, #8
 8006cf4:	d10b      	bne.n	8006d0e <_printf_i+0x112>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	d508      	bpl.n	8006d0e <_printf_i+0x112>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bfde      	ittt	le
 8006d04:	2330      	movle	r3, #48	; 0x30
 8006d06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d0e:	ebac 0305 	sub.w	r3, ip, r5
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	f8cd 8000 	str.w	r8, [sp]
 8006d18:	463b      	mov	r3, r7
 8006d1a:	aa03      	add	r2, sp, #12
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff fef6 	bl	8006b10 <_printf_common>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d14d      	bne.n	8006dc4 <_printf_i+0x1c8>
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d2c:	b005      	add	sp, #20
 8006d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d32:	4839      	ldr	r0, [pc, #228]	; (8006e18 <_printf_i+0x21c>)
 8006d34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d38:	6813      	ldr	r3, [r2, #0]
 8006d3a:	6821      	ldr	r1, [r4, #0]
 8006d3c:	1d1d      	adds	r5, r3, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6015      	str	r5, [r2, #0]
 8006d42:	060a      	lsls	r2, r1, #24
 8006d44:	d50b      	bpl.n	8006d5e <_printf_i+0x162>
 8006d46:	07ca      	lsls	r2, r1, #31
 8006d48:	bf44      	itt	mi
 8006d4a:	f041 0120 	orrmi.w	r1, r1, #32
 8006d4e:	6021      	strmi	r1, [r4, #0]
 8006d50:	b91b      	cbnz	r3, 8006d5a <_printf_i+0x15e>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	f022 0220 	bic.w	r2, r2, #32
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	e7b7      	b.n	8006cce <_printf_i+0xd2>
 8006d5e:	064d      	lsls	r5, r1, #25
 8006d60:	bf48      	it	mi
 8006d62:	b29b      	uxthmi	r3, r3
 8006d64:	e7ef      	b.n	8006d46 <_printf_i+0x14a>
 8006d66:	4665      	mov	r5, ip
 8006d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d6c:	fb02 3311 	mls	r3, r2, r1, r3
 8006d70:	5cc3      	ldrb	r3, [r0, r3]
 8006d72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d76:	460b      	mov	r3, r1
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	d1f5      	bne.n	8006d68 <_printf_i+0x16c>
 8006d7c:	e7b9      	b.n	8006cf2 <_printf_i+0xf6>
 8006d7e:	6813      	ldr	r3, [r2, #0]
 8006d80:	6825      	ldr	r5, [r4, #0]
 8006d82:	6961      	ldr	r1, [r4, #20]
 8006d84:	1d18      	adds	r0, r3, #4
 8006d86:	6010      	str	r0, [r2, #0]
 8006d88:	0628      	lsls	r0, r5, #24
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	d501      	bpl.n	8006d92 <_printf_i+0x196>
 8006d8e:	6019      	str	r1, [r3, #0]
 8006d90:	e002      	b.n	8006d98 <_printf_i+0x19c>
 8006d92:	066a      	lsls	r2, r5, #25
 8006d94:	d5fb      	bpl.n	8006d8e <_printf_i+0x192>
 8006d96:	8019      	strh	r1, [r3, #0]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	4665      	mov	r5, ip
 8006d9e:	e7b9      	b.n	8006d14 <_printf_i+0x118>
 8006da0:	6813      	ldr	r3, [r2, #0]
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	681d      	ldr	r5, [r3, #0]
 8006da8:	6862      	ldr	r2, [r4, #4]
 8006daa:	2100      	movs	r1, #0
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7f9 fa37 	bl	8000220 <memchr>
 8006db2:	b108      	cbz	r0, 8006db8 <_printf_i+0x1bc>
 8006db4:	1b40      	subs	r0, r0, r5
 8006db6:	6060      	str	r0, [r4, #4]
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc2:	e7a7      	b.n	8006d14 <_printf_i+0x118>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4630      	mov	r0, r6
 8006dcc:	47c0      	blx	r8
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d0aa      	beq.n	8006d28 <_printf_i+0x12c>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	079b      	lsls	r3, r3, #30
 8006dd6:	d413      	bmi.n	8006e00 <_printf_i+0x204>
 8006dd8:	68e0      	ldr	r0, [r4, #12]
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	4298      	cmp	r0, r3
 8006dde:	bfb8      	it	lt
 8006de0:	4618      	movlt	r0, r3
 8006de2:	e7a3      	b.n	8006d2c <_printf_i+0x130>
 8006de4:	2301      	movs	r3, #1
 8006de6:	464a      	mov	r2, r9
 8006de8:	4639      	mov	r1, r7
 8006dea:	4630      	mov	r0, r6
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d09a      	beq.n	8006d28 <_printf_i+0x12c>
 8006df2:	3501      	adds	r5, #1
 8006df4:	68e3      	ldr	r3, [r4, #12]
 8006df6:	9a03      	ldr	r2, [sp, #12]
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	42ab      	cmp	r3, r5
 8006dfc:	dcf2      	bgt.n	8006de4 <_printf_i+0x1e8>
 8006dfe:	e7eb      	b.n	8006dd8 <_printf_i+0x1dc>
 8006e00:	2500      	movs	r5, #0
 8006e02:	f104 0919 	add.w	r9, r4, #25
 8006e06:	e7f5      	b.n	8006df4 <_printf_i+0x1f8>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1ac      	bne.n	8006d66 <_printf_i+0x16a>
 8006e0c:	7803      	ldrb	r3, [r0, #0]
 8006e0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e16:	e76c      	b.n	8006cf2 <_printf_i+0xf6>
 8006e18:	0800a54a 	.word	0x0800a54a
 8006e1c:	0800a55b 	.word	0x0800a55b

08006e20 <_scanf_float>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	469a      	mov	sl, r3
 8006e26:	688b      	ldr	r3, [r1, #8]
 8006e28:	4616      	mov	r6, r2
 8006e2a:	1e5a      	subs	r2, r3, #1
 8006e2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e30:	b087      	sub	sp, #28
 8006e32:	bf83      	ittte	hi
 8006e34:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006e38:	189b      	addhi	r3, r3, r2
 8006e3a:	9301      	strhi	r3, [sp, #4]
 8006e3c:	2300      	movls	r3, #0
 8006e3e:	bf86      	itte	hi
 8006e40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e44:	608b      	strhi	r3, [r1, #8]
 8006e46:	9301      	strls	r3, [sp, #4]
 8006e48:	680b      	ldr	r3, [r1, #0]
 8006e4a:	4688      	mov	r8, r1
 8006e4c:	f04f 0b00 	mov.w	fp, #0
 8006e50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e54:	f848 3b1c 	str.w	r3, [r8], #28
 8006e58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4645      	mov	r5, r8
 8006e62:	465a      	mov	r2, fp
 8006e64:	46d9      	mov	r9, fp
 8006e66:	f8cd b008 	str.w	fp, [sp, #8]
 8006e6a:	68a1      	ldr	r1, [r4, #8]
 8006e6c:	b181      	cbz	r1, 8006e90 <_scanf_float+0x70>
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b49      	cmp	r3, #73	; 0x49
 8006e74:	d071      	beq.n	8006f5a <_scanf_float+0x13a>
 8006e76:	d84d      	bhi.n	8006f14 <_scanf_float+0xf4>
 8006e78:	2b39      	cmp	r3, #57	; 0x39
 8006e7a:	d840      	bhi.n	8006efe <_scanf_float+0xde>
 8006e7c:	2b31      	cmp	r3, #49	; 0x31
 8006e7e:	f080 8088 	bcs.w	8006f92 <_scanf_float+0x172>
 8006e82:	2b2d      	cmp	r3, #45	; 0x2d
 8006e84:	f000 8090 	beq.w	8006fa8 <_scanf_float+0x188>
 8006e88:	d815      	bhi.n	8006eb6 <_scanf_float+0x96>
 8006e8a:	2b2b      	cmp	r3, #43	; 0x2b
 8006e8c:	f000 808c 	beq.w	8006fa8 <_scanf_float+0x188>
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	d003      	beq.n	8006e9e <_scanf_float+0x7e>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	2a01      	cmp	r2, #1
 8006ea2:	f200 80ea 	bhi.w	800707a <_scanf_float+0x25a>
 8006ea6:	4545      	cmp	r5, r8
 8006ea8:	f200 80dc 	bhi.w	8007064 <_scanf_float+0x244>
 8006eac:	2601      	movs	r6, #1
 8006eae:	4630      	mov	r0, r6
 8006eb0:	b007      	add	sp, #28
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb8:	f000 809f 	beq.w	8006ffa <_scanf_float+0x1da>
 8006ebc:	2b30      	cmp	r3, #48	; 0x30
 8006ebe:	d1e7      	bne.n	8006e90 <_scanf_float+0x70>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006ec6:	d064      	beq.n	8006f92 <_scanf_float+0x172>
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	f109 0901 	add.w	r9, r9, #1
 8006ed4:	b11b      	cbz	r3, 8006ede <_scanf_float+0xbe>
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	3101      	adds	r1, #1
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	60a1      	str	r1, [r4, #8]
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	60a3      	str	r3, [r4, #8]
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	6123      	str	r3, [r4, #16]
 8006eea:	6873      	ldr	r3, [r6, #4]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	6073      	str	r3, [r6, #4]
 8006ef2:	f340 80ac 	ble.w	800704e <_scanf_float+0x22e>
 8006ef6:	6833      	ldr	r3, [r6, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	e7b5      	b.n	8006e6a <_scanf_float+0x4a>
 8006efe:	2b45      	cmp	r3, #69	; 0x45
 8006f00:	f000 8085 	beq.w	800700e <_scanf_float+0x1ee>
 8006f04:	2b46      	cmp	r3, #70	; 0x46
 8006f06:	d06a      	beq.n	8006fde <_scanf_float+0x1be>
 8006f08:	2b41      	cmp	r3, #65	; 0x41
 8006f0a:	d1c1      	bne.n	8006e90 <_scanf_float+0x70>
 8006f0c:	2a01      	cmp	r2, #1
 8006f0e:	d1bf      	bne.n	8006e90 <_scanf_float+0x70>
 8006f10:	2202      	movs	r2, #2
 8006f12:	e046      	b.n	8006fa2 <_scanf_float+0x182>
 8006f14:	2b65      	cmp	r3, #101	; 0x65
 8006f16:	d07a      	beq.n	800700e <_scanf_float+0x1ee>
 8006f18:	d818      	bhi.n	8006f4c <_scanf_float+0x12c>
 8006f1a:	2b54      	cmp	r3, #84	; 0x54
 8006f1c:	d066      	beq.n	8006fec <_scanf_float+0x1cc>
 8006f1e:	d811      	bhi.n	8006f44 <_scanf_float+0x124>
 8006f20:	2b4e      	cmp	r3, #78	; 0x4e
 8006f22:	d1b5      	bne.n	8006e90 <_scanf_float+0x70>
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d146      	bne.n	8006fb6 <_scanf_float+0x196>
 8006f28:	f1b9 0f00 	cmp.w	r9, #0
 8006f2c:	d145      	bne.n	8006fba <_scanf_float+0x19a>
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f38:	d13f      	bne.n	8006fba <_scanf_float+0x19a>
 8006f3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f3e:	6021      	str	r1, [r4, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	e02e      	b.n	8006fa2 <_scanf_float+0x182>
 8006f44:	2b59      	cmp	r3, #89	; 0x59
 8006f46:	d01e      	beq.n	8006f86 <_scanf_float+0x166>
 8006f48:	2b61      	cmp	r3, #97	; 0x61
 8006f4a:	e7de      	b.n	8006f0a <_scanf_float+0xea>
 8006f4c:	2b6e      	cmp	r3, #110	; 0x6e
 8006f4e:	d0e9      	beq.n	8006f24 <_scanf_float+0x104>
 8006f50:	d815      	bhi.n	8006f7e <_scanf_float+0x15e>
 8006f52:	2b66      	cmp	r3, #102	; 0x66
 8006f54:	d043      	beq.n	8006fde <_scanf_float+0x1be>
 8006f56:	2b69      	cmp	r3, #105	; 0x69
 8006f58:	d19a      	bne.n	8006e90 <_scanf_float+0x70>
 8006f5a:	f1bb 0f00 	cmp.w	fp, #0
 8006f5e:	d138      	bne.n	8006fd2 <_scanf_float+0x1b2>
 8006f60:	f1b9 0f00 	cmp.w	r9, #0
 8006f64:	d197      	bne.n	8006e96 <_scanf_float+0x76>
 8006f66:	6821      	ldr	r1, [r4, #0]
 8006f68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f70:	d195      	bne.n	8006e9e <_scanf_float+0x7e>
 8006f72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f76:	6021      	str	r1, [r4, #0]
 8006f78:	f04f 0b01 	mov.w	fp, #1
 8006f7c:	e011      	b.n	8006fa2 <_scanf_float+0x182>
 8006f7e:	2b74      	cmp	r3, #116	; 0x74
 8006f80:	d034      	beq.n	8006fec <_scanf_float+0x1cc>
 8006f82:	2b79      	cmp	r3, #121	; 0x79
 8006f84:	d184      	bne.n	8006e90 <_scanf_float+0x70>
 8006f86:	f1bb 0f07 	cmp.w	fp, #7
 8006f8a:	d181      	bne.n	8006e90 <_scanf_float+0x70>
 8006f8c:	f04f 0b08 	mov.w	fp, #8
 8006f90:	e007      	b.n	8006fa2 <_scanf_float+0x182>
 8006f92:	eb12 0f0b 	cmn.w	r2, fp
 8006f96:	f47f af7b 	bne.w	8006e90 <_scanf_float+0x70>
 8006f9a:	6821      	ldr	r1, [r4, #0]
 8006f9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006fa0:	6021      	str	r1, [r4, #0]
 8006fa2:	702b      	strb	r3, [r5, #0]
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e79a      	b.n	8006ede <_scanf_float+0xbe>
 8006fa8:	6821      	ldr	r1, [r4, #0]
 8006faa:	0608      	lsls	r0, r1, #24
 8006fac:	f57f af70 	bpl.w	8006e90 <_scanf_float+0x70>
 8006fb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fb4:	e7f4      	b.n	8006fa0 <_scanf_float+0x180>
 8006fb6:	2a02      	cmp	r2, #2
 8006fb8:	d047      	beq.n	800704a <_scanf_float+0x22a>
 8006fba:	f1bb 0f01 	cmp.w	fp, #1
 8006fbe:	d003      	beq.n	8006fc8 <_scanf_float+0x1a8>
 8006fc0:	f1bb 0f04 	cmp.w	fp, #4
 8006fc4:	f47f af64 	bne.w	8006e90 <_scanf_float+0x70>
 8006fc8:	f10b 0b01 	add.w	fp, fp, #1
 8006fcc:	fa5f fb8b 	uxtb.w	fp, fp
 8006fd0:	e7e7      	b.n	8006fa2 <_scanf_float+0x182>
 8006fd2:	f1bb 0f03 	cmp.w	fp, #3
 8006fd6:	d0f7      	beq.n	8006fc8 <_scanf_float+0x1a8>
 8006fd8:	f1bb 0f05 	cmp.w	fp, #5
 8006fdc:	e7f2      	b.n	8006fc4 <_scanf_float+0x1a4>
 8006fde:	f1bb 0f02 	cmp.w	fp, #2
 8006fe2:	f47f af55 	bne.w	8006e90 <_scanf_float+0x70>
 8006fe6:	f04f 0b03 	mov.w	fp, #3
 8006fea:	e7da      	b.n	8006fa2 <_scanf_float+0x182>
 8006fec:	f1bb 0f06 	cmp.w	fp, #6
 8006ff0:	f47f af4e 	bne.w	8006e90 <_scanf_float+0x70>
 8006ff4:	f04f 0b07 	mov.w	fp, #7
 8006ff8:	e7d3      	b.n	8006fa2 <_scanf_float+0x182>
 8006ffa:	6821      	ldr	r1, [r4, #0]
 8006ffc:	0588      	lsls	r0, r1, #22
 8006ffe:	f57f af47 	bpl.w	8006e90 <_scanf_float+0x70>
 8007002:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007006:	6021      	str	r1, [r4, #0]
 8007008:	f8cd 9008 	str.w	r9, [sp, #8]
 800700c:	e7c9      	b.n	8006fa2 <_scanf_float+0x182>
 800700e:	6821      	ldr	r1, [r4, #0]
 8007010:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007014:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007018:	d006      	beq.n	8007028 <_scanf_float+0x208>
 800701a:	0548      	lsls	r0, r1, #21
 800701c:	f57f af38 	bpl.w	8006e90 <_scanf_float+0x70>
 8007020:	f1b9 0f00 	cmp.w	r9, #0
 8007024:	f43f af3b 	beq.w	8006e9e <_scanf_float+0x7e>
 8007028:	0588      	lsls	r0, r1, #22
 800702a:	bf58      	it	pl
 800702c:	9802      	ldrpl	r0, [sp, #8]
 800702e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007032:	bf58      	it	pl
 8007034:	eba9 0000 	subpl.w	r0, r9, r0
 8007038:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800703c:	bf58      	it	pl
 800703e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007042:	6021      	str	r1, [r4, #0]
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	e7ab      	b.n	8006fa2 <_scanf_float+0x182>
 800704a:	2203      	movs	r2, #3
 800704c:	e7a9      	b.n	8006fa2 <_scanf_float+0x182>
 800704e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007052:	9205      	str	r2, [sp, #20]
 8007054:	4631      	mov	r1, r6
 8007056:	4638      	mov	r0, r7
 8007058:	4798      	blx	r3
 800705a:	9a05      	ldr	r2, [sp, #20]
 800705c:	2800      	cmp	r0, #0
 800705e:	f43f af04 	beq.w	8006e6a <_scanf_float+0x4a>
 8007062:	e715      	b.n	8006e90 <_scanf_float+0x70>
 8007064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007068:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800706c:	4632      	mov	r2, r6
 800706e:	4638      	mov	r0, r7
 8007070:	4798      	blx	r3
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	3b01      	subs	r3, #1
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	e715      	b.n	8006ea6 <_scanf_float+0x86>
 800707a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800707e:	2b06      	cmp	r3, #6
 8007080:	d80a      	bhi.n	8007098 <_scanf_float+0x278>
 8007082:	f1bb 0f02 	cmp.w	fp, #2
 8007086:	d968      	bls.n	800715a <_scanf_float+0x33a>
 8007088:	f1ab 0b03 	sub.w	fp, fp, #3
 800708c:	fa5f fb8b 	uxtb.w	fp, fp
 8007090:	eba5 0b0b 	sub.w	fp, r5, fp
 8007094:	455d      	cmp	r5, fp
 8007096:	d14b      	bne.n	8007130 <_scanf_float+0x310>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	05da      	lsls	r2, r3, #23
 800709c:	d51f      	bpl.n	80070de <_scanf_float+0x2be>
 800709e:	055b      	lsls	r3, r3, #21
 80070a0:	d468      	bmi.n	8007174 <_scanf_float+0x354>
 80070a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	2965      	cmp	r1, #101	; 0x65
 80070aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80070ae:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	d00d      	beq.n	80070d2 <_scanf_float+0x2b2>
 80070b6:	2945      	cmp	r1, #69	; 0x45
 80070b8:	d00b      	beq.n	80070d2 <_scanf_float+0x2b2>
 80070ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070be:	4632      	mov	r2, r6
 80070c0:	4638      	mov	r0, r7
 80070c2:	4798      	blx	r3
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	f1a5 0b02 	sub.w	fp, r5, #2
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d6:	4632      	mov	r2, r6
 80070d8:	4638      	mov	r0, r7
 80070da:	4798      	blx	r3
 80070dc:	465d      	mov	r5, fp
 80070de:	6826      	ldr	r6, [r4, #0]
 80070e0:	f016 0610 	ands.w	r6, r6, #16
 80070e4:	d17a      	bne.n	80071dc <_scanf_float+0x3bc>
 80070e6:	702e      	strb	r6, [r5, #0]
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f2:	d142      	bne.n	800717a <_scanf_float+0x35a>
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	eba9 0303 	sub.w	r3, r9, r3
 80070fa:	425a      	negs	r2, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d149      	bne.n	8007194 <_scanf_float+0x374>
 8007100:	2200      	movs	r2, #0
 8007102:	4641      	mov	r1, r8
 8007104:	4638      	mov	r0, r7
 8007106:	f000 fea3 	bl	8007e50 <_strtod_r>
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	f8da 3000 	ldr.w	r3, [sl]
 8007110:	f015 0f02 	tst.w	r5, #2
 8007114:	f103 0204 	add.w	r2, r3, #4
 8007118:	ec59 8b10 	vmov	r8, r9, d0
 800711c:	f8ca 2000 	str.w	r2, [sl]
 8007120:	d043      	beq.n	80071aa <_scanf_float+0x38a>
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	e9c3 8900 	strd	r8, r9, [r3]
 8007128:	68e3      	ldr	r3, [r4, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60e3      	str	r3, [r4, #12]
 800712e:	e6be      	b.n	8006eae <_scanf_float+0x8e>
 8007130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007134:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007138:	4632      	mov	r2, r6
 800713a:	4638      	mov	r0, r7
 800713c:	4798      	blx	r3
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	e7a6      	b.n	8007094 <_scanf_float+0x274>
 8007146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800714a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800714e:	4632      	mov	r2, r6
 8007150:	4638      	mov	r0, r7
 8007152:	4798      	blx	r3
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	4545      	cmp	r5, r8
 800715c:	d8f3      	bhi.n	8007146 <_scanf_float+0x326>
 800715e:	e6a5      	b.n	8006eac <_scanf_float+0x8c>
 8007160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007164:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007168:	4632      	mov	r2, r6
 800716a:	4638      	mov	r0, r7
 800716c:	4798      	blx	r3
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	3b01      	subs	r3, #1
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	4545      	cmp	r5, r8
 8007176:	d8f3      	bhi.n	8007160 <_scanf_float+0x340>
 8007178:	e698      	b.n	8006eac <_scanf_float+0x8c>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0bf      	beq.n	8007100 <_scanf_float+0x2e0>
 8007180:	9904      	ldr	r1, [sp, #16]
 8007182:	230a      	movs	r3, #10
 8007184:	4632      	mov	r2, r6
 8007186:	3101      	adds	r1, #1
 8007188:	4638      	mov	r0, r7
 800718a:	f000 feed 	bl	8007f68 <_strtol_r>
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	9d04      	ldr	r5, [sp, #16]
 8007192:	1ac2      	subs	r2, r0, r3
 8007194:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007198:	429d      	cmp	r5, r3
 800719a:	bf28      	it	cs
 800719c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80071a0:	490f      	ldr	r1, [pc, #60]	; (80071e0 <_scanf_float+0x3c0>)
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 f824 	bl	80071f0 <siprintf>
 80071a8:	e7aa      	b.n	8007100 <_scanf_float+0x2e0>
 80071aa:	f015 0504 	ands.w	r5, r5, #4
 80071ae:	d1b8      	bne.n	8007122 <_scanf_float+0x302>
 80071b0:	681f      	ldr	r7, [r3, #0]
 80071b2:	ee10 2a10 	vmov	r2, s0
 80071b6:	464b      	mov	r3, r9
 80071b8:	ee10 0a10 	vmov	r0, s0
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 fcd5 	bl	8000b6c <__aeabi_dcmpun>
 80071c2:	b128      	cbz	r0, 80071d0 <_scanf_float+0x3b0>
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f80d 	bl	80071e4 <nanf>
 80071ca:	ed87 0a00 	vstr	s0, [r7]
 80071ce:	e7ab      	b.n	8007128 <_scanf_float+0x308>
 80071d0:	4640      	mov	r0, r8
 80071d2:	4649      	mov	r1, r9
 80071d4:	f7f9 fd28 	bl	8000c28 <__aeabi_d2f>
 80071d8:	6038      	str	r0, [r7, #0]
 80071da:	e7a5      	b.n	8007128 <_scanf_float+0x308>
 80071dc:	2600      	movs	r6, #0
 80071de:	e666      	b.n	8006eae <_scanf_float+0x8e>
 80071e0:	0800a56c 	.word	0x0800a56c

080071e4 <nanf>:
 80071e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071ec <nanf+0x8>
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	7fc00000 	.word	0x7fc00000

080071f0 <siprintf>:
 80071f0:	b40e      	push	{r1, r2, r3}
 80071f2:	b500      	push	{lr}
 80071f4:	b09c      	sub	sp, #112	; 0x70
 80071f6:	ab1d      	add	r3, sp, #116	; 0x74
 80071f8:	9002      	str	r0, [sp, #8]
 80071fa:	9006      	str	r0, [sp, #24]
 80071fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007200:	4809      	ldr	r0, [pc, #36]	; (8007228 <siprintf+0x38>)
 8007202:	9107      	str	r1, [sp, #28]
 8007204:	9104      	str	r1, [sp, #16]
 8007206:	4909      	ldr	r1, [pc, #36]	; (800722c <siprintf+0x3c>)
 8007208:	f853 2b04 	ldr.w	r2, [r3], #4
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	6800      	ldr	r0, [r0, #0]
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	a902      	add	r1, sp, #8
 8007214:	f002 fd64 	bl	8009ce0 <_svfiprintf_r>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	b01c      	add	sp, #112	; 0x70
 8007220:	f85d eb04 	ldr.w	lr, [sp], #4
 8007224:	b003      	add	sp, #12
 8007226:	4770      	bx	lr
 8007228:	20000018 	.word	0x20000018
 800722c:	ffff0208 	.word	0xffff0208

08007230 <sulp>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	460d      	mov	r5, r1
 8007236:	ec45 4b10 	vmov	d0, r4, r5
 800723a:	4616      	mov	r6, r2
 800723c:	f002 fb0c 	bl	8009858 <__ulp>
 8007240:	ec51 0b10 	vmov	r0, r1, d0
 8007244:	b17e      	cbz	r6, 8007266 <sulp+0x36>
 8007246:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800724a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd09      	ble.n	8007266 <sulp+0x36>
 8007252:	051b      	lsls	r3, r3, #20
 8007254:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007258:	2400      	movs	r4, #0
 800725a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	f7f9 f9e9 	bl	8000638 <__aeabi_dmul>
 8007266:	bd70      	pop	{r4, r5, r6, pc}

08007268 <_strtod_l>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	461f      	mov	r7, r3
 800726e:	b0a1      	sub	sp, #132	; 0x84
 8007270:	2300      	movs	r3, #0
 8007272:	4681      	mov	r9, r0
 8007274:	4638      	mov	r0, r7
 8007276:	460e      	mov	r6, r1
 8007278:	9217      	str	r2, [sp, #92]	; 0x5c
 800727a:	931c      	str	r3, [sp, #112]	; 0x70
 800727c:	f001 fff5 	bl	800926a <__localeconv_l>
 8007280:	4680      	mov	r8, r0
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	f7f8 ffc4 	bl	8000210 <strlen>
 8007288:	f04f 0a00 	mov.w	sl, #0
 800728c:	4604      	mov	r4, r0
 800728e:	f04f 0b00 	mov.w	fp, #0
 8007292:	961b      	str	r6, [sp, #108]	; 0x6c
 8007294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007296:	781a      	ldrb	r2, [r3, #0]
 8007298:	2a0d      	cmp	r2, #13
 800729a:	d832      	bhi.n	8007302 <_strtod_l+0x9a>
 800729c:	2a09      	cmp	r2, #9
 800729e:	d236      	bcs.n	800730e <_strtod_l+0xa6>
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	d03e      	beq.n	8007322 <_strtod_l+0xba>
 80072a4:	2300      	movs	r3, #0
 80072a6:	930d      	str	r3, [sp, #52]	; 0x34
 80072a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80072aa:	782b      	ldrb	r3, [r5, #0]
 80072ac:	2b30      	cmp	r3, #48	; 0x30
 80072ae:	f040 80ac 	bne.w	800740a <_strtod_l+0x1a2>
 80072b2:	786b      	ldrb	r3, [r5, #1]
 80072b4:	2b58      	cmp	r3, #88	; 0x58
 80072b6:	d001      	beq.n	80072bc <_strtod_l+0x54>
 80072b8:	2b78      	cmp	r3, #120	; 0x78
 80072ba:	d167      	bne.n	800738c <_strtod_l+0x124>
 80072bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	ab1c      	add	r3, sp, #112	; 0x70
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	9702      	str	r7, [sp, #8]
 80072c6:	ab1d      	add	r3, sp, #116	; 0x74
 80072c8:	4a88      	ldr	r2, [pc, #544]	; (80074ec <_strtod_l+0x284>)
 80072ca:	a91b      	add	r1, sp, #108	; 0x6c
 80072cc:	4648      	mov	r0, r9
 80072ce:	f001 fcf2 	bl	8008cb6 <__gethex>
 80072d2:	f010 0407 	ands.w	r4, r0, #7
 80072d6:	4606      	mov	r6, r0
 80072d8:	d005      	beq.n	80072e6 <_strtod_l+0x7e>
 80072da:	2c06      	cmp	r4, #6
 80072dc:	d12b      	bne.n	8007336 <_strtod_l+0xce>
 80072de:	3501      	adds	r5, #1
 80072e0:	2300      	movs	r3, #0
 80072e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80072e4:	930d      	str	r3, [sp, #52]	; 0x34
 80072e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 859a 	bne.w	8007e22 <_strtod_l+0xbba>
 80072ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f0:	b1e3      	cbz	r3, 800732c <_strtod_l+0xc4>
 80072f2:	4652      	mov	r2, sl
 80072f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072f8:	ec43 2b10 	vmov	d0, r2, r3
 80072fc:	b021      	add	sp, #132	; 0x84
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	2a2b      	cmp	r2, #43	; 0x2b
 8007304:	d015      	beq.n	8007332 <_strtod_l+0xca>
 8007306:	2a2d      	cmp	r2, #45	; 0x2d
 8007308:	d004      	beq.n	8007314 <_strtod_l+0xac>
 800730a:	2a20      	cmp	r2, #32
 800730c:	d1ca      	bne.n	80072a4 <_strtod_l+0x3c>
 800730e:	3301      	adds	r3, #1
 8007310:	931b      	str	r3, [sp, #108]	; 0x6c
 8007312:	e7bf      	b.n	8007294 <_strtod_l+0x2c>
 8007314:	2201      	movs	r2, #1
 8007316:	920d      	str	r2, [sp, #52]	; 0x34
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	921b      	str	r2, [sp, #108]	; 0x6c
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1c2      	bne.n	80072a8 <_strtod_l+0x40>
 8007322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007324:	961b      	str	r6, [sp, #108]	; 0x6c
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 8579 	bne.w	8007e1e <_strtod_l+0xbb6>
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	e7e2      	b.n	80072f8 <_strtod_l+0x90>
 8007332:	2200      	movs	r2, #0
 8007334:	e7ef      	b.n	8007316 <_strtod_l+0xae>
 8007336:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007338:	b13a      	cbz	r2, 800734a <_strtod_l+0xe2>
 800733a:	2135      	movs	r1, #53	; 0x35
 800733c:	a81e      	add	r0, sp, #120	; 0x78
 800733e:	f002 fb83 	bl	8009a48 <__copybits>
 8007342:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007344:	4648      	mov	r0, r9
 8007346:	f001 ffef 	bl	8009328 <_Bfree>
 800734a:	3c01      	subs	r4, #1
 800734c:	2c04      	cmp	r4, #4
 800734e:	d806      	bhi.n	800735e <_strtod_l+0xf6>
 8007350:	e8df f004 	tbb	[pc, r4]
 8007354:	1714030a 	.word	0x1714030a
 8007358:	0a          	.byte	0x0a
 8007359:	00          	.byte	0x00
 800735a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800735e:	0730      	lsls	r0, r6, #28
 8007360:	d5c1      	bpl.n	80072e6 <_strtod_l+0x7e>
 8007362:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007366:	e7be      	b.n	80072e6 <_strtod_l+0x7e>
 8007368:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800736c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800736e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007372:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007376:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800737a:	e7f0      	b.n	800735e <_strtod_l+0xf6>
 800737c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80074f0 <_strtod_l+0x288>
 8007380:	e7ed      	b.n	800735e <_strtod_l+0xf6>
 8007382:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007386:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800738a:	e7e8      	b.n	800735e <_strtod_l+0xf6>
 800738c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	921b      	str	r2, [sp, #108]	; 0x6c
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b30      	cmp	r3, #48	; 0x30
 8007396:	d0f9      	beq.n	800738c <_strtod_l+0x124>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0a4      	beq.n	80072e6 <_strtod_l+0x7e>
 800739c:	2301      	movs	r3, #1
 800739e:	2500      	movs	r5, #0
 80073a0:	9306      	str	r3, [sp, #24]
 80073a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073a4:	9308      	str	r3, [sp, #32]
 80073a6:	9507      	str	r5, [sp, #28]
 80073a8:	9505      	str	r5, [sp, #20]
 80073aa:	220a      	movs	r2, #10
 80073ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80073ae:	7807      	ldrb	r7, [r0, #0]
 80073b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80073b4:	b2d9      	uxtb	r1, r3
 80073b6:	2909      	cmp	r1, #9
 80073b8:	d929      	bls.n	800740e <_strtod_l+0x1a6>
 80073ba:	4622      	mov	r2, r4
 80073bc:	f8d8 1000 	ldr.w	r1, [r8]
 80073c0:	f002 fd96 	bl	8009ef0 <strncmp>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d031      	beq.n	800742c <_strtod_l+0x1c4>
 80073c8:	2000      	movs	r0, #0
 80073ca:	9c05      	ldr	r4, [sp, #20]
 80073cc:	9004      	str	r0, [sp, #16]
 80073ce:	463b      	mov	r3, r7
 80073d0:	4602      	mov	r2, r0
 80073d2:	2b65      	cmp	r3, #101	; 0x65
 80073d4:	d001      	beq.n	80073da <_strtod_l+0x172>
 80073d6:	2b45      	cmp	r3, #69	; 0x45
 80073d8:	d114      	bne.n	8007404 <_strtod_l+0x19c>
 80073da:	b924      	cbnz	r4, 80073e6 <_strtod_l+0x17e>
 80073dc:	b910      	cbnz	r0, 80073e4 <_strtod_l+0x17c>
 80073de:	9b06      	ldr	r3, [sp, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d09e      	beq.n	8007322 <_strtod_l+0xba>
 80073e4:	2400      	movs	r4, #0
 80073e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80073e8:	1c73      	adds	r3, r6, #1
 80073ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80073ec:	7873      	ldrb	r3, [r6, #1]
 80073ee:	2b2b      	cmp	r3, #43	; 0x2b
 80073f0:	d078      	beq.n	80074e4 <_strtod_l+0x27c>
 80073f2:	2b2d      	cmp	r3, #45	; 0x2d
 80073f4:	d070      	beq.n	80074d8 <_strtod_l+0x270>
 80073f6:	f04f 0c00 	mov.w	ip, #0
 80073fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80073fe:	2f09      	cmp	r7, #9
 8007400:	d97c      	bls.n	80074fc <_strtod_l+0x294>
 8007402:	961b      	str	r6, [sp, #108]	; 0x6c
 8007404:	f04f 0e00 	mov.w	lr, #0
 8007408:	e09a      	b.n	8007540 <_strtod_l+0x2d8>
 800740a:	2300      	movs	r3, #0
 800740c:	e7c7      	b.n	800739e <_strtod_l+0x136>
 800740e:	9905      	ldr	r1, [sp, #20]
 8007410:	2908      	cmp	r1, #8
 8007412:	bfdd      	ittte	le
 8007414:	9907      	ldrle	r1, [sp, #28]
 8007416:	fb02 3301 	mlale	r3, r2, r1, r3
 800741a:	9307      	strle	r3, [sp, #28]
 800741c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007420:	9b05      	ldr	r3, [sp, #20]
 8007422:	3001      	adds	r0, #1
 8007424:	3301      	adds	r3, #1
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	901b      	str	r0, [sp, #108]	; 0x6c
 800742a:	e7bf      	b.n	80073ac <_strtod_l+0x144>
 800742c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800742e:	191a      	adds	r2, r3, r4
 8007430:	921b      	str	r2, [sp, #108]	; 0x6c
 8007432:	9a05      	ldr	r2, [sp, #20]
 8007434:	5d1b      	ldrb	r3, [r3, r4]
 8007436:	2a00      	cmp	r2, #0
 8007438:	d037      	beq.n	80074aa <_strtod_l+0x242>
 800743a:	9c05      	ldr	r4, [sp, #20]
 800743c:	4602      	mov	r2, r0
 800743e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007442:	2909      	cmp	r1, #9
 8007444:	d913      	bls.n	800746e <_strtod_l+0x206>
 8007446:	2101      	movs	r1, #1
 8007448:	9104      	str	r1, [sp, #16]
 800744a:	e7c2      	b.n	80073d2 <_strtod_l+0x16a>
 800744c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	921b      	str	r2, [sp, #108]	; 0x6c
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	3001      	adds	r0, #1
 8007456:	2b30      	cmp	r3, #48	; 0x30
 8007458:	d0f8      	beq.n	800744c <_strtod_l+0x1e4>
 800745a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800745e:	2a08      	cmp	r2, #8
 8007460:	f200 84e4 	bhi.w	8007e2c <_strtod_l+0xbc4>
 8007464:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007466:	9208      	str	r2, [sp, #32]
 8007468:	4602      	mov	r2, r0
 800746a:	2000      	movs	r0, #0
 800746c:	4604      	mov	r4, r0
 800746e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007472:	f100 0101 	add.w	r1, r0, #1
 8007476:	d012      	beq.n	800749e <_strtod_l+0x236>
 8007478:	440a      	add	r2, r1
 800747a:	eb00 0c04 	add.w	ip, r0, r4
 800747e:	4621      	mov	r1, r4
 8007480:	270a      	movs	r7, #10
 8007482:	458c      	cmp	ip, r1
 8007484:	d113      	bne.n	80074ae <_strtod_l+0x246>
 8007486:	1821      	adds	r1, r4, r0
 8007488:	2908      	cmp	r1, #8
 800748a:	f104 0401 	add.w	r4, r4, #1
 800748e:	4404      	add	r4, r0
 8007490:	dc19      	bgt.n	80074c6 <_strtod_l+0x25e>
 8007492:	9b07      	ldr	r3, [sp, #28]
 8007494:	210a      	movs	r1, #10
 8007496:	fb01 e303 	mla	r3, r1, r3, lr
 800749a:	9307      	str	r3, [sp, #28]
 800749c:	2100      	movs	r1, #0
 800749e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a0:	1c58      	adds	r0, r3, #1
 80074a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	4608      	mov	r0, r1
 80074a8:	e7c9      	b.n	800743e <_strtod_l+0x1d6>
 80074aa:	9805      	ldr	r0, [sp, #20]
 80074ac:	e7d3      	b.n	8007456 <_strtod_l+0x1ee>
 80074ae:	2908      	cmp	r1, #8
 80074b0:	f101 0101 	add.w	r1, r1, #1
 80074b4:	dc03      	bgt.n	80074be <_strtod_l+0x256>
 80074b6:	9b07      	ldr	r3, [sp, #28]
 80074b8:	437b      	muls	r3, r7
 80074ba:	9307      	str	r3, [sp, #28]
 80074bc:	e7e1      	b.n	8007482 <_strtod_l+0x21a>
 80074be:	2910      	cmp	r1, #16
 80074c0:	bfd8      	it	le
 80074c2:	437d      	mulle	r5, r7
 80074c4:	e7dd      	b.n	8007482 <_strtod_l+0x21a>
 80074c6:	2c10      	cmp	r4, #16
 80074c8:	bfdc      	itt	le
 80074ca:	210a      	movle	r1, #10
 80074cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80074d0:	e7e4      	b.n	800749c <_strtod_l+0x234>
 80074d2:	2301      	movs	r3, #1
 80074d4:	9304      	str	r3, [sp, #16]
 80074d6:	e781      	b.n	80073dc <_strtod_l+0x174>
 80074d8:	f04f 0c01 	mov.w	ip, #1
 80074dc:	1cb3      	adds	r3, r6, #2
 80074de:	931b      	str	r3, [sp, #108]	; 0x6c
 80074e0:	78b3      	ldrb	r3, [r6, #2]
 80074e2:	e78a      	b.n	80073fa <_strtod_l+0x192>
 80074e4:	f04f 0c00 	mov.w	ip, #0
 80074e8:	e7f8      	b.n	80074dc <_strtod_l+0x274>
 80074ea:	bf00      	nop
 80074ec:	0800a574 	.word	0x0800a574
 80074f0:	7ff00000 	.word	0x7ff00000
 80074f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074f6:	1c5f      	adds	r7, r3, #1
 80074f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d0f9      	beq.n	80074f4 <_strtod_l+0x28c>
 8007500:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007504:	2f08      	cmp	r7, #8
 8007506:	f63f af7d 	bhi.w	8007404 <_strtod_l+0x19c>
 800750a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800750e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007510:	930a      	str	r3, [sp, #40]	; 0x28
 8007512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007514:	1c5f      	adds	r7, r3, #1
 8007516:	971b      	str	r7, [sp, #108]	; 0x6c
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800751e:	f1b8 0f09 	cmp.w	r8, #9
 8007522:	d937      	bls.n	8007594 <_strtod_l+0x32c>
 8007524:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007526:	1a7f      	subs	r7, r7, r1
 8007528:	2f08      	cmp	r7, #8
 800752a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800752e:	dc37      	bgt.n	80075a0 <_strtod_l+0x338>
 8007530:	45be      	cmp	lr, r7
 8007532:	bfa8      	it	ge
 8007534:	46be      	movge	lr, r7
 8007536:	f1bc 0f00 	cmp.w	ip, #0
 800753a:	d001      	beq.n	8007540 <_strtod_l+0x2d8>
 800753c:	f1ce 0e00 	rsb	lr, lr, #0
 8007540:	2c00      	cmp	r4, #0
 8007542:	d151      	bne.n	80075e8 <_strtod_l+0x380>
 8007544:	2800      	cmp	r0, #0
 8007546:	f47f aece 	bne.w	80072e6 <_strtod_l+0x7e>
 800754a:	9a06      	ldr	r2, [sp, #24]
 800754c:	2a00      	cmp	r2, #0
 800754e:	f47f aeca 	bne.w	80072e6 <_strtod_l+0x7e>
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	2a00      	cmp	r2, #0
 8007556:	f47f aee4 	bne.w	8007322 <_strtod_l+0xba>
 800755a:	2b4e      	cmp	r3, #78	; 0x4e
 800755c:	d027      	beq.n	80075ae <_strtod_l+0x346>
 800755e:	dc21      	bgt.n	80075a4 <_strtod_l+0x33c>
 8007560:	2b49      	cmp	r3, #73	; 0x49
 8007562:	f47f aede 	bne.w	8007322 <_strtod_l+0xba>
 8007566:	49a0      	ldr	r1, [pc, #640]	; (80077e8 <_strtod_l+0x580>)
 8007568:	a81b      	add	r0, sp, #108	; 0x6c
 800756a:	f001 fdd7 	bl	800911c <__match>
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f aed7 	beq.w	8007322 <_strtod_l+0xba>
 8007574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007576:	499d      	ldr	r1, [pc, #628]	; (80077ec <_strtod_l+0x584>)
 8007578:	3b01      	subs	r3, #1
 800757a:	a81b      	add	r0, sp, #108	; 0x6c
 800757c:	931b      	str	r3, [sp, #108]	; 0x6c
 800757e:	f001 fdcd 	bl	800911c <__match>
 8007582:	b910      	cbnz	r0, 800758a <_strtod_l+0x322>
 8007584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007586:	3301      	adds	r3, #1
 8007588:	931b      	str	r3, [sp, #108]	; 0x6c
 800758a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007800 <_strtod_l+0x598>
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	e6a8      	b.n	80072e6 <_strtod_l+0x7e>
 8007594:	210a      	movs	r1, #10
 8007596:	fb01 3e0e 	mla	lr, r1, lr, r3
 800759a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800759e:	e7b8      	b.n	8007512 <_strtod_l+0x2aa>
 80075a0:	46be      	mov	lr, r7
 80075a2:	e7c8      	b.n	8007536 <_strtod_l+0x2ce>
 80075a4:	2b69      	cmp	r3, #105	; 0x69
 80075a6:	d0de      	beq.n	8007566 <_strtod_l+0x2fe>
 80075a8:	2b6e      	cmp	r3, #110	; 0x6e
 80075aa:	f47f aeba 	bne.w	8007322 <_strtod_l+0xba>
 80075ae:	4990      	ldr	r1, [pc, #576]	; (80077f0 <_strtod_l+0x588>)
 80075b0:	a81b      	add	r0, sp, #108	; 0x6c
 80075b2:	f001 fdb3 	bl	800911c <__match>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f aeb3 	beq.w	8007322 <_strtod_l+0xba>
 80075bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b28      	cmp	r3, #40	; 0x28
 80075c2:	d10e      	bne.n	80075e2 <_strtod_l+0x37a>
 80075c4:	aa1e      	add	r2, sp, #120	; 0x78
 80075c6:	498b      	ldr	r1, [pc, #556]	; (80077f4 <_strtod_l+0x58c>)
 80075c8:	a81b      	add	r0, sp, #108	; 0x6c
 80075ca:	f001 fdbb 	bl	8009144 <__hexnan>
 80075ce:	2805      	cmp	r0, #5
 80075d0:	d107      	bne.n	80075e2 <_strtod_l+0x37a>
 80075d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80075d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80075dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80075e0:	e681      	b.n	80072e6 <_strtod_l+0x7e>
 80075e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007808 <_strtod_l+0x5a0>
 80075e6:	e7d2      	b.n	800758e <_strtod_l+0x326>
 80075e8:	ebae 0302 	sub.w	r3, lr, r2
 80075ec:	9306      	str	r3, [sp, #24]
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	9807      	ldr	r0, [sp, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf08      	it	eq
 80075f6:	4623      	moveq	r3, r4
 80075f8:	2c10      	cmp	r4, #16
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	46a0      	mov	r8, r4
 80075fe:	bfa8      	it	ge
 8007600:	f04f 0810 	movge.w	r8, #16
 8007604:	f7f8 ff9e 	bl	8000544 <__aeabi_ui2d>
 8007608:	2c09      	cmp	r4, #9
 800760a:	4682      	mov	sl, r0
 800760c:	468b      	mov	fp, r1
 800760e:	dc13      	bgt.n	8007638 <_strtod_l+0x3d0>
 8007610:	9b06      	ldr	r3, [sp, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f ae67 	beq.w	80072e6 <_strtod_l+0x7e>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	dd7a      	ble.n	8007712 <_strtod_l+0x4aa>
 800761c:	2b16      	cmp	r3, #22
 800761e:	dc61      	bgt.n	80076e4 <_strtod_l+0x47c>
 8007620:	4a75      	ldr	r2, [pc, #468]	; (80077f8 <_strtod_l+0x590>)
 8007622:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007626:	e9de 0100 	ldrd	r0, r1, [lr]
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	f7f9 f803 	bl	8000638 <__aeabi_dmul>
 8007632:	4682      	mov	sl, r0
 8007634:	468b      	mov	fp, r1
 8007636:	e656      	b.n	80072e6 <_strtod_l+0x7e>
 8007638:	4b6f      	ldr	r3, [pc, #444]	; (80077f8 <_strtod_l+0x590>)
 800763a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800763e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007642:	f7f8 fff9 	bl	8000638 <__aeabi_dmul>
 8007646:	4606      	mov	r6, r0
 8007648:	4628      	mov	r0, r5
 800764a:	460f      	mov	r7, r1
 800764c:	f7f8 ff7a 	bl	8000544 <__aeabi_ui2d>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	f7f8 fe38 	bl	80002cc <__adddf3>
 800765c:	2c0f      	cmp	r4, #15
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	ddd5      	ble.n	8007610 <_strtod_l+0x3a8>
 8007664:	9b06      	ldr	r3, [sp, #24]
 8007666:	eba4 0808 	sub.w	r8, r4, r8
 800766a:	4498      	add	r8, r3
 800766c:	f1b8 0f00 	cmp.w	r8, #0
 8007670:	f340 8096 	ble.w	80077a0 <_strtod_l+0x538>
 8007674:	f018 030f 	ands.w	r3, r8, #15
 8007678:	d00a      	beq.n	8007690 <_strtod_l+0x428>
 800767a:	495f      	ldr	r1, [pc, #380]	; (80077f8 <_strtod_l+0x590>)
 800767c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007680:	4652      	mov	r2, sl
 8007682:	465b      	mov	r3, fp
 8007684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007688:	f7f8 ffd6 	bl	8000638 <__aeabi_dmul>
 800768c:	4682      	mov	sl, r0
 800768e:	468b      	mov	fp, r1
 8007690:	f038 080f 	bics.w	r8, r8, #15
 8007694:	d073      	beq.n	800777e <_strtod_l+0x516>
 8007696:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800769a:	dd47      	ble.n	800772c <_strtod_l+0x4c4>
 800769c:	2400      	movs	r4, #0
 800769e:	46a0      	mov	r8, r4
 80076a0:	9407      	str	r4, [sp, #28]
 80076a2:	9405      	str	r4, [sp, #20]
 80076a4:	2322      	movs	r3, #34	; 0x22
 80076a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007800 <_strtod_l+0x598>
 80076aa:	f8c9 3000 	str.w	r3, [r9]
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	9b07      	ldr	r3, [sp, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f43f ae16 	beq.w	80072e6 <_strtod_l+0x7e>
 80076ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076bc:	4648      	mov	r0, r9
 80076be:	f001 fe33 	bl	8009328 <_Bfree>
 80076c2:	9905      	ldr	r1, [sp, #20]
 80076c4:	4648      	mov	r0, r9
 80076c6:	f001 fe2f 	bl	8009328 <_Bfree>
 80076ca:	4641      	mov	r1, r8
 80076cc:	4648      	mov	r0, r9
 80076ce:	f001 fe2b 	bl	8009328 <_Bfree>
 80076d2:	9907      	ldr	r1, [sp, #28]
 80076d4:	4648      	mov	r0, r9
 80076d6:	f001 fe27 	bl	8009328 <_Bfree>
 80076da:	4621      	mov	r1, r4
 80076dc:	4648      	mov	r0, r9
 80076de:	f001 fe23 	bl	8009328 <_Bfree>
 80076e2:	e600      	b.n	80072e6 <_strtod_l+0x7e>
 80076e4:	9a06      	ldr	r2, [sp, #24]
 80076e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80076ea:	4293      	cmp	r3, r2
 80076ec:	dbba      	blt.n	8007664 <_strtod_l+0x3fc>
 80076ee:	4d42      	ldr	r5, [pc, #264]	; (80077f8 <_strtod_l+0x590>)
 80076f0:	f1c4 040f 	rsb	r4, r4, #15
 80076f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80076f8:	4652      	mov	r2, sl
 80076fa:	465b      	mov	r3, fp
 80076fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007700:	f7f8 ff9a 	bl	8000638 <__aeabi_dmul>
 8007704:	9b06      	ldr	r3, [sp, #24]
 8007706:	1b1c      	subs	r4, r3, r4
 8007708:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800770c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007710:	e78d      	b.n	800762e <_strtod_l+0x3c6>
 8007712:	f113 0f16 	cmn.w	r3, #22
 8007716:	dba5      	blt.n	8007664 <_strtod_l+0x3fc>
 8007718:	4a37      	ldr	r2, [pc, #220]	; (80077f8 <_strtod_l+0x590>)
 800771a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800771e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007722:	4650      	mov	r0, sl
 8007724:	4659      	mov	r1, fp
 8007726:	f7f9 f8b1 	bl	800088c <__aeabi_ddiv>
 800772a:	e782      	b.n	8007632 <_strtod_l+0x3ca>
 800772c:	2300      	movs	r3, #0
 800772e:	4e33      	ldr	r6, [pc, #204]	; (80077fc <_strtod_l+0x594>)
 8007730:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007734:	4650      	mov	r0, sl
 8007736:	4659      	mov	r1, fp
 8007738:	461d      	mov	r5, r3
 800773a:	f1b8 0f01 	cmp.w	r8, #1
 800773e:	dc21      	bgt.n	8007784 <_strtod_l+0x51c>
 8007740:	b10b      	cbz	r3, 8007746 <_strtod_l+0x4de>
 8007742:	4682      	mov	sl, r0
 8007744:	468b      	mov	fp, r1
 8007746:	4b2d      	ldr	r3, [pc, #180]	; (80077fc <_strtod_l+0x594>)
 8007748:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800774c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007750:	4652      	mov	r2, sl
 8007752:	465b      	mov	r3, fp
 8007754:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007758:	f7f8 ff6e 	bl	8000638 <__aeabi_dmul>
 800775c:	4b28      	ldr	r3, [pc, #160]	; (8007800 <_strtod_l+0x598>)
 800775e:	460a      	mov	r2, r1
 8007760:	400b      	ands	r3, r1
 8007762:	4928      	ldr	r1, [pc, #160]	; (8007804 <_strtod_l+0x59c>)
 8007764:	428b      	cmp	r3, r1
 8007766:	4682      	mov	sl, r0
 8007768:	d898      	bhi.n	800769c <_strtod_l+0x434>
 800776a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800776e:	428b      	cmp	r3, r1
 8007770:	bf86      	itte	hi
 8007772:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800780c <_strtod_l+0x5a4>
 8007776:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800777a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800777e:	2300      	movs	r3, #0
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	e077      	b.n	8007874 <_strtod_l+0x60c>
 8007784:	f018 0f01 	tst.w	r8, #1
 8007788:	d006      	beq.n	8007798 <_strtod_l+0x530>
 800778a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 ff51 	bl	8000638 <__aeabi_dmul>
 8007796:	2301      	movs	r3, #1
 8007798:	3501      	adds	r5, #1
 800779a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800779e:	e7cc      	b.n	800773a <_strtod_l+0x4d2>
 80077a0:	d0ed      	beq.n	800777e <_strtod_l+0x516>
 80077a2:	f1c8 0800 	rsb	r8, r8, #0
 80077a6:	f018 020f 	ands.w	r2, r8, #15
 80077aa:	d00a      	beq.n	80077c2 <_strtod_l+0x55a>
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <_strtod_l+0x590>)
 80077ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f9 f867 	bl	800088c <__aeabi_ddiv>
 80077be:	4682      	mov	sl, r0
 80077c0:	468b      	mov	fp, r1
 80077c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80077c6:	d0da      	beq.n	800777e <_strtod_l+0x516>
 80077c8:	f1b8 0f1f 	cmp.w	r8, #31
 80077cc:	dd20      	ble.n	8007810 <_strtod_l+0x5a8>
 80077ce:	2400      	movs	r4, #0
 80077d0:	46a0      	mov	r8, r4
 80077d2:	9407      	str	r4, [sp, #28]
 80077d4:	9405      	str	r4, [sp, #20]
 80077d6:	2322      	movs	r3, #34	; 0x22
 80077d8:	f04f 0a00 	mov.w	sl, #0
 80077dc:	f04f 0b00 	mov.w	fp, #0
 80077e0:	f8c9 3000 	str.w	r3, [r9]
 80077e4:	e765      	b.n	80076b2 <_strtod_l+0x44a>
 80077e6:	bf00      	nop
 80077e8:	0800a53d 	.word	0x0800a53d
 80077ec:	0800a5cb 	.word	0x0800a5cb
 80077f0:	0800a545 	.word	0x0800a545
 80077f4:	0800a588 	.word	0x0800a588
 80077f8:	0800a608 	.word	0x0800a608
 80077fc:	0800a5e0 	.word	0x0800a5e0
 8007800:	7ff00000 	.word	0x7ff00000
 8007804:	7ca00000 	.word	0x7ca00000
 8007808:	fff80000 	.word	0xfff80000
 800780c:	7fefffff 	.word	0x7fefffff
 8007810:	f018 0310 	ands.w	r3, r8, #16
 8007814:	bf18      	it	ne
 8007816:	236a      	movne	r3, #106	; 0x6a
 8007818:	4da0      	ldr	r5, [pc, #640]	; (8007a9c <_strtod_l+0x834>)
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	4650      	mov	r0, sl
 800781e:	4659      	mov	r1, fp
 8007820:	2300      	movs	r3, #0
 8007822:	f1b8 0f00 	cmp.w	r8, #0
 8007826:	f300 810a 	bgt.w	8007a3e <_strtod_l+0x7d6>
 800782a:	b10b      	cbz	r3, 8007830 <_strtod_l+0x5c8>
 800782c:	4682      	mov	sl, r0
 800782e:	468b      	mov	fp, r1
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	b1bb      	cbz	r3, 8007864 <_strtod_l+0x5fc>
 8007834:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007838:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800783c:	2b00      	cmp	r3, #0
 800783e:	4659      	mov	r1, fp
 8007840:	dd10      	ble.n	8007864 <_strtod_l+0x5fc>
 8007842:	2b1f      	cmp	r3, #31
 8007844:	f340 8107 	ble.w	8007a56 <_strtod_l+0x7ee>
 8007848:	2b34      	cmp	r3, #52	; 0x34
 800784a:	bfde      	ittt	le
 800784c:	3b20      	suble	r3, #32
 800784e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007852:	fa02 f303 	lslle.w	r3, r2, r3
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	bfcc      	ite	gt
 800785c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007860:	ea03 0b01 	andle.w	fp, r3, r1
 8007864:	2200      	movs	r2, #0
 8007866:	2300      	movs	r3, #0
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	f7f9 f94c 	bl	8000b08 <__aeabi_dcmpeq>
 8007870:	2800      	cmp	r0, #0
 8007872:	d1ac      	bne.n	80077ce <_strtod_l+0x566>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	9a05      	ldr	r2, [sp, #20]
 800787a:	9908      	ldr	r1, [sp, #32]
 800787c:	4623      	mov	r3, r4
 800787e:	4648      	mov	r0, r9
 8007880:	f001 fda4 	bl	80093cc <__s2b>
 8007884:	9007      	str	r0, [sp, #28]
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f af08 	beq.w	800769c <_strtod_l+0x434>
 800788c:	9a06      	ldr	r2, [sp, #24]
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	2a00      	cmp	r2, #0
 8007892:	f1c3 0300 	rsb	r3, r3, #0
 8007896:	bfa8      	it	ge
 8007898:	2300      	movge	r3, #0
 800789a:	930e      	str	r3, [sp, #56]	; 0x38
 800789c:	2400      	movs	r4, #0
 800789e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078a2:	9316      	str	r3, [sp, #88]	; 0x58
 80078a4:	46a0      	mov	r8, r4
 80078a6:	9b07      	ldr	r3, [sp, #28]
 80078a8:	4648      	mov	r0, r9
 80078aa:	6859      	ldr	r1, [r3, #4]
 80078ac:	f001 fd08 	bl	80092c0 <_Balloc>
 80078b0:	9005      	str	r0, [sp, #20]
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f43f aef6 	beq.w	80076a4 <_strtod_l+0x43c>
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	3202      	adds	r2, #2
 80078be:	f103 010c 	add.w	r1, r3, #12
 80078c2:	0092      	lsls	r2, r2, #2
 80078c4:	300c      	adds	r0, #12
 80078c6:	f7fe fe3b 	bl	8006540 <memcpy>
 80078ca:	aa1e      	add	r2, sp, #120	; 0x78
 80078cc:	a91d      	add	r1, sp, #116	; 0x74
 80078ce:	ec4b ab10 	vmov	d0, sl, fp
 80078d2:	4648      	mov	r0, r9
 80078d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80078d8:	f002 f834 	bl	8009944 <__d2b>
 80078dc:	901c      	str	r0, [sp, #112]	; 0x70
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f aee0 	beq.w	80076a4 <_strtod_l+0x43c>
 80078e4:	2101      	movs	r1, #1
 80078e6:	4648      	mov	r0, r9
 80078e8:	f001 fdfc 	bl	80094e4 <__i2b>
 80078ec:	4680      	mov	r8, r0
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f aed8 	beq.w	80076a4 <_strtod_l+0x43c>
 80078f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80078f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	bfab      	itete	ge
 80078fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80078fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007900:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007902:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007904:	bfac      	ite	ge
 8007906:	18f7      	addge	r7, r6, r3
 8007908:	1b9d      	sublt	r5, r3, r6
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	1af6      	subs	r6, r6, r3
 800790e:	4416      	add	r6, r2
 8007910:	4b63      	ldr	r3, [pc, #396]	; (8007aa0 <_strtod_l+0x838>)
 8007912:	3e01      	subs	r6, #1
 8007914:	429e      	cmp	r6, r3
 8007916:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800791a:	f280 80af 	bge.w	8007a7c <_strtod_l+0x814>
 800791e:	1b9b      	subs	r3, r3, r6
 8007920:	2b1f      	cmp	r3, #31
 8007922:	eba2 0203 	sub.w	r2, r2, r3
 8007926:	f04f 0101 	mov.w	r1, #1
 800792a:	f300 809b 	bgt.w	8007a64 <_strtod_l+0x7fc>
 800792e:	fa01 f303 	lsl.w	r3, r1, r3
 8007932:	930f      	str	r3, [sp, #60]	; 0x3c
 8007934:	2300      	movs	r3, #0
 8007936:	930a      	str	r3, [sp, #40]	; 0x28
 8007938:	18be      	adds	r6, r7, r2
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	42b7      	cmp	r7, r6
 800793e:	4415      	add	r5, r2
 8007940:	441d      	add	r5, r3
 8007942:	463b      	mov	r3, r7
 8007944:	bfa8      	it	ge
 8007946:	4633      	movge	r3, r6
 8007948:	42ab      	cmp	r3, r5
 800794a:	bfa8      	it	ge
 800794c:	462b      	movge	r3, r5
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfc2      	ittt	gt
 8007952:	1af6      	subgt	r6, r6, r3
 8007954:	1aed      	subgt	r5, r5, r3
 8007956:	1aff      	subgt	r7, r7, r3
 8007958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800795a:	b1bb      	cbz	r3, 800798c <_strtod_l+0x724>
 800795c:	4641      	mov	r1, r8
 800795e:	461a      	mov	r2, r3
 8007960:	4648      	mov	r0, r9
 8007962:	f001 fe5f 	bl	8009624 <__pow5mult>
 8007966:	4680      	mov	r8, r0
 8007968:	2800      	cmp	r0, #0
 800796a:	f43f ae9b 	beq.w	80076a4 <_strtod_l+0x43c>
 800796e:	4601      	mov	r1, r0
 8007970:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007972:	4648      	mov	r0, r9
 8007974:	f001 fdbf 	bl	80094f6 <__multiply>
 8007978:	900c      	str	r0, [sp, #48]	; 0x30
 800797a:	2800      	cmp	r0, #0
 800797c:	f43f ae92 	beq.w	80076a4 <_strtod_l+0x43c>
 8007980:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007982:	4648      	mov	r0, r9
 8007984:	f001 fcd0 	bl	8009328 <_Bfree>
 8007988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800798a:	931c      	str	r3, [sp, #112]	; 0x70
 800798c:	2e00      	cmp	r6, #0
 800798e:	dc7a      	bgt.n	8007a86 <_strtod_l+0x81e>
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dd08      	ble.n	80079a8 <_strtod_l+0x740>
 8007996:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007998:	9905      	ldr	r1, [sp, #20]
 800799a:	4648      	mov	r0, r9
 800799c:	f001 fe42 	bl	8009624 <__pow5mult>
 80079a0:	9005      	str	r0, [sp, #20]
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f43f ae7e 	beq.w	80076a4 <_strtod_l+0x43c>
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	dd08      	ble.n	80079be <_strtod_l+0x756>
 80079ac:	462a      	mov	r2, r5
 80079ae:	9905      	ldr	r1, [sp, #20]
 80079b0:	4648      	mov	r0, r9
 80079b2:	f001 fe85 	bl	80096c0 <__lshift>
 80079b6:	9005      	str	r0, [sp, #20]
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f43f ae73 	beq.w	80076a4 <_strtod_l+0x43c>
 80079be:	2f00      	cmp	r7, #0
 80079c0:	dd08      	ble.n	80079d4 <_strtod_l+0x76c>
 80079c2:	4641      	mov	r1, r8
 80079c4:	463a      	mov	r2, r7
 80079c6:	4648      	mov	r0, r9
 80079c8:	f001 fe7a 	bl	80096c0 <__lshift>
 80079cc:	4680      	mov	r8, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f ae68 	beq.w	80076a4 <_strtod_l+0x43c>
 80079d4:	9a05      	ldr	r2, [sp, #20]
 80079d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079d8:	4648      	mov	r0, r9
 80079da:	f001 fedf 	bl	800979c <__mdiff>
 80079de:	4604      	mov	r4, r0
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f43f ae5f 	beq.w	80076a4 <_strtod_l+0x43c>
 80079e6:	68c3      	ldr	r3, [r0, #12]
 80079e8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ea:	2300      	movs	r3, #0
 80079ec:	60c3      	str	r3, [r0, #12]
 80079ee:	4641      	mov	r1, r8
 80079f0:	f001 feba 	bl	8009768 <__mcmp>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	da55      	bge.n	8007aa4 <_strtod_l+0x83c>
 80079f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079fa:	b9e3      	cbnz	r3, 8007a36 <_strtod_l+0x7ce>
 80079fc:	f1ba 0f00 	cmp.w	sl, #0
 8007a00:	d119      	bne.n	8007a36 <_strtod_l+0x7ce>
 8007a02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a06:	b9b3      	cbnz	r3, 8007a36 <_strtod_l+0x7ce>
 8007a08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a0c:	0d1b      	lsrs	r3, r3, #20
 8007a0e:	051b      	lsls	r3, r3, #20
 8007a10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a14:	d90f      	bls.n	8007a36 <_strtod_l+0x7ce>
 8007a16:	6963      	ldr	r3, [r4, #20]
 8007a18:	b913      	cbnz	r3, 8007a20 <_strtod_l+0x7b8>
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	dd0a      	ble.n	8007a36 <_strtod_l+0x7ce>
 8007a20:	4621      	mov	r1, r4
 8007a22:	2201      	movs	r2, #1
 8007a24:	4648      	mov	r0, r9
 8007a26:	f001 fe4b 	bl	80096c0 <__lshift>
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	f001 fe9b 	bl	8009768 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	dc67      	bgt.n	8007b06 <_strtod_l+0x89e>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d171      	bne.n	8007b20 <_strtod_l+0x8b8>
 8007a3c:	e63d      	b.n	80076ba <_strtod_l+0x452>
 8007a3e:	f018 0f01 	tst.w	r8, #1
 8007a42:	d004      	beq.n	8007a4e <_strtod_l+0x7e6>
 8007a44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a48:	f7f8 fdf6 	bl	8000638 <__aeabi_dmul>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a52:	3508      	adds	r5, #8
 8007a54:	e6e5      	b.n	8007822 <_strtod_l+0x5ba>
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	ea03 0a0a 	and.w	sl, r3, sl
 8007a62:	e6ff      	b.n	8007864 <_strtod_l+0x5fc>
 8007a64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007a68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007a6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007a70:	36e2      	adds	r6, #226	; 0xe2
 8007a72:	fa01 f306 	lsl.w	r3, r1, r6
 8007a76:	930a      	str	r3, [sp, #40]	; 0x28
 8007a78:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a7a:	e75d      	b.n	8007938 <_strtod_l+0x6d0>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a80:	2301      	movs	r3, #1
 8007a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a84:	e758      	b.n	8007938 <_strtod_l+0x6d0>
 8007a86:	4632      	mov	r2, r6
 8007a88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f001 fe18 	bl	80096c0 <__lshift>
 8007a90:	901c      	str	r0, [sp, #112]	; 0x70
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f47f af7c 	bne.w	8007990 <_strtod_l+0x728>
 8007a98:	e604      	b.n	80076a4 <_strtod_l+0x43c>
 8007a9a:	bf00      	nop
 8007a9c:	0800a5a0 	.word	0x0800a5a0
 8007aa0:	fffffc02 	.word	0xfffffc02
 8007aa4:	465d      	mov	r5, fp
 8007aa6:	f040 8086 	bne.w	8007bb6 <_strtod_l+0x94e>
 8007aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ab0:	b32a      	cbz	r2, 8007afe <_strtod_l+0x896>
 8007ab2:	4aaf      	ldr	r2, [pc, #700]	; (8007d70 <_strtod_l+0xb08>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d153      	bne.n	8007b60 <_strtod_l+0x8f8>
 8007ab8:	9b04      	ldr	r3, [sp, #16]
 8007aba:	4650      	mov	r0, sl
 8007abc:	b1d3      	cbz	r3, 8007af4 <_strtod_l+0x88c>
 8007abe:	4aad      	ldr	r2, [pc, #692]	; (8007d74 <_strtod_l+0xb0c>)
 8007ac0:	402a      	ands	r2, r5
 8007ac2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007ac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aca:	d816      	bhi.n	8007afa <_strtod_l+0x892>
 8007acc:	0d12      	lsrs	r2, r2, #20
 8007ace:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad6:	4298      	cmp	r0, r3
 8007ad8:	d142      	bne.n	8007b60 <_strtod_l+0x8f8>
 8007ada:	4ba7      	ldr	r3, [pc, #668]	; (8007d78 <_strtod_l+0xb10>)
 8007adc:	429d      	cmp	r5, r3
 8007ade:	d102      	bne.n	8007ae6 <_strtod_l+0x87e>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f43f addf 	beq.w	80076a4 <_strtod_l+0x43c>
 8007ae6:	4ba3      	ldr	r3, [pc, #652]	; (8007d74 <_strtod_l+0xb0c>)
 8007ae8:	402b      	ands	r3, r5
 8007aea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007aee:	f04f 0a00 	mov.w	sl, #0
 8007af2:	e7a0      	b.n	8007a36 <_strtod_l+0x7ce>
 8007af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af8:	e7ed      	b.n	8007ad6 <_strtod_l+0x86e>
 8007afa:	460b      	mov	r3, r1
 8007afc:	e7eb      	b.n	8007ad6 <_strtod_l+0x86e>
 8007afe:	bb7b      	cbnz	r3, 8007b60 <_strtod_l+0x8f8>
 8007b00:	f1ba 0f00 	cmp.w	sl, #0
 8007b04:	d12c      	bne.n	8007b60 <_strtod_l+0x8f8>
 8007b06:	9904      	ldr	r1, [sp, #16]
 8007b08:	4a9a      	ldr	r2, [pc, #616]	; (8007d74 <_strtod_l+0xb0c>)
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	b1f1      	cbz	r1, 8007b4c <_strtod_l+0x8e4>
 8007b0e:	ea02 010b 	and.w	r1, r2, fp
 8007b12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b16:	dc19      	bgt.n	8007b4c <_strtod_l+0x8e4>
 8007b18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b1c:	f77f ae5b 	ble.w	80077d6 <_strtod_l+0x56e>
 8007b20:	4a96      	ldr	r2, [pc, #600]	; (8007d7c <_strtod_l+0xb14>)
 8007b22:	2300      	movs	r3, #0
 8007b24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b30:	f7f8 fd82 	bl	8000638 <__aeabi_dmul>
 8007b34:	4682      	mov	sl, r0
 8007b36:	468b      	mov	fp, r1
 8007b38:	2900      	cmp	r1, #0
 8007b3a:	f47f adbe 	bne.w	80076ba <_strtod_l+0x452>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f47f adbb 	bne.w	80076ba <_strtod_l+0x452>
 8007b44:	2322      	movs	r3, #34	; 0x22
 8007b46:	f8c9 3000 	str.w	r3, [r9]
 8007b4a:	e5b6      	b.n	80076ba <_strtod_l+0x452>
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b5a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b5e:	e76a      	b.n	8007a36 <_strtod_l+0x7ce>
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	b193      	cbz	r3, 8007b8a <_strtod_l+0x922>
 8007b64:	422b      	tst	r3, r5
 8007b66:	f43f af66 	beq.w	8007a36 <_strtod_l+0x7ce>
 8007b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6c:	9a04      	ldr	r2, [sp, #16]
 8007b6e:	4650      	mov	r0, sl
 8007b70:	4659      	mov	r1, fp
 8007b72:	b173      	cbz	r3, 8007b92 <_strtod_l+0x92a>
 8007b74:	f7ff fb5c 	bl	8007230 <sulp>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b80:	f7f8 fba4 	bl	80002cc <__adddf3>
 8007b84:	4682      	mov	sl, r0
 8007b86:	468b      	mov	fp, r1
 8007b88:	e755      	b.n	8007a36 <_strtod_l+0x7ce>
 8007b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b8c:	ea13 0f0a 	tst.w	r3, sl
 8007b90:	e7e9      	b.n	8007b66 <_strtod_l+0x8fe>
 8007b92:	f7ff fb4d 	bl	8007230 <sulp>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b9e:	f7f8 fb93 	bl	80002c8 <__aeabi_dsub>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4682      	mov	sl, r0
 8007ba8:	468b      	mov	fp, r1
 8007baa:	f7f8 ffad 	bl	8000b08 <__aeabi_dcmpeq>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f47f ae11 	bne.w	80077d6 <_strtod_l+0x56e>
 8007bb4:	e73f      	b.n	8007a36 <_strtod_l+0x7ce>
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f001 ff12 	bl	80099e2 <__ratio>
 8007bbe:	ec57 6b10 	vmov	r6, r7, d0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bc8:	ee10 0a10 	vmov	r0, s0
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 ffaf 	bl	8000b30 <__aeabi_dcmple>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d077      	beq.n	8007cc6 <_strtod_l+0xa5e>
 8007bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d04a      	beq.n	8007c72 <_strtod_l+0xa0a>
 8007bdc:	4b68      	ldr	r3, [pc, #416]	; (8007d80 <_strtod_l+0xb18>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007be4:	4f66      	ldr	r7, [pc, #408]	; (8007d80 <_strtod_l+0xb18>)
 8007be6:	2600      	movs	r6, #0
 8007be8:	4b62      	ldr	r3, [pc, #392]	; (8007d74 <_strtod_l+0xb0c>)
 8007bea:	402b      	ands	r3, r5
 8007bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bf0:	4b64      	ldr	r3, [pc, #400]	; (8007d84 <_strtod_l+0xb1c>)
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	f040 80ce 	bne.w	8007d94 <_strtod_l+0xb2c>
 8007bf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007c04:	ec4b ab10 	vmov	d0, sl, fp
 8007c08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c10:	f001 fe22 	bl	8009858 <__ulp>
 8007c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c18:	ec53 2b10 	vmov	r2, r3, d0
 8007c1c:	f7f8 fd0c 	bl	8000638 <__aeabi_dmul>
 8007c20:	4652      	mov	r2, sl
 8007c22:	465b      	mov	r3, fp
 8007c24:	f7f8 fb52 	bl	80002cc <__adddf3>
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4952      	ldr	r1, [pc, #328]	; (8007d74 <_strtod_l+0xb0c>)
 8007c2c:	4a56      	ldr	r2, [pc, #344]	; (8007d88 <_strtod_l+0xb20>)
 8007c2e:	4019      	ands	r1, r3
 8007c30:	4291      	cmp	r1, r2
 8007c32:	4682      	mov	sl, r0
 8007c34:	d95b      	bls.n	8007cee <_strtod_l+0xa86>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d103      	bne.n	8007c48 <_strtod_l+0x9e0>
 8007c40:	9b08      	ldr	r3, [sp, #32]
 8007c42:	3301      	adds	r3, #1
 8007c44:	f43f ad2e 	beq.w	80076a4 <_strtod_l+0x43c>
 8007c48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007d78 <_strtod_l+0xb10>
 8007c4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c52:	4648      	mov	r0, r9
 8007c54:	f001 fb68 	bl	8009328 <_Bfree>
 8007c58:	9905      	ldr	r1, [sp, #20]
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f001 fb64 	bl	8009328 <_Bfree>
 8007c60:	4641      	mov	r1, r8
 8007c62:	4648      	mov	r0, r9
 8007c64:	f001 fb60 	bl	8009328 <_Bfree>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4648      	mov	r0, r9
 8007c6c:	f001 fb5c 	bl	8009328 <_Bfree>
 8007c70:	e619      	b.n	80078a6 <_strtod_l+0x63e>
 8007c72:	f1ba 0f00 	cmp.w	sl, #0
 8007c76:	d11a      	bne.n	8007cae <_strtod_l+0xa46>
 8007c78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7c:	b9eb      	cbnz	r3, 8007cba <_strtod_l+0xa52>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <_strtod_l+0xb18>)
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 ff49 	bl	8000b1c <__aeabi_dcmplt>
 8007c8a:	b9c8      	cbnz	r0, 8007cc0 <_strtod_l+0xa58>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	2200      	movs	r2, #0
 8007c92:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <_strtod_l+0xb24>)
 8007c94:	f7f8 fcd0 	bl	8000638 <__aeabi_dmul>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	460f      	mov	r7, r1
 8007c9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ca0:	9618      	str	r6, [sp, #96]	; 0x60
 8007ca2:	9319      	str	r3, [sp, #100]	; 0x64
 8007ca4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007ca8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007cac:	e79c      	b.n	8007be8 <_strtod_l+0x980>
 8007cae:	f1ba 0f01 	cmp.w	sl, #1
 8007cb2:	d102      	bne.n	8007cba <_strtod_l+0xa52>
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	f43f ad8e 	beq.w	80077d6 <_strtod_l+0x56e>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4b34      	ldr	r3, [pc, #208]	; (8007d90 <_strtod_l+0xb28>)
 8007cbe:	e78f      	b.n	8007be0 <_strtod_l+0x978>
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	4f32      	ldr	r7, [pc, #200]	; (8007d8c <_strtod_l+0xb24>)
 8007cc4:	e7ea      	b.n	8007c9c <_strtod_l+0xa34>
 8007cc6:	4b31      	ldr	r3, [pc, #196]	; (8007d8c <_strtod_l+0xb24>)
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f7f8 fcb3 	bl	8000638 <__aeabi_dmul>
 8007cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	b933      	cbnz	r3, 8007ce8 <_strtod_l+0xa80>
 8007cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cde:	9010      	str	r0, [sp, #64]	; 0x40
 8007ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8007ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ce6:	e7df      	b.n	8007ca8 <_strtod_l+0xa40>
 8007ce8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007cec:	e7f9      	b.n	8007ce2 <_strtod_l+0xa7a>
 8007cee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1ab      	bne.n	8007c50 <_strtod_l+0x9e8>
 8007cf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cfc:	0d1b      	lsrs	r3, r3, #20
 8007cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d00:	051b      	lsls	r3, r3, #20
 8007d02:	429a      	cmp	r2, r3
 8007d04:	465d      	mov	r5, fp
 8007d06:	d1a3      	bne.n	8007c50 <_strtod_l+0x9e8>
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7f8 ff44 	bl	8000b98 <__aeabi_d2iz>
 8007d10:	f7f8 fc28 	bl	8000564 <__aeabi_i2d>
 8007d14:	460b      	mov	r3, r1
 8007d16:	4602      	mov	r2, r0
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7f8 fad4 	bl	80002c8 <__aeabi_dsub>
 8007d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	b933      	cbnz	r3, 8007d36 <_strtod_l+0xace>
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	d103      	bne.n	8007d36 <_strtod_l+0xace>
 8007d2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	d06d      	beq.n	8007e12 <_strtod_l+0xbaa>
 8007d36:	a30a      	add	r3, pc, #40	; (adr r3, 8007d60 <_strtod_l+0xaf8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4639      	mov	r1, r7
 8007d40:	f7f8 feec 	bl	8000b1c <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f47f acb8 	bne.w	80076ba <_strtod_l+0x452>
 8007d4a:	a307      	add	r3, pc, #28	; (adr r3, 8007d68 <_strtod_l+0xb00>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	f43f af79 	beq.w	8007c50 <_strtod_l+0x9e8>
 8007d5e:	e4ac      	b.n	80076ba <_strtod_l+0x452>
 8007d60:	94a03595 	.word	0x94a03595
 8007d64:	3fdfffff 	.word	0x3fdfffff
 8007d68:	35afe535 	.word	0x35afe535
 8007d6c:	3fe00000 	.word	0x3fe00000
 8007d70:	000fffff 	.word	0x000fffff
 8007d74:	7ff00000 	.word	0x7ff00000
 8007d78:	7fefffff 	.word	0x7fefffff
 8007d7c:	39500000 	.word	0x39500000
 8007d80:	3ff00000 	.word	0x3ff00000
 8007d84:	7fe00000 	.word	0x7fe00000
 8007d88:	7c9fffff 	.word	0x7c9fffff
 8007d8c:	3fe00000 	.word	0x3fe00000
 8007d90:	bff00000 	.word	0xbff00000
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	b333      	cbz	r3, 8007de6 <_strtod_l+0xb7e>
 8007d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d9e:	d822      	bhi.n	8007de6 <_strtod_l+0xb7e>
 8007da0:	a327      	add	r3, pc, #156	; (adr r3, 8007e40 <_strtod_l+0xbd8>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	4630      	mov	r0, r6
 8007da8:	4639      	mov	r1, r7
 8007daa:	f7f8 fec1 	bl	8000b30 <__aeabi_dcmple>
 8007dae:	b1a0      	cbz	r0, 8007dda <_strtod_l+0xb72>
 8007db0:	4639      	mov	r1, r7
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7f8 ff18 	bl	8000be8 <__aeabi_d2uiz>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	bf08      	it	eq
 8007dbc:	2001      	moveq	r0, #1
 8007dbe:	f7f8 fbc1 	bl	8000544 <__aeabi_ui2d>
 8007dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	bb03      	cbnz	r3, 8007e0c <_strtod_l+0xba4>
 8007dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dce:	9012      	str	r0, [sp, #72]	; 0x48
 8007dd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007dd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dde:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007de6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007dea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007dee:	f001 fd33 	bl	8009858 <__ulp>
 8007df2:	4650      	mov	r0, sl
 8007df4:	ec53 2b10 	vmov	r2, r3, d0
 8007df8:	4659      	mov	r1, fp
 8007dfa:	f7f8 fc1d 	bl	8000638 <__aeabi_dmul>
 8007dfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e02:	f7f8 fa63 	bl	80002cc <__adddf3>
 8007e06:	4682      	mov	sl, r0
 8007e08:	468b      	mov	fp, r1
 8007e0a:	e772      	b.n	8007cf2 <_strtod_l+0xa8a>
 8007e0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007e10:	e7df      	b.n	8007dd2 <_strtod_l+0xb6a>
 8007e12:	a30d      	add	r3, pc, #52	; (adr r3, 8007e48 <_strtod_l+0xbe0>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 fe80 	bl	8000b1c <__aeabi_dcmplt>
 8007e1c:	e79c      	b.n	8007d58 <_strtod_l+0xaf0>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	930d      	str	r3, [sp, #52]	; 0x34
 8007e22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	f7ff ba61 	b.w	80072ee <_strtod_l+0x86>
 8007e2c:	2b65      	cmp	r3, #101	; 0x65
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f43f ab4e 	beq.w	80074d2 <_strtod_l+0x26a>
 8007e36:	2101      	movs	r1, #1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	9104      	str	r1, [sp, #16]
 8007e3c:	f7ff bacb 	b.w	80073d6 <_strtod_l+0x16e>
 8007e40:	ffc00000 	.word	0xffc00000
 8007e44:	41dfffff 	.word	0x41dfffff
 8007e48:	94a03595 	.word	0x94a03595
 8007e4c:	3fcfffff 	.word	0x3fcfffff

08007e50 <_strtod_r>:
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <_strtod_r+0x18>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	b410      	push	{r4}
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	4c04      	ldr	r4, [pc, #16]	; (8007e6c <_strtod_r+0x1c>)
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bf08      	it	eq
 8007e5e:	4623      	moveq	r3, r4
 8007e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e64:	f7ff ba00 	b.w	8007268 <_strtod_l>
 8007e68:	20000018 	.word	0x20000018
 8007e6c:	2000007c 	.word	0x2000007c

08007e70 <_strtol_l.isra.0>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	4680      	mov	r8, r0
 8007e76:	4689      	mov	r9, r1
 8007e78:	4692      	mov	sl, r2
 8007e7a:	461e      	mov	r6, r3
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	463d      	mov	r5, r7
 8007e80:	9808      	ldr	r0, [sp, #32]
 8007e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e86:	f001 f9ed 	bl	8009264 <__locale_ctype_ptr_l>
 8007e8a:	4420      	add	r0, r4
 8007e8c:	7843      	ldrb	r3, [r0, #1]
 8007e8e:	f013 0308 	ands.w	r3, r3, #8
 8007e92:	d132      	bne.n	8007efa <_strtol_l.isra.0+0x8a>
 8007e94:	2c2d      	cmp	r4, #45	; 0x2d
 8007e96:	d132      	bne.n	8007efe <_strtol_l.isra.0+0x8e>
 8007e98:	787c      	ldrb	r4, [r7, #1]
 8007e9a:	1cbd      	adds	r5, r7, #2
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d05d      	beq.n	8007f5e <_strtol_l.isra.0+0xee>
 8007ea2:	2e10      	cmp	r6, #16
 8007ea4:	d109      	bne.n	8007eba <_strtol_l.isra.0+0x4a>
 8007ea6:	2c30      	cmp	r4, #48	; 0x30
 8007ea8:	d107      	bne.n	8007eba <_strtol_l.isra.0+0x4a>
 8007eaa:	782b      	ldrb	r3, [r5, #0]
 8007eac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007eb0:	2b58      	cmp	r3, #88	; 0x58
 8007eb2:	d14f      	bne.n	8007f54 <_strtol_l.isra.0+0xe4>
 8007eb4:	786c      	ldrb	r4, [r5, #1]
 8007eb6:	2610      	movs	r6, #16
 8007eb8:	3502      	adds	r5, #2
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	bf14      	ite	ne
 8007ebe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007ec2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007ec6:	2700      	movs	r7, #0
 8007ec8:	fbb1 fcf6 	udiv	ip, r1, r6
 8007ecc:	4638      	mov	r0, r7
 8007ece:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007ed2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d817      	bhi.n	8007f0a <_strtol_l.isra.0+0x9a>
 8007eda:	461c      	mov	r4, r3
 8007edc:	42a6      	cmp	r6, r4
 8007ede:	dd23      	ble.n	8007f28 <_strtol_l.isra.0+0xb8>
 8007ee0:	1c7b      	adds	r3, r7, #1
 8007ee2:	d007      	beq.n	8007ef4 <_strtol_l.isra.0+0x84>
 8007ee4:	4584      	cmp	ip, r0
 8007ee6:	d31c      	bcc.n	8007f22 <_strtol_l.isra.0+0xb2>
 8007ee8:	d101      	bne.n	8007eee <_strtol_l.isra.0+0x7e>
 8007eea:	45a6      	cmp	lr, r4
 8007eec:	db19      	blt.n	8007f22 <_strtol_l.isra.0+0xb2>
 8007eee:	fb00 4006 	mla	r0, r0, r6, r4
 8007ef2:	2701      	movs	r7, #1
 8007ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ef8:	e7eb      	b.n	8007ed2 <_strtol_l.isra.0+0x62>
 8007efa:	462f      	mov	r7, r5
 8007efc:	e7bf      	b.n	8007e7e <_strtol_l.isra.0+0xe>
 8007efe:	2c2b      	cmp	r4, #43	; 0x2b
 8007f00:	bf04      	itt	eq
 8007f02:	1cbd      	addeq	r5, r7, #2
 8007f04:	787c      	ldrbeq	r4, [r7, #1]
 8007f06:	461a      	mov	r2, r3
 8007f08:	e7c9      	b.n	8007e9e <_strtol_l.isra.0+0x2e>
 8007f0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007f0e:	2b19      	cmp	r3, #25
 8007f10:	d801      	bhi.n	8007f16 <_strtol_l.isra.0+0xa6>
 8007f12:	3c37      	subs	r4, #55	; 0x37
 8007f14:	e7e2      	b.n	8007edc <_strtol_l.isra.0+0x6c>
 8007f16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007f1a:	2b19      	cmp	r3, #25
 8007f1c:	d804      	bhi.n	8007f28 <_strtol_l.isra.0+0xb8>
 8007f1e:	3c57      	subs	r4, #87	; 0x57
 8007f20:	e7dc      	b.n	8007edc <_strtol_l.isra.0+0x6c>
 8007f22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f26:	e7e5      	b.n	8007ef4 <_strtol_l.isra.0+0x84>
 8007f28:	1c7b      	adds	r3, r7, #1
 8007f2a:	d108      	bne.n	8007f3e <_strtol_l.isra.0+0xce>
 8007f2c:	2322      	movs	r3, #34	; 0x22
 8007f2e:	f8c8 3000 	str.w	r3, [r8]
 8007f32:	4608      	mov	r0, r1
 8007f34:	f1ba 0f00 	cmp.w	sl, #0
 8007f38:	d107      	bne.n	8007f4a <_strtol_l.isra.0+0xda>
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	b102      	cbz	r2, 8007f42 <_strtol_l.isra.0+0xd2>
 8007f40:	4240      	negs	r0, r0
 8007f42:	f1ba 0f00 	cmp.w	sl, #0
 8007f46:	d0f8      	beq.n	8007f3a <_strtol_l.isra.0+0xca>
 8007f48:	b10f      	cbz	r7, 8007f4e <_strtol_l.isra.0+0xde>
 8007f4a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007f4e:	f8ca 9000 	str.w	r9, [sl]
 8007f52:	e7f2      	b.n	8007f3a <_strtol_l.isra.0+0xca>
 8007f54:	2430      	movs	r4, #48	; 0x30
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	d1af      	bne.n	8007eba <_strtol_l.isra.0+0x4a>
 8007f5a:	2608      	movs	r6, #8
 8007f5c:	e7ad      	b.n	8007eba <_strtol_l.isra.0+0x4a>
 8007f5e:	2c30      	cmp	r4, #48	; 0x30
 8007f60:	d0a3      	beq.n	8007eaa <_strtol_l.isra.0+0x3a>
 8007f62:	260a      	movs	r6, #10
 8007f64:	e7a9      	b.n	8007eba <_strtol_l.isra.0+0x4a>
	...

08007f68 <_strtol_r>:
 8007f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f6a:	4c06      	ldr	r4, [pc, #24]	; (8007f84 <_strtol_r+0x1c>)
 8007f6c:	4d06      	ldr	r5, [pc, #24]	; (8007f88 <_strtol_r+0x20>)
 8007f6e:	6824      	ldr	r4, [r4, #0]
 8007f70:	6a24      	ldr	r4, [r4, #32]
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	bf08      	it	eq
 8007f76:	462c      	moveq	r4, r5
 8007f78:	9400      	str	r4, [sp, #0]
 8007f7a:	f7ff ff79 	bl	8007e70 <_strtol_l.isra.0>
 8007f7e:	b003      	add	sp, #12
 8007f80:	bd30      	pop	{r4, r5, pc}
 8007f82:	bf00      	nop
 8007f84:	20000018 	.word	0x20000018
 8007f88:	2000007c 	.word	0x2000007c

08007f8c <quorem>:
 8007f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	6903      	ldr	r3, [r0, #16]
 8007f92:	690c      	ldr	r4, [r1, #16]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	4680      	mov	r8, r0
 8007f98:	f2c0 8082 	blt.w	80080a0 <quorem+0x114>
 8007f9c:	3c01      	subs	r4, #1
 8007f9e:	f101 0714 	add.w	r7, r1, #20
 8007fa2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007fa6:	f100 0614 	add.w	r6, r0, #20
 8007faa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007fae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007fb2:	eb06 030c 	add.w	r3, r6, ip
 8007fb6:	3501      	adds	r5, #1
 8007fb8:	eb07 090c 	add.w	r9, r7, ip
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	fbb0 f5f5 	udiv	r5, r0, r5
 8007fc2:	b395      	cbz	r5, 800802a <quorem+0x9e>
 8007fc4:	f04f 0a00 	mov.w	sl, #0
 8007fc8:	4638      	mov	r0, r7
 8007fca:	46b6      	mov	lr, r6
 8007fcc:	46d3      	mov	fp, sl
 8007fce:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fd2:	b293      	uxth	r3, r2
 8007fd4:	fb05 a303 	mla	r3, r5, r3, sl
 8007fd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	ebab 0303 	sub.w	r3, fp, r3
 8007fe2:	0c12      	lsrs	r2, r2, #16
 8007fe4:	f8de b000 	ldr.w	fp, [lr]
 8007fe8:	fb05 a202 	mla	r2, r5, r2, sl
 8007fec:	fa13 f38b 	uxtah	r3, r3, fp
 8007ff0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ff4:	fa1f fb82 	uxth.w	fp, r2
 8007ff8:	f8de 2000 	ldr.w	r2, [lr]
 8007ffc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800a:	4581      	cmp	r9, r0
 800800c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008010:	f84e 3b04 	str.w	r3, [lr], #4
 8008014:	d2db      	bcs.n	8007fce <quorem+0x42>
 8008016:	f856 300c 	ldr.w	r3, [r6, ip]
 800801a:	b933      	cbnz	r3, 800802a <quorem+0x9e>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	3b04      	subs	r3, #4
 8008020:	429e      	cmp	r6, r3
 8008022:	461a      	mov	r2, r3
 8008024:	d330      	bcc.n	8008088 <quorem+0xfc>
 8008026:	f8c8 4010 	str.w	r4, [r8, #16]
 800802a:	4640      	mov	r0, r8
 800802c:	f001 fb9c 	bl	8009768 <__mcmp>
 8008030:	2800      	cmp	r0, #0
 8008032:	db25      	blt.n	8008080 <quorem+0xf4>
 8008034:	3501      	adds	r5, #1
 8008036:	4630      	mov	r0, r6
 8008038:	f04f 0c00 	mov.w	ip, #0
 800803c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008040:	f8d0 e000 	ldr.w	lr, [r0]
 8008044:	b293      	uxth	r3, r2
 8008046:	ebac 0303 	sub.w	r3, ip, r3
 800804a:	0c12      	lsrs	r2, r2, #16
 800804c:	fa13 f38e 	uxtah	r3, r3, lr
 8008050:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008058:	b29b      	uxth	r3, r3
 800805a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800805e:	45b9      	cmp	r9, r7
 8008060:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008064:	f840 3b04 	str.w	r3, [r0], #4
 8008068:	d2e8      	bcs.n	800803c <quorem+0xb0>
 800806a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800806e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008072:	b92a      	cbnz	r2, 8008080 <quorem+0xf4>
 8008074:	3b04      	subs	r3, #4
 8008076:	429e      	cmp	r6, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d30b      	bcc.n	8008094 <quorem+0x108>
 800807c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008080:	4628      	mov	r0, r5
 8008082:	b003      	add	sp, #12
 8008084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	3b04      	subs	r3, #4
 800808c:	2a00      	cmp	r2, #0
 800808e:	d1ca      	bne.n	8008026 <quorem+0x9a>
 8008090:	3c01      	subs	r4, #1
 8008092:	e7c5      	b.n	8008020 <quorem+0x94>
 8008094:	6812      	ldr	r2, [r2, #0]
 8008096:	3b04      	subs	r3, #4
 8008098:	2a00      	cmp	r2, #0
 800809a:	d1ef      	bne.n	800807c <quorem+0xf0>
 800809c:	3c01      	subs	r4, #1
 800809e:	e7ea      	b.n	8008076 <quorem+0xea>
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7ee      	b.n	8008082 <quorem+0xf6>
 80080a4:	0000      	movs	r0, r0
	...

080080a8 <_dtoa_r>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	ec57 6b10 	vmov	r6, r7, d0
 80080b0:	b097      	sub	sp, #92	; 0x5c
 80080b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080b4:	9106      	str	r1, [sp, #24]
 80080b6:	4604      	mov	r4, r0
 80080b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80080ba:	9312      	str	r3, [sp, #72]	; 0x48
 80080bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080c0:	e9cd 6700 	strd	r6, r7, [sp]
 80080c4:	b93d      	cbnz	r5, 80080d6 <_dtoa_r+0x2e>
 80080c6:	2010      	movs	r0, #16
 80080c8:	f001 f8e0 	bl	800928c <malloc>
 80080cc:	6260      	str	r0, [r4, #36]	; 0x24
 80080ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080d2:	6005      	str	r5, [r0, #0]
 80080d4:	60c5      	str	r5, [r0, #12]
 80080d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d8:	6819      	ldr	r1, [r3, #0]
 80080da:	b151      	cbz	r1, 80080f2 <_dtoa_r+0x4a>
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	604a      	str	r2, [r1, #4]
 80080e0:	2301      	movs	r3, #1
 80080e2:	4093      	lsls	r3, r2
 80080e4:	608b      	str	r3, [r1, #8]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f001 f91e 	bl	8009328 <_Bfree>
 80080ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	1e3b      	subs	r3, r7, #0
 80080f4:	bfbb      	ittet	lt
 80080f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080fa:	9301      	strlt	r3, [sp, #4]
 80080fc:	2300      	movge	r3, #0
 80080fe:	2201      	movlt	r2, #1
 8008100:	bfac      	ite	ge
 8008102:	f8c8 3000 	strge.w	r3, [r8]
 8008106:	f8c8 2000 	strlt.w	r2, [r8]
 800810a:	4baf      	ldr	r3, [pc, #700]	; (80083c8 <_dtoa_r+0x320>)
 800810c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008110:	ea33 0308 	bics.w	r3, r3, r8
 8008114:	d114      	bne.n	8008140 <_dtoa_r+0x98>
 8008116:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008118:	f242 730f 	movw	r3, #9999	; 0x270f
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	b923      	cbnz	r3, 800812c <_dtoa_r+0x84>
 8008122:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008126:	2800      	cmp	r0, #0
 8008128:	f000 8542 	beq.w	8008bb0 <_dtoa_r+0xb08>
 800812c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800812e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80083dc <_dtoa_r+0x334>
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8544 	beq.w	8008bc0 <_dtoa_r+0xb18>
 8008138:	f10b 0303 	add.w	r3, fp, #3
 800813c:	f000 bd3e 	b.w	8008bbc <_dtoa_r+0xb14>
 8008140:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8008150:	4681      	mov	r9, r0
 8008152:	b168      	cbz	r0, 8008170 <_dtoa_r+0xc8>
 8008154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008156:	2301      	movs	r3, #1
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8524 	beq.w	8008baa <_dtoa_r+0xb02>
 8008162:	4b9a      	ldr	r3, [pc, #616]	; (80083cc <_dtoa_r+0x324>)
 8008164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008166:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	f000 bd28 	b.w	8008bc0 <_dtoa_r+0xb18>
 8008170:	aa14      	add	r2, sp, #80	; 0x50
 8008172:	a915      	add	r1, sp, #84	; 0x54
 8008174:	ec47 6b10 	vmov	d0, r6, r7
 8008178:	4620      	mov	r0, r4
 800817a:	f001 fbe3 	bl	8009944 <__d2b>
 800817e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008182:	9004      	str	r0, [sp, #16]
 8008184:	2d00      	cmp	r5, #0
 8008186:	d07c      	beq.n	8008282 <_dtoa_r+0x1da>
 8008188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800818c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008190:	46b2      	mov	sl, r6
 8008192:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800819a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800819e:	2200      	movs	r2, #0
 80081a0:	4b8b      	ldr	r3, [pc, #556]	; (80083d0 <_dtoa_r+0x328>)
 80081a2:	4650      	mov	r0, sl
 80081a4:	4659      	mov	r1, fp
 80081a6:	f7f8 f88f 	bl	80002c8 <__aeabi_dsub>
 80081aa:	a381      	add	r3, pc, #516	; (adr r3, 80083b0 <_dtoa_r+0x308>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	a380      	add	r3, pc, #512	; (adr r3, 80083b8 <_dtoa_r+0x310>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f887 	bl	80002cc <__adddf3>
 80081be:	4606      	mov	r6, r0
 80081c0:	4628      	mov	r0, r5
 80081c2:	460f      	mov	r7, r1
 80081c4:	f7f8 f9ce 	bl	8000564 <__aeabi_i2d>
 80081c8:	a37d      	add	r3, pc, #500	; (adr r3, 80083c0 <_dtoa_r+0x318>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 fa33 	bl	8000638 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 f877 	bl	80002cc <__adddf3>
 80081de:	4606      	mov	r6, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	f7f8 fcd9 	bl	8000b98 <__aeabi_d2iz>
 80081e6:	2200      	movs	r2, #0
 80081e8:	4682      	mov	sl, r0
 80081ea:	2300      	movs	r3, #0
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80081f4:	b148      	cbz	r0, 800820a <_dtoa_r+0x162>
 80081f6:	4650      	mov	r0, sl
 80081f8:	f7f8 f9b4 	bl	8000564 <__aeabi_i2d>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8008204:	b908      	cbnz	r0, 800820a <_dtoa_r+0x162>
 8008206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800820a:	f1ba 0f16 	cmp.w	sl, #22
 800820e:	d859      	bhi.n	80082c4 <_dtoa_r+0x21c>
 8008210:	4970      	ldr	r1, [pc, #448]	; (80083d4 <_dtoa_r+0x32c>)
 8008212:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821e:	f7f8 fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d050      	beq.n	80082c8 <_dtoa_r+0x220>
 8008226:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800822a:	2300      	movs	r3, #0
 800822c:	930f      	str	r3, [sp, #60]	; 0x3c
 800822e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008230:	1b5d      	subs	r5, r3, r5
 8008232:	f1b5 0801 	subs.w	r8, r5, #1
 8008236:	bf49      	itett	mi
 8008238:	f1c5 0301 	rsbmi	r3, r5, #1
 800823c:	2300      	movpl	r3, #0
 800823e:	9305      	strmi	r3, [sp, #20]
 8008240:	f04f 0800 	movmi.w	r8, #0
 8008244:	bf58      	it	pl
 8008246:	9305      	strpl	r3, [sp, #20]
 8008248:	f1ba 0f00 	cmp.w	sl, #0
 800824c:	db3e      	blt.n	80082cc <_dtoa_r+0x224>
 800824e:	2300      	movs	r3, #0
 8008250:	44d0      	add	r8, sl
 8008252:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	9b06      	ldr	r3, [sp, #24]
 800825a:	2b09      	cmp	r3, #9
 800825c:	f200 8090 	bhi.w	8008380 <_dtoa_r+0x2d8>
 8008260:	2b05      	cmp	r3, #5
 8008262:	bfc4      	itt	gt
 8008264:	3b04      	subgt	r3, #4
 8008266:	9306      	strgt	r3, [sp, #24]
 8008268:	9b06      	ldr	r3, [sp, #24]
 800826a:	f1a3 0302 	sub.w	r3, r3, #2
 800826e:	bfcc      	ite	gt
 8008270:	2500      	movgt	r5, #0
 8008272:	2501      	movle	r5, #1
 8008274:	2b03      	cmp	r3, #3
 8008276:	f200 808f 	bhi.w	8008398 <_dtoa_r+0x2f0>
 800827a:	e8df f003 	tbb	[pc, r3]
 800827e:	7f7d      	.short	0x7f7d
 8008280:	7131      	.short	0x7131
 8008282:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008286:	441d      	add	r5, r3
 8008288:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800828c:	2820      	cmp	r0, #32
 800828e:	dd13      	ble.n	80082b8 <_dtoa_r+0x210>
 8008290:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	fa08 f800 	lsl.w	r8, r8, r0
 800829a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800829e:	fa23 f000 	lsr.w	r0, r3, r0
 80082a2:	ea48 0000 	orr.w	r0, r8, r0
 80082a6:	f7f8 f94d 	bl	8000544 <__aeabi_ui2d>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4682      	mov	sl, r0
 80082ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80082b2:	3d01      	subs	r5, #1
 80082b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80082b6:	e772      	b.n	800819e <_dtoa_r+0xf6>
 80082b8:	9b00      	ldr	r3, [sp, #0]
 80082ba:	f1c0 0020 	rsb	r0, r0, #32
 80082be:	fa03 f000 	lsl.w	r0, r3, r0
 80082c2:	e7f0      	b.n	80082a6 <_dtoa_r+0x1fe>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e7b1      	b.n	800822c <_dtoa_r+0x184>
 80082c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ca:	e7b0      	b.n	800822e <_dtoa_r+0x186>
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	eba3 030a 	sub.w	r3, r3, sl
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	f1ca 0300 	rsb	r3, sl, #0
 80082d8:	9307      	str	r3, [sp, #28]
 80082da:	2300      	movs	r3, #0
 80082dc:	930e      	str	r3, [sp, #56]	; 0x38
 80082de:	e7bb      	b.n	8008258 <_dtoa_r+0x1b0>
 80082e0:	2301      	movs	r3, #1
 80082e2:	930a      	str	r3, [sp, #40]	; 0x28
 80082e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd59      	ble.n	800839e <_dtoa_r+0x2f6>
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	4699      	mov	r9, r3
 80082ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082f0:	2200      	movs	r2, #0
 80082f2:	6072      	str	r2, [r6, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	f102 0014 	add.w	r0, r2, #20
 80082fa:	4298      	cmp	r0, r3
 80082fc:	6871      	ldr	r1, [r6, #4]
 80082fe:	d953      	bls.n	80083a8 <_dtoa_r+0x300>
 8008300:	4620      	mov	r0, r4
 8008302:	f000 ffdd 	bl	80092c0 <_Balloc>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	6030      	str	r0, [r6, #0]
 800830a:	f1b9 0f0e 	cmp.w	r9, #14
 800830e:	f8d3 b000 	ldr.w	fp, [r3]
 8008312:	f200 80e6 	bhi.w	80084e2 <_dtoa_r+0x43a>
 8008316:	2d00      	cmp	r5, #0
 8008318:	f000 80e3 	beq.w	80084e2 <_dtoa_r+0x43a>
 800831c:	ed9d 7b00 	vldr	d7, [sp]
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008328:	dd74      	ble.n	8008414 <_dtoa_r+0x36c>
 800832a:	4a2a      	ldr	r2, [pc, #168]	; (80083d4 <_dtoa_r+0x32c>)
 800832c:	f00a 030f 	and.w	r3, sl, #15
 8008330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008334:	ed93 7b00 	vldr	d7, [r3]
 8008338:	ea4f 162a 	mov.w	r6, sl, asr #4
 800833c:	06f0      	lsls	r0, r6, #27
 800833e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008342:	d565      	bpl.n	8008410 <_dtoa_r+0x368>
 8008344:	4b24      	ldr	r3, [pc, #144]	; (80083d8 <_dtoa_r+0x330>)
 8008346:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800834a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800834e:	f7f8 fa9d 	bl	800088c <__aeabi_ddiv>
 8008352:	e9cd 0100 	strd	r0, r1, [sp]
 8008356:	f006 060f 	and.w	r6, r6, #15
 800835a:	2503      	movs	r5, #3
 800835c:	4f1e      	ldr	r7, [pc, #120]	; (80083d8 <_dtoa_r+0x330>)
 800835e:	e04c      	b.n	80083fa <_dtoa_r+0x352>
 8008360:	2301      	movs	r3, #1
 8008362:	930a      	str	r3, [sp, #40]	; 0x28
 8008364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008366:	4453      	add	r3, sl
 8008368:	f103 0901 	add.w	r9, r3, #1
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	464b      	mov	r3, r9
 8008370:	2b01      	cmp	r3, #1
 8008372:	bfb8      	it	lt
 8008374:	2301      	movlt	r3, #1
 8008376:	e7ba      	b.n	80082ee <_dtoa_r+0x246>
 8008378:	2300      	movs	r3, #0
 800837a:	e7b2      	b.n	80082e2 <_dtoa_r+0x23a>
 800837c:	2300      	movs	r3, #0
 800837e:	e7f0      	b.n	8008362 <_dtoa_r+0x2ba>
 8008380:	2501      	movs	r5, #1
 8008382:	2300      	movs	r3, #0
 8008384:	9306      	str	r3, [sp, #24]
 8008386:	950a      	str	r5, [sp, #40]	; 0x28
 8008388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	4699      	mov	r9, r3
 8008390:	2200      	movs	r2, #0
 8008392:	2312      	movs	r3, #18
 8008394:	920b      	str	r2, [sp, #44]	; 0x2c
 8008396:	e7aa      	b.n	80082ee <_dtoa_r+0x246>
 8008398:	2301      	movs	r3, #1
 800839a:	930a      	str	r3, [sp, #40]	; 0x28
 800839c:	e7f4      	b.n	8008388 <_dtoa_r+0x2e0>
 800839e:	2301      	movs	r3, #1
 80083a0:	9302      	str	r3, [sp, #8]
 80083a2:	4699      	mov	r9, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	e7f5      	b.n	8008394 <_dtoa_r+0x2ec>
 80083a8:	3101      	adds	r1, #1
 80083aa:	6071      	str	r1, [r6, #4]
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	e7a2      	b.n	80082f6 <_dtoa_r+0x24e>
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	7ff00000 	.word	0x7ff00000
 80083cc:	0800a549 	.word	0x0800a549
 80083d0:	3ff80000 	.word	0x3ff80000
 80083d4:	0800a608 	.word	0x0800a608
 80083d8:	0800a5e0 	.word	0x0800a5e0
 80083dc:	0800a5d1 	.word	0x0800a5d1
 80083e0:	07f1      	lsls	r1, r6, #31
 80083e2:	d508      	bpl.n	80083f6 <_dtoa_r+0x34e>
 80083e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ec:	f7f8 f924 	bl	8000638 <__aeabi_dmul>
 80083f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083f4:	3501      	adds	r5, #1
 80083f6:	1076      	asrs	r6, r6, #1
 80083f8:	3708      	adds	r7, #8
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d1f0      	bne.n	80083e0 <_dtoa_r+0x338>
 80083fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008402:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008406:	f7f8 fa41 	bl	800088c <__aeabi_ddiv>
 800840a:	e9cd 0100 	strd	r0, r1, [sp]
 800840e:	e01a      	b.n	8008446 <_dtoa_r+0x39e>
 8008410:	2502      	movs	r5, #2
 8008412:	e7a3      	b.n	800835c <_dtoa_r+0x2b4>
 8008414:	f000 80a0 	beq.w	8008558 <_dtoa_r+0x4b0>
 8008418:	f1ca 0600 	rsb	r6, sl, #0
 800841c:	4b9f      	ldr	r3, [pc, #636]	; (800869c <_dtoa_r+0x5f4>)
 800841e:	4fa0      	ldr	r7, [pc, #640]	; (80086a0 <_dtoa_r+0x5f8>)
 8008420:	f006 020f 	and.w	r2, r6, #15
 8008424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008430:	f7f8 f902 	bl	8000638 <__aeabi_dmul>
 8008434:	e9cd 0100 	strd	r0, r1, [sp]
 8008438:	1136      	asrs	r6, r6, #4
 800843a:	2300      	movs	r3, #0
 800843c:	2502      	movs	r5, #2
 800843e:	2e00      	cmp	r6, #0
 8008440:	d17f      	bne.n	8008542 <_dtoa_r+0x49a>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e1      	bne.n	800840a <_dtoa_r+0x362>
 8008446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8087 	beq.w	800855c <_dtoa_r+0x4b4>
 800844e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008452:	2200      	movs	r2, #0
 8008454:	4b93      	ldr	r3, [pc, #588]	; (80086a4 <_dtoa_r+0x5fc>)
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800845e:	2800      	cmp	r0, #0
 8008460:	d07c      	beq.n	800855c <_dtoa_r+0x4b4>
 8008462:	f1b9 0f00 	cmp.w	r9, #0
 8008466:	d079      	beq.n	800855c <_dtoa_r+0x4b4>
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd35      	ble.n	80084da <_dtoa_r+0x432>
 800846e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	4639      	mov	r1, r7
 8008476:	2200      	movs	r2, #0
 8008478:	4b8b      	ldr	r3, [pc, #556]	; (80086a8 <_dtoa_r+0x600>)
 800847a:	4630      	mov	r0, r6
 800847c:	f7f8 f8dc 	bl	8000638 <__aeabi_dmul>
 8008480:	e9cd 0100 	strd	r0, r1, [sp]
 8008484:	9f02      	ldr	r7, [sp, #8]
 8008486:	3501      	adds	r5, #1
 8008488:	4628      	mov	r0, r5
 800848a:	f7f8 f86b 	bl	8000564 <__aeabi_i2d>
 800848e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008492:	f7f8 f8d1 	bl	8000638 <__aeabi_dmul>
 8008496:	2200      	movs	r2, #0
 8008498:	4b84      	ldr	r3, [pc, #528]	; (80086ac <_dtoa_r+0x604>)
 800849a:	f7f7 ff17 	bl	80002cc <__adddf3>
 800849e:	4605      	mov	r5, r0
 80084a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084a4:	2f00      	cmp	r7, #0
 80084a6:	d15d      	bne.n	8008564 <_dtoa_r+0x4bc>
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b81      	ldr	r3, [pc, #516]	; (80086b0 <_dtoa_r+0x608>)
 80084ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b0:	f7f7 ff0a 	bl	80002c8 <__aeabi_dsub>
 80084b4:	462a      	mov	r2, r5
 80084b6:	4633      	mov	r3, r6
 80084b8:	e9cd 0100 	strd	r0, r1, [sp]
 80084bc:	f7f8 fb4c 	bl	8000b58 <__aeabi_dcmpgt>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f040 8288 	bne.w	80089d6 <_dtoa_r+0x92e>
 80084c6:	462a      	mov	r2, r5
 80084c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084d0:	f7f8 fb24 	bl	8000b1c <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f040 827c 	bne.w	80089d2 <_dtoa_r+0x92a>
 80084da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084de:	e9cd 2300 	strd	r2, r3, [sp]
 80084e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f2c0 8150 	blt.w	800878a <_dtoa_r+0x6e2>
 80084ea:	f1ba 0f0e 	cmp.w	sl, #14
 80084ee:	f300 814c 	bgt.w	800878a <_dtoa_r+0x6e2>
 80084f2:	4b6a      	ldr	r3, [pc, #424]	; (800869c <_dtoa_r+0x5f4>)
 80084f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084f8:	ed93 7b00 	vldr	d7, [r3]
 80084fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008504:	f280 80d8 	bge.w	80086b8 <_dtoa_r+0x610>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	f300 80d4 	bgt.w	80086b8 <_dtoa_r+0x610>
 8008510:	f040 825e 	bne.w	80089d0 <_dtoa_r+0x928>
 8008514:	2200      	movs	r2, #0
 8008516:	4b66      	ldr	r3, [pc, #408]	; (80086b0 <_dtoa_r+0x608>)
 8008518:	ec51 0b17 	vmov	r0, r1, d7
 800851c:	f7f8 f88c 	bl	8000638 <__aeabi_dmul>
 8008520:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008524:	f7f8 fb0e 	bl	8000b44 <__aeabi_dcmpge>
 8008528:	464f      	mov	r7, r9
 800852a:	464e      	mov	r6, r9
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 8234 	bne.w	800899a <_dtoa_r+0x8f2>
 8008532:	2331      	movs	r3, #49	; 0x31
 8008534:	f10b 0501 	add.w	r5, fp, #1
 8008538:	f88b 3000 	strb.w	r3, [fp]
 800853c:	f10a 0a01 	add.w	sl, sl, #1
 8008540:	e22f      	b.n	80089a2 <_dtoa_r+0x8fa>
 8008542:	07f2      	lsls	r2, r6, #31
 8008544:	d505      	bpl.n	8008552 <_dtoa_r+0x4aa>
 8008546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854a:	f7f8 f875 	bl	8000638 <__aeabi_dmul>
 800854e:	3501      	adds	r5, #1
 8008550:	2301      	movs	r3, #1
 8008552:	1076      	asrs	r6, r6, #1
 8008554:	3708      	adds	r7, #8
 8008556:	e772      	b.n	800843e <_dtoa_r+0x396>
 8008558:	2502      	movs	r5, #2
 800855a:	e774      	b.n	8008446 <_dtoa_r+0x39e>
 800855c:	f8cd a020 	str.w	sl, [sp, #32]
 8008560:	464f      	mov	r7, r9
 8008562:	e791      	b.n	8008488 <_dtoa_r+0x3e0>
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <_dtoa_r+0x5f4>)
 8008566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800856a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d047      	beq.n	8008604 <_dtoa_r+0x55c>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	2000      	movs	r0, #0
 800857a:	494e      	ldr	r1, [pc, #312]	; (80086b4 <_dtoa_r+0x60c>)
 800857c:	f7f8 f986 	bl	800088c <__aeabi_ddiv>
 8008580:	462a      	mov	r2, r5
 8008582:	4633      	mov	r3, r6
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800858c:	465d      	mov	r5, fp
 800858e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008592:	f7f8 fb01 	bl	8000b98 <__aeabi_d2iz>
 8008596:	4606      	mov	r6, r0
 8008598:	f7f7 ffe4 	bl	8000564 <__aeabi_i2d>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a4:	f7f7 fe90 	bl	80002c8 <__aeabi_dsub>
 80085a8:	3630      	adds	r6, #48	; 0x30
 80085aa:	f805 6b01 	strb.w	r6, [r5], #1
 80085ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085b2:	e9cd 0100 	strd	r0, r1, [sp]
 80085b6:	f7f8 fab1 	bl	8000b1c <__aeabi_dcmplt>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d163      	bne.n	8008686 <_dtoa_r+0x5de>
 80085be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085c2:	2000      	movs	r0, #0
 80085c4:	4937      	ldr	r1, [pc, #220]	; (80086a4 <_dtoa_r+0x5fc>)
 80085c6:	f7f7 fe7f 	bl	80002c8 <__aeabi_dsub>
 80085ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085ce:	f7f8 faa5 	bl	8000b1c <__aeabi_dcmplt>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f040 80b7 	bne.w	8008746 <_dtoa_r+0x69e>
 80085d8:	eba5 030b 	sub.w	r3, r5, fp
 80085dc:	429f      	cmp	r7, r3
 80085de:	f77f af7c 	ble.w	80084da <_dtoa_r+0x432>
 80085e2:	2200      	movs	r2, #0
 80085e4:	4b30      	ldr	r3, [pc, #192]	; (80086a8 <_dtoa_r+0x600>)
 80085e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085ea:	f7f8 f825 	bl	8000638 <__aeabi_dmul>
 80085ee:	2200      	movs	r2, #0
 80085f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085f4:	4b2c      	ldr	r3, [pc, #176]	; (80086a8 <_dtoa_r+0x600>)
 80085f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085fa:	f7f8 f81d 	bl	8000638 <__aeabi_dmul>
 80085fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008602:	e7c4      	b.n	800858e <_dtoa_r+0x4e6>
 8008604:	462a      	mov	r2, r5
 8008606:	4633      	mov	r3, r6
 8008608:	f7f8 f816 	bl	8000638 <__aeabi_dmul>
 800860c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008610:	eb0b 0507 	add.w	r5, fp, r7
 8008614:	465e      	mov	r6, fp
 8008616:	e9dd 0100 	ldrd	r0, r1, [sp]
 800861a:	f7f8 fabd 	bl	8000b98 <__aeabi_d2iz>
 800861e:	4607      	mov	r7, r0
 8008620:	f7f7 ffa0 	bl	8000564 <__aeabi_i2d>
 8008624:	3730      	adds	r7, #48	; 0x30
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862e:	f7f7 fe4b 	bl	80002c8 <__aeabi_dsub>
 8008632:	f806 7b01 	strb.w	r7, [r6], #1
 8008636:	42ae      	cmp	r6, r5
 8008638:	e9cd 0100 	strd	r0, r1, [sp]
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	d126      	bne.n	8008690 <_dtoa_r+0x5e8>
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <_dtoa_r+0x60c>)
 8008644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008648:	f7f7 fe40 	bl	80002cc <__adddf3>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008654:	f7f8 fa80 	bl	8000b58 <__aeabi_dcmpgt>
 8008658:	2800      	cmp	r0, #0
 800865a:	d174      	bne.n	8008746 <_dtoa_r+0x69e>
 800865c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008660:	2000      	movs	r0, #0
 8008662:	4914      	ldr	r1, [pc, #80]	; (80086b4 <_dtoa_r+0x60c>)
 8008664:	f7f7 fe30 	bl	80002c8 <__aeabi_dsub>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008670:	f7f8 fa54 	bl	8000b1c <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f43f af30 	beq.w	80084da <_dtoa_r+0x432>
 800867a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800867e:	2b30      	cmp	r3, #48	; 0x30
 8008680:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008684:	d002      	beq.n	800868c <_dtoa_r+0x5e4>
 8008686:	f8dd a020 	ldr.w	sl, [sp, #32]
 800868a:	e04a      	b.n	8008722 <_dtoa_r+0x67a>
 800868c:	4615      	mov	r5, r2
 800868e:	e7f4      	b.n	800867a <_dtoa_r+0x5d2>
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <_dtoa_r+0x600>)
 8008692:	f7f7 ffd1 	bl	8000638 <__aeabi_dmul>
 8008696:	e9cd 0100 	strd	r0, r1, [sp]
 800869a:	e7bc      	b.n	8008616 <_dtoa_r+0x56e>
 800869c:	0800a608 	.word	0x0800a608
 80086a0:	0800a5e0 	.word	0x0800a5e0
 80086a4:	3ff00000 	.word	0x3ff00000
 80086a8:	40240000 	.word	0x40240000
 80086ac:	401c0000 	.word	0x401c0000
 80086b0:	40140000 	.word	0x40140000
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086bc:	465d      	mov	r5, fp
 80086be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c2:	4630      	mov	r0, r6
 80086c4:	4639      	mov	r1, r7
 80086c6:	f7f8 f8e1 	bl	800088c <__aeabi_ddiv>
 80086ca:	f7f8 fa65 	bl	8000b98 <__aeabi_d2iz>
 80086ce:	4680      	mov	r8, r0
 80086d0:	f7f7 ff48 	bl	8000564 <__aeabi_i2d>
 80086d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d8:	f7f7 ffae 	bl	8000638 <__aeabi_dmul>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80086e8:	f7f7 fdee 	bl	80002c8 <__aeabi_dsub>
 80086ec:	f805 6b01 	strb.w	r6, [r5], #1
 80086f0:	eba5 060b 	sub.w	r6, r5, fp
 80086f4:	45b1      	cmp	r9, r6
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	d139      	bne.n	8008770 <_dtoa_r+0x6c8>
 80086fc:	f7f7 fde6 	bl	80002cc <__adddf3>
 8008700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	f7f8 fa26 	bl	8000b58 <__aeabi_dcmpgt>
 800870c:	b9c8      	cbnz	r0, 8008742 <_dtoa_r+0x69a>
 800870e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f8 f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800871a:	b110      	cbz	r0, 8008722 <_dtoa_r+0x67a>
 800871c:	f018 0f01 	tst.w	r8, #1
 8008720:	d10f      	bne.n	8008742 <_dtoa_r+0x69a>
 8008722:	9904      	ldr	r1, [sp, #16]
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fdff 	bl	8009328 <_Bfree>
 800872a:	2300      	movs	r3, #0
 800872c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800872e:	702b      	strb	r3, [r5, #0]
 8008730:	f10a 0301 	add.w	r3, sl, #1
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8241 	beq.w	8008bc0 <_dtoa_r+0xb18>
 800873e:	601d      	str	r5, [r3, #0]
 8008740:	e23e      	b.n	8008bc0 <_dtoa_r+0xb18>
 8008742:	f8cd a020 	str.w	sl, [sp, #32]
 8008746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800874a:	2a39      	cmp	r2, #57	; 0x39
 800874c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008750:	d108      	bne.n	8008764 <_dtoa_r+0x6bc>
 8008752:	459b      	cmp	fp, r3
 8008754:	d10a      	bne.n	800876c <_dtoa_r+0x6c4>
 8008756:	9b08      	ldr	r3, [sp, #32]
 8008758:	3301      	adds	r3, #1
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	2330      	movs	r3, #48	; 0x30
 800875e:	f88b 3000 	strb.w	r3, [fp]
 8008762:	465b      	mov	r3, fp
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e78c      	b.n	8008686 <_dtoa_r+0x5de>
 800876c:	461d      	mov	r5, r3
 800876e:	e7ea      	b.n	8008746 <_dtoa_r+0x69e>
 8008770:	2200      	movs	r2, #0
 8008772:	4b9b      	ldr	r3, [pc, #620]	; (80089e0 <_dtoa_r+0x938>)
 8008774:	f7f7 ff60 	bl	8000638 <__aeabi_dmul>
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	4606      	mov	r6, r0
 800877e:	460f      	mov	r7, r1
 8008780:	f7f8 f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 8008784:	2800      	cmp	r0, #0
 8008786:	d09a      	beq.n	80086be <_dtoa_r+0x616>
 8008788:	e7cb      	b.n	8008722 <_dtoa_r+0x67a>
 800878a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800878c:	2a00      	cmp	r2, #0
 800878e:	f000 808b 	beq.w	80088a8 <_dtoa_r+0x800>
 8008792:	9a06      	ldr	r2, [sp, #24]
 8008794:	2a01      	cmp	r2, #1
 8008796:	dc6e      	bgt.n	8008876 <_dtoa_r+0x7ce>
 8008798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800879a:	2a00      	cmp	r2, #0
 800879c:	d067      	beq.n	800886e <_dtoa_r+0x7c6>
 800879e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087a2:	9f07      	ldr	r7, [sp, #28]
 80087a4:	9d05      	ldr	r5, [sp, #20]
 80087a6:	9a05      	ldr	r2, [sp, #20]
 80087a8:	2101      	movs	r1, #1
 80087aa:	441a      	add	r2, r3
 80087ac:	4620      	mov	r0, r4
 80087ae:	9205      	str	r2, [sp, #20]
 80087b0:	4498      	add	r8, r3
 80087b2:	f000 fe97 	bl	80094e4 <__i2b>
 80087b6:	4606      	mov	r6, r0
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	dd0c      	ble.n	80087d6 <_dtoa_r+0x72e>
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	dd09      	ble.n	80087d6 <_dtoa_r+0x72e>
 80087c2:	4545      	cmp	r5, r8
 80087c4:	9a05      	ldr	r2, [sp, #20]
 80087c6:	462b      	mov	r3, r5
 80087c8:	bfa8      	it	ge
 80087ca:	4643      	movge	r3, r8
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	9205      	str	r2, [sp, #20]
 80087d0:	1aed      	subs	r5, r5, r3
 80087d2:	eba8 0803 	sub.w	r8, r8, r3
 80087d6:	9b07      	ldr	r3, [sp, #28]
 80087d8:	b1eb      	cbz	r3, 8008816 <_dtoa_r+0x76e>
 80087da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d067      	beq.n	80088b0 <_dtoa_r+0x808>
 80087e0:	b18f      	cbz	r7, 8008806 <_dtoa_r+0x75e>
 80087e2:	4631      	mov	r1, r6
 80087e4:	463a      	mov	r2, r7
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 ff1c 	bl	8009624 <__pow5mult>
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	4601      	mov	r1, r0
 80087f0:	4606      	mov	r6, r0
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fe7f 	bl	80094f6 <__multiply>
 80087f8:	9904      	ldr	r1, [sp, #16]
 80087fa:	9008      	str	r0, [sp, #32]
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fd93 	bl	8009328 <_Bfree>
 8008802:	9b08      	ldr	r3, [sp, #32]
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	9b07      	ldr	r3, [sp, #28]
 8008808:	1bda      	subs	r2, r3, r7
 800880a:	d004      	beq.n	8008816 <_dtoa_r+0x76e>
 800880c:	9904      	ldr	r1, [sp, #16]
 800880e:	4620      	mov	r0, r4
 8008810:	f000 ff08 	bl	8009624 <__pow5mult>
 8008814:	9004      	str	r0, [sp, #16]
 8008816:	2101      	movs	r1, #1
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fe63 	bl	80094e4 <__i2b>
 800881e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008820:	4607      	mov	r7, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 81d0 	beq.w	8008bc8 <_dtoa_r+0xb20>
 8008828:	461a      	mov	r2, r3
 800882a:	4601      	mov	r1, r0
 800882c:	4620      	mov	r0, r4
 800882e:	f000 fef9 	bl	8009624 <__pow5mult>
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	2b01      	cmp	r3, #1
 8008836:	4607      	mov	r7, r0
 8008838:	dc40      	bgt.n	80088bc <_dtoa_r+0x814>
 800883a:	9b00      	ldr	r3, [sp, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d139      	bne.n	80088b4 <_dtoa_r+0x80c>
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008846:	2b00      	cmp	r3, #0
 8008848:	d136      	bne.n	80088b8 <_dtoa_r+0x810>
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008850:	0d1b      	lsrs	r3, r3, #20
 8008852:	051b      	lsls	r3, r3, #20
 8008854:	b12b      	cbz	r3, 8008862 <_dtoa_r+0x7ba>
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	3301      	adds	r3, #1
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	f108 0801 	add.w	r8, r8, #1
 8008860:	2301      	movs	r3, #1
 8008862:	9307      	str	r3, [sp, #28]
 8008864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008866:	2b00      	cmp	r3, #0
 8008868:	d12a      	bne.n	80088c0 <_dtoa_r+0x818>
 800886a:	2001      	movs	r0, #1
 800886c:	e030      	b.n	80088d0 <_dtoa_r+0x828>
 800886e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008870:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008874:	e795      	b.n	80087a2 <_dtoa_r+0x6fa>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800887c:	42bb      	cmp	r3, r7
 800887e:	bfbf      	itttt	lt
 8008880:	9b07      	ldrlt	r3, [sp, #28]
 8008882:	9707      	strlt	r7, [sp, #28]
 8008884:	1afa      	sublt	r2, r7, r3
 8008886:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008888:	bfbb      	ittet	lt
 800888a:	189b      	addlt	r3, r3, r2
 800888c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800888e:	1bdf      	subge	r7, r3, r7
 8008890:	2700      	movlt	r7, #0
 8008892:	f1b9 0f00 	cmp.w	r9, #0
 8008896:	bfb5      	itete	lt
 8008898:	9b05      	ldrlt	r3, [sp, #20]
 800889a:	9d05      	ldrge	r5, [sp, #20]
 800889c:	eba3 0509 	sublt.w	r5, r3, r9
 80088a0:	464b      	movge	r3, r9
 80088a2:	bfb8      	it	lt
 80088a4:	2300      	movlt	r3, #0
 80088a6:	e77e      	b.n	80087a6 <_dtoa_r+0x6fe>
 80088a8:	9f07      	ldr	r7, [sp, #28]
 80088aa:	9d05      	ldr	r5, [sp, #20]
 80088ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80088ae:	e783      	b.n	80087b8 <_dtoa_r+0x710>
 80088b0:	9a07      	ldr	r2, [sp, #28]
 80088b2:	e7ab      	b.n	800880c <_dtoa_r+0x764>
 80088b4:	2300      	movs	r3, #0
 80088b6:	e7d4      	b.n	8008862 <_dtoa_r+0x7ba>
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	e7d2      	b.n	8008862 <_dtoa_r+0x7ba>
 80088bc:	2300      	movs	r3, #0
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80088c6:	6918      	ldr	r0, [r3, #16]
 80088c8:	f000 fdbe 	bl	8009448 <__hi0bits>
 80088cc:	f1c0 0020 	rsb	r0, r0, #32
 80088d0:	4440      	add	r0, r8
 80088d2:	f010 001f 	ands.w	r0, r0, #31
 80088d6:	d047      	beq.n	8008968 <_dtoa_r+0x8c0>
 80088d8:	f1c0 0320 	rsb	r3, r0, #32
 80088dc:	2b04      	cmp	r3, #4
 80088de:	dd3b      	ble.n	8008958 <_dtoa_r+0x8b0>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	f1c0 001c 	rsb	r0, r0, #28
 80088e6:	4403      	add	r3, r0
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	4405      	add	r5, r0
 80088ec:	4480      	add	r8, r0
 80088ee:	9b05      	ldr	r3, [sp, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dd05      	ble.n	8008900 <_dtoa_r+0x858>
 80088f4:	461a      	mov	r2, r3
 80088f6:	9904      	ldr	r1, [sp, #16]
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fee1 	bl	80096c0 <__lshift>
 80088fe:	9004      	str	r0, [sp, #16]
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	dd05      	ble.n	8008912 <_dtoa_r+0x86a>
 8008906:	4639      	mov	r1, r7
 8008908:	4642      	mov	r2, r8
 800890a:	4620      	mov	r0, r4
 800890c:	f000 fed8 	bl	80096c0 <__lshift>
 8008910:	4607      	mov	r7, r0
 8008912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008914:	b353      	cbz	r3, 800896c <_dtoa_r+0x8c4>
 8008916:	4639      	mov	r1, r7
 8008918:	9804      	ldr	r0, [sp, #16]
 800891a:	f000 ff25 	bl	8009768 <__mcmp>
 800891e:	2800      	cmp	r0, #0
 8008920:	da24      	bge.n	800896c <_dtoa_r+0x8c4>
 8008922:	2300      	movs	r3, #0
 8008924:	220a      	movs	r2, #10
 8008926:	9904      	ldr	r1, [sp, #16]
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fd14 	bl	8009356 <__multadd>
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	9004      	str	r0, [sp, #16]
 8008932:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 814d 	beq.w	8008bd6 <_dtoa_r+0xb2e>
 800893c:	2300      	movs	r3, #0
 800893e:	4631      	mov	r1, r6
 8008940:	220a      	movs	r2, #10
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fd07 	bl	8009356 <__multadd>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	4606      	mov	r6, r0
 800894e:	dc4f      	bgt.n	80089f0 <_dtoa_r+0x948>
 8008950:	9b06      	ldr	r3, [sp, #24]
 8008952:	2b02      	cmp	r3, #2
 8008954:	dd4c      	ble.n	80089f0 <_dtoa_r+0x948>
 8008956:	e011      	b.n	800897c <_dtoa_r+0x8d4>
 8008958:	d0c9      	beq.n	80088ee <_dtoa_r+0x846>
 800895a:	9a05      	ldr	r2, [sp, #20]
 800895c:	331c      	adds	r3, #28
 800895e:	441a      	add	r2, r3
 8008960:	9205      	str	r2, [sp, #20]
 8008962:	441d      	add	r5, r3
 8008964:	4498      	add	r8, r3
 8008966:	e7c2      	b.n	80088ee <_dtoa_r+0x846>
 8008968:	4603      	mov	r3, r0
 800896a:	e7f6      	b.n	800895a <_dtoa_r+0x8b2>
 800896c:	f1b9 0f00 	cmp.w	r9, #0
 8008970:	dc38      	bgt.n	80089e4 <_dtoa_r+0x93c>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b02      	cmp	r3, #2
 8008976:	dd35      	ble.n	80089e4 <_dtoa_r+0x93c>
 8008978:	f8cd 9008 	str.w	r9, [sp, #8]
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	b963      	cbnz	r3, 800899a <_dtoa_r+0x8f2>
 8008980:	4639      	mov	r1, r7
 8008982:	2205      	movs	r2, #5
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fce6 	bl	8009356 <__multadd>
 800898a:	4601      	mov	r1, r0
 800898c:	4607      	mov	r7, r0
 800898e:	9804      	ldr	r0, [sp, #16]
 8008990:	f000 feea 	bl	8009768 <__mcmp>
 8008994:	2800      	cmp	r0, #0
 8008996:	f73f adcc 	bgt.w	8008532 <_dtoa_r+0x48a>
 800899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899c:	465d      	mov	r5, fp
 800899e:	ea6f 0a03 	mvn.w	sl, r3
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	4639      	mov	r1, r7
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fcbd 	bl	8009328 <_Bfree>
 80089ae:	2e00      	cmp	r6, #0
 80089b0:	f43f aeb7 	beq.w	8008722 <_dtoa_r+0x67a>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	d005      	beq.n	80089c6 <_dtoa_r+0x91e>
 80089ba:	45b1      	cmp	r9, r6
 80089bc:	d003      	beq.n	80089c6 <_dtoa_r+0x91e>
 80089be:	4649      	mov	r1, r9
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fcb1 	bl	8009328 <_Bfree>
 80089c6:	4631      	mov	r1, r6
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fcad 	bl	8009328 <_Bfree>
 80089ce:	e6a8      	b.n	8008722 <_dtoa_r+0x67a>
 80089d0:	2700      	movs	r7, #0
 80089d2:	463e      	mov	r6, r7
 80089d4:	e7e1      	b.n	800899a <_dtoa_r+0x8f2>
 80089d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80089da:	463e      	mov	r6, r7
 80089dc:	e5a9      	b.n	8008532 <_dtoa_r+0x48a>
 80089de:	bf00      	nop
 80089e0:	40240000 	.word	0x40240000
 80089e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80fa 	beq.w	8008be4 <_dtoa_r+0xb3c>
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	dd05      	ble.n	8008a00 <_dtoa_r+0x958>
 80089f4:	4631      	mov	r1, r6
 80089f6:	462a      	mov	r2, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fe61 	bl	80096c0 <__lshift>
 80089fe:	4606      	mov	r6, r0
 8008a00:	9b07      	ldr	r3, [sp, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d04c      	beq.n	8008aa0 <_dtoa_r+0x9f8>
 8008a06:	6871      	ldr	r1, [r6, #4]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fc59 	bl	80092c0 <_Balloc>
 8008a0e:	6932      	ldr	r2, [r6, #16]
 8008a10:	3202      	adds	r2, #2
 8008a12:	4605      	mov	r5, r0
 8008a14:	0092      	lsls	r2, r2, #2
 8008a16:	f106 010c 	add.w	r1, r6, #12
 8008a1a:	300c      	adds	r0, #12
 8008a1c:	f7fd fd90 	bl	8006540 <memcpy>
 8008a20:	2201      	movs	r2, #1
 8008a22:	4629      	mov	r1, r5
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fe4b 	bl	80096c0 <__lshift>
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	f8cd b014 	str.w	fp, [sp, #20]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	46b1      	mov	r9, r6
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	4606      	mov	r6, r0
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	9804      	ldr	r0, [sp, #16]
 8008a3e:	f7ff faa5 	bl	8007f8c <quorem>
 8008a42:	4649      	mov	r1, r9
 8008a44:	4605      	mov	r5, r0
 8008a46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a4a:	9804      	ldr	r0, [sp, #16]
 8008a4c:	f000 fe8c 	bl	8009768 <__mcmp>
 8008a50:	4632      	mov	r2, r6
 8008a52:	9000      	str	r0, [sp, #0]
 8008a54:	4639      	mov	r1, r7
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fea0 	bl	800979c <__mdiff>
 8008a5c:	68c3      	ldr	r3, [r0, #12]
 8008a5e:	4602      	mov	r2, r0
 8008a60:	bb03      	cbnz	r3, 8008aa4 <_dtoa_r+0x9fc>
 8008a62:	4601      	mov	r1, r0
 8008a64:	9008      	str	r0, [sp, #32]
 8008a66:	9804      	ldr	r0, [sp, #16]
 8008a68:	f000 fe7e 	bl	8009768 <__mcmp>
 8008a6c:	9a08      	ldr	r2, [sp, #32]
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4611      	mov	r1, r2
 8008a72:	4620      	mov	r0, r4
 8008a74:	9308      	str	r3, [sp, #32]
 8008a76:	f000 fc57 	bl	8009328 <_Bfree>
 8008a7a:	9b08      	ldr	r3, [sp, #32]
 8008a7c:	b9a3      	cbnz	r3, 8008aa8 <_dtoa_r+0xa00>
 8008a7e:	9a06      	ldr	r2, [sp, #24]
 8008a80:	b992      	cbnz	r2, 8008aa8 <_dtoa_r+0xa00>
 8008a82:	9a07      	ldr	r2, [sp, #28]
 8008a84:	b982      	cbnz	r2, 8008aa8 <_dtoa_r+0xa00>
 8008a86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a8a:	d029      	beq.n	8008ae0 <_dtoa_r+0xa38>
 8008a8c:	9b00      	ldr	r3, [sp, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd01      	ble.n	8008a96 <_dtoa_r+0x9ee>
 8008a92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008a96:	9b05      	ldr	r3, [sp, #20]
 8008a98:	1c5d      	adds	r5, r3, #1
 8008a9a:	f883 8000 	strb.w	r8, [r3]
 8008a9e:	e782      	b.n	80089a6 <_dtoa_r+0x8fe>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	e7c2      	b.n	8008a2a <_dtoa_r+0x982>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e7e3      	b.n	8008a70 <_dtoa_r+0x9c8>
 8008aa8:	9a00      	ldr	r2, [sp, #0]
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	db04      	blt.n	8008ab8 <_dtoa_r+0xa10>
 8008aae:	d125      	bne.n	8008afc <_dtoa_r+0xa54>
 8008ab0:	9a06      	ldr	r2, [sp, #24]
 8008ab2:	bb1a      	cbnz	r2, 8008afc <_dtoa_r+0xa54>
 8008ab4:	9a07      	ldr	r2, [sp, #28]
 8008ab6:	bb0a      	cbnz	r2, 8008afc <_dtoa_r+0xa54>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	ddec      	ble.n	8008a96 <_dtoa_r+0x9ee>
 8008abc:	2201      	movs	r2, #1
 8008abe:	9904      	ldr	r1, [sp, #16]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fdfd 	bl	80096c0 <__lshift>
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	9004      	str	r0, [sp, #16]
 8008aca:	f000 fe4d 	bl	8009768 <__mcmp>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dc03      	bgt.n	8008ada <_dtoa_r+0xa32>
 8008ad2:	d1e0      	bne.n	8008a96 <_dtoa_r+0x9ee>
 8008ad4:	f018 0f01 	tst.w	r8, #1
 8008ad8:	d0dd      	beq.n	8008a96 <_dtoa_r+0x9ee>
 8008ada:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ade:	d1d8      	bne.n	8008a92 <_dtoa_r+0x9ea>
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	9a05      	ldr	r2, [sp, #20]
 8008ae4:	1c5d      	adds	r5, r3, #1
 8008ae6:	2339      	movs	r3, #57	; 0x39
 8008ae8:	7013      	strb	r3, [r2, #0]
 8008aea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008aee:	2b39      	cmp	r3, #57	; 0x39
 8008af0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008af4:	d04f      	beq.n	8008b96 <_dtoa_r+0xaee>
 8008af6:	3301      	adds	r3, #1
 8008af8:	7013      	strb	r3, [r2, #0]
 8008afa:	e754      	b.n	80089a6 <_dtoa_r+0x8fe>
 8008afc:	9a05      	ldr	r2, [sp, #20]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f102 0501 	add.w	r5, r2, #1
 8008b04:	dd06      	ble.n	8008b14 <_dtoa_r+0xa6c>
 8008b06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b0a:	d0e9      	beq.n	8008ae0 <_dtoa_r+0xa38>
 8008b0c:	f108 0801 	add.w	r8, r8, #1
 8008b10:	9b05      	ldr	r3, [sp, #20]
 8008b12:	e7c2      	b.n	8008a9a <_dtoa_r+0x9f2>
 8008b14:	9a02      	ldr	r2, [sp, #8]
 8008b16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b1a:	eba5 030b 	sub.w	r3, r5, fp
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d021      	beq.n	8008b66 <_dtoa_r+0xabe>
 8008b22:	2300      	movs	r3, #0
 8008b24:	220a      	movs	r2, #10
 8008b26:	9904      	ldr	r1, [sp, #16]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fc14 	bl	8009356 <__multadd>
 8008b2e:	45b1      	cmp	r9, r6
 8008b30:	9004      	str	r0, [sp, #16]
 8008b32:	f04f 0300 	mov.w	r3, #0
 8008b36:	f04f 020a 	mov.w	r2, #10
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	d105      	bne.n	8008b4c <_dtoa_r+0xaa4>
 8008b40:	f000 fc09 	bl	8009356 <__multadd>
 8008b44:	4681      	mov	r9, r0
 8008b46:	4606      	mov	r6, r0
 8008b48:	9505      	str	r5, [sp, #20]
 8008b4a:	e776      	b.n	8008a3a <_dtoa_r+0x992>
 8008b4c:	f000 fc03 	bl	8009356 <__multadd>
 8008b50:	4631      	mov	r1, r6
 8008b52:	4681      	mov	r9, r0
 8008b54:	2300      	movs	r3, #0
 8008b56:	220a      	movs	r2, #10
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fbfc 	bl	8009356 <__multadd>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	e7f2      	b.n	8008b48 <_dtoa_r+0xaa0>
 8008b62:	f04f 0900 	mov.w	r9, #0
 8008b66:	2201      	movs	r2, #1
 8008b68:	9904      	ldr	r1, [sp, #16]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fda8 	bl	80096c0 <__lshift>
 8008b70:	4639      	mov	r1, r7
 8008b72:	9004      	str	r0, [sp, #16]
 8008b74:	f000 fdf8 	bl	8009768 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dcb6      	bgt.n	8008aea <_dtoa_r+0xa42>
 8008b7c:	d102      	bne.n	8008b84 <_dtoa_r+0xadc>
 8008b7e:	f018 0f01 	tst.w	r8, #1
 8008b82:	d1b2      	bne.n	8008aea <_dtoa_r+0xa42>
 8008b84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b88:	2b30      	cmp	r3, #48	; 0x30
 8008b8a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008b8e:	f47f af0a 	bne.w	80089a6 <_dtoa_r+0x8fe>
 8008b92:	4615      	mov	r5, r2
 8008b94:	e7f6      	b.n	8008b84 <_dtoa_r+0xadc>
 8008b96:	4593      	cmp	fp, r2
 8008b98:	d105      	bne.n	8008ba6 <_dtoa_r+0xafe>
 8008b9a:	2331      	movs	r3, #49	; 0x31
 8008b9c:	f10a 0a01 	add.w	sl, sl, #1
 8008ba0:	f88b 3000 	strb.w	r3, [fp]
 8008ba4:	e6ff      	b.n	80089a6 <_dtoa_r+0x8fe>
 8008ba6:	4615      	mov	r5, r2
 8008ba8:	e79f      	b.n	8008aea <_dtoa_r+0xa42>
 8008baa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c10 <_dtoa_r+0xb68>
 8008bae:	e007      	b.n	8008bc0 <_dtoa_r+0xb18>
 8008bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c14 <_dtoa_r+0xb6c>
 8008bb6:	b11b      	cbz	r3, 8008bc0 <_dtoa_r+0xb18>
 8008bb8:	f10b 0308 	add.w	r3, fp, #8
 8008bbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	4658      	mov	r0, fp
 8008bc2:	b017      	add	sp, #92	; 0x5c
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc8:	9b06      	ldr	r3, [sp, #24]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	f77f ae35 	ble.w	800883a <_dtoa_r+0x792>
 8008bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd2:	9307      	str	r3, [sp, #28]
 8008bd4:	e649      	b.n	800886a <_dtoa_r+0x7c2>
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc03      	bgt.n	8008be4 <_dtoa_r+0xb3c>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	f73f aecc 	bgt.w	800897c <_dtoa_r+0x8d4>
 8008be4:	465d      	mov	r5, fp
 8008be6:	4639      	mov	r1, r7
 8008be8:	9804      	ldr	r0, [sp, #16]
 8008bea:	f7ff f9cf 	bl	8007f8c <quorem>
 8008bee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008bf2:	f805 8b01 	strb.w	r8, [r5], #1
 8008bf6:	9a02      	ldr	r2, [sp, #8]
 8008bf8:	eba5 030b 	sub.w	r3, r5, fp
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	ddb0      	ble.n	8008b62 <_dtoa_r+0xaba>
 8008c00:	2300      	movs	r3, #0
 8008c02:	220a      	movs	r2, #10
 8008c04:	9904      	ldr	r1, [sp, #16]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fba5 	bl	8009356 <__multadd>
 8008c0c:	9004      	str	r0, [sp, #16]
 8008c0e:	e7ea      	b.n	8008be6 <_dtoa_r+0xb3e>
 8008c10:	0800a548 	.word	0x0800a548
 8008c14:	0800a5c8 	.word	0x0800a5c8

08008c18 <rshift>:
 8008c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1a:	6906      	ldr	r6, [r0, #16]
 8008c1c:	114b      	asrs	r3, r1, #5
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	f100 0414 	add.w	r4, r0, #20
 8008c24:	dd30      	ble.n	8008c88 <rshift+0x70>
 8008c26:	f011 011f 	ands.w	r1, r1, #31
 8008c2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008c32:	d108      	bne.n	8008c46 <rshift+0x2e>
 8008c34:	4621      	mov	r1, r4
 8008c36:	42b2      	cmp	r2, r6
 8008c38:	460b      	mov	r3, r1
 8008c3a:	d211      	bcs.n	8008c60 <rshift+0x48>
 8008c3c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c40:	f841 3b04 	str.w	r3, [r1], #4
 8008c44:	e7f7      	b.n	8008c36 <rshift+0x1e>
 8008c46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008c4a:	f1c1 0c20 	rsb	ip, r1, #32
 8008c4e:	40cd      	lsrs	r5, r1
 8008c50:	3204      	adds	r2, #4
 8008c52:	4623      	mov	r3, r4
 8008c54:	42b2      	cmp	r2, r6
 8008c56:	4617      	mov	r7, r2
 8008c58:	d30c      	bcc.n	8008c74 <rshift+0x5c>
 8008c5a:	601d      	str	r5, [r3, #0]
 8008c5c:	b105      	cbz	r5, 8008c60 <rshift+0x48>
 8008c5e:	3304      	adds	r3, #4
 8008c60:	1b1a      	subs	r2, r3, r4
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c68:	bf08      	it	eq
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	6102      	str	r2, [r0, #16]
 8008c6e:	bf08      	it	eq
 8008c70:	6143      	streq	r3, [r0, #20]
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c74:	683f      	ldr	r7, [r7, #0]
 8008c76:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c7a:	433d      	orrs	r5, r7
 8008c7c:	f843 5b04 	str.w	r5, [r3], #4
 8008c80:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c84:	40cd      	lsrs	r5, r1
 8008c86:	e7e5      	b.n	8008c54 <rshift+0x3c>
 8008c88:	4623      	mov	r3, r4
 8008c8a:	e7e9      	b.n	8008c60 <rshift+0x48>

08008c8c <__hexdig_fun>:
 8008c8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d802      	bhi.n	8008c9a <__hexdig_fun+0xe>
 8008c94:	3820      	subs	r0, #32
 8008c96:	b2c0      	uxtb	r0, r0
 8008c98:	4770      	bx	lr
 8008c9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d801      	bhi.n	8008ca6 <__hexdig_fun+0x1a>
 8008ca2:	3847      	subs	r0, #71	; 0x47
 8008ca4:	e7f7      	b.n	8008c96 <__hexdig_fun+0xa>
 8008ca6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d801      	bhi.n	8008cb2 <__hexdig_fun+0x26>
 8008cae:	3827      	subs	r0, #39	; 0x27
 8008cb0:	e7f1      	b.n	8008c96 <__hexdig_fun+0xa>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	4770      	bx	lr

08008cb6 <__gethex>:
 8008cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	b08b      	sub	sp, #44	; 0x2c
 8008cbc:	468a      	mov	sl, r1
 8008cbe:	9002      	str	r0, [sp, #8]
 8008cc0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008cc2:	9306      	str	r3, [sp, #24]
 8008cc4:	4690      	mov	r8, r2
 8008cc6:	f000 fad0 	bl	800926a <__localeconv_l>
 8008cca:	6803      	ldr	r3, [r0, #0]
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f7 fa9e 	bl	8000210 <strlen>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	9001      	str	r0, [sp, #4]
 8008cd8:	4403      	add	r3, r0
 8008cda:	f04f 0b00 	mov.w	fp, #0
 8008cde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ce2:	9307      	str	r3, [sp, #28]
 8008ce4:	f8da 3000 	ldr.w	r3, [sl]
 8008ce8:	3302      	adds	r3, #2
 8008cea:	461f      	mov	r7, r3
 8008cec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cf0:	2830      	cmp	r0, #48	; 0x30
 8008cf2:	d06c      	beq.n	8008dce <__gethex+0x118>
 8008cf4:	f7ff ffca 	bl	8008c8c <__hexdig_fun>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d16a      	bne.n	8008dd4 <__gethex+0x11e>
 8008cfe:	9a01      	ldr	r2, [sp, #4]
 8008d00:	9903      	ldr	r1, [sp, #12]
 8008d02:	4638      	mov	r0, r7
 8008d04:	f001 f8f4 	bl	8009ef0 <strncmp>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d166      	bne.n	8008dda <__gethex+0x124>
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	5cf8      	ldrb	r0, [r7, r3]
 8008d10:	18fe      	adds	r6, r7, r3
 8008d12:	f7ff ffbb 	bl	8008c8c <__hexdig_fun>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d062      	beq.n	8008de0 <__gethex+0x12a>
 8008d1a:	4633      	mov	r3, r6
 8008d1c:	7818      	ldrb	r0, [r3, #0]
 8008d1e:	2830      	cmp	r0, #48	; 0x30
 8008d20:	461f      	mov	r7, r3
 8008d22:	f103 0301 	add.w	r3, r3, #1
 8008d26:	d0f9      	beq.n	8008d1c <__gethex+0x66>
 8008d28:	f7ff ffb0 	bl	8008c8c <__hexdig_fun>
 8008d2c:	fab0 f580 	clz	r5, r0
 8008d30:	096d      	lsrs	r5, r5, #5
 8008d32:	4634      	mov	r4, r6
 8008d34:	f04f 0b01 	mov.w	fp, #1
 8008d38:	463a      	mov	r2, r7
 8008d3a:	4616      	mov	r6, r2
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	7830      	ldrb	r0, [r6, #0]
 8008d40:	f7ff ffa4 	bl	8008c8c <__hexdig_fun>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d1f8      	bne.n	8008d3a <__gethex+0x84>
 8008d48:	9a01      	ldr	r2, [sp, #4]
 8008d4a:	9903      	ldr	r1, [sp, #12]
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f001 f8cf 	bl	8009ef0 <strncmp>
 8008d52:	b950      	cbnz	r0, 8008d6a <__gethex+0xb4>
 8008d54:	b954      	cbnz	r4, 8008d6c <__gethex+0xb6>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	18f4      	adds	r4, r6, r3
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	3201      	adds	r2, #1
 8008d60:	7830      	ldrb	r0, [r6, #0]
 8008d62:	f7ff ff93 	bl	8008c8c <__hexdig_fun>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d1f8      	bne.n	8008d5c <__gethex+0xa6>
 8008d6a:	b10c      	cbz	r4, 8008d70 <__gethex+0xba>
 8008d6c:	1ba4      	subs	r4, r4, r6
 8008d6e:	00a4      	lsls	r4, r4, #2
 8008d70:	7833      	ldrb	r3, [r6, #0]
 8008d72:	2b50      	cmp	r3, #80	; 0x50
 8008d74:	d001      	beq.n	8008d7a <__gethex+0xc4>
 8008d76:	2b70      	cmp	r3, #112	; 0x70
 8008d78:	d140      	bne.n	8008dfc <__gethex+0x146>
 8008d7a:	7873      	ldrb	r3, [r6, #1]
 8008d7c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d7e:	d031      	beq.n	8008de4 <__gethex+0x12e>
 8008d80:	2b2d      	cmp	r3, #45	; 0x2d
 8008d82:	d033      	beq.n	8008dec <__gethex+0x136>
 8008d84:	1c71      	adds	r1, r6, #1
 8008d86:	f04f 0900 	mov.w	r9, #0
 8008d8a:	7808      	ldrb	r0, [r1, #0]
 8008d8c:	f7ff ff7e 	bl	8008c8c <__hexdig_fun>
 8008d90:	1e43      	subs	r3, r0, #1
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b18      	cmp	r3, #24
 8008d96:	d831      	bhi.n	8008dfc <__gethex+0x146>
 8008d98:	f1a0 0210 	sub.w	r2, r0, #16
 8008d9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008da0:	f7ff ff74 	bl	8008c8c <__hexdig_fun>
 8008da4:	1e43      	subs	r3, r0, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b18      	cmp	r3, #24
 8008daa:	d922      	bls.n	8008df2 <__gethex+0x13c>
 8008dac:	f1b9 0f00 	cmp.w	r9, #0
 8008db0:	d000      	beq.n	8008db4 <__gethex+0xfe>
 8008db2:	4252      	negs	r2, r2
 8008db4:	4414      	add	r4, r2
 8008db6:	f8ca 1000 	str.w	r1, [sl]
 8008dba:	b30d      	cbz	r5, 8008e00 <__gethex+0x14a>
 8008dbc:	f1bb 0f00 	cmp.w	fp, #0
 8008dc0:	bf0c      	ite	eq
 8008dc2:	2706      	moveq	r7, #6
 8008dc4:	2700      	movne	r7, #0
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	b00b      	add	sp, #44	; 0x2c
 8008dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	f10b 0b01 	add.w	fp, fp, #1
 8008dd2:	e78a      	b.n	8008cea <__gethex+0x34>
 8008dd4:	2500      	movs	r5, #0
 8008dd6:	462c      	mov	r4, r5
 8008dd8:	e7ae      	b.n	8008d38 <__gethex+0x82>
 8008dda:	463e      	mov	r6, r7
 8008ddc:	2501      	movs	r5, #1
 8008dde:	e7c7      	b.n	8008d70 <__gethex+0xba>
 8008de0:	4604      	mov	r4, r0
 8008de2:	e7fb      	b.n	8008ddc <__gethex+0x126>
 8008de4:	f04f 0900 	mov.w	r9, #0
 8008de8:	1cb1      	adds	r1, r6, #2
 8008dea:	e7ce      	b.n	8008d8a <__gethex+0xd4>
 8008dec:	f04f 0901 	mov.w	r9, #1
 8008df0:	e7fa      	b.n	8008de8 <__gethex+0x132>
 8008df2:	230a      	movs	r3, #10
 8008df4:	fb03 0202 	mla	r2, r3, r2, r0
 8008df8:	3a10      	subs	r2, #16
 8008dfa:	e7cf      	b.n	8008d9c <__gethex+0xe6>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	e7da      	b.n	8008db6 <__gethex+0x100>
 8008e00:	1bf3      	subs	r3, r6, r7
 8008e02:	3b01      	subs	r3, #1
 8008e04:	4629      	mov	r1, r5
 8008e06:	2b07      	cmp	r3, #7
 8008e08:	dc49      	bgt.n	8008e9e <__gethex+0x1e8>
 8008e0a:	9802      	ldr	r0, [sp, #8]
 8008e0c:	f000 fa58 	bl	80092c0 <_Balloc>
 8008e10:	9b01      	ldr	r3, [sp, #4]
 8008e12:	f100 0914 	add.w	r9, r0, #20
 8008e16:	f04f 0b00 	mov.w	fp, #0
 8008e1a:	f1c3 0301 	rsb	r3, r3, #1
 8008e1e:	4605      	mov	r5, r0
 8008e20:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e24:	46da      	mov	sl, fp
 8008e26:	9308      	str	r3, [sp, #32]
 8008e28:	42b7      	cmp	r7, r6
 8008e2a:	d33b      	bcc.n	8008ea4 <__gethex+0x1ee>
 8008e2c:	9804      	ldr	r0, [sp, #16]
 8008e2e:	f840 ab04 	str.w	sl, [r0], #4
 8008e32:	eba0 0009 	sub.w	r0, r0, r9
 8008e36:	1080      	asrs	r0, r0, #2
 8008e38:	6128      	str	r0, [r5, #16]
 8008e3a:	0147      	lsls	r7, r0, #5
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	f000 fb03 	bl	8009448 <__hi0bits>
 8008e42:	f8d8 6000 	ldr.w	r6, [r8]
 8008e46:	1a3f      	subs	r7, r7, r0
 8008e48:	42b7      	cmp	r7, r6
 8008e4a:	dd64      	ble.n	8008f16 <__gethex+0x260>
 8008e4c:	1bbf      	subs	r7, r7, r6
 8008e4e:	4639      	mov	r1, r7
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 fe13 	bl	8009a7c <__any_on>
 8008e56:	4682      	mov	sl, r0
 8008e58:	b178      	cbz	r0, 8008e7a <__gethex+0x1c4>
 8008e5a:	1e7b      	subs	r3, r7, #1
 8008e5c:	1159      	asrs	r1, r3, #5
 8008e5e:	f003 021f 	and.w	r2, r3, #31
 8008e62:	f04f 0a01 	mov.w	sl, #1
 8008e66:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e6a:	fa0a f202 	lsl.w	r2, sl, r2
 8008e6e:	420a      	tst	r2, r1
 8008e70:	d003      	beq.n	8008e7a <__gethex+0x1c4>
 8008e72:	4553      	cmp	r3, sl
 8008e74:	dc46      	bgt.n	8008f04 <__gethex+0x24e>
 8008e76:	f04f 0a02 	mov.w	sl, #2
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f7ff fecb 	bl	8008c18 <rshift>
 8008e82:	443c      	add	r4, r7
 8008e84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	da52      	bge.n	8008f32 <__gethex+0x27c>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	9802      	ldr	r0, [sp, #8]
 8008e90:	f000 fa4a 	bl	8009328 <_Bfree>
 8008e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e96:	2300      	movs	r3, #0
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	27a3      	movs	r7, #163	; 0xa3
 8008e9c:	e793      	b.n	8008dc6 <__gethex+0x110>
 8008e9e:	3101      	adds	r1, #1
 8008ea0:	105b      	asrs	r3, r3, #1
 8008ea2:	e7b0      	b.n	8008e06 <__gethex+0x150>
 8008ea4:	1e73      	subs	r3, r6, #1
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	9a07      	ldr	r2, [sp, #28]
 8008eaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d018      	beq.n	8008ee4 <__gethex+0x22e>
 8008eb2:	f1bb 0f20 	cmp.w	fp, #32
 8008eb6:	d107      	bne.n	8008ec8 <__gethex+0x212>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	f8c3 a000 	str.w	sl, [r3]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	f04f 0a00 	mov.w	sl, #0
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	46d3      	mov	fp, sl
 8008ec8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ecc:	f7ff fede 	bl	8008c8c <__hexdig_fun>
 8008ed0:	f000 000f 	and.w	r0, r0, #15
 8008ed4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ed8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008edc:	f10b 0b04 	add.w	fp, fp, #4
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	e00d      	b.n	8008f00 <__gethex+0x24a>
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	9a08      	ldr	r2, [sp, #32]
 8008ee8:	4413      	add	r3, r2
 8008eea:	42bb      	cmp	r3, r7
 8008eec:	d3e1      	bcc.n	8008eb2 <__gethex+0x1fc>
 8008eee:	4618      	mov	r0, r3
 8008ef0:	9a01      	ldr	r2, [sp, #4]
 8008ef2:	9903      	ldr	r1, [sp, #12]
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	f000 fffb 	bl	8009ef0 <strncmp>
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d1d8      	bne.n	8008eb2 <__gethex+0x1fc>
 8008f00:	461e      	mov	r6, r3
 8008f02:	e791      	b.n	8008e28 <__gethex+0x172>
 8008f04:	1eb9      	subs	r1, r7, #2
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fdb8 	bl	8009a7c <__any_on>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d0b2      	beq.n	8008e76 <__gethex+0x1c0>
 8008f10:	f04f 0a03 	mov.w	sl, #3
 8008f14:	e7b1      	b.n	8008e7a <__gethex+0x1c4>
 8008f16:	da09      	bge.n	8008f2c <__gethex+0x276>
 8008f18:	1bf7      	subs	r7, r6, r7
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	463a      	mov	r2, r7
 8008f1e:	9802      	ldr	r0, [sp, #8]
 8008f20:	f000 fbce 	bl	80096c0 <__lshift>
 8008f24:	1be4      	subs	r4, r4, r7
 8008f26:	4605      	mov	r5, r0
 8008f28:	f100 0914 	add.w	r9, r0, #20
 8008f2c:	f04f 0a00 	mov.w	sl, #0
 8008f30:	e7a8      	b.n	8008e84 <__gethex+0x1ce>
 8008f32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f36:	42a0      	cmp	r0, r4
 8008f38:	dd6a      	ble.n	8009010 <__gethex+0x35a>
 8008f3a:	1b04      	subs	r4, r0, r4
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	dc2e      	bgt.n	8008f9e <__gethex+0x2e8>
 8008f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d022      	beq.n	8008f8e <__gethex+0x2d8>
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d024      	beq.n	8008f96 <__gethex+0x2e0>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d115      	bne.n	8008f7c <__gethex+0x2c6>
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d113      	bne.n	8008f7c <__gethex+0x2c6>
 8008f54:	2e01      	cmp	r6, #1
 8008f56:	dc0b      	bgt.n	8008f70 <__gethex+0x2ba>
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	2301      	movs	r3, #1
 8008f62:	612b      	str	r3, [r5, #16]
 8008f64:	f8c9 3000 	str.w	r3, [r9]
 8008f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f6a:	2762      	movs	r7, #98	; 0x62
 8008f6c:	601d      	str	r5, [r3, #0]
 8008f6e:	e72a      	b.n	8008dc6 <__gethex+0x110>
 8008f70:	1e71      	subs	r1, r6, #1
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 fd82 	bl	8009a7c <__any_on>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1ed      	bne.n	8008f58 <__gethex+0x2a2>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	9802      	ldr	r0, [sp, #8]
 8008f80:	f000 f9d2 	bl	8009328 <_Bfree>
 8008f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f86:	2300      	movs	r3, #0
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	2750      	movs	r7, #80	; 0x50
 8008f8c:	e71b      	b.n	8008dc6 <__gethex+0x110>
 8008f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0e1      	beq.n	8008f58 <__gethex+0x2a2>
 8008f94:	e7f2      	b.n	8008f7c <__gethex+0x2c6>
 8008f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1dd      	bne.n	8008f58 <__gethex+0x2a2>
 8008f9c:	e7ee      	b.n	8008f7c <__gethex+0x2c6>
 8008f9e:	1e67      	subs	r7, r4, #1
 8008fa0:	f1ba 0f00 	cmp.w	sl, #0
 8008fa4:	d131      	bne.n	800900a <__gethex+0x354>
 8008fa6:	b127      	cbz	r7, 8008fb2 <__gethex+0x2fc>
 8008fa8:	4639      	mov	r1, r7
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 fd66 	bl	8009a7c <__any_on>
 8008fb0:	4682      	mov	sl, r0
 8008fb2:	117a      	asrs	r2, r7, #5
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f007 071f 	and.w	r7, r7, #31
 8008fba:	fa03 f707 	lsl.w	r7, r3, r7
 8008fbe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	421f      	tst	r7, r3
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	bf18      	it	ne
 8008fca:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fce:	1b36      	subs	r6, r6, r4
 8008fd0:	f7ff fe22 	bl	8008c18 <rshift>
 8008fd4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008fd8:	2702      	movs	r7, #2
 8008fda:	f1ba 0f00 	cmp.w	sl, #0
 8008fde:	d048      	beq.n	8009072 <__gethex+0x3bc>
 8008fe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d015      	beq.n	8009014 <__gethex+0x35e>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d017      	beq.n	800901c <__gethex+0x366>
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d109      	bne.n	8009004 <__gethex+0x34e>
 8008ff0:	f01a 0f02 	tst.w	sl, #2
 8008ff4:	d006      	beq.n	8009004 <__gethex+0x34e>
 8008ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8008ffa:	ea4a 0a03 	orr.w	sl, sl, r3
 8008ffe:	f01a 0f01 	tst.w	sl, #1
 8009002:	d10e      	bne.n	8009022 <__gethex+0x36c>
 8009004:	f047 0710 	orr.w	r7, r7, #16
 8009008:	e033      	b.n	8009072 <__gethex+0x3bc>
 800900a:	f04f 0a01 	mov.w	sl, #1
 800900e:	e7d0      	b.n	8008fb2 <__gethex+0x2fc>
 8009010:	2701      	movs	r7, #1
 8009012:	e7e2      	b.n	8008fda <__gethex+0x324>
 8009014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009016:	f1c3 0301 	rsb	r3, r3, #1
 800901a:	9315      	str	r3, [sp, #84]	; 0x54
 800901c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0f0      	beq.n	8009004 <__gethex+0x34e>
 8009022:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009026:	f105 0314 	add.w	r3, r5, #20
 800902a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800902e:	eb03 010a 	add.w	r1, r3, sl
 8009032:	f04f 0c00 	mov.w	ip, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f853 2b04 	ldr.w	r2, [r3], #4
 800903c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009040:	d01c      	beq.n	800907c <__gethex+0x3c6>
 8009042:	3201      	adds	r2, #1
 8009044:	6002      	str	r2, [r0, #0]
 8009046:	2f02      	cmp	r7, #2
 8009048:	f105 0314 	add.w	r3, r5, #20
 800904c:	d138      	bne.n	80090c0 <__gethex+0x40a>
 800904e:	f8d8 2000 	ldr.w	r2, [r8]
 8009052:	3a01      	subs	r2, #1
 8009054:	42b2      	cmp	r2, r6
 8009056:	d10a      	bne.n	800906e <__gethex+0x3b8>
 8009058:	1171      	asrs	r1, r6, #5
 800905a:	2201      	movs	r2, #1
 800905c:	f006 061f 	and.w	r6, r6, #31
 8009060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009064:	fa02 f606 	lsl.w	r6, r2, r6
 8009068:	421e      	tst	r6, r3
 800906a:	bf18      	it	ne
 800906c:	4617      	movne	r7, r2
 800906e:	f047 0720 	orr.w	r7, r7, #32
 8009072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009074:	601d      	str	r5, [r3, #0]
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	601c      	str	r4, [r3, #0]
 800907a:	e6a4      	b.n	8008dc6 <__gethex+0x110>
 800907c:	4299      	cmp	r1, r3
 800907e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009082:	d8d8      	bhi.n	8009036 <__gethex+0x380>
 8009084:	68ab      	ldr	r3, [r5, #8]
 8009086:	4599      	cmp	r9, r3
 8009088:	db12      	blt.n	80090b0 <__gethex+0x3fa>
 800908a:	6869      	ldr	r1, [r5, #4]
 800908c:	9802      	ldr	r0, [sp, #8]
 800908e:	3101      	adds	r1, #1
 8009090:	f000 f916 	bl	80092c0 <_Balloc>
 8009094:	692a      	ldr	r2, [r5, #16]
 8009096:	3202      	adds	r2, #2
 8009098:	f105 010c 	add.w	r1, r5, #12
 800909c:	4683      	mov	fp, r0
 800909e:	0092      	lsls	r2, r2, #2
 80090a0:	300c      	adds	r0, #12
 80090a2:	f7fd fa4d 	bl	8006540 <memcpy>
 80090a6:	4629      	mov	r1, r5
 80090a8:	9802      	ldr	r0, [sp, #8]
 80090aa:	f000 f93d 	bl	8009328 <_Bfree>
 80090ae:	465d      	mov	r5, fp
 80090b0:	692b      	ldr	r3, [r5, #16]
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80090b8:	612a      	str	r2, [r5, #16]
 80090ba:	2201      	movs	r2, #1
 80090bc:	615a      	str	r2, [r3, #20]
 80090be:	e7c2      	b.n	8009046 <__gethex+0x390>
 80090c0:	692a      	ldr	r2, [r5, #16]
 80090c2:	454a      	cmp	r2, r9
 80090c4:	dd0b      	ble.n	80090de <__gethex+0x428>
 80090c6:	2101      	movs	r1, #1
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7ff fda5 	bl	8008c18 <rshift>
 80090ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090d2:	3401      	adds	r4, #1
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	f6ff aed9 	blt.w	8008e8c <__gethex+0x1d6>
 80090da:	2701      	movs	r7, #1
 80090dc:	e7c7      	b.n	800906e <__gethex+0x3b8>
 80090de:	f016 061f 	ands.w	r6, r6, #31
 80090e2:	d0fa      	beq.n	80090da <__gethex+0x424>
 80090e4:	449a      	add	sl, r3
 80090e6:	f1c6 0620 	rsb	r6, r6, #32
 80090ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80090ee:	f000 f9ab 	bl	8009448 <__hi0bits>
 80090f2:	42b0      	cmp	r0, r6
 80090f4:	dbe7      	blt.n	80090c6 <__gethex+0x410>
 80090f6:	e7f0      	b.n	80090da <__gethex+0x424>

080090f8 <L_shift>:
 80090f8:	f1c2 0208 	rsb	r2, r2, #8
 80090fc:	0092      	lsls	r2, r2, #2
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	f1c2 0620 	rsb	r6, r2, #32
 8009104:	6843      	ldr	r3, [r0, #4]
 8009106:	6804      	ldr	r4, [r0, #0]
 8009108:	fa03 f506 	lsl.w	r5, r3, r6
 800910c:	432c      	orrs	r4, r5
 800910e:	40d3      	lsrs	r3, r2
 8009110:	6004      	str	r4, [r0, #0]
 8009112:	f840 3f04 	str.w	r3, [r0, #4]!
 8009116:	4288      	cmp	r0, r1
 8009118:	d3f4      	bcc.n	8009104 <L_shift+0xc>
 800911a:	bd70      	pop	{r4, r5, r6, pc}

0800911c <__match>:
 800911c:	b530      	push	{r4, r5, lr}
 800911e:	6803      	ldr	r3, [r0, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009126:	b914      	cbnz	r4, 800912e <__match+0x12>
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	2001      	movs	r0, #1
 800912c:	bd30      	pop	{r4, r5, pc}
 800912e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009132:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009136:	2d19      	cmp	r5, #25
 8009138:	bf98      	it	ls
 800913a:	3220      	addls	r2, #32
 800913c:	42a2      	cmp	r2, r4
 800913e:	d0f0      	beq.n	8009122 <__match+0x6>
 8009140:	2000      	movs	r0, #0
 8009142:	e7f3      	b.n	800912c <__match+0x10>

08009144 <__hexnan>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	680b      	ldr	r3, [r1, #0]
 800914a:	6801      	ldr	r1, [r0, #0]
 800914c:	115f      	asrs	r7, r3, #5
 800914e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009152:	f013 031f 	ands.w	r3, r3, #31
 8009156:	b087      	sub	sp, #28
 8009158:	bf18      	it	ne
 800915a:	3704      	addne	r7, #4
 800915c:	2500      	movs	r5, #0
 800915e:	1f3e      	subs	r6, r7, #4
 8009160:	4682      	mov	sl, r0
 8009162:	4690      	mov	r8, r2
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	f847 5c04 	str.w	r5, [r7, #-4]
 800916a:	46b1      	mov	r9, r6
 800916c:	4634      	mov	r4, r6
 800916e:	9502      	str	r5, [sp, #8]
 8009170:	46ab      	mov	fp, r5
 8009172:	784a      	ldrb	r2, [r1, #1]
 8009174:	1c4b      	adds	r3, r1, #1
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	b342      	cbz	r2, 80091cc <__hexnan+0x88>
 800917a:	4610      	mov	r0, r2
 800917c:	9105      	str	r1, [sp, #20]
 800917e:	9204      	str	r2, [sp, #16]
 8009180:	f7ff fd84 	bl	8008c8c <__hexdig_fun>
 8009184:	2800      	cmp	r0, #0
 8009186:	d143      	bne.n	8009210 <__hexnan+0xcc>
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	9905      	ldr	r1, [sp, #20]
 800918c:	2a20      	cmp	r2, #32
 800918e:	d818      	bhi.n	80091c2 <__hexnan+0x7e>
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	459b      	cmp	fp, r3
 8009194:	dd13      	ble.n	80091be <__hexnan+0x7a>
 8009196:	454c      	cmp	r4, r9
 8009198:	d206      	bcs.n	80091a8 <__hexnan+0x64>
 800919a:	2d07      	cmp	r5, #7
 800919c:	dc04      	bgt.n	80091a8 <__hexnan+0x64>
 800919e:	462a      	mov	r2, r5
 80091a0:	4649      	mov	r1, r9
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff ffa8 	bl	80090f8 <L_shift>
 80091a8:	4544      	cmp	r4, r8
 80091aa:	d944      	bls.n	8009236 <__hexnan+0xf2>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f1a4 0904 	sub.w	r9, r4, #4
 80091b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80091b6:	f8cd b008 	str.w	fp, [sp, #8]
 80091ba:	464c      	mov	r4, r9
 80091bc:	461d      	mov	r5, r3
 80091be:	9903      	ldr	r1, [sp, #12]
 80091c0:	e7d7      	b.n	8009172 <__hexnan+0x2e>
 80091c2:	2a29      	cmp	r2, #41	; 0x29
 80091c4:	d14a      	bne.n	800925c <__hexnan+0x118>
 80091c6:	3102      	adds	r1, #2
 80091c8:	f8ca 1000 	str.w	r1, [sl]
 80091cc:	f1bb 0f00 	cmp.w	fp, #0
 80091d0:	d044      	beq.n	800925c <__hexnan+0x118>
 80091d2:	454c      	cmp	r4, r9
 80091d4:	d206      	bcs.n	80091e4 <__hexnan+0xa0>
 80091d6:	2d07      	cmp	r5, #7
 80091d8:	dc04      	bgt.n	80091e4 <__hexnan+0xa0>
 80091da:	462a      	mov	r2, r5
 80091dc:	4649      	mov	r1, r9
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff ff8a 	bl	80090f8 <L_shift>
 80091e4:	4544      	cmp	r4, r8
 80091e6:	d928      	bls.n	800923a <__hexnan+0xf6>
 80091e8:	4643      	mov	r3, r8
 80091ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80091ee:	f843 2b04 	str.w	r2, [r3], #4
 80091f2:	42a6      	cmp	r6, r4
 80091f4:	d2f9      	bcs.n	80091ea <__hexnan+0xa6>
 80091f6:	2200      	movs	r2, #0
 80091f8:	f843 2b04 	str.w	r2, [r3], #4
 80091fc:	429e      	cmp	r6, r3
 80091fe:	d2fb      	bcs.n	80091f8 <__hexnan+0xb4>
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	b91b      	cbnz	r3, 800920c <__hexnan+0xc8>
 8009204:	4546      	cmp	r6, r8
 8009206:	d127      	bne.n	8009258 <__hexnan+0x114>
 8009208:	2301      	movs	r3, #1
 800920a:	6033      	str	r3, [r6, #0]
 800920c:	2005      	movs	r0, #5
 800920e:	e026      	b.n	800925e <__hexnan+0x11a>
 8009210:	3501      	adds	r5, #1
 8009212:	2d08      	cmp	r5, #8
 8009214:	f10b 0b01 	add.w	fp, fp, #1
 8009218:	dd06      	ble.n	8009228 <__hexnan+0xe4>
 800921a:	4544      	cmp	r4, r8
 800921c:	d9cf      	bls.n	80091be <__hexnan+0x7a>
 800921e:	2300      	movs	r3, #0
 8009220:	f844 3c04 	str.w	r3, [r4, #-4]
 8009224:	2501      	movs	r5, #1
 8009226:	3c04      	subs	r4, #4
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	f000 000f 	and.w	r0, r0, #15
 800922e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009232:	6020      	str	r0, [r4, #0]
 8009234:	e7c3      	b.n	80091be <__hexnan+0x7a>
 8009236:	2508      	movs	r5, #8
 8009238:	e7c1      	b.n	80091be <__hexnan+0x7a>
 800923a:	9b01      	ldr	r3, [sp, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0df      	beq.n	8009200 <__hexnan+0xbc>
 8009240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009244:	f1c3 0320 	rsb	r3, r3, #32
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
 800924c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009250:	401a      	ands	r2, r3
 8009252:	f847 2c04 	str.w	r2, [r7, #-4]
 8009256:	e7d3      	b.n	8009200 <__hexnan+0xbc>
 8009258:	3e04      	subs	r6, #4
 800925a:	e7d1      	b.n	8009200 <__hexnan+0xbc>
 800925c:	2004      	movs	r0, #4
 800925e:	b007      	add	sp, #28
 8009260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009264 <__locale_ctype_ptr_l>:
 8009264:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009268:	4770      	bx	lr

0800926a <__localeconv_l>:
 800926a:	30f0      	adds	r0, #240	; 0xf0
 800926c:	4770      	bx	lr
	...

08009270 <_localeconv_r>:
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <_localeconv_r+0x14>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6a18      	ldr	r0, [r3, #32]
 8009276:	4b04      	ldr	r3, [pc, #16]	; (8009288 <_localeconv_r+0x18>)
 8009278:	2800      	cmp	r0, #0
 800927a:	bf08      	it	eq
 800927c:	4618      	moveq	r0, r3
 800927e:	30f0      	adds	r0, #240	; 0xf0
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000018 	.word	0x20000018
 8009288:	2000007c 	.word	0x2000007c

0800928c <malloc>:
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <malloc+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f000 bc71 	b.w	8009b78 <_malloc_r>
 8009296:	bf00      	nop
 8009298:	20000018 	.word	0x20000018

0800929c <__ascii_mbtowc>:
 800929c:	b082      	sub	sp, #8
 800929e:	b901      	cbnz	r1, 80092a2 <__ascii_mbtowc+0x6>
 80092a0:	a901      	add	r1, sp, #4
 80092a2:	b142      	cbz	r2, 80092b6 <__ascii_mbtowc+0x1a>
 80092a4:	b14b      	cbz	r3, 80092ba <__ascii_mbtowc+0x1e>
 80092a6:	7813      	ldrb	r3, [r2, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	1c10      	adds	r0, r2, #0
 80092ae:	bf18      	it	ne
 80092b0:	2001      	movne	r0, #1
 80092b2:	b002      	add	sp, #8
 80092b4:	4770      	bx	lr
 80092b6:	4610      	mov	r0, r2
 80092b8:	e7fb      	b.n	80092b2 <__ascii_mbtowc+0x16>
 80092ba:	f06f 0001 	mvn.w	r0, #1
 80092be:	e7f8      	b.n	80092b2 <__ascii_mbtowc+0x16>

080092c0 <_Balloc>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092c4:	4604      	mov	r4, r0
 80092c6:	460e      	mov	r6, r1
 80092c8:	b93d      	cbnz	r5, 80092da <_Balloc+0x1a>
 80092ca:	2010      	movs	r0, #16
 80092cc:	f7ff ffde 	bl	800928c <malloc>
 80092d0:	6260      	str	r0, [r4, #36]	; 0x24
 80092d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092d6:	6005      	str	r5, [r0, #0]
 80092d8:	60c5      	str	r5, [r0, #12]
 80092da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80092dc:	68eb      	ldr	r3, [r5, #12]
 80092de:	b183      	cbz	r3, 8009302 <_Balloc+0x42>
 80092e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092e8:	b9b8      	cbnz	r0, 800931a <_Balloc+0x5a>
 80092ea:	2101      	movs	r1, #1
 80092ec:	fa01 f506 	lsl.w	r5, r1, r6
 80092f0:	1d6a      	adds	r2, r5, #5
 80092f2:	0092      	lsls	r2, r2, #2
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fbe2 	bl	8009abe <_calloc_r>
 80092fa:	b160      	cbz	r0, 8009316 <_Balloc+0x56>
 80092fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009300:	e00e      	b.n	8009320 <_Balloc+0x60>
 8009302:	2221      	movs	r2, #33	; 0x21
 8009304:	2104      	movs	r1, #4
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fbd9 	bl	8009abe <_calloc_r>
 800930c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930e:	60e8      	str	r0, [r5, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e4      	bne.n	80092e0 <_Balloc+0x20>
 8009316:	2000      	movs	r0, #0
 8009318:	bd70      	pop	{r4, r5, r6, pc}
 800931a:	6802      	ldr	r2, [r0, #0]
 800931c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009320:	2300      	movs	r3, #0
 8009322:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009326:	e7f7      	b.n	8009318 <_Balloc+0x58>

08009328 <_Bfree>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800932c:	4606      	mov	r6, r0
 800932e:	460d      	mov	r5, r1
 8009330:	b93c      	cbnz	r4, 8009342 <_Bfree+0x1a>
 8009332:	2010      	movs	r0, #16
 8009334:	f7ff ffaa 	bl	800928c <malloc>
 8009338:	6270      	str	r0, [r6, #36]	; 0x24
 800933a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800933e:	6004      	str	r4, [r0, #0]
 8009340:	60c4      	str	r4, [r0, #12]
 8009342:	b13d      	cbz	r5, 8009354 <_Bfree+0x2c>
 8009344:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009346:	686a      	ldr	r2, [r5, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800934e:	6029      	str	r1, [r5, #0]
 8009350:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009354:	bd70      	pop	{r4, r5, r6, pc}

08009356 <__multadd>:
 8009356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	690d      	ldr	r5, [r1, #16]
 800935c:	461f      	mov	r7, r3
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	f101 0c14 	add.w	ip, r1, #20
 8009366:	2300      	movs	r3, #0
 8009368:	f8dc 0000 	ldr.w	r0, [ip]
 800936c:	b281      	uxth	r1, r0
 800936e:	fb02 7101 	mla	r1, r2, r1, r7
 8009372:	0c0f      	lsrs	r7, r1, #16
 8009374:	0c00      	lsrs	r0, r0, #16
 8009376:	fb02 7000 	mla	r0, r2, r0, r7
 800937a:	b289      	uxth	r1, r1
 800937c:	3301      	adds	r3, #1
 800937e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009382:	429d      	cmp	r5, r3
 8009384:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009388:	f84c 1b04 	str.w	r1, [ip], #4
 800938c:	dcec      	bgt.n	8009368 <__multadd+0x12>
 800938e:	b1d7      	cbz	r7, 80093c6 <__multadd+0x70>
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	42ab      	cmp	r3, r5
 8009394:	dc12      	bgt.n	80093bc <__multadd+0x66>
 8009396:	6861      	ldr	r1, [r4, #4]
 8009398:	4630      	mov	r0, r6
 800939a:	3101      	adds	r1, #1
 800939c:	f7ff ff90 	bl	80092c0 <_Balloc>
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	3202      	adds	r2, #2
 80093a4:	f104 010c 	add.w	r1, r4, #12
 80093a8:	4680      	mov	r8, r0
 80093aa:	0092      	lsls	r2, r2, #2
 80093ac:	300c      	adds	r0, #12
 80093ae:	f7fd f8c7 	bl	8006540 <memcpy>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff ffb7 	bl	8009328 <_Bfree>
 80093ba:	4644      	mov	r4, r8
 80093bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c0:	3501      	adds	r5, #1
 80093c2:	615f      	str	r7, [r3, #20]
 80093c4:	6125      	str	r5, [r4, #16]
 80093c6:	4620      	mov	r0, r4
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093cc <__s2b>:
 80093cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d0:	460c      	mov	r4, r1
 80093d2:	4615      	mov	r5, r2
 80093d4:	461f      	mov	r7, r3
 80093d6:	2209      	movs	r2, #9
 80093d8:	3308      	adds	r3, #8
 80093da:	4606      	mov	r6, r0
 80093dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e0:	2100      	movs	r1, #0
 80093e2:	2201      	movs	r2, #1
 80093e4:	429a      	cmp	r2, r3
 80093e6:	db20      	blt.n	800942a <__s2b+0x5e>
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ff69 	bl	80092c0 <_Balloc>
 80093ee:	9b08      	ldr	r3, [sp, #32]
 80093f0:	6143      	str	r3, [r0, #20]
 80093f2:	2d09      	cmp	r5, #9
 80093f4:	f04f 0301 	mov.w	r3, #1
 80093f8:	6103      	str	r3, [r0, #16]
 80093fa:	dd19      	ble.n	8009430 <__s2b+0x64>
 80093fc:	f104 0809 	add.w	r8, r4, #9
 8009400:	46c1      	mov	r9, r8
 8009402:	442c      	add	r4, r5
 8009404:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009408:	4601      	mov	r1, r0
 800940a:	3b30      	subs	r3, #48	; 0x30
 800940c:	220a      	movs	r2, #10
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ffa1 	bl	8009356 <__multadd>
 8009414:	45a1      	cmp	r9, r4
 8009416:	d1f5      	bne.n	8009404 <__s2b+0x38>
 8009418:	eb08 0405 	add.w	r4, r8, r5
 800941c:	3c08      	subs	r4, #8
 800941e:	1b2d      	subs	r5, r5, r4
 8009420:	1963      	adds	r3, r4, r5
 8009422:	42bb      	cmp	r3, r7
 8009424:	db07      	blt.n	8009436 <__s2b+0x6a>
 8009426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942a:	0052      	lsls	r2, r2, #1
 800942c:	3101      	adds	r1, #1
 800942e:	e7d9      	b.n	80093e4 <__s2b+0x18>
 8009430:	340a      	adds	r4, #10
 8009432:	2509      	movs	r5, #9
 8009434:	e7f3      	b.n	800941e <__s2b+0x52>
 8009436:	f814 3b01 	ldrb.w	r3, [r4], #1
 800943a:	4601      	mov	r1, r0
 800943c:	3b30      	subs	r3, #48	; 0x30
 800943e:	220a      	movs	r2, #10
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff ff88 	bl	8009356 <__multadd>
 8009446:	e7eb      	b.n	8009420 <__s2b+0x54>

08009448 <__hi0bits>:
 8009448:	0c02      	lsrs	r2, r0, #16
 800944a:	0412      	lsls	r2, r2, #16
 800944c:	4603      	mov	r3, r0
 800944e:	b9b2      	cbnz	r2, 800947e <__hi0bits+0x36>
 8009450:	0403      	lsls	r3, r0, #16
 8009452:	2010      	movs	r0, #16
 8009454:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009458:	bf04      	itt	eq
 800945a:	021b      	lsleq	r3, r3, #8
 800945c:	3008      	addeq	r0, #8
 800945e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009462:	bf04      	itt	eq
 8009464:	011b      	lsleq	r3, r3, #4
 8009466:	3004      	addeq	r0, #4
 8009468:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800946c:	bf04      	itt	eq
 800946e:	009b      	lsleq	r3, r3, #2
 8009470:	3002      	addeq	r0, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	db06      	blt.n	8009484 <__hi0bits+0x3c>
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	d503      	bpl.n	8009482 <__hi0bits+0x3a>
 800947a:	3001      	adds	r0, #1
 800947c:	4770      	bx	lr
 800947e:	2000      	movs	r0, #0
 8009480:	e7e8      	b.n	8009454 <__hi0bits+0xc>
 8009482:	2020      	movs	r0, #32
 8009484:	4770      	bx	lr

08009486 <__lo0bits>:
 8009486:	6803      	ldr	r3, [r0, #0]
 8009488:	f013 0207 	ands.w	r2, r3, #7
 800948c:	4601      	mov	r1, r0
 800948e:	d00b      	beq.n	80094a8 <__lo0bits+0x22>
 8009490:	07da      	lsls	r2, r3, #31
 8009492:	d423      	bmi.n	80094dc <__lo0bits+0x56>
 8009494:	0798      	lsls	r0, r3, #30
 8009496:	bf49      	itett	mi
 8009498:	085b      	lsrmi	r3, r3, #1
 800949a:	089b      	lsrpl	r3, r3, #2
 800949c:	2001      	movmi	r0, #1
 800949e:	600b      	strmi	r3, [r1, #0]
 80094a0:	bf5c      	itt	pl
 80094a2:	600b      	strpl	r3, [r1, #0]
 80094a4:	2002      	movpl	r0, #2
 80094a6:	4770      	bx	lr
 80094a8:	b298      	uxth	r0, r3
 80094aa:	b9a8      	cbnz	r0, 80094d8 <__lo0bits+0x52>
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	2010      	movs	r0, #16
 80094b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094b4:	bf04      	itt	eq
 80094b6:	0a1b      	lsreq	r3, r3, #8
 80094b8:	3008      	addeq	r0, #8
 80094ba:	071a      	lsls	r2, r3, #28
 80094bc:	bf04      	itt	eq
 80094be:	091b      	lsreq	r3, r3, #4
 80094c0:	3004      	addeq	r0, #4
 80094c2:	079a      	lsls	r2, r3, #30
 80094c4:	bf04      	itt	eq
 80094c6:	089b      	lsreq	r3, r3, #2
 80094c8:	3002      	addeq	r0, #2
 80094ca:	07da      	lsls	r2, r3, #31
 80094cc:	d402      	bmi.n	80094d4 <__lo0bits+0x4e>
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	d006      	beq.n	80094e0 <__lo0bits+0x5a>
 80094d2:	3001      	adds	r0, #1
 80094d4:	600b      	str	r3, [r1, #0]
 80094d6:	4770      	bx	lr
 80094d8:	4610      	mov	r0, r2
 80094da:	e7e9      	b.n	80094b0 <__lo0bits+0x2a>
 80094dc:	2000      	movs	r0, #0
 80094de:	4770      	bx	lr
 80094e0:	2020      	movs	r0, #32
 80094e2:	4770      	bx	lr

080094e4 <__i2b>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7ff fee9 	bl	80092c0 <_Balloc>
 80094ee:	2201      	movs	r2, #1
 80094f0:	6144      	str	r4, [r0, #20]
 80094f2:	6102      	str	r2, [r0, #16]
 80094f4:	bd10      	pop	{r4, pc}

080094f6 <__multiply>:
 80094f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	4614      	mov	r4, r2
 80094fc:	690a      	ldr	r2, [r1, #16]
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	429a      	cmp	r2, r3
 8009502:	bfb8      	it	lt
 8009504:	460b      	movlt	r3, r1
 8009506:	4688      	mov	r8, r1
 8009508:	bfbc      	itt	lt
 800950a:	46a0      	movlt	r8, r4
 800950c:	461c      	movlt	r4, r3
 800950e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009512:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800951a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800951e:	eb07 0609 	add.w	r6, r7, r9
 8009522:	42b3      	cmp	r3, r6
 8009524:	bfb8      	it	lt
 8009526:	3101      	addlt	r1, #1
 8009528:	f7ff feca 	bl	80092c0 <_Balloc>
 800952c:	f100 0514 	add.w	r5, r0, #20
 8009530:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009534:	462b      	mov	r3, r5
 8009536:	2200      	movs	r2, #0
 8009538:	4573      	cmp	r3, lr
 800953a:	d316      	bcc.n	800956a <__multiply+0x74>
 800953c:	f104 0214 	add.w	r2, r4, #20
 8009540:	f108 0114 	add.w	r1, r8, #20
 8009544:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009548:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	9201      	str	r2, [sp, #4]
 8009552:	4293      	cmp	r3, r2
 8009554:	d80c      	bhi.n	8009570 <__multiply+0x7a>
 8009556:	2e00      	cmp	r6, #0
 8009558:	dd03      	ble.n	8009562 <__multiply+0x6c>
 800955a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800955e:	2b00      	cmp	r3, #0
 8009560:	d05d      	beq.n	800961e <__multiply+0x128>
 8009562:	6106      	str	r6, [r0, #16]
 8009564:	b003      	add	sp, #12
 8009566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956a:	f843 2b04 	str.w	r2, [r3], #4
 800956e:	e7e3      	b.n	8009538 <__multiply+0x42>
 8009570:	f8b2 b000 	ldrh.w	fp, [r2]
 8009574:	f1bb 0f00 	cmp.w	fp, #0
 8009578:	d023      	beq.n	80095c2 <__multiply+0xcc>
 800957a:	4689      	mov	r9, r1
 800957c:	46ac      	mov	ip, r5
 800957e:	f04f 0800 	mov.w	r8, #0
 8009582:	f859 4b04 	ldr.w	r4, [r9], #4
 8009586:	f8dc a000 	ldr.w	sl, [ip]
 800958a:	b2a3      	uxth	r3, r4
 800958c:	fa1f fa8a 	uxth.w	sl, sl
 8009590:	fb0b a303 	mla	r3, fp, r3, sl
 8009594:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009598:	f8dc 4000 	ldr.w	r4, [ip]
 800959c:	4443      	add	r3, r8
 800959e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095a2:	fb0b 840a 	mla	r4, fp, sl, r8
 80095a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80095aa:	46e2      	mov	sl, ip
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095b2:	454f      	cmp	r7, r9
 80095b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095b8:	f84a 3b04 	str.w	r3, [sl], #4
 80095bc:	d82b      	bhi.n	8009616 <__multiply+0x120>
 80095be:	f8cc 8004 	str.w	r8, [ip, #4]
 80095c2:	9b01      	ldr	r3, [sp, #4]
 80095c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80095c8:	3204      	adds	r2, #4
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d020      	beq.n	8009612 <__multiply+0x11c>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	4689      	mov	r9, r1
 80095d4:	46a8      	mov	r8, r5
 80095d6:	f04f 0b00 	mov.w	fp, #0
 80095da:	f8b9 c000 	ldrh.w	ip, [r9]
 80095de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80095e2:	fb0a 440c 	mla	r4, sl, ip, r4
 80095e6:	445c      	add	r4, fp
 80095e8:	46c4      	mov	ip, r8
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095f0:	f84c 3b04 	str.w	r3, [ip], #4
 80095f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	fb0a b303 	mla	r3, sl, r3, fp
 8009602:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009606:	454f      	cmp	r7, r9
 8009608:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800960c:	d805      	bhi.n	800961a <__multiply+0x124>
 800960e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009612:	3504      	adds	r5, #4
 8009614:	e79b      	b.n	800954e <__multiply+0x58>
 8009616:	46d4      	mov	ip, sl
 8009618:	e7b3      	b.n	8009582 <__multiply+0x8c>
 800961a:	46e0      	mov	r8, ip
 800961c:	e7dd      	b.n	80095da <__multiply+0xe4>
 800961e:	3e01      	subs	r6, #1
 8009620:	e799      	b.n	8009556 <__multiply+0x60>
	...

08009624 <__pow5mult>:
 8009624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009628:	4615      	mov	r5, r2
 800962a:	f012 0203 	ands.w	r2, r2, #3
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	d007      	beq.n	8009644 <__pow5mult+0x20>
 8009634:	3a01      	subs	r2, #1
 8009636:	4c21      	ldr	r4, [pc, #132]	; (80096bc <__pow5mult+0x98>)
 8009638:	2300      	movs	r3, #0
 800963a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800963e:	f7ff fe8a 	bl	8009356 <__multadd>
 8009642:	4607      	mov	r7, r0
 8009644:	10ad      	asrs	r5, r5, #2
 8009646:	d035      	beq.n	80096b4 <__pow5mult+0x90>
 8009648:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800964a:	b93c      	cbnz	r4, 800965c <__pow5mult+0x38>
 800964c:	2010      	movs	r0, #16
 800964e:	f7ff fe1d 	bl	800928c <malloc>
 8009652:	6270      	str	r0, [r6, #36]	; 0x24
 8009654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009658:	6004      	str	r4, [r0, #0]
 800965a:	60c4      	str	r4, [r0, #12]
 800965c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009664:	b94c      	cbnz	r4, 800967a <__pow5mult+0x56>
 8009666:	f240 2171 	movw	r1, #625	; 0x271
 800966a:	4630      	mov	r0, r6
 800966c:	f7ff ff3a 	bl	80094e4 <__i2b>
 8009670:	2300      	movs	r3, #0
 8009672:	f8c8 0008 	str.w	r0, [r8, #8]
 8009676:	4604      	mov	r4, r0
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	07eb      	lsls	r3, r5, #31
 8009680:	d50a      	bpl.n	8009698 <__pow5mult+0x74>
 8009682:	4639      	mov	r1, r7
 8009684:	4622      	mov	r2, r4
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ff35 	bl	80094f6 <__multiply>
 800968c:	4639      	mov	r1, r7
 800968e:	4681      	mov	r9, r0
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff fe49 	bl	8009328 <_Bfree>
 8009696:	464f      	mov	r7, r9
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	d00b      	beq.n	80096b4 <__pow5mult+0x90>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	b938      	cbnz	r0, 80096b0 <__pow5mult+0x8c>
 80096a0:	4622      	mov	r2, r4
 80096a2:	4621      	mov	r1, r4
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff ff26 	bl	80094f6 <__multiply>
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	f8c0 8000 	str.w	r8, [r0]
 80096b0:	4604      	mov	r4, r0
 80096b2:	e7e4      	b.n	800967e <__pow5mult+0x5a>
 80096b4:	4638      	mov	r0, r7
 80096b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ba:	bf00      	nop
 80096bc:	0800a6d0 	.word	0x0800a6d0

080096c0 <__lshift>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	460c      	mov	r4, r1
 80096c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	6849      	ldr	r1, [r1, #4]
 80096ce:	eb0a 0903 	add.w	r9, sl, r3
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	4607      	mov	r7, r0
 80096d6:	4616      	mov	r6, r2
 80096d8:	f109 0501 	add.w	r5, r9, #1
 80096dc:	42ab      	cmp	r3, r5
 80096de:	db32      	blt.n	8009746 <__lshift+0x86>
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7ff fded 	bl	80092c0 <_Balloc>
 80096e6:	2300      	movs	r3, #0
 80096e8:	4680      	mov	r8, r0
 80096ea:	f100 0114 	add.w	r1, r0, #20
 80096ee:	461a      	mov	r2, r3
 80096f0:	4553      	cmp	r3, sl
 80096f2:	db2b      	blt.n	800974c <__lshift+0x8c>
 80096f4:	6920      	ldr	r0, [r4, #16]
 80096f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096fa:	f104 0314 	add.w	r3, r4, #20
 80096fe:	f016 021f 	ands.w	r2, r6, #31
 8009702:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009706:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800970a:	d025      	beq.n	8009758 <__lshift+0x98>
 800970c:	f1c2 0e20 	rsb	lr, r2, #32
 8009710:	2000      	movs	r0, #0
 8009712:	681e      	ldr	r6, [r3, #0]
 8009714:	468a      	mov	sl, r1
 8009716:	4096      	lsls	r6, r2
 8009718:	4330      	orrs	r0, r6
 800971a:	f84a 0b04 	str.w	r0, [sl], #4
 800971e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009722:	459c      	cmp	ip, r3
 8009724:	fa20 f00e 	lsr.w	r0, r0, lr
 8009728:	d814      	bhi.n	8009754 <__lshift+0x94>
 800972a:	6048      	str	r0, [r1, #4]
 800972c:	b108      	cbz	r0, 8009732 <__lshift+0x72>
 800972e:	f109 0502 	add.w	r5, r9, #2
 8009732:	3d01      	subs	r5, #1
 8009734:	4638      	mov	r0, r7
 8009736:	f8c8 5010 	str.w	r5, [r8, #16]
 800973a:	4621      	mov	r1, r4
 800973c:	f7ff fdf4 	bl	8009328 <_Bfree>
 8009740:	4640      	mov	r0, r8
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	3101      	adds	r1, #1
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	e7c7      	b.n	80096dc <__lshift+0x1c>
 800974c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009750:	3301      	adds	r3, #1
 8009752:	e7cd      	b.n	80096f0 <__lshift+0x30>
 8009754:	4651      	mov	r1, sl
 8009756:	e7dc      	b.n	8009712 <__lshift+0x52>
 8009758:	3904      	subs	r1, #4
 800975a:	f853 2b04 	ldr.w	r2, [r3], #4
 800975e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009762:	459c      	cmp	ip, r3
 8009764:	d8f9      	bhi.n	800975a <__lshift+0x9a>
 8009766:	e7e4      	b.n	8009732 <__lshift+0x72>

08009768 <__mcmp>:
 8009768:	6903      	ldr	r3, [r0, #16]
 800976a:	690a      	ldr	r2, [r1, #16]
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	b530      	push	{r4, r5, lr}
 8009770:	d10c      	bne.n	800978c <__mcmp+0x24>
 8009772:	0092      	lsls	r2, r2, #2
 8009774:	3014      	adds	r0, #20
 8009776:	3114      	adds	r1, #20
 8009778:	1884      	adds	r4, r0, r2
 800977a:	4411      	add	r1, r2
 800977c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009780:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009784:	4295      	cmp	r5, r2
 8009786:	d003      	beq.n	8009790 <__mcmp+0x28>
 8009788:	d305      	bcc.n	8009796 <__mcmp+0x2e>
 800978a:	2301      	movs	r3, #1
 800978c:	4618      	mov	r0, r3
 800978e:	bd30      	pop	{r4, r5, pc}
 8009790:	42a0      	cmp	r0, r4
 8009792:	d3f3      	bcc.n	800977c <__mcmp+0x14>
 8009794:	e7fa      	b.n	800978c <__mcmp+0x24>
 8009796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800979a:	e7f7      	b.n	800978c <__mcmp+0x24>

0800979c <__mdiff>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	460d      	mov	r5, r1
 80097a2:	4607      	mov	r7, r0
 80097a4:	4611      	mov	r1, r2
 80097a6:	4628      	mov	r0, r5
 80097a8:	4614      	mov	r4, r2
 80097aa:	f7ff ffdd 	bl	8009768 <__mcmp>
 80097ae:	1e06      	subs	r6, r0, #0
 80097b0:	d108      	bne.n	80097c4 <__mdiff+0x28>
 80097b2:	4631      	mov	r1, r6
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff fd83 	bl	80092c0 <_Balloc>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c4:	bfa4      	itt	ge
 80097c6:	4623      	movge	r3, r4
 80097c8:	462c      	movge	r4, r5
 80097ca:	4638      	mov	r0, r7
 80097cc:	6861      	ldr	r1, [r4, #4]
 80097ce:	bfa6      	itte	ge
 80097d0:	461d      	movge	r5, r3
 80097d2:	2600      	movge	r6, #0
 80097d4:	2601      	movlt	r6, #1
 80097d6:	f7ff fd73 	bl	80092c0 <_Balloc>
 80097da:	692b      	ldr	r3, [r5, #16]
 80097dc:	60c6      	str	r6, [r0, #12]
 80097de:	6926      	ldr	r6, [r4, #16]
 80097e0:	f105 0914 	add.w	r9, r5, #20
 80097e4:	f104 0214 	add.w	r2, r4, #20
 80097e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80097ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80097f0:	f100 0514 	add.w	r5, r0, #20
 80097f4:	f04f 0e00 	mov.w	lr, #0
 80097f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80097fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009800:	fa1e f18a 	uxtah	r1, lr, sl
 8009804:	b2a3      	uxth	r3, r4
 8009806:	1ac9      	subs	r1, r1, r3
 8009808:	0c23      	lsrs	r3, r4, #16
 800980a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800980e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009812:	b289      	uxth	r1, r1
 8009814:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009818:	45c8      	cmp	r8, r9
 800981a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800981e:	4694      	mov	ip, r2
 8009820:	f845 3b04 	str.w	r3, [r5], #4
 8009824:	d8e8      	bhi.n	80097f8 <__mdiff+0x5c>
 8009826:	45bc      	cmp	ip, r7
 8009828:	d304      	bcc.n	8009834 <__mdiff+0x98>
 800982a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800982e:	b183      	cbz	r3, 8009852 <__mdiff+0xb6>
 8009830:	6106      	str	r6, [r0, #16]
 8009832:	e7c5      	b.n	80097c0 <__mdiff+0x24>
 8009834:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009838:	fa1e f381 	uxtah	r3, lr, r1
 800983c:	141a      	asrs	r2, r3, #16
 800983e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009842:	b29b      	uxth	r3, r3
 8009844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009848:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800984c:	f845 3b04 	str.w	r3, [r5], #4
 8009850:	e7e9      	b.n	8009826 <__mdiff+0x8a>
 8009852:	3e01      	subs	r6, #1
 8009854:	e7e9      	b.n	800982a <__mdiff+0x8e>
	...

08009858 <__ulp>:
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <__ulp+0x4c>)
 800985a:	ee10 2a90 	vmov	r2, s1
 800985e:	401a      	ands	r2, r3
 8009860:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd04      	ble.n	8009872 <__ulp+0x1a>
 8009868:	2000      	movs	r0, #0
 800986a:	4619      	mov	r1, r3
 800986c:	ec41 0b10 	vmov	d0, r0, r1
 8009870:	4770      	bx	lr
 8009872:	425b      	negs	r3, r3
 8009874:	151b      	asrs	r3, r3, #20
 8009876:	2b13      	cmp	r3, #19
 8009878:	f04f 0000 	mov.w	r0, #0
 800987c:	f04f 0100 	mov.w	r1, #0
 8009880:	dc04      	bgt.n	800988c <__ulp+0x34>
 8009882:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009886:	fa42 f103 	asr.w	r1, r2, r3
 800988a:	e7ef      	b.n	800986c <__ulp+0x14>
 800988c:	3b14      	subs	r3, #20
 800988e:	2b1e      	cmp	r3, #30
 8009890:	f04f 0201 	mov.w	r2, #1
 8009894:	bfda      	itte	le
 8009896:	f1c3 031f 	rsble	r3, r3, #31
 800989a:	fa02 f303 	lslle.w	r3, r2, r3
 800989e:	4613      	movgt	r3, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	e7e3      	b.n	800986c <__ulp+0x14>
 80098a4:	7ff00000 	.word	0x7ff00000

080098a8 <__b2d>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	6905      	ldr	r5, [r0, #16]
 80098ac:	f100 0714 	add.w	r7, r0, #20
 80098b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80098b4:	1f2e      	subs	r6, r5, #4
 80098b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff fdc4 	bl	8009448 <__hi0bits>
 80098c0:	f1c0 0320 	rsb	r3, r0, #32
 80098c4:	280a      	cmp	r0, #10
 80098c6:	600b      	str	r3, [r1, #0]
 80098c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009940 <__b2d+0x98>
 80098cc:	dc14      	bgt.n	80098f8 <__b2d+0x50>
 80098ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80098d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80098d6:	42b7      	cmp	r7, r6
 80098d8:	ea41 030c 	orr.w	r3, r1, ip
 80098dc:	bf34      	ite	cc
 80098de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80098e2:	2100      	movcs	r1, #0
 80098e4:	3015      	adds	r0, #21
 80098e6:	fa04 f000 	lsl.w	r0, r4, r0
 80098ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80098ee:	ea40 0201 	orr.w	r2, r0, r1
 80098f2:	ec43 2b10 	vmov	d0, r2, r3
 80098f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f8:	42b7      	cmp	r7, r6
 80098fa:	bf3a      	itte	cc
 80098fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8009900:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009904:	2100      	movcs	r1, #0
 8009906:	380b      	subs	r0, #11
 8009908:	d015      	beq.n	8009936 <__b2d+0x8e>
 800990a:	4084      	lsls	r4, r0
 800990c:	f1c0 0520 	rsb	r5, r0, #32
 8009910:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009914:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009918:	42be      	cmp	r6, r7
 800991a:	fa21 fc05 	lsr.w	ip, r1, r5
 800991e:	ea44 030c 	orr.w	r3, r4, ip
 8009922:	bf8c      	ite	hi
 8009924:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009928:	2400      	movls	r4, #0
 800992a:	fa01 f000 	lsl.w	r0, r1, r0
 800992e:	40ec      	lsrs	r4, r5
 8009930:	ea40 0204 	orr.w	r2, r0, r4
 8009934:	e7dd      	b.n	80098f2 <__b2d+0x4a>
 8009936:	ea44 030c 	orr.w	r3, r4, ip
 800993a:	460a      	mov	r2, r1
 800993c:	e7d9      	b.n	80098f2 <__b2d+0x4a>
 800993e:	bf00      	nop
 8009940:	3ff00000 	.word	0x3ff00000

08009944 <__d2b>:
 8009944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009948:	460e      	mov	r6, r1
 800994a:	2101      	movs	r1, #1
 800994c:	ec59 8b10 	vmov	r8, r9, d0
 8009950:	4615      	mov	r5, r2
 8009952:	f7ff fcb5 	bl	80092c0 <_Balloc>
 8009956:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800995a:	4607      	mov	r7, r0
 800995c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009960:	bb34      	cbnz	r4, 80099b0 <__d2b+0x6c>
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	f1b8 0300 	subs.w	r3, r8, #0
 8009968:	d027      	beq.n	80099ba <__d2b+0x76>
 800996a:	a802      	add	r0, sp, #8
 800996c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009970:	f7ff fd89 	bl	8009486 <__lo0bits>
 8009974:	9900      	ldr	r1, [sp, #0]
 8009976:	b1f0      	cbz	r0, 80099b6 <__d2b+0x72>
 8009978:	9a01      	ldr	r2, [sp, #4]
 800997a:	f1c0 0320 	rsb	r3, r0, #32
 800997e:	fa02 f303 	lsl.w	r3, r2, r3
 8009982:	430b      	orrs	r3, r1
 8009984:	40c2      	lsrs	r2, r0
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	9201      	str	r2, [sp, #4]
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	61bb      	str	r3, [r7, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf14      	ite	ne
 8009992:	2102      	movne	r1, #2
 8009994:	2101      	moveq	r1, #1
 8009996:	6139      	str	r1, [r7, #16]
 8009998:	b1c4      	cbz	r4, 80099cc <__d2b+0x88>
 800999a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800999e:	4404      	add	r4, r0
 80099a0:	6034      	str	r4, [r6, #0]
 80099a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099a6:	6028      	str	r0, [r5, #0]
 80099a8:	4638      	mov	r0, r7
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099b4:	e7d5      	b.n	8009962 <__d2b+0x1e>
 80099b6:	6179      	str	r1, [r7, #20]
 80099b8:	e7e7      	b.n	800998a <__d2b+0x46>
 80099ba:	a801      	add	r0, sp, #4
 80099bc:	f7ff fd63 	bl	8009486 <__lo0bits>
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	2101      	movs	r1, #1
 80099c6:	6139      	str	r1, [r7, #16]
 80099c8:	3020      	adds	r0, #32
 80099ca:	e7e5      	b.n	8009998 <__d2b+0x54>
 80099cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099d4:	6030      	str	r0, [r6, #0]
 80099d6:	6918      	ldr	r0, [r3, #16]
 80099d8:	f7ff fd36 	bl	8009448 <__hi0bits>
 80099dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099e0:	e7e1      	b.n	80099a6 <__d2b+0x62>

080099e2 <__ratio>:
 80099e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e6:	4688      	mov	r8, r1
 80099e8:	4669      	mov	r1, sp
 80099ea:	4681      	mov	r9, r0
 80099ec:	f7ff ff5c 	bl	80098a8 <__b2d>
 80099f0:	a901      	add	r1, sp, #4
 80099f2:	4640      	mov	r0, r8
 80099f4:	ec57 6b10 	vmov	r6, r7, d0
 80099f8:	f7ff ff56 	bl	80098a8 <__b2d>
 80099fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a04:	eba3 0c02 	sub.w	ip, r3, r2
 8009a08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a12:	ec5b ab10 	vmov	sl, fp, d0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfce      	itee	gt
 8009a1a:	463a      	movgt	r2, r7
 8009a1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a20:	465a      	movle	r2, fp
 8009a22:	4659      	mov	r1, fp
 8009a24:	463d      	mov	r5, r7
 8009a26:	bfd4      	ite	le
 8009a28:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009a2c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009a30:	4630      	mov	r0, r6
 8009a32:	ee10 2a10 	vmov	r2, s0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7f6 ff27 	bl	800088c <__aeabi_ddiv>
 8009a3e:	ec41 0b10 	vmov	d0, r0, r1
 8009a42:	b003      	add	sp, #12
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a48 <__copybits>:
 8009a48:	3901      	subs	r1, #1
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	1149      	asrs	r1, r1, #5
 8009a4e:	6914      	ldr	r4, [r2, #16]
 8009a50:	3101      	adds	r1, #1
 8009a52:	f102 0314 	add.w	r3, r2, #20
 8009a56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	4602      	mov	r2, r0
 8009a62:	d303      	bcc.n	8009a6c <__copybits+0x24>
 8009a64:	2300      	movs	r3, #0
 8009a66:	428a      	cmp	r2, r1
 8009a68:	d305      	bcc.n	8009a76 <__copybits+0x2e>
 8009a6a:	bd10      	pop	{r4, pc}
 8009a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a70:	f840 2b04 	str.w	r2, [r0], #4
 8009a74:	e7f3      	b.n	8009a5e <__copybits+0x16>
 8009a76:	f842 3b04 	str.w	r3, [r2], #4
 8009a7a:	e7f4      	b.n	8009a66 <__copybits+0x1e>

08009a7c <__any_on>:
 8009a7c:	f100 0214 	add.w	r2, r0, #20
 8009a80:	6900      	ldr	r0, [r0, #16]
 8009a82:	114b      	asrs	r3, r1, #5
 8009a84:	4298      	cmp	r0, r3
 8009a86:	b510      	push	{r4, lr}
 8009a88:	db11      	blt.n	8009aae <__any_on+0x32>
 8009a8a:	dd0a      	ble.n	8009aa2 <__any_on+0x26>
 8009a8c:	f011 011f 	ands.w	r1, r1, #31
 8009a90:	d007      	beq.n	8009aa2 <__any_on+0x26>
 8009a92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a96:	fa24 f001 	lsr.w	r0, r4, r1
 8009a9a:	fa00 f101 	lsl.w	r1, r0, r1
 8009a9e:	428c      	cmp	r4, r1
 8009aa0:	d10b      	bne.n	8009aba <__any_on+0x3e>
 8009aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d803      	bhi.n	8009ab2 <__any_on+0x36>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	4603      	mov	r3, r0
 8009ab0:	e7f7      	b.n	8009aa2 <__any_on+0x26>
 8009ab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d0f5      	beq.n	8009aa6 <__any_on+0x2a>
 8009aba:	2001      	movs	r0, #1
 8009abc:	e7f6      	b.n	8009aac <__any_on+0x30>

08009abe <_calloc_r>:
 8009abe:	b538      	push	{r3, r4, r5, lr}
 8009ac0:	fb02 f401 	mul.w	r4, r2, r1
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f000 f857 	bl	8009b78 <_malloc_r>
 8009aca:	4605      	mov	r5, r0
 8009acc:	b118      	cbz	r0, 8009ad6 <_calloc_r+0x18>
 8009ace:	4622      	mov	r2, r4
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	f7fc fd40 	bl	8006556 <memset>
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

08009adc <_free_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4605      	mov	r5, r0
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	d045      	beq.n	8009b70 <_free_r+0x94>
 8009ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae8:	1f0c      	subs	r4, r1, #4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bfb8      	it	lt
 8009aee:	18e4      	addlt	r4, r4, r3
 8009af0:	f000 fa36 	bl	8009f60 <__malloc_lock>
 8009af4:	4a1f      	ldr	r2, [pc, #124]	; (8009b74 <_free_r+0x98>)
 8009af6:	6813      	ldr	r3, [r2, #0]
 8009af8:	4610      	mov	r0, r2
 8009afa:	b933      	cbnz	r3, 8009b0a <_free_r+0x2e>
 8009afc:	6063      	str	r3, [r4, #4]
 8009afe:	6014      	str	r4, [r2, #0]
 8009b00:	4628      	mov	r0, r5
 8009b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b06:	f000 ba2c 	b.w	8009f62 <__malloc_unlock>
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	d90c      	bls.n	8009b28 <_free_r+0x4c>
 8009b0e:	6821      	ldr	r1, [r4, #0]
 8009b10:	1862      	adds	r2, r4, r1
 8009b12:	4293      	cmp	r3, r2
 8009b14:	bf04      	itt	eq
 8009b16:	681a      	ldreq	r2, [r3, #0]
 8009b18:	685b      	ldreq	r3, [r3, #4]
 8009b1a:	6063      	str	r3, [r4, #4]
 8009b1c:	bf04      	itt	eq
 8009b1e:	1852      	addeq	r2, r2, r1
 8009b20:	6022      	streq	r2, [r4, #0]
 8009b22:	6004      	str	r4, [r0, #0]
 8009b24:	e7ec      	b.n	8009b00 <_free_r+0x24>
 8009b26:	4613      	mov	r3, r2
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	b10a      	cbz	r2, 8009b30 <_free_r+0x54>
 8009b2c:	42a2      	cmp	r2, r4
 8009b2e:	d9fa      	bls.n	8009b26 <_free_r+0x4a>
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	1858      	adds	r0, r3, r1
 8009b34:	42a0      	cmp	r0, r4
 8009b36:	d10b      	bne.n	8009b50 <_free_r+0x74>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	4401      	add	r1, r0
 8009b3c:	1858      	adds	r0, r3, r1
 8009b3e:	4282      	cmp	r2, r0
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	d1dd      	bne.n	8009b00 <_free_r+0x24>
 8009b44:	6810      	ldr	r0, [r2, #0]
 8009b46:	6852      	ldr	r2, [r2, #4]
 8009b48:	605a      	str	r2, [r3, #4]
 8009b4a:	4401      	add	r1, r0
 8009b4c:	6019      	str	r1, [r3, #0]
 8009b4e:	e7d7      	b.n	8009b00 <_free_r+0x24>
 8009b50:	d902      	bls.n	8009b58 <_free_r+0x7c>
 8009b52:	230c      	movs	r3, #12
 8009b54:	602b      	str	r3, [r5, #0]
 8009b56:	e7d3      	b.n	8009b00 <_free_r+0x24>
 8009b58:	6820      	ldr	r0, [r4, #0]
 8009b5a:	1821      	adds	r1, r4, r0
 8009b5c:	428a      	cmp	r2, r1
 8009b5e:	bf04      	itt	eq
 8009b60:	6811      	ldreq	r1, [r2, #0]
 8009b62:	6852      	ldreq	r2, [r2, #4]
 8009b64:	6062      	str	r2, [r4, #4]
 8009b66:	bf04      	itt	eq
 8009b68:	1809      	addeq	r1, r1, r0
 8009b6a:	6021      	streq	r1, [r4, #0]
 8009b6c:	605c      	str	r4, [r3, #4]
 8009b6e:	e7c7      	b.n	8009b00 <_free_r+0x24>
 8009b70:	bd38      	pop	{r3, r4, r5, pc}
 8009b72:	bf00      	nop
 8009b74:	200002bc 	.word	0x200002bc

08009b78 <_malloc_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	1ccd      	adds	r5, r1, #3
 8009b7c:	f025 0503 	bic.w	r5, r5, #3
 8009b80:	3508      	adds	r5, #8
 8009b82:	2d0c      	cmp	r5, #12
 8009b84:	bf38      	it	cc
 8009b86:	250c      	movcc	r5, #12
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	db01      	blt.n	8009b92 <_malloc_r+0x1a>
 8009b8e:	42a9      	cmp	r1, r5
 8009b90:	d903      	bls.n	8009b9a <_malloc_r+0x22>
 8009b92:	230c      	movs	r3, #12
 8009b94:	6033      	str	r3, [r6, #0]
 8009b96:	2000      	movs	r0, #0
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	f000 f9e1 	bl	8009f60 <__malloc_lock>
 8009b9e:	4a21      	ldr	r2, [pc, #132]	; (8009c24 <_malloc_r+0xac>)
 8009ba0:	6814      	ldr	r4, [r2, #0]
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	b991      	cbnz	r1, 8009bcc <_malloc_r+0x54>
 8009ba6:	4c20      	ldr	r4, [pc, #128]	; (8009c28 <_malloc_r+0xb0>)
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	b91b      	cbnz	r3, 8009bb4 <_malloc_r+0x3c>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f000 f98f 	bl	8009ed0 <_sbrk_r>
 8009bb2:	6020      	str	r0, [r4, #0]
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f98a 	bl	8009ed0 <_sbrk_r>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d124      	bne.n	8009c0a <_malloc_r+0x92>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f9cc 	bl	8009f62 <__malloc_unlock>
 8009bca:	e7e4      	b.n	8009b96 <_malloc_r+0x1e>
 8009bcc:	680b      	ldr	r3, [r1, #0]
 8009bce:	1b5b      	subs	r3, r3, r5
 8009bd0:	d418      	bmi.n	8009c04 <_malloc_r+0x8c>
 8009bd2:	2b0b      	cmp	r3, #11
 8009bd4:	d90f      	bls.n	8009bf6 <_malloc_r+0x7e>
 8009bd6:	600b      	str	r3, [r1, #0]
 8009bd8:	50cd      	str	r5, [r1, r3]
 8009bda:	18cc      	adds	r4, r1, r3
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f000 f9c0 	bl	8009f62 <__malloc_unlock>
 8009be2:	f104 000b 	add.w	r0, r4, #11
 8009be6:	1d23      	adds	r3, r4, #4
 8009be8:	f020 0007 	bic.w	r0, r0, #7
 8009bec:	1ac3      	subs	r3, r0, r3
 8009bee:	d0d3      	beq.n	8009b98 <_malloc_r+0x20>
 8009bf0:	425a      	negs	r2, r3
 8009bf2:	50e2      	str	r2, [r4, r3]
 8009bf4:	e7d0      	b.n	8009b98 <_malloc_r+0x20>
 8009bf6:	428c      	cmp	r4, r1
 8009bf8:	684b      	ldr	r3, [r1, #4]
 8009bfa:	bf16      	itet	ne
 8009bfc:	6063      	strne	r3, [r4, #4]
 8009bfe:	6013      	streq	r3, [r2, #0]
 8009c00:	460c      	movne	r4, r1
 8009c02:	e7eb      	b.n	8009bdc <_malloc_r+0x64>
 8009c04:	460c      	mov	r4, r1
 8009c06:	6849      	ldr	r1, [r1, #4]
 8009c08:	e7cc      	b.n	8009ba4 <_malloc_r+0x2c>
 8009c0a:	1cc4      	adds	r4, r0, #3
 8009c0c:	f024 0403 	bic.w	r4, r4, #3
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d005      	beq.n	8009c20 <_malloc_r+0xa8>
 8009c14:	1a21      	subs	r1, r4, r0
 8009c16:	4630      	mov	r0, r6
 8009c18:	f000 f95a 	bl	8009ed0 <_sbrk_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d0cf      	beq.n	8009bc0 <_malloc_r+0x48>
 8009c20:	6025      	str	r5, [r4, #0]
 8009c22:	e7db      	b.n	8009bdc <_malloc_r+0x64>
 8009c24:	200002bc 	.word	0x200002bc
 8009c28:	200002c0 	.word	0x200002c0

08009c2c <__ssputs_r>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	688e      	ldr	r6, [r1, #8]
 8009c32:	429e      	cmp	r6, r3
 8009c34:	4682      	mov	sl, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4690      	mov	r8, r2
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	d837      	bhi.n	8009cae <__ssputs_r+0x82>
 8009c3e:	898a      	ldrh	r2, [r1, #12]
 8009c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c44:	d031      	beq.n	8009caa <__ssputs_r+0x7e>
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	6909      	ldr	r1, [r1, #16]
 8009c4a:	1a6f      	subs	r7, r5, r1
 8009c4c:	6965      	ldr	r5, [r4, #20]
 8009c4e:	2302      	movs	r3, #2
 8009c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c54:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c58:	f109 0301 	add.w	r3, r9, #1
 8009c5c:	443b      	add	r3, r7
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	bf38      	it	cc
 8009c62:	461d      	movcc	r5, r3
 8009c64:	0553      	lsls	r3, r2, #21
 8009c66:	d530      	bpl.n	8009cca <__ssputs_r+0x9e>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7ff ff85 	bl	8009b78 <_malloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	b950      	cbnz	r0, 8009c88 <__ssputs_r+0x5c>
 8009c72:	230c      	movs	r3, #12
 8009c74:	f8ca 3000 	str.w	r3, [sl]
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	463a      	mov	r2, r7
 8009c8a:	6921      	ldr	r1, [r4, #16]
 8009c8c:	f7fc fc58 	bl	8006540 <memcpy>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	6126      	str	r6, [r4, #16]
 8009c9e:	6165      	str	r5, [r4, #20]
 8009ca0:	443e      	add	r6, r7
 8009ca2:	1bed      	subs	r5, r5, r7
 8009ca4:	6026      	str	r6, [r4, #0]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	464e      	mov	r6, r9
 8009caa:	454e      	cmp	r6, r9
 8009cac:	d900      	bls.n	8009cb0 <__ssputs_r+0x84>
 8009cae:	464e      	mov	r6, r9
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	f000 f93a 	bl	8009f2e <memmove>
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	1b9b      	subs	r3, r3, r6
 8009cbe:	60a3      	str	r3, [r4, #8]
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	441e      	add	r6, r3
 8009cc4:	6026      	str	r6, [r4, #0]
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7dc      	b.n	8009c84 <__ssputs_r+0x58>
 8009cca:	462a      	mov	r2, r5
 8009ccc:	f000 f94a 	bl	8009f64 <_realloc_r>
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d1e2      	bne.n	8009c9c <__ssputs_r+0x70>
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	f7ff feff 	bl	8009adc <_free_r>
 8009cde:	e7c8      	b.n	8009c72 <__ssputs_r+0x46>

08009ce0 <_svfiprintf_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	461d      	mov	r5, r3
 8009ce6:	898b      	ldrh	r3, [r1, #12]
 8009ce8:	061f      	lsls	r7, r3, #24
 8009cea:	b09d      	sub	sp, #116	; 0x74
 8009cec:	4680      	mov	r8, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d50f      	bpl.n	8009d14 <_svfiprintf_r+0x34>
 8009cf4:	690b      	ldr	r3, [r1, #16]
 8009cf6:	b96b      	cbnz	r3, 8009d14 <_svfiprintf_r+0x34>
 8009cf8:	2140      	movs	r1, #64	; 0x40
 8009cfa:	f7ff ff3d 	bl	8009b78 <_malloc_r>
 8009cfe:	6020      	str	r0, [r4, #0]
 8009d00:	6120      	str	r0, [r4, #16]
 8009d02:	b928      	cbnz	r0, 8009d10 <_svfiprintf_r+0x30>
 8009d04:	230c      	movs	r3, #12
 8009d06:	f8c8 3000 	str.w	r3, [r8]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0e:	e0c8      	b.n	8009ea2 <_svfiprintf_r+0x1c2>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	6163      	str	r3, [r4, #20]
 8009d14:	2300      	movs	r3, #0
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d1e:	2330      	movs	r3, #48	; 0x30
 8009d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d24:	9503      	str	r5, [sp, #12]
 8009d26:	f04f 0b01 	mov.w	fp, #1
 8009d2a:	4637      	mov	r7, r6
 8009d2c:	463d      	mov	r5, r7
 8009d2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d32:	b10b      	cbz	r3, 8009d38 <_svfiprintf_r+0x58>
 8009d34:	2b25      	cmp	r3, #37	; 0x25
 8009d36:	d13e      	bne.n	8009db6 <_svfiprintf_r+0xd6>
 8009d38:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x76>
 8009d3e:	4653      	mov	r3, sl
 8009d40:	4632      	mov	r2, r6
 8009d42:	4621      	mov	r1, r4
 8009d44:	4640      	mov	r0, r8
 8009d46:	f7ff ff71 	bl	8009c2c <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80a4 	beq.w	8009e98 <_svfiprintf_r+0x1b8>
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	4453      	add	r3, sl
 8009d54:	9309      	str	r3, [sp, #36]	; 0x24
 8009d56:	783b      	ldrb	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 809d 	beq.w	8009e98 <_svfiprintf_r+0x1b8>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	9307      	str	r3, [sp, #28]
 8009d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d70:	931a      	str	r3, [sp, #104]	; 0x68
 8009d72:	462f      	mov	r7, r5
 8009d74:	2205      	movs	r2, #5
 8009d76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d7a:	4850      	ldr	r0, [pc, #320]	; (8009ebc <_svfiprintf_r+0x1dc>)
 8009d7c:	f7f6 fa50 	bl	8000220 <memchr>
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	b9d0      	cbnz	r0, 8009dba <_svfiprintf_r+0xda>
 8009d84:	06d9      	lsls	r1, r3, #27
 8009d86:	bf44      	itt	mi
 8009d88:	2220      	movmi	r2, #32
 8009d8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d8e:	071a      	lsls	r2, r3, #28
 8009d90:	bf44      	itt	mi
 8009d92:	222b      	movmi	r2, #43	; 0x2b
 8009d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d98:	782a      	ldrb	r2, [r5, #0]
 8009d9a:	2a2a      	cmp	r2, #42	; 0x2a
 8009d9c:	d015      	beq.n	8009dca <_svfiprintf_r+0xea>
 8009d9e:	9a07      	ldr	r2, [sp, #28]
 8009da0:	462f      	mov	r7, r5
 8009da2:	2000      	movs	r0, #0
 8009da4:	250a      	movs	r5, #10
 8009da6:	4639      	mov	r1, r7
 8009da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dac:	3b30      	subs	r3, #48	; 0x30
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d94d      	bls.n	8009e4e <_svfiprintf_r+0x16e>
 8009db2:	b1b8      	cbz	r0, 8009de4 <_svfiprintf_r+0x104>
 8009db4:	e00f      	b.n	8009dd6 <_svfiprintf_r+0xf6>
 8009db6:	462f      	mov	r7, r5
 8009db8:	e7b8      	b.n	8009d2c <_svfiprintf_r+0x4c>
 8009dba:	4a40      	ldr	r2, [pc, #256]	; (8009ebc <_svfiprintf_r+0x1dc>)
 8009dbc:	1a80      	subs	r0, r0, r2
 8009dbe:	fa0b f000 	lsl.w	r0, fp, r0
 8009dc2:	4318      	orrs	r0, r3
 8009dc4:	9004      	str	r0, [sp, #16]
 8009dc6:	463d      	mov	r5, r7
 8009dc8:	e7d3      	b.n	8009d72 <_svfiprintf_r+0x92>
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	1d11      	adds	r1, r2, #4
 8009dce:	6812      	ldr	r2, [r2, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	db01      	blt.n	8009dda <_svfiprintf_r+0xfa>
 8009dd6:	9207      	str	r2, [sp, #28]
 8009dd8:	e004      	b.n	8009de4 <_svfiprintf_r+0x104>
 8009dda:	4252      	negs	r2, r2
 8009ddc:	f043 0302 	orr.w	r3, r3, #2
 8009de0:	9207      	str	r2, [sp, #28]
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	783b      	ldrb	r3, [r7, #0]
 8009de6:	2b2e      	cmp	r3, #46	; 0x2e
 8009de8:	d10c      	bne.n	8009e04 <_svfiprintf_r+0x124>
 8009dea:	787b      	ldrb	r3, [r7, #1]
 8009dec:	2b2a      	cmp	r3, #42	; 0x2a
 8009dee:	d133      	bne.n	8009e58 <_svfiprintf_r+0x178>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfb8      	it	lt
 8009dfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e00:	3702      	adds	r7, #2
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	4d2e      	ldr	r5, [pc, #184]	; (8009ec0 <_svfiprintf_r+0x1e0>)
 8009e06:	7839      	ldrb	r1, [r7, #0]
 8009e08:	2203      	movs	r2, #3
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7f6 fa08 	bl	8000220 <memchr>
 8009e10:	b138      	cbz	r0, 8009e22 <_svfiprintf_r+0x142>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	1b40      	subs	r0, r0, r5
 8009e16:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	4303      	orrs	r3, r0
 8009e1e:	3701      	adds	r7, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	7839      	ldrb	r1, [r7, #0]
 8009e24:	4827      	ldr	r0, [pc, #156]	; (8009ec4 <_svfiprintf_r+0x1e4>)
 8009e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	1c7e      	adds	r6, r7, #1
 8009e2e:	f7f6 f9f7 	bl	8000220 <memchr>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d038      	beq.n	8009ea8 <_svfiprintf_r+0x1c8>
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <_svfiprintf_r+0x1e8>)
 8009e38:	bb13      	cbnz	r3, 8009e80 <_svfiprintf_r+0x1a0>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	f023 0307 	bic.w	r3, r3, #7
 8009e42:	3308      	adds	r3, #8
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e48:	444b      	add	r3, r9
 8009e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4c:	e76d      	b.n	8009d2a <_svfiprintf_r+0x4a>
 8009e4e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e52:	2001      	movs	r0, #1
 8009e54:	460f      	mov	r7, r1
 8009e56:	e7a6      	b.n	8009da6 <_svfiprintf_r+0xc6>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	3701      	adds	r7, #1
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	250a      	movs	r5, #10
 8009e62:	4638      	mov	r0, r7
 8009e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e68:	3a30      	subs	r2, #48	; 0x30
 8009e6a:	2a09      	cmp	r2, #9
 8009e6c:	d903      	bls.n	8009e76 <_svfiprintf_r+0x196>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c8      	beq.n	8009e04 <_svfiprintf_r+0x124>
 8009e72:	9105      	str	r1, [sp, #20]
 8009e74:	e7c6      	b.n	8009e04 <_svfiprintf_r+0x124>
 8009e76:	fb05 2101 	mla	r1, r5, r1, r2
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	e7f0      	b.n	8009e62 <_svfiprintf_r+0x182>
 8009e80:	ab03      	add	r3, sp, #12
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4622      	mov	r2, r4
 8009e86:	4b11      	ldr	r3, [pc, #68]	; (8009ecc <_svfiprintf_r+0x1ec>)
 8009e88:	a904      	add	r1, sp, #16
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	f7fc fc00 	bl	8006690 <_printf_float>
 8009e90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009e94:	4681      	mov	r9, r0
 8009e96:	d1d6      	bne.n	8009e46 <_svfiprintf_r+0x166>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	065b      	lsls	r3, r3, #25
 8009e9c:	f53f af35 	bmi.w	8009d0a <_svfiprintf_r+0x2a>
 8009ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea2:	b01d      	add	sp, #116	; 0x74
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4622      	mov	r2, r4
 8009eae:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <_svfiprintf_r+0x1ec>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f7fc fea2 	bl	8006bfc <_printf_i>
 8009eb8:	e7ea      	b.n	8009e90 <_svfiprintf_r+0x1b0>
 8009eba:	bf00      	nop
 8009ebc:	0800a6dc 	.word	0x0800a6dc
 8009ec0:	0800a6e2 	.word	0x0800a6e2
 8009ec4:	0800a6e6 	.word	0x0800a6e6
 8009ec8:	08006691 	.word	0x08006691
 8009ecc:	08009c2d 	.word	0x08009c2d

08009ed0 <_sbrk_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4c06      	ldr	r4, [pc, #24]	; (8009eec <_sbrk_r+0x1c>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	f7fc fa96 	bl	800640c <_sbrk>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_sbrk_r+0x1a>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_sbrk_r+0x1a>
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	200006d0 	.word	0x200006d0

08009ef0 <strncmp>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	b16a      	cbz	r2, 8009f10 <strncmp+0x20>
 8009ef4:	3901      	subs	r1, #1
 8009ef6:	1884      	adds	r4, r0, r2
 8009ef8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009efc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d103      	bne.n	8009f0c <strncmp+0x1c>
 8009f04:	42a0      	cmp	r0, r4
 8009f06:	d001      	beq.n	8009f0c <strncmp+0x1c>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1f5      	bne.n	8009ef8 <strncmp+0x8>
 8009f0c:	1a98      	subs	r0, r3, r2
 8009f0e:	bd10      	pop	{r4, pc}
 8009f10:	4610      	mov	r0, r2
 8009f12:	e7fc      	b.n	8009f0e <strncmp+0x1e>

08009f14 <__ascii_wctomb>:
 8009f14:	b149      	cbz	r1, 8009f2a <__ascii_wctomb+0x16>
 8009f16:	2aff      	cmp	r2, #255	; 0xff
 8009f18:	bf85      	ittet	hi
 8009f1a:	238a      	movhi	r3, #138	; 0x8a
 8009f1c:	6003      	strhi	r3, [r0, #0]
 8009f1e:	700a      	strbls	r2, [r1, #0]
 8009f20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009f24:	bf98      	it	ls
 8009f26:	2001      	movls	r0, #1
 8009f28:	4770      	bx	lr
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4770      	bx	lr

08009f2e <memmove>:
 8009f2e:	4288      	cmp	r0, r1
 8009f30:	b510      	push	{r4, lr}
 8009f32:	eb01 0302 	add.w	r3, r1, r2
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x1a>
 8009f38:	1e42      	subs	r2, r0, #1
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d00a      	beq.n	8009f54 <memmove+0x26>
 8009f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0xc>
 8009f48:	4283      	cmp	r3, r0
 8009f4a:	d9f5      	bls.n	8009f38 <memmove+0xa>
 8009f4c:	1881      	adds	r1, r0, r2
 8009f4e:	1ad2      	subs	r2, r2, r3
 8009f50:	42d3      	cmn	r3, r2
 8009f52:	d100      	bne.n	8009f56 <memmove+0x28>
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f5e:	e7f7      	b.n	8009f50 <memmove+0x22>

08009f60 <__malloc_lock>:
 8009f60:	4770      	bx	lr

08009f62 <__malloc_unlock>:
 8009f62:	4770      	bx	lr

08009f64 <_realloc_r>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	4607      	mov	r7, r0
 8009f68:	4614      	mov	r4, r2
 8009f6a:	460e      	mov	r6, r1
 8009f6c:	b921      	cbnz	r1, 8009f78 <_realloc_r+0x14>
 8009f6e:	4611      	mov	r1, r2
 8009f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f74:	f7ff be00 	b.w	8009b78 <_malloc_r>
 8009f78:	b922      	cbnz	r2, 8009f84 <_realloc_r+0x20>
 8009f7a:	f7ff fdaf 	bl	8009adc <_free_r>
 8009f7e:	4625      	mov	r5, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f84:	f000 f814 	bl	8009fb0 <_malloc_usable_size_r>
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d20f      	bcs.n	8009fac <_realloc_r+0x48>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff fdf2 	bl	8009b78 <_malloc_r>
 8009f94:	4605      	mov	r5, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d0f2      	beq.n	8009f80 <_realloc_r+0x1c>
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	f7fc facf 	bl	8006540 <memcpy>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f7ff fd99 	bl	8009adc <_free_r>
 8009faa:	e7e9      	b.n	8009f80 <_realloc_r+0x1c>
 8009fac:	4635      	mov	r5, r6
 8009fae:	e7e7      	b.n	8009f80 <_realloc_r+0x1c>

08009fb0 <_malloc_usable_size_r>:
 8009fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb4:	1f18      	subs	r0, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bfbc      	itt	lt
 8009fba:	580b      	ldrlt	r3, [r1, r0]
 8009fbc:	18c0      	addlt	r0, r0, r3
 8009fbe:	4770      	bx	lr

08009fc0 <round>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	ec57 6b10 	vmov	r6, r7, d0
 8009fc6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009fca:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009fce:	2c13      	cmp	r4, #19
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	463d      	mov	r5, r7
 8009fd4:	dc17      	bgt.n	800a006 <round+0x46>
 8009fd6:	2c00      	cmp	r4, #0
 8009fd8:	da09      	bge.n	8009fee <round+0x2e>
 8009fda:	3401      	adds	r4, #1
 8009fdc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009fe0:	d103      	bne.n	8009fea <round+0x2a>
 8009fe2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fe6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fea:	2100      	movs	r1, #0
 8009fec:	e02c      	b.n	800a048 <round+0x88>
 8009fee:	4a18      	ldr	r2, [pc, #96]	; (800a050 <round+0x90>)
 8009ff0:	4122      	asrs	r2, r4
 8009ff2:	4217      	tst	r7, r2
 8009ff4:	d100      	bne.n	8009ff8 <round+0x38>
 8009ff6:	b19e      	cbz	r6, 800a020 <round+0x60>
 8009ff8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ffc:	4123      	asrs	r3, r4
 8009ffe:	442b      	add	r3, r5
 800a000:	ea23 0302 	bic.w	r3, r3, r2
 800a004:	e7f1      	b.n	8009fea <round+0x2a>
 800a006:	2c33      	cmp	r4, #51	; 0x33
 800a008:	dd0d      	ble.n	800a026 <round+0x66>
 800a00a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a00e:	d107      	bne.n	800a020 <round+0x60>
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	ee10 2a10 	vmov	r2, s0
 800a018:	f7f6 f958 	bl	80002cc <__adddf3>
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	ec47 6b10 	vmov	d0, r6, r7
 800a024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a026:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a02e:	40d0      	lsrs	r0, r2
 800a030:	4206      	tst	r6, r0
 800a032:	d0f5      	beq.n	800a020 <round+0x60>
 800a034:	2201      	movs	r2, #1
 800a036:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a03a:	fa02 f404 	lsl.w	r4, r2, r4
 800a03e:	1931      	adds	r1, r6, r4
 800a040:	bf28      	it	cs
 800a042:	189b      	addcs	r3, r3, r2
 800a044:	ea21 0100 	bic.w	r1, r1, r0
 800a048:	461f      	mov	r7, r3
 800a04a:	460e      	mov	r6, r1
 800a04c:	e7e8      	b.n	800a020 <round+0x60>
 800a04e:	bf00      	nop
 800a050:	000fffff 	.word	0x000fffff

0800a054 <_init>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr

0800a060 <_fini>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr
