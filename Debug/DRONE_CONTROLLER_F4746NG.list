
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e78  0800b078  0800b078  0001b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800def0  0800def0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800def8  0800def8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800def8  0800def8  0001def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800defc  0800defc  0001defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800df00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000228  0800e128  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800e128  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002516a  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041f6  00000000  00000000  000453c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012e56  00000000  00000000  000495b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001830  00000000  00000000  0005c410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016a0  00000000  00000000  0005dc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002991c  00000000  00000000  0005f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015c02  00000000  00000000  00088bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f7a24  00000000  00000000  0009e7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00196222  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005428  00000000  00000000  001962a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b05c 	.word	0x0800b05c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800b05c 	.word	0x0800b05c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000fc8:	b508      	push	{r3, lr}
//	uint32_t uSecVar = uSec;
//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
//	while(uSecVar--);
	DWT_Delay(uSec);
 8000fca:	f000 fe93 	bl	8001cf4 <DWT_Delay>

}
 8000fce:	bd08      	pop	{r3, pc}

08000fd0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fd0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fd2:	b938      	cbnz	r0, 8000fe4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <NRF24_csn+0x24>)
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <NRF24_csn+0x28>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 fdee 	bl	8002bbe <HAL_GPIO_WritePin>
}
 8000fe2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <NRF24_csn+0x24>)
 8000fe8:	8819      	ldrh	r1, [r3, #0]
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <NRF24_csn+0x28>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	f001 fde6 	bl	8002bbe <HAL_GPIO_WritePin>
 8000ff2:	e7f6      	b.n	8000fe2 <NRF24_csn+0x12>
 8000ff4:	20000248 	.word	0x20000248
 8000ff8:	2000024c 	.word	0x2000024c

08000ffc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000ffc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ffe:	b938      	cbnz	r0, 8001010 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <NRF24_ce+0x24>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <NRF24_ce+0x28>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f001 fdd8 	bl	8002bbe <HAL_GPIO_WritePin>
}
 800100e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	4b03      	ldr	r3, [pc, #12]	; (8001020 <NRF24_ce+0x24>)
 8001014:	8819      	ldrh	r1, [r3, #0]
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <NRF24_ce+0x28>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f001 fdd0 	bl	8002bbe <HAL_GPIO_WritePin>
 800101e:	e7f6      	b.n	800100e <NRF24_ce+0x12>
 8001020:	20000246 	.word	0x20000246
 8001024:	2000024c 	.word	0x2000024c

08001028 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ffce 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001034:	f004 041f 	and.w	r4, r4, #31
 8001038:	a902      	add	r1, sp, #8
 800103a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800103e:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <NRF24_read_register+0x40>)
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2201      	movs	r2, #1
 8001044:	4620      	mov	r0, r4
 8001046:	f003 fb1b 	bl	8004680 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	2201      	movs	r2, #1
 800104e:	f10d 0105 	add.w	r1, sp, #5
 8001052:	4620      	mov	r0, r4
 8001054:	f003 fd6b 	bl	8004b2e <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001058:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffb7 	bl	8000fd0 <NRF24_csn>
	return retData;
}
 8001062:	4620      	mov	r0, r4
 8001064:	b002      	add	sp, #8
 8001066:	bd10      	pop	{r4, pc}
 8001068:	20000250 	.word	0x20000250

0800106c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ffaa 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800107c:	f004 041f 	and.w	r4, r4, #31
 8001080:	a902      	add	r1, sp, #8
 8001082:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001086:	4c08      	ldr	r4, [pc, #32]	; (80010a8 <NRF24_read_registerN+0x3c>)
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	2201      	movs	r2, #1
 800108c:	4620      	mov	r0, r4
 800108e:	f003 faf7 	bl	8004680 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	4632      	mov	r2, r6
 8001096:	4629      	mov	r1, r5
 8001098:	4620      	mov	r0, r4
 800109a:	f003 fd48 	bl	8004b2e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff96 	bl	8000fd0 <NRF24_csn>
}
 80010a4:	b002      	add	sp, #8
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
 80010a8:	20000250 	.word	0x20000250

080010ac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010ac:	b530      	push	{r4, r5, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff8b 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010ba:	f044 0420 	orr.w	r4, r4, #32
 80010be:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80010c2:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	2202      	movs	r2, #2
 80010ca:	a901      	add	r1, sp, #4
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <NRF24_write_register+0x30>)
 80010ce:	f003 fad7 	bl	8004680 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff ff7c 	bl	8000fd0 <NRF24_csn>
}
 80010d8:	b003      	add	sp, #12
 80010da:	bd30      	pop	{r4, r5, pc}
 80010dc:	20000250 	.word	0x20000250

080010e0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
 80010e8:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff70 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010f0:	f044 0420 	orr.w	r4, r4, #32
 80010f4:	a902      	add	r1, sp, #8
 80010f6:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010fa:	4c08      	ldr	r4, [pc, #32]	; (800111c <NRF24_write_registerN+0x3c>)
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	2201      	movs	r2, #1
 8001100:	4620      	mov	r0, r4
 8001102:	f003 fabd 	bl	8004680 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	4632      	mov	r2, r6
 800110a:	4629      	mov	r1, r5
 800110c:	4620      	mov	r0, r4
 800110e:	f003 fab7 	bl	8004680 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ff5c 	bl	8000fd0 <NRF24_csn>
}
 8001118:	b002      	add	sp, #8
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	20000250 	.word	0x20000250

08001120 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	4605      	mov	r5, r0
 8001126:	460e      	mov	r6, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff ff51 	bl	8000fd0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800112e:	a902      	add	r1, sp, #8
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001136:	4c08      	ldr	r4, [pc, #32]	; (8001158 <NRF24_write_payload+0x38>)
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4620      	mov	r0, r4
 800113e:	f003 fa9f 	bl	8004680 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	4632      	mov	r2, r6
 8001146:	4629      	mov	r1, r5
 8001148:	4620      	mov	r0, r4
 800114a:	f003 fa99 	bl	8004680 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff ff3e 	bl	8000fd0 <NRF24_csn>
}
 8001154:	b002      	add	sp, #8
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	20000250 	.word	0x20000250

0800115c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800115c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	20e1      	movs	r0, #225	; 0xe1
 8001162:	f7ff ffa3 	bl	80010ac <NRF24_write_register>
}
 8001166:	bd08      	pop	{r3, pc}

08001168 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001168:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800116a:	21ff      	movs	r1, #255	; 0xff
 800116c:	20e2      	movs	r0, #226	; 0xe2
 800116e:	f7ff ff9d 	bl	80010ac <NRF24_write_register>
}
 8001172:	bd08      	pop	{r3, pc}

08001174 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001174:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001176:	2007      	movs	r0, #7
 8001178:	f7ff ff56 	bl	8001028 <NRF24_read_register>
	return statReg;
}
 800117c:	bd08      	pop	{r3, pc}

0800117e <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800117e:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff3b 	bl	8000ffc <NRF24_ce>
	NRF24_flush_tx();
 8001186:	f7ff ffe9 	bl	800115c <NRF24_flush_tx>
	NRF24_flush_rx();
 800118a:	f7ff ffed 	bl	8001168 <NRF24_flush_rx>
}
 800118e:	bd08      	pop	{r3, pc}

08001190 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001190:	b510      	push	{r4, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	ac02      	add	r4, sp, #8
 8001196:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800119a:	2205      	movs	r2, #5
 800119c:	4621      	mov	r1, r4
 800119e:	200a      	movs	r0, #10
 80011a0:	f7ff ff9e 	bl	80010e0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80011a4:	2205      	movs	r2, #5
 80011a6:	4621      	mov	r1, r4
 80011a8:	2010      	movs	r0, #16
 80011aa:	f7ff ff99 	bl	80010e0 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <NRF24_openWritingPipe+0x34>)
 80011b0:	7819      	ldrb	r1, [r3, #0]
 80011b2:	2920      	cmp	r1, #32
 80011b4:	bf28      	it	cs
 80011b6:	2120      	movcs	r1, #32
 80011b8:	2011      	movs	r0, #17
 80011ba:	f7ff ff77 	bl	80010ac <NRF24_write_register>
}
 80011be:	b002      	add	sp, #8
 80011c0:	bd10      	pop	{r4, pc}
 80011c2:	bf00      	nop
 80011c4:	20000334 	.word	0x20000334

080011c8 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80011c8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80011ca:	f001 010f 	and.w	r1, r1, #15
 80011ce:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80011d2:	b2c9      	uxtb	r1, r1
 80011d4:	2004      	movs	r0, #4
 80011d6:	f7ff ff69 	bl	80010ac <NRF24_write_register>
}
 80011da:	bd08      	pop	{r3, pc}

080011dc <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80011dc:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80011de:	4601      	mov	r1, r0
 80011e0:	287f      	cmp	r0, #127	; 0x7f
 80011e2:	bf28      	it	cs
 80011e4:	217f      	movcs	r1, #127	; 0x7f
 80011e6:	2005      	movs	r0, #5
 80011e8:	f7ff ff60 	bl	80010ac <NRF24_write_register>
}
 80011ec:	bd08      	pop	{r3, pc}
	...

080011f0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
  payload_size = MIN(size,max_payload_size);
 80011f0:	2820      	cmp	r0, #32
 80011f2:	bf28      	it	cs
 80011f4:	2020      	movcs	r0, #32
 80011f6:	4b01      	ldr	r3, [pc, #4]	; (80011fc <NRF24_setPayloadSize+0xc>)
 80011f8:	7018      	strb	r0, [r3, #0]
}
 80011fa:	4770      	bx	lr
 80011fc:	20000334 	.word	0x20000334

08001200 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <NRF24_getPayloadSize+0x8>)
 8001202:	7818      	ldrb	r0, [r3, #0]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000334 	.word	0x20000334

0800120c <NRF24_read_payload>:
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	4606      	mov	r6, r0
 8001212:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001214:	f7ff fff4 	bl	8001200 <NRF24_getPayloadSize>
 8001218:	4604      	mov	r4, r0
 800121a:	42a8      	cmp	r0, r5
 800121c:	d817      	bhi.n	800124e <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fed6 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001224:	a902      	add	r1, sp, #8
 8001226:	2361      	movs	r3, #97	; 0x61
 8001228:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800122c:	4d09      	ldr	r5, [pc, #36]	; (8001254 <NRF24_read_payload+0x48>)
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	4628      	mov	r0, r5
 8001234:	f003 fa24 	bl	8004680 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	b2a2      	uxth	r2, r4
 800123c:	4631      	mov	r1, r6
 800123e:	4628      	mov	r0, r5
 8001240:	f003 fc75 	bl	8004b2e <HAL_SPI_Receive>
	NRF24_csn(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fec3 	bl	8000fd0 <NRF24_csn>
}
 800124a:	b002      	add	sp, #8
 800124c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800124e:	462c      	mov	r4, r5
 8001250:	e7e5      	b.n	800121e <NRF24_read_payload+0x12>
 8001252:	bf00      	nop
 8001254:	20000250 	.word	0x20000250

08001258 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001258:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800125a:	2060      	movs	r0, #96	; 0x60
 800125c:	f7ff fee4 	bl	8001028 <NRF24_read_register>
}
 8001260:	bd08      	pop	{r3, pc}

08001262 <NRF24_read>:
{
 8001262:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001264:	f7ff ffd2 	bl	800120c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001268:	2017      	movs	r0, #23
 800126a:	f7ff fedd 	bl	8001028 <NRF24_read_register>
 800126e:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001272:	f7ff ff79 	bl	8001168 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001276:	f7ff ffef 	bl	8001258 <NRF24_getDynamicPayloadSize>
}
 800127a:	4620      	mov	r0, r4
 800127c:	bd10      	pop	{r4, pc}

0800127e <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800127e:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001280:	201d      	movs	r0, #29
 8001282:	f7ff fed1 	bl	8001028 <NRF24_read_register>
 8001286:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800128a:	201d      	movs	r0, #29
 800128c:	f7ff ff0e 	bl	80010ac <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001290:	2100      	movs	r1, #0
 8001292:	201c      	movs	r0, #28
 8001294:	f7ff ff0a 	bl	80010ac <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 8001298:	bd08      	pop	{r3, pc}

0800129a <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800129a:	b508      	push	{r3, lr}
	if ( enable )
 800129c:	b920      	cbnz	r0, 80012a8 <NRF24_setAutoAck+0xe>
    NRF24_write_register(REG_EN_AA, 0x3F);
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 800129e:	2100      	movs	r1, #0
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff ff03 	bl	80010ac <NRF24_write_register>
}
 80012a6:	bd08      	pop	{r3, pc}
    NRF24_write_register(REG_EN_AA, 0x3F);
 80012a8:	213f      	movs	r1, #63	; 0x3f
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fefe 	bl	80010ac <NRF24_write_register>
 80012b0:	e7f9      	b.n	80012a6 <NRF24_setAutoAck+0xc>

080012b2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80012b2:	b510      	push	{r4, lr}
 80012b4:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012b6:	2006      	movs	r0, #6
 80012b8:	f7ff feb6 	bl	8001028 <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012bc:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80012c0:	2c03      	cmp	r4, #3
 80012c2:	d009      	beq.n	80012d8 <NRF24_setPALevel+0x26>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
  }
  else if ( level == RF24_PA_m6dB )
 80012c4:	2c02      	cmp	r4, #2
 80012c6:	d00d      	beq.n	80012e4 <NRF24_setPALevel+0x32>
  {
    setup |= _BV(RF_PWR_HIGH) ;
  }
  else if ( level == RF24_PA_m12dB )
 80012c8:	2c01      	cmp	r4, #1
 80012ca:	d00e      	beq.n	80012ea <NRF24_setPALevel+0x38>
  {
    setup |= _BV(RF_PWR_LOW);
  }
  else if ( level == RF24_PA_m18dB )
 80012cc:	b134      	cbz	r4, 80012dc <NRF24_setPALevel+0x2a>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80012ce:	2c04      	cmp	r4, #4
 80012d0:	d104      	bne.n	80012dc <NRF24_setPALevel+0x2a>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012d2:	f041 0106 	orr.w	r1, r1, #6
 80012d6:	e001      	b.n	80012dc <NRF24_setPALevel+0x2a>
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012d8:	f041 0106 	orr.w	r1, r1, #6
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80012dc:	2006      	movs	r0, #6
 80012de:	f7ff fee5 	bl	80010ac <NRF24_write_register>
}
 80012e2:	bd10      	pop	{r4, pc}
    setup |= _BV(RF_PWR_HIGH) ;
 80012e4:	f041 0104 	orr.w	r1, r1, #4
 80012e8:	e7f8      	b.n	80012dc <NRF24_setPALevel+0x2a>
    setup |= _BV(RF_PWR_LOW);
 80012ea:	f041 0102 	orr.w	r1, r1, #2
 80012ee:	e7f5      	b.n	80012dc <NRF24_setPALevel+0x2a>

080012f0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012f4:	2006      	movs	r0, #6
 80012f6:	f7ff fe97 	bl	8001028 <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80012fa:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 80012fe:	2d02      	cmp	r5, #2
 8001300:	d00c      	beq.n	800131c <NRF24_setDataRate+0x2c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001302:	2d01      	cmp	r5, #1
 8001304:	d00d      	beq.n	8001322 <NRF24_setDataRate+0x32>
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001306:	4621      	mov	r1, r4
 8001308:	2006      	movs	r0, #6
 800130a:	f7ff fecf 	bl	80010ac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800130e:	2006      	movs	r0, #6
 8001310:	f7ff fe8a 	bl	8001028 <NRF24_read_register>
 8001314:	42a0      	cmp	r0, r4
 8001316:	d007      	beq.n	8001328 <NRF24_setDataRate+0x38>
	bool result = false;
 8001318:	2000      	movs	r0, #0
  {
    wide_band = false;
  }

  return result;
}
 800131a:	bd38      	pop	{r3, r4, r5, pc}
    setup |= _BV( RF_DR_LOW ) ;
 800131c:	f044 0420 	orr.w	r4, r4, #32
 8001320:	e7f1      	b.n	8001306 <NRF24_setDataRate+0x16>
      setup |= _BV(RF_DR_HIGH);
 8001322:	f044 0408 	orr.w	r4, r4, #8
 8001326:	e7ee      	b.n	8001306 <NRF24_setDataRate+0x16>
    result = true;
 8001328:	2001      	movs	r0, #1
 800132a:	e7f6      	b.n	800131a <NRF24_setDataRate+0x2a>

0800132c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fe79 	bl	8001028 <NRF24_read_register>
 8001336:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800133a:	b11c      	cbz	r4, 8001344 <NRF24_setCRCLength+0x18>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800133c:	2c01      	cmp	r4, #1
 800133e:	d005      	beq.n	800134c <NRF24_setCRCLength+0x20>
    config |= _BV(BIT_EN_CRC);
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8001340:	f041 010c 	orr.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff feb1 	bl	80010ac <NRF24_write_register>
}
 800134a:	bd10      	pop	{r4, pc}
    config |= _BV(BIT_EN_CRC);
 800134c:	f041 0108 	orr.w	r1, r1, #8
 8001350:	e7f8      	b.n	8001344 <NRF24_setCRCLength+0x18>

08001352 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001352:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fe67 	bl	8001028 <NRF24_read_register>
 800135a:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fea4 	bl	80010ac <NRF24_write_register>
}
 8001364:	bd08      	pop	{r3, pc}

08001366 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001366:	b570      	push	{r4, r5, r6, lr}
 8001368:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800136a:	f7ff ff03 	bl	8001174 <NRF24_get_status>
 800136e:	f000 0340 	and.w	r3, r0, #64	; 0x40

  bool result = ( status & _BV(BIT_RX_DR) );
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2501      	movne	r5, #1
 8001378:	2500      	moveq	r5, #0

  if (result)
 800137a:	d00b      	beq.n	8001394 <NRF24_availablePipe+0x2e>
 800137c:	4604      	mov	r4, r0
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800137e:	b116      	cbz	r6, 8001386 <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001380:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001384:	7033      	strb	r3, [r6, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	2007      	movs	r0, #7
 800138a:	f7ff fe8f 	bl	80010ac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800138e:	f014 0f20 	tst.w	r4, #32
 8001392:	d101      	bne.n	8001398 <NRF24_availablePipe+0x32>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
    }
  }
  return result;
}
 8001394:	4628      	mov	r0, r5
 8001396:	bd70      	pop	{r4, r5, r6, pc}
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001398:	2120      	movs	r1, #32
 800139a:	2007      	movs	r0, #7
 800139c:	f7ff fe86 	bl	80010ac <NRF24_write_register>
 80013a0:	e7f8      	b.n	8001394 <NRF24_availablePipe+0x2e>

080013a2 <NRF24_available>:
{
 80013a2:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ffde 	bl	8001366 <NRF24_availablePipe>
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fe38 	bl	8001028 <NRF24_read_register>
 80013b8:	f020 0101 	bic.w	r1, r0, #1
 80013bc:	f041 0102 	orr.w	r1, r1, #2
 80013c0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fe71 	bl	80010ac <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80013ca:	2096      	movs	r0, #150	; 0x96
 80013cc:	f7ff fdfc 	bl	8000fc8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80013d0:	4629      	mov	r1, r5
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fea4 	bl	8001120 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fe0f 	bl	8000ffc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80013de:	200f      	movs	r0, #15
 80013e0:	f7ff fdf2 	bl	8000fc8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fe09 	bl	8000ffc <NRF24_ce>
}
 80013ea:	bd38      	pop	{r3, r4, r5, pc}

080013ec <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	4605      	mov	r5, r0
 80013f0:	460f      	mov	r7, r1
 80013f2:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 80013f4:	f7ff febe 	bl	8001174 <NRF24_get_status>
 80013f8:	4604      	mov	r4, r0
	*tx_ok = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013fe:	2170      	movs	r1, #112	; 0x70
 8001400:	2007      	movs	r0, #7
 8001402:	f7ff fe53 	bl	80010ac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001406:	f3c4 1340 	ubfx	r3, r4, #5, #1
 800140a:	702b      	strb	r3, [r5, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800140c:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8001410:	703b      	strb	r3, [r7, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001412:	f3c4 1480 	ubfx	r4, r4, #6, #1
 8001416:	7034      	strb	r4, [r6, #0]
}
 8001418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800141a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800141a:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800141c:	2170      	movs	r1, #112	; 0x70
 800141e:	2007      	movs	r0, #7
 8001420:	f7ff fe44 	bl	80010ac <NRF24_write_register>
}
 8001424:	bd08      	pop	{r3, pc}
	...

08001428 <NRF24_write>:
{
 8001428:	b530      	push	{r4, r5, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	4604      	mov	r4, r0
 800142e:	460d      	mov	r5, r1
	NRF24_resetStatus();
 8001430:	f7ff fff3 	bl	800141a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001434:	4629      	mov	r1, r5
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ffb8 	bl	80013ac <NRF24_startWrite>
  uint32_t sent_at = HAL_GetTick();
 800143c:	f000 fcb4 	bl	8001da8 <HAL_GetTick>
 8001440:	4604      	mov	r4, r0
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001442:	2201      	movs	r2, #1
 8001444:	f10d 0107 	add.w	r1, sp, #7
 8001448:	2008      	movs	r0, #8
 800144a:	f7ff fe0f 	bl	800106c <NRF24_read_registerN>
		status = NRF24_get_status();
 800144e:	f7ff fe91 	bl	8001174 <NRF24_get_status>
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001452:	f010 0f30 	tst.w	r0, #48	; 0x30
 8001456:	d104      	bne.n	8001462 <NRF24_write+0x3a>
 8001458:	f000 fca6 	bl	8001da8 <HAL_GetTick>
 800145c:	1b00      	subs	r0, r0, r4
 800145e:	2809      	cmp	r0, #9
 8001460:	d9ef      	bls.n	8001442 <NRF24_write+0x1a>
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001462:	4c0c      	ldr	r4, [pc, #48]	; (8001494 <NRF24_write+0x6c>)
 8001464:	4622      	mov	r2, r4
 8001466:	f10d 0105 	add.w	r1, sp, #5
 800146a:	f10d 0006 	add.w	r0, sp, #6
 800146e:	f7ff ffbd 	bl	80013ec <NRF24_whatHappened>
	retStatus = tx_ok;
 8001472:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 8001476:	7823      	ldrb	r3, [r4, #0]
 8001478:	b933      	cbnz	r3, 8001488 <NRF24_write+0x60>
	NRF24_available();
 800147a:	f7ff ff92 	bl	80013a2 <NRF24_available>
	NRF24_flush_tx();
 800147e:	f7ff fe6d 	bl	800115c <NRF24_flush_tx>
}
 8001482:	4628      	mov	r0, r5
 8001484:	b003      	add	sp, #12
 8001486:	bd30      	pop	{r4, r5, pc}
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001488:	f7ff fee6 	bl	8001258 <NRF24_getDynamicPayloadSize>
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <NRF24_write+0x70>)
 800148e:	7018      	strb	r0, [r3, #0]
 8001490:	e7f3      	b.n	800147a <NRF24_write+0x52>
 8001492:	bf00      	nop
 8001494:	20000244 	.word	0x20000244
 8001498:	20000245 	.word	0x20000245

0800149c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800149c:	b500      	push	{lr}
 800149e:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fd95 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80014a6:	2350      	movs	r3, #80	; 0x50
 80014a8:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80014ac:	2373      	movs	r3, #115	; 0x73
 80014ae:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	2202      	movs	r2, #2
 80014b6:	a901      	add	r1, sp, #4
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <NRF24_ACTIVATE_cmd+0x30>)
 80014ba:	f003 f8e1 	bl	8004680 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fd86 	bl	8000fd0 <NRF24_csn>
}
 80014c4:	b003      	add	sp, #12
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ca:	bf00      	nop
 80014cc:	20000250 	.word	0x20000250

080014d0 <NRF24_enableAckPayload>:
{
 80014d0:	b508      	push	{r3, lr}
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80014d2:	201d      	movs	r0, #29
 80014d4:	f7ff fda8 	bl	8001028 <NRF24_read_register>
 80014d8:	f040 0106 	orr.w	r1, r0, #6
 80014dc:	b2c9      	uxtb	r1, r1
 80014de:	201d      	movs	r0, #29
 80014e0:	f7ff fde4 	bl	80010ac <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80014e4:	201d      	movs	r0, #29
 80014e6:	f7ff fd9f 	bl	8001028 <NRF24_read_register>
 80014ea:	b148      	cbz	r0, 8001500 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80014ec:	201c      	movs	r0, #28
 80014ee:	f7ff fd9b 	bl	8001028 <NRF24_read_register>
 80014f2:	f040 0103 	orr.w	r1, r0, #3
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	201c      	movs	r0, #28
 80014fa:	f7ff fdd7 	bl	80010ac <NRF24_write_register>
}
 80014fe:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8001500:	f7ff ffcc 	bl	800149c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001504:	201d      	movs	r0, #29
 8001506:	f7ff fd8f 	bl	8001028 <NRF24_read_register>
 800150a:	f040 0106 	orr.w	r1, r0, #6
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	201d      	movs	r0, #29
 8001512:	f7ff fdcb 	bl	80010ac <NRF24_write_register>
 8001516:	e7e9      	b.n	80014ec <NRF24_enableAckPayload+0x1c>

08001518 <NRF24_begin>:
{
 8001518:	b082      	sub	sp, #8
 800151a:	b570      	push	{r4, r5, r6, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	4606      	mov	r6, r0
 8001520:	460d      	mov	r5, r1
 8001522:	4614      	mov	r4, r2
 8001524:	a906      	add	r1, sp, #24
 8001526:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800152a:	2264      	movs	r2, #100	; 0x64
 800152c:	4861      	ldr	r0, [pc, #388]	; (80016b4 <NRF24_begin+0x19c>)
 800152e:	f005 ffd5 	bl	80074dc <memcpy>
	nrf24_PORT = nrf24PORT;
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <NRF24_begin+0x1a0>)
 8001534:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001536:	4b61      	ldr	r3, [pc, #388]	; (80016bc <NRF24_begin+0x1a4>)
 8001538:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800153a:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <NRF24_begin+0x1a8>)
 800153c:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fd46 	bl	8000fd0 <NRF24_csn>
	NRF24_ce(0);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fd59 	bl	8000ffc <NRF24_ce>
	HAL_Delay(5);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 fc32 	bl	8001db4 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001550:	2108      	movs	r1, #8
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fdaa 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001558:	213f      	movs	r1, #63	; 0x3f
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff fda6 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001560:	2103      	movs	r1, #3
 8001562:	2002      	movs	r0, #2
 8001564:	f7ff fda2 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001568:	2103      	movs	r1, #3
 800156a:	4608      	mov	r0, r1
 800156c:	f7ff fd9e 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001570:	2103      	movs	r1, #3
 8001572:	2004      	movs	r0, #4
 8001574:	f7ff fd9a 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001578:	2102      	movs	r1, #2
 800157a:	2005      	movs	r0, #5
 800157c:	f7ff fd96 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001580:	210f      	movs	r1, #15
 8001582:	2006      	movs	r0, #6
 8001584:	f7ff fd92 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001588:	210e      	movs	r1, #14
 800158a:	2007      	movs	r0, #7
 800158c:	f7ff fd8e 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001590:	2100      	movs	r1, #0
 8001592:	2008      	movs	r0, #8
 8001594:	f7ff fd8a 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001598:	2100      	movs	r1, #0
 800159a:	2009      	movs	r0, #9
 800159c:	f7ff fd86 	bl	80010ac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80015a0:	24e7      	movs	r4, #231	; 0xe7
 80015a2:	f88d 4004 	strb.w	r4, [sp, #4]
 80015a6:	f88d 4003 	strb.w	r4, [sp, #3]
 80015aa:	f88d 4002 	strb.w	r4, [sp, #2]
 80015ae:	f88d 4001 	strb.w	r4, [sp, #1]
 80015b2:	ad02      	add	r5, sp, #8
 80015b4:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80015b8:	2205      	movs	r2, #5
 80015ba:	4629      	mov	r1, r5
 80015bc:	200a      	movs	r0, #10
 80015be:	f7ff fd8f 	bl	80010e0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80015c2:	23c2      	movs	r3, #194	; 0xc2
 80015c4:	f88d 3004 	strb.w	r3, [sp, #4]
 80015c8:	f88d 3003 	strb.w	r3, [sp, #3]
 80015cc:	f88d 3002 	strb.w	r3, [sp, #2]
 80015d0:	f88d 3001 	strb.w	r3, [sp, #1]
 80015d4:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80015d8:	2205      	movs	r2, #5
 80015da:	4629      	mov	r1, r5
 80015dc:	200b      	movs	r0, #11
 80015de:	f7ff fd7f 	bl	80010e0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80015e2:	21c3      	movs	r1, #195	; 0xc3
 80015e4:	200c      	movs	r0, #12
 80015e6:	f7ff fd61 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80015ea:	21c4      	movs	r1, #196	; 0xc4
 80015ec:	200d      	movs	r0, #13
 80015ee:	f7ff fd5d 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80015f2:	21c5      	movs	r1, #197	; 0xc5
 80015f4:	200e      	movs	r0, #14
 80015f6:	f7ff fd59 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80015fa:	21c6      	movs	r1, #198	; 0xc6
 80015fc:	200f      	movs	r0, #15
 80015fe:	f7ff fd55 	bl	80010ac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001602:	f88d 4004 	strb.w	r4, [sp, #4]
 8001606:	f88d 4003 	strb.w	r4, [sp, #3]
 800160a:	f88d 4002 	strb.w	r4, [sp, #2]
 800160e:	f88d 4001 	strb.w	r4, [sp, #1]
 8001612:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001616:	2205      	movs	r2, #5
 8001618:	4629      	mov	r1, r5
 800161a:	2010      	movs	r0, #16
 800161c:	f7ff fd60 	bl	80010e0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001620:	2100      	movs	r1, #0
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff fd42 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001628:	2100      	movs	r1, #0
 800162a:	2012      	movs	r0, #18
 800162c:	f7ff fd3e 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	2013      	movs	r0, #19
 8001634:	f7ff fd3a 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001638:	2100      	movs	r1, #0
 800163a:	2014      	movs	r0, #20
 800163c:	f7ff fd36 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001640:	2100      	movs	r1, #0
 8001642:	2015      	movs	r0, #21
 8001644:	f7ff fd32 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001648:	2100      	movs	r1, #0
 800164a:	2016      	movs	r0, #22
 800164c:	f7ff fd2e 	bl	80010ac <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001650:	f7ff ff24 	bl	800149c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001654:	2100      	movs	r1, #0
 8001656:	201c      	movs	r0, #28
 8001658:	f7ff fd28 	bl	80010ac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	201d      	movs	r0, #29
 8001660:	f7ff fd24 	bl	80010ac <NRF24_write_register>
	NRF24_setRetries(15, 15);
 8001664:	210f      	movs	r1, #15
 8001666:	4608      	mov	r0, r1
 8001668:	f7ff fdae 	bl	80011c8 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_0dB);
 800166c:	2003      	movs	r0, #3
 800166e:	f7ff fe20 	bl	80012b2 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff fe3c 	bl	80012f0 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8001678:	2002      	movs	r0, #2
 800167a:	f7ff fe57 	bl	800132c <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 800167e:	f7ff fdfe 	bl	800127e <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8001682:	2020      	movs	r0, #32
 8001684:	f7ff fdb4 	bl	80011f0 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fe06 	bl	800129a <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 800168e:	f7ff ff1f 	bl	80014d0 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8001692:	f7ff fec2 	bl	800141a <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001696:	204c      	movs	r0, #76	; 0x4c
 8001698:	f7ff fda0 	bl	80011dc <NRF24_setChannel>
	NRF24_flush_tx();
 800169c:	f7ff fd5e 	bl	800115c <NRF24_flush_tx>
	NRF24_flush_rx();
 80016a0:	f7ff fd62 	bl	8001168 <NRF24_flush_rx>
	NRF24_powerDown();
 80016a4:	f7ff fe55 	bl	8001352 <NRF24_powerDown>
}
 80016a8:	b002      	add	sp, #8
 80016aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80016ae:	b002      	add	sp, #8
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000250 	.word	0x20000250
 80016b8:	2000024c 	.word	0x2000024c
 80016bc:	20000248 	.word	0x20000248
 80016c0:	20000246 	.word	0x20000246

080016c4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80016c8:	ac07      	add	r4, sp, #28
 80016ca:	4dc4      	ldr	r5, [pc, #784]	; (80019dc <printRadioSettings+0x318>)
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	f824 3b02 	strh.w	r3, [r4], #2
 80016de:	0c1b      	lsrs	r3, r3, #16
 80016e0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e2:	a807      	add	r0, sp, #28
 80016e4:	f7fe fd94 	bl	8000210 <strlen>
 80016e8:	230a      	movs	r3, #10
 80016ea:	b282      	uxth	r2, r0
 80016ec:	a907      	add	r1, sp, #28
 80016ee:	48bc      	ldr	r0, [pc, #752]	; (80019e0 <printRadioSettings+0x31c>)
 80016f0:	f003 fd37 	bl	8005162 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fc97 	bl	8001028 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 80016fa:	f010 0f08 	tst.w	r0, #8
 80016fe:	f000 8261 	beq.w	8001bc4 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001702:	f010 0f04 	tst.w	r0, #4
 8001706:	f000 8251 	beq.w	8001bac <printRadioSettings+0x4e8>
 800170a:	ac07      	add	r4, sp, #28
 800170c:	4db5      	ldr	r5, [pc, #724]	; (80019e4 <printRadioSettings+0x320>)
 800170e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800171a:	a807      	add	r0, sp, #28
 800171c:	f7fe fd78 	bl	8000210 <strlen>
 8001720:	4caf      	ldr	r4, [pc, #700]	; (80019e0 <printRadioSettings+0x31c>)
 8001722:	230a      	movs	r3, #10
 8001724:	b282      	uxth	r2, r0
 8001726:	a907      	add	r1, sp, #28
 8001728:	4620      	mov	r0, r4
 800172a:	f003 fd1a 	bl	8005162 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fc7a 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001734:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001750:	f000 0201 	and.w	r2, r0, #1
 8001754:	49a4      	ldr	r1, [pc, #656]	; (80019e8 <printRadioSettings+0x324>)
 8001756:	a807      	add	r0, sp, #28
 8001758:	f006 fd4c 	bl	80081f4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800175c:	a807      	add	r0, sp, #28
 800175e:	f7fe fd57 	bl	8000210 <strlen>
 8001762:	230a      	movs	r3, #10
 8001764:	b282      	uxth	r2, r0
 8001766:	a907      	add	r1, sp, #28
 8001768:	4620      	mov	r0, r4
 800176a:	f003 fcfa 	bl	8005162 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800176e:	2002      	movs	r0, #2
 8001770:	f7ff fc5a 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001774:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001778:	9303      	str	r3, [sp, #12]
 800177a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001790:	f000 0201 	and.w	r2, r0, #1
 8001794:	4995      	ldr	r1, [pc, #596]	; (80019ec <printRadioSettings+0x328>)
 8001796:	a807      	add	r0, sp, #28
 8001798:	f006 fd2c 	bl	80081f4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800179c:	a807      	add	r0, sp, #28
 800179e:	f7fe fd37 	bl	8000210 <strlen>
 80017a2:	230a      	movs	r3, #10
 80017a4:	b282      	uxth	r2, r0
 80017a6:	a907      	add	r1, sp, #28
 80017a8:	4620      	mov	r0, r4
 80017aa:	f003 fcda 	bl	8005162 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80017ae:	2003      	movs	r0, #3
 80017b0:	f7ff fc3a 	bl	8001028 <NRF24_read_register>
 80017b4:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80017b8:	3202      	adds	r2, #2
 80017ba:	498d      	ldr	r1, [pc, #564]	; (80019f0 <printRadioSettings+0x32c>)
 80017bc:	a807      	add	r0, sp, #28
 80017be:	f006 fd19 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017c2:	a807      	add	r0, sp, #28
 80017c4:	f7fe fd24 	bl	8000210 <strlen>
 80017c8:	230a      	movs	r3, #10
 80017ca:	b282      	uxth	r2, r0
 80017cc:	a907      	add	r1, sp, #28
 80017ce:	4620      	mov	r0, r4
 80017d0:	f003 fcc7 	bl	8005162 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80017d4:	2005      	movs	r0, #5
 80017d6:	f7ff fc27 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80017da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80017de:	4985      	ldr	r1, [pc, #532]	; (80019f4 <printRadioSettings+0x330>)
 80017e0:	a807      	add	r0, sp, #28
 80017e2:	f006 fd07 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017e6:	a807      	add	r0, sp, #28
 80017e8:	f7fe fd12 	bl	8000210 <strlen>
 80017ec:	230a      	movs	r3, #10
 80017ee:	b282      	uxth	r2, r0
 80017f0:	a907      	add	r1, sp, #28
 80017f2:	4620      	mov	r0, r4
 80017f4:	f003 fcb5 	bl	8005162 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80017f8:	2006      	movs	r0, #6
 80017fa:	f7ff fc15 	bl	8001028 <NRF24_read_register>
 80017fe:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001800:	f010 0f08 	tst.w	r0, #8
 8001804:	f000 81e5 	beq.w	8001bd2 <printRadioSettings+0x50e>
 8001808:	ad07      	add	r5, sp, #28
 800180a:	4e7b      	ldr	r6, [pc, #492]	; (80019f8 <printRadioSettings+0x334>)
 800180c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800180e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001810:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001814:	f845 0b04 	str.w	r0, [r5], #4
 8001818:	f825 1b02 	strh.w	r1, [r5], #2
 800181c:	0c09      	lsrs	r1, r1, #16
 800181e:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001820:	a807      	add	r0, sp, #28
 8001822:	f7fe fcf5 	bl	8000210 <strlen>
 8001826:	230a      	movs	r3, #10
 8001828:	b282      	uxth	r2, r0
 800182a:	a907      	add	r1, sp, #28
 800182c:	486c      	ldr	r0, [pc, #432]	; (80019e0 <printRadioSettings+0x31c>)
 800182e:	f003 fc98 	bl	8005162 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 8001832:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001836:	2c00      	cmp	r4, #0
 8001838:	f000 81d8 	beq.w	8001bec <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800183c:	2c01      	cmp	r4, #1
 800183e:	f000 81dc 	beq.w	8001bfa <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001842:	2c02      	cmp	r4, #2
 8001844:	f000 81e0 	beq.w	8001c08 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001848:	2c03      	cmp	r4, #3
 800184a:	f000 81e7 	beq.w	8001c1c <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800184e:	a807      	add	r0, sp, #28
 8001850:	f7fe fcde 	bl	8000210 <strlen>
 8001854:	4c62      	ldr	r4, [pc, #392]	; (80019e0 <printRadioSettings+0x31c>)
 8001856:	230a      	movs	r3, #10
 8001858:	b282      	uxth	r2, r0
 800185a:	a907      	add	r1, sp, #28
 800185c:	4620      	mov	r0, r4
 800185e:	f003 fc80 	bl	8005162 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001862:	2205      	movs	r2, #5
 8001864:	a905      	add	r1, sp, #20
 8001866:	200a      	movs	r0, #10
 8001868:	f7ff fc00 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800186c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001870:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001874:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001878:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800187c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001880:	9502      	str	r5, [sp, #8]
 8001882:	9001      	str	r0, [sp, #4]
 8001884:	9100      	str	r1, [sp, #0]
 8001886:	495d      	ldr	r1, [pc, #372]	; (80019fc <printRadioSettings+0x338>)
 8001888:	a807      	add	r0, sp, #28
 800188a:	f006 fcb3 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800188e:	a807      	add	r0, sp, #28
 8001890:	f7fe fcbe 	bl	8000210 <strlen>
 8001894:	230a      	movs	r3, #10
 8001896:	b282      	uxth	r2, r0
 8001898:	a907      	add	r1, sp, #28
 800189a:	4620      	mov	r0, r4
 800189c:	f003 fc61 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	2205      	movs	r2, #5
 80018a2:	a905      	add	r1, sp, #20
 80018a4:	200b      	movs	r0, #11
 80018a6:	f7ff fbe1 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018aa:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80018ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80018b2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80018b6:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80018ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80018be:	9502      	str	r5, [sp, #8]
 80018c0:	9001      	str	r0, [sp, #4]
 80018c2:	9100      	str	r1, [sp, #0]
 80018c4:	494e      	ldr	r1, [pc, #312]	; (8001a00 <printRadioSettings+0x33c>)
 80018c6:	a807      	add	r0, sp, #28
 80018c8:	f006 fc94 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018cc:	a807      	add	r0, sp, #28
 80018ce:	f7fe fc9f 	bl	8000210 <strlen>
 80018d2:	230a      	movs	r3, #10
 80018d4:	b282      	uxth	r2, r0
 80018d6:	a907      	add	r1, sp, #28
 80018d8:	4620      	mov	r0, r4
 80018da:	f003 fc42 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	a905      	add	r1, sp, #20
 80018e2:	200c      	movs	r0, #12
 80018e4:	f7ff fbc2 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018e8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018ec:	4945      	ldr	r1, [pc, #276]	; (8001a04 <printRadioSettings+0x340>)
 80018ee:	a807      	add	r0, sp, #28
 80018f0:	f006 fc80 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018f4:	a807      	add	r0, sp, #28
 80018f6:	f7fe fc8b 	bl	8000210 <strlen>
 80018fa:	230a      	movs	r3, #10
 80018fc:	b282      	uxth	r2, r0
 80018fe:	a907      	add	r1, sp, #28
 8001900:	4620      	mov	r0, r4
 8001902:	f003 fc2e 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	a905      	add	r1, sp, #20
 800190a:	200d      	movs	r0, #13
 800190c:	f7ff fbae 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001910:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001914:	493c      	ldr	r1, [pc, #240]	; (8001a08 <printRadioSettings+0x344>)
 8001916:	a807      	add	r0, sp, #28
 8001918:	f006 fc6c 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800191c:	a807      	add	r0, sp, #28
 800191e:	f7fe fc77 	bl	8000210 <strlen>
 8001922:	230a      	movs	r3, #10
 8001924:	b282      	uxth	r2, r0
 8001926:	a907      	add	r1, sp, #28
 8001928:	4620      	mov	r0, r4
 800192a:	f003 fc1a 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	a905      	add	r1, sp, #20
 8001932:	200e      	movs	r0, #14
 8001934:	f7ff fb9a 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001938:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800193c:	4933      	ldr	r1, [pc, #204]	; (8001a0c <printRadioSettings+0x348>)
 800193e:	a807      	add	r0, sp, #28
 8001940:	f006 fc58 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001944:	a807      	add	r0, sp, #28
 8001946:	f7fe fc63 	bl	8000210 <strlen>
 800194a:	230a      	movs	r3, #10
 800194c:	b282      	uxth	r2, r0
 800194e:	a907      	add	r1, sp, #28
 8001950:	4620      	mov	r0, r4
 8001952:	f003 fc06 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	a905      	add	r1, sp, #20
 800195a:	200f      	movs	r0, #15
 800195c:	f7ff fb86 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001964:	492a      	ldr	r1, [pc, #168]	; (8001a10 <printRadioSettings+0x34c>)
 8001966:	a807      	add	r0, sp, #28
 8001968:	f006 fc44 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800196c:	a807      	add	r0, sp, #28
 800196e:	f7fe fc4f 	bl	8000210 <strlen>
 8001972:	230a      	movs	r3, #10
 8001974:	b282      	uxth	r2, r0
 8001976:	a907      	add	r1, sp, #28
 8001978:	4620      	mov	r0, r4
 800197a:	f003 fbf2 	bl	8005162 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800197e:	2205      	movs	r2, #5
 8001980:	a905      	add	r1, sp, #20
 8001982:	2010      	movs	r0, #16
 8001984:	f7ff fb72 	bl	800106c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001988:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800198c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001990:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001994:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001998:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	9001      	str	r0, [sp, #4]
 80019a0:	9100      	str	r1, [sp, #0]
 80019a2:	491c      	ldr	r1, [pc, #112]	; (8001a14 <printRadioSettings+0x350>)
 80019a4:	a807      	add	r0, sp, #28
 80019a6:	f006 fc25 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019aa:	a807      	add	r0, sp, #28
 80019ac:	f7fe fc30 	bl	8000210 <strlen>
 80019b0:	230a      	movs	r3, #10
 80019b2:	b282      	uxth	r2, r0
 80019b4:	a907      	add	r1, sp, #28
 80019b6:	4620      	mov	r0, r4
 80019b8:	f003 fbd3 	bl	8005162 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80019bc:	2011      	movs	r0, #17
 80019be:	f7ff fb33 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019c2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019c6:	4914      	ldr	r1, [pc, #80]	; (8001a18 <printRadioSettings+0x354>)
 80019c8:	a807      	add	r0, sp, #28
 80019ca:	f006 fc13 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ce:	a807      	add	r0, sp, #28
 80019d0:	f7fe fc1e 	bl	8000210 <strlen>
 80019d4:	230a      	movs	r3, #10
 80019d6:	b282      	uxth	r2, r0
 80019d8:	e020      	b.n	8001a1c <printRadioSettings+0x358>
 80019da:	bf00      	nop
 80019dc:	0800b078 	.word	0x0800b078
 80019e0:	200002b4 	.word	0x200002b4
 80019e4:	0800b0ac 	.word	0x0800b0ac
 80019e8:	0800b0f8 	.word	0x0800b0f8
 80019ec:	0800b13c 	.word	0x0800b13c
 80019f0:	0800b188 	.word	0x0800b188
 80019f4:	0800b1a4 	.word	0x0800b1a4
 80019f8:	0800b1b8 	.word	0x0800b1b8
 80019fc:	0800b238 	.word	0x0800b238
 8001a00:	0800b268 	.word	0x0800b268
 8001a04:	0800b298 	.word	0x0800b298
 8001a08:	0800b2c0 	.word	0x0800b2c0
 8001a0c:	0800b2e8 	.word	0x0800b2e8
 8001a10:	0800b310 	.word	0x0800b310
 8001a14:	0800b338 	.word	0x0800b338
 8001a18:	0800b364 	.word	0x0800b364
 8001a1c:	a907      	add	r1, sp, #28
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f003 fb9f 	bl	8005162 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001a24:	2012      	movs	r0, #18
 8001a26:	f7ff faff 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a2a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a2e:	498a      	ldr	r1, [pc, #552]	; (8001c58 <printRadioSettings+0x594>)
 8001a30:	a807      	add	r0, sp, #28
 8001a32:	f006 fbdf 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a36:	a807      	add	r0, sp, #28
 8001a38:	f7fe fbea 	bl	8000210 <strlen>
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	b282      	uxth	r2, r0
 8001a40:	a907      	add	r1, sp, #28
 8001a42:	4620      	mov	r0, r4
 8001a44:	f003 fb8d 	bl	8005162 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001a48:	2013      	movs	r0, #19
 8001a4a:	f7ff faed 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a52:	4982      	ldr	r1, [pc, #520]	; (8001c5c <printRadioSettings+0x598>)
 8001a54:	a807      	add	r0, sp, #28
 8001a56:	f006 fbcd 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a5a:	a807      	add	r0, sp, #28
 8001a5c:	f7fe fbd8 	bl	8000210 <strlen>
 8001a60:	230a      	movs	r3, #10
 8001a62:	b282      	uxth	r2, r0
 8001a64:	a907      	add	r1, sp, #28
 8001a66:	4620      	mov	r0, r4
 8001a68:	f003 fb7b 	bl	8005162 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001a6c:	2014      	movs	r0, #20
 8001a6e:	f7ff fadb 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a72:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a76:	497a      	ldr	r1, [pc, #488]	; (8001c60 <printRadioSettings+0x59c>)
 8001a78:	a807      	add	r0, sp, #28
 8001a7a:	f006 fbbb 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a7e:	a807      	add	r0, sp, #28
 8001a80:	f7fe fbc6 	bl	8000210 <strlen>
 8001a84:	230a      	movs	r3, #10
 8001a86:	b282      	uxth	r2, r0
 8001a88:	a907      	add	r1, sp, #28
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f003 fb69 	bl	8005162 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001a90:	2015      	movs	r0, #21
 8001a92:	f7ff fac9 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a96:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a9a:	4972      	ldr	r1, [pc, #456]	; (8001c64 <printRadioSettings+0x5a0>)
 8001a9c:	a807      	add	r0, sp, #28
 8001a9e:	f006 fba9 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aa2:	a807      	add	r0, sp, #28
 8001aa4:	f7fe fbb4 	bl	8000210 <strlen>
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	b282      	uxth	r2, r0
 8001aac:	a907      	add	r1, sp, #28
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f003 fb57 	bl	8005162 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001ab4:	2016      	movs	r0, #22
 8001ab6:	f7ff fab7 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aba:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001abe:	496a      	ldr	r1, [pc, #424]	; (8001c68 <printRadioSettings+0x5a4>)
 8001ac0:	a807      	add	r0, sp, #28
 8001ac2:	f006 fb97 	bl	80081f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac6:	a807      	add	r0, sp, #28
 8001ac8:	f7fe fba2 	bl	8000210 <strlen>
 8001acc:	230a      	movs	r3, #10
 8001ace:	b282      	uxth	r2, r0
 8001ad0:	a907      	add	r1, sp, #28
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f003 fb45 	bl	8005162 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f7ff faa5 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ade:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001ae2:	9303      	str	r3, [sp, #12]
 8001ae4:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001afa:	f000 0201 	and.w	r2, r0, #1
 8001afe:	495b      	ldr	r1, [pc, #364]	; (8001c6c <printRadioSettings+0x5a8>)
 8001b00:	a807      	add	r0, sp, #28
 8001b02:	f006 fb77 	bl	80081f4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b06:	a807      	add	r0, sp, #28
 8001b08:	f7fe fb82 	bl	8000210 <strlen>
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	b282      	uxth	r2, r0
 8001b10:	a907      	add	r1, sp, #28
 8001b12:	4620      	mov	r0, r4
 8001b14:	f003 fb25 	bl	8005162 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001b18:	201d      	movs	r0, #29
 8001b1a:	f7ff fa85 	bl	8001028 <NRF24_read_register>
 8001b1e:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001b20:	f010 0f04 	tst.w	r0, #4
 8001b24:	f000 8081 	beq.w	8001c2a <printRadioSettings+0x566>
 8001b28:	ac07      	add	r4, sp, #28
 8001b2a:	4d51      	ldr	r5, [pc, #324]	; (8001c70 <printRadioSettings+0x5ac>)
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b34:	f844 0b04 	str.w	r0, [r4], #4
 8001b38:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b3a:	a807      	add	r0, sp, #28
 8001b3c:	f7fe fb68 	bl	8000210 <strlen>
 8001b40:	230a      	movs	r3, #10
 8001b42:	b282      	uxth	r2, r0
 8001b44:	a907      	add	r1, sp, #28
 8001b46:	484b      	ldr	r0, [pc, #300]	; (8001c74 <printRadioSettings+0x5b0>)
 8001b48:	f003 fb0b 	bl	8005162 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001b4c:	f016 0f02 	tst.w	r6, #2
 8001b50:	d178      	bne.n	8001c44 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001b52:	ac07      	add	r4, sp, #28
 8001b54:	4d48      	ldr	r5, [pc, #288]	; (8001c78 <printRadioSettings+0x5b4>)
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5e:	c403      	stmia	r4!, {r0, r1}
 8001b60:	f824 2b02 	strh.w	r2, [r4], #2
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b68:	a807      	add	r0, sp, #28
 8001b6a:	f7fe fb51 	bl	8000210 <strlen>
 8001b6e:	4e41      	ldr	r6, [pc, #260]	; (8001c74 <printRadioSettings+0x5b0>)
 8001b70:	230a      	movs	r3, #10
 8001b72:	b282      	uxth	r2, r0
 8001b74:	a907      	add	r1, sp, #28
 8001b76:	4630      	mov	r0, r6
 8001b78:	f003 faf3 	bl	8005162 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001b7c:	ac07      	add	r4, sp, #28
 8001b7e:	4d3f      	ldr	r5, [pc, #252]	; (8001c7c <printRadioSettings+0x5b8>)
 8001b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	f824 3b02 	strh.w	r3, [r4], #2
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b96:	a807      	add	r0, sp, #28
 8001b98:	f7fe fb3a 	bl	8000210 <strlen>
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	b282      	uxth	r2, r0
 8001ba0:	a907      	add	r1, sp, #28
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f003 fadd 	bl	8005162 <HAL_UART_Transmit>
}
 8001ba8:	b020      	add	sp, #128	; 0x80
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001bac:	ac07      	add	r4, sp, #28
 8001bae:	4d34      	ldr	r5, [pc, #208]	; (8001c80 <printRadioSettings+0x5bc>)
 8001bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bb8:	c403      	stmia	r4!, {r0, r1}
 8001bba:	f824 2b02 	strh.w	r2, [r4], #2
 8001bbe:	0c12      	lsrs	r2, r2, #16
 8001bc0:	7022      	strb	r2, [r4, #0]
 8001bc2:	e5aa      	b.n	800171a <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001bc4:	ac07      	add	r4, sp, #28
 8001bc6:	4d2f      	ldr	r5, [pc, #188]	; (8001c84 <printRadioSettings+0x5c0>)
 8001bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	6023      	str	r3, [r4, #0]
 8001bd0:	e5a3      	b.n	800171a <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001bd2:	ad07      	add	r5, sp, #28
 8001bd4:	4e2c      	ldr	r6, [pc, #176]	; (8001c88 <printRadioSettings+0x5c4>)
 8001bd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bda:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001bde:	f845 0b04 	str.w	r0, [r5], #4
 8001be2:	f825 1b02 	strh.w	r1, [r5], #2
 8001be6:	0c09      	lsrs	r1, r1, #16
 8001be8:	7029      	strb	r1, [r5, #0]
 8001bea:	e619      	b.n	8001820 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001bec:	ac07      	add	r4, sp, #28
 8001bee:	4d27      	ldr	r5, [pc, #156]	; (8001c8c <printRadioSettings+0x5c8>)
 8001bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	6023      	str	r3, [r4, #0]
 8001bf8:	e629      	b.n	800184e <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001bfa:	ac07      	add	r4, sp, #28
 8001bfc:	4d24      	ldr	r5, [pc, #144]	; (8001c90 <printRadioSettings+0x5cc>)
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	e622      	b.n	800184e <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001c08:	ac07      	add	r4, sp, #28
 8001c0a:	4d22      	ldr	r5, [pc, #136]	; (8001c94 <printRadioSettings+0x5d0>)
 8001c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	f824 3b02 	strh.w	r3, [r4], #2
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	7023      	strb	r3, [r4, #0]
 8001c1a:	e618      	b.n	800184e <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001c1c:	ac07      	add	r4, sp, #28
 8001c1e:	4d1e      	ldr	r5, [pc, #120]	; (8001c98 <printRadioSettings+0x5d4>)
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	8023      	strh	r3, [r4, #0]
 8001c28:	e611      	b.n	800184e <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c2a:	ac07      	add	r4, sp, #28
 8001c2c:	4d1b      	ldr	r5, [pc, #108]	; (8001c9c <printRadioSettings+0x5d8>)
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c36:	f844 0b04 	str.w	r0, [r4], #4
 8001c3a:	f824 1b02 	strh.w	r1, [r4], #2
 8001c3e:	0c09      	lsrs	r1, r1, #16
 8001c40:	7021      	strb	r1, [r4, #0]
 8001c42:	e77a      	b.n	8001b3a <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001c44:	ac07      	add	r4, sp, #28
 8001c46:	4d16      	ldr	r5, [pc, #88]	; (8001ca0 <printRadioSettings+0x5dc>)
 8001c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c50:	c403      	stmia	r4!, {r0, r1}
 8001c52:	8022      	strh	r2, [r4, #0]
 8001c54:	e788      	b.n	8001b68 <printRadioSettings+0x4a4>
 8001c56:	bf00      	nop
 8001c58:	0800b380 	.word	0x0800b380
 8001c5c:	0800b39c 	.word	0x0800b39c
 8001c60:	0800b3b8 	.word	0x0800b3b8
 8001c64:	0800b3d4 	.word	0x0800b3d4
 8001c68:	0800b3f0 	.word	0x0800b3f0
 8001c6c:	0800b40c 	.word	0x0800b40c
 8001c70:	0800b458 	.word	0x0800b458
 8001c74:	200002b4 	.word	0x200002b4
 8001c78:	0800b4a4 	.word	0x0800b4a4
 8001c7c:	0800b078 	.word	0x0800b078
 8001c80:	0800b0c8 	.word	0x0800b0c8
 8001c84:	0800b0e4 	.word	0x0800b0e4
 8001c88:	0800b1d0 	.word	0x0800b1d0
 8001c8c:	0800b1e8 	.word	0x0800b1e8
 8001c90:	0800b1fc 	.word	0x0800b1fc
 8001c94:	0800b210 	.word	0x0800b210
 8001c98:	0800b224 	.word	0x0800b224
 8001c9c:	0800b470 	.word	0x0800b470
 8001ca0:	0800b488 	.word	0x0800b488

08001ca4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	b508      	push	{r3, lr}
 8001ca8:	f10d 0c08 	add.w	ip, sp, #8
 8001cac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	4661      	mov	r1, ip
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <nrf24_DebugUART_Init+0x20>)
 8001cb6:	f005 fc11 	bl	80074dc <memcpy>
}
 8001cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cbe:	b004      	add	sp, #16
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200002b4 	.word	0x200002b4

08001cc8 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <DWT_Init+0x20>)
 8001cca:	68d3      	ldr	r3, [r2, #12]
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <DWT_Init+0x24>)
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <DWT_Init+0x28>)
 8001cd6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000edf0 	.word	0xe000edf0
 8001cec:	e0001000 	.word	0xe0001000
 8001cf0:	c5acce55 	.word	0xc5acce55

08001cf4 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <DWT_Delay+0x20>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <DWT_Delay+0x24>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <DWT_Delay+0x28>)
 8001cfe:	fba1 1303 	umull	r1, r3, r1, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <DWT_Delay+0x20>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	4283      	cmp	r3, r0
 8001d10:	d3fa      	bcc.n	8001d08 <DWT_Delay+0x14>
}
 8001d12:	4770      	bx	lr
 8001d14:	e0001000 	.word	0xe0001000
 8001d18:	20000054 	.word	0x20000054
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_InitTick+0x40>)
 8001d26:	7818      	ldrb	r0, [r3, #0]
 8001d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_InitTick+0x44>)
 8001d32:	6810      	ldr	r0, [r2, #0]
 8001d34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d38:	f000 fb2e 	bl	8002398 <HAL_SYSTICK_Config>
 8001d3c:	b968      	cbnz	r0, 8001d5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	2c0f      	cmp	r4, #15
 8001d40:	d901      	bls.n	8001d46 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
 8001d44:	e00a      	b.n	8001d5c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d46:	2200      	movs	r2, #0
 8001d48:	4621      	mov	r1, r4
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4e:	f000 fae3 	bl	8002318 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_InitTick+0x48>)
 8001d54:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2000      	movs	r0, #0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
}
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000054 	.word	0x20000054
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_Init>:
{
 8001d6c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001d6e:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x20>)
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fabb 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff ffce 	bl	8001d20 <HAL_InitTick>
  HAL_MspInit();
 8001d84:	f005 f8ea 	bl	8006f5c <HAL_MspInit>
}
 8001d88:	2000      	movs	r0, #0
 8001d8a:	bd08      	pop	{r3, pc}
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_IncTick+0x10>)
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_IncTick+0x14>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	440b      	add	r3, r1
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000540 	.word	0x20000540
 8001da4:	20000000 	.word	0x20000000

08001da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <HAL_GetTick+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000540 	.word	0x20000540

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
 8001db6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fff6 	bl	8001da8 <HAL_GetTick>
 8001dbc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001dc2:	d002      	beq.n	8001dca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_Delay+0x24>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	f7ff ffed 	bl	8001da8 <HAL_GetTick>
 8001dce:	1b40      	subs	r0, r0, r5
 8001dd0:	42a0      	cmp	r0, r4
 8001dd2:	d3fa      	bcc.n	8001dca <HAL_Delay+0x16>
  {
  }
}
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <ADC_Init+0x12c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001de4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	6841      	ldr	r1, [r0, #4]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dee:	6802      	ldr	r2, [r0, #0]
 8001df0:	6853      	ldr	r3, [r2, #4]
 8001df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	6853      	ldr	r3, [r2, #4]
 8001dfc:	6901      	ldr	r1, [r0, #16]
 8001dfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e02:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e04:	6802      	ldr	r2, [r0, #0]
 8001e06:	6853      	ldr	r3, [r2, #4]
 8001e08:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e0c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e0e:	6802      	ldr	r2, [r0, #0]
 8001e10:	6853      	ldr	r3, [r2, #4]
 8001e12:	6881      	ldr	r1, [r0, #8]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e18:	6802      	ldr	r2, [r0, #0]
 8001e1a:	6893      	ldr	r3, [r2, #8]
 8001e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e20:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e22:	6802      	ldr	r2, [r0, #0]
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	68c1      	ldr	r1, [r0, #12]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <ADC_Init+0x130>)
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d04b      	beq.n	8001ecc <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e34:	6802      	ldr	r2, [r0, #0]
 8001e36:	6893      	ldr	r3, [r2, #8]
 8001e38:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001e3c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3e:	6802      	ldr	r2, [r0, #0]
 8001e40:	6893      	ldr	r3, [r2, #8]
 8001e42:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e48:	6802      	ldr	r2, [r0, #0]
 8001e4a:	6893      	ldr	r3, [r2, #8]
 8001e4c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e50:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e52:	6802      	ldr	r2, [r0, #0]
 8001e54:	6893      	ldr	r3, [r2, #8]
 8001e56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e5c:	6802      	ldr	r2, [r0, #0]
 8001e5e:	6893      	ldr	r3, [r2, #8]
 8001e60:	f023 0302 	bic.w	r3, r3, #2
 8001e64:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e66:	6802      	ldr	r2, [r0, #0]
 8001e68:	6893      	ldr	r3, [r2, #8]
 8001e6a:	6981      	ldr	r1, [r0, #24]
 8001e6c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001e70:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e72:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d133      	bne.n	8001ee2 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e7a:	6802      	ldr	r2, [r0, #0]
 8001e7c:	6853      	ldr	r3, [r2, #4]
 8001e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e82:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e84:	6802      	ldr	r2, [r0, #0]
 8001e86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e8e:	6801      	ldr	r1, [r0, #0]
 8001e90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001e92:	69c2      	ldr	r2, [r0, #28]
 8001e94:	3a01      	subs	r2, #1
 8001e96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001e9a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9c:	6802      	ldr	r2, [r0, #0]
 8001e9e:	6893      	ldr	r3, [r2, #8]
 8001ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ea4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ea6:	6802      	ldr	r2, [r0, #0]
 8001ea8:	6893      	ldr	r3, [r2, #8]
 8001eaa:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001eae:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001eb2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	6893      	ldr	r3, [r2, #8]
 8001eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ebc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ebe:	6802      	ldr	r2, [r0, #0]
 8001ec0:	6893      	ldr	r3, [r2, #8]
 8001ec2:	6941      	ldr	r1, [r0, #20]
 8001ec4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001ec8:	6093      	str	r3, [r2, #8]
}
 8001eca:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ecc:	6802      	ldr	r2, [r0, #0]
 8001ece:	6893      	ldr	r3, [r2, #8]
 8001ed0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ed4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed6:	6802      	ldr	r2, [r0, #0]
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	e7bc      	b.n	8001e5c <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee2:	6802      	ldr	r2, [r0, #0]
 8001ee4:	6853      	ldr	r3, [r2, #4]
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eea:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6853      	ldr	r3, [r2, #4]
 8001ef0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ef4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef6:	6801      	ldr	r1, [r0, #0]
 8001ef8:	684b      	ldr	r3, [r1, #4]
 8001efa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001efc:	3a01      	subs	r2, #1
 8001efe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e7be      	b.n	8001e84 <ADC_Init+0xa8>
 8001f06:	bf00      	nop
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	0f000001 	.word	0x0f000001

08001f10 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001f10:	b328      	cbz	r0, 8001f5e <HAL_ADC_Init+0x4e>
{
 8001f12:	b510      	push	{r4, lr}
 8001f14:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f18:	b143      	cbz	r3, 8001f2c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f1c:	f013 0f10 	tst.w	r3, #16
 8001f20:	d00b      	beq.n	8001f3a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001f24:	2300      	movs	r3, #0
 8001f26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f2a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001f2c:	f005 f82e 	bl	8006f8c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	2300      	movs	r3, #0
 8001f32:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001f34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001f38:	e7ef      	b.n	8001f1a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_ADC_Init+0x54>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff ff48 	bl	8001ddc <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6423      	str	r3, [r4, #64]	; 0x40
 8001f5c:	e7e2      	b.n	8001f24 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	ffffeefd 	.word	0xffffeefd

08001f68 <HAL_ADC_Start>:
{
 8001f68:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001f6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d073      	beq.n	800205e <HAL_ADC_Start+0xf6>
 8001f76:	2301      	movs	r3, #1
 8001f78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f7c:	6803      	ldr	r3, [r0, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	f012 0f01 	tst.w	r2, #1
 8001f84:	d113      	bne.n	8001fae <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_ADC_Start+0x10c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a39      	ldr	r2, [pc, #228]	; (8002078 <HAL_ADC_Start+0x110>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f9e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0x40>
      counter--;
 8001fa2:	9b01      	ldr	r3, [sp, #4]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001fa8:	9b01      	ldr	r3, [sp, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fae:	6802      	ldr	r2, [r0, #0]
 8001fb0:	6893      	ldr	r3, [r2, #8]
 8001fb2:	f013 0f01 	tst.w	r3, #1
 8001fb6:	d054      	beq.n	8002062 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_ADC_Start+0x114>)
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fca:	d005      	beq.n	8001fd8 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd6:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fda:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001fde:	d019      	beq.n	8002014 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fe0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001fe2:	f023 0306 	bic.w	r3, r3, #6
 8001fe6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fee:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001ff2:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_ADC_Start+0x118>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f013 0f1f 	tst.w	r3, #31
 8001ffc:	d10d      	bne.n	800201a <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002006:	d12f      	bne.n	8002068 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002010:	2000      	movs	r0, #0
 8002012:	e027      	b.n	8002064 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8002014:	2300      	movs	r3, #0
 8002016:	6443      	str	r3, [r0, #68]	; 0x44
 8002018:	e7e6      	b.n	8001fe8 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_ADC_Start+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00a      	beq.n	8002038 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_ADC_Start+0x118>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f013 0f10 	tst.w	r3, #16
 800202a:	d11f      	bne.n	800206c <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_ADC_Start+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00a      	beq.n	800204a <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
 8002036:	e015      	b.n	8002064 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800203e:	d1f0      	bne.n	8002022 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e7eb      	b.n	8002022 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002050:	d10e      	bne.n	8002070 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800205a:	2000      	movs	r0, #0
 800205c:	e002      	b.n	8002064 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 800205e:	2002      	movs	r0, #2
 8002060:	e000      	b.n	8002064 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 8002062:	2000      	movs	r0, #0
}
 8002064:	b002      	add	sp, #8
 8002066:	4770      	bx	lr
  return HAL_OK;
 8002068:	2000      	movs	r0, #0
 800206a:	e7fb      	b.n	8002064 <HAL_ADC_Start+0xfc>
 800206c:	2000      	movs	r0, #0
 800206e:	e7f9      	b.n	8002064 <HAL_ADC_Start+0xfc>
 8002070:	2000      	movs	r0, #0
 8002072:	e7f7      	b.n	8002064 <HAL_ADC_Start+0xfc>
 8002074:	20000054 	.word	0x20000054
 8002078:	431bde83 	.word	0x431bde83
 800207c:	fffff8fe 	.word	0xfffff8fe
 8002080:	40012300 	.word	0x40012300
 8002084:	40012000 	.word	0x40012000
 8002088:	40012200 	.word	0x40012200

0800208c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800208c:	6803      	ldr	r3, [r0, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002094:	d003      	beq.n	800209e <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002096:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002098:	f413 7f80 	tst.w	r3, #256	; 0x100
 800209c:	d11c      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x4c>
{
 800209e:	b570      	push	{r4, r5, r6, lr}
 80020a0:	460d      	mov	r5, r1
 80020a2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80020a4:	f7ff fe80 	bl	8001da8 <HAL_GetTick>
 80020a8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f012 0f02 	tst.w	r2, #2
 80020b2:	d11a      	bne.n	80020ea <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80020b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80020b8:	d0f7      	beq.n	80020aa <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ba:	b125      	cbz	r5, 80020c6 <HAL_ADC_PollForConversion+0x3a>
 80020bc:	f7ff fe74 	bl	8001da8 <HAL_GetTick>
 80020c0:	1b80      	subs	r0, r0, r6
 80020c2:	42a8      	cmp	r0, r5
 80020c4:	d9f1      	bls.n	80020aa <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80020ce:	2300      	movs	r3, #0
 80020d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80020d4:	2003      	movs	r0, #3
 80020d6:	e02d      	b.n	8002134 <HAL_ADC_PollForConversion+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80020e0:	2300      	movs	r3, #0
 80020e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
}
 80020e8:	4770      	bx	lr
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ea:	f06f 0212 	mvn.w	r2, #18
 80020ee:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002100:	d117      	bne.n	8002132 <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002102:	69a2      	ldr	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002104:	b9ba      	cbnz	r2, 8002136 <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002108:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800210c:	d003      	beq.n	8002116 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800210e:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002110:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002114:	d111      	bne.n	800213a <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002120:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002124:	d10b      	bne.n	800213e <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 800212e:	2000      	movs	r0, #0
 8002130:	e000      	b.n	8002134 <HAL_ADC_PollForConversion+0xa8>
 8002132:	2000      	movs	r0, #0
}
 8002134:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002136:	2000      	movs	r0, #0
 8002138:	e7fc      	b.n	8002134 <HAL_ADC_PollForConversion+0xa8>
 800213a:	2000      	movs	r0, #0
 800213c:	e7fa      	b.n	8002134 <HAL_ADC_PollForConversion+0xa8>
 800213e:	2000      	movs	r0, #0
 8002140:	e7f8      	b.n	8002134 <HAL_ADC_PollForConversion+0xa8>

08002142 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_ConfigChannel>:
{
 8002148:	b430      	push	{r4, r5}
 800214a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002150:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	f000 80c0 	beq.w	80022da <HAL_ADC_ConfigChannel+0x192>
 800215a:	2301      	movs	r3, #1
 800215c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002160:	680b      	ldr	r3, [r1, #0]
 8002162:	2b09      	cmp	r3, #9
 8002164:	d922      	bls.n	80021ac <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002166:	6805      	ldr	r5, [r0, #0]
 8002168:	68ea      	ldr	r2, [r5, #12]
 800216a:	b29b      	uxth	r3, r3
 800216c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002170:	3b1e      	subs	r3, #30
 8002172:	2407      	movs	r4, #7
 8002174:	fa04 f303 	lsl.w	r3, r4, r3
 8002178:	ea22 0303 	bic.w	r3, r2, r3
 800217c:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217e:	680b      	ldr	r3, [r1, #0]
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_ADC_ConfigChannel+0x198>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002186:	6805      	ldr	r5, [r0, #0]
 8002188:	68ea      	ldr	r2, [r5, #12]
 800218a:	688c      	ldr	r4, [r1, #8]
 800218c:	b29b      	uxth	r3, r3
 800218e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002192:	3b1e      	subs	r3, #30
 8002194:	fa04 f303 	lsl.w	r3, r4, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	60eb      	str	r3, [r5, #12]
 800219c:	e01b      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800219e:	6802      	ldr	r2, [r0, #0]
 80021a0:	68d3      	ldr	r3, [r2, #12]
 80021a2:	688c      	ldr	r4, [r1, #8]
 80021a4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80021a8:	60d3      	str	r3, [r2, #12]
 80021aa:	e014      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021ac:	6805      	ldr	r5, [r0, #0]
 80021ae:	692a      	ldr	r2, [r5, #16]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021b6:	2407      	movs	r4, #7
 80021b8:	fa04 f303 	lsl.w	r3, r4, r3
 80021bc:	ea22 0303 	bic.w	r3, r2, r3
 80021c0:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	6805      	ldr	r5, [r0, #0]
 80021c4:	692a      	ldr	r2, [r5, #16]
 80021c6:	688c      	ldr	r4, [r1, #8]
 80021c8:	880b      	ldrh	r3, [r1, #0]
 80021ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021ce:	fa04 f303 	lsl.w	r3, r4, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80021d6:	684b      	ldr	r3, [r1, #4]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021dc:	6805      	ldr	r5, [r0, #0]
 80021de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021e4:	3b05      	subs	r3, #5
 80021e6:	241f      	movs	r4, #31
 80021e8:	fa04 f303 	lsl.w	r3, r4, r3
 80021ec:	ea22 0303 	bic.w	r3, r2, r3
 80021f0:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f2:	6805      	ldr	r5, [r0, #0]
 80021f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021f6:	684b      	ldr	r3, [r1, #4]
 80021f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021fc:	3b05      	subs	r3, #5
 80021fe:	880c      	ldrh	r4, [r1, #0]
 8002200:	fa04 f303 	lsl.w	r3, r4, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002208:	6802      	ldr	r2, [r0, #0]
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_ADC_ConfigChannel+0x19c>)
 800220c:	429a      	cmp	r2, r3
 800220e:	d03a      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002210:	6802      	ldr	r2, [r0, #0]
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_ADC_ConfigChannel+0x19c>)
 8002214:	429a      	cmp	r2, r3
 8002216:	d03f      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002218:	2300      	movs	r3, #0
 800221a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800221e:	4618      	mov	r0, r3
}
 8002220:	b002      	add	sp, #8
 8002222:	bc30      	pop	{r4, r5}
 8002224:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d816      	bhi.n	8002258 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800222a:	6805      	ldr	r5, [r0, #0]
 800222c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800222e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002232:	3b23      	subs	r3, #35	; 0x23
 8002234:	241f      	movs	r4, #31
 8002236:	fa04 f303 	lsl.w	r3, r4, r3
 800223a:	ea22 0303 	bic.w	r3, r2, r3
 800223e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002240:	6805      	ldr	r5, [r0, #0]
 8002242:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002244:	684b      	ldr	r3, [r1, #4]
 8002246:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800224a:	3b23      	subs	r3, #35	; 0x23
 800224c:	880c      	ldrh	r4, [r1, #0]
 800224e:	fa04 f303 	lsl.w	r3, r4, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	632b      	str	r3, [r5, #48]	; 0x30
 8002256:	e7d7      	b.n	8002208 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002258:	6805      	ldr	r5, [r0, #0]
 800225a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800225c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002260:	3b41      	subs	r3, #65	; 0x41
 8002262:	241f      	movs	r4, #31
 8002264:	fa04 f303 	lsl.w	r3, r4, r3
 8002268:	ea22 0303 	bic.w	r3, r2, r3
 800226c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800226e:	6805      	ldr	r5, [r0, #0]
 8002270:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002272:	684b      	ldr	r3, [r1, #4]
 8002274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002278:	3b41      	subs	r3, #65	; 0x41
 800227a:	880c      	ldrh	r4, [r1, #0]
 800227c:	fa04 f303 	lsl.w	r3, r4, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002284:	e7c0      	b.n	8002208 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002286:	680b      	ldr	r3, [r1, #0]
 8002288:	2b12      	cmp	r3, #18
 800228a:	d1c1      	bne.n	8002210 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_ADC_ConfigChannel+0x1a0>)
 800228e:	6853      	ldr	r3, [r2, #4]
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6053      	str	r3, [r2, #4]
 8002296:	e7bb      	b.n	8002210 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002298:	680b      	ldr	r3, [r1, #0]
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_ADC_ConfigChannel+0x198>)
 800229c:	2b11      	cmp	r3, #17
 800229e:	bf18      	it	ne
 80022a0:	4293      	cmpne	r3, r2
 80022a2:	d1b9      	bne.n	8002218 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_ADC_ConfigChannel+0x1a0>)
 80022a6:	6853      	ldr	r3, [r2, #4]
 80022a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ac:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ae:	680a      	ldr	r2, [r1, #0]
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_ADC_ConfigChannel+0x198>)
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d1b0      	bne.n	8002218 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_ADC_ConfigChannel+0x1a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_ADC_ConfigChannel+0x1a8>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022c6:	005a      	lsls	r2, r3, #1
 80022c8:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80022cc:	9b01      	ldr	r3, [sp, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x184>
 80022d8:	e79e      	b.n	8002218 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80022da:	2002      	movs	r0, #2
 80022dc:	e7a0      	b.n	8002220 <HAL_ADC_ConfigChannel+0xd8>
 80022de:	bf00      	nop
 80022e0:	10000012 	.word	0x10000012
 80022e4:	40012000 	.word	0x40012000
 80022e8:	40012300 	.word	0x40012300
 80022ec:	20000054 	.word	0x20000054
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80022f6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002306:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800230a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800230c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	05fa0000 	.word	0x05fa0000

08002318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002318:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_NVIC_SetPriority+0x58>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002322:	f1c3 0407 	rsb	r4, r3, #7
 8002326:	2c04      	cmp	r4, #4
 8002328:	bf28      	it	cs
 800232a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232c:	1d1d      	adds	r5, r3, #4
 800232e:	2d06      	cmp	r5, #6
 8002330:	d914      	bls.n	800235c <HAL_NVIC_SetPriority+0x44>
 8002332:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002338:	fa05 f404 	lsl.w	r4, r5, r4
 800233c:	ea21 0104 	bic.w	r1, r1, r4
 8002340:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002342:	fa05 f303 	lsl.w	r3, r5, r3
 8002346:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800234c:	2800      	cmp	r0, #0
 800234e:	db07      	blt.n	8002360 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	0109      	lsls	r1, r1, #4
 8002352:	b2c9      	uxtb	r1, r1
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_NVIC_SetPriority+0x5c>)
 8002356:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002358:	bc30      	pop	{r4, r5}
 800235a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235c:	2300      	movs	r3, #0
 800235e:	e7e9      	b.n	8002334 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	f000 000f 	and.w	r0, r0, #15
 8002364:	0109      	lsls	r1, r1, #4
 8002366:	b2c9      	uxtb	r1, r1
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_NVIC_SetPriority+0x60>)
 800236a:	5419      	strb	r1, [r3, r0]
 800236c:	e7f4      	b.n	8002358 <HAL_NVIC_SetPriority+0x40>
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00
 8002374:	e000e400 	.word	0xe000e400
 8002378:	e000ed14 	.word	0xe000ed14

0800237c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800237c:	2800      	cmp	r0, #0
 800237e:	db07      	blt.n	8002390 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	f000 021f 	and.w	r2, r0, #31
 8002384:	0940      	lsrs	r0, r0, #5
 8002386:	2301      	movs	r3, #1
 8002388:	4093      	lsls	r3, r2
 800238a:	4a02      	ldr	r2, [pc, #8]	; (8002394 <HAL_NVIC_EnableIRQ+0x18>)
 800238c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	3801      	subs	r0, #1
 800239a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800239e:	d20a      	bcs.n	80023b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_SYSTICK_Config+0x24>)
 80023a2:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_SYSTICK_Config+0x28>)
 80023a6:	21f0      	movs	r1, #240	; 0xf0
 80023a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	2000      	movs	r0, #0
 80023ae:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d038      	beq.n	800243a <HAL_CRC_Init+0x76>
{
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023cc:	7f43      	ldrb	r3, [r0, #29]
 80023ce:	b31b      	cbz	r3, 8002418 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80023d4:	7923      	ldrb	r3, [r4, #4]
 80023d6:	bb1b      	cbnz	r3, 8002420 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_CRC_Init+0x7c>)
 80023dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6893      	ldr	r3, [r2, #8]
 80023e2:	f023 0318 	bic.w	r3, r3, #24
 80023e6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023e8:	7963      	ldrb	r3, [r4, #5]
 80023ea:	bb13      	cbnz	r3, 8002432 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023f4:	6822      	ldr	r2, [r4, #0]
 80023f6:	6893      	ldr	r3, [r2, #8]
 80023f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80023fc:	6961      	ldr	r1, [r4, #20]
 80023fe:	430b      	orrs	r3, r1
 8002400:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	6893      	ldr	r3, [r2, #8]
 8002406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240a:	69a1      	ldr	r1, [r4, #24]
 800240c:	430b      	orrs	r3, r1
 800240e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002410:	2301      	movs	r3, #1
 8002412:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8002414:	2000      	movs	r0, #0
}
 8002416:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002418:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800241a:	f004 fdfb 	bl	8007014 <HAL_CRC_MspInit>
 800241e:	e7d7      	b.n	80023d0 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002420:	68e2      	ldr	r2, [r4, #12]
 8002422:	68a1      	ldr	r1, [r4, #8]
 8002424:	4620      	mov	r0, r4
 8002426:	f000 f80d 	bl	8002444 <HAL_CRCEx_Polynomial_Set>
 800242a:	2800      	cmp	r0, #0
 800242c:	d0dc      	beq.n	80023e8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	e7f1      	b.n	8002416 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	6922      	ldr	r2, [r4, #16]
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	e7dc      	b.n	80023f4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	04c11db7 	.word	0x04c11db7

08002444 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002444:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002446:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002448:	1e65      	subs	r5, r4, #1
 800244a:	b13c      	cbz	r4, 800245c <HAL_CRCEx_Polynomial_Set+0x18>
 800244c:	f005 031f 	and.w	r3, r5, #31
 8002450:	fa21 f303 	lsr.w	r3, r1, r3
 8002454:	462c      	mov	r4, r5
 8002456:	f013 0f01 	tst.w	r3, #1
 800245a:	d0f5      	beq.n	8002448 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800245c:	2a18      	cmp	r2, #24
 800245e:	d823      	bhi.n	80024a8 <HAL_CRCEx_Polynomial_Set+0x64>
 8002460:	e8df f002 	tbb	[pc, r2]
 8002464:	2222220f 	.word	0x2222220f
 8002468:	22222222 	.word	0x22222222
 800246c:	2222221e 	.word	0x2222221e
 8002470:	22222222 	.word	0x22222222
 8002474:	2222221a 	.word	0x2222221a
 8002478:	22222222 	.word	0x22222222
 800247c:	0d          	.byte	0x0d
 800247d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800247e:	2d06      	cmp	r5, #6
 8002480:	d814      	bhi.n	80024ac <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002482:	6803      	ldr	r3, [r0, #0]
 8002484:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002486:	6801      	ldr	r1, [r0, #0]
 8002488:	688b      	ldr	r3, [r1, #8]
 800248a:	f023 0318 	bic.w	r3, r3, #24
 800248e:	431a      	orrs	r2, r3
 8002490:	608a      	str	r2, [r1, #8]
 8002492:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8002494:	bc30      	pop	{r4, r5}
 8002496:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8002498:	2d07      	cmp	r5, #7
 800249a:	d9f2      	bls.n	8002482 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800249c:	2001      	movs	r0, #1
 800249e:	e7f9      	b.n	8002494 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 80024a0:	2d0f      	cmp	r5, #15
 80024a2:	d9ee      	bls.n	8002482 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
 80024a6:	e7f5      	b.n	8002494 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
 80024aa:	e7f3      	b.n	8002494 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e7f1      	b.n	8002494 <HAL_CRCEx_Polynomial_Set+0x50>

080024b0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b0:	6802      	ldr	r2, [r0, #0]
 80024b2:	b2d3      	uxtb	r3, r2
 80024b4:	3b10      	subs	r3, #16
 80024b6:	4909      	ldr	r1, [pc, #36]	; (80024dc <DMA_CalcBaseAndBitshift+0x2c>)
 80024b8:	fba1 1303 	umull	r1, r3, r1, r3
 80024bc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <DMA_CalcBaseAndBitshift+0x30>)
 80024c0:	5cc9      	ldrb	r1, [r1, r3]
 80024c2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d804      	bhi.n	80024d2 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <DMA_CalcBaseAndBitshift+0x34>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80024ce:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80024d0:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <DMA_CalcBaseAndBitshift+0x34>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	6583      	str	r3, [r0, #88]	; 0x58
 80024da:	e7f8      	b.n	80024ce <DMA_CalcBaseAndBitshift+0x1e>
 80024dc:	aaaaaaab 	.word	0xaaaaaaab
 80024e0:	0800b4c0 	.word	0x0800b4c0
 80024e4:	fffffc00 	.word	0xfffffc00

080024e8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ea:	6982      	ldr	r2, [r0, #24]
 80024ec:	b992      	cbnz	r2, 8002514 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d00a      	beq.n	8002508 <DMA_CheckFifoParam+0x20>
 80024f2:	b11b      	cbz	r3, 80024fc <DMA_CheckFifoParam+0x14>
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d001      	beq.n	80024fc <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2000      	movs	r0, #0
 80024fa:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002502:	d12c      	bne.n	800255e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2000      	movs	r0, #0
 8002506:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002508:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800250a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250e:	d028      	beq.n	8002562 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2000      	movs	r0, #0
 8002512:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002514:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002518:	d005      	beq.n	8002526 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800251a:	2b02      	cmp	r3, #2
 800251c:	d929      	bls.n	8002572 <DMA_CheckFifoParam+0x8a>
 800251e:	2b03      	cmp	r3, #3
 8002520:	d015      	beq.n	800254e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2000      	movs	r0, #0
 8002524:	4770      	bx	lr
    switch (tmp)
 8002526:	2b03      	cmp	r3, #3
 8002528:	d803      	bhi.n	8002532 <DMA_CheckFifoParam+0x4a>
 800252a:	e8df f003 	tbb	[pc, r3]
 800252e:	041c      	.short	0x041c
 8002530:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2000      	movs	r0, #0
 8002534:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002536:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002538:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800253c:	d115      	bne.n	800256a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002542:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002548:	d011      	beq.n	800256e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2000      	movs	r0, #0
 800254c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002550:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002554:	d001      	beq.n	800255a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002556:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002558:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2000      	movs	r0, #0
 800255c:	4770      	bx	lr
        status = HAL_ERROR;
 800255e:	2001      	movs	r0, #1
 8002560:	4770      	bx	lr
        status = HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	4770      	bx	lr
      status = HAL_ERROR;
 8002566:	2001      	movs	r0, #1
 8002568:	4770      	bx	lr
        status = HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	4770      	bx	lr
        status = HAL_ERROR;
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr
      status = HAL_ERROR;
 8002572:	2001      	movs	r0, #1
 8002574:	4770      	bx	lr
	...

08002578 <HAL_DMA_Init>:
{
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff fc14 	bl	8001da8 <HAL_GetTick>
  if(hdma == NULL)
 8002580:	2c00      	cmp	r4, #0
 8002582:	d05b      	beq.n	800263c <HAL_DMA_Init+0xc4>
 8002584:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002586:	2300      	movs	r3, #0
 8002588:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	f012 0f01 	tst.w	r2, #1
 80025a4:	d00a      	beq.n	80025bc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a6:	f7ff fbff 	bl	8001da8 <HAL_GetTick>
 80025aa:	1b40      	subs	r0, r0, r5
 80025ac:	2805      	cmp	r0, #5
 80025ae:	d9f5      	bls.n	800259c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	2320      	movs	r3, #32
 80025b2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b4:	2003      	movs	r0, #3
 80025b6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80025bc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025be:	4820      	ldr	r0, [pc, #128]	; (8002640 <HAL_DMA_Init+0xc8>)
 80025c0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	6861      	ldr	r1, [r4, #4]
 80025c4:	68a2      	ldr	r2, [r4, #8]
 80025c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025cc:	6921      	ldr	r1, [r4, #16]
 80025ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	69a1      	ldr	r1, [r4, #24]
 80025d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80025dc:	6a21      	ldr	r1, [r4, #32]
 80025de:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025e4:	2904      	cmp	r1, #4
 80025e6:	d01e      	beq.n	8002626 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80025e8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80025ea:	6826      	ldr	r6, [r4, #0]
 80025ec:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ee:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80025f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025f4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d107      	bne.n	800260a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80025fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025fc:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002600:	b11b      	cbz	r3, 800260a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff ff70 	bl	80024e8 <DMA_CheckFifoParam>
 8002608:	b990      	cbnz	r0, 8002630 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800260a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff ff4f 	bl	80024b0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002614:	233f      	movs	r3, #63	; 0x3f
 8002616:	4093      	lsls	r3, r2
 8002618:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261a:	2000      	movs	r0, #0
 800261c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800261e:	2301      	movs	r3, #1
 8002620:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002624:	e7c9      	b.n	80025ba <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002626:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002628:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800262a:	4301      	orrs	r1, r0
 800262c:	430a      	orrs	r2, r1
 800262e:	e7db      	b.n	80025e8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002634:	2001      	movs	r0, #1
 8002636:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800263a:	e7be      	b.n	80025ba <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
 800263e:	e7bc      	b.n	80025ba <HAL_DMA_Init+0x42>
 8002640:	f010803f 	.word	0xf010803f

08002644 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002644:	2800      	cmp	r0, #0
 8002646:	d02c      	beq.n	80026a2 <HAL_DMA_DeInit+0x5e>
{
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800264c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d027      	beq.n	80026a6 <HAL_DMA_DeInit+0x62>
  __HAL_DMA_DISABLE(hdma);
 8002656:	6802      	ldr	r2, [r0, #0]
 8002658:	6813      	ldr	r3, [r2, #0]
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	2500      	movs	r5, #0
 8002664:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002676:	6803      	ldr	r3, [r0, #0]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267c:	f7ff ff18 	bl	80024b0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002682:	233f      	movs	r3, #63	; 0x3f
 8002684:	4093      	lsls	r3, r2
 8002686:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8002688:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800268a:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800268c:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800268e:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002690:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002692:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002694:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002696:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800269a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 800269e:	4628      	mov	r0, r5
}
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026a2:	2001      	movs	r0, #1
}
 80026a4:	4770      	bx	lr
    return HAL_BUSY;
 80026a6:	2002      	movs	r0, #2
 80026a8:	e7fa      	b.n	80026a0 <HAL_DMA_DeInit+0x5c>

080026aa <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80026aa:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80026ac:	6806      	ldr	r6, [r0, #0]
 80026ae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80026b0:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80026b4:	9d03      	ldr	r5, [sp, #12]
 80026b6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80026ba:	431c      	orrs	r4, r3
 80026bc:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80026c2:	6843      	ldr	r3, [r0, #4]
 80026c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026c8:	d003      	beq.n	80026d2 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	60d9      	str	r1, [r3, #12]
  }
}
 80026ce:	bc70      	pop	{r4, r5, r6}
 80026d0:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80026d2:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80026d6:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80026da:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80026de:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80026e0:	6884      	ldr	r4, [r0, #8]
 80026e2:	b194      	cbz	r4, 800270a <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80026e4:	2c01      	cmp	r4, #1
 80026e6:	d00e      	beq.n	8002706 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80026e8:	2c02      	cmp	r4, #2
 80026ea:	d011      	beq.n	8002710 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80026ec:	2c03      	cmp	r4, #3
 80026ee:	d017      	beq.n	8002720 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 80026f0:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 80026f2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80026f4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80026f6:	0219      	lsls	r1, r3, #8
 80026f8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80026fc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002700:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002704:	e001      	b.n	800270a <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002706:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800270a:	6803      	ldr	r3, [r0, #0]
 800270c:	6399      	str	r1, [r3, #56]	; 0x38
 800270e:	e7de      	b.n	80026ce <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002710:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002712:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002714:	02d9      	lsls	r1, r3, #11
 8002716:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800271a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800271e:	e7f4      	b.n	800270a <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002720:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002722:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002724:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002726:	0299      	lsls	r1, r3, #10
 8002728:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800272c:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002730:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002734:	e7e9      	b.n	800270a <DMA2D_SetConfig+0x60>
	...

08002738 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8002738:	b338      	cbz	r0, 800278a <HAL_DMA2D_Init+0x52>
{
 800273a:	b510      	push	{r4, lr}
 800273c:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800273e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002742:	b1eb      	cbz	r3, 8002780 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002744:	2302      	movs	r3, #2
 8002746:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002752:	6861      	ldr	r1, [r4, #4]
 8002754:	430b      	orrs	r3, r1
 8002756:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800275c:	f023 0307 	bic.w	r3, r3, #7
 8002760:	68a1      	ldr	r1, [r4, #8]
 8002762:	430b      	orrs	r3, r1
 8002764:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_DMA2D_Init+0x58>)
 800276c:	400b      	ands	r3, r1
 800276e:	68e1      	ldr	r1, [r4, #12]
 8002770:	430b      	orrs	r3, r1
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002774:	2000      	movs	r0, #0
 8002776:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002778:	2301      	movs	r3, #1
 800277a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800277e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002780:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002784:	f004 fc5c 	bl	8007040 <HAL_DMA2D_MspInit>
 8002788:	e7dc      	b.n	8002744 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	ffffc000 	.word	0xffffc000

08002794 <HAL_DMA2D_Start>:
{
 8002794:	b510      	push	{r4, lr}
 8002796:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8002798:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800279c:	2c01      	cmp	r4, #1
 800279e:	d013      	beq.n	80027c8 <HAL_DMA2D_Start+0x34>
 80027a0:	4604      	mov	r4, r0
 80027a2:	2001      	movs	r0, #1
 80027a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027a8:	2002      	movs	r0, #2
 80027aa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80027ae:	9804      	ldr	r0, [sp, #16]
 80027b0:	9000      	str	r0, [sp, #0]
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff79 	bl	80026aa <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80027b8:	6822      	ldr	r2, [r4, #0]
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80027c2:	2000      	movs	r0, #0
}
 80027c4:	b002      	add	sp, #8
 80027c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 80027c8:	2002      	movs	r0, #2
 80027ca:	e7fb      	b.n	80027c4 <HAL_DMA2D_Start+0x30>

080027cc <HAL_DMA2D_PollForTransfer>:
{
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	4604      	mov	r4, r0
 80027d2:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f013 0f01 	tst.w	r3, #1
 80027e0:	d111      	bne.n	8002806 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80027e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e8:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80027ea:	f013 0f20 	tst.w	r3, #32
 80027ee:	d147      	bne.n	8002880 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	2212      	movs	r2, #18
 80027f4:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002802:	b002      	add	sp, #8
 8002804:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002806:	f7ff facf 	bl	8001da8 <HAL_GetTick>
 800280a:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	f012 0f02 	tst.w	r2, #2
 8002814:	d1e5      	bne.n	80027e2 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800281a:	9a01      	ldr	r2, [sp, #4]
 800281c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002820:	d114      	bne.n	800284c <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8002822:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002826:	d0f1      	beq.n	800280c <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002828:	f7ff fabe 	bl	8001da8 <HAL_GetTick>
 800282c:	1b80      	subs	r0, r0, r6
 800282e:	42a8      	cmp	r0, r5
 8002830:	d801      	bhi.n	8002836 <HAL_DMA2D_PollForTransfer+0x6a>
 8002832:	2d00      	cmp	r5, #0
 8002834:	d1ea      	bne.n	800280c <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002836:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002838:	f043 0320 	orr.w	r3, r3, #32
 800283c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800283e:	2003      	movs	r0, #3
 8002840:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002844:	2300      	movs	r3, #0
 8002846:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800284a:	e7da      	b.n	8002802 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800284c:	9a01      	ldr	r2, [sp, #4]
 800284e:	f012 0f20 	tst.w	r2, #32
 8002852:	d003      	beq.n	800285c <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002856:	f042 0202 	orr.w	r2, r2, #2
 800285a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800285c:	9a01      	ldr	r2, [sp, #4]
 800285e:	f012 0f01 	tst.w	r2, #1
 8002862:	d003      	beq.n	800286c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002864:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002870:	2304      	movs	r3, #4
 8002872:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002876:	2300      	movs	r3, #0
 8002878:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800287c:	2001      	movs	r0, #1
 800287e:	e7c0      	b.n	8002802 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8002880:	f7ff fa92 	bl	8001da8 <HAL_GetTick>
 8002884:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	f012 0f10 	tst.w	r2, #16
 800288e:	d1af      	bne.n	80027f0 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002894:	9a01      	ldr	r2, [sp, #4]
 8002896:	f012 0f29 	tst.w	r2, #41	; 0x29
 800289a:	d114      	bne.n	80028c6 <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 800289c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80028a0:	d0f1      	beq.n	8002886 <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80028a2:	f7ff fa81 	bl	8001da8 <HAL_GetTick>
 80028a6:	1b80      	subs	r0, r0, r6
 80028a8:	42a8      	cmp	r0, r5
 80028aa:	d801      	bhi.n	80028b0 <HAL_DMA2D_PollForTransfer+0xe4>
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	d1ea      	bne.n	8002886 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80028b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028b2:	f043 0320 	orr.w	r3, r3, #32
 80028b6:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80028b8:	2003      	movs	r0, #3
 80028ba:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80028be:	2300      	movs	r3, #0
 80028c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80028c4:	e79d      	b.n	8002802 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80028c6:	9a01      	ldr	r2, [sp, #4]
 80028c8:	f012 0f08 	tst.w	r2, #8
 80028cc:	d003      	beq.n	80028d6 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80028ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028d6:	9a01      	ldr	r2, [sp, #4]
 80028d8:	f012 0f20 	tst.w	r2, #32
 80028dc:	d003      	beq.n	80028e6 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028e0:	f042 0202 	orr.w	r2, r2, #2
 80028e4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028e6:	9a01      	ldr	r2, [sp, #4]
 80028e8:	f012 0f01 	tst.w	r2, #1
 80028ec:	d003      	beq.n	80028f6 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80028f6:	2229      	movs	r2, #41	; 0x29
 80028f8:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80028fa:	2304      	movs	r3, #4
 80028fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002900:	2300      	movs	r3, #0
 8002902:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e77b      	b.n	8002802 <HAL_DMA2D_PollForTransfer+0x36>
	...

0800290c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800290c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002910:	2b01      	cmp	r3, #1
 8002912:	d059      	beq.n	80029c8 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002914:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002916:	2301      	movs	r3, #1
 8002918:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800291c:	2302      	movs	r3, #2
 800291e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002922:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	1c8b      	adds	r3, r1, #2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	58c3      	ldr	r3, [r0, r3]
 800292e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002932:	3a09      	subs	r2, #9
 8002934:	2a01      	cmp	r2, #1
 8002936:	d91e      	bls.n	8002976 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002938:	1c8a      	adds	r2, r1, #2
 800293a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800293e:	6852      	ldr	r2, [r2, #4]
 8002940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002944:	bb41      	cbnz	r1, 8002998 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002946:	6804      	ldr	r4, [r0, #0]
 8002948:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_DMA2D_ConfigLayer+0xc0>)
 800294c:	402a      	ands	r2, r5
 800294e:	4313      	orrs	r3, r2
 8002950:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002958:	699c      	ldr	r4, [r3, #24]
 800295a:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	3b09      	subs	r3, #9
 8002960:	2b01      	cmp	r3, #1
 8002962:	d910      	bls.n	8002986 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002964:	2301      	movs	r3, #1
 8002966:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800296a:	2300      	movs	r3, #0
 800296c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002970:	4618      	mov	r0, r3
}
 8002972:	bc30      	pop	{r4, r5}
 8002974:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002976:	1c8a      	adds	r2, r1, #2
 8002978:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800297c:	6852      	ldr	r2, [r2, #4]
 800297e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002982:	4313      	orrs	r3, r2
 8002984:	e7de      	b.n	8002944 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002986:	3102      	adds	r1, #2
 8002988:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800298c:	684b      	ldr	r3, [r1, #4]
 800298e:	6802      	ldr	r2, [r0, #0]
 8002990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002994:	6293      	str	r3, [r2, #40]	; 0x28
 8002996:	e7e5      	b.n	8002964 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002998:	6804      	ldr	r4, [r0, #0]
 800299a:	69e5      	ldr	r5, [r4, #28]
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <HAL_DMA2D_ConfigLayer+0xc0>)
 800299e:	402a      	ands	r2, r5
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80029a4:	6802      	ldr	r2, [r0, #0]
 80029a6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80029aa:	699c      	ldr	r4, [r3, #24]
 80029ac:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	3b09      	subs	r3, #9
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d8d6      	bhi.n	8002964 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80029b6:	3102      	adds	r1, #2
 80029b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80029bc:	684b      	ldr	r3, [r1, #4]
 80029be:	6802      	ldr	r2, [r0, #0]
 80029c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	e7cd      	b.n	8002964 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 80029c8:	2002      	movs	r0, #2
}
 80029ca:	4770      	bx	lr
 80029cc:	00fcfff0 	.word	0x00fcfff0

080029d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f200 80e2 	bhi.w	8002b9c <HAL_GPIO_Init+0x1cc>
{
 80029d8:	b4f0      	push	{r4, r5, r6, r7}
 80029da:	b082      	sub	sp, #8
 80029dc:	e039      	b.n	8002a52 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029de:	2209      	movs	r2, #9
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 80029e2:	2200      	movs	r2, #0
 80029e4:	40b2      	lsls	r2, r6
 80029e6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80029e8:	3402      	adds	r4, #2
 80029ea:	4e6d      	ldr	r6, [pc, #436]	; (8002ba0 <HAL_GPIO_Init+0x1d0>)
 80029ec:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f0:	4a6c      	ldr	r2, [pc, #432]	; (8002ba4 <HAL_GPIO_Init+0x1d4>)
 80029f2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	43ea      	mvns	r2, r5
 80029f6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fa:	684f      	ldr	r7, [r1, #4]
 80029fc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002a00:	d001      	beq.n	8002a06 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002a02:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002a06:	4c67      	ldr	r4, [pc, #412]	; (8002ba4 <HAL_GPIO_Init+0x1d4>)
 8002a08:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002a0a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a10:	684f      	ldr	r7, [r1, #4]
 8002a12:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002a16:	d001      	beq.n	8002a1c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002a18:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002a1c:	4c61      	ldr	r4, [pc, #388]	; (8002ba4 <HAL_GPIO_Init+0x1d4>)
 8002a1e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a20:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a26:	684f      	ldr	r7, [r1, #4]
 8002a28:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002a2c:	d001      	beq.n	8002a32 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002a2e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002a32:	4c5c      	ldr	r4, [pc, #368]	; (8002ba4 <HAL_GPIO_Init+0x1d4>)
 8002a34:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002a36:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3a:	684e      	ldr	r6, [r1, #4]
 8002a3c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002a40:	d001      	beq.n	8002a46 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002a42:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002a46:	4c57      	ldr	r4, [pc, #348]	; (8002ba4 <HAL_GPIO_Init+0x1d4>)
 8002a48:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	f200 80a2 	bhi.w	8002b96 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8002a52:	2201      	movs	r2, #1
 8002a54:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	680c      	ldr	r4, [r1, #0]
 8002a58:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002a5c:	42aa      	cmp	r2, r5
 8002a5e:	d1f4      	bne.n	8002a4a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a60:	684c      	ldr	r4, [r1, #4]
 8002a62:	2c12      	cmp	r4, #18
 8002a64:	bf18      	it	ne
 8002a66:	2c02      	cmpne	r4, #2
 8002a68:	d110      	bne.n	8002a8c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8002a6a:	08de      	lsrs	r6, r3, #3
 8002a6c:	3608      	adds	r6, #8
 8002a6e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a72:	f003 0407 	and.w	r4, r3, #7
 8002a76:	00a7      	lsls	r7, r4, #2
 8002a78:	240f      	movs	r4, #15
 8002a7a:	40bc      	lsls	r4, r7
 8002a7c:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a80:	690c      	ldr	r4, [r1, #16]
 8002a82:	40bc      	lsls	r4, r7
 8002a84:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8002a88:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002a8c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a8e:	005f      	lsls	r7, r3, #1
 8002a90:	2603      	movs	r6, #3
 8002a92:	40be      	lsls	r6, r7
 8002a94:	43f6      	mvns	r6, r6
 8002a96:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a9a:	684c      	ldr	r4, [r1, #4]
 8002a9c:	f004 0403 	and.w	r4, r4, #3
 8002aa0:	40bc      	lsls	r4, r7
 8002aa2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002aa6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa8:	684c      	ldr	r4, [r1, #4]
 8002aaa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002aae:	2c11      	cmp	r4, #17
 8002ab0:	bf18      	it	ne
 8002ab2:	f1bc 0f01 	cmpne.w	ip, #1
 8002ab6:	d901      	bls.n	8002abc <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab8:	2c12      	cmp	r4, #18
 8002aba:	d111      	bne.n	8002ae0 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8002abc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002abe:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ac2:	68cc      	ldr	r4, [r1, #12]
 8002ac4:	40bc      	lsls	r4, r7
 8002ac6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002aca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002acc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ace:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ad2:	684c      	ldr	r4, [r1, #4]
 8002ad4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8002ade:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ae0:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ae2:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ae4:	688a      	ldr	r2, [r1, #8]
 8002ae6:	40ba      	lsls	r2, r7
 8002ae8:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002aea:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aec:	684a      	ldr	r2, [r1, #4]
 8002aee:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002af2:	d0aa      	beq.n	8002a4a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <HAL_GPIO_Init+0x1d8>)
 8002af6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002af8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002afc:	6454      	str	r4, [r2, #68]	; 0x44
 8002afe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002b08:	089c      	lsrs	r4, r3, #2
 8002b0a:	1ca6      	adds	r6, r4, #2
 8002b0c:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <HAL_GPIO_Init+0x1d0>)
 8002b0e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	0096      	lsls	r6, r2, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	40b2      	lsls	r2, r6
 8002b1c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x1dc>)
 8002b22:	4290      	cmp	r0, r2
 8002b24:	f43f af5d 	beq.w	80029e2 <HAL_GPIO_Init+0x12>
 8002b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b2c:	4290      	cmp	r0, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_GPIO_Init+0x1a6>
 8002b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b34:	4290      	cmp	r0, r2
 8002b36:	d020      	beq.n	8002b7a <HAL_GPIO_Init+0x1aa>
 8002b38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b3c:	4290      	cmp	r0, r2
 8002b3e:	d01e      	beq.n	8002b7e <HAL_GPIO_Init+0x1ae>
 8002b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b44:	4290      	cmp	r0, r2
 8002b46:	d01c      	beq.n	8002b82 <HAL_GPIO_Init+0x1b2>
 8002b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b4c:	4290      	cmp	r0, r2
 8002b4e:	d01a      	beq.n	8002b86 <HAL_GPIO_Init+0x1b6>
 8002b50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b54:	4290      	cmp	r0, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_GPIO_Init+0x1ba>
 8002b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b5c:	4290      	cmp	r0, r2
 8002b5e:	d016      	beq.n	8002b8e <HAL_GPIO_Init+0x1be>
 8002b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b64:	4290      	cmp	r0, r2
 8002b66:	d014      	beq.n	8002b92 <HAL_GPIO_Init+0x1c2>
 8002b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b6c:	4290      	cmp	r0, r2
 8002b6e:	f43f af36 	beq.w	80029de <HAL_GPIO_Init+0xe>
 8002b72:	220a      	movs	r2, #10
 8002b74:	e736      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b76:	2201      	movs	r2, #1
 8002b78:	e734      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	e732      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b7e:	2203      	movs	r2, #3
 8002b80:	e730      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b82:	2204      	movs	r2, #4
 8002b84:	e72e      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b86:	2205      	movs	r2, #5
 8002b88:	e72c      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b8a:	2206      	movs	r2, #6
 8002b8c:	e72a      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b8e:	2207      	movs	r2, #7
 8002b90:	e728      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b92:	2208      	movs	r2, #8
 8002b94:	e726      	b.n	80029e4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002b96:	b002      	add	sp, #8
 8002b98:	bcf0      	pop	{r4, r5, r6, r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40013c00 	.word	0x40013c00
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020000 	.word	0x40020000

08002bb0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bb0:	6903      	ldr	r3, [r0, #16]
 8002bb2:	4219      	tst	r1, r3
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002bb8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002bba:	2001      	movs	r0, #1
 8002bbc:	4770      	bx	lr

08002bbe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bbe:	b912      	cbnz	r2, 8002bc6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bc0:	0409      	lsls	r1, r1, #16
 8002bc2:	6181      	str	r1, [r0, #24]
  }
}
 8002bc4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	6181      	str	r1, [r0, #24]
 8002bc8:	4770      	bx	lr

08002bca <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bca:	6803      	ldr	r3, [r0, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	f012 0f02 	tst.w	r2, #2
 8002bd2:	d001      	beq.n	8002bd8 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd8:	6803      	ldr	r3, [r0, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	f012 0f01 	tst.w	r2, #1
 8002be0:	d103      	bne.n	8002bea <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	619a      	str	r2, [r3, #24]
  }
}
 8002bea:	4770      	bx	lr

08002bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002bec:	b470      	push	{r4, r5, r6}
 8002bee:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bf0:	6805      	ldr	r5, [r0, #0]
 8002bf2:	6868      	ldr	r0, [r5, #4]
 8002bf4:	0d74      	lsrs	r4, r6, #21
 8002bf6:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002bfa:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002bfe:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002c02:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002c06:	f044 0403 	orr.w	r4, r4, #3
 8002c0a:	ea20 0004 	bic.w	r0, r0, r4
 8002c0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002c12:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c16:	4319      	orrs	r1, r3
 8002c18:	4331      	orrs	r1, r6
 8002c1a:	4301      	orrs	r1, r0
 8002c1c:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c1e:	bc70      	pop	{r4, r5, r6}
 8002c20:	4770      	bx	lr

08002c22 <I2C_IsAcknowledgeFailed>:
{
 8002c22:	b570      	push	{r4, r5, r6, lr}
 8002c24:	4604      	mov	r4, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2a:	6803      	ldr	r3, [r0, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f013 0f10 	tst.w	r3, #16
 8002c32:	d01c      	beq.n	8002c6e <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	f012 0f20 	tst.w	r2, #32
 8002c3c:	d119      	bne.n	8002c72 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002c3e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002c42:	d0f7      	beq.n	8002c34 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c44:	f7ff f8b0 	bl	8001da8 <HAL_GetTick>
 8002c48:	1b80      	subs	r0, r0, r6
 8002c4a:	42a8      	cmp	r0, r5
 8002c4c:	d801      	bhi.n	8002c52 <I2C_IsAcknowledgeFailed+0x30>
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	d1f0      	bne.n	8002c34 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002c66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	e020      	b.n	8002cb0 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002c6e:	2000      	movs	r0, #0
 8002c70:	e01e      	b.n	8002cb0 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	2210      	movs	r2, #16
 8002c74:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	2520      	movs	r5, #32
 8002c7a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f7ff ffa4 	bl	8002bca <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	6853      	ldr	r3, [r2, #4]
 8002c86:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002c8a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002c8e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002caa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
}
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}

08002cb2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	460d      	mov	r5, r1
 8002cb8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f013 0f02 	tst.w	r3, #2
 8002cc2:	d11d      	bne.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff ffaa 	bl	8002c22 <I2C_IsAcknowledgeFailed>
 8002cce:	b9c8      	cbnz	r0, 8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002cd0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002cd4:	d0f1      	beq.n	8002cba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7ff f867 	bl	8001da8 <HAL_GetTick>
 8002cda:	1b80      	subs	r0, r0, r6
 8002cdc:	42a8      	cmp	r0, r5
 8002cde:	d801      	bhi.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d1ea      	bne.n	8002cba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	2320      	movs	r3, #32
 8002cee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002cf8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e000      	b.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002d00:	2000      	movs	r0, #0
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
 8002d06:	e7fc      	b.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002d08 <I2C_WaitOnFlagUntilTimeout>:
{
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	460f      	mov	r7, r1
 8002d0e:	4616      	mov	r6, r2
 8002d10:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	ea37 0303 	bics.w	r3, r7, r3
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	42b3      	cmp	r3, r6
 8002d22:	d118      	bne.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002d28:	d0f3      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f83d 	bl	8001da8 <HAL_GetTick>
 8002d2e:	9b06      	ldr	r3, [sp, #24]
 8002d30:	1ac0      	subs	r0, r0, r3
 8002d32:	42a0      	cmp	r0, r4
 8002d34:	d801      	bhi.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x32>
 8002d36:	2c00      	cmp	r4, #0
 8002d38:	d1eb      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002d3c:	f043 0320 	orr.w	r3, r3, #32
 8002d40:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	2320      	movs	r3, #32
 8002d44:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002d4e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e000      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
}
 8002d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d5c <I2C_RequestMemoryWrite>:
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	4604      	mov	r4, r0
 8002d62:	4616      	mov	r6, r2
 8002d64:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <I2C_RequestMemoryWrite+0x6c>)
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d6e:	b2ea      	uxtb	r2, r5
 8002d70:	f7ff ff3c 	bl	8002bec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d74:	9a07      	ldr	r2, [sp, #28]
 8002d76:	9906      	ldr	r1, [sp, #24]
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff ff9a 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7e:	b9e8      	cbnz	r0, 8002dbc <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d80:	2d01      	cmp	r5, #1
 8002d82:	d10e      	bne.n	8002da2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	b2f6      	uxtb	r6, r6
 8002d88:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8a:	9b07      	ldr	r3, [sp, #28]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	9b06      	ldr	r3, [sp, #24]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff ffb7 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b178      	cbz	r0, 8002dbe <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00d      	b.n	8002dbe <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	0a32      	lsrs	r2, r6, #8
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da8:	9a07      	ldr	r2, [sp, #28]
 8002daa:	9906      	ldr	r1, [sp, #24]
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff ff80 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	b938      	cbnz	r0, 8002dc4 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	b2f6      	uxtb	r6, r6
 8002db8:	629e      	str	r6, [r3, #40]	; 0x28
 8002dba:	e7e6      	b.n	8002d8a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e7fa      	b.n	8002dbe <I2C_RequestMemoryWrite+0x62>
 8002dc8:	80002000 	.word	0x80002000

08002dcc <I2C_RequestMemoryRead>:
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	4616      	mov	r6, r2
 8002dd4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <I2C_RequestMemoryRead+0x6c>)
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	b2ea      	uxtb	r2, r5
 8002dde:	f7ff ff05 	bl	8002bec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	9a07      	ldr	r2, [sp, #28]
 8002de4:	9906      	ldr	r1, [sp, #24]
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ff63 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dec:	b9e8      	cbnz	r0, 8002e2a <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dee:	2d01      	cmp	r5, #1
 8002df0:	d10e      	bne.n	8002e10 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	b2f6      	uxtb	r6, r6
 8002df6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002df8:	9b07      	ldr	r3, [sp, #28]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	9b06      	ldr	r3, [sp, #24]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ff80 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b178      	cbz	r0, 8002e2c <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e00d      	b.n	8002e2c <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	0a32      	lsrs	r2, r6, #8
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	9a07      	ldr	r2, [sp, #28]
 8002e18:	9906      	ldr	r1, [sp, #24]
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ff49 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e20:	b938      	cbnz	r0, 8002e32 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	b2f6      	uxtb	r6, r6
 8002e26:	629e      	str	r6, [r3, #40]	; 0x28
 8002e28:	e7e6      	b.n	8002df8 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e7fa      	b.n	8002e2c <I2C_RequestMemoryRead+0x60>
 8002e36:	bf00      	nop
 8002e38:	80002000 	.word	0x80002000

08002e3c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4605      	mov	r5, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f013 0f20 	tst.w	r3, #32
 8002e4c:	d11a      	bne.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	4632      	mov	r2, r6
 8002e50:	4621      	mov	r1, r4
 8002e52:	4628      	mov	r0, r5
 8002e54:	f7ff fee5 	bl	8002c22 <I2C_IsAcknowledgeFailed>
 8002e58:	b9b0      	cbnz	r0, 8002e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe ffa5 	bl	8001da8 <HAL_GetTick>
 8002e5e:	1b80      	subs	r0, r0, r6
 8002e60:	42a0      	cmp	r0, r4
 8002e62:	d801      	bhi.n	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002e64:	2c00      	cmp	r4, #0
 8002e66:	d1ed      	bne.n	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	2320      	movs	r3, #32
 8002e72:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e7c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
}
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002e84:	2000      	movs	r0, #0
 8002e86:	e7fc      	b.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7fa      	b.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002e8c <HAL_I2C_MspInit>:
}
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d057      	beq.n	8002f44 <HAL_I2C_Init+0xb4>
{
 8002e94:	b510      	push	{r4, lr}
 8002e96:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d041      	beq.n	8002f24 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	2324      	movs	r3, #36	; 0x24
 8002ea2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002eb8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	6893      	ldr	r3, [r2, #8]
 8002ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ec2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68e3      	ldr	r3, [r4, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d031      	beq.n	8002f2e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002ed2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed4:	68e3      	ldr	r3, [r4, #12]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d02f      	beq.n	8002f3a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	6851      	ldr	r1, [r2, #4]
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_I2C_Init+0xb8>)
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	68d3      	ldr	r3, [r2, #12]
 8002ee8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eec:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002eee:	6923      	ldr	r3, [r4, #16]
 8002ef0:	6962      	ldr	r2, [r4, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	69a1      	ldr	r1, [r4, #24]
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002efc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002efe:	69e3      	ldr	r3, [r4, #28]
 8002f00:	6a21      	ldr	r1, [r4, #32]
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f12:	2000      	movs	r0, #0
 8002f14:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	2320      	movs	r3, #32
 8002f18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002f22:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002f28:	f7ff ffb0 	bl	8002e8c <HAL_I2C_MspInit>
 8002f2c:	e7b8      	b.n	8002ea0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f2e:	68a3      	ldr	r3, [r4, #8]
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	6093      	str	r3, [r2, #8]
 8002f38:	e7cc      	b.n	8002ed4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e7ca      	b.n	8002eda <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
}
 8002f46:	4770      	bx	lr
 8002f48:	02008000 	.word	0x02008000

08002f4c <HAL_I2C_MspDeInit>:
}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002f4e:	b1a8      	cbz	r0, 8002f7c <HAL_I2C_DeInit+0x2e>
{
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	2324      	movs	r3, #36	; 0x24
 8002f56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002f5a:	6802      	ldr	r2, [r0, #0]
 8002f5c:	6813      	ldr	r3, [r2, #0]
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002f64:	f7ff fff2 	bl	8002f4c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	2000      	movs	r0, #0
 8002f6a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f6c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f70:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8002f76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002f7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_Mem_Write>:
{
 8002f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002f8e:	b2ed      	uxtb	r5, r5
 8002f90:	2d20      	cmp	r5, #32
 8002f92:	f040 80bf 	bne.w	8003114 <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 8002f96:	fab6 f586 	clz	r5, r6
 8002f9a:	096d      	lsrs	r5, r5, #5
 8002f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f9e:	2c00      	cmp	r4, #0
 8002fa0:	bf08      	it	eq
 8002fa2:	2501      	moveq	r5, #1
 8002fa4:	b9d5      	cbnz	r5, 8002fdc <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 8002fa6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002faa:	2c01      	cmp	r4, #1
 8002fac:	f000 80b7 	beq.w	800311e <HAL_I2C_Mem_Write+0x19e>
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	4691      	mov	r9, r2
 8002fb4:	460d      	mov	r5, r1
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	f04f 0a01 	mov.w	sl, #1
 8002fbc:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fef2 	bl	8001da8 <HAL_GetTick>
 8002fc4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc6:	9000      	str	r0, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	4652      	mov	r2, sl
 8002fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff fe99 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	b130      	cbz	r0, 8002fe6 <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e09c      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e097      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe6:	2321      	movs	r3, #33	; 0x21
 8002fe8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fec:	2340      	movs	r3, #64	; 0x40
 8002fee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ff8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffa:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ffc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffe:	9701      	str	r7, [sp, #4]
 8003000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4643      	mov	r3, r8
 8003006:	464a      	mov	r2, r9
 8003008:	4629      	mov	r1, r5
 800300a:	4620      	mov	r0, r4
 800300c:	f7ff fea6 	bl	8002d5c <I2C_RequestMemoryWrite>
 8003010:	b970      	cbnz	r0, 8003030 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003012:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d90f      	bls.n	800303a <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003026:	4629      	mov	r1, r5
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fddf 	bl	8002bec <I2C_TransferConfig>
 800302e:	e021      	b.n	8003074 <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003036:	4653      	mov	r3, sl
 8003038:	e06d      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800303a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800303c:	b292      	uxth	r2, r2
 800303e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4629      	mov	r1, r5
 800304c:	4620      	mov	r0, r4
 800304e:	f7ff fdcd 	bl	8002bec <I2C_TransferConfig>
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003054:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003056:	b292      	uxth	r2, r2
 8003058:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800305a:	2300      	movs	r3, #0
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	4629      	mov	r1, r5
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff fdc0 	bl	8002bec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800306c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003074:	463a      	mov	r2, r7
 8003076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff fe1a 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800307e:	2800      	cmp	r0, #0
 8003080:	d14f      	bne.n	8003122 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003082:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800308a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800308c:	3301      	adds	r3, #1
 800308e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030a2:	b292      	uxth	r2, r2
 80030a4:	2a00      	cmp	r2, #0
 80030a6:	d0e1      	beq.n	800306c <HAL_I2C_Mem_Write+0xec>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1df      	bne.n	800306c <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ac:	9700      	str	r7, [sp, #0]
 80030ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff fe27 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	bba0      	cbnz	r0, 8003126 <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2bff      	cmp	r3, #255	; 0xff
 80030c2:	d9c7      	bls.n	8003054 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030c4:	22ff      	movs	r2, #255	; 0xff
 80030c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d0:	4629      	mov	r1, r5
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff fd8a 	bl	8002bec <I2C_TransferConfig>
 80030d8:	e7c8      	b.n	800306c <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	463a      	mov	r2, r7
 80030dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff feac 	bl	8002e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	bb00      	cbnz	r0, 800312a <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e8:	6822      	ldr	r2, [r4, #0]
 80030ea:	2120      	movs	r1, #32
 80030ec:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80030ee:	6820      	ldr	r0, [r4, #0]
 80030f0:	6842      	ldr	r2, [r0, #4]
 80030f2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80030f6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80030fa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003108:	2200      	movs	r2, #0
 800310a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800310e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003112:	e000      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
}
 8003116:	4618      	mov	r0, r3
 8003118:	b002      	add	sp, #8
 800311a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800311e:	2302      	movs	r3, #2
 8003120:	e7f9      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e7f7      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e7f5      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e7f3      	b.n	8003116 <HAL_I2C_Mem_Write+0x196>
	...

08003130 <HAL_I2C_Mem_Read>:
{
 8003130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800313e:	b2ed      	uxtb	r5, r5
 8003140:	2d20      	cmp	r5, #32
 8003142:	f040 80c1 	bne.w	80032c8 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 8003146:	fab6 f586 	clz	r5, r6
 800314a:	096d      	lsrs	r5, r5, #5
 800314c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800314e:	2c00      	cmp	r4, #0
 8003150:	bf08      	it	eq
 8003152:	2501      	moveq	r5, #1
 8003154:	b9d5      	cbnz	r5, 800318c <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 8003156:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800315a:	2c01      	cmp	r4, #1
 800315c:	f000 80b9 	beq.w	80032d2 <HAL_I2C_Mem_Read+0x1a2>
 8003160:	4698      	mov	r8, r3
 8003162:	4691      	mov	r9, r2
 8003164:	460d      	mov	r5, r1
 8003166:	4604      	mov	r4, r0
 8003168:	f04f 0a01 	mov.w	sl, #1
 800316c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003170:	f7fe fe1a 	bl	8001da8 <HAL_GetTick>
 8003174:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003176:	9000      	str	r0, [sp, #0]
 8003178:	2319      	movs	r3, #25
 800317a:	4652      	mov	r2, sl
 800317c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff fdc1 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 8003186:	b130      	cbz	r0, 8003196 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09e      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800318c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003190:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e099      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003196:	2322      	movs	r3, #34	; 0x22
 8003198:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80031a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031a8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80031aa:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ac:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ae:	9701      	str	r7, [sp, #4]
 80031b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	4643      	mov	r3, r8
 80031b6:	464a      	mov	r2, r9
 80031b8:	4629      	mov	r1, r5
 80031ba:	4620      	mov	r0, r4
 80031bc:	f7ff fe06 	bl	8002dcc <I2C_RequestMemoryRead>
 80031c0:	b970      	cbnz	r0, 80031e0 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	d90f      	bls.n	80031ea <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031ce:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <HAL_I2C_Mem_Read+0x1b4>)
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d6:	4629      	mov	r1, r5
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff fd07 	bl	8002bec <I2C_TransferConfig>
 80031de:	e021      	b.n	8003224 <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 80031e0:	2300      	movs	r3, #0
 80031e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80031e6:	4653      	mov	r3, sl
 80031e8:	e06f      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 80031ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031ec:	b292      	uxth	r2, r2
 80031ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80031f0:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <HAL_I2C_Mem_Read+0x1b4>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4629      	mov	r1, r5
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7ff fcf5 	bl	8002bec <I2C_TransferConfig>
 8003202:	e00f      	b.n	8003224 <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003204:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003206:	b292      	uxth	r2, r2
 8003208:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800320a:	2300      	movs	r3, #0
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	4629      	mov	r1, r5
 8003216:	4620      	mov	r0, r4
 8003218:	f7ff fce8 	bl	8002bec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800321c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d034      	beq.n	800328e <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	9700      	str	r7, [sp, #0]
 8003226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003228:	2200      	movs	r2, #0
 800322a:	2104      	movs	r1, #4
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff fd6b 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 8003232:	2800      	cmp	r0, #0
 8003234:	d14f      	bne.n	80032d6 <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800323c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800323e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003244:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800324c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800324e:	3a01      	subs	r2, #1
 8003250:	b292      	uxth	r2, r2
 8003252:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003254:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003256:	b292      	uxth	r2, r2
 8003258:	2a00      	cmp	r2, #0
 800325a:	d0df      	beq.n	800321c <HAL_I2C_Mem_Read+0xec>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1dd      	bne.n	800321c <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003260:	9700      	str	r7, [sp, #0]
 8003262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff fd4d 	bl	8002d08 <I2C_WaitOnFlagUntilTimeout>
 800326e:	bba0      	cbnz	r0, 80032da <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	2bff      	cmp	r3, #255	; 0xff
 8003276:	d9c5      	bls.n	8003204 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003278:	22ff      	movs	r2, #255	; 0xff
 800327a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800327c:	2300      	movs	r3, #0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003284:	4629      	mov	r1, r5
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff fcb0 	bl	8002bec <I2C_TransferConfig>
 800328c:	e7c6      	b.n	800321c <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	463a      	mov	r2, r7
 8003290:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fdd2 	bl	8002e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	bb00      	cbnz	r0, 80032de <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	2120      	movs	r1, #32
 80032a0:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	6842      	ldr	r2, [r0, #4]
 80032a6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80032aa:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80032ae:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032bc:	2200      	movs	r2, #0
 80032be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80032c2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80032c6:	e000      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	b002      	add	sp, #8
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80032d2:	2302      	movs	r3, #2
 80032d4:	e7f9      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e7f7      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e7f5      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e7f3      	b.n	80032ca <HAL_I2C_Mem_Read+0x19a>
 80032e2:	bf00      	nop
 80032e4:	80002400 	.word	0x80002400

080032e8 <HAL_I2C_GetState>:
  return hi2c->State;
 80032e8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80032ec:	4770      	bx	lr
	...

080032f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032f0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80032f2:	684d      	ldr	r5, [r1, #4]
 80032f4:	6804      	ldr	r4, [r0, #0]
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80032fc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80032fe:	01d2      	lsls	r2, r2, #7
 8003300:	4414      	add	r4, r2
 8003302:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003306:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800330a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800330e:	680b      	ldr	r3, [r1, #0]
 8003310:	6804      	ldr	r4, [r0, #0]
 8003312:	68e6      	ldr	r6, [r4, #12]
 8003314:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003318:	4433      	add	r3, r6
 800331a:	3301      	adds	r3, #1
 800331c:	4414      	add	r4, r2
 800331e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003322:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003326:	68cd      	ldr	r5, [r1, #12]
 8003328:	6804      	ldr	r4, [r0, #0]
 800332a:	68e3      	ldr	r3, [r4, #12]
 800332c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003330:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003332:	4414      	add	r4, r2
 8003334:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003338:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800333c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003340:	688b      	ldr	r3, [r1, #8]
 8003342:	6804      	ldr	r4, [r0, #0]
 8003344:	68e6      	ldr	r6, [r4, #12]
 8003346:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800334a:	4433      	add	r3, r6
 800334c:	3301      	adds	r3, #1
 800334e:	4414      	add	r4, r2
 8003350:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003354:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	4413      	add	r3, r2
 800335c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003360:	f024 0407 	bic.w	r4, r4, #7
 8003364:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003368:	6803      	ldr	r3, [r0, #0]
 800336a:	4413      	add	r3, r2
 800336c:	690c      	ldr	r4, [r1, #16]
 800336e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003372:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003376:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800337a:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800337c:	6805      	ldr	r5, [r0, #0]
 800337e:	4415      	add	r5, r2
 8003380:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003384:	2400      	movs	r4, #0
 8003386:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800338a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800338e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003392:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003396:	6805      	ldr	r5, [r0, #0]
 8003398:	4415      	add	r5, r2
 800339a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800339e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80033aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80033ae:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	694d      	ldr	r5, [r1, #20]
 80033b8:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033bc:	6803      	ldr	r3, [r0, #0]
 80033be:	4413      	add	r3, r2
 80033c0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80033c4:	4d2d      	ldr	r5, [pc, #180]	; (800347c <LTDC_SetConfig+0x18c>)
 80033c6:	4035      	ands	r5, r6
 80033c8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033cc:	69cd      	ldr	r5, [r1, #28]
 80033ce:	6a0e      	ldr	r6, [r1, #32]
 80033d0:	6803      	ldr	r3, [r0, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4335      	orrs	r5, r6
 80033d6:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80033e2:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80033e6:	6803      	ldr	r3, [r0, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80033ec:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80033f0:	690b      	ldr	r3, [r1, #16]
 80033f2:	b16b      	cbz	r3, 8003410 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d03a      	beq.n	800346e <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	bf18      	it	ne
 80033fc:	2b04      	cmpne	r3, #4
 80033fe:	d038      	beq.n	8003472 <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003400:	2b03      	cmp	r3, #3
 8003402:	d038      	beq.n	8003476 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003404:	2b07      	cmp	r3, #7
 8003406:	d001      	beq.n	800340c <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003408:	2301      	movs	r3, #1
 800340a:	e002      	b.n	8003412 <LTDC_SetConfig+0x122>
    tmp = 2U;
 800340c:	2302      	movs	r3, #2
 800340e:	e000      	b.n	8003412 <LTDC_SetConfig+0x122>
    tmp = 4U;
 8003410:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003412:	6804      	ldr	r4, [r0, #0]
 8003414:	4414      	add	r4, r2
 8003416:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 800341a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800341e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003422:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003424:	fb03 f504 	mul.w	r5, r3, r4
 8003428:	684c      	ldr	r4, [r1, #4]
 800342a:	680e      	ldr	r6, [r1, #0]
 800342c:	1ba4      	subs	r4, r4, r6
 800342e:	fb03 f304 	mul.w	r3, r3, r4
 8003432:	3303      	adds	r3, #3
 8003434:	6804      	ldr	r4, [r0, #0]
 8003436:	4414      	add	r4, r2
 8003438:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800343c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003440:	6803      	ldr	r3, [r0, #0]
 8003442:	4413      	add	r3, r2
 8003444:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8003448:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <LTDC_SetConfig+0x190>)
 800344a:	402c      	ands	r4, r5
 800344c:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	4413      	add	r3, r2
 8003454:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003456:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	441a      	add	r2, r3
 800345e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 800346a:	bcf0      	pop	{r4, r5, r6, r7}
 800346c:	4770      	bx	lr
    tmp = 3U;
 800346e:	2303      	movs	r3, #3
 8003470:	e7cf      	b.n	8003412 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003472:	2302      	movs	r3, #2
 8003474:	e7cd      	b.n	8003412 <LTDC_SetConfig+0x122>
 8003476:	2302      	movs	r3, #2
 8003478:	e7cb      	b.n	8003412 <LTDC_SetConfig+0x122>
 800347a:	bf00      	nop
 800347c:	fffff8f8 	.word	0xfffff8f8
 8003480:	fffff800 	.word	0xfffff800

08003484 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003484:	2800      	cmp	r0, #0
 8003486:	d072      	beq.n	800356e <HAL_LTDC_Init+0xea>
{
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800348c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d067      	beq.n	8003564 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003494:	2302      	movs	r3, #2
 8003496:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800349a:	6822      	ldr	r2, [r4, #0]
 800349c:	6993      	ldr	r3, [r2, #24]
 800349e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034a2:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034a4:	6821      	ldr	r1, [r4, #0]
 80034a6:	698a      	ldr	r2, [r1, #24]
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	68a0      	ldr	r0, [r4, #8]
 80034ac:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034ae:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034b0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034b2:	6920      	ldr	r0, [r4, #16]
 80034b4:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034b6:	4313      	orrs	r3, r2
 80034b8:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	688a      	ldr	r2, [r1, #8]
 80034be:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_LTDC_Init+0xf0>)
 80034c0:	401a      	ands	r2, r3
 80034c2:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034c4:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	6882      	ldr	r2, [r0, #8]
 80034ca:	69a1      	ldr	r1, [r4, #24]
 80034cc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80034d0:	430a      	orrs	r2, r1
 80034d2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	68ca      	ldr	r2, [r1, #12]
 80034d8:	401a      	ands	r2, r3
 80034da:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80034dc:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	68c2      	ldr	r2, [r0, #12]
 80034e2:	6a21      	ldr	r1, [r4, #32]
 80034e4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80034e8:	430a      	orrs	r2, r1
 80034ea:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034ec:	6821      	ldr	r1, [r4, #0]
 80034ee:	690a      	ldr	r2, [r1, #16]
 80034f0:	401a      	ands	r2, r3
 80034f2:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80034f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	6902      	ldr	r2, [r0, #16]
 80034fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034fc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003500:	430a      	orrs	r2, r1
 8003502:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003504:	6821      	ldr	r1, [r4, #0]
 8003506:	694a      	ldr	r2, [r1, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800350c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800350e:	6821      	ldr	r1, [r4, #0]
 8003510:	694b      	ldr	r3, [r1, #20]
 8003512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003514:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003518:	4313      	orrs	r3, r2
 800351a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800351c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003520:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003524:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800352a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800352e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003530:	6821      	ldr	r1, [r4, #0]
 8003532:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003534:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003538:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800353c:	4303      	orrs	r3, r0
 800353e:	4313      	orrs	r3, r2
 8003540:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003546:	f043 0306 	orr.w	r3, r3, #6
 800354a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	6993      	ldr	r3, [r2, #24]
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003556:	2000      	movs	r0, #0
 8003558:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800355c:	2301      	movs	r3, #1
 800355e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003562:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003564:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003568:	f003 fd80 	bl	800706c <HAL_LTDC_MspInit>
 800356c:	e792      	b.n	8003494 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800356e:	2001      	movs	r0, #1
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	f000f800 	.word	0xf000f800

08003578 <HAL_LTDC_ErrorCallback>:
}
 8003578:	4770      	bx	lr

0800357a <HAL_LTDC_LineEventCallback>:
}
 800357a:	4770      	bx	lr

0800357c <HAL_LTDC_ReloadEventCallback>:
}
 800357c:	4770      	bx	lr

0800357e <HAL_LTDC_IRQHandler>:
{
 800357e:	b570      	push	{r4, r5, r6, lr}
 8003580:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003582:	6803      	ldr	r3, [r0, #0]
 8003584:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003586:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003588:	f015 0f04 	tst.w	r5, #4
 800358c:	d002      	beq.n	8003594 <HAL_LTDC_IRQHandler+0x16>
 800358e:	f016 0f04 	tst.w	r6, #4
 8003592:	d112      	bne.n	80035ba <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003594:	f015 0f02 	tst.w	r5, #2
 8003598:	d002      	beq.n	80035a0 <HAL_LTDC_IRQHandler+0x22>
 800359a:	f016 0f02 	tst.w	r6, #2
 800359e:	d121      	bne.n	80035e4 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80035a0:	f015 0f01 	tst.w	r5, #1
 80035a4:	d002      	beq.n	80035ac <HAL_LTDC_IRQHandler+0x2e>
 80035a6:	f016 0f01 	tst.w	r6, #1
 80035aa:	d132      	bne.n	8003612 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80035ac:	f015 0f08 	tst.w	r5, #8
 80035b0:	d002      	beq.n	80035b8 <HAL_LTDC_IRQHandler+0x3a>
 80035b2:	f016 0f08 	tst.w	r6, #8
 80035b6:	d13d      	bne.n	8003634 <HAL_LTDC_IRQHandler+0xb6>
}
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80035ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035bc:	f022 0204 	bic.w	r2, r2, #4
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80035c2:	6803      	ldr	r3, [r0, #0]
 80035c4:	2204      	movs	r2, #4
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80035c8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80035d4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80035d8:	2300      	movs	r3, #0
 80035da:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80035de:	f7ff ffcb 	bl	8003578 <HAL_LTDC_ErrorCallback>
 80035e2:	e7d7      	b.n	8003594 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	2202      	movs	r2, #2
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80035f4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80035fe:	2304      	movs	r3, #4
 8003600:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003604:	2300      	movs	r3, #0
 8003606:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800360a:	4620      	mov	r0, r4
 800360c:	f7ff ffb4 	bl	8003578 <HAL_LTDC_ErrorCallback>
 8003610:	e7c6      	b.n	80035a0 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	2301      	movs	r3, #1
 8003620:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003622:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003626:	2300      	movs	r3, #0
 8003628:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff ffa4 	bl	800357a <HAL_LTDC_LineEventCallback>
 8003632:	e7bb      	b.n	80035ac <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003638:	f023 0308 	bic.w	r3, r3, #8
 800363c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	2208      	movs	r2, #8
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003644:	2301      	movs	r3, #1
 8003646:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800364a:	2300      	movs	r3, #0
 800364c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff ff93 	bl	800357c <HAL_LTDC_ReloadEventCallback>
}
 8003656:	e7af      	b.n	80035b8 <HAL_LTDC_IRQHandler+0x3a>

08003658 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003658:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d027      	beq.n	80036b0 <HAL_LTDC_ConfigLayer+0x58>
{
 8003660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003664:	4694      	mov	ip, r2
 8003666:	460f      	mov	r7, r1
 8003668:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 800366a:	f04f 0801 	mov.w	r8, #1
 800366e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003678:	2434      	movs	r4, #52	; 0x34
 800367a:	fb04 0402 	mla	r4, r4, r2, r0
 800367e:	3438      	adds	r4, #56	; 0x38
 8003680:	460d      	mov	r5, r1
 8003682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800368a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800368c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003692:	4662      	mov	r2, ip
 8003694:	4639      	mov	r1, r7
 8003696:	4630      	mov	r0, r6
 8003698:	f7ff fe2a 	bl	80032f0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800369c:	6833      	ldr	r3, [r6, #0]
 800369e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80036a2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 80036b0:	2002      	movs	r0, #2
}
 80036b2:	4770      	bx	lr

080036b4 <HAL_LTDC_GetState>:
  return hltdc->State;
 80036b4:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036bc:	b510      	push	{r4, lr}
 80036be:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_PWREx_EnableOverDrive+0x74>)
 80036c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_PWREx_EnableOverDrive+0x78>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036de:	f7fe fb63 	bl	8001da8 <HAL_GetTick>
 80036e2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_PWREx_EnableOverDrive+0x78>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036ec:	d108      	bne.n	8003700 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ee:	f7fe fb5b 	bl	8001da8 <HAL_GetTick>
 80036f2:	1b00      	subs	r0, r0, r4
 80036f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036f8:	d9f4      	bls.n	80036e4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80036fc:	b002      	add	sp, #8
 80036fe:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_PWREx_EnableOverDrive+0x78>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800370a:	f7fe fb4d 	bl	8001da8 <HAL_GetTick>
 800370e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_PWREx_EnableOverDrive+0x78>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003718:	d107      	bne.n	800372a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800371a:	f7fe fb45 	bl	8001da8 <HAL_GetTick>
 800371e:	1b00      	subs	r0, r0, r4
 8003720:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003724:	d9f4      	bls.n	8003710 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003726:	2003      	movs	r0, #3
 8003728:	e7e8      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800372a:	2000      	movs	r0, #0
 800372c:	e7e6      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x40>
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000

08003738 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003738:	2800      	cmp	r0, #0
 800373a:	f000 81db 	beq.w	8003af4 <HAL_RCC_OscConfig+0x3bc>
{
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	f013 0f01 	tst.w	r3, #1
 800374a:	d029      	beq.n	80037a0 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	4ba2      	ldr	r3, [pc, #648]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d01a      	beq.n	800378e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003758:	4b9f      	ldr	r3, [pc, #636]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d00f      	beq.n	8003784 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003764:	6863      	ldr	r3, [r4, #4]
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376a:	d040      	beq.n	80037ee <HAL_RCC_OscConfig+0xb6>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d154      	bne.n	800381a <HAL_RCC_OscConfig+0xe2>
 8003770:	4b99      	ldr	r3, [pc, #612]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e039      	b.n	80037f8 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003784:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800378c:	d0ea      	beq.n	8003764 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378e:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003796:	d003      	beq.n	80037a0 <HAL_RCC_OscConfig+0x68>
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 81ac 	beq.w	8003af8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f013 0f02 	tst.w	r3, #2
 80037a6:	d075      	beq.n	8003894 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a8:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f013 0f0c 	tst.w	r3, #12
 80037b0:	d05e      	beq.n	8003870 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d053      	beq.n	8003866 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808a 	beq.w	80038da <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c6:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe faea 	bl	8001da8 <HAL_GetTick>
 80037d4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f013 0f02 	tst.w	r3, #2
 80037de:	d173      	bne.n	80038c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe fae2 	bl	8001da8 <HAL_GetTick>
 80037e4:	1b40      	subs	r0, r0, r5
 80037e6:	2802      	cmp	r0, #2
 80037e8:	d9f5      	bls.n	80037d6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80037ea:	2003      	movs	r0, #3
 80037ec:	e187      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ee:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	b32b      	cbz	r3, 8003848 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80037fc:	f7fe fad4 	bl	8001da8 <HAL_GetTick>
 8003800:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800380a:	d1c9      	bne.n	80037a0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe facc 	bl	8001da8 <HAL_GetTick>
 8003810:	1b40      	subs	r0, r0, r5
 8003812:	2864      	cmp	r0, #100	; 0x64
 8003814:	d9f5      	bls.n	8003802 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003816:	2003      	movs	r0, #3
 8003818:	e171      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381e:	d009      	beq.n	8003834 <HAL_RCC_OscConfig+0xfc>
 8003820:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e7e1      	b.n	80037f8 <HAL_RCC_OscConfig+0xc0>
 8003834:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e7d7      	b.n	80037f8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003848:	f7fe faae 	bl	8001da8 <HAL_GetTick>
 800384c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003856:	d0a3      	beq.n	80037a0 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe faa6 	bl	8001da8 <HAL_GetTick>
 800385c:	1b40      	subs	r0, r0, r5
 800385e:	2864      	cmp	r0, #100	; 0x64
 8003860:	d9f5      	bls.n	800384e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8003862:	2003      	movs	r0, #3
 8003864:	e14b      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800386e:	d1a6      	bne.n	80037be <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f013 0f02 	tst.w	r3, #2
 8003878:	d004      	beq.n	8003884 <HAL_RCC_OscConfig+0x14c>
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
 8003882:	e13c      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4a54      	ldr	r2, [pc, #336]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800388c:	6921      	ldr	r1, [r4, #16]
 800388e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003892:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	f013 0f08 	tst.w	r3, #8
 800389a:	d046      	beq.n	800392a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800389c:	6963      	ldr	r3, [r4, #20]
 800389e:	b383      	cbz	r3, 8003902 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80038a2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fa7d 	bl	8001da8 <HAL_GetTick>
 80038ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b0:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f013 0f02 	tst.w	r3, #2
 80038b8:	d137      	bne.n	800392a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fe fa75 	bl	8001da8 <HAL_GetTick>
 80038be:	1b40      	subs	r0, r0, r5
 80038c0:	2802      	cmp	r0, #2
 80038c2:	d9f5      	bls.n	80038b0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80038c4:	2003      	movs	r0, #3
 80038c6:	e11a      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4a43      	ldr	r2, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038d0:	6921      	ldr	r1, [r4, #16]
 80038d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e7dc      	b.n	8003894 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80038da:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038e4:	f7fe fa60 	bl	8001da8 <HAL_GetTick>
 80038e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f013 0f02 	tst.w	r3, #2
 80038f2:	d0cf      	beq.n	8003894 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fa58 	bl	8001da8 <HAL_GetTick>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	2802      	cmp	r0, #2
 80038fc:	d9f5      	bls.n	80038ea <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80038fe:	2003      	movs	r0, #3
 8003900:	e0fd      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003902:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003904:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fa4c 	bl	8001da8 <HAL_GetTick>
 8003910:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f013 0f02 	tst.w	r3, #2
 800391a:	d006      	beq.n	800392a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800391c:	f7fe fa44 	bl	8001da8 <HAL_GetTick>
 8003920:	1b40      	subs	r0, r0, r5
 8003922:	2802      	cmp	r0, #2
 8003924:	d9f5      	bls.n	8003912 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8003926:	2003      	movs	r0, #3
 8003928:	e0e9      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f013 0f04 	tst.w	r3, #4
 8003930:	d07e      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800393a:	d11e      	bne.n	800397a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 800393e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003940:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003950:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCC_OscConfig+0x2a4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f413 7f80 	tst.w	r3, #256	; 0x100
 800395a:	d010      	beq.n	800397e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d021      	beq.n	80039a6 <HAL_RCC_OscConfig+0x26e>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2a8>
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 8003968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	671a      	str	r2, [r3, #112]	; 0x70
 8003970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	671a      	str	r2, [r3, #112]	; 0x70
 8003978:	e01a      	b.n	80039b0 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800397a:	2500      	movs	r5, #0
 800397c:	e7e9      	b.n	8003952 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_RCC_OscConfig+0x2a4>)
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003988:	f7fe fa0e 	bl	8001da8 <HAL_GetTick>
 800398c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_RCC_OscConfig+0x2a4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003996:	d1e1      	bne.n	800395c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fe fa06 	bl	8001da8 <HAL_GetTick>
 800399c:	1b80      	subs	r0, r0, r6
 800399e:	2864      	cmp	r0, #100	; 0x64
 80039a0:	d9f5      	bls.n	800398e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80039a2:	2003      	movs	r0, #3
 80039a4:	e0ab      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80039a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b0:	68a3      	ldr	r3, [r4, #8]
 80039b2:	b35b      	cbz	r3, 8003a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fe f9f8 	bl	8001da8 <HAL_GetTick>
 80039b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_RCC_OscConfig+0x2a0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f013 0f02 	tst.w	r3, #2
 80039c2:	d134      	bne.n	8003a2e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe f9f0 	bl	8001da8 <HAL_GetTick>
 80039c8:	1b80      	subs	r0, r0, r6
 80039ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80039ce:	4298      	cmp	r0, r3
 80039d0:	d9f3      	bls.n	80039ba <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80039d2:	2003      	movs	r0, #3
 80039d4:	e093      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d009      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2c0>
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 80039e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	671a      	str	r2, [r3, #112]	; 0x70
 80039ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	671a      	str	r2, [r3, #112]	; 0x70
 80039f6:	e7db      	b.n	80039b0 <HAL_RCC_OscConfig+0x278>
 80039f8:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fc:	f042 0204 	orr.w	r2, r2, #4
 8003a00:	671a      	str	r2, [r3, #112]	; 0x70
 8003a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	671a      	str	r2, [r3, #112]	; 0x70
 8003a0a:	e7d1      	b.n	80039b0 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe f9cc 	bl	8001da8 <HAL_GetTick>
 8003a10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f013 0f02 	tst.w	r3, #2
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe f9c4 	bl	8001da8 <HAL_GetTick>
 8003a20:	1b80      	subs	r0, r0, r6
 8003a22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a26:	4298      	cmp	r0, r3
 8003a28:	d9f3      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8003a2a:	2003      	movs	r0, #3
 8003a2c:	e067      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2e:	b9f5      	cbnz	r5, 8003a6e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a30:	69a3      	ldr	r3, [r4, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d062      	beq.n	8003afc <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	f002 020c 	and.w	r2, r2, #12
 8003a3e:	2a08      	cmp	r2, #8
 8003a40:	d05f      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d019      	beq.n	8003a7a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe f9aa 	bl	8001da8 <HAL_GetTick>
 8003a54:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a5e:	d047      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe f9a2 	bl	8001da8 <HAL_GetTick>
 8003a64:	1b00      	subs	r0, r0, r4
 8003a66:	2802      	cmp	r0, #2
 8003a68:	d9f5      	bls.n	8003a56 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	e047      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
 8003a78:	e7da      	b.n	8003a30 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a84:	f7fe f990 	bl	8001da8 <HAL_GetTick>
 8003a88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a92:	d006      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe f988 	bl	8001da8 <HAL_GetTick>
 8003a98:	1b40      	subs	r0, r0, r5
 8003a9a:	2802      	cmp	r0, #2
 8003a9c:	d9f5      	bls.n	8003a8a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8003a9e:	2003      	movs	r0, #3
 8003aa0:	e02d      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa2:	69e3      	ldr	r3, [r4, #28]
 8003aa4:	6a22      	ldr	r2, [r4, #32]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003aaa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003aae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ab0:	0852      	lsrs	r2, r2, #1
 8003ab2:	3a01      	subs	r2, #1
 8003ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ab8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003aba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ac2:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003ac4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003acc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ace:	f7fe f96b 	bl	8001da8 <HAL_GetTick>
 8003ad2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x3d0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe f963 	bl	8001da8 <HAL_GetTick>
 8003ae2:	1b00      	subs	r0, r0, r4
 8003ae4:	2802      	cmp	r0, #2
 8003ae6:	d9f5      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8003ae8:	2003      	movs	r0, #3
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	e006      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e004      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
}
 8003af6:	4770      	bx	lr
        return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	b002      	add	sp, #8
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b02:	2001      	movs	r0, #1
 8003b04:	e7fb      	b.n	8003afe <HAL_RCC_OscConfig+0x3c6>
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d044      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x96>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4823      	ldr	r0, [pc, #140]	; (8003bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b1e:	4770      	bx	lr
{
 8003b20:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	481c      	ldr	r0, [pc, #112]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b40:	fba1 0100 	umull	r0, r1, r1, r0
 8003b44:	f7fd f8c0 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b50:	3301      	adds	r3, #1
 8003b52:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003b54:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b58:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003b64:	461e      	mov	r6, r3
 8003b66:	2700      	movs	r7, #0
 8003b68:	015c      	lsls	r4, r3, #5
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	1ae4      	subs	r4, r4, r3
 8003b6e:	eb65 0507 	sbc.w	r5, r5, r7
 8003b72:	01a9      	lsls	r1, r5, #6
 8003b74:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003b78:	01a0      	lsls	r0, r4, #6
 8003b7a:	1b00      	subs	r0, r0, r4
 8003b7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b80:	00cb      	lsls	r3, r1, #3
 8003b82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b86:	00c4      	lsls	r4, r0, #3
 8003b88:	19a0      	adds	r0, r4, r6
 8003b8a:	eb43 0107 	adc.w	r1, r3, r7
 8003b8e:	028b      	lsls	r3, r1, #10
 8003b90:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003b94:	0284      	lsls	r4, r0, #10
 8003b96:	4620      	mov	r0, r4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f7fd f894 	bl	8000cc8 <__aeabi_uldivmod>
 8003ba0:	e7d2      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8003ba2:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	017d7840 	.word	0x017d7840

08003bb4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f000 80a2 	beq.w	8003cfe <HAL_RCC_ClockConfig+0x14a>
{
 8003bba:	b570      	push	{r4, r5, r6, lr}
 8003bbc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x154>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	428b      	cmp	r3, r1
 8003bc8:	d20c      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4a4f      	ldr	r2, [pc, #316]	; (8003d08 <HAL_RCC_ClockConfig+0x154>)
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f023 030f 	bic.w	r3, r3, #15
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003be0:	2001      	movs	r0, #1
}
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f013 0f02 	tst.w	r3, #2
 8003bea:	d017      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	f013 0f04 	tst.w	r3, #4
 8003bf0:	d004      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf2:	4a46      	ldr	r2, [pc, #280]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003bf4:	6893      	ldr	r3, [r2, #8]
 8003bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bfa:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	f013 0f08 	tst.w	r3, #8
 8003c02:	d004      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4a41      	ldr	r2, [pc, #260]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c06:	6893      	ldr	r3, [r2, #8]
 8003c08:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0e:	4a3f      	ldr	r2, [pc, #252]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c10:	6893      	ldr	r3, [r2, #8]
 8003c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c16:	68a0      	ldr	r0, [r4, #8]
 8003c18:	4303      	orrs	r3, r0
 8003c1a:	6093      	str	r3, [r2, #8]
 8003c1c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f013 0f01 	tst.w	r3, #1
 8003c24:	d031      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	6863      	ldr	r3, [r4, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d025      	beq.n	8003c7c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	4a36      	ldr	r2, [pc, #216]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	f012 0f02 	tst.w	r2, #2
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4934      	ldr	r1, [pc, #208]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c3c:	688a      	ldr	r2, [r1, #8]
 8003c3e:	f022 0203 	bic.w	r2, r2, #3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c46:	f7fe f8af 	bl	8001da8 <HAL_GetTick>
 8003c4a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4c:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	6862      	ldr	r2, [r4, #4]
 8003c56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7fe f8a4 	bl	8001da8 <HAL_GetTick>
 8003c60:	1b80      	subs	r0, r0, r6
 8003c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c66:	4298      	cmp	r0, r3
 8003c68:	d9f0      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	e7b9      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003c76:	d1e0      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
 8003c7a:	e7b2      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003c84:	d1d9      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003c86:	2001      	movs	r0, #1
 8003c88:	e7ab      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCC_ClockConfig+0x154>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	42ab      	cmp	r3, r5
 8003c94:	d90c      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_RCC_ClockConfig+0x154>)
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	f023 030f 	bic.w	r3, r3, #15
 8003c9e:	432b      	orrs	r3, r5
 8003ca0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	6813      	ldr	r3, [r2, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	42ab      	cmp	r3, r5
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8003cac:	2001      	movs	r0, #1
 8003cae:	e798      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f013 0f04 	tst.w	r3, #4
 8003cb6:	d006      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003cc0:	68e1      	ldr	r1, [r4, #12]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f013 0f08 	tst.w	r3, #8
 8003ccc:	d007      	beq.n	8003cde <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003cd0:	6893      	ldr	r3, [r2, #8]
 8003cd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cd6:	6921      	ldr	r1, [r4, #16]
 8003cd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cdc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cde:	f7ff ff15 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x158>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x15c>)
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	40d8      	lsrs	r0, r3
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCC_ClockConfig+0x160>)
 8003cf2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fe f813 	bl	8001d20 <HAL_InitTick>
  return HAL_OK;
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e771      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
}
 8003d00:	4770      	bx	lr
        return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
 8003d04:	e76d      	b.n	8003be2 <HAL_RCC_ClockConfig+0x2e>
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	0800dc20 	.word	0x0800dc20
 8003d14:	20000054 	.word	0x20000054

08003d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000054 	.word	0x20000054

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d26:	f7ff fff7 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d36:	40d8      	lsrs	r0, r3
 8003d38:	bd08      	pop	{r3, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	0800dc30 	.word	0x0800dc30

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d46:	f7ff ffe7 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d52:	4a03      	ldr	r2, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d56:	40d8      	lsrs	r0, r3
 8003d58:	bd08      	pop	{r3, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	0800dc30 	.word	0x0800dc30

08003d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	f013 0f01 	tst.w	r3, #1
 8003d70:	d00c      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d72:	4baf      	ldr	r3, [pc, #700]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d86:	b1c3      	cbz	r3, 8003dba <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8003d88:	2600      	movs	r6, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8003d8c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d94:	d015      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d96:	4aa6      	ldr	r2, [pc, #664]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003d98:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003d9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003da0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003da2:	430b      	orrs	r3, r1
 8003da4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dae:	d006      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 811b 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8003db6:	2500      	movs	r5, #0
 8003db8:	e004      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8003dba:	2601      	movs	r6, #1
 8003dbc:	e7e7      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8003dbe:	2601      	movs	r6, #1
 8003dc0:	e7f6      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8003dc2:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003dca:	d00f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dcc:	4a98      	ldr	r2, [pc, #608]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003dce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003dd2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003dd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de4:	f000 8104 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003de8:	b903      	cbnz	r3, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8003dea:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003df2:	d000      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8003df4:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df6:	f013 0f20 	tst.w	r3, #32
 8003dfa:	f040 80fb 	bne.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f013 0f10 	tst.w	r3, #16
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e06:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e0c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e28:	4a81      	ldr	r2, [pc, #516]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e32:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003e34:	430b      	orrs	r3, r1
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e42:	4a7b      	ldr	r2, [pc, #492]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003e4c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5c:	4a74      	ldr	r2, [pc, #464]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e62:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e66:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e74:	d008      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e76:	4a6e      	ldr	r2, [pc, #440]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e7c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e80:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003e82:	430b      	orrs	r3, r1
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e90:	4a67      	ldr	r2, [pc, #412]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eaa:	4a61      	ldr	r2, [pc, #388]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003eac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003eb0:	f023 030c 	bic.w	r3, r3, #12
 8003eb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec4:	4a5a      	ldr	r2, [pc, #360]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ec6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003eca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ece:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ede:	4a54      	ldr	r2, [pc, #336]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ee0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ee8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003eea:	430b      	orrs	r3, r1
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003efa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003f04:	430b      	orrs	r3, r1
 8003f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f12:	4a47      	ldr	r2, [pc, #284]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f1c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f2c:	4a40      	ldr	r2, [pc, #256]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003f44:	d008      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f50:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003f52:	430b      	orrs	r3, r1
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f60:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f6a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003f78:	d00d      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f80:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003f84:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f86:	430b      	orrs	r3, r1
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f92:	f000 8099 	beq.w	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	f013 0f08 	tst.w	r3, #8
 8003f9c:	d000      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8003f9e:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fa0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003fa8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fac:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003fb0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003fc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fca:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fd4:	2e00      	cmp	r6, #0
 8003fd6:	d179      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fde:	d075      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	f040 8106 	bne.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003fe6:	2000      	movs	r0, #0
}
 8003fe8:	b003      	add	sp, #12
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8003fec:	2501      	movs	r5, #1
 8003fee:	e6e9      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8003ff0:	2601      	movs	r6, #1
 8003ff2:	e6f9      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004012:	f7fd fec9 	bl	8001da8 <HAL_GetTick>
 8004016:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fd fec1 	bl	8001da8 <HAL_GetTick>
 8004026:	1bc0      	subs	r0, r0, r7
 8004028:	2864      	cmp	r0, #100	; 0x64
 800402a:	d9f5      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 800402c:	2003      	movs	r0, #3
 800402e:	e7db      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004038:	4bb3      	ldr	r3, [pc, #716]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004040:	d015      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004042:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004044:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004048:	429a      	cmp	r2, r3
 800404a:	d010      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404c:	4bae      	ldr	r3, [pc, #696]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800404e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004050:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004054:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004056:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800405a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800405e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004062:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004064:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	f013 0f01 	tst.w	r3, #1
 800406c:	d112      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004070:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004074:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004078:	d01d      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800407a:	4aa3      	ldr	r2, [pc, #652]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800407c:	6893      	ldr	r3, [r2, #8]
 800407e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004082:	6093      	str	r3, [r2, #8]
 8004084:	49a0      	ldr	r1, [pc, #640]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004086:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004088:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800408a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800408e:	4313      	orrs	r3, r2
 8004090:	670b      	str	r3, [r1, #112]	; 0x70
 8004092:	e6b4      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8004094:	f7fd fe88 	bl	8001da8 <HAL_GetTick>
 8004098:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	4b9b      	ldr	r3, [pc, #620]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	f013 0f02 	tst.w	r3, #2
 80040a2:	d1e4      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fd fe80 	bl	8001da8 <HAL_GetTick>
 80040a8:	1bc0      	subs	r0, r0, r7
 80040aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80040ae:	4298      	cmp	r0, r3
 80040b0:	d9f3      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e798      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b6:	4894      	ldr	r0, [pc, #592]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80040b8:	6882      	ldr	r2, [r0, #8]
 80040ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80040be:	4993      	ldr	r1, [pc, #588]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80040c0:	4019      	ands	r1, r3
 80040c2:	430a      	orrs	r2, r1
 80040c4:	6082      	str	r2, [r0, #8]
 80040c6:	e7dd      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 80040c8:	2501      	movs	r5, #1
 80040ca:	e764      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 80040cc:	4a8e      	ldr	r2, [pc, #568]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040d6:	f7fd fe67 	bl	8001da8 <HAL_GetTick>
 80040da:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040dc:	4b8a      	ldr	r3, [pc, #552]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040e4:	d006      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040e6:	f7fd fe5f 	bl	8001da8 <HAL_GetTick>
 80040ea:	1b80      	subs	r0, r0, r6
 80040ec:	2864      	cmp	r0, #100	; 0x64
 80040ee:	d9f5      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 80040f0:	2003      	movs	r0, #3
 80040f2:	e779      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	f013 0f01 	tst.w	r3, #1
 80040fa:	d013      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040fe:	b98b      	cbnz	r3, 8004124 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004100:	4a81      	ldr	r2, [pc, #516]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004102:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004106:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800410a:	6860      	ldr	r0, [r4, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004110:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004114:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004118:	430b      	orrs	r3, r1
 800411a:	68a1      	ldr	r1, [r4, #8]
 800411c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004120:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800412a:	d003      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800412c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800412e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004132:	d006      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004134:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004138:	d01e      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800413a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800413c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004140:	d11a      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004142:	4a71      	ldr	r2, [pc, #452]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004144:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004148:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800414c:	6860      	ldr	r0, [r4, #4]
 800414e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004152:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004156:	68e0      	ldr	r0, [r4, #12]
 8004158:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800415c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004160:	430b      	orrs	r3, r1
 8004162:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004166:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800416a:	f023 031f 	bic.w	r3, r3, #31
 800416e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004170:	3901      	subs	r1, #1
 8004172:	430b      	orrs	r3, r1
 8004174:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800417e:	d011      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004180:	4a61      	ldr	r2, [pc, #388]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004182:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004186:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800418a:	6866      	ldr	r6, [r4, #4]
 800418c:	6923      	ldr	r3, [r4, #16]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004194:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004198:	4303      	orrs	r3, r0
 800419a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800419e:	430b      	orrs	r3, r1
 80041a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041aa:	d00d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ac:	6862      	ldr	r2, [r4, #4]
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80041b6:	68e2      	ldr	r2, [r4, #12]
 80041b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041bc:	68a2      	ldr	r2, [r4, #8]
 80041be:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80041c2:	4a51      	ldr	r2, [pc, #324]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80041c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80041c8:	4a4f      	ldr	r2, [pc, #316]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041d2:	f7fd fde9 	bl	8001da8 <HAL_GetTick>
 80041d6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80041e0:	f47f aefe 	bne.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e4:	f7fd fde0 	bl	8001da8 <HAL_GetTick>
 80041e8:	1b80      	subs	r0, r0, r6
 80041ea:	2864      	cmp	r0, #100	; 0x64
 80041ec:	d9f4      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 80041ee:	2003      	movs	r0, #3
 80041f0:	e6fa      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 80041f2:	4a45      	ldr	r2, [pc, #276]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80041f4:	6813      	ldr	r3, [r2, #0]
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041fc:	f7fd fdd4 	bl	8001da8 <HAL_GetTick>
 8004200:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800420a:	d006      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800420c:	f7fd fdcc 	bl	8001da8 <HAL_GetTick>
 8004210:	1b40      	subs	r0, r0, r5
 8004212:	2864      	cmp	r0, #100	; 0x64
 8004214:	d9f5      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8004216:	2003      	movs	r0, #3
 8004218:	e6e6      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004220:	d001      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004222:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004224:	b122      	cbz	r2, 8004230 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004226:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800422a:	d01d      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422e:	b9db      	cbnz	r3, 8004268 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004230:	4a35      	ldr	r2, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004232:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004236:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800423a:	6960      	ldr	r0, [r4, #20]
 800423c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004240:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004244:	69a0      	ldr	r0, [r4, #24]
 8004246:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800424a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800424e:	430b      	orrs	r3, r1
 8004250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004254:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004258:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800425c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800425e:	3901      	subs	r1, #1
 8004260:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004264:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004270:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004276:	d031      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	f013 0f08 	tst.w	r3, #8
 800427e:	d019      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004282:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004286:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800428a:	6960      	ldr	r0, [r4, #20]
 800428c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004290:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004294:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004298:	430b      	orrs	r3, r1
 800429a:	69e1      	ldr	r1, [r4, #28]
 800429c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80042a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80042a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042ae:	430b      	orrs	r3, r1
 80042b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80042be:	f7fd fd73 	bl	8001da8 <HAL_GetTick>
 80042c2:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80042cc:	d119      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042ce:	f7fd fd6b 	bl	8001da8 <HAL_GetTick>
 80042d2:	1b00      	subs	r0, r0, r4
 80042d4:	2864      	cmp	r0, #100	; 0x64
 80042d6:	d9f5      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 80042d8:	2003      	movs	r0, #3
 80042da:	e685      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80042de:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042e2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042e6:	6965      	ldr	r5, [r4, #20]
 80042e8:	6a23      	ldr	r3, [r4, #32]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80042f0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80042f4:	4303      	orrs	r3, r0
 80042f6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80042fa:	430b      	orrs	r3, r1
 80042fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004300:	e7ba      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8004302:	2000      	movs	r0, #0
 8004304:	e670      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	0ffffcff 	.word	0x0ffffcff

08004310 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004310:	b1d8      	cbz	r0, 800434a <HAL_SDRAM_Init+0x3a>
{   
 8004312:	b538      	push	{r3, r4, r5, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004318:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800431c:	b183      	cbz	r3, 8004340 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800431e:	2302      	movs	r3, #2
 8004320:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004324:	1d21      	adds	r1, r4, #4
 8004326:	6820      	ldr	r0, [r4, #0]
 8004328:	f000 ffdc 	bl	80052e4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800432c:	6862      	ldr	r2, [r4, #4]
 800432e:	4629      	mov	r1, r5
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	f001 f811 	bl	8005358 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004336:	2301      	movs	r3, #1
 8004338:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800433c:	2000      	movs	r0, #0
}
 800433e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004340:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004344:	f003 f810 	bl	8007368 <HAL_SDRAM_MspInit>
 8004348:	e7e9      	b.n	800431e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800434a:	2001      	movs	r0, #1
}
 800434c:	4770      	bx	lr

0800434e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800434e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004350:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d014      	beq.n	8004384 <HAL_SDRAM_SendCommand+0x36>
 800435a:	460d      	mov	r5, r1
 800435c:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800435e:	2302      	movs	r3, #2
 8004360:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	f001 f843 	bl	80053f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d004      	beq.n	800437a <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004370:	2301      	movs	r3, #1
 8004372:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004376:	2000      	movs	r0, #0
}
 8004378:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800437a:	2305      	movs	r3, #5
 800437c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004380:	2000      	movs	r0, #0
 8004382:	e7f9      	b.n	8004378 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8004384:	2002      	movs	r0, #2
 8004386:	e7f7      	b.n	8004378 <HAL_SDRAM_SendCommand+0x2a>

08004388 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004388:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d00c      	beq.n	80043ac <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004392:	b510      	push	{r4, lr}
 8004394:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004396:	2302      	movs	r3, #2
 8004398:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f001 f83d 	bl	800541c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80043a8:	2000      	movs	r0, #0
}
 80043aa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80043ac:	2002      	movs	r0, #2
}
 80043ae:	4770      	bx	lr

080043b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	4605      	mov	r5, r0
 80043b4:	460f      	mov	r7, r1
 80043b6:	4616      	mov	r6, r2
 80043b8:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ba:	682b      	ldr	r3, [r5, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	ea37 0303 	bics.w	r3, r7, r3
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	42b3      	cmp	r3, r6
 80043ca:	d037      	beq.n	800443c <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80043d0:	d0f3      	beq.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043d2:	f7fd fce9 	bl	8001da8 <HAL_GetTick>
 80043d6:	9b06      	ldr	r3, [sp, #24]
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	42a0      	cmp	r0, r4
 80043dc:	d201      	bcs.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0x32>
 80043de:	2c00      	cmp	r4, #0
 80043e0:	d1eb      	bne.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e2:	682a      	ldr	r2, [r5, #0]
 80043e4:	6853      	ldr	r3, [r2, #4]
 80043e6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80043ea:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ec:	686b      	ldr	r3, [r5, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d00b      	beq.n	800440c <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fa:	d014      	beq.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004402:	2300      	movs	r3, #0
 8004404:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004408:	2003      	movs	r0, #3
 800440a:	e018      	b.n	800443e <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68ab      	ldr	r3, [r5, #8]
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	bf18      	it	ne
 8004414:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004418:	d1ec      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800441a:	682a      	ldr	r2, [r5, #0]
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e7e6      	b.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004426:	682a      	ldr	r2, [r5, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	682a      	ldr	r2, [r5, #0]
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e7df      	b.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 800443c:	2000      	movs	r0, #0
}
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	4607      	mov	r7, r0
 8004444:	460d      	mov	r5, r1
 8004446:	4614      	mov	r4, r2
 8004448:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800444a:	e002      	b.n	8004452 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800444c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004450:	d10b      	bne.n	800446a <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	402b      	ands	r3, r5
 8004458:	42a3      	cmp	r3, r4
 800445a:	d03b      	beq.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800445c:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004460:	bf08      	it	eq
 8004462:	2c00      	cmpeq	r4, #0
 8004464:	d1f2      	bne.n	800444c <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004466:	7b13      	ldrb	r3, [r2, #12]
 8004468:	e7f0      	b.n	800444c <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800446a:	f7fd fc9d 	bl	8001da8 <HAL_GetTick>
 800446e:	9b06      	ldr	r3, [sp, #24]
 8004470:	1ac0      	subs	r0, r0, r3
 8004472:	42b0      	cmp	r0, r6
 8004474:	d201      	bcs.n	800447a <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004476:	2e00      	cmp	r6, #0
 8004478:	d1eb      	bne.n	8004452 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	6853      	ldr	r3, [r2, #4]
 800447e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004482:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448a:	d00b      	beq.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	d014      	beq.n	80044be <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800449a:	2300      	movs	r3, #0
 800449c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044a0:	2003      	movs	r0, #3
 80044a2:	e018      	b.n	80044d6 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044aa:	bf18      	it	ne
 80044ac:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80044b0:	d1ec      	bne.n	800448c <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e7e6      	b.n	800448c <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e7df      	b.n	8004494 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 80044d4:	2000      	movs	r0, #0
}
 80044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	4604      	mov	r4, r0
 80044de:	460d      	mov	r5, r1
 80044e0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044e2:	9200      	str	r2, [sp, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	2200      	movs	r2, #0
 80044e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044ec:	f7ff ffa8 	bl	8004440 <SPI_WaitFifoStateUntilTimeout>
 80044f0:	b9b8      	cbnz	r0, 8004522 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	9600      	str	r6, [sp, #0]
 80044f4:	462b      	mov	r3, r5
 80044f6:	2200      	movs	r2, #0
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff ff58 	bl	80043b0 <SPI_WaitFlagStateUntilTimeout>
 8004500:	b9b8      	cbnz	r0, 8004532 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004502:	9600      	str	r6, [sp, #0]
 8004504:	462b      	mov	r3, r5
 8004506:	2200      	movs	r2, #0
 8004508:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff ff97 	bl	8004440 <SPI_WaitFifoStateUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	b150      	cbz	r0, 800452c <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004518:	f043 0320 	orr.w	r3, r3, #32
 800451c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e004      	b.n	800452c <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004522:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004524:	f043 0320 	orr.w	r3, r3, #32
 8004528:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 800452c:	4618      	mov	r0, r3
 800452e:	b002      	add	sp, #8
 8004530:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e7f6      	b.n	800452c <SPI_EndRxTxTransaction+0x54>

0800453e <SPI_EndRxTransaction>:
{
 800453e:	b570      	push	{r4, r5, r6, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	4604      	mov	r4, r0
 8004544:	460d      	mov	r5, r1
 8004546:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	6843      	ldr	r3, [r0, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454e:	d00f      	beq.n	8004570 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004550:	9600      	str	r6, [sp, #0]
 8004552:	462b      	mov	r3, r5
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	4620      	mov	r0, r4
 800455a:	f7ff ff29 	bl	80043b0 <SPI_WaitFlagStateUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	b998      	cbnz	r0, 800458a <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004562:	6862      	ldr	r2, [r4, #4]
 8004564:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004568:	d015      	beq.n	8004596 <SPI_EndRxTransaction+0x58>
}
 800456a:	4618      	mov	r0, r3
 800456c:	b002      	add	sp, #8
 800456e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004570:	6883      	ldr	r3, [r0, #8]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	bf18      	it	ne
 8004578:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800457c:	d1e8      	bne.n	8004550 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800457e:	6802      	ldr	r2, [r0, #0]
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e7e2      	b.n	8004550 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800458c:	f043 0320 	orr.w	r3, r3, #32
 8004590:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e7e9      	b.n	800456a <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004596:	68a2      	ldr	r2, [r4, #8]
 8004598:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800459c:	bf18      	it	ne
 800459e:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 80045a2:	d1e2      	bne.n	800456a <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045a4:	9600      	str	r6, [sp, #0]
 80045a6:	462b      	mov	r3, r5
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff ff46 	bl	8004440 <SPI_WaitFifoStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0d7      	beq.n	800456a <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e7d1      	b.n	800456a <SPI_EndRxTransaction+0x2c>

080045c6 <HAL_SPI_Init>:
  if (hspi == NULL)
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d058      	beq.n	800467c <HAL_SPI_Init+0xb6>
{
 80045ca:	b510      	push	{r4, lr}
 80045cc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d045      	beq.n	8004666 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045f0:	d93e      	bls.n	8004670 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045f2:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045f8:	bf18      	it	ne
 80045fa:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 80045fe:	d001      	beq.n	8004604 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	2100      	movs	r1, #0
 8004602:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004604:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004606:	b921      	cbnz	r1, 8004612 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800460c:	d933      	bls.n	8004676 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800460e:	2302      	movs	r3, #2
 8004610:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	68a1      	ldr	r1, [r4, #8]
 8004616:	430b      	orrs	r3, r1
 8004618:	6921      	ldr	r1, [r4, #16]
 800461a:	430b      	orrs	r3, r1
 800461c:	6961      	ldr	r1, [r4, #20]
 800461e:	430b      	orrs	r3, r1
 8004620:	69a1      	ldr	r1, [r4, #24]
 8004622:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004626:	430b      	orrs	r3, r1
 8004628:	69e1      	ldr	r1, [r4, #28]
 800462a:	430b      	orrs	r3, r1
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	430b      	orrs	r3, r1
 8004630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004632:	6821      	ldr	r1, [r4, #0]
 8004634:	4303      	orrs	r3, r0
 8004636:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004638:	8b63      	ldrh	r3, [r4, #26]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004640:	430b      	orrs	r3, r1
 8004642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004644:	430b      	orrs	r3, r1
 8004646:	68e1      	ldr	r1, [r4, #12]
 8004648:	430b      	orrs	r3, r1
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	69d3      	ldr	r3, [r2, #28]
 8004654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004658:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465a:	2000      	movs	r0, #0
 800465c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800465e:	2301      	movs	r3, #1
 8004660:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004664:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004666:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800466a:	f002 fde7 	bl	800723c <HAL_SPI_MspInit>
 800466e:	e7b4      	b.n	80045da <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004674:	e7be      	b.n	80045f4 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004676:	2301      	movs	r3, #1
 8004678:	6323      	str	r3, [r4, #48]	; 0x30
 800467a:	e7ca      	b.n	8004612 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800467c:	2001      	movs	r0, #1
}
 800467e:	4770      	bx	lr

08004680 <HAL_SPI_Transmit>:
{
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004686:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800468a:	2c01      	cmp	r4, #1
 800468c:	f000 80e5 	beq.w	800485a <HAL_SPI_Transmit+0x1da>
 8004690:	461d      	mov	r5, r3
 8004692:	4617      	mov	r7, r2
 8004694:	4688      	mov	r8, r1
 8004696:	4604      	mov	r4, r0
 8004698:	2301      	movs	r3, #1
 800469a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800469e:	f7fd fb83 	bl	8001da8 <HAL_GetTick>
 80046a2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80046a4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d009      	beq.n	80046c2 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80046ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046b6:	2300      	movs	r3, #0
 80046b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80046bc:	b002      	add	sp, #8
 80046be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80046c2:	fab7 f387 	clz	r3, r7
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f1b8 0f00 	cmp.w	r8, #0
 80046cc:	bf08      	it	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 80b6 	bne.w	8004842 <HAL_SPI_Transmit+0x1c2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d6:	2303      	movs	r3, #3
 80046d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046dc:	2300      	movs	r3, #0
 80046de:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046e0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046e4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046e6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046e8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046ee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046f2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046f4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d01c      	beq.n	8004738 <HAL_SPI_Transmit+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004706:	d103      	bne.n	8004710 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004716:	d933      	bls.n	8004780 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	b10b      	cbz	r3, 8004720 <HAL_SPI_Transmit+0xa0>
 800471c:	2f01      	cmp	r7, #1
 800471e:	d11b      	bne.n	8004758 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004720:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	8812      	ldrh	r2, [r2, #0]
 8004726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800472a:	3302      	adds	r3, #2
 800472c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800472e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004730:	3b01      	subs	r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004736:	e00f      	b.n	8004758 <HAL_SPI_Transmit+0xd8>
    SPI_1LINE_TX(hspi);
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e7dc      	b.n	80046fe <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004744:	f7fd fb30 	bl	8001da8 <HAL_GetTick>
 8004748:	1b80      	subs	r0, r0, r6
 800474a:	42a8      	cmp	r0, r5
 800474c:	d302      	bcc.n	8004754 <HAL_SPI_Transmit+0xd4>
 800474e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004752:	d178      	bne.n	8004846 <HAL_SPI_Transmit+0x1c6>
 8004754:	2d00      	cmp	r5, #0
 8004756:	d078      	beq.n	800484a <HAL_SPI_Transmit+0x1ca>
    while (hspi->TxXferCount > 0U)
 8004758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05b      	beq.n	8004818 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	f012 0f02 	tst.w	r2, #2
 8004768:	d0ec      	beq.n	8004744 <HAL_SPI_Transmit+0xc4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004772:	3302      	adds	r3, #2
 8004774:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004778:	3b01      	subs	r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800477e:	e7eb      	b.n	8004758 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	b10b      	cbz	r3, 8004788 <HAL_SPI_Transmit+0x108>
 8004784:	2f01      	cmp	r7, #1
 8004786:	d130      	bne.n	80047ea <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 8004788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d90b      	bls.n	80047a8 <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004790:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800479a:	3302      	adds	r3, #2
 800479c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800479e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047a0:	3b02      	subs	r3, #2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047a6:	e020      	b.n	80047ea <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80047b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b2:	3301      	adds	r3, #1
 80047b4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80047b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047be:	e014      	b.n	80047ea <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80047c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c8:	3301      	adds	r3, #1
 80047ca:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80047cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047d4:	e009      	b.n	80047ea <HAL_SPI_Transmit+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fd fae7 	bl	8001da8 <HAL_GetTick>
 80047da:	1b80      	subs	r0, r0, r6
 80047dc:	42a8      	cmp	r0, r5
 80047de:	d302      	bcc.n	80047e6 <HAL_SPI_Transmit+0x166>
 80047e0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80047e4:	d133      	bne.n	800484e <HAL_SPI_Transmit+0x1ce>
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	d033      	beq.n	8004852 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 80047ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b19b      	cbz	r3, 8004818 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6893      	ldr	r3, [r2, #8]
 80047f4:	f013 0f02 	tst.w	r3, #2
 80047f8:	d0ed      	beq.n	80047d6 <HAL_SPI_Transmit+0x156>
        if (hspi->TxXferCount > 1U)
 80047fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d9de      	bls.n	80047c0 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004802:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800480a:	3302      	adds	r3, #2
 800480c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800480e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004810:	3b02      	subs	r3, #2
 8004812:	b29b      	uxth	r3, r3
 8004814:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004816:	e7e8      	b.n	80047ea <HAL_SPI_Transmit+0x16a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004818:	4632      	mov	r2, r6
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff fe5b 	bl	80044d8 <SPI_EndRxTxTransaction>
 8004822:	b108      	cbz	r0, 8004828 <HAL_SPI_Transmit+0x1a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004824:	2320      	movs	r3, #32
 8004826:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004828:	68a3      	ldr	r3, [r4, #8]
 800482a:	b933      	cbnz	r3, 800483a <HAL_SPI_Transmit+0x1ba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	9201      	str	r2, [sp, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800483c:	b95b      	cbnz	r3, 8004856 <HAL_SPI_Transmit+0x1d6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800483e:	2000      	movs	r0, #0
 8004840:	e736      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004842:	2001      	movs	r0, #1
 8004844:	e734      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004846:	2003      	movs	r0, #3
 8004848:	e732      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
 800484a:	2003      	movs	r0, #3
 800484c:	e730      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800484e:	2003      	movs	r0, #3
 8004850:	e72e      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
 8004852:	2003      	movs	r0, #3
 8004854:	e72c      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e72a      	b.n	80046b0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800485a:	2002      	movs	r0, #2
 800485c:	e72e      	b.n	80046bc <HAL_SPI_Transmit+0x3c>

0800485e <HAL_SPI_TransmitReceive>:
{
 800485e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004862:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8004866:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800486a:	2c01      	cmp	r4, #1
 800486c:	f000 815d 	beq.w	8004b2a <HAL_SPI_TransmitReceive+0x2cc>
 8004870:	461d      	mov	r5, r3
 8004872:	4617      	mov	r7, r2
 8004874:	460e      	mov	r6, r1
 8004876:	4604      	mov	r4, r0
 8004878:	2301      	movs	r3, #1
 800487a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800487e:	f7fd fa93 	bl	8001da8 <HAL_GetTick>
 8004882:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004884:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004888:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800488a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800488c:	2801      	cmp	r0, #1
 800488e:	d014      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x5c>
 8004890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004894:	d009      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004898:	2201      	movs	r2, #1
 800489a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800489e:	2200      	movs	r2, #0
 80048a0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048aa:	68a3      	ldr	r3, [r4, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8130 	bne.w	8004b12 <HAL_SPI_TransmitReceive+0x2b4>
 80048b2:	2804      	cmp	r0, #4
 80048b4:	d001      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	e7ee      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048ba:	fab7 f387 	clz	r3, r7
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	bf08      	it	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8125 	bne.w	8004b16 <HAL_SPI_TransmitReceive+0x2b8>
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	f000 8124 	beq.w	8004b1a <HAL_SPI_TransmitReceive+0x2bc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048d2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x84>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048dc:	2305      	movs	r3, #5
 80048de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048e6:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048e8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80048ec:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048f0:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048f2:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80048f4:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80048f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048f8:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004900:	d801      	bhi.n	8004906 <HAL_SPI_TransmitReceive+0xa8>
 8004902:	2d01      	cmp	r5, #1
 8004904:	d922      	bls.n	800494c <HAL_SPI_TransmitReceive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	6853      	ldr	r3, [r2, #4]
 800490a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004918:	d103      	bne.n	8004922 <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004928:	d956      	bls.n	80049d8 <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	b10b      	cbz	r3, 8004932 <HAL_SPI_TransmitReceive+0xd4>
 800492e:	2d01      	cmp	r5, #1
 8004930:	d10a      	bne.n	8004948 <HAL_SPI_TransmitReceive+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	8812      	ldrh	r2, [r2, #0]
 8004938:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800493a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800493c:	3302      	adds	r3, #2
 800493e:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004940:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004942:	3b01      	subs	r3, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004948:	2501      	movs	r5, #1
 800494a:	e025      	b.n	8004998 <HAL_SPI_TransmitReceive+0x13a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	6853      	ldr	r3, [r2, #4]
 8004950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004954:	6053      	str	r3, [r2, #4]
 8004956:	e7db      	b.n	8004910 <HAL_SPI_TransmitReceive+0xb2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	f012 0f01 	tst.w	r2, #1
 8004960:	d010      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x126>
 8004962:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004966:	b292      	uxth	r2, r2
 8004968:	b162      	cbz	r2, 8004984 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800496e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004972:	3302      	adds	r3, #2
 8004974:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004976:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800497a:	3b01      	subs	r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004982:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004984:	f7fd fa10 	bl	8001da8 <HAL_GetTick>
 8004988:	eba0 0009 	sub.w	r0, r0, r9
 800498c:	4540      	cmp	r0, r8
 800498e:	d303      	bcc.n	8004998 <HAL_SPI_TransmitReceive+0x13a>
 8004990:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004994:	f040 80c3 	bne.w	8004b1e <HAL_SPI_TransmitReceive+0x2c0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	b92b      	cbnz	r3, 80049aa <HAL_SPI_TransmitReceive+0x14c>
 800499e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a7 	beq.w	8004af8 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	f012 0f02 	tst.w	r2, #2
 80049b2:	d0d1      	beq.n	8004958 <HAL_SPI_TransmitReceive+0xfa>
 80049b4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80049b6:	b292      	uxth	r2, r2
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d0cd      	beq.n	8004958 <HAL_SPI_TransmitReceive+0xfa>
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d0cb      	beq.n	8004958 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049c8:	3302      	adds	r3, #2
 80049ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80049cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80049d4:	2500      	movs	r5, #0
 80049d6:	e7bf      	b.n	8004958 <HAL_SPI_TransmitReceive+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	b10b      	cbz	r3, 80049e0 <HAL_SPI_TransmitReceive+0x182>
 80049dc:	2d01      	cmp	r5, #1
 80049de:	d10e      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 80049e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d90c      	bls.n	8004a02 <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049f2:	3302      	adds	r3, #2
 80049f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049f8:	3b02      	subs	r3, #2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80049fe:	2501      	movs	r5, #1
 8004a00:	e047      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x234>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004a10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004a18:	e7f1      	b.n	80049fe <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 8004a1a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	2a01      	cmp	r2, #1
 8004a20:	d90b      	bls.n	8004a3a <HAL_SPI_TransmitReceive+0x1dc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a24:	8812      	ldrh	r2, [r2, #0]
 8004a26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a30:	3b02      	subs	r3, #2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004a36:	2500      	movs	r5, #0
 8004a38:	e03c      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8004a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a42:	3301      	adds	r3, #1
 8004a44:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004a46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004a4e:	2500      	movs	r5, #0
 8004a50:	e030      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	6853      	ldr	r3, [r2, #4]
 8004a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a5a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8004a5c:	2501      	movs	r5, #1
 8004a5e:	e00c      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x21c>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a62:	7b1b      	ldrb	r3, [r3, #12]
 8004a64:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8004a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a68:	3301      	adds	r3, #1
 8004a6a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004a6c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004a78:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a7a:	f7fd f995 	bl	8001da8 <HAL_GetTick>
 8004a7e:	eba0 0009 	sub.w	r0, r0, r9
 8004a82:	4540      	cmp	r0, r8
 8004a84:	d302      	bcc.n	8004a8c <HAL_SPI_TransmitReceive+0x22e>
 8004a86:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a8a:	d14a      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x2c4>
 8004a8c:	f1b8 0f00 	cmp.w	r8, #0
 8004a90:	d049      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	b91b      	cbnz	r3, 8004aa0 <HAL_SPI_TransmitReceive+0x242>
 8004a98:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	b35b      	cbz	r3, 8004af8 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	f012 0f02 	tst.w	r2, #2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x256>
 8004aaa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004aac:	b292      	uxth	r2, r2
 8004aae:	b10a      	cbz	r2, 8004ab4 <HAL_SPI_TransmitReceive+0x256>
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	d1b2      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	f012 0f01 	tst.w	r2, #1
 8004abc:	d0dd      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x21c>
 8004abe:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	d0d8      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x21c>
        if (hspi->RxXferCount > 1U)
 8004ac8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004acc:	b292      	uxth	r2, r2
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	d9c6      	bls.n	8004a60 <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ada:	3302      	adds	r3, #2
 8004adc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ade:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004ae2:	3b02      	subs	r3, #2
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004aea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d9ae      	bls.n	8004a52 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8004af4:	2501      	movs	r5, #1
 8004af6:	e7c0      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af8:	464a      	mov	r2, r9
 8004afa:	4641      	mov	r1, r8
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff fceb 	bl	80044d8 <SPI_EndRxTxTransaction>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f43f aec7 	beq.w	8004898 <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e6c2      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
 8004b14:	e6c0      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e6be      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e6bc      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e6ba      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e6b8      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e6b6      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e6ba      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x46>

08004b2e <HAL_SPI_Receive>:
{
 8004b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	4604      	mov	r4, r0
 8004b36:	4688      	mov	r8, r1
 8004b38:	4617      	mov	r7, r2
 8004b3a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3c:	6843      	ldr	r3, [r0, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b42:	d019      	beq.n	8004b78 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8004b44:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f000 80ba 	beq.w	8004cc2 <HAL_SPI_Receive+0x194>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004b54:	f7fd f928 	bl	8001da8 <HAL_GetTick>
 8004b58:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b5a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d015      	beq.n	8004b90 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8004b64:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004b72:	b002      	add	sp, #8
 8004b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b78:	6883      	ldr	r3, [r0, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e2      	bne.n	8004b44 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b7e:	2304      	movs	r3, #4
 8004b80:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b84:	9500      	str	r5, [sp, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	460a      	mov	r2, r1
 8004b8a:	f7ff fe68 	bl	800485e <HAL_SPI_TransmitReceive>
 8004b8e:	e7f0      	b.n	8004b72 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8004b90:	fab7 f387 	clz	r3, r7
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f1b8 0f00 	cmp.w	r8, #0
 8004b9a:	bf08      	it	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 8083 	bne.w	8004caa <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bae:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bb2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bb6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bba:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bbc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004bbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004bc0:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bc2:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bca:	d916      	bls.n	8004bfa <HAL_SPI_Receive+0xcc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	6853      	ldr	r3, [r2, #4]
 8004bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd4:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d013      	beq.n	8004c06 <HAL_SPI_Receive+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004be6:	d103      	bne.n	8004bf0 <HAL_SPI_Receive+0xc2>
    __HAL_SPI_ENABLE(hspi);
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004bf0:	68e3      	ldr	r3, [r4, #12]
 8004bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf6:	d916      	bls.n	8004c26 <HAL_SPI_Receive+0xf8>
 8004bf8:	e035      	b.n	8004c66 <HAL_SPI_Receive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6853      	ldr	r3, [r2, #4]
 8004bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c02:	6053      	str	r3, [r2, #4]
 8004c04:	e7e7      	b.n	8004bd6 <HAL_SPI_Receive+0xa8>
    SPI_1LINE_RX(hspi);
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e7e5      	b.n	8004bde <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c12:	f7fd f8c9 	bl	8001da8 <HAL_GetTick>
 8004c16:	1b80      	subs	r0, r0, r6
 8004c18:	42a8      	cmp	r0, r5
 8004c1a:	d302      	bcc.n	8004c22 <HAL_SPI_Receive+0xf4>
 8004c1c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004c20:	d145      	bne.n	8004cae <HAL_SPI_Receive+0x180>
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	d045      	beq.n	8004cb2 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 8004c26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d030      	beq.n	8004c92 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	f012 0f01 	tst.w	r2, #1
 8004c38:	d0eb      	beq.n	8004c12 <HAL_SPI_Receive+0xe4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c3c:	7b1b      	ldrb	r3, [r3, #12]
 8004c3e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c42:	3301      	adds	r3, #1
 8004c44:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004c46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004c52:	e7e8      	b.n	8004c26 <HAL_SPI_Receive+0xf8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c54:	f7fd f8a8 	bl	8001da8 <HAL_GetTick>
 8004c58:	1b80      	subs	r0, r0, r6
 8004c5a:	42a8      	cmp	r0, r5
 8004c5c:	d302      	bcc.n	8004c64 <HAL_SPI_Receive+0x136>
 8004c5e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004c62:	d128      	bne.n	8004cb6 <HAL_SPI_Receive+0x188>
 8004c64:	b34d      	cbz	r5, 8004cba <HAL_SPI_Receive+0x18c>
    while (hspi->RxXferCount > 0U)
 8004c66:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b18b      	cbz	r3, 8004c92 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	f012 0f01 	tst.w	r2, #1
 8004c76:	d0ed      	beq.n	8004c54 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c80:	3302      	adds	r3, #2
 8004c82:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004c84:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004c90:	e7e9      	b.n	8004c66 <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c92:	4632      	mov	r2, r6
 8004c94:	4629      	mov	r1, r5
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7ff fc51 	bl	800453e <SPI_EndRxTransaction>
 8004c9c:	b108      	cbz	r0, 8004ca2 <HAL_SPI_Receive+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ca4:	b95b      	cbnz	r3, 8004cbe <HAL_SPI_Receive+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e75d      	b.n	8004b66 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8004caa:	2001      	movs	r0, #1
 8004cac:	e75b      	b.n	8004b66 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8004cae:	2003      	movs	r0, #3
 8004cb0:	e759      	b.n	8004b66 <HAL_SPI_Receive+0x38>
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	e757      	b.n	8004b66 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8004cb6:	2003      	movs	r0, #3
 8004cb8:	e755      	b.n	8004b66 <HAL_SPI_Receive+0x38>
 8004cba:	2003      	movs	r0, #3
 8004cbc:	e753      	b.n	8004b66 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e751      	b.n	8004b66 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	e755      	b.n	8004b72 <HAL_SPI_Receive+0x44>
	...

08004cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ccc:	6883      	ldr	r3, [r0, #8]
 8004cce:	6902      	ldr	r2, [r0, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	6942      	ldr	r2, [r0, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	69c2      	ldr	r2, [r0, #28]
 8004cd8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cda:	6801      	ldr	r1, [r0, #0]
 8004cdc:	6808      	ldr	r0, [r1, #0]
 8004cde:	4a99      	ldr	r2, [pc, #612]	; (8004f44 <UART_SetConfig+0x27c>)
 8004ce0:	4002      	ands	r2, r0
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	6853      	ldr	r3, [r2, #4]
 8004cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cee:	68e1      	ldr	r1, [r4, #12]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf4:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8004cf6:	6a23      	ldr	r3, [r4, #32]
 8004cf8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	688b      	ldr	r3, [r1, #8]
 8004cfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	4a8f      	ldr	r2, [pc, #572]	; (8004f48 <UART_SetConfig+0x280>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <UART_SetConfig+0x78>
 8004d0e:	4a8f      	ldr	r2, [pc, #572]	; (8004f4c <UART_SetConfig+0x284>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d028      	beq.n	8004d66 <UART_SetConfig+0x9e>
 8004d14:	4a8e      	ldr	r2, [pc, #568]	; (8004f50 <UART_SetConfig+0x288>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d03d      	beq.n	8004d96 <UART_SetConfig+0xce>
 8004d1a:	4a8e      	ldr	r2, [pc, #568]	; (8004f54 <UART_SetConfig+0x28c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d050      	beq.n	8004dc2 <UART_SetConfig+0xfa>
 8004d20:	4a8d      	ldr	r2, [pc, #564]	; (8004f58 <UART_SetConfig+0x290>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d062      	beq.n	8004dec <UART_SetConfig+0x124>
 8004d26:	4a8d      	ldr	r2, [pc, #564]	; (8004f5c <UART_SetConfig+0x294>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d077      	beq.n	8004e1c <UART_SetConfig+0x154>
 8004d2c:	4a8c      	ldr	r2, [pc, #560]	; (8004f60 <UART_SetConfig+0x298>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	f000 808c 	beq.w	8004e4c <UART_SetConfig+0x184>
 8004d34:	4a8b      	ldr	r2, [pc, #556]	; (8004f64 <UART_SetConfig+0x29c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f000 80a0 	beq.w	8004e7c <UART_SetConfig+0x1b4>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	e0b6      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d809      	bhi.n	8004d62 <UART_SetConfig+0x9a>
 8004d4e:	e8df f003 	tbb	[pc, r3]
 8004d52:	0402      	.short	0x0402
 8004d54:	06ad      	.short	0x06ad
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0a9      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e0a7      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	e0a5      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d62:	2310      	movs	r3, #16
 8004d64:	e0a3      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d66:	4b80      	ldr	r3, [pc, #512]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d80e      	bhi.n	8004d92 <UART_SetConfig+0xca>
 8004d74:	e8df f003 	tbb	[pc, r3]
 8004d78:	0d0d0d07 	.word	0x0d0d0d07
 8004d7c:	0d0d0d09 	.word	0x0d0d0d09
 8004d80:	0d0d0da9 	.word	0x0d0d0da9
 8004d84:	0b          	.byte	0x0b
 8004d85:	00          	.byte	0x00
 8004d86:	2300      	movs	r3, #0
 8004d88:	e091      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d8a:	2304      	movs	r3, #4
 8004d8c:	e08f      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	e08d      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d92:	2310      	movs	r3, #16
 8004d94:	e08b      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004d96:	4b74      	ldr	r3, [pc, #464]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d00a      	beq.n	8004dba <UART_SetConfig+0xf2>
 8004da4:	d906      	bls.n	8004db4 <UART_SetConfig+0xec>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	f000 8091 	beq.w	8004ece <UART_SetConfig+0x206>
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d106      	bne.n	8004dbe <UART_SetConfig+0xf6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	e07c      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004db4:	b91b      	cbnz	r3, 8004dbe <UART_SetConfig+0xf6>
 8004db6:	2300      	movs	r3, #0
 8004db8:	e079      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	e077      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	e075      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004dc2:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d009      	beq.n	8004de4 <UART_SetConfig+0x11c>
 8004dd0:	d905      	bls.n	8004dde <UART_SetConfig+0x116>
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d07d      	beq.n	8004ed2 <UART_SetConfig+0x20a>
 8004dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd8:	d106      	bne.n	8004de8 <UART_SetConfig+0x120>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	e067      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004dde:	b91b      	cbnz	r3, 8004de8 <UART_SetConfig+0x120>
 8004de0:	2300      	movs	r3, #0
 8004de2:	e064      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	e062      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	e060      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004dec:	4b5e      	ldr	r3, [pc, #376]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d00b      	beq.n	8004e14 <UART_SetConfig+0x14c>
 8004dfc:	d907      	bls.n	8004e0e <UART_SetConfig+0x146>
 8004dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e02:	d068      	beq.n	8004ed6 <UART_SetConfig+0x20e>
 8004e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e08:	d106      	bne.n	8004e18 <UART_SetConfig+0x150>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	e04f      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e0e:	b91b      	cbnz	r3, 8004e18 <UART_SetConfig+0x150>
 8004e10:	2300      	movs	r3, #0
 8004e12:	e04c      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	e04a      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	e048      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e1c:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d00b      	beq.n	8004e44 <UART_SetConfig+0x17c>
 8004e2c:	d907      	bls.n	8004e3e <UART_SetConfig+0x176>
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d052      	beq.n	8004eda <UART_SetConfig+0x212>
 8004e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e38:	d106      	bne.n	8004e48 <UART_SetConfig+0x180>
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	e037      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e3e:	b91b      	cbnz	r3, 8004e48 <UART_SetConfig+0x180>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e034      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	e032      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	e030      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d00b      	beq.n	8004e74 <UART_SetConfig+0x1ac>
 8004e5c:	d907      	bls.n	8004e6e <UART_SetConfig+0x1a6>
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	d03c      	beq.n	8004ede <UART_SetConfig+0x216>
 8004e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e68:	d106      	bne.n	8004e78 <UART_SetConfig+0x1b0>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	e01f      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e6e:	b91b      	cbnz	r3, 8004e78 <UART_SetConfig+0x1b0>
 8004e70:	2300      	movs	r3, #0
 8004e72:	e01c      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e74:	2304      	movs	r3, #4
 8004e76:	e01a      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	e018      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <UART_SetConfig+0x2a0>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e8a:	d00b      	beq.n	8004ea4 <UART_SetConfig+0x1dc>
 8004e8c:	d907      	bls.n	8004e9e <UART_SetConfig+0x1d6>
 8004e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e92:	d026      	beq.n	8004ee2 <UART_SetConfig+0x21a>
 8004e94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e98:	d106      	bne.n	8004ea8 <UART_SetConfig+0x1e0>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	e007      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004e9e:	b91b      	cbnz	r3, 8004ea8 <UART_SetConfig+0x1e0>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e004      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	e002      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	e000      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004eac:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	69e2      	ldr	r2, [r4, #28]
 8004eb0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004eb4:	d017      	beq.n	8004ee6 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	f200 80b3 	bhi.w	8005022 <UART_SetConfig+0x35a>
 8004ebc:	e8df f003 	tbb	[pc, r3]
 8004ec0:	b1958b76 	.word	0xb1958b76
 8004ec4:	b1b1b19e 	.word	0xb1b1b19e
 8004ec8:	a8          	.byte	0xa8
 8004ec9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e7ef      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e7ed      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e7eb      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e7e9      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e7e7      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e7e5      	b.n	8004eae <UART_SetConfig+0x1e6>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e7e3      	b.n	8004eae <UART_SetConfig+0x1e6>
    switch (clocksource)
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d85d      	bhi.n	8004fa6 <UART_SetConfig+0x2de>
 8004eea:	e8df f003 	tbb	[pc, r3]
 8004eee:	1f05      	.short	0x1f05
 8004ef0:	5c485c3f 	.word	0x5c485c3f
 8004ef4:	5c5c      	.short	0x5c5c
 8004ef6:	53          	.byte	0x53
 8004ef7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ef8:	f7fe ff14 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8004efc:	6862      	ldr	r2, [r4, #4]
 8004efe:	0853      	lsrs	r3, r2, #1
 8004f00:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f08:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	f1a3 0110 	sub.w	r1, r3, #16
 8004f10:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004f14:	4291      	cmp	r1, r2
 8004f16:	f200 8087 	bhi.w	8005028 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f20:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004f24:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	60d3      	str	r3, [r2, #12]
 8004f2a:	e050      	b.n	8004fce <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f2c:	f7fe ff0a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8004f30:	6862      	ldr	r2, [r4, #4]
 8004f32:	0853      	lsrs	r3, r2, #1
 8004f34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f3c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3e:	2000      	movs	r0, #0
        break;
 8004f40:	e7e4      	b.n	8004f0c <UART_SetConfig+0x244>
 8004f42:	bf00      	nop
 8004f44:	efff69f3 	.word	0xefff69f3
 8004f48:	40011000 	.word	0x40011000
 8004f4c:	40004400 	.word	0x40004400
 8004f50:	40004800 	.word	0x40004800
 8004f54:	40004c00 	.word	0x40004c00
 8004f58:	40005000 	.word	0x40005000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	40007800 	.word	0x40007800
 8004f64:	40007c00 	.word	0x40007c00
 8004f68:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f6c:	6862      	ldr	r2, [r4, #4]
 8004f6e:	4b30      	ldr	r3, [pc, #192]	; (8005030 <UART_SetConfig+0x368>)
 8004f70:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f78:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7a:	2000      	movs	r0, #0
        break;
 8004f7c:	e7c6      	b.n	8004f0c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f7e:	f7fe fdc5 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	0853      	lsrs	r3, r2, #1
 8004f86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f8e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f90:	2000      	movs	r0, #0
        break;
 8004f92:	e7bb      	b.n	8004f0c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f94:	6862      	ldr	r2, [r4, #4]
 8004f96:	0853      	lsrs	r3, r2, #1
 8004f98:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fa0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa2:	2000      	movs	r0, #0
        break;
 8004fa4:	e7b2      	b.n	8004f0c <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8004fa6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e7af      	b.n	8004f0c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fac:	f7fe feba 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6862      	ldr	r2, [r4, #4]
 8004fb2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fbc:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbe:	f1a3 0110 	sub.w	r1, r3, #16
 8004fc2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	d830      	bhi.n	800502c <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004fd2:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004fd4:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fd6:	f7fe feb5 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe6:	2000      	movs	r0, #0
        break;
 8004fe8:	e7e9      	b.n	8004fbe <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <UART_SetConfig+0x36c>)
 8004fee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ff8:	2000      	movs	r0, #0
        break;
 8004ffa:	e7e0      	b.n	8004fbe <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ffc:	f7fe fd86 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8005000:	6862      	ldr	r2, [r4, #4]
 8005002:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005006:	fbb3 f3f2 	udiv	r3, r3, r2
 800500a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800500c:	2000      	movs	r0, #0
        break;
 800500e:	e7d6      	b.n	8004fbe <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005010:	6862      	ldr	r2, [r4, #4]
 8005012:	0853      	lsrs	r3, r2, #1
 8005014:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005018:	fbb3 f3f2 	udiv	r3, r3, r2
 800501c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800501e:	2000      	movs	r0, #0
        break;
 8005020:	e7cd      	b.n	8004fbe <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8005022:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005024:	2300      	movs	r3, #0
 8005026:	e7ca      	b.n	8004fbe <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8005028:	2001      	movs	r0, #1
 800502a:	e7d0      	b.n	8004fce <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 800502c:	2001      	movs	r0, #1
 800502e:	e7ce      	b.n	8004fce <UART_SetConfig+0x306>
 8005030:	01e84800 	.word	0x01e84800
 8005034:	00f42400 	.word	0x00f42400

08005038 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800503a:	f013 0f01 	tst.w	r3, #1
 800503e:	d006      	beq.n	800504e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005040:	6802      	ldr	r2, [r0, #0]
 8005042:	6853      	ldr	r3, [r2, #4]
 8005044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005048:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800504a:	430b      	orrs	r3, r1
 800504c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800504e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005050:	f013 0f02 	tst.w	r3, #2
 8005054:	d006      	beq.n	8005064 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005056:	6802      	ldr	r2, [r0, #0]
 8005058:	6853      	ldr	r3, [r2, #4]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005060:	430b      	orrs	r3, r1
 8005062:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005066:	f013 0f04 	tst.w	r3, #4
 800506a:	d006      	beq.n	800507a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800506c:	6802      	ldr	r2, [r0, #0]
 800506e:	6853      	ldr	r3, [r2, #4]
 8005070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005074:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005076:	430b      	orrs	r3, r1
 8005078:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800507c:	f013 0f08 	tst.w	r3, #8
 8005080:	d006      	beq.n	8005090 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	6802      	ldr	r2, [r0, #0]
 8005084:	6853      	ldr	r3, [r2, #4]
 8005086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800508a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800508c:	430b      	orrs	r3, r1
 800508e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005092:	f013 0f10 	tst.w	r3, #16
 8005096:	d006      	beq.n	80050a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005098:	6802      	ldr	r2, [r0, #0]
 800509a:	6893      	ldr	r3, [r2, #8]
 800509c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050a8:	f013 0f20 	tst.w	r3, #32
 80050ac:	d006      	beq.n	80050bc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ae:	6802      	ldr	r2, [r0, #0]
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c4:	6802      	ldr	r2, [r0, #0]
 80050c6:	6853      	ldr	r3, [r2, #4]
 80050c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d8:	d00b      	beq.n	80050f2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050e0:	d006      	beq.n	80050f0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e2:	6802      	ldr	r2, [r0, #0]
 80050e4:	6853      	ldr	r3, [r2, #4]
 80050e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80050ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6053      	str	r3, [r2, #4]
  }
}
 80050f0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f2:	6802      	ldr	r2, [r0, #0]
 80050f4:	6853      	ldr	r3, [r2, #4]
 80050f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050fa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6053      	str	r3, [r2, #4]
 8005100:	e7eb      	b.n	80050da <UART_AdvFeatureConfig+0xa2>

08005102 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	4605      	mov	r5, r0
 8005108:	460f      	mov	r7, r1
 800510a:	4616      	mov	r6, r2
 800510c:	4698      	mov	r8, r3
 800510e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	ea37 0303 	bics.w	r3, r7, r3
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	42b3      	cmp	r3, r6
 8005120:	d11c      	bne.n	800515c <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005126:	d0f3      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fc fe3e 	bl	8001da8 <HAL_GetTick>
 800512c:	eba0 0008 	sub.w	r0, r0, r8
 8005130:	42a0      	cmp	r0, r4
 8005132:	d801      	bhi.n	8005138 <UART_WaitOnFlagUntilTimeout+0x36>
 8005134:	2c00      	cmp	r4, #0
 8005136:	d1eb      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005138:	682a      	ldr	r2, [r5, #0]
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005140:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	682a      	ldr	r2, [r5, #0]
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800514c:	2320      	movs	r3, #32
 800514e:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005150:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005152:	2300      	movs	r3, #0
 8005154:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8005158:	2003      	movs	r0, #3
 800515a:	e000      	b.n	800515e <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 800515c:	2000      	movs	r0, #0
}
 800515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005162 <HAL_UART_Transmit>:
{
 8005162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800516a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800516c:	2b20      	cmp	r3, #32
 800516e:	d159      	bne.n	8005224 <HAL_UART_Transmit+0xc2>
 8005170:	4604      	mov	r4, r0
 8005172:	460d      	mov	r5, r1
 8005174:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005176:	fab2 f382 	clz	r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2900      	cmp	r1, #0
 800517e:	bf08      	it	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d153      	bne.n	800522e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005186:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800518a:	2b01      	cmp	r3, #1
 800518c:	d051      	beq.n	8005232 <HAL_UART_Transmit+0xd0>
 800518e:	2301      	movs	r3, #1
 8005190:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	2300      	movs	r3, #0
 8005196:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005198:	2321      	movs	r3, #33	; 0x21
 800519a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800519c:	f7fc fe04 	bl	8001da8 <HAL_GetTick>
 80051a0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80051a2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80051a6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b0:	d002      	beq.n	80051b8 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	e010      	b.n	80051da <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	b30b      	cbz	r3, 8005200 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	e00b      	b.n	80051da <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051cc:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80051ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051da:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80051de:	b29b      	uxth	r3, r3
 80051e0:	b18b      	cbz	r3, 8005206 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	9600      	str	r6, [sp, #0]
 80051e4:	463b      	mov	r3, r7
 80051e6:	2200      	movs	r2, #0
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff ff89 	bl	8005102 <UART_WaitOnFlagUntilTimeout>
 80051f0:	bb08      	cbnz	r0, 8005236 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80051f2:	2d00      	cmp	r5, #0
 80051f4:	d0e5      	beq.n	80051c2 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	629a      	str	r2, [r3, #40]	; 0x28
 80051fe:	e7e6      	b.n	80051ce <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 8005200:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005202:	2500      	movs	r5, #0
 8005204:	e7e9      	b.n	80051da <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	9600      	str	r6, [sp, #0]
 8005208:	463b      	mov	r3, r7
 800520a:	2200      	movs	r2, #0
 800520c:	2140      	movs	r1, #64	; 0x40
 800520e:	4620      	mov	r0, r4
 8005210:	f7ff ff77 	bl	8005102 <UART_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	b980      	cbnz	r0, 800523a <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8005218:	2220      	movs	r2, #32
 800521a:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800521c:	2200      	movs	r2, #0
 800521e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8005222:	e000      	b.n	8005226 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
}
 8005226:	4618      	mov	r0, r3
 8005228:	b002      	add	sp, #8
 800522a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e7f9      	b.n	8005226 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8005232:	2302      	movs	r3, #2
 8005234:	e7f7      	b.n	8005226 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e7f5      	b.n	8005226 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e7f3      	b.n	8005226 <HAL_UART_Transmit+0xc4>

0800523e <UART_CheckIdleState>:
{
 800523e:	b510      	push	{r4, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	2300      	movs	r3, #0
 8005246:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005248:	f7fc fdae 	bl	8001da8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	f012 0f08 	tst.w	r2, #8
 8005254:	d107      	bne.n	8005266 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8005256:	2320      	movs	r3, #32
 8005258:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800525a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800525c:	2000      	movs	r0, #0
 800525e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005262:	b002      	add	sp, #8
 8005264:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4603      	mov	r3, r0
 800526e:	2200      	movs	r2, #0
 8005270:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff ff44 	bl	8005102 <UART_WaitOnFlagUntilTimeout>
 800527a:	2800      	cmp	r0, #0
 800527c:	d0eb      	beq.n	8005256 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800527e:	2003      	movs	r0, #3
 8005280:	e7ef      	b.n	8005262 <UART_CheckIdleState+0x24>

08005282 <HAL_UART_Init>:
  if (huart == NULL)
 8005282:	b368      	cbz	r0, 80052e0 <HAL_UART_Init+0x5e>
{
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005288:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800528a:	b303      	cbz	r3, 80052ce <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	2324      	movs	r3, #36	; 0x24
 800528e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff fd14 	bl	8004cc8 <UART_SetConfig>
 80052a0:	2801      	cmp	r0, #1
 80052a2:	d013      	beq.n	80052cc <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a6:	b9bb      	cbnz	r3, 80052d8 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	6853      	ldr	r3, [r2, #4]
 80052ac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80052b0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	6893      	ldr	r3, [r2, #8]
 80052b6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80052ba:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80052bc:	6822      	ldr	r2, [r4, #0]
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7ff ffb9 	bl	800523e <UART_CheckIdleState>
}
 80052cc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80052ce:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80052d2:	f001 fffd 	bl	80072d0 <HAL_UART_MspInit>
 80052d6:	e7d9      	b.n	800528c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80052d8:	4620      	mov	r0, r4
 80052da:	f7ff fead 	bl	8005038 <UART_AdvFeatureConfig>
 80052de:	e7e3      	b.n	80052a8 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
}
 80052e2:	4770      	bx	lr

080052e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80052e4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80052e6:	680b      	ldr	r3, [r1, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d018      	beq.n	800531e <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80052ec:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <FMC_SDRAM_Init+0x70>)
 80052f0:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052f2:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 80052f4:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052f6:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 80052f8:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 80052fa:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 80052fc:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 80052fe:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005300:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005302:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005304:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005306:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005308:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800530a:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800530c:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800530e:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005310:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005312:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005314:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005316:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005318:	2000      	movs	r0, #0
 800531a:	bc30      	pop	{r4, r5}
 800531c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800531e:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005320:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005324:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005326:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005328:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800532a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800532c:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800532e:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005330:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005332:	4c08      	ldr	r4, [pc, #32]	; (8005354 <FMC_SDRAM_Init+0x70>)
 8005334:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005336:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8005338:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800533a:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 800533c:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 800533e:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8005340:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8005342:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8005344:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8005346:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8005348:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 800534a:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800534c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800534e:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005350:	6043      	str	r3, [r0, #4]
 8005352:	e7e1      	b.n	8005318 <FMC_SDRAM_Init+0x34>
 8005354:	ffff8000 	.word	0xffff8000

08005358 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005358:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800535a:	2a01      	cmp	r2, #1
 800535c:	d021      	beq.n	80053a2 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800535e:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005360:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005364:	680b      	ldr	r3, [r1, #0]
 8005366:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005368:	684c      	ldr	r4, [r1, #4]
 800536a:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800536c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005370:	688c      	ldr	r4, [r1, #8]
 8005372:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005374:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005378:	68cc      	ldr	r4, [r1, #12]
 800537a:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800537c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005380:	690c      	ldr	r4, [r1, #16]
 8005382:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005384:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8005388:	694c      	ldr	r4, [r1, #20]
 800538a:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800538c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8005390:	6989      	ldr	r1, [r1, #24]
 8005392:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005394:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005398:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800539a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800539c:	2000      	movs	r0, #0
 800539e:	bc30      	pop	{r4, r5}
 80053a0:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80053a2:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80053a4:	4c11      	ldr	r4, [pc, #68]	; (80053ec <FMC_SDRAM_Timing_Init+0x94>)
 80053a6:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80053a8:	68ca      	ldr	r2, [r1, #12]
 80053aa:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 80053ac:	694b      	ldr	r3, [r1, #20]
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80053b2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80053b6:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80053b8:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80053ba:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80053be:	680b      	ldr	r3, [r1, #0]
 80053c0:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80053c2:	684d      	ldr	r5, [r1, #4]
 80053c4:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80053c6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80053ca:	688d      	ldr	r5, [r1, #8]
 80053cc:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80053ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80053d2:	690d      	ldr	r5, [r1, #16]
 80053d4:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80053d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 80053da:	6989      	ldr	r1, [r1, #24]
 80053dc:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80053de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80053e2:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80053e4:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80053e6:	60c3      	str	r3, [r0, #12]
 80053e8:	e7d8      	b.n	800539c <FMC_SDRAM_Timing_Init+0x44>
 80053ea:	bf00      	nop
 80053ec:	ff0f0fff 	.word	0xff0f0fff

080053f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053f0:	b410      	push	{r4}
 80053f2:	b083      	sub	sp, #12
 80053f4:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80053f6:	2000      	movs	r0, #0
 80053f8:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053fa:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80053fc:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053fe:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8005404:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8005408:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800540a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800540e:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8005414:	b003      	add	sp, #12
 8005416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541a:	4770      	bx	lr

0800541c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800541c:	6943      	ldr	r3, [r0, #20]
 800541e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005422:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005424:	2000      	movs	r0, #0
 8005426:	4770      	bx	lr

08005428 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8005428:	4770      	bx	lr

0800542a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800542a:	2000      	movs	r0, #0
 800542c:	4770      	bx	lr

0800542e <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 800542e:	4770      	bx	lr

08005430 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8005430:	4b01      	ldr	r3, [pc, #4]	; (8005438 <ft5336_Get_I2C_InitializedStatus+0x8>)
 8005432:	7818      	ldrb	r0, [r3, #0]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000338 	.word	0x20000338

0800543c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800543c:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800543e:	f7ff fff7 	bl	8005430 <ft5336_Get_I2C_InitializedStatus>
 8005442:	b100      	cbz	r0, 8005446 <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8005444:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8005446:	f000 fa09 	bl	800585c <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800544a:	4b02      	ldr	r3, [pc, #8]	; (8005454 <ft5336_I2C_InitializeIfRequired+0x18>)
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
}
 8005450:	e7f8      	b.n	8005444 <ft5336_I2C_InitializeIfRequired+0x8>
 8005452:	bf00      	nop
 8005454:	20000338 	.word	0x20000338

08005458 <ft5336_Init>:
{
 8005458:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 800545a:	20c8      	movs	r0, #200	; 0xc8
 800545c:	f000 fa2e 	bl	80058bc <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8005460:	f7ff ffec 	bl	800543c <ft5336_I2C_InitializeIfRequired>
}
 8005464:	bd08      	pop	{r3, pc}

08005466 <ft5336_ReadID>:
{
 8005466:	b570      	push	{r4, r5, r6, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 800546c:	2400      	movs	r4, #0
 800546e:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8005472:	f7ff ffe3 	bl	800543c <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8005476:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005478:	e001      	b.n	800547e <ft5336_ReadID+0x18>
 800547a:	3401      	adds	r4, #1
 800547c:	b2e4      	uxtb	r4, r4
 800547e:	f085 0301 	eor.w	r3, r5, #1
 8005482:	2c02      	cmp	r4, #2
 8005484:	bf8c      	ite	hi
 8005486:	2300      	movhi	r3, #0
 8005488:	f003 0301 	andls.w	r3, r3, #1
 800548c:	b163      	cbz	r3, 80054a8 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800548e:	21a8      	movs	r1, #168	; 0xa8
 8005490:	b2f0      	uxtb	r0, r6
 8005492:	f000 f9fd 	bl	8005890 <TS_IO_Read>
 8005496:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800549a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b51      	cmp	r3, #81	; 0x51
 80054a2:	d1ea      	bne.n	800547a <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 80054a4:	2501      	movs	r5, #1
 80054a6:	e7e8      	b.n	800547a <ft5336_ReadID+0x14>
  return (ucReadId);
 80054a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80054ac:	b002      	add	sp, #8
 80054ae:	bd70      	pop	{r4, r5, r6, pc}

080054b0 <ft5336_TS_DetectTouch>:
{
 80054b0:	b500      	push	{lr}
 80054b2:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80054ba:	2102      	movs	r1, #2
 80054bc:	b2c0      	uxtb	r0, r0
 80054be:	f000 f9e7 	bl	8005890 <TS_IO_Read>
 80054c2:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80054c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80054d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d902      	bls.n	80054e2 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80054e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80054e6:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <ft5336_TS_DetectTouch+0x48>)
 80054e8:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80054ea:	2200      	movs	r2, #0
 80054ec:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80054ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80054f2:	b003      	add	sp, #12
 80054f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80054f8:	20000338 	.word	0x20000338

080054fc <ft5336_TS_GetXY>:
{
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005508:	4d4f      	ldr	r5, [pc, #316]	; (8005648 <ft5336_TS_GetXY+0x14c>)
 800550a:	78ab      	ldrb	r3, [r5, #2]
 800550c:	786c      	ldrb	r4, [r5, #1]
 800550e:	42a3      	cmp	r3, r4
 8005510:	f080 8096 	bcs.w	8005640 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 8005514:	2b09      	cmp	r3, #9
 8005516:	d806      	bhi.n	8005526 <ft5336_TS_GetXY+0x2a>
 8005518:	e8df f003 	tbb	[pc, r3]
 800551c:	1b130b53 	.word	0x1b130b53
 8005520:	3b332b23 	.word	0x3b332b23
 8005524:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 8005526:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 800552a:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 800552c:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 800552e:	4643      	mov	r3, r8
 8005530:	e04e      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 8005532:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8005536:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 800553a:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 800553e:	230a      	movs	r3, #10
      break;
 8005540:	e046      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 8005542:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8005546:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 800554a:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 800554e:	2310      	movs	r3, #16
      break;
 8005550:	e03e      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 8005552:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8005556:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 800555a:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 800555e:	2316      	movs	r3, #22
      break;
 8005560:	e036      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 8005562:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8005566:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 800556a:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 800556e:	231c      	movs	r3, #28
      break;
 8005570:	e02e      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 8005572:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8005576:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 800557a:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 800557e:	2322      	movs	r3, #34	; 0x22
      break;
 8005580:	e026      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 8005582:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8005586:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 800558a:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 800558e:	2328      	movs	r3, #40	; 0x28
      break;
 8005590:	e01e      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 8005592:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8005596:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 800559a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 800559e:	232e      	movs	r3, #46	; 0x2e
      break;
 80055a0:	e016      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 80055a2:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 80055a6:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 80055aa:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 80055ae:	2334      	movs	r3, #52	; 0x34
      break;
 80055b0:	e00e      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 80055b2:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 80055b6:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 80055ba:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 80055be:	233a      	movs	r3, #58	; 0x3a
      break;
 80055c0:	e006      	b.n	80055d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 80055c2:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 80055c6:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 80055ca:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 80055ce:	2304      	movs	r3, #4
 80055d0:	4616      	mov	r6, r2
 80055d2:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80055d4:	b2c4      	uxtb	r4, r0
 80055d6:	4619      	mov	r1, r3
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f959 	bl	8005890 <TS_IO_Read>
 80055de:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80055e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055e6:	4d19      	ldr	r5, [pc, #100]	; (800564c <ft5336_TS_GetXY+0x150>)
 80055e8:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80055ea:	4651      	mov	r1, sl
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 f94f 	bl	8005890 <TS_IO_Read>
 80055f2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80055f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005600:	882a      	ldrh	r2, [r5, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	802b      	strh	r3, [r5, #0]
    *X = coord;
 8005606:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005608:	4649      	mov	r1, r9
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f940 	bl	8005890 <TS_IO_Read>
 8005610:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005614:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005618:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800561a:	4641      	mov	r1, r8
 800561c:	4620      	mov	r0, r4
 800561e:	f000 f937 	bl	8005890 <TS_IO_Read>
 8005622:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005630:	882a      	ldrh	r2, [r5, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 8005636:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005638:	4a03      	ldr	r2, [pc, #12]	; (8005648 <ft5336_TS_GetXY+0x14c>)
 800563a:	7893      	ldrb	r3, [r2, #2]
 800563c:	3301      	adds	r3, #1
 800563e:	7093      	strb	r3, [r2, #2]
}
 8005640:	b002      	add	sp, #8
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	bf00      	nop
 8005648:	20000338 	.word	0x20000338
 800564c:	20000336 	.word	0x20000336

08005650 <ft5336_TS_EnableIT>:
{
 8005650:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005652:	2201      	movs	r2, #1
 8005654:	21a4      	movs	r1, #164	; 0xa4
 8005656:	b2c0      	uxtb	r0, r0
 8005658:	f000 f908 	bl	800586c <TS_IO_Write>
}
 800565c:	bd08      	pop	{r3, pc}

0800565e <ft5336_TS_DisableIT>:
{
 800565e:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005660:	2200      	movs	r2, #0
 8005662:	21a4      	movs	r1, #164	; 0xa4
 8005664:	b2c0      	uxtb	r0, r0
 8005666:	f000 f901 	bl	800586c <TS_IO_Write>
}
 800566a:	bd08      	pop	{r3, pc}

0800566c <ft5336_TS_Start>:
{
 800566c:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 800566e:	f7ff fff6 	bl	800565e <ft5336_TS_DisableIT>
}
 8005672:	bd08      	pop	{r3, pc}

08005674 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005678:	4b44      	ldr	r3, [pc, #272]	; (800578c <I2Cx_MspInit+0x118>)
 800567a:	4283      	cmp	r3, r0
 800567c:	d043      	beq.n	8005706 <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800567e:	4c44      	ldr	r4, [pc, #272]	; (8005790 <I2Cx_MspInit+0x11c>)
 8005680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	6323      	str	r3, [r4, #48]	; 0x30
 8005688:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005696:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005698:	2312      	movs	r3, #18
 800569a:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800569c:	2500      	movs	r5, #0
 800569e:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80056a0:	2302      	movs	r3, #2
 80056a2:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80056a4:	2304      	movs	r3, #4
 80056a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80056a8:	4e3a      	ldr	r6, [pc, #232]	; (8005794 <I2Cx_MspInit+0x120>)
 80056aa:	a905      	add	r1, sp, #20
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7fd f98f 	bl	80029d0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80056b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80056b8:	a905      	add	r1, sp, #20
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7fd f988 	bl	80029d0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80056c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056c6:	6423      	str	r3, [r4, #64]	; 0x40
 80056c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80056d2:	6a23      	ldr	r3, [r4, #32]
 80056d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056d8:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80056da:	6a23      	ldr	r3, [r4, #32]
 80056dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056e0:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80056e2:	462a      	mov	r2, r5
 80056e4:	210f      	movs	r1, #15
 80056e6:	201f      	movs	r0, #31
 80056e8:	f7fc fe16 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80056ec:	201f      	movs	r0, #31
 80056ee:	f7fc fe45 	bl	800237c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80056f2:	462a      	mov	r2, r5
 80056f4:	210f      	movs	r1, #15
 80056f6:	2020      	movs	r0, #32
 80056f8:	f7fc fe0e 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80056fc:	2020      	movs	r0, #32
 80056fe:	f7fc fe3d 	bl	800237c <HAL_NVIC_EnableIRQ>
  }
}
 8005702:	b00a      	add	sp, #40	; 0x28
 8005704:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005706:	4c22      	ldr	r4, [pc, #136]	; (8005790 <I2Cx_MspInit+0x11c>)
 8005708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570e:	6323      	str	r3, [r4, #48]	; 0x30
 8005710:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800571e:	2312      	movs	r3, #18
 8005720:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005722:	2500      	movs	r5, #0
 8005724:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005726:	2302      	movs	r3, #2
 8005728:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800572a:	2304      	movs	r3, #4
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800572e:	4e1a      	ldr	r6, [pc, #104]	; (8005798 <I2Cx_MspInit+0x124>)
 8005730:	a905      	add	r1, sp, #20
 8005732:	4630      	mov	r0, r6
 8005734:	f7fd f94c 	bl	80029d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800573c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800573e:	a905      	add	r1, sp, #20
 8005740:	4630      	mov	r0, r6
 8005742:	f7fd f945 	bl	80029d0 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800574c:	6423      	str	r3, [r4, #64]	; 0x40
 800574e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005758:	6a23      	ldr	r3, [r4, #32]
 800575a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800575e:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005760:	6a23      	ldr	r3, [r4, #32]
 8005762:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005766:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005768:	462a      	mov	r2, r5
 800576a:	210f      	movs	r1, #15
 800576c:	2048      	movs	r0, #72	; 0x48
 800576e:	f7fc fdd3 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005772:	2048      	movs	r0, #72	; 0x48
 8005774:	f7fc fe02 	bl	800237c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005778:	462a      	mov	r2, r5
 800577a:	210f      	movs	r1, #15
 800577c:	2049      	movs	r0, #73	; 0x49
 800577e:	f7fc fdcb 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005782:	2049      	movs	r0, #73	; 0x49
 8005784:	f7fc fdfa 	bl	800237c <HAL_NVIC_EnableIRQ>
 8005788:	e7bb      	b.n	8005702 <I2Cx_MspInit+0x8e>
 800578a:	bf00      	nop
 800578c:	2000033c 	.word	0x2000033c
 8005790:	40023800 	.word	0x40023800
 8005794:	40020400 	.word	0x40020400
 8005798:	40021c00 	.word	0x40021c00

0800579c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80057a0:	f7fd fda2 	bl	80032e8 <HAL_I2C_GetState>
 80057a4:	b9a0      	cbnz	r0, 80057d0 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <I2Cx_Init+0x3c>)
 80057a8:	429c      	cmp	r4, r3
 80057aa:	d012      	beq.n	80057d2 <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <I2Cx_Init+0x40>)
 80057ae:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <I2Cx_Init+0x44>)
 80057b2:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80057b8:	2201      	movs	r2, #1
 80057ba:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80057bc:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80057be:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80057c0:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80057c2:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff ff55 	bl	8005674 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7fd fb60 	bl	8002e90 <HAL_I2C_Init>
  }
}
 80057d0:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <I2Cx_Init+0x48>)
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	e7eb      	b.n	80057b0 <I2Cx_Init+0x14>
 80057d8:	2000033c 	.word	0x2000033c
 80057dc:	40005400 	.word	0x40005400
 80057e0:	40912732 	.word	0x40912732
 80057e4:	40005c00 	.word	0x40005c00

080057e8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80057ec:	f7fd fbaf 	bl	8002f4e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff ffd3 	bl	800579c <I2Cx_Init>
}
 80057f6:	bd10      	pop	{r4, pc}

080057f8 <I2Cx_WriteMultiple>:
{
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	4606      	mov	r6, r0
 80057fe:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005804:	9102      	str	r1, [sp, #8]
 8005806:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800580a:	9101      	str	r1, [sp, #4]
 800580c:	9908      	ldr	r1, [sp, #32]
 800580e:	9100      	str	r1, [sp, #0]
 8005810:	4621      	mov	r1, r4
 8005812:	f7fd fbb5 	bl	8002f80 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8005816:	4605      	mov	r5, r0
 8005818:	b910      	cbnz	r0, 8005820 <I2Cx_WriteMultiple+0x28>
}
 800581a:	4628      	mov	r0, r5
 800581c:	b004      	add	sp, #16
 800581e:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8005820:	4621      	mov	r1, r4
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff ffe0 	bl	80057e8 <I2Cx_Error>
 8005828:	e7f7      	b.n	800581a <I2Cx_WriteMultiple+0x22>

0800582a <I2Cx_ReadMultiple>:
{
 800582a:	b570      	push	{r4, r5, r6, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	4606      	mov	r6, r0
 8005830:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005832:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005836:	9102      	str	r1, [sp, #8]
 8005838:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800583c:	9101      	str	r1, [sp, #4]
 800583e:	9908      	ldr	r1, [sp, #32]
 8005840:	9100      	str	r1, [sp, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	f7fd fc74 	bl	8003130 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8005848:	4605      	mov	r5, r0
 800584a:	b910      	cbnz	r0, 8005852 <I2Cx_ReadMultiple+0x28>
}
 800584c:	4628      	mov	r0, r5
 800584e:	b004      	add	sp, #16
 8005850:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8005852:	4621      	mov	r1, r4
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff ffc7 	bl	80057e8 <I2Cx_Error>
 800585a:	e7f7      	b.n	800584c <I2Cx_ReadMultiple+0x22>

0800585c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800585c:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 800585e:	4802      	ldr	r0, [pc, #8]	; (8005868 <TS_IO_Init+0xc>)
 8005860:	f7ff ff9c 	bl	800579c <I2Cx_Init>
}
 8005864:	bd08      	pop	{r3, pc}
 8005866:	bf00      	nop
 8005868:	2000033c 	.word	0x2000033c

0800586c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800586c:	b510      	push	{r4, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	ac04      	add	r4, sp, #16
 8005872:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005876:	2301      	movs	r3, #1
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	9400      	str	r4, [sp, #0]
 800587c:	460a      	mov	r2, r1
 800587e:	4601      	mov	r1, r0
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <TS_IO_Write+0x20>)
 8005882:	f7ff ffb9 	bl	80057f8 <I2Cx_WriteMultiple>
}
 8005886:	b004      	add	sp, #16
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	2000033c 	.word	0x2000033c

08005890 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005890:	b500      	push	{lr}
 8005892:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 8005894:	aa04      	add	r2, sp, #16
 8005896:	2300      	movs	r3, #0
 8005898:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800589c:	2301      	movs	r3, #1
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	9200      	str	r2, [sp, #0]
 80058a2:	460a      	mov	r2, r1
 80058a4:	4601      	mov	r1, r0
 80058a6:	4804      	ldr	r0, [pc, #16]	; (80058b8 <TS_IO_Read+0x28>)
 80058a8:	f7ff ffbf 	bl	800582a <I2Cx_ReadMultiple>

  return read_value;
}
 80058ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80058b0:	b005      	add	sp, #20
 80058b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80058b6:	bf00      	nop
 80058b8:	2000033c 	.word	0x2000033c

080058bc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80058bc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80058be:	f7fc fa79 	bl	8001db4 <HAL_Delay>
}
 80058c2:	bd08      	pop	{r3, pc}

080058c4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	b083      	sub	sp, #12
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	4616      	mov	r6, r2
 80058ce:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <LL_FillBuffer+0x70>)
 80058d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80058d6:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80058d8:	4b17      	ldr	r3, [pc, #92]	; (8005938 <LL_FillBuffer+0x74>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a17      	ldr	r2, [pc, #92]	; (800593c <LL_FillBuffer+0x78>)
 80058de:	2134      	movs	r1, #52	; 0x34
 80058e0:	fb01 2303 	mla	r3, r1, r3, r2
 80058e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d00c      	beq.n	8005904 <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <LL_FillBuffer+0x70>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80058f0:	4810      	ldr	r0, [pc, #64]	; (8005934 <LL_FillBuffer+0x70>)
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80058f6:	4b12      	ldr	r3, [pc, #72]	; (8005940 <LL_FillBuffer+0x7c>)
 80058f8:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80058fa:	f7fc ff1d 	bl	8002738 <HAL_DMA2D_Init>
 80058fe:	b128      	cbz	r0, 800590c <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 8005900:	b003      	add	sp, #12
 8005902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <LL_FillBuffer+0x70>)
 8005906:	2202      	movs	r2, #2
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	e7f1      	b.n	80058f0 <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800590c:	4621      	mov	r1, r4
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <LL_FillBuffer+0x70>)
 8005910:	f7fc fffc 	bl	800290c <HAL_DMA2D_ConfigLayer>
 8005914:	2800      	cmp	r0, #0
 8005916:	d1f3      	bne.n	8005900 <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005918:	9700      	str	r7, [sp, #0]
 800591a:	4633      	mov	r3, r6
 800591c:	462a      	mov	r2, r5
 800591e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005920:	4804      	ldr	r0, [pc, #16]	; (8005934 <LL_FillBuffer+0x70>)
 8005922:	f7fc ff37 	bl	8002794 <HAL_DMA2D_Start>
 8005926:	2800      	cmp	r0, #0
 8005928:	d1ea      	bne.n	8005900 <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800592a:	210a      	movs	r1, #10
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <LL_FillBuffer+0x70>)
 800592e:	f7fc ff4d 	bl	80027cc <HAL_DMA2D_PollForTransfer>
}
 8005932:	e7e5      	b.n	8005900 <LL_FillBuffer+0x3c>
 8005934:	200003a4 	.word	0x200003a4
 8005938:	20000388 	.word	0x20000388
 800593c:	20000544 	.word	0x20000544
 8005940:	4002b000 	.word	0x4002b000

08005944 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <BSP_LCD_GetXSize+0x10>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a03      	ldr	r2, [pc, #12]	; (8005958 <BSP_LCD_GetXSize+0x14>)
 800594a:	2134      	movs	r1, #52	; 0x34
 800594c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8005950:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005952:	4770      	bx	lr
 8005954:	20000388 	.word	0x20000388
 8005958:	20000544 	.word	0x20000544

0800595c <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <BSP_LCD_GetYSize+0x10>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a03      	ldr	r2, [pc, #12]	; (8005970 <BSP_LCD_GetYSize+0x14>)
 8005962:	2134      	movs	r1, #52	; 0x34
 8005964:	fb01 2303 	mla	r3, r1, r3, r2
}
 8005968:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800596a:	4770      	bx	lr
 800596c:	20000388 	.word	0x20000388
 8005970:	20000544 	.word	0x20000544

08005974 <BSP_LCD_LayerDefaultInit>:
{     
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	4605      	mov	r5, r0
 800597a:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 800597c:	2400      	movs	r4, #0
 800597e:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8005980:	f7ff ffe0 	bl	8005944 <BSP_LCD_GetXSize>
 8005984:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 8005986:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005988:	f7ff ffe8 	bl	800595c <BSP_LCD_GetYSize>
 800598c:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800598e:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8005990:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8005992:	23ff      	movs	r3, #255	; 0xff
 8005994:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 8005996:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8005998:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 800599c:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 80059a0:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80059a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80059a8:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80059aa:	2307      	movs	r3, #7
 80059ac:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80059ae:	f7ff ffc9 	bl	8005944 <BSP_LCD_GetXSize>
 80059b2:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80059b4:	f7ff ffd2 	bl	800595c <BSP_LCD_GetYSize>
 80059b8:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80059ba:	462a      	mov	r2, r5
 80059bc:	a901      	add	r1, sp, #4
 80059be:	480a      	ldr	r0, [pc, #40]	; (80059e8 <BSP_LCD_LayerDefaultInit+0x74>)
 80059c0:	f7fd fe4a 	bl	8003658 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <BSP_LCD_LayerDefaultInit+0x78>)
 80059c6:	0068      	lsls	r0, r5, #1
 80059c8:	1941      	adds	r1, r0, r5
 80059ca:	008b      	lsls	r3, r1, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059d2:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80059d4:	4906      	ldr	r1, [pc, #24]	; (80059f0 <BSP_LCD_LayerDefaultInit+0x7c>)
 80059d6:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80059d8:	4428      	add	r0, r5
 80059da:	0083      	lsls	r3, r0, #2
 80059dc:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80059e0:	50d1      	str	r1, [r2, r3]
}
 80059e2:	b00e      	add	sp, #56	; 0x38
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	bf00      	nop
 80059e8:	20000544 	.word	0x20000544
 80059ec:	2000038c 	.word	0x2000038c
 80059f0:	20000010 	.word	0x20000010

080059f4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80059f4:	4b01      	ldr	r3, [pc, #4]	; (80059fc <BSP_LCD_SelectLayer+0x8>)
 80059f6:	6018      	str	r0, [r3, #0]
} 
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000388 	.word	0x20000388

08005a00 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <BSP_LCD_SetTextColor+0x10>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <BSP_LCD_SetTextColor+0x14>)
 8005a0c:	5098      	str	r0, [r3, r2]
}
 8005a0e:	4770      	bx	lr
 8005a10:	20000388 	.word	0x20000388
 8005a14:	2000038c 	.word	0x2000038c

08005a18 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <BSP_LCD_SetBackColor+0x14>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a20:	009a      	lsls	r2, r3, #2
 8005a22:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <BSP_LCD_SetBackColor+0x18>)
 8005a24:	4413      	add	r3, r2
 8005a26:	6058      	str	r0, [r3, #4]
}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000388 	.word	0x20000388
 8005a30:	2000038c 	.word	0x2000038c

08005a34 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <BSP_LCD_SetFont+0x14>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a3c:	009a      	lsls	r2, r3, #2
 8005a3e:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <BSP_LCD_SetFont+0x18>)
 8005a40:	4413      	add	r3, r2
 8005a42:	6098      	str	r0, [r3, #8]
}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000388 	.word	0x20000388
 8005a4c:	2000038c 	.word	0x2000038c

08005a50 <BSP_LCD_Clear>:
{ 
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	b083      	sub	sp, #12
 8005a54:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <BSP_LCD_Clear+0x34>)
 8005a58:	681c      	ldr	r4, [r3, #0]
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <BSP_LCD_Clear+0x38>)
 8005a5c:	2334      	movs	r3, #52	; 0x34
 8005a5e:	fb03 2304 	mla	r3, r3, r4, r2
 8005a62:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8005a64:	f7ff ff6e 	bl	8005944 <BSP_LCD_GetXSize>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	f7ff ff77 	bl	800595c <BSP_LCD_GetYSize>
 8005a6e:	9701      	str	r7, [sp, #4]
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	4632      	mov	r2, r6
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff ff22 	bl	80058c4 <LL_FillBuffer>
}
 8005a80:	b003      	add	sp, #12
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a84:	20000388 	.word	0x20000388
 8005a88:	20000544 	.word	0x20000544

08005a8c <BSP_LCD_DrawPixel>:
{
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <BSP_LCD_DrawPixel+0x4c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4910      	ldr	r1, [pc, #64]	; (8005adc <BSP_LCD_DrawPixel+0x50>)
 8005a9a:	2234      	movs	r2, #52	; 0x34
 8005a9c:	fb02 1203 	mla	r2, r2, r3, r1
 8005aa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005aa2:	2a02      	cmp	r2, #2
 8005aa4:	d00b      	beq.n	8005abe <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <BSP_LCD_DrawPixel+0x50>)
 8005aa8:	2134      	movs	r1, #52	; 0x34
 8005aaa:	fb01 2303 	mla	r3, r1, r3, r2
 8005aae:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8005ab0:	f7ff ff48 	bl	8005944 <BSP_LCD_GetXSize>
 8005ab4:	fb00 6004 	mla	r0, r0, r4, r6
 8005ab8:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005abe:	460a      	mov	r2, r1
 8005ac0:	2134      	movs	r1, #52	; 0x34
 8005ac2:	fb01 2303 	mla	r3, r1, r3, r2
 8005ac6:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8005ac8:	f7ff ff3c 	bl	8005944 <BSP_LCD_GetXSize>
 8005acc:	fb00 6004 	mla	r0, r0, r4, r6
 8005ad0:	b2ad      	uxth	r5, r5
 8005ad2:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 8005ad6:	e7f1      	b.n	8005abc <BSP_LCD_DrawPixel+0x30>
 8005ad8:	20000388 	.word	0x20000388
 8005adc:	20000544 	.word	0x20000544

08005ae0 <DrawChar>:
{
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	4681      	mov	r9, r0
 8005ae8:	460f      	mov	r7, r1
 8005aea:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8005aec:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <DrawChar+0xe0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005af4:	009a      	lsls	r2, r3, #2
 8005af6:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <DrawChar+0xe4>)
 8005af8:	4413      	add	r3, r2
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	88da      	ldrh	r2, [r3, #6]
 8005afe:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005b00:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8005b02:	f105 0b07 	add.w	fp, r5, #7
 8005b06:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8005b0a:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8005b0e:	fa5f f888 	uxtb.w	r8, r8
 8005b12:	b2eb      	uxtb	r3, r5
 8005b14:	eba8 0803 	sub.w	r8, r8, r3
 8005b18:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8005b1c:	f04f 0a00 	mov.w	sl, #0
 8005b20:	e034      	b.n	8005b8c <DrawChar+0xac>
      line =  pchar[0];      
 8005b22:	9a00      	ldr	r2, [sp, #0]
 8005b24:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 8005b26:	2400      	movs	r4, #0
 8005b28:	e014      	b.n	8005b54 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 8005b2a:	9900      	ldr	r1, [sp, #0]
 8005b2c:	5ccb      	ldrb	r3, [r1, r3]
 8005b2e:	7856      	ldrb	r6, [r2, #1]
 8005b30:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 8005b34:	e7f7      	b.n	8005b26 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <DrawChar+0xe0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b3e:	009a      	lsls	r2, r3, #2
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <DrawChar+0xe4>)
 8005b42:	4413      	add	r3, r2
 8005b44:	eb09 0004 	add.w	r0, r9, r4
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	b280      	uxth	r0, r0
 8005b4e:	f7ff ff9d 	bl	8005a8c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005b52:	3401      	adds	r4, #1
 8005b54:	42a5      	cmp	r5, r4
 8005b56:	d915      	bls.n	8005b84 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8005b58:	1b2b      	subs	r3, r5, r4
 8005b5a:	4443      	add	r3, r8
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	2201      	movs	r2, #1
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	4233      	tst	r3, r6
 8005b66:	d0e6      	beq.n	8005b36 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <DrawChar+0xe0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b70:	009a      	lsls	r2, r3, #2
 8005b72:	eb09 0004 	add.w	r0, r9, r4
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <DrawChar+0xe4>)
 8005b78:	589a      	ldr	r2, [r3, r2]
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	b280      	uxth	r0, r0
 8005b7e:	f7ff ff85 	bl	8005a8c <BSP_LCD_DrawPixel>
 8005b82:	e7e6      	b.n	8005b52 <DrawChar+0x72>
    Ypos++;
 8005b84:	3701      	adds	r7, #1
 8005b86:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 8005b88:	f10a 0a01 	add.w	sl, sl, #1
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	4553      	cmp	r3, sl
 8005b90:	d912      	bls.n	8005bb8 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005b92:	fb0a f30b 	mul.w	r3, sl, fp
 8005b96:	9a00      	ldr	r2, [sp, #0]
 8005b98:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8005b9a:	f1bb 0f01 	cmp.w	fp, #1
 8005b9e:	d0c0      	beq.n	8005b22 <DrawChar+0x42>
 8005ba0:	f1bb 0f02 	cmp.w	fp, #2
 8005ba4:	d0c1      	beq.n	8005b2a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005ba6:	9900      	ldr	r1, [sp, #0]
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	7856      	ldrb	r6, [r2, #1]
 8005bac:	0236      	lsls	r6, r6, #8
 8005bae:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8005bb2:	7893      	ldrb	r3, [r2, #2]
 8005bb4:	431e      	orrs	r6, r3
      break;
 8005bb6:	e7b6      	b.n	8005b26 <DrawChar+0x46>
}
 8005bb8:	b003      	add	sp, #12
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000388 	.word	0x20000388
 8005bc4:	2000038c 	.word	0x2000038c

08005bc8 <BSP_LCD_DisplayChar>:
{
 8005bc8:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <BSP_LCD_DisplayChar+0x30>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005bd2:	009c      	lsls	r4, r3, #2
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <BSP_LCD_DisplayChar+0x34>)
 8005bd6:	4423      	add	r3, r4
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005be0:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005be2:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005be6:	889b      	ldrh	r3, [r3, #4]
 8005be8:	3307      	adds	r3, #7
 8005bea:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005bec:	fb03 4202 	mla	r2, r3, r2, r4
 8005bf0:	f7ff ff76 	bl	8005ae0 <DrawChar>
}
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000388 	.word	0x20000388
 8005bfc:	2000038c 	.word	0x2000038c

08005c00 <BSP_LCD_DisplayStringAt>:
{
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4605      	mov	r5, r0
 8005c06:	4688      	mov	r8, r1
 8005c08:	4616      	mov	r6, r2
 8005c0a:	461f      	mov	r7, r3
  uint8_t  *ptr = Text;
 8005c0c:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 8005c0e:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8005c10:	e001      	b.n	8005c16 <BSP_LCD_DisplayStringAt+0x16>
 8005c12:	3401      	adds	r4, #1
 8005c14:	4613      	mov	r3, r2
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f9      	bne.n	8005c12 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005c1e:	f7ff fe91 	bl	8005944 <BSP_LCD_GetXSize>
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <BSP_LCD_DisplayStringAt+0xc8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c2a:	009a      	lsls	r2, r3, #2
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <BSP_LCD_DisplayStringAt+0xcc>)
 8005c2e:	4413      	add	r3, r2
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	889a      	ldrh	r2, [r3, #4]
 8005c34:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8005c38:	2f01      	cmp	r7, #1
 8005c3a:	d006      	beq.n	8005c4a <BSP_LCD_DisplayStringAt+0x4a>
 8005c3c:	2f02      	cmp	r7, #2
 8005c3e:	d00c      	beq.n	8005c5a <BSP_LCD_DisplayStringAt+0x5a>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005c40:	b22b      	sxth	r3, r5
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	dd3d      	ble.n	8005cc2 <BSP_LCD_DisplayStringAt+0xc2>
    ref_column = 1;
 8005c46:	2400      	movs	r4, #0
 8005c48:	e021      	b.n	8005c8e <BSP_LCD_DisplayStringAt+0x8e>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005c4a:	1b04      	subs	r4, r0, r4
 8005c4c:	fb04 f302 	mul.w	r3, r4, r2
 8005c50:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8005c54:	441d      	add	r5, r3
 8005c56:	b2ad      	uxth	r5, r5
      break;
 8005c58:	e7f2      	b.n	8005c40 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005c5a:	1b03      	subs	r3, r0, r4
 8005c5c:	fb13 f302 	smulbb	r3, r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	1b5d      	subs	r5, r3, r5
 8005c64:	b2ad      	uxth	r5, r5
      break;
 8005c66:	e7eb      	b.n	8005c40 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005c68:	463a      	mov	r2, r7
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7ff ffab 	bl	8005bc8 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <BSP_LCD_DisplayStringAt+0xc8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c7a:	009a      	lsls	r2, r3, #2
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <BSP_LCD_DisplayStringAt+0xcc>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	889b      	ldrh	r3, [r3, #4]
 8005c84:	441d      	add	r5, r3
 8005c86:	b2ad      	uxth	r5, r5
    Text++;
 8005c88:	3601      	adds	r6, #1
    i++;
 8005c8a:	3401      	adds	r4, #1
 8005c8c:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005c8e:	7837      	ldrb	r7, [r6, #0]
 8005c90:	f7ff fe58 	bl	8005944 <BSP_LCD_GetXSize>
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <BSP_LCD_DisplayStringAt+0xc8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c9c:	009a      	lsls	r2, r3, #2
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <BSP_LCD_DisplayStringAt+0xcc>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	889b      	ldrh	r3, [r3, #4]
 8005ca6:	fb03 0014 	mls	r0, r3, r4, r0
 8005caa:	b280      	uxth	r0, r0
 8005cac:	4298      	cmp	r0, r3
 8005cae:	bf34      	ite	cc
 8005cb0:	2000      	movcc	r0, #0
 8005cb2:	2001      	movcs	r0, #1
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	bf08      	it	eq
 8005cb8:	2000      	moveq	r0, #0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d1d4      	bne.n	8005c68 <BSP_LCD_DisplayStringAt+0x68>
}
 8005cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 8005cc2:	2501      	movs	r5, #1
 8005cc4:	e7bf      	b.n	8005c46 <BSP_LCD_DisplayStringAt+0x46>
 8005cc6:	bf00      	nop
 8005cc8:	20000388 	.word	0x20000388
 8005ccc:	2000038c 	.word	0x2000038c

08005cd0 <BSP_LCD_DisplayOn>:
{
 8005cd0:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <BSP_LCD_DisplayOn+0x28>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	6993      	ldr	r3, [r2, #24]
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ce4:	4805      	ldr	r0, [pc, #20]	; (8005cfc <BSP_LCD_DisplayOn+0x2c>)
 8005ce6:	f7fc ff6a 	bl	8002bbe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005cea:	2201      	movs	r2, #1
 8005cec:	2108      	movs	r1, #8
 8005cee:	4804      	ldr	r0, [pc, #16]	; (8005d00 <BSP_LCD_DisplayOn+0x30>)
 8005cf0:	f7fc ff65 	bl	8002bbe <HAL_GPIO_WritePin>
}
 8005cf4:	bd08      	pop	{r3, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000544 	.word	0x20000544
 8005cfc:	40022000 	.word	0x40022000
 8005d00:	40022800 	.word	0x40022800

08005d04 <BSP_LCD_MspInit>:
{
 8005d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d06:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <BSP_LCD_MspInit+0x130>)
 8005d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
 8005d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d14:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005d18:	9200      	str	r2, [sp, #0]
 8005d1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
 8005d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d26:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d30:	f042 0210 	orr.w	r2, r2, #16
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
 8005d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d38:	f002 0210 	and.w	r2, r2, #16
 8005d3c:	9202      	str	r2, [sp, #8]
 8005d3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
 8005d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005d4e:	9203      	str	r2, [sp, #12]
 8005d50:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005d60:	9204      	str	r2, [sp, #16]
 8005d62:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005d72:	9205      	str	r2, [sp, #20]
 8005d74:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d80:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005d84:	9206      	str	r2, [sp, #24]
 8005d86:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005d96:	9207      	str	r2, [sp, #28]
 8005d98:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005dac:	2310      	movs	r3, #16
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005db0:	2402      	movs	r4, #2
 8005db2:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005db8:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005dba:	250e      	movs	r5, #14
 8005dbc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005dbe:	a909      	add	r1, sp, #36	; 0x24
 8005dc0:	481d      	ldr	r0, [pc, #116]	; (8005e38 <BSP_LCD_MspInit+0x134>)
 8005dc2:	f7fc fe05 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005dc6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8005dca:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005dcc:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005dce:	2309      	movs	r3, #9
 8005dd0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005dd2:	a909      	add	r1, sp, #36	; 0x24
 8005dd4:	4819      	ldr	r0, [pc, #100]	; (8005e3c <BSP_LCD_MspInit+0x138>)
 8005dd6:	f7fc fdfb 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005dda:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005de0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005de2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005de4:	4e16      	ldr	r6, [pc, #88]	; (8005e40 <BSP_LCD_MspInit+0x13c>)
 8005de6:	a909      	add	r1, sp, #36	; 0x24
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7fc fdf1 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005dee:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005df4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005df6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005df8:	a909      	add	r1, sp, #36	; 0x24
 8005dfa:	4812      	ldr	r0, [pc, #72]	; (8005e44 <BSP_LCD_MspInit+0x140>)
 8005dfc:	f7fc fde8 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005e00:	23f7      	movs	r3, #247	; 0xf7
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005e04:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005e06:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005e08:	4c0f      	ldr	r4, [pc, #60]	; (8005e48 <BSP_LCD_MspInit+0x144>)
 8005e0a:	a909      	add	r1, sp, #36	; 0x24
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7fc fddf 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005e12:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005e14:	2501      	movs	r5, #1
 8005e16:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005e18:	a909      	add	r1, sp, #36	; 0x24
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7fc fdd8 	bl	80029d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005e20:	2308      	movs	r3, #8
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005e24:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005e26:	a909      	add	r1, sp, #36	; 0x24
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fc fdd1 	bl	80029d0 <HAL_GPIO_Init>
}
 8005e2e:	b00f      	add	sp, #60	; 0x3c
 8005e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40021800 	.word	0x40021800
 8005e40:	40022000 	.word	0x40022000
 8005e44:	40022400 	.word	0x40022400
 8005e48:	40022800 	.word	0x40022800

08005e4c <BSP_LCD_ClockConfig>:
{
 8005e4c:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005e4e:	4806      	ldr	r0, [pc, #24]	; (8005e68 <BSP_LCD_ClockConfig+0x1c>)
 8005e50:	2308      	movs	r3, #8
 8005e52:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005e54:	23c0      	movs	r3, #192	; 0xc0
 8005e56:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005e58:	2305      	movs	r3, #5
 8005e5a:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e60:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005e62:	f7fd ff7f 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
}
 8005e66:	bd08      	pop	{r3, pc}
 8005e68:	200003e4 	.word	0x200003e4

08005e6c <BSP_LCD_Init>:
{    
 8005e6c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8005e6e:	4c25      	ldr	r4, [pc, #148]	; (8005f04 <BSP_LCD_Init+0x98>)
 8005e70:	2328      	movs	r3, #40	; 0x28
 8005e72:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8005e74:	2309      	movs	r3, #9
 8005e76:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005e78:	2335      	movs	r3, #53	; 0x35
 8005e7a:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005e7c:	230b      	movs	r3, #11
 8005e7e:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005e80:	f240 131b 	movw	r3, #283	; 0x11b
 8005e84:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005e86:	f240 2315 	movw	r3, #533	; 0x215
 8005e8a:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8005e8c:	f240 131d 	movw	r3, #285	; 0x11d
 8005e90:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005e92:	f240 2335 	movw	r3, #565	; 0x235
 8005e96:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff ffd6 	bl	8005e4c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005ea0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005ea4:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005ea6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005eaa:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005eb2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005eb6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005eba:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8005ebc:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005ebe:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005ec0:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <BSP_LCD_Init+0x9c>)
 8005ec4:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7fd fbf4 	bl	80036b4 <HAL_LTDC_GetState>
 8005ecc:	b1a0      	cbz	r0, 8005ef8 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 8005ece:	480d      	ldr	r0, [pc, #52]	; (8005f04 <BSP_LCD_Init+0x98>)
 8005ed0:	f7fd fad8 	bl	8003484 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eda:	480c      	ldr	r0, [pc, #48]	; (8005f0c <BSP_LCD_Init+0xa0>)
 8005edc:	f7fc fe6f 	bl	8002bbe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	2108      	movs	r1, #8
 8005ee4:	480a      	ldr	r0, [pc, #40]	; (8005f10 <BSP_LCD_Init+0xa4>)
 8005ee6:	f7fc fe6a 	bl	8002bbe <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8005eea:	f000 f921 	bl	8006130 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005eee:	4809      	ldr	r0, [pc, #36]	; (8005f14 <BSP_LCD_Init+0xa8>)
 8005ef0:	f7ff fda0 	bl	8005a34 <BSP_LCD_SetFont>
}
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7ff ff02 	bl	8005d04 <BSP_LCD_MspInit>
 8005f00:	e7e5      	b.n	8005ece <BSP_LCD_Init+0x62>
 8005f02:	bf00      	nop
 8005f04:	20000544 	.word	0x20000544
 8005f08:	40016800 	.word	0x40016800
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40022800 	.word	0x40022800
 8005f14:	20000010 	.word	0x20000010

08005f18 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8005f20:	f04f 0800 	mov.w	r8, #0
 8005f24:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005f28:	4c20      	ldr	r4, [pc, #128]	; (8005fac <BSP_SDRAM_Initialization_sequence+0x94>)
 8005f2a:	2601      	movs	r6, #1
 8005f2c:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005f2e:	2710      	movs	r7, #16
 8005f30:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8005f32:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8005f34:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005f38:	4d1d      	ldr	r5, [pc, #116]	; (8005fb0 <BSP_SDRAM_Initialization_sequence+0x98>)
 8005f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4628      	mov	r0, r5
 8005f42:	f7fe fa04 	bl	800434e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7fb ff34 	bl	8001db4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005f50:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8005f52:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8005f54:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7fe f9f5 	bl	800434e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005f64:	2303      	movs	r3, #3
 8005f66:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005f68:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8005f6e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7fe f9e8 	bl	800434e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005f7e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005f82:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005f84:	2304      	movs	r3, #4
 8005f86:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005f88:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8005f8a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f94:	4621      	mov	r1, r4
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7fe f9d9 	bl	800434e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f7fe f9f2 	bl	8004388 <HAL_SDRAM_ProgramRefreshRate>
}
 8005fa4:	b003      	add	sp, #12
 8005fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005faa:	bf00      	nop
 8005fac:	20000468 	.word	0x20000468
 8005fb0:	200005ec 	.word	0x200005ec

08005fb4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fba:	4b54      	ldr	r3, [pc, #336]	; (800610c <BSP_SDRAM_MspInit+0x158>)
 8005fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc6:	f002 0201 	and.w	r2, r2, #1
 8005fca:	9201      	str	r2, [sp, #4]
 8005fcc:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005fdc:	9202      	str	r2, [sp, #8]
 8005fde:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	f042 0204 	orr.w	r2, r2, #4
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fea:	f002 0204 	and.w	r2, r2, #4
 8005fee:	9203      	str	r2, [sp, #12]
 8005ff0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff4:	f042 0208 	orr.w	r2, r2, #8
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8005ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffc:	f002 0208 	and.w	r2, r2, #8
 8006000:	9204      	str	r2, [sp, #16]
 8006002:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006006:	f042 0210 	orr.w	r2, r2, #16
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
 800600c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600e:	f002 0210 	and.w	r2, r2, #16
 8006012:	9205      	str	r2, [sp, #20]
 8006014:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	f042 0220 	orr.w	r2, r2, #32
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
 800601e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006020:	f002 0220 	and.w	r2, r2, #32
 8006024:	9206      	str	r2, [sp, #24]
 8006026:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
 8006030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006032:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006036:	9207      	str	r2, [sp, #28]
 8006038:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800603a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	9308      	str	r3, [sp, #32]
 800604a:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800604c:	2302      	movs	r3, #2
 800604e:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006050:	2201      	movs	r2, #1
 8006052:	920b      	str	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006054:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006056:	230c      	movs	r3, #12
 8006058:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800605a:	ac0e      	add	r4, sp, #56	; 0x38
 800605c:	2308      	movs	r3, #8
 800605e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006062:	4621      	mov	r1, r4
 8006064:	482a      	ldr	r0, [pc, #168]	; (8006110 <BSP_SDRAM_MspInit+0x15c>)
 8006066:	f7fc fcb3 	bl	80029d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800606a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800606e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006070:	4621      	mov	r1, r4
 8006072:	4828      	ldr	r0, [pc, #160]	; (8006114 <BSP_SDRAM_MspInit+0x160>)
 8006074:	f7fc fcac 	bl	80029d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006078:	f64f 7383 	movw	r3, #65411	; 0xff83
 800607c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800607e:	4621      	mov	r1, r4
 8006080:	4825      	ldr	r0, [pc, #148]	; (8006118 <BSP_SDRAM_MspInit+0x164>)
 8006082:	f7fc fca5 	bl	80029d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006086:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800608a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800608c:	4621      	mov	r1, r4
 800608e:	4823      	ldr	r0, [pc, #140]	; (800611c <BSP_SDRAM_MspInit+0x168>)
 8006090:	f7fc fc9e 	bl	80029d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006094:	f248 1333 	movw	r3, #33075	; 0x8133
 8006098:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800609a:	4621      	mov	r1, r4
 800609c:	4820      	ldr	r0, [pc, #128]	; (8006120 <BSP_SDRAM_MspInit+0x16c>)
 800609e:	f7fc fc97 	bl	80029d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80060a2:	2328      	movs	r3, #40	; 0x28
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80060a6:	4621      	mov	r1, r4
 80060a8:	481e      	ldr	r0, [pc, #120]	; (8006124 <BSP_SDRAM_MspInit+0x170>)
 80060aa:	f7fc fc91 	bl	80029d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80060ae:	4c1e      	ldr	r4, [pc, #120]	; (8006128 <BSP_SDRAM_MspInit+0x174>)
 80060b0:	2500      	movs	r5, #0
 80060b2:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80060b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060bc:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80060be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c2:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c8:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80060ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060ce:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80060d0:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80060d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d6:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80060d8:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80060da:	2303      	movs	r3, #3
 80060dc:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80060de:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80060e0:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <BSP_SDRAM_MspInit+0x178>)
 80060e4:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80060e6:	6334      	str	r4, [r6, #48]	; 0x30
 80060e8:	63a6      	str	r6, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7fc faaa 	bl	8002644 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7fc fa41 	bl	8002578 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80060f6:	462a      	mov	r2, r5
 80060f8:	210f      	movs	r1, #15
 80060fa:	2038      	movs	r0, #56	; 0x38
 80060fc:	f7fc f90c 	bl	8002318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006100:	2038      	movs	r0, #56	; 0x38
 8006102:	f7fc f93b 	bl	800237c <HAL_NVIC_EnableIRQ>
}
 8006106:	b00e      	add	sp, #56	; 0x38
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	40020800 	.word	0x40020800
 8006114:	40020c00 	.word	0x40020c00
 8006118:	40021000 	.word	0x40021000
 800611c:	40021400 	.word	0x40021400
 8006120:	40021800 	.word	0x40021800
 8006124:	40021c00 	.word	0x40021c00
 8006128:	20000494 	.word	0x20000494
 800612c:	40026410 	.word	0x40026410

08006130 <BSP_SDRAM_Init>:
{ 
 8006130:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006132:	4c1b      	ldr	r4, [pc, #108]	; (80061a0 <BSP_SDRAM_Init+0x70>)
 8006134:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <BSP_SDRAM_Init+0x74>)
 8006136:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8006138:	4d1b      	ldr	r5, [pc, #108]	; (80061a8 <BSP_SDRAM_Init+0x78>)
 800613a:	2302      	movs	r3, #2
 800613c:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800613e:	2107      	movs	r1, #7
 8006140:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 8006142:	2204      	movs	r2, #4
 8006144:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 8006146:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 8006148:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800614a:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800614c:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800614e:	2100      	movs	r1, #0
 8006150:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006152:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006154:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006156:	2310      	movs	r3, #16
 8006158:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800615e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006162:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006164:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800616a:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800616c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006170:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006172:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ff1d 	bl	8005fb4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800617a:	4629      	mov	r1, r5
 800617c:	4620      	mov	r0, r4
 800617e:	f7fe f8c7 	bl	8004310 <HAL_SDRAM_Init>
 8006182:	b948      	cbnz	r0, 8006198 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_OK;
 8006184:	4b09      	ldr	r3, [pc, #36]	; (80061ac <BSP_SDRAM_Init+0x7c>)
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800618a:	f240 6003 	movw	r0, #1539	; 0x603
 800618e:	f7ff fec3 	bl	8005f18 <BSP_SDRAM_Initialization_sequence>
}
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <BSP_SDRAM_Init+0x7c>)
 8006194:	7818      	ldrb	r0, [r3, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_ERROR;
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <BSP_SDRAM_Init+0x7c>)
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e7f4      	b.n	800618a <BSP_SDRAM_Init+0x5a>
 80061a0:	200005ec 	.word	0x200005ec
 80061a4:	a0000140 	.word	0xa0000140
 80061a8:	20000478 	.word	0x20000478
 80061ac:	20000040 	.word	0x20000040

080061b0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80061b0:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80061b2:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <BSP_TS_Init+0x38>)
 80061b4:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <BSP_TS_Init+0x3c>)
 80061b8:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80061ba:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <BSP_TS_Init+0x40>)
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	2070      	movs	r0, #112	; 0x70
 80061c0:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	2070      	movs	r0, #112	; 0x70
 80061c6:	4798      	blx	r3
 80061c8:	2851      	cmp	r0, #81	; 0x51
 80061ca:	d10b      	bne.n	80061e4 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <BSP_TS_Init+0x44>)
 80061ce:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80061d0:	2070      	movs	r0, #112	; 0x70
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <BSP_TS_Init+0x48>)
 80061d4:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 80061d6:	4a09      	ldr	r2, [pc, #36]	; (80061fc <BSP_TS_Init+0x4c>)
 80061d8:	2108      	movs	r1, #8
 80061da:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	4798      	blx	r3
  uint8_t status = TS_OK;
 80061e0:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80061e2:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 80061e4:	2003      	movs	r0, #3
 80061e6:	e7fc      	b.n	80061e2 <BSP_TS_Init+0x32>
 80061e8:	200004fe 	.word	0x200004fe
 80061ec:	20000500 	.word	0x20000500
 80061f0:	20000018 	.word	0x20000018
 80061f4:	200004f8 	.word	0x200004f8
 80061f8:	200004f4 	.word	0x200004f4
 80061fc:	200004fc 	.word	0x200004fc

08006200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006204:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006206:	2400      	movs	r4, #0
 8006208:	940b      	str	r4, [sp, #44]	; 0x2c
 800620a:	940c      	str	r4, [sp, #48]	; 0x30
 800620c:	940d      	str	r4, [sp, #52]	; 0x34
 800620e:	940e      	str	r4, [sp, #56]	; 0x38
 8006210:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006212:	4b56      	ldr	r3, [pc, #344]	; (800636c <MX_GPIO_Init+0x16c>)
 8006214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006216:	f042 0210 	orr.w	r2, r2, #16
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	f002 0210 	and.w	r2, r2, #16
 8006222:	9200      	str	r2, [sp, #0]
 8006224:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006228:	f042 0202 	orr.w	r2, r2, #2
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
 800622e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006230:	f002 0202 	and.w	r2, r2, #2
 8006234:	9201      	str	r2, [sp, #4]
 8006236:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
 8006240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006242:	f002 0201 	and.w	r2, r2, #1
 8006246:	9202      	str	r2, [sp, #8]
 8006248:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
 8006252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006254:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006258:	9203      	str	r2, [sp, #12]
 800625a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800625c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
 8006264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006266:	f002 0208 	and.w	r2, r2, #8
 800626a:	9204      	str	r2, [sp, #16]
 800626c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800626e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
 8006276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006278:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800627c:	9205      	str	r2, [sp, #20]
 800627e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
 8006288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800628e:	9206      	str	r2, [sp, #24]
 8006290:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006294:	f042 0220 	orr.w	r2, r2, #32
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
 800629a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629c:	f002 0220 	and.w	r2, r2, #32
 80062a0:	9207      	str	r2, [sp, #28]
 80062a2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80062a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
 80062ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80062b2:	9208      	str	r2, [sp, #32]
 80062b4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b8:	f042 0204 	orr.w	r2, r2, #4
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
 80062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c0:	f002 0204 	and.w	r2, r2, #4
 80062c4:	9209      	str	r2, [sp, #36]	; 0x24
 80062c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80062c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80062da:	4f25      	ldr	r7, [pc, #148]	; (8006370 <MX_GPIO_Init+0x170>)
 80062dc:	4622      	mov	r2, r4
 80062de:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7fc fc6b 	bl	8002bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 80062e8:	2310      	movs	r3, #16
 80062ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062ec:	4e21      	ldr	r6, [pc, #132]	; (8006374 <MX_GPIO_Init+0x174>)
 80062ee:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062f0:	2501      	movs	r5, #1
 80062f2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 80062f4:	a90b      	add	r1, sp, #44	; 0x2c
 80062f6:	4820      	ldr	r0, [pc, #128]	; (8006378 <MX_GPIO_Init+0x178>)
 80062f8:	f7fc fb6a 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80062fc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8006300:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006302:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006306:	2303      	movs	r3, #3
 8006308:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630a:	a90b      	add	r1, sp, #44	; 0x2c
 800630c:	4638      	mov	r0, r7
 800630e:	f7fc fb5f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC3_B_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 8006312:	230d      	movs	r3, #13
 8006314:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006316:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006318:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800631a:	a90b      	add	r1, sp, #44	; 0x2c
 800631c:	4817      	ldr	r0, [pc, #92]	; (800637c <MX_GPIO_Init+0x17c>)
 800631e:	f7fc fb57 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 8006322:	2740      	movs	r7, #64	; 0x40
 8006324:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006326:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006328:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 800632a:	a90b      	add	r1, sp, #44	; 0x2c
 800632c:	4814      	ldr	r0, [pc, #80]	; (8006380 <MX_GPIO_Init+0x180>)
 800632e:	f7fc fb4f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8006332:	f04f 0880 	mov.w	r8, #128	; 0x80
 8006336:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800633a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800633c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 800633e:	a90b      	add	r1, sp, #44	; 0x2c
 8006340:	4810      	ldr	r0, [pc, #64]	; (8006384 <MX_GPIO_Init+0x184>)
 8006342:	f7fc fb45 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 8006346:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800634a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800634c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 800634e:	a90b      	add	r1, sp, #44	; 0x2c
 8006350:	480d      	ldr	r0, [pc, #52]	; (8006388 <MX_GPIO_Init+0x188>)
 8006352:	f7fc fb3d 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 8006356:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006358:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635a:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 800635c:	a90b      	add	r1, sp, #44	; 0x2c
 800635e:	480b      	ldr	r0, [pc, #44]	; (800638c <MX_GPIO_Init+0x18c>)
 8006360:	f7fc fb36 	bl	80029d0 <HAL_GPIO_Init>

}
 8006364:	b010      	add	sp, #64	; 0x40
 8006366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636a:	bf00      	nop
 800636c:	40023800 	.word	0x40023800
 8006370:	40020000 	.word	0x40020000
 8006374:	10110000 	.word	0x10110000
 8006378:	40020400 	.word	0x40020400
 800637c:	40022000 	.word	0x40022000
 8006380:	40020800 	.word	0x40020800
 8006384:	40021800 	.word	0x40021800
 8006388:	40021400 	.word	0x40021400
 800638c:	40021c00 	.word	0x40021c00

08006390 <MX_SPI2_Init>:
{
 8006390:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8006392:	480e      	ldr	r0, [pc, #56]	; (80063cc <MX_SPI2_Init+0x3c>)
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <MX_SPI2_Init+0x40>)
 8006396:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006398:	f44f 7382 	mov.w	r3, #260	; 0x104
 800639c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800639e:	2300      	movs	r3, #0
 80063a0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80063a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80063a6:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063a8:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063aa:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80063ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b0:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80063b2:	2220      	movs	r2, #32
 80063b4:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063b6:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80063b8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ba:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80063bc:	2207      	movs	r2, #7
 80063be:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80063c0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80063c2:	2308      	movs	r3, #8
 80063c4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80063c6:	f7fe f8fe 	bl	80045c6 <HAL_SPI_Init>
}
 80063ca:	bd08      	pop	{r3, pc}
 80063cc:	20000620 	.word	0x20000620
 80063d0:	40003800 	.word	0x40003800

080063d4 <MX_USART1_UART_Init>:
{
 80063d4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80063d6:	4809      	ldr	r0, [pc, #36]	; (80063fc <MX_USART1_UART_Init+0x28>)
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <MX_USART1_UART_Init+0x2c>)
 80063da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80063dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80063e0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80063e2:	2300      	movs	r3, #0
 80063e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80063e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80063e8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80063ea:	220c      	movs	r2, #12
 80063ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80063f0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063f2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063f4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80063f6:	f7fe ff44 	bl	8005282 <HAL_UART_Init>
}
 80063fa:	bd08      	pop	{r3, pc}
 80063fc:	20000814 	.word	0x20000814
 8006400:	40011000 	.word	0x40011000

08006404 <MX_ADC3_Init>:
{
 8006404:	b530      	push	{r4, r5, lr}
 8006406:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	9303      	str	r3, [sp, #12]
  hadc3.Instance = ADC3;
 8006412:	4c11      	ldr	r4, [pc, #68]	; (8006458 <MX_ADC3_Init+0x54>)
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <MX_ADC3_Init+0x58>)
 8006416:	6022      	str	r2, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800641c:	6062      	str	r2, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800641e:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8006420:	6123      	str	r3, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006422:	61a3      	str	r3, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006424:	f884 3020 	strb.w	r3, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006428:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800642a:	4a0d      	ldr	r2, [pc, #52]	; (8006460 <MX_ADC3_Init+0x5c>)
 800642c:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800642e:	60e3      	str	r3, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8006430:	2501      	movs	r5, #1
 8006432:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006434:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006438:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800643a:	4620      	mov	r0, r4
 800643c:	f7fb fd68 	bl	8001f10 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_8;
 8006440:	2308      	movs	r3, #8
 8006442:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006444:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006446:	2303      	movs	r3, #3
 8006448:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800644a:	4669      	mov	r1, sp
 800644c:	4620      	mov	r0, r4
 800644e:	f7fb fe7b 	bl	8002148 <HAL_ADC_ConfigChannel>
}
 8006452:	b005      	add	sp, #20
 8006454:	bd30      	pop	{r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	200007cc 	.word	0x200007cc
 800645c:	40012200 	.word	0x40012200
 8006460:	0f000001 	.word	0x0f000001

08006464 <MX_CRC_Init>:
{
 8006464:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8006466:	4806      	ldr	r0, [pc, #24]	; (8006480 <MX_CRC_Init+0x1c>)
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <MX_CRC_Init+0x20>)
 800646a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800646c:	2300      	movs	r3, #0
 800646e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006470:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006472:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006474:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006476:	2301      	movs	r3, #1
 8006478:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800647a:	f7fb ffa3 	bl	80023c4 <HAL_CRC_Init>
}
 800647e:	bd08      	pop	{r3, pc}
 8006480:	200006a4 	.word	0x200006a4
 8006484:	40023000 	.word	0x40023000

08006488 <MX_DMA2D_Init>:
{
 8006488:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 800648a:	4c09      	ldr	r4, [pc, #36]	; (80064b0 <MX_DMA2D_Init+0x28>)
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <MX_DMA2D_Init+0x2c>)
 800648e:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006490:	2300      	movs	r3, #0
 8006492:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006494:	60a3      	str	r3, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8006496:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006498:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800649a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800649c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800649e:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7fc f949 	bl	8002738 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80064a6:	2101      	movs	r1, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7fc fa2f 	bl	800290c <HAL_DMA2D_ConfigLayer>
}
 80064ae:	bd10      	pop	{r4, pc}
 80064b0:	200008bc 	.word	0x200008bc
 80064b4:	4002b000 	.word	0x4002b000

080064b8 <MX_FMC_Init>:
{
 80064b8:	b500      	push	{lr}
 80064ba:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80064bc:	480e      	ldr	r0, [pc, #56]	; (80064f8 <MX_FMC_Init+0x40>)
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <MX_FMC_Init+0x44>)
 80064c0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80064c2:	2200      	movs	r2, #0
 80064c4:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80064c6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80064c8:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80064ca:	2310      	movs	r3, #16
 80064cc:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80064ce:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80064d4:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80064d6:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80064d8:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80064da:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 80064dc:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80064de:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 80064e0:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 80064e2:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80064e4:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 80064e6:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 80064e8:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80064ea:	a901      	add	r1, sp, #4
 80064ec:	f7fd ff10 	bl	8004310 <HAL_SDRAM_Init>
}
 80064f0:	b009      	add	sp, #36	; 0x24
 80064f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80064f6:	bf00      	nop
 80064f8:	200008fc 	.word	0x200008fc
 80064fc:	a0000140 	.word	0xa0000140

08006500 <MX_LTDC_Init>:
{
 8006500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006502:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006504:	2434      	movs	r4, #52	; 0x34
 8006506:	4622      	mov	r2, r4
 8006508:	2100      	movs	r1, #0
 800650a:	eb0d 0004 	add.w	r0, sp, r4
 800650e:	f000 fff0 	bl	80074f2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8006512:	4622      	mov	r2, r4
 8006514:	2100      	movs	r1, #0
 8006516:	4668      	mov	r0, sp
 8006518:	f000 ffeb 	bl	80074f2 <memset>
  hltdc.Instance = LTDC;
 800651c:	4d2b      	ldr	r5, [pc, #172]	; (80065cc <MX_LTDC_Init+0xcc>)
 800651e:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <MX_LTDC_Init+0xd0>)
 8006520:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006522:	2400      	movs	r4, #0
 8006524:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006526:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006528:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800652a:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 800652c:	2307      	movs	r3, #7
 800652e:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 8006530:	2303      	movs	r3, #3
 8006532:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8006534:	230e      	movs	r3, #14
 8006536:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8006538:	2605      	movs	r6, #5
 800653a:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800653c:	f240 238e 	movw	r3, #654	; 0x28e
 8006540:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8006542:	f240 13e5 	movw	r3, #485	; 0x1e5
 8006546:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8006548:	f44f 7325 	mov.w	r3, #660	; 0x294
 800654c:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800654e:	f240 13e7 	movw	r3, #487	; 0x1e7
 8006552:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006554:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006558:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800655c:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006560:	4628      	mov	r0, r5
 8006562:	f7fc ff8f 	bl	8003484 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8006566:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006568:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800656a:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800656c:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800656e:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006570:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006572:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006574:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8006578:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800657a:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800657c:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800657e:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8006580:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006582:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006586:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800658a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800658e:	4622      	mov	r2, r4
 8006590:	a90d      	add	r1, sp, #52	; 0x34
 8006592:	4628      	mov	r0, r5
 8006594:	f7fd f860 	bl	8003658 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 8006598:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800659a:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 800659c:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 800659e:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80065a0:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 80065a2:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 80065a4:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80065a6:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80065a8:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 80065aa:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80065ac:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80065ae:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80065b0:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80065b4:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80065b8:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80065bc:	2201      	movs	r2, #1
 80065be:	4669      	mov	r1, sp
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7fd f849 	bl	8003658 <HAL_LTDC_ConfigLayer>
}
 80065c6:	b01b      	add	sp, #108	; 0x6c
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000724 	.word	0x20000724
 80065d0:	40016800 	.word	0x40016800

080065d4 <SystemClock_Config>:
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065d8:	2230      	movs	r2, #48	; 0x30
 80065da:	2100      	movs	r1, #0
 80065dc:	a828      	add	r0, sp, #160	; 0xa0
 80065de:	f000 ff88 	bl	80074f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065e2:	2400      	movs	r4, #0
 80065e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80065e6:	9424      	str	r4, [sp, #144]	; 0x90
 80065e8:	9425      	str	r4, [sp, #148]	; 0x94
 80065ea:	9426      	str	r4, [sp, #152]	; 0x98
 80065ec:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80065ee:	2284      	movs	r2, #132	; 0x84
 80065f0:	4621      	mov	r1, r4
 80065f2:	a802      	add	r0, sp, #8
 80065f4:	f000 ff7d 	bl	80074f2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <SystemClock_Config+0xc0>)
 80065fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800660c:	4b22      	ldr	r3, [pc, #136]	; (8006698 <SystemClock_Config+0xc4>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006620:	2601      	movs	r6, #1
 8006622:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006628:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800662a:	2502      	movs	r5, #2
 800662c:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800662e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006632:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006634:	2319      	movs	r3, #25
 8006636:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006638:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800663c:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800663e:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006640:	2309      	movs	r3, #9
 8006642:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006644:	a828      	add	r0, sp, #160	; 0xa0
 8006646:	f7fd f877 	bl	8003738 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800664a:	f7fd f837 	bl	80036bc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800664e:	230f      	movs	r3, #15
 8006650:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006652:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006654:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800665a:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800665c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006660:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006662:	2107      	movs	r1, #7
 8006664:	a823      	add	r0, sp, #140	; 0x8c
 8006666:	f7fd faa5 	bl	8003bb4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 800666a:	2348      	movs	r3, #72	; 0x48
 800666c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800666e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006672:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8006674:	2305      	movs	r3, #5
 8006676:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006678:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800667a:	2303      	movs	r3, #3
 800667c:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800667e:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006684:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006686:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006688:	a802      	add	r0, sp, #8
 800668a:	f7fd fb6b 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
}
 800668e:	b034      	add	sp, #208	; 0xd0
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	bf00      	nop
 8006694:	40023800 	.word	0x40023800
 8006698:	40007000 	.word	0x40007000

0800669c <packData>:

/* USER CODE BEGIN 4 */
void packData() {
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	ed2d 8b02 	vpush	{d8}

	//Reverse A2 and A3 as joystick is upside down
	A2 = 4096 - A2;
 80066a2:	4a36      	ldr	r2, [pc, #216]	; (800677c <packData+0xe0>)
 80066a4:	8813      	ldrh	r3, [r2, #0]
 80066a6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]
	A3 = 4096 - A3;
 80066ae:	4934      	ldr	r1, [pc, #208]	; (8006780 <packData+0xe4>)
 80066b0:	880a      	ldrh	r2, [r1, #0]
 80066b2:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80066b6:	b292      	uxth	r2, r2
 80066b8:	800a      	strh	r2, [r1, #0]

	//L Joystick X
	//First byte = first byte of A0
	TxData[0] = A0;
 80066ba:	4932      	ldr	r1, [pc, #200]	; (8006784 <packData+0xe8>)
 80066bc:	8808      	ldrh	r0, [r1, #0]
 80066be:	4932      	ldr	r1, [pc, #200]	; (8006788 <packData+0xec>)
 80066c0:	7008      	strb	r0, [r1, #0]
	//Second bytes = last byte of A0
	TxData[1] = A0 >> 8;
 80066c2:	0a00      	lsrs	r0, r0, #8
 80066c4:	7048      	strb	r0, [r1, #1]

	//L Joystick Y
	TxData[2] = A1;
 80066c6:	4831      	ldr	r0, [pc, #196]	; (800678c <packData+0xf0>)
 80066c8:	8800      	ldrh	r0, [r0, #0]
 80066ca:	7088      	strb	r0, [r1, #2]
	//4th byte = last 8 bits of A1
	TxData[3] = A1 >> 8;
 80066cc:	0a00      	lsrs	r0, r0, #8
 80066ce:	70c8      	strb	r0, [r1, #3]

	//R Joystick X
	TxData[4] = A3;
 80066d0:	710a      	strb	r2, [r1, #4]
	TxData[5] = A3 >> 8;
 80066d2:	0a12      	lsrs	r2, r2, #8
 80066d4:	714a      	strb	r2, [r1, #5]
	//R Joystick Y
	TxData[6] = A2;
 80066d6:	718b      	strb	r3, [r1, #6]
	TxData[7] = A2 >> 8;
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	71cb      	strb	r3, [r1, #7]

	if (airmode) {
 80066dc:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <packData+0xf4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d147      	bne.n	8006774 <packData+0xd8>
		TxData[8] = 0x01;
	} else {
		TxData[8] = 0x00;
 80066e4:	4b28      	ldr	r3, [pc, #160]	; (8006788 <packData+0xec>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	721a      	strb	r2, [r3, #8]
	}

	uint16_t roll_p_tx = round(roll_p * 100);
 80066ea:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <packData+0xf8>)
 80066ec:	edd3 7a00 	vldr	s15, [r3]
 80066f0:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8006798 <packData+0xfc>
 80066f4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80066f8:	ee17 0a90 	vmov	r0, s15
 80066fc:	f7f9 ff44 	bl	8000588 <__aeabi_f2d>
 8006700:	ec41 0b10 	vmov	d0, r0, r1
 8006704:	f004 fc60 	bl	800afc8 <round>
 8006708:	ec51 0b10 	vmov	r0, r1, d0
 800670c:	f7fa fa6c 	bl	8000be8 <__aeabi_d2uiz>
 8006710:	b285      	uxth	r5, r0
	uint16_t roll_i_tx = round(roll_i * 100) ;
 8006712:	4b22      	ldr	r3, [pc, #136]	; (800679c <packData+0x100>)
 8006714:	edd3 7a00 	vldr	s15, [r3]
 8006718:	ee67 7a88 	vmul.f32	s15, s15, s16
 800671c:	ee17 0a90 	vmov	r0, s15
 8006720:	f7f9 ff32 	bl	8000588 <__aeabi_f2d>
 8006724:	ec41 0b10 	vmov	d0, r0, r1
 8006728:	f004 fc4e 	bl	800afc8 <round>
 800672c:	ec51 0b10 	vmov	r0, r1, d0
 8006730:	f7fa fa5a 	bl	8000be8 <__aeabi_d2uiz>
 8006734:	b284      	uxth	r4, r0
	uint16_t roll_d_tx = round(roll_d * 100) ;
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <packData+0x104>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8006740:	ee17 0a90 	vmov	r0, s15
 8006744:	f7f9 ff20 	bl	8000588 <__aeabi_f2d>
 8006748:	ec41 0b10 	vmov	d0, r0, r1
 800674c:	f004 fc3c 	bl	800afc8 <round>
 8006750:	ec51 0b10 	vmov	r0, r1, d0
 8006754:	f7fa fa48 	bl	8000be8 <__aeabi_d2uiz>
 8006758:	b280      	uxth	r0, r0

	TxData[9] = roll_p_tx;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <packData+0xec>)
 800675c:	725d      	strb	r5, [r3, #9]
	TxData[10] = roll_p_tx >> 8;
 800675e:	0a2d      	lsrs	r5, r5, #8
 8006760:	729d      	strb	r5, [r3, #10]

	TxData[11] = roll_i_tx;
 8006762:	72dc      	strb	r4, [r3, #11]
	TxData[12] = roll_i_tx >> 8;
 8006764:	0a24      	lsrs	r4, r4, #8
 8006766:	731c      	strb	r4, [r3, #12]

	TxData[13] = roll_d_tx;
 8006768:	7358      	strb	r0, [r3, #13]
	TxData[14] = roll_d_tx >> 8;
 800676a:	0a00      	lsrs	r0, r0, #8
 800676c:	7398      	strb	r0, [r3, #14]

}
 800676e:	ecbd 8b02 	vpop	{d8}
 8006772:	bd38      	pop	{r3, r4, r5, pc}
		TxData[8] = 0x01;
 8006774:	2201      	movs	r2, #1
 8006776:	720a      	strb	r2, [r1, #8]
 8006778:	e7b7      	b.n	80066ea <packData+0x4e>
 800677a:	bf00      	nop
 800677c:	200008b8 	.word	0x200008b8
 8006780:	200006c8 	.word	0x200006c8
 8006784:	200006f8 	.word	0x200006f8
 8006788:	20000898 	.word	0x20000898
 800678c:	20000930 	.word	0x20000930
 8006790:	20000502 	.word	0x20000502
 8006794:	20000518 	.word	0x20000518
 8006798:	42c80000 	.word	0x42c80000
 800679c:	20000514 	.word	0x20000514
 80067a0:	20000510 	.word	0x20000510

080067a4 <unpackAckPayload>:

void unpackAckPayload() {

	//Check if this is packet 0 or packet 1
	if (AckPayload[0] == 0x00) {
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <unpackAckPayload+0x3c>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	b9cb      	cbnz	r3, 80067de <unpackAckPayload+0x3a>

		droneBatteryLvl = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 80067aa:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <unpackAckPayload+0x3c>)
 80067ac:	7853      	ldrb	r3, [r2, #1]
 80067ae:	7891      	ldrb	r1, [r2, #2]
 80067b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067b4:	490b      	ldr	r1, [pc, #44]	; (80067e4 <unpackAckPayload+0x40>)
 80067b6:	600b      	str	r3, [r1, #0]
		int16_t roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 80067b8:	78d3      	ldrb	r3, [r2, #3]
 80067ba:	7912      	ldrb	r2, [r2, #4]
 80067bc:	0212      	lsls	r2, r2, #8
 80067be:	b212      	sxth	r2, r2
 80067c0:	4313      	orrs	r3, r2
		roll = roll_rx / 100;
 80067c2:	4a09      	ldr	r2, [pc, #36]	; (80067e8 <unpackAckPayload+0x44>)
 80067c4:	fb82 1203 	smull	r1, r2, r2, r3
 80067c8:	17db      	asrs	r3, r3, #31
 80067ca:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <unpackAckPayload+0x48>)
 80067da:	edc3 7a00 	vstr	s15, [r3]
	//This is packet 1, only sent every
	if (AckPayload[0] == 0xFF) {

	}

}
 80067de:	4770      	bx	lr
 80067e0:	20000684 	.word	0x20000684
 80067e4:	20000050 	.word	0x20000050
 80067e8:	51eb851f 	.word	0x51eb851f
 80067ec:	2000050c 	.word	0x2000050c

080067f0 <map>:



float map(int x, int in_min, int in_max, int out_min, int out_max) {
 80067f0:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80067f2:	1a40      	subs	r0, r0, r1
 80067f4:	9c01      	ldr	r4, [sp, #4]
 80067f6:	1ae4      	subs	r4, r4, r3
 80067f8:	fb04 f000 	mul.w	r0, r4, r0
 80067fc:	1a52      	subs	r2, r2, r1
 80067fe:	fb90 f0f2 	sdiv	r0, r0, r2
 8006802:	18c3      	adds	r3, r0, r3
 8006804:	ee00 3a10 	vmov	s0, r3
}
 8006808:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800680c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <main>:
{
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006816:	ed2d 8b02 	vpush	{d8}
 800681a:	b0b9      	sub	sp, #228	; 0xe4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800681c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006820:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006824:	4b77      	ldr	r3, [pc, #476]	; (8006a04 <main+0x1f0>)
 8006826:	2100      	movs	r1, #0
 8006828:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800682c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006830:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800683a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800683c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006840:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006844:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006848:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800684c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006850:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8006854:	e00f      	b.n	8006876 <main+0x62>
      } while (ways-- != 0U);
 8006856:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006858:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800685c:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8006860:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8006864:	4867      	ldr	r0, [pc, #412]	; (8006a04 <main+0x1f0>)
 8006866:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800686a:	1e53      	subs	r3, r2, #1
 800686c:	2a00      	cmp	r2, #0
 800686e:	d1f2      	bne.n	8006856 <main+0x42>
    } while(sets-- != 0U);
 8006870:	1e4b      	subs	r3, r1, #1
 8006872:	b119      	cbz	r1, 800687c <main+0x68>
 8006874:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006876:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800687a:	e7ed      	b.n	8006858 <main+0x44>
 800687c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006880:	6943      	ldr	r3, [r0, #20]
 8006882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006886:	6143      	str	r3, [r0, #20]
 8006888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800688c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8006890:	f7fb fa6c 	bl	8001d6c <HAL_Init>
  SystemClock_Config();
 8006894:	f7ff fe9e 	bl	80065d4 <SystemClock_Config>
  MX_GPIO_Init();
 8006898:	f7ff fcb2 	bl	8006200 <MX_GPIO_Init>
  MX_SPI2_Init();
 800689c:	f7ff fd78 	bl	8006390 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80068a0:	f7ff fd98 	bl	80063d4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80068a4:	f7ff fdae 	bl	8006404 <MX_ADC3_Init>
  MX_CRC_Init();
 80068a8:	f7ff fddc 	bl	8006464 <MX_CRC_Init>
  MX_DMA2D_Init();
 80068ac:	f7ff fdec 	bl	8006488 <MX_DMA2D_Init>
  MX_FMC_Init();
 80068b0:	f7ff fe02 	bl	80064b8 <MX_FMC_Init>
  MX_LTDC_Init();
 80068b4:	f7ff fe24 	bl	8006500 <MX_LTDC_Init>
	DWT_Init();
 80068b8:	f7fb fa06 	bl	8001cc8 <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 80068bc:	4c52      	ldr	r4, [pc, #328]	; (8006a08 <main+0x1f4>)
 80068be:	2260      	movs	r2, #96	; 0x60
 80068c0:	1d21      	adds	r1, r4, #4
 80068c2:	4668      	mov	r0, sp
 80068c4:	f000 fe0a 	bl	80074dc <memcpy>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d2:	484e      	ldr	r0, [pc, #312]	; (8006a0c <main+0x1f8>)
 80068d4:	f7fa fe20 	bl	8001518 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80068d8:	4c4d      	ldr	r4, [pc, #308]	; (8006a10 <main+0x1fc>)
 80068da:	2270      	movs	r2, #112	; 0x70
 80068dc:	f104 0110 	add.w	r1, r4, #16
 80068e0:	4668      	mov	r0, sp
 80068e2:	f000 fdfb 	bl	80074dc <memcpy>
 80068e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80068ea:	f7fb f9db 	bl	8001ca4 <nrf24_DebugUART_Init>
	NRF24_stopListening();
 80068ee:	f7fa fc46 	bl	800117e <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80068f2:	4b48      	ldr	r3, [pc, #288]	; (8006a14 <main+0x200>)
 80068f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068f8:	f7fa fc4a 	bl	8001190 <NRF24_openWritingPipe>
	printRadioSettings();
 80068fc:	f7fa fee2 	bl	80016c4 <printRadioSettings>
	for (int i = 0; i < 31; ++i) {
 8006900:	2300      	movs	r3, #0
 8006902:	e003      	b.n	800690c <main+0xf8>
		TxData[i] = 0;
 8006904:	4a44      	ldr	r2, [pc, #272]	; (8006a18 <main+0x204>)
 8006906:	2100      	movs	r1, #0
 8006908:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 31; ++i) {
 800690a:	3301      	adds	r3, #1
 800690c:	2b1e      	cmp	r3, #30
 800690e:	ddf9      	ble.n	8006904 <main+0xf0>
	BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8006910:	f7ff fc0e 	bl	8006130 <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8006914:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <main+0x208>)
 8006916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006924:	931e      	str	r3, [sp, #120]	; 0x78
 8006926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	BSP_TS_Init(480, 272);
 8006928:	f44f 7188 	mov.w	r1, #272	; 0x110
 800692c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8006930:	f7ff fc3e 	bl	80061b0 <BSP_TS_Init>
	BSP_LCD_Init();
 8006934:	f7ff fa9a 	bl	8005e6c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8006938:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800693c:	2000      	movs	r0, #0
 800693e:	f7ff f819 	bl	8005974 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8006942:	f7ff f9c5 	bl	8005cd0 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8006946:	2000      	movs	r0, #0
 8006948:	f7ff f854 	bl	80059f4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800694c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006950:	f7ff f87e 	bl	8005a50 <BSP_LCD_Clear>
 8006954:	e083      	b.n	8006a5e <main+0x24a>
			A0 = HAL_ADC_GetValue(&hadc3);
 8006956:	4620      	mov	r0, r4
 8006958:	f7fb fbf3 	bl	8002142 <HAL_ADC_GetValue>
 800695c:	4b30      	ldr	r3, [pc, #192]	; (8006a20 <main+0x20c>)
 800695e:	8018      	strh	r0, [r3, #0]
 8006960:	e08e      	b.n	8006a80 <main+0x26c>
			A1 = HAL_ADC_GetValue(&hadc3);
 8006962:	4620      	mov	r0, r4
 8006964:	f7fb fbed 	bl	8002142 <HAL_ADC_GetValue>
 8006968:	4b2e      	ldr	r3, [pc, #184]	; (8006a24 <main+0x210>)
 800696a:	8018      	strh	r0, [r3, #0]
 800696c:	e099      	b.n	8006aa2 <main+0x28e>
			A2 = HAL_ADC_GetValue(&hadc3);
 800696e:	4620      	mov	r0, r4
 8006970:	f7fb fbe7 	bl	8002142 <HAL_ADC_GetValue>
 8006974:	4b2c      	ldr	r3, [pc, #176]	; (8006a28 <main+0x214>)
 8006976:	8018      	strh	r0, [r3, #0]
 8006978:	e0a4      	b.n	8006ac4 <main+0x2b0>
			A3 = HAL_ADC_GetValue(&hadc3);
 800697a:	4620      	mov	r0, r4
 800697c:	f7fb fbe1 	bl	8002142 <HAL_ADC_GetValue>
 8006980:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <main+0x218>)
 8006982:	8018      	strh	r0, [r3, #0]
 8006984:	e0af      	b.n	8006ae6 <main+0x2d2>
			airmode = 1;
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <main+0x21c>)
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e0b5      	b.n	8006afa <main+0x2e6>
			NRF24_read(AckPayload, 32);
 800698e:	4d29      	ldr	r5, [pc, #164]	; (8006a34 <main+0x220>)
 8006990:	2120      	movs	r1, #32
 8006992:	4628      	mov	r0, r5
 8006994:	f7fa fc65 	bl	8001262 <NRF24_read>
			HAL_UART_Transmit(&huart1,
 8006998:	4c1d      	ldr	r4, [pc, #116]	; (8006a10 <main+0x1fc>)
 800699a:	230a      	movs	r3, #10
 800699c:	221a      	movs	r2, #26
 800699e:	4926      	ldr	r1, [pc, #152]	; (8006a38 <main+0x224>)
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fe fbde 	bl	8005162 <HAL_UART_Transmit>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 80069a6:	462a      	mov	r2, r5
 80069a8:	4924      	ldr	r1, [pc, #144]	; (8006a3c <main+0x228>)
 80069aa:	a830      	add	r0, sp, #192	; 0xc0
 80069ac:	f001 fc22 	bl	80081f4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
 80069b0:	a830      	add	r0, sp, #192	; 0xc0
 80069b2:	f7f9 fc2d 	bl	8000210 <strlen>
 80069b6:	230a      	movs	r3, #10
 80069b8:	b282      	uxth	r2, r0
 80069ba:	a930      	add	r1, sp, #192	; 0xc0
 80069bc:	4620      	mov	r0, r4
 80069be:	f7fe fbd0 	bl	8005162 <HAL_UART_Transmit>
			connection = 1;
 80069c2:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <main+0x22c>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e0a7      	b.n	8006b1a <main+0x306>
			BSP_LCD_DisplayStringAt(100, 260, (uint8_t *) "OFF", LEFT_MODE);
 80069ca:	2303      	movs	r3, #3
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <main+0x230>)
 80069ce:	f44f 7182 	mov.w	r1, #260	; 0x104
 80069d2:	2064      	movs	r0, #100	; 0x64
 80069d4:	f7ff f914 	bl	8005c00 <BSP_LCD_DisplayStringAt>
 80069d8:	e0df      	b.n	8006b9a <main+0x386>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80069da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069de:	f7ff f81b 	bl	8005a18 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <main+0x234>)
 80069e4:	f7ff f80c 	bl	8005a00 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 80069e8:	4818      	ldr	r0, [pc, #96]	; (8006a4c <main+0x238>)
 80069ea:	f7ff f823 	bl	8005a34 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 120,
 80069ee:	2301      	movs	r3, #1
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <main+0x23c>)
 80069f2:	2178      	movs	r1, #120	; 0x78
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7ff f903 	bl	8005c00 <BSP_LCD_DisplayStringAt>
			cleared = 0;
 80069fa:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <main+0x240>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e02d      	b.n	8006a5e <main+0x24a>
 8006a02:	bf00      	nop
 8006a04:	e000ed00 	.word	0xe000ed00
 8006a08:	20000620 	.word	0x20000620
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	20000814 	.word	0x20000814
 8006a14:	20000048 	.word	0x20000048
 8006a18:	20000898 	.word	0x20000898
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	200006f8 	.word	0x200006f8
 8006a24:	20000930 	.word	0x20000930
 8006a28:	200008b8 	.word	0x200008b8
 8006a2c:	200006c8 	.word	0x200006c8
 8006a30:	20000502 	.word	0x20000502
 8006a34:	20000684 	.word	0x20000684
 8006a38:	0800db60 	.word	0x0800db60
 8006a3c:	0800db7c 	.word	0x0800db7c
 8006a40:	20000504 	.word	0x20000504
 8006a44:	0800dbcc 	.word	0x0800dbcc
 8006a48:	ffff0000 	.word	0xffff0000
 8006a4c:	20000010 	.word	0x20000010
 8006a50:	0800dc08 	.word	0x0800dc08
 8006a54:	20000503 	.word	0x20000503
			cleared = 1;
 8006a58:	4bcb      	ldr	r3, [pc, #812]	; (8006d88 <main+0x574>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_0;
 8006a5e:	49cb      	ldr	r1, [pc, #812]	; (8006d8c <main+0x578>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	600b      	str	r3, [r1, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8006a64:	4cca      	ldr	r4, [pc, #808]	; (8006d90 <main+0x57c>)
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7fb fb6e 	bl	8002148 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7fb fa7b 	bl	8001f68 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8006a72:	2105      	movs	r1, #5
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fb fb09 	bl	800208c <HAL_ADC_PollForConversion>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f43f af6b 	beq.w	8006956 <main+0x142>
		sConfig.Channel = ADC_CHANNEL_8;
 8006a80:	49c2      	ldr	r1, [pc, #776]	; (8006d8c <main+0x578>)
 8006a82:	2308      	movs	r3, #8
 8006a84:	600b      	str	r3, [r1, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8006a86:	4cc2      	ldr	r4, [pc, #776]	; (8006d90 <main+0x57c>)
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f7fb fb5d 	bl	8002148 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7fb fa6a 	bl	8001f68 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8006a94:	2105      	movs	r1, #5
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7fb faf8 	bl	800208c <HAL_ADC_PollForConversion>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af60 	beq.w	8006962 <main+0x14e>
		sConfig.Channel = ADC_CHANNEL_6;
 8006aa2:	49ba      	ldr	r1, [pc, #744]	; (8006d8c <main+0x578>)
 8006aa4:	2306      	movs	r3, #6
 8006aa6:	600b      	str	r3, [r1, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8006aa8:	4cb9      	ldr	r4, [pc, #740]	; (8006d90 <main+0x57c>)
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7fb fb4c 	bl	8002148 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7fb fa59 	bl	8001f68 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8006ab6:	2105      	movs	r1, #5
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fb fae7 	bl	800208c <HAL_ADC_PollForConversion>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f af55 	beq.w	800696e <main+0x15a>
		sConfig.Channel = ADC_CHANNEL_7;
 8006ac4:	49b1      	ldr	r1, [pc, #708]	; (8006d8c <main+0x578>)
 8006ac6:	2307      	movs	r3, #7
 8006ac8:	600b      	str	r3, [r1, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8006aca:	4cb1      	ldr	r4, [pc, #708]	; (8006d90 <main+0x57c>)
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7fb fb3b 	bl	8002148 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7fb fa48 	bl	8001f68 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8006ad8:	2105      	movs	r1, #5
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7fb fad6 	bl	800208c <HAL_ADC_PollForConversion>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f43f af4a 	beq.w	800697a <main+0x166>
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	48aa      	ldr	r0, [pc, #680]	; (8006d94 <main+0x580>)
 8006aea:	f7fc f861 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8006aee:	2801      	cmp	r0, #1
 8006af0:	f43f af49 	beq.w	8006986 <main+0x172>
			airmode = 0;
 8006af4:	4ba8      	ldr	r3, [pc, #672]	; (8006d98 <main+0x584>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
 8006afa:	2104      	movs	r1, #4
 8006afc:	48a5      	ldr	r0, [pc, #660]	; (8006d94 <main+0x580>)
 8006afe:	f7fc f857 	bl	8002bb0 <HAL_GPIO_ReadPin>
		packData();
 8006b02:	f7ff fdcb 	bl	800669c <packData>
		if (NRF24_write(TxData, 32)) {
 8006b06:	2120      	movs	r1, #32
 8006b08:	48a4      	ldr	r0, [pc, #656]	; (8006d9c <main+0x588>)
 8006b0a:	f7fa fc8d 	bl	8001428 <NRF24_write>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f47f af3d 	bne.w	800698e <main+0x17a>
			connection = 0;
 8006b14:	4ba2      	ldr	r3, [pc, #648]	; (8006da0 <main+0x58c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
		unpackAckPayload();
 8006b1a:	f7ff fe43 	bl	80067a4 <unpackAckPayload>
		HAL_Delay(2);
 8006b1e:	2002      	movs	r0, #2
 8006b20:	f7fb f948 	bl	8001db4 <HAL_Delay>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8006b24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006b28:	f7fe ff76 	bl	8005a18 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006b2c:	489d      	ldr	r0, [pc, #628]	; (8006da4 <main+0x590>)
 8006b2e:	f7fe ff67 	bl	8005a00 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font16);
 8006b32:	489d      	ldr	r0, [pc, #628]	; (8006da8 <main+0x594>)
 8006b34:	f7fe ff7e 	bl	8005a34 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(14, 60, (uint8_t *) "LONG.", LEFT_MODE);
 8006b38:	2303      	movs	r3, #3
 8006b3a:	4a9c      	ldr	r2, [pc, #624]	; (8006dac <main+0x598>)
 8006b3c:	213c      	movs	r1, #60	; 0x3c
 8006b3e:	200e      	movs	r0, #14
 8006b40:	f7ff f85e 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 100, (uint8_t *) "LAT.", LEFT_MODE);
 8006b44:	2303      	movs	r3, #3
 8006b46:	4a9a      	ldr	r2, [pc, #616]	; (8006db0 <main+0x59c>)
 8006b48:	2164      	movs	r1, #100	; 0x64
 8006b4a:	200e      	movs	r0, #14
 8006b4c:	f7ff f858 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 140, (uint8_t *) "SPEED.", LEFT_MODE);
 8006b50:	2303      	movs	r3, #3
 8006b52:	4a98      	ldr	r2, [pc, #608]	; (8006db4 <main+0x5a0>)
 8006b54:	218c      	movs	r1, #140	; 0x8c
 8006b56:	200e      	movs	r0, #14
 8006b58:	f7ff f852 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 180, (uint8_t *) "ALT.", LEFT_MODE);
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	4a96      	ldr	r2, [pc, #600]	; (8006db8 <main+0x5a4>)
 8006b60:	21b4      	movs	r1, #180	; 0xb4
 8006b62:	200e      	movs	r0, #14
 8006b64:	f7ff f84c 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 220, (uint8_t *) "THROTTLE ", LEFT_MODE);
 8006b68:	2303      	movs	r3, #3
 8006b6a:	4a94      	ldr	r2, [pc, #592]	; (8006dbc <main+0x5a8>)
 8006b6c:	21dc      	movs	r1, #220	; 0xdc
 8006b6e:	200e      	movs	r0, #14
 8006b70:	f7ff f846 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 260, (uint8_t *) "AIRMODE ", LEFT_MODE);
 8006b74:	2303      	movs	r3, #3
 8006b76:	4a92      	ldr	r2, [pc, #584]	; (8006dc0 <main+0x5ac>)
 8006b78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006b7c:	200e      	movs	r0, #14
 8006b7e:	f7ff f83f 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		if (airmode) {
 8006b82:	4b85      	ldr	r3, [pc, #532]	; (8006d98 <main+0x584>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f43f af1f 	beq.w	80069ca <main+0x1b6>
			BSP_LCD_DisplayStringAt(100, 260, (uint8_t *) "ON ", LEFT_MODE);
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	4a8d      	ldr	r2, [pc, #564]	; (8006dc4 <main+0x5b0>)
 8006b90:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006b94:	2064      	movs	r0, #100	; 0x64
 8006b96:	f7ff f833 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 60, (uint8_t *) "ROLL", RIGHT_MODE);
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	4a8a      	ldr	r2, [pc, #552]	; (8006dc8 <main+0x5b4>)
 8006b9e:	213c      	movs	r1, #60	; 0x3c
 8006ba0:	2014      	movs	r0, #20
 8006ba2:	f7ff f82d 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 100, (uint8_t *) "PITCH", RIGHT_MODE);
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	4a88      	ldr	r2, [pc, #544]	; (8006dcc <main+0x5b8>)
 8006baa:	2164      	movs	r1, #100	; 0x64
 8006bac:	2014      	movs	r0, #20
 8006bae:	f7ff f827 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 140, (uint8_t *) "YAW", RIGHT_MODE);
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	4a86      	ldr	r2, [pc, #536]	; (8006dd0 <main+0x5bc>)
 8006bb6:	218c      	movs	r1, #140	; 0x8c
 8006bb8:	2014      	movs	r0, #20
 8006bba:	f7ff f821 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 180, (uint8_t *) "P", RIGHT_MODE);
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	4a84      	ldr	r2, [pc, #528]	; (8006dd4 <main+0x5c0>)
 8006bc2:	21b4      	movs	r1, #180	; 0xb4
 8006bc4:	2014      	movs	r0, #20
 8006bc6:	f7ff f81b 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) "I", RIGHT_MODE);
 8006bca:	2302      	movs	r3, #2
 8006bcc:	4a82      	ldr	r2, [pc, #520]	; (8006dd8 <main+0x5c4>)
 8006bce:	21c8      	movs	r1, #200	; 0xc8
 8006bd0:	2014      	movs	r0, #20
 8006bd2:	f7ff f815 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) "D", RIGHT_MODE);
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	4a80      	ldr	r2, [pc, #512]	; (8006ddc <main+0x5c8>)
 8006bda:	21dc      	movs	r1, #220	; 0xdc
 8006bdc:	2014      	movs	r0, #20
 8006bde:	f7ff f80f 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(120, 15, (uint8_t *) "QUAD", RIGHT_MODE);
 8006be2:	2302      	movs	r3, #2
 8006be4:	4a7e      	ldr	r2, [pc, #504]	; (8006de0 <main+0x5cc>)
 8006be6:	210f      	movs	r1, #15
 8006be8:	2078      	movs	r0, #120	; 0x78
 8006bea:	f7ff f809 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(longitude_str, sizeof(longitude_str), "%f", GPS.longitude);
 8006bee:	4d7d      	ldr	r5, [pc, #500]	; (8006de4 <main+0x5d0>)
 8006bf0:	4c7d      	ldr	r4, [pc, #500]	; (8006de8 <main+0x5d4>)
 8006bf2:	6868      	ldr	r0, [r5, #4]
 8006bf4:	f7f9 fcc8 	bl	8000588 <__aeabi_f2d>
 8006bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	2106      	movs	r1, #6
 8006c00:	a824      	add	r0, sp, #144	; 0x90
 8006c02:	f001 fac3 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(100, 60, (uint8_t *) longitude_str, LEFT_MODE);
 8006c06:	2303      	movs	r3, #3
 8006c08:	aa24      	add	r2, sp, #144	; 0x90
 8006c0a:	213c      	movs	r1, #60	; 0x3c
 8006c0c:	2064      	movs	r0, #100	; 0x64
 8006c0e:	f7fe fff7 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(lattitude_str, sizeof(lattitude_str), "%f", GPS.latitude);
 8006c12:	68a8      	ldr	r0, [r5, #8]
 8006c14:	f7f9 fcb8 	bl	8000588 <__aeabi_f2d>
 8006c18:	e9cd 0100 	strd	r0, r1, [sp]
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	2106      	movs	r1, #6
 8006c20:	a826      	add	r0, sp, #152	; 0x98
 8006c22:	f001 fab3 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(100, 100, (uint8_t *) lattitude_str, LEFT_MODE);
 8006c26:	2303      	movs	r3, #3
 8006c28:	aa26      	add	r2, sp, #152	; 0x98
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	f7fe ffe7 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(speed_str, sizeof(speed_str), "%f", GPS.speed);
 8006c32:	6828      	ldr	r0, [r5, #0]
 8006c34:	f7f9 fca8 	bl	8000588 <__aeabi_f2d>
 8006c38:	e9cd 0100 	strd	r0, r1, [sp]
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	2106      	movs	r1, #6
 8006c40:	a828      	add	r0, sp, #160	; 0xa0
 8006c42:	f001 faa3 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(100, 140, (uint8_t *) speed_str, LEFT_MODE);
 8006c46:	2303      	movs	r3, #3
 8006c48:	aa28      	add	r2, sp, #160	; 0xa0
 8006c4a:	218c      	movs	r1, #140	; 0x8c
 8006c4c:	2064      	movs	r0, #100	; 0x64
 8006c4e:	f7fe ffd7 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(alt_str, sizeof(alt_str), "%f", GPS.altitude);
 8006c52:	68e8      	ldr	r0, [r5, #12]
 8006c54:	f7f9 fc98 	bl	8000588 <__aeabi_f2d>
 8006c58:	e9cd 0100 	strd	r0, r1, [sp]
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	2106      	movs	r1, #6
 8006c60:	a82a      	add	r0, sp, #168	; 0xa8
 8006c62:	f001 fa93 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(100, 180, (uint8_t *) alt_str, LEFT_MODE);
 8006c66:	2303      	movs	r3, #3
 8006c68:	aa2a      	add	r2, sp, #168	; 0xa8
 8006c6a:	21b4      	movs	r1, #180	; 0xb4
 8006c6c:	2064      	movs	r0, #100	; 0x64
 8006c6e:	f7fe ffc7 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		int throttle = map(A1, 880, 3300, 0, 100);
 8006c72:	4b5e      	ldr	r3, [pc, #376]	; (8006dec <main+0x5d8>)
 8006c74:	8818      	ldrh	r0, [r3, #0]
 8006c76:	2564      	movs	r5, #100	; 0x64
 8006c78:	9500      	str	r5, [sp, #0]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8006c80:	f44f 715c 	mov.w	r1, #880	; 0x370
 8006c84:	f7ff fdb4 	bl	80067f0 <map>
		snprintf(throttle_str, sizeof(throttle_str), "%d", throttle);
 8006c88:	4e59      	ldr	r6, [pc, #356]	; (8006df0 <main+0x5dc>)
 8006c8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006c8e:	ee17 3a90 	vmov	r3, s15
 8006c92:	4632      	mov	r2, r6
 8006c94:	2103      	movs	r1, #3
 8006c96:	a81c      	add	r0, sp, #112	; 0x70
 8006c98:	f001 fa78 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(140, 220, (uint8_t *) throttle_str, LEFT_MODE);
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	aa1c      	add	r2, sp, #112	; 0x70
 8006ca0:	21dc      	movs	r1, #220	; 0xdc
 8006ca2:	208c      	movs	r0, #140	; 0x8c
 8006ca4:	f7fe ffac 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(roll_str, sizeof(roll_str), "%f", roll);
 8006ca8:	4b52      	ldr	r3, [pc, #328]	; (8006df4 <main+0x5e0>)
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	f7f9 fc6c 	bl	8000588 <__aeabi_f2d>
 8006cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	2106      	movs	r1, #6
 8006cb8:	a82c      	add	r0, sp, #176	; 0xb0
 8006cba:	f001 fa67 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(320, 60, (uint8_t *) roll_str, LEFT_MODE);
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8006cc2:	213c      	movs	r1, #60	; 0x3c
 8006cc4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8006cc8:	f7fe ff9a 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(pitch_str, sizeof(pitch_str), "%f", pitch);
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	; (8006df8 <main+0x5e4>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	f7f9 fc5a 	bl	8000588 <__aeabi_f2d>
 8006cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8006cd8:	4622      	mov	r2, r4
 8006cda:	2106      	movs	r1, #6
 8006cdc:	a82e      	add	r0, sp, #184	; 0xb8
 8006cde:	f001 fa55 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(320, 100, (uint8_t *) pitch_str, LEFT_MODE);
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	aa2e      	add	r2, sp, #184	; 0xb8
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8006cec:	f7fe ff88 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(yaw_str, sizeof(yaw_str), "%f", yaw);
 8006cf0:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <main+0x5e8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	f7f9 fc48 	bl	8000588 <__aeabi_f2d>
 8006cf8:	e9cd 0100 	strd	r0, r1, [sp]
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	2106      	movs	r1, #6
 8006d00:	a830      	add	r0, sp, #192	; 0xc0
 8006d02:	f001 fa43 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(320, 140, (uint8_t *) yaw_str, LEFT_MODE);
 8006d06:	2303      	movs	r3, #3
 8006d08:	aa30      	add	r2, sp, #192	; 0xc0
 8006d0a:	218c      	movs	r1, #140	; 0x8c
 8006d0c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8006d10:	f7fe ff76 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		int battery_pct = map(droneBatteryLvl, 0, 4096, 0, 100);
 8006d14:	4b3a      	ldr	r3, [pc, #232]	; (8006e00 <main+0x5ec>)
 8006d16:	681f      	ldr	r7, [r3, #0]
 8006d18:	9500      	str	r5, [sp, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d20:	4619      	mov	r1, r3
 8006d22:	4638      	mov	r0, r7
 8006d24:	f7ff fd64 	bl	80067f0 <map>
 8006d28:	eebd 8ac0 	vcvt.s32.f32	s16, s0
		float battery_voltage = map(droneBatteryLvl, 0, 4096, 12.6, 11.1);
 8006d2c:	230b      	movs	r3, #11
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	230c      	movs	r3, #12
 8006d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d36:	2100      	movs	r1, #0
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff fd59 	bl	80067f0 <map>
 8006d3e:	ee10 5a10 	vmov	r5, s0
		snprintf(battery_lvl_str, sizeof(battery_lvl_str), "%d", battery_pct);
 8006d42:	ee18 3a10 	vmov	r3, s16
 8006d46:	4632      	mov	r2, r6
 8006d48:	2103      	movs	r1, #3
 8006d4a:	a81d      	add	r0, sp, #116	; 0x74
 8006d4c:	f001 fa1e 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(85, 15, (uint8_t *) battery_lvl_str,
 8006d50:	2302      	movs	r3, #2
 8006d52:	aa1d      	add	r2, sp, #116	; 0x74
 8006d54:	210f      	movs	r1, #15
 8006d56:	2055      	movs	r0, #85	; 0x55
 8006d58:	f7fe ff52 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(battery_lvl_str2, sizeof(battery_lvl_str2), "%f V",
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7f9 fc13 	bl	8000588 <__aeabi_f2d>
 8006d62:	e9cd 0100 	strd	r0, r1, [sp]
 8006d66:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <main+0x5f0>)
 8006d68:	2105      	movs	r1, #5
 8006d6a:	a822      	add	r0, sp, #136	; 0x88
 8006d6c:	f001 fa0e 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(30, 15, (uint8_t *) battery_lvl_str2,
 8006d70:	2302      	movs	r3, #2
 8006d72:	aa22      	add	r2, sp, #136	; 0x88
 8006d74:	210f      	movs	r1, #15
 8006d76:	201e      	movs	r0, #30
 8006d78:	f7fe ff42 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(p_str, sizeof(p_str), "%f", roll_p);
 8006d7c:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <main+0x5f4>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	f7f9 fc02 	bl	8000588 <__aeabi_f2d>
 8006d84:	e042      	b.n	8006e0c <main+0x5f8>
 8006d86:	bf00      	nop
 8006d88:	20000503 	.word	0x20000503
 8006d8c:	2000051c 	.word	0x2000051c
 8006d90:	200007cc 	.word	0x200007cc
 8006d94:	40022000 	.word	0x40022000
 8006d98:	20000502 	.word	0x20000502
 8006d9c:	20000898 	.word	0x20000898
 8006da0:	20000504 	.word	0x20000504
 8006da4:	ffff0000 	.word	0xffff0000
 8006da8:	20000008 	.word	0x20000008
 8006dac:	0800db90 	.word	0x0800db90
 8006db0:	0800db98 	.word	0x0800db98
 8006db4:	0800dba0 	.word	0x0800dba0
 8006db8:	0800dba8 	.word	0x0800dba8
 8006dbc:	0800dbb0 	.word	0x0800dbb0
 8006dc0:	0800dbbc 	.word	0x0800dbbc
 8006dc4:	0800dbc8 	.word	0x0800dbc8
 8006dc8:	0800dbd0 	.word	0x0800dbd0
 8006dcc:	0800dbd8 	.word	0x0800dbd8
 8006dd0:	0800dbe0 	.word	0x0800dbe0
 8006dd4:	0800dbe4 	.word	0x0800dbe4
 8006dd8:	0800dbe8 	.word	0x0800dbe8
 8006ddc:	0800dbec 	.word	0x0800dbec
 8006de0:	0800dbf0 	.word	0x0800dbf0
 8006de4:	20000708 	.word	0x20000708
 8006de8:	0800dbf8 	.word	0x0800dbf8
 8006dec:	20000930 	.word	0x20000930
 8006df0:	0800dbfc 	.word	0x0800dbfc
 8006df4:	2000050c 	.word	0x2000050c
 8006df8:	20000508 	.word	0x20000508
 8006dfc:	2000052c 	.word	0x2000052c
 8006e00:	20000050 	.word	0x20000050
 8006e04:	0800dc00 	.word	0x0800dc00
 8006e08:	20000518 	.word	0x20000518
 8006e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8006e10:	4622      	mov	r2, r4
 8006e12:	2104      	movs	r1, #4
 8006e14:	a81f      	add	r0, sp, #124	; 0x7c
 8006e16:	f001 f9b9 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(40, 180, (uint8_t *) p_str, RIGHT_MODE);
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e1e:	21b4      	movs	r1, #180	; 0xb4
 8006e20:	2028      	movs	r0, #40	; 0x28
 8006e22:	f7fe feed 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(i_str, sizeof(i_str), "%f", roll_i);
 8006e26:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <main+0x674>)
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f7f9 fbad 	bl	8000588 <__aeabi_f2d>
 8006e2e:	e9cd 0100 	strd	r0, r1, [sp]
 8006e32:	4622      	mov	r2, r4
 8006e34:	2104      	movs	r1, #4
 8006e36:	a820      	add	r0, sp, #128	; 0x80
 8006e38:	f001 f9a8 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(40, 200, (uint8_t *) i_str, RIGHT_MODE);
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	aa20      	add	r2, sp, #128	; 0x80
 8006e40:	21c8      	movs	r1, #200	; 0xc8
 8006e42:	2028      	movs	r0, #40	; 0x28
 8006e44:	f7fe fedc 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		snprintf(d_str, sizeof(d_str), "%f", roll_d);
 8006e48:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <main+0x678>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	f7f9 fb9c 	bl	8000588 <__aeabi_f2d>
 8006e50:	e9cd 0100 	strd	r0, r1, [sp]
 8006e54:	4622      	mov	r2, r4
 8006e56:	2104      	movs	r1, #4
 8006e58:	a821      	add	r0, sp, #132	; 0x84
 8006e5a:	f001 f997 	bl	800818c <sniprintf>
		BSP_LCD_DisplayStringAt(40, 220, (uint8_t *) d_str, RIGHT_MODE);
 8006e5e:	2302      	movs	r3, #2
 8006e60:	aa21      	add	r2, sp, #132	; 0x84
 8006e62:	21dc      	movs	r1, #220	; 0xdc
 8006e64:	2028      	movs	r0, #40	; 0x28
 8006e66:	f7fe fecb 	bl	8005c00 <BSP_LCD_DisplayStringAt>
		if (!connection) {
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <main+0x67c>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f43f adb3 	beq.w	80069da <main+0x1c6>
			if (!cleared) {
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <main+0x680>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f aded 	bne.w	8006a58 <main+0x244>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 8006e7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006e82:	f7fe fde5 	bl	8005a50 <BSP_LCD_Clear>
 8006e86:	e5e7      	b.n	8006a58 <main+0x244>
 8006e88:	20000514 	.word	0x20000514
 8006e8c:	20000510 	.word	0x20000510
 8006e90:	20000504 	.word	0x20000504
 8006e94:	20000503 	.word	0x20000503

08006e98 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	9303      	str	r3, [sp, #12]
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <HAL_FMC_MspInit+0xa8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	b10b      	cbz	r3, 8006eb2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006eae:	b007      	add	sp, #28
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8006eb2:	4b23      	ldr	r3, [pc, #140]	; (8006f40 <HAL_FMC_MspInit+0xa8>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006eb8:	4b22      	ldr	r3, [pc, #136]	; (8006f44 <HAL_FMC_MspInit+0xac>)
 8006eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8006ecc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006ed0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed2:	2602      	movs	r6, #2
 8006ed4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ed6:	2503      	movs	r5, #3
 8006ed8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006eda:	240c      	movs	r4, #12
 8006edc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ede:	a901      	add	r1, sp, #4
 8006ee0:	4819      	ldr	r0, [pc, #100]	; (8006f48 <HAL_FMC_MspInit+0xb0>)
 8006ee2:	f7fb fd75 	bl	80029d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8006ee6:	f248 1311 	movw	r3, #33041	; 0x8111
 8006eea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eec:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2700      	movs	r7, #0
 8006ef0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006ef4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ef6:	a901      	add	r1, sp, #4
 8006ef8:	4814      	ldr	r0, [pc, #80]	; (8006f4c <HAL_FMC_MspInit+0xb4>)
 8006efa:	f7fb fd69 	bl	80029d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8006efe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f02:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f04:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f08:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f0a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f0c:	a901      	add	r1, sp, #4
 8006f0e:	4810      	ldr	r0, [pc, #64]	; (8006f50 <HAL_FMC_MspInit+0xb8>)
 8006f10:	f7fb fd5e 	bl	80029d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006f14:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006f18:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f1e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f20:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f22:	a901      	add	r1, sp, #4
 8006f24:	480b      	ldr	r0, [pc, #44]	; (8006f54 <HAL_FMC_MspInit+0xbc>)
 8006f26:	f7fb fd53 	bl	80029d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8006f2a:	232c      	movs	r3, #44	; 0x2c
 8006f2c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f32:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f34:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006f36:	a901      	add	r1, sp, #4
 8006f38:	4807      	ldr	r0, [pc, #28]	; (8006f58 <HAL_FMC_MspInit+0xc0>)
 8006f3a:	f7fb fd49 	bl	80029d0 <HAL_GPIO_Init>
 8006f3e:	e7b6      	b.n	8006eae <HAL_FMC_MspInit+0x16>
 8006f40:	20000530 	.word	0x20000530
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	40021800 	.word	0x40021800
 8006f50:	40020c00 	.word	0x40020c00
 8006f54:	40021400 	.word	0x40021400
 8006f58:	40021c00 	.word	0x40021c00

08006f5c <HAL_MspInit>:
{
 8006f5c:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <HAL_MspInit+0x2c>)
 8006f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
 8006f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f6a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006f6e:	9200      	str	r2, [sp, #0]
 8006f70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f78:	645a      	str	r2, [r3, #68]	; 0x44
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	9b01      	ldr	r3, [sp, #4]
}
 8006f84:	b002      	add	sp, #8
 8006f86:	4770      	bx	lr
 8006f88:	40023800 	.word	0x40023800

08006f8c <HAL_ADC_MspInit>:
{
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	2300      	movs	r3, #0
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	9305      	str	r3, [sp, #20]
 8006f98:	9306      	str	r3, [sp, #24]
 8006f9a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8006f9c:	6802      	ldr	r2, [r0, #0]
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <HAL_ADC_MspInit+0x7c>)
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_ADC_MspInit+0x1c>
}
 8006fa4:	b008      	add	sp, #32
 8006fa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006fa8:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8006fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44
 8006fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006fba:	9200      	str	r2, [sp, #0]
 8006fbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc0:	f042 0220 	orr.w	r2, r2, #32
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc8:	f002 0220 	and.w	r2, r2, #32
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8006fe2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006fe6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fe8:	2403      	movs	r4, #3
 8006fea:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fec:	a903      	add	r1, sp, #12
 8006fee:	4807      	ldr	r0, [pc, #28]	; (800700c <HAL_ADC_MspInit+0x80>)
 8006ff0:	f7fb fcee 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ff8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8006ffe:	a903      	add	r1, sp, #12
 8007000:	4803      	ldr	r0, [pc, #12]	; (8007010 <HAL_ADC_MspInit+0x84>)
 8007002:	f7fb fce5 	bl	80029d0 <HAL_GPIO_Init>
}
 8007006:	e7cd      	b.n	8006fa4 <HAL_ADC_MspInit+0x18>
 8007008:	40012200 	.word	0x40012200
 800700c:	40021400 	.word	0x40021400
 8007010:	40020000 	.word	0x40020000

08007014 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8007014:	6802      	ldr	r2, [r0, #0]
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <HAL_CRC_MspInit+0x28>)
 8007018:	429a      	cmp	r2, r3
 800701a:	d000      	beq.n	800701e <HAL_CRC_MspInit+0xa>
 800701c:	4770      	bx	lr
{
 800701e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	9b01      	ldr	r3, [sp, #4]
}
 8007036:	b002      	add	sp, #8
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40023000 	.word	0x40023000

08007040 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8007040:	6802      	ldr	r2, [r0, #0]
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <HAL_DMA2D_MspInit+0x28>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d000      	beq.n	800704a <HAL_DMA2D_MspInit+0xa>
 8007048:	4770      	bx	lr
{
 800704a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800704c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8007050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007052:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	9b01      	ldr	r3, [sp, #4]
}
 8007062:	b002      	add	sp, #8
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	4002b000 	.word	0x4002b000

0800706c <HAL_LTDC_MspInit>:
{
 800706c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007070:	2300      	movs	r3, #0
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	930a      	str	r3, [sp, #40]	; 0x28
 8007076:	930b      	str	r3, [sp, #44]	; 0x2c
 8007078:	930c      	str	r3, [sp, #48]	; 0x30
 800707a:	930d      	str	r3, [sp, #52]	; 0x34
  if(hltdc->Instance==LTDC)
 800707c:	6802      	ldr	r2, [r0, #0]
 800707e:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_LTDC_MspInit+0x1ac>)
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_LTDC_MspInit+0x1c>
}
 8007084:	b00f      	add	sp, #60	; 0x3c
 8007086:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007088:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800708c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007092:	645a      	str	r2, [r3, #68]	; 0x44
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800709a:	9200      	str	r2, [sp, #0]
 800709c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800709e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a0:	f042 0202 	orr.w	r2, r2, #2
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
 80070a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a8:	f002 0202 	and.w	r2, r2, #2
 80070ac:	9201      	str	r2, [sp, #4]
 80070ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80070b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
 80070b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80070be:	9202      	str	r2, [sp, #8]
 80070c0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	f002 0201 	and.w	r2, r2, #1
 80070d0:	9203      	str	r2, [sp, #12]
 80070d2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80070d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
 80070dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80070e2:	9204      	str	r2, [sp, #16]
 80070e4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80070e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
 80070ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80070f4:	9205      	str	r2, [sp, #20]
 80070f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007102:	f002 0208 	and.w	r2, r2, #8
 8007106:	9206      	str	r2, [sp, #24]
 8007108:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
 8007112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007114:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007118:	9207      	str	r2, [sp, #28]
 800711a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800712a:	9308      	str	r3, [sp, #32]
 800712c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800712e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007134:	2502      	movs	r5, #2
 8007136:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007138:	260e      	movs	r6, #14
 800713a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800713c:	a909      	add	r1, sp, #36	; 0x24
 800713e:	4837      	ldr	r0, [pc, #220]	; (800721c <HAL_LTDC_MspInit+0x1b0>)
 8007140:	f7fb fc46 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8007144:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8007148:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800714a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	2400      	movs	r4, #0
 800714e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007150:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007152:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007154:	4f32      	ldr	r7, [pc, #200]	; (8007220 <HAL_LTDC_MspInit+0x1b4>)
 8007156:	a909      	add	r1, sp, #36	; 0x24
 8007158:	4638      	mov	r0, r7
 800715a:	f7fb fc39 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800715e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007168:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800716a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800716c:	a909      	add	r1, sp, #36	; 0x24
 800716e:	482d      	ldr	r0, [pc, #180]	; (8007224 <HAL_LTDC_MspInit+0x1b8>)
 8007170:	f7fb fc2e 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 8007174:	f244 6330 	movw	r3, #17968	; 0x4630
 8007178:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800717a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800717c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800717e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007180:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007182:	a909      	add	r1, sp, #36	; 0x24
 8007184:	4828      	ldr	r0, [pc, #160]	; (8007228 <HAL_LTDC_MspInit+0x1bc>)
 8007186:	f7fb fc23 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 800718a:	2383      	movs	r3, #131	; 0x83
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800718e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007190:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007192:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007194:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8007196:	a909      	add	r1, sp, #36	; 0x24
 8007198:	4824      	ldr	r0, [pc, #144]	; (800722c <HAL_LTDC_MspInit+0x1c0>)
 800719a:	f7fb fc19 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800719e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80071aa:	2309      	movs	r3, #9
 80071ac:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071ae:	a909      	add	r1, sp, #36	; 0x24
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7fb fc0d 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80071b6:	2308      	movs	r3, #8
 80071b8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071bc:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071be:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80071c0:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071c2:	a909      	add	r1, sp, #36	; 0x24
 80071c4:	481a      	ldr	r0, [pc, #104]	; (8007230 <HAL_LTDC_MspInit+0x1c4>)
 80071c6:	f7fb fc03 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80071ca:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d2:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071d4:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80071d6:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80071d8:	a909      	add	r1, sp, #36	; 0x24
 80071da:	4816      	ldr	r0, [pc, #88]	; (8007234 <HAL_LTDC_MspInit+0x1c8>)
 80071dc:	f7fb fbf8 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80071e0:	2320      	movs	r3, #32
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80071ea:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80071ec:	a909      	add	r1, sp, #36	; 0x24
 80071ee:	4812      	ldr	r0, [pc, #72]	; (8007238 <HAL_LTDC_MspInit+0x1cc>)
 80071f0:	f7fb fbee 	bl	80029d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80071f4:	4622      	mov	r2, r4
 80071f6:	4621      	mov	r1, r4
 80071f8:	2058      	movs	r0, #88	; 0x58
 80071fa:	f7fb f88d 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80071fe:	2058      	movs	r0, #88	; 0x58
 8007200:	f7fb f8bc 	bl	800237c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8007204:	4622      	mov	r2, r4
 8007206:	4621      	mov	r1, r4
 8007208:	2059      	movs	r0, #89	; 0x59
 800720a:	f7fb f885 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800720e:	2059      	movs	r0, #89	; 0x59
 8007210:	f7fb f8b4 	bl	800237c <HAL_NVIC_EnableIRQ>
}
 8007214:	e736      	b.n	8007084 <HAL_LTDC_MspInit+0x18>
 8007216:	bf00      	nop
 8007218:	40016800 	.word	0x40016800
 800721c:	40020400 	.word	0x40020400
 8007220:	40021800 	.word	0x40021800
 8007224:	40020000 	.word	0x40020000
 8007228:	40022000 	.word	0x40022000
 800722c:	40022800 	.word	0x40022800
 8007230:	40020c00 	.word	0x40020c00
 8007234:	40021c00 	.word	0x40021c00
 8007238:	40022400 	.word	0x40022400

0800723c <HAL_SPI_MspInit>:
{
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007240:	2300      	movs	r3, #0
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	9306      	str	r3, [sp, #24]
 800724a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800724c:	6802      	ldr	r2, [r0, #0]
 800724e:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <HAL_SPI_MspInit+0x88>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d001      	beq.n	8007258 <HAL_SPI_MspInit+0x1c>
}
 8007254:	b008      	add	sp, #32
 8007256:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007258:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800725c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007262:	641a      	str	r2, [r3, #64]	; 0x40
 8007264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007266:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800726a:	9200      	str	r2, [sp, #0]
 800726c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800726e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
 8007276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007278:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800727c:	9201      	str	r2, [sp, #4]
 800727e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007282:	f042 0202 	orr.w	r2, r2, #2
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	9302      	str	r3, [sp, #8]
 8007290:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007292:	2402      	movs	r4, #2
 8007294:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007296:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007298:	2603      	movs	r6, #3
 800729a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800729c:	2505      	movs	r5, #5
 800729e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80072a0:	a903      	add	r1, sp, #12
 80072a2:	4809      	ldr	r0, [pc, #36]	; (80072c8 <HAL_SPI_MspInit+0x8c>)
 80072a4:	f7fb fb94 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80072a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80072ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ae:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072b6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b8:	a903      	add	r1, sp, #12
 80072ba:	4804      	ldr	r0, [pc, #16]	; (80072cc <HAL_SPI_MspInit+0x90>)
 80072bc:	f7fb fb88 	bl	80029d0 <HAL_GPIO_Init>
}
 80072c0:	e7c8      	b.n	8007254 <HAL_SPI_MspInit+0x18>
 80072c2:	bf00      	nop
 80072c4:	40003800 	.word	0x40003800
 80072c8:	40022000 	.word	0x40022000
 80072cc:	40020400 	.word	0x40020400

080072d0 <HAL_UART_MspInit>:
{
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d4:	2300      	movs	r3, #0
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	9306      	str	r3, [sp, #24]
 80072de:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80072e0:	6802      	ldr	r2, [r0, #0]
 80072e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d001      	beq.n	80072f2 <HAL_UART_MspInit+0x22>
}
 80072ee:	b008      	add	sp, #32
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80072f2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80072f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f8:	f042 0210 	orr.w	r2, r2, #16
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44
 80072fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007300:	f002 0210 	and.w	r2, r2, #16
 8007304:	9200      	str	r2, [sp, #0]
 8007306:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730a:	f042 0202 	orr.w	r2, r2, #2
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
 8007310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007312:	f002 0202 	and.w	r2, r2, #2
 8007316:	9201      	str	r2, [sp, #4]
 8007318:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800731a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731c:	f042 0201 	orr.w	r2, r2, #1
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007330:	2602      	movs	r6, #2
 8007332:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007334:	2503      	movs	r5, #3
 8007336:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007338:	2407      	movs	r4, #7
 800733a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800733c:	a903      	add	r1, sp, #12
 800733e:	4808      	ldr	r0, [pc, #32]	; (8007360 <HAL_UART_MspInit+0x90>)
 8007340:	f7fb fb46 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007348:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734c:	2300      	movs	r3, #0
 800734e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007350:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007352:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007354:	a903      	add	r1, sp, #12
 8007356:	4803      	ldr	r0, [pc, #12]	; (8007364 <HAL_UART_MspInit+0x94>)
 8007358:	f7fb fb3a 	bl	80029d0 <HAL_GPIO_Init>
}
 800735c:	e7c7      	b.n	80072ee <HAL_UART_MspInit+0x1e>
 800735e:	bf00      	nop
 8007360:	40020400 	.word	0x40020400
 8007364:	40020000 	.word	0x40020000

08007368 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800736a:	f7ff fd95 	bl	8006e98 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800736e:	bd08      	pop	{r3, pc}

08007370 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007370:	4770      	bx	lr

08007372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007372:	e7fe      	b.n	8007372 <HardFault_Handler>

08007374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007374:	e7fe      	b.n	8007374 <MemManage_Handler>

08007376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007376:	e7fe      	b.n	8007376 <BusFault_Handler>

08007378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007378:	e7fe      	b.n	8007378 <UsageFault_Handler>

0800737a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800737a:	4770      	bx	lr

0800737c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800737c:	4770      	bx	lr

0800737e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800737e:	4770      	bx	lr

08007380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007382:	f7fa fd05 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007386:	bd08      	pop	{r3, pc}

08007388 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007388:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800738a:	4802      	ldr	r0, [pc, #8]	; (8007394 <LTDC_IRQHandler+0xc>)
 800738c:	f7fc f8f7 	bl	800357e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8007390:	bd08      	pop	{r3, pc}
 8007392:	bf00      	nop
 8007394:	20000724 	.word	0x20000724

08007398 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8007398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800739a:	4802      	ldr	r0, [pc, #8]	; (80073a4 <LTDC_ER_IRQHandler+0xc>)
 800739c:	f7fc f8ef 	bl	800357e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80073a0:	bd08      	pop	{r3, pc}
 80073a2:	bf00      	nop
 80073a4:	20000724 	.word	0x20000724

080073a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80073a8:	b508      	push	{r3, lr}
 80073aa:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80073ac:	4a0b      	ldr	r2, [pc, #44]	; (80073dc <_sbrk+0x34>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	b142      	cbz	r2, 80073c4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80073b2:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <_sbrk+0x34>)
 80073b4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80073b6:	4403      	add	r3, r0
 80073b8:	466a      	mov	r2, sp
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d806      	bhi.n	80073cc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80073be:	4a07      	ldr	r2, [pc, #28]	; (80073dc <_sbrk+0x34>)
 80073c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80073c2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80073c4:	4a05      	ldr	r2, [pc, #20]	; (80073dc <_sbrk+0x34>)
 80073c6:	4906      	ldr	r1, [pc, #24]	; (80073e0 <_sbrk+0x38>)
 80073c8:	6011      	str	r1, [r2, #0]
 80073ca:	e7f2      	b.n	80073b2 <_sbrk+0xa>
		errno = ENOMEM;
 80073cc:	f000 f85c 	bl	8007488 <__errno>
 80073d0:	230c      	movs	r3, #12
 80073d2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d8:	e7f3      	b.n	80073c2 <_sbrk+0x1a>
 80073da:	bf00      	nop
 80073dc:	20000534 	.word	0x20000534
 80073e0:	20000938 	.word	0x20000938

080073e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073e4:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073e6:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <SystemInit+0x40>)
 80073e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80073ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <SystemInit+0x44>)
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	f041 0101 	orr.w	r1, r1, #1
 80073fc:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80073fe:	2000      	movs	r0, #0
 8007400:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007402:	681c      	ldr	r4, [r3, #0]
 8007404:	4909      	ldr	r1, [pc, #36]	; (800742c <SystemInit+0x48>)
 8007406:	4021      	ands	r1, r4
 8007408:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800740a:	4909      	ldr	r1, [pc, #36]	; (8007430 <SystemInit+0x4c>)
 800740c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007414:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007416:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800741c:	6093      	str	r3, [r2, #8]
#endif
}
 800741e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	e000ed00 	.word	0xe000ed00
 8007428:	40023800 	.word	0x40023800
 800742c:	fef6ffff 	.word	0xfef6ffff
 8007430:	24003010 	.word	0x24003010

08007434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800746c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800743a:	e003      	b.n	8007444 <LoopCopyDataInit>

0800743c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800743e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007442:	3104      	adds	r1, #4

08007444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007444:	480b      	ldr	r0, [pc, #44]	; (8007474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800744a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800744c:	d3f6      	bcc.n	800743c <CopyDataInit>
  ldr  r2, =_sbss
 800744e:	4a0b      	ldr	r2, [pc, #44]	; (800747c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007450:	e002      	b.n	8007458 <LoopFillZerobss>

08007452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007454:	f842 3b04 	str.w	r3, [r2], #4

08007458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800745a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800745c:	d3f9      	bcc.n	8007452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800745e:	f7ff ffc1 	bl	80073e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007462:	f000 f817 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007466:	f7ff f9d5 	bl	8006814 <main>
  bx  lr    
 800746a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800746c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007470:	0800df00 	.word	0x0800df00
  ldr  r0, =_sdata
 8007474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007478:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 800747c:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8007480:	20000938 	.word	0x20000938

08007484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007484:	e7fe      	b.n	8007484 <ADC_IRQHandler>
	...

08007488 <__errno>:
 8007488:	4b01      	ldr	r3, [pc, #4]	; (8007490 <__errno+0x8>)
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000058 	.word	0x20000058

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4e0d      	ldr	r6, [pc, #52]	; (80074cc <__libc_init_array+0x38>)
 8007498:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749a:	1ba4      	subs	r4, r4, r6
 800749c:	10a4      	asrs	r4, r4, #2
 800749e:	2500      	movs	r5, #0
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	4e0b      	ldr	r6, [pc, #44]	; (80074d4 <__libc_init_array+0x40>)
 80074a6:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <__libc_init_array+0x44>)
 80074a8:	f003 fdd8 	bl	800b05c <_init>
 80074ac:	1ba4      	subs	r4, r4, r6
 80074ae:	10a4      	asrs	r4, r4, #2
 80074b0:	2500      	movs	r5, #0
 80074b2:	42a5      	cmp	r5, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074bc:	4798      	blx	r3
 80074be:	3501      	adds	r5, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074c6:	4798      	blx	r3
 80074c8:	3501      	adds	r5, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	0800def8 	.word	0x0800def8
 80074d0:	0800def8 	.word	0x0800def8
 80074d4:	0800def8 	.word	0x0800def8
 80074d8:	0800defc 	.word	0x0800defc

080074dc <memcpy>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	1e43      	subs	r3, r0, #1
 80074e0:	440a      	add	r2, r1
 80074e2:	4291      	cmp	r1, r2
 80074e4:	d100      	bne.n	80074e8 <memcpy+0xc>
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f0:	e7f7      	b.n	80074e2 <memcpy+0x6>

080074f2 <memset>:
 80074f2:	4402      	add	r2, r0
 80074f4:	4603      	mov	r3, r0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d100      	bne.n	80074fc <memset+0xa>
 80074fa:	4770      	bx	lr
 80074fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007500:	e7f9      	b.n	80074f6 <memset+0x4>

08007502 <__cvt>:
 8007502:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007506:	ec55 4b10 	vmov	r4, r5, d0
 800750a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800750c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007510:	2d00      	cmp	r5, #0
 8007512:	460e      	mov	r6, r1
 8007514:	4691      	mov	r9, r2
 8007516:	4619      	mov	r1, r3
 8007518:	bfb8      	it	lt
 800751a:	4622      	movlt	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	f027 0720 	bic.w	r7, r7, #32
 8007522:	bfbb      	ittet	lt
 8007524:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007528:	461d      	movlt	r5, r3
 800752a:	2300      	movge	r3, #0
 800752c:	232d      	movlt	r3, #45	; 0x2d
 800752e:	bfb8      	it	lt
 8007530:	4614      	movlt	r4, r2
 8007532:	2f46      	cmp	r7, #70	; 0x46
 8007534:	700b      	strb	r3, [r1, #0]
 8007536:	d004      	beq.n	8007542 <__cvt+0x40>
 8007538:	2f45      	cmp	r7, #69	; 0x45
 800753a:	d100      	bne.n	800753e <__cvt+0x3c>
 800753c:	3601      	adds	r6, #1
 800753e:	2102      	movs	r1, #2
 8007540:	e000      	b.n	8007544 <__cvt+0x42>
 8007542:	2103      	movs	r1, #3
 8007544:	ab03      	add	r3, sp, #12
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	ab02      	add	r3, sp, #8
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4632      	mov	r2, r6
 800754e:	4653      	mov	r3, sl
 8007550:	ec45 4b10 	vmov	d0, r4, r5
 8007554:	f001 fdac 	bl	80090b0 <_dtoa_r>
 8007558:	2f47      	cmp	r7, #71	; 0x47
 800755a:	4680      	mov	r8, r0
 800755c:	d102      	bne.n	8007564 <__cvt+0x62>
 800755e:	f019 0f01 	tst.w	r9, #1
 8007562:	d026      	beq.n	80075b2 <__cvt+0xb0>
 8007564:	2f46      	cmp	r7, #70	; 0x46
 8007566:	eb08 0906 	add.w	r9, r8, r6
 800756a:	d111      	bne.n	8007590 <__cvt+0x8e>
 800756c:	f898 3000 	ldrb.w	r3, [r8]
 8007570:	2b30      	cmp	r3, #48	; 0x30
 8007572:	d10a      	bne.n	800758a <__cvt+0x88>
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	f7f9 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 8007580:	b918      	cbnz	r0, 800758a <__cvt+0x88>
 8007582:	f1c6 0601 	rsb	r6, r6, #1
 8007586:	f8ca 6000 	str.w	r6, [sl]
 800758a:	f8da 3000 	ldr.w	r3, [sl]
 800758e:	4499      	add	r9, r3
 8007590:	2200      	movs	r2, #0
 8007592:	2300      	movs	r3, #0
 8007594:	4620      	mov	r0, r4
 8007596:	4629      	mov	r1, r5
 8007598:	f7f9 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800759c:	b938      	cbnz	r0, 80075ae <__cvt+0xac>
 800759e:	2230      	movs	r2, #48	; 0x30
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	454b      	cmp	r3, r9
 80075a4:	d205      	bcs.n	80075b2 <__cvt+0xb0>
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	9103      	str	r1, [sp, #12]
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e7f8      	b.n	80075a0 <__cvt+0x9e>
 80075ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075b6:	eba3 0308 	sub.w	r3, r3, r8
 80075ba:	4640      	mov	r0, r8
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	b004      	add	sp, #16
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075c4 <__exponent>:
 80075c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c6:	2900      	cmp	r1, #0
 80075c8:	4604      	mov	r4, r0
 80075ca:	bfba      	itte	lt
 80075cc:	4249      	neglt	r1, r1
 80075ce:	232d      	movlt	r3, #45	; 0x2d
 80075d0:	232b      	movge	r3, #43	; 0x2b
 80075d2:	2909      	cmp	r1, #9
 80075d4:	f804 2b02 	strb.w	r2, [r4], #2
 80075d8:	7043      	strb	r3, [r0, #1]
 80075da:	dd20      	ble.n	800761e <__exponent+0x5a>
 80075dc:	f10d 0307 	add.w	r3, sp, #7
 80075e0:	461f      	mov	r7, r3
 80075e2:	260a      	movs	r6, #10
 80075e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80075e8:	fb06 1115 	mls	r1, r6, r5, r1
 80075ec:	3130      	adds	r1, #48	; 0x30
 80075ee:	2d09      	cmp	r5, #9
 80075f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075f4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80075f8:	4629      	mov	r1, r5
 80075fa:	dc09      	bgt.n	8007610 <__exponent+0x4c>
 80075fc:	3130      	adds	r1, #48	; 0x30
 80075fe:	3b02      	subs	r3, #2
 8007600:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007604:	42bb      	cmp	r3, r7
 8007606:	4622      	mov	r2, r4
 8007608:	d304      	bcc.n	8007614 <__exponent+0x50>
 800760a:	1a10      	subs	r0, r2, r0
 800760c:	b003      	add	sp, #12
 800760e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007610:	4613      	mov	r3, r2
 8007612:	e7e7      	b.n	80075e4 <__exponent+0x20>
 8007614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007618:	f804 2b01 	strb.w	r2, [r4], #1
 800761c:	e7f2      	b.n	8007604 <__exponent+0x40>
 800761e:	2330      	movs	r3, #48	; 0x30
 8007620:	4419      	add	r1, r3
 8007622:	7083      	strb	r3, [r0, #2]
 8007624:	1d02      	adds	r2, r0, #4
 8007626:	70c1      	strb	r1, [r0, #3]
 8007628:	e7ef      	b.n	800760a <__exponent+0x46>
	...

0800762c <_printf_float>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	b08d      	sub	sp, #52	; 0x34
 8007632:	460c      	mov	r4, r1
 8007634:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007638:	4616      	mov	r6, r2
 800763a:	461f      	mov	r7, r3
 800763c:	4605      	mov	r5, r0
 800763e:	f002 fe1b 	bl	800a278 <_localeconv_r>
 8007642:	6803      	ldr	r3, [r0, #0]
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	4618      	mov	r0, r3
 8007648:	f7f8 fde2 	bl	8000210 <strlen>
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	; 0x28
 8007650:	f8d8 3000 	ldr.w	r3, [r8]
 8007654:	9005      	str	r0, [sp, #20]
 8007656:	3307      	adds	r3, #7
 8007658:	f023 0307 	bic.w	r3, r3, #7
 800765c:	f103 0208 	add.w	r2, r3, #8
 8007660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007664:	f8d4 b000 	ldr.w	fp, [r4]
 8007668:	f8c8 2000 	str.w	r2, [r8]
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007674:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007678:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767c:	9307      	str	r3, [sp, #28]
 800767e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007686:	4ba7      	ldr	r3, [pc, #668]	; (8007924 <_printf_float+0x2f8>)
 8007688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768c:	f7f9 fa6e 	bl	8000b6c <__aeabi_dcmpun>
 8007690:	bb70      	cbnz	r0, 80076f0 <_printf_float+0xc4>
 8007692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007696:	4ba3      	ldr	r3, [pc, #652]	; (8007924 <_printf_float+0x2f8>)
 8007698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769c:	f7f9 fa48 	bl	8000b30 <__aeabi_dcmple>
 80076a0:	bb30      	cbnz	r0, 80076f0 <_printf_float+0xc4>
 80076a2:	2200      	movs	r2, #0
 80076a4:	2300      	movs	r3, #0
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f9 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80076ae:	b110      	cbz	r0, 80076b6 <_printf_float+0x8a>
 80076b0:	232d      	movs	r3, #45	; 0x2d
 80076b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b6:	4a9c      	ldr	r2, [pc, #624]	; (8007928 <_printf_float+0x2fc>)
 80076b8:	4b9c      	ldr	r3, [pc, #624]	; (800792c <_printf_float+0x300>)
 80076ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076be:	bf8c      	ite	hi
 80076c0:	4690      	movhi	r8, r2
 80076c2:	4698      	movls	r8, r3
 80076c4:	2303      	movs	r3, #3
 80076c6:	f02b 0204 	bic.w	r2, fp, #4
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	6022      	str	r2, [r4, #0]
 80076ce:	f04f 0900 	mov.w	r9, #0
 80076d2:	9700      	str	r7, [sp, #0]
 80076d4:	4633      	mov	r3, r6
 80076d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80076d8:	4621      	mov	r1, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f9e6 	bl	8007aac <_printf_common>
 80076e0:	3001      	adds	r0, #1
 80076e2:	f040 808d 	bne.w	8007800 <_printf_float+0x1d4>
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ea:	b00d      	add	sp, #52	; 0x34
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	4640      	mov	r0, r8
 80076f6:	4649      	mov	r1, r9
 80076f8:	f7f9 fa38 	bl	8000b6c <__aeabi_dcmpun>
 80076fc:	b110      	cbz	r0, 8007704 <_printf_float+0xd8>
 80076fe:	4a8c      	ldr	r2, [pc, #560]	; (8007930 <_printf_float+0x304>)
 8007700:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <_printf_float+0x308>)
 8007702:	e7da      	b.n	80076ba <_printf_float+0x8e>
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	1c4b      	adds	r3, r1, #1
 8007708:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800770c:	a80a      	add	r0, sp, #40	; 0x28
 800770e:	d13e      	bne.n	800778e <_printf_float+0x162>
 8007710:	2306      	movs	r3, #6
 8007712:	6063      	str	r3, [r4, #4]
 8007714:	2300      	movs	r3, #0
 8007716:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800771a:	ab09      	add	r3, sp, #36	; 0x24
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	ec49 8b10 	vmov	d0, r8, r9
 8007722:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	f8cd a004 	str.w	sl, [sp, #4]
 800772c:	6861      	ldr	r1, [r4, #4]
 800772e:	4628      	mov	r0, r5
 8007730:	f7ff fee7 	bl	8007502 <__cvt>
 8007734:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007738:	2b47      	cmp	r3, #71	; 0x47
 800773a:	4680      	mov	r8, r0
 800773c:	d109      	bne.n	8007752 <_printf_float+0x126>
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	1cd8      	adds	r0, r3, #3
 8007742:	db02      	blt.n	800774a <_printf_float+0x11e>
 8007744:	6862      	ldr	r2, [r4, #4]
 8007746:	4293      	cmp	r3, r2
 8007748:	dd47      	ble.n	80077da <_printf_float+0x1ae>
 800774a:	f1aa 0a02 	sub.w	sl, sl, #2
 800774e:	fa5f fa8a 	uxtb.w	sl, sl
 8007752:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007758:	d824      	bhi.n	80077a4 <_printf_float+0x178>
 800775a:	3901      	subs	r1, #1
 800775c:	4652      	mov	r2, sl
 800775e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007762:	9109      	str	r1, [sp, #36]	; 0x24
 8007764:	f7ff ff2e 	bl	80075c4 <__exponent>
 8007768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776a:	1813      	adds	r3, r2, r0
 800776c:	2a01      	cmp	r2, #1
 800776e:	4681      	mov	r9, r0
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	dc02      	bgt.n	800777a <_printf_float+0x14e>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	07d1      	lsls	r1, r2, #31
 8007778:	d501      	bpl.n	800777e <_printf_float+0x152>
 800777a:	3301      	adds	r3, #1
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0a5      	beq.n	80076d2 <_printf_float+0xa6>
 8007786:	232d      	movs	r3, #45	; 0x2d
 8007788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778c:	e7a1      	b.n	80076d2 <_printf_float+0xa6>
 800778e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007792:	f000 8177 	beq.w	8007a84 <_printf_float+0x458>
 8007796:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800779a:	d1bb      	bne.n	8007714 <_printf_float+0xe8>
 800779c:	2900      	cmp	r1, #0
 800779e:	d1b9      	bne.n	8007714 <_printf_float+0xe8>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7b6      	b.n	8007712 <_printf_float+0xe6>
 80077a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80077a8:	d119      	bne.n	80077de <_printf_float+0x1b2>
 80077aa:	2900      	cmp	r1, #0
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	dd0c      	ble.n	80077ca <_printf_float+0x19e>
 80077b0:	6121      	str	r1, [r4, #16]
 80077b2:	b913      	cbnz	r3, 80077ba <_printf_float+0x18e>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	07d2      	lsls	r2, r2, #31
 80077b8:	d502      	bpl.n	80077c0 <_printf_float+0x194>
 80077ba:	3301      	adds	r3, #1
 80077bc:	440b      	add	r3, r1
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	e7d9      	b.n	800777e <_printf_float+0x152>
 80077ca:	b913      	cbnz	r3, 80077d2 <_printf_float+0x1a6>
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	07d0      	lsls	r0, r2, #31
 80077d0:	d501      	bpl.n	80077d6 <_printf_float+0x1aa>
 80077d2:	3302      	adds	r3, #2
 80077d4:	e7f3      	b.n	80077be <_printf_float+0x192>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e7f1      	b.n	80077be <_printf_float+0x192>
 80077da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80077de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077e2:	4293      	cmp	r3, r2
 80077e4:	db05      	blt.n	80077f2 <_printf_float+0x1c6>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	6123      	str	r3, [r4, #16]
 80077ea:	07d1      	lsls	r1, r2, #31
 80077ec:	d5e8      	bpl.n	80077c0 <_printf_float+0x194>
 80077ee:	3301      	adds	r3, #1
 80077f0:	e7e5      	b.n	80077be <_printf_float+0x192>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfd4      	ite	le
 80077f6:	f1c3 0302 	rsble	r3, r3, #2
 80077fa:	2301      	movgt	r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	e7de      	b.n	80077be <_printf_float+0x192>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	055a      	lsls	r2, r3, #21
 8007804:	d407      	bmi.n	8007816 <_printf_float+0x1ea>
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	4642      	mov	r2, r8
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	d12b      	bne.n	800786c <_printf_float+0x240>
 8007814:	e767      	b.n	80076e6 <_printf_float+0xba>
 8007816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800781a:	f240 80dc 	bls.w	80079d6 <_printf_float+0x3aa>
 800781e:	2200      	movs	r2, #0
 8007820:	2300      	movs	r3, #0
 8007822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007826:	f7f9 f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800782a:	2800      	cmp	r0, #0
 800782c:	d033      	beq.n	8007896 <_printf_float+0x26a>
 800782e:	2301      	movs	r3, #1
 8007830:	4a41      	ldr	r2, [pc, #260]	; (8007938 <_printf_float+0x30c>)
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	47b8      	blx	r7
 8007838:	3001      	adds	r0, #1
 800783a:	f43f af54 	beq.w	80076e6 <_printf_float+0xba>
 800783e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007842:	429a      	cmp	r2, r3
 8007844:	db02      	blt.n	800784c <_printf_float+0x220>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	07d8      	lsls	r0, r3, #31
 800784a:	d50f      	bpl.n	800786c <_printf_float+0x240>
 800784c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af45 	beq.w	80076e6 <_printf_float+0xba>
 800785c:	f04f 0800 	mov.w	r8, #0
 8007860:	f104 091a 	add.w	r9, r4, #26
 8007864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007866:	3b01      	subs	r3, #1
 8007868:	4543      	cmp	r3, r8
 800786a:	dc09      	bgt.n	8007880 <_printf_float+0x254>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	079b      	lsls	r3, r3, #30
 8007870:	f100 8103 	bmi.w	8007a7a <_printf_float+0x44e>
 8007874:	68e0      	ldr	r0, [r4, #12]
 8007876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007878:	4298      	cmp	r0, r3
 800787a:	bfb8      	it	lt
 800787c:	4618      	movlt	r0, r3
 800787e:	e734      	b.n	80076ea <_printf_float+0xbe>
 8007880:	2301      	movs	r3, #1
 8007882:	464a      	mov	r2, r9
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	f43f af2b 	beq.w	80076e6 <_printf_float+0xba>
 8007890:	f108 0801 	add.w	r8, r8, #1
 8007894:	e7e6      	b.n	8007864 <_printf_float+0x238>
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	dc2b      	bgt.n	80078f4 <_printf_float+0x2c8>
 800789c:	2301      	movs	r3, #1
 800789e:	4a26      	ldr	r2, [pc, #152]	; (8007938 <_printf_float+0x30c>)
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f af1d 	beq.w	80076e6 <_printf_float+0xba>
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	b923      	cbnz	r3, 80078ba <_printf_float+0x28e>
 80078b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b2:	b913      	cbnz	r3, 80078ba <_printf_float+0x28e>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	07d9      	lsls	r1, r3, #31
 80078b8:	d5d8      	bpl.n	800786c <_printf_float+0x240>
 80078ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f af0e 	beq.w	80076e6 <_printf_float+0xba>
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	f104 0a1a 	add.w	sl, r4, #26
 80078d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d4:	425b      	negs	r3, r3
 80078d6:	454b      	cmp	r3, r9
 80078d8:	dc01      	bgt.n	80078de <_printf_float+0x2b2>
 80078da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078dc:	e794      	b.n	8007808 <_printf_float+0x1dc>
 80078de:	2301      	movs	r3, #1
 80078e0:	4652      	mov	r2, sl
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f aefc 	beq.w	80076e6 <_printf_float+0xba>
 80078ee:	f109 0901 	add.w	r9, r9, #1
 80078f2:	e7ee      	b.n	80078d2 <_printf_float+0x2a6>
 80078f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078f8:	429a      	cmp	r2, r3
 80078fa:	bfa8      	it	ge
 80078fc:	461a      	movge	r2, r3
 80078fe:	2a00      	cmp	r2, #0
 8007900:	4691      	mov	r9, r2
 8007902:	dd07      	ble.n	8007914 <_printf_float+0x2e8>
 8007904:	4613      	mov	r3, r2
 8007906:	4631      	mov	r1, r6
 8007908:	4642      	mov	r2, r8
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f aee9 	beq.w	80076e6 <_printf_float+0xba>
 8007914:	f104 031a 	add.w	r3, r4, #26
 8007918:	f04f 0b00 	mov.w	fp, #0
 800791c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007920:	9306      	str	r3, [sp, #24]
 8007922:	e015      	b.n	8007950 <_printf_float+0x324>
 8007924:	7fefffff 	.word	0x7fefffff
 8007928:	0800dc3c 	.word	0x0800dc3c
 800792c:	0800dc38 	.word	0x0800dc38
 8007930:	0800dc44 	.word	0x0800dc44
 8007934:	0800dc40 	.word	0x0800dc40
 8007938:	0800dc48 	.word	0x0800dc48
 800793c:	2301      	movs	r3, #1
 800793e:	9a06      	ldr	r2, [sp, #24]
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f aecd 	beq.w	80076e6 <_printf_float+0xba>
 800794c:	f10b 0b01 	add.w	fp, fp, #1
 8007950:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007954:	ebaa 0309 	sub.w	r3, sl, r9
 8007958:	455b      	cmp	r3, fp
 800795a:	dcef      	bgt.n	800793c <_printf_float+0x310>
 800795c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007960:	429a      	cmp	r2, r3
 8007962:	44d0      	add	r8, sl
 8007964:	db15      	blt.n	8007992 <_printf_float+0x366>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	07da      	lsls	r2, r3, #31
 800796a:	d412      	bmi.n	8007992 <_printf_float+0x366>
 800796c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007970:	eba3 020a 	sub.w	r2, r3, sl
 8007974:	eba3 0a01 	sub.w	sl, r3, r1
 8007978:	4592      	cmp	sl, r2
 800797a:	bfa8      	it	ge
 800797c:	4692      	movge	sl, r2
 800797e:	f1ba 0f00 	cmp.w	sl, #0
 8007982:	dc0e      	bgt.n	80079a2 <_printf_float+0x376>
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800798c:	f104 091a 	add.w	r9, r4, #26
 8007990:	e019      	b.n	80079c6 <_printf_float+0x39a>
 8007992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	d1e5      	bne.n	800796c <_printf_float+0x340>
 80079a0:	e6a1      	b.n	80076e6 <_printf_float+0xba>
 80079a2:	4653      	mov	r3, sl
 80079a4:	4642      	mov	r2, r8
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1e9      	bne.n	8007984 <_printf_float+0x358>
 80079b0:	e699      	b.n	80076e6 <_printf_float+0xba>
 80079b2:	2301      	movs	r3, #1
 80079b4:	464a      	mov	r2, r9
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae92 	beq.w	80076e6 <_printf_float+0xba>
 80079c2:	f108 0801 	add.w	r8, r8, #1
 80079c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	eba3 030a 	sub.w	r3, r3, sl
 80079d0:	4543      	cmp	r3, r8
 80079d2:	dcee      	bgt.n	80079b2 <_printf_float+0x386>
 80079d4:	e74a      	b.n	800786c <_printf_float+0x240>
 80079d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d8:	2a01      	cmp	r2, #1
 80079da:	dc01      	bgt.n	80079e0 <_printf_float+0x3b4>
 80079dc:	07db      	lsls	r3, r3, #31
 80079de:	d53a      	bpl.n	8007a56 <_printf_float+0x42a>
 80079e0:	2301      	movs	r3, #1
 80079e2:	4642      	mov	r2, r8
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	f43f ae7b 	beq.w	80076e6 <_printf_float+0xba>
 80079f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f108 0801 	add.w	r8, r8, #1
 8007a00:	f43f ae71 	beq.w	80076e6 <_printf_float+0xba>
 8007a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a06:	2200      	movs	r2, #0
 8007a08:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a10:	2300      	movs	r3, #0
 8007a12:	f7f9 f879 	bl	8000b08 <__aeabi_dcmpeq>
 8007a16:	b9c8      	cbnz	r0, 8007a4c <_printf_float+0x420>
 8007a18:	4653      	mov	r3, sl
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	d10e      	bne.n	8007a44 <_printf_float+0x418>
 8007a26:	e65e      	b.n	80076e6 <_printf_float+0xba>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f ae57 	beq.w	80076e6 <_printf_float+0xba>
 8007a38:	f108 0801 	add.w	r8, r8, #1
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	4543      	cmp	r3, r8
 8007a42:	dcf1      	bgt.n	8007a28 <_printf_float+0x3fc>
 8007a44:	464b      	mov	r3, r9
 8007a46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a4a:	e6de      	b.n	800780a <_printf_float+0x1de>
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	f104 0a1a 	add.w	sl, r4, #26
 8007a54:	e7f2      	b.n	8007a3c <_printf_float+0x410>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e7df      	b.n	8007a1a <_printf_float+0x3ee>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	464a      	mov	r2, r9
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	f43f ae3e 	beq.w	80076e6 <_printf_float+0xba>
 8007a6a:	f108 0801 	add.w	r8, r8, #1
 8007a6e:	68e3      	ldr	r3, [r4, #12]
 8007a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	4543      	cmp	r3, r8
 8007a76:	dcf0      	bgt.n	8007a5a <_printf_float+0x42e>
 8007a78:	e6fc      	b.n	8007874 <_printf_float+0x248>
 8007a7a:	f04f 0800 	mov.w	r8, #0
 8007a7e:	f104 0919 	add.w	r9, r4, #25
 8007a82:	e7f4      	b.n	8007a6e <_printf_float+0x442>
 8007a84:	2900      	cmp	r1, #0
 8007a86:	f43f ae8b 	beq.w	80077a0 <_printf_float+0x174>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a90:	ab09      	add	r3, sp, #36	; 0x24
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	ec49 8b10 	vmov	d0, r8, r9
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	f8cd a004 	str.w	sl, [sp, #4]
 8007a9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff fd2d 	bl	8007502 <__cvt>
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	e648      	b.n	800773e <_printf_float+0x112>

08007aac <_printf_common>:
 8007aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	4691      	mov	r9, r2
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	688a      	ldr	r2, [r1, #8]
 8007ab6:	690b      	ldr	r3, [r1, #16]
 8007ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	bfb8      	it	lt
 8007ac0:	4613      	movlt	r3, r2
 8007ac2:	f8c9 3000 	str.w	r3, [r9]
 8007ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aca:	4606      	mov	r6, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	b112      	cbz	r2, 8007ad6 <_printf_common+0x2a>
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	f8c9 3000 	str.w	r3, [r9]
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	0699      	lsls	r1, r3, #26
 8007ada:	bf42      	ittt	mi
 8007adc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ae0:	3302      	addmi	r3, #2
 8007ae2:	f8c9 3000 	strmi.w	r3, [r9]
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	f015 0506 	ands.w	r5, r5, #6
 8007aec:	d107      	bne.n	8007afe <_printf_common+0x52>
 8007aee:	f104 0a19 	add.w	sl, r4, #25
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	f8d9 2000 	ldr.w	r2, [r9]
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	42ab      	cmp	r3, r5
 8007afc:	dc28      	bgt.n	8007b50 <_printf_common+0xa4>
 8007afe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	3300      	adds	r3, #0
 8007b06:	bf18      	it	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	0692      	lsls	r2, r2, #26
 8007b0c:	d42d      	bmi.n	8007b6a <_printf_common+0xbe>
 8007b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b12:	4639      	mov	r1, r7
 8007b14:	4630      	mov	r0, r6
 8007b16:	47c0      	blx	r8
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d020      	beq.n	8007b5e <_printf_common+0xb2>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	68e5      	ldr	r5, [r4, #12]
 8007b20:	f8d9 2000 	ldr.w	r2, [r9]
 8007b24:	f003 0306 	and.w	r3, r3, #6
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	bf08      	it	eq
 8007b2c:	1aad      	subeq	r5, r5, r2
 8007b2e:	68a3      	ldr	r3, [r4, #8]
 8007b30:	6922      	ldr	r2, [r4, #16]
 8007b32:	bf0c      	ite	eq
 8007b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b38:	2500      	movne	r5, #0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bfc4      	itt	gt
 8007b3e:	1a9b      	subgt	r3, r3, r2
 8007b40:	18ed      	addgt	r5, r5, r3
 8007b42:	f04f 0900 	mov.w	r9, #0
 8007b46:	341a      	adds	r4, #26
 8007b48:	454d      	cmp	r5, r9
 8007b4a:	d11a      	bne.n	8007b82 <_printf_common+0xd6>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e008      	b.n	8007b62 <_printf_common+0xb6>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4652      	mov	r2, sl
 8007b54:	4639      	mov	r1, r7
 8007b56:	4630      	mov	r0, r6
 8007b58:	47c0      	blx	r8
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d103      	bne.n	8007b66 <_printf_common+0xba>
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b66:	3501      	adds	r5, #1
 8007b68:	e7c3      	b.n	8007af2 <_printf_common+0x46>
 8007b6a:	18e1      	adds	r1, r4, r3
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	2030      	movs	r0, #48	; 0x30
 8007b70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b74:	4422      	add	r2, r4
 8007b76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b7e:	3302      	adds	r3, #2
 8007b80:	e7c5      	b.n	8007b0e <_printf_common+0x62>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4622      	mov	r2, r4
 8007b86:	4639      	mov	r1, r7
 8007b88:	4630      	mov	r0, r6
 8007b8a:	47c0      	blx	r8
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d0e6      	beq.n	8007b5e <_printf_common+0xb2>
 8007b90:	f109 0901 	add.w	r9, r9, #1
 8007b94:	e7d8      	b.n	8007b48 <_printf_common+0x9c>
	...

08007b98 <_printf_i>:
 8007b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	7e09      	ldrb	r1, [r1, #24]
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	296e      	cmp	r1, #110	; 0x6e
 8007ba8:	4617      	mov	r7, r2
 8007baa:	4606      	mov	r6, r0
 8007bac:	4698      	mov	r8, r3
 8007bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb0:	f000 80b3 	beq.w	8007d1a <_printf_i+0x182>
 8007bb4:	d822      	bhi.n	8007bfc <_printf_i+0x64>
 8007bb6:	2963      	cmp	r1, #99	; 0x63
 8007bb8:	d036      	beq.n	8007c28 <_printf_i+0x90>
 8007bba:	d80a      	bhi.n	8007bd2 <_printf_i+0x3a>
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	f000 80b9 	beq.w	8007d34 <_printf_i+0x19c>
 8007bc2:	2958      	cmp	r1, #88	; 0x58
 8007bc4:	f000 8083 	beq.w	8007cce <_printf_i+0x136>
 8007bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bd0:	e032      	b.n	8007c38 <_printf_i+0xa0>
 8007bd2:	2964      	cmp	r1, #100	; 0x64
 8007bd4:	d001      	beq.n	8007bda <_printf_i+0x42>
 8007bd6:	2969      	cmp	r1, #105	; 0x69
 8007bd8:	d1f6      	bne.n	8007bc8 <_printf_i+0x30>
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	6813      	ldr	r3, [r2, #0]
 8007bde:	0605      	lsls	r5, r0, #24
 8007be0:	f103 0104 	add.w	r1, r3, #4
 8007be4:	d52a      	bpl.n	8007c3c <_printf_i+0xa4>
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da03      	bge.n	8007bf6 <_printf_i+0x5e>
 8007bee:	222d      	movs	r2, #45	; 0x2d
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bf6:	486f      	ldr	r0, [pc, #444]	; (8007db4 <_printf_i+0x21c>)
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	e039      	b.n	8007c70 <_printf_i+0xd8>
 8007bfc:	2973      	cmp	r1, #115	; 0x73
 8007bfe:	f000 809d 	beq.w	8007d3c <_printf_i+0x1a4>
 8007c02:	d808      	bhi.n	8007c16 <_printf_i+0x7e>
 8007c04:	296f      	cmp	r1, #111	; 0x6f
 8007c06:	d020      	beq.n	8007c4a <_printf_i+0xb2>
 8007c08:	2970      	cmp	r1, #112	; 0x70
 8007c0a:	d1dd      	bne.n	8007bc8 <_printf_i+0x30>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	f043 0320 	orr.w	r3, r3, #32
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	e003      	b.n	8007c1e <_printf_i+0x86>
 8007c16:	2975      	cmp	r1, #117	; 0x75
 8007c18:	d017      	beq.n	8007c4a <_printf_i+0xb2>
 8007c1a:	2978      	cmp	r1, #120	; 0x78
 8007c1c:	d1d4      	bne.n	8007bc8 <_printf_i+0x30>
 8007c1e:	2378      	movs	r3, #120	; 0x78
 8007c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c24:	4864      	ldr	r0, [pc, #400]	; (8007db8 <_printf_i+0x220>)
 8007c26:	e055      	b.n	8007cd4 <_printf_i+0x13c>
 8007c28:	6813      	ldr	r3, [r2, #0]
 8007c2a:	1d19      	adds	r1, r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6011      	str	r1, [r2, #0]
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e08c      	b.n	8007d56 <_printf_i+0x1be>
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6011      	str	r1, [r2, #0]
 8007c40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c44:	bf18      	it	ne
 8007c46:	b21b      	sxthne	r3, r3
 8007c48:	e7cf      	b.n	8007bea <_printf_i+0x52>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	1d18      	adds	r0, r3, #4
 8007c50:	6010      	str	r0, [r2, #0]
 8007c52:	0628      	lsls	r0, r5, #24
 8007c54:	d501      	bpl.n	8007c5a <_printf_i+0xc2>
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	e002      	b.n	8007c60 <_printf_i+0xc8>
 8007c5a:	0668      	lsls	r0, r5, #25
 8007c5c:	d5fb      	bpl.n	8007c56 <_printf_i+0xbe>
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	4854      	ldr	r0, [pc, #336]	; (8007db4 <_printf_i+0x21c>)
 8007c62:	296f      	cmp	r1, #111	; 0x6f
 8007c64:	bf14      	ite	ne
 8007c66:	220a      	movne	r2, #10
 8007c68:	2208      	moveq	r2, #8
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c70:	6865      	ldr	r5, [r4, #4]
 8007c72:	60a5      	str	r5, [r4, #8]
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	f2c0 8095 	blt.w	8007da4 <_printf_i+0x20c>
 8007c7a:	6821      	ldr	r1, [r4, #0]
 8007c7c:	f021 0104 	bic.w	r1, r1, #4
 8007c80:	6021      	str	r1, [r4, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d13d      	bne.n	8007d02 <_printf_i+0x16a>
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	f040 808e 	bne.w	8007da8 <_printf_i+0x210>
 8007c8c:	4665      	mov	r5, ip
 8007c8e:	2a08      	cmp	r2, #8
 8007c90:	d10b      	bne.n	8007caa <_printf_i+0x112>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	07db      	lsls	r3, r3, #31
 8007c96:	d508      	bpl.n	8007caa <_printf_i+0x112>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	6862      	ldr	r2, [r4, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	bfde      	ittt	le
 8007ca0:	2330      	movle	r3, #48	; 0x30
 8007ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ca6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007caa:	ebac 0305 	sub.w	r3, ip, r5
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	f8cd 8000 	str.w	r8, [sp]
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	aa03      	add	r2, sp, #12
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7ff fef6 	bl	8007aac <_printf_common>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d14d      	bne.n	8007d60 <_printf_i+0x1c8>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc8:	b005      	add	sp, #20
 8007cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cce:	4839      	ldr	r0, [pc, #228]	; (8007db4 <_printf_i+0x21c>)
 8007cd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	6821      	ldr	r1, [r4, #0]
 8007cd8:	1d1d      	adds	r5, r3, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6015      	str	r5, [r2, #0]
 8007cde:	060a      	lsls	r2, r1, #24
 8007ce0:	d50b      	bpl.n	8007cfa <_printf_i+0x162>
 8007ce2:	07ca      	lsls	r2, r1, #31
 8007ce4:	bf44      	itt	mi
 8007ce6:	f041 0120 	orrmi.w	r1, r1, #32
 8007cea:	6021      	strmi	r1, [r4, #0]
 8007cec:	b91b      	cbnz	r3, 8007cf6 <_printf_i+0x15e>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	f022 0220 	bic.w	r2, r2, #32
 8007cf4:	6022      	str	r2, [r4, #0]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	e7b7      	b.n	8007c6a <_printf_i+0xd2>
 8007cfa:	064d      	lsls	r5, r1, #25
 8007cfc:	bf48      	it	mi
 8007cfe:	b29b      	uxthmi	r3, r3
 8007d00:	e7ef      	b.n	8007ce2 <_printf_i+0x14a>
 8007d02:	4665      	mov	r5, ip
 8007d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d08:	fb02 3311 	mls	r3, r2, r1, r3
 8007d0c:	5cc3      	ldrb	r3, [r0, r3]
 8007d0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d12:	460b      	mov	r3, r1
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d1f5      	bne.n	8007d04 <_printf_i+0x16c>
 8007d18:	e7b9      	b.n	8007c8e <_printf_i+0xf6>
 8007d1a:	6813      	ldr	r3, [r2, #0]
 8007d1c:	6825      	ldr	r5, [r4, #0]
 8007d1e:	6961      	ldr	r1, [r4, #20]
 8007d20:	1d18      	adds	r0, r3, #4
 8007d22:	6010      	str	r0, [r2, #0]
 8007d24:	0628      	lsls	r0, r5, #24
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	d501      	bpl.n	8007d2e <_printf_i+0x196>
 8007d2a:	6019      	str	r1, [r3, #0]
 8007d2c:	e002      	b.n	8007d34 <_printf_i+0x19c>
 8007d2e:	066a      	lsls	r2, r5, #25
 8007d30:	d5fb      	bpl.n	8007d2a <_printf_i+0x192>
 8007d32:	8019      	strh	r1, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	4665      	mov	r5, ip
 8007d3a:	e7b9      	b.n	8007cb0 <_printf_i+0x118>
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	1d19      	adds	r1, r3, #4
 8007d40:	6011      	str	r1, [r2, #0]
 8007d42:	681d      	ldr	r5, [r3, #0]
 8007d44:	6862      	ldr	r2, [r4, #4]
 8007d46:	2100      	movs	r1, #0
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7f8 fa69 	bl	8000220 <memchr>
 8007d4e:	b108      	cbz	r0, 8007d54 <_printf_i+0x1bc>
 8007d50:	1b40      	subs	r0, r0, r5
 8007d52:	6060      	str	r0, [r4, #4]
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d5e:	e7a7      	b.n	8007cb0 <_printf_i+0x118>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	462a      	mov	r2, r5
 8007d64:	4639      	mov	r1, r7
 8007d66:	4630      	mov	r0, r6
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0aa      	beq.n	8007cc4 <_printf_i+0x12c>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	079b      	lsls	r3, r3, #30
 8007d72:	d413      	bmi.n	8007d9c <_printf_i+0x204>
 8007d74:	68e0      	ldr	r0, [r4, #12]
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	4298      	cmp	r0, r3
 8007d7a:	bfb8      	it	lt
 8007d7c:	4618      	movlt	r0, r3
 8007d7e:	e7a3      	b.n	8007cc8 <_printf_i+0x130>
 8007d80:	2301      	movs	r3, #1
 8007d82:	464a      	mov	r2, r9
 8007d84:	4639      	mov	r1, r7
 8007d86:	4630      	mov	r0, r6
 8007d88:	47c0      	blx	r8
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d09a      	beq.n	8007cc4 <_printf_i+0x12c>
 8007d8e:	3501      	adds	r5, #1
 8007d90:	68e3      	ldr	r3, [r4, #12]
 8007d92:	9a03      	ldr	r2, [sp, #12]
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	42ab      	cmp	r3, r5
 8007d98:	dcf2      	bgt.n	8007d80 <_printf_i+0x1e8>
 8007d9a:	e7eb      	b.n	8007d74 <_printf_i+0x1dc>
 8007d9c:	2500      	movs	r5, #0
 8007d9e:	f104 0919 	add.w	r9, r4, #25
 8007da2:	e7f5      	b.n	8007d90 <_printf_i+0x1f8>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ac      	bne.n	8007d02 <_printf_i+0x16a>
 8007da8:	7803      	ldrb	r3, [r0, #0]
 8007daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007db2:	e76c      	b.n	8007c8e <_printf_i+0xf6>
 8007db4:	0800dc4a 	.word	0x0800dc4a
 8007db8:	0800dc5b 	.word	0x0800dc5b

08007dbc <_scanf_float>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	688b      	ldr	r3, [r1, #8]
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007dcc:	b087      	sub	sp, #28
 8007dce:	bf83      	ittte	hi
 8007dd0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007dd4:	189b      	addhi	r3, r3, r2
 8007dd6:	9301      	strhi	r3, [sp, #4]
 8007dd8:	2300      	movls	r3, #0
 8007dda:	bf86      	itte	hi
 8007ddc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007de0:	608b      	strhi	r3, [r1, #8]
 8007de2:	9301      	strls	r3, [sp, #4]
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	4688      	mov	r8, r1
 8007de8:	f04f 0b00 	mov.w	fp, #0
 8007dec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007df0:	f848 3b1c 	str.w	r3, [r8], #28
 8007df4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007df8:	4607      	mov	r7, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4645      	mov	r5, r8
 8007dfe:	465a      	mov	r2, fp
 8007e00:	46d9      	mov	r9, fp
 8007e02:	f8cd b008 	str.w	fp, [sp, #8]
 8007e06:	68a1      	ldr	r1, [r4, #8]
 8007e08:	b181      	cbz	r1, 8007e2c <_scanf_float+0x70>
 8007e0a:	6833      	ldr	r3, [r6, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b49      	cmp	r3, #73	; 0x49
 8007e10:	d071      	beq.n	8007ef6 <_scanf_float+0x13a>
 8007e12:	d84d      	bhi.n	8007eb0 <_scanf_float+0xf4>
 8007e14:	2b39      	cmp	r3, #57	; 0x39
 8007e16:	d840      	bhi.n	8007e9a <_scanf_float+0xde>
 8007e18:	2b31      	cmp	r3, #49	; 0x31
 8007e1a:	f080 8088 	bcs.w	8007f2e <_scanf_float+0x172>
 8007e1e:	2b2d      	cmp	r3, #45	; 0x2d
 8007e20:	f000 8090 	beq.w	8007f44 <_scanf_float+0x188>
 8007e24:	d815      	bhi.n	8007e52 <_scanf_float+0x96>
 8007e26:	2b2b      	cmp	r3, #43	; 0x2b
 8007e28:	f000 808c 	beq.w	8007f44 <_scanf_float+0x188>
 8007e2c:	f1b9 0f00 	cmp.w	r9, #0
 8007e30:	d003      	beq.n	8007e3a <_scanf_float+0x7e>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	2a01      	cmp	r2, #1
 8007e3e:	f200 80ea 	bhi.w	8008016 <_scanf_float+0x25a>
 8007e42:	4545      	cmp	r5, r8
 8007e44:	f200 80dc 	bhi.w	8008000 <_scanf_float+0x244>
 8007e48:	2601      	movs	r6, #1
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	b007      	add	sp, #28
 8007e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e52:	2b2e      	cmp	r3, #46	; 0x2e
 8007e54:	f000 809f 	beq.w	8007f96 <_scanf_float+0x1da>
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d1e7      	bne.n	8007e2c <_scanf_float+0x70>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007e62:	d064      	beq.n	8007f2e <_scanf_float+0x172>
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f109 0901 	add.w	r9, r9, #1
 8007e70:	b11b      	cbz	r3, 8007e7a <_scanf_float+0xbe>
 8007e72:	3b01      	subs	r3, #1
 8007e74:	3101      	adds	r1, #1
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	60a1      	str	r1, [r4, #8]
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	3301      	adds	r3, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	6873      	ldr	r3, [r6, #4]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	6073      	str	r3, [r6, #4]
 8007e8e:	f340 80ac 	ble.w	8007fea <_scanf_float+0x22e>
 8007e92:	6833      	ldr	r3, [r6, #0]
 8007e94:	3301      	adds	r3, #1
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	e7b5      	b.n	8007e06 <_scanf_float+0x4a>
 8007e9a:	2b45      	cmp	r3, #69	; 0x45
 8007e9c:	f000 8085 	beq.w	8007faa <_scanf_float+0x1ee>
 8007ea0:	2b46      	cmp	r3, #70	; 0x46
 8007ea2:	d06a      	beq.n	8007f7a <_scanf_float+0x1be>
 8007ea4:	2b41      	cmp	r3, #65	; 0x41
 8007ea6:	d1c1      	bne.n	8007e2c <_scanf_float+0x70>
 8007ea8:	2a01      	cmp	r2, #1
 8007eaa:	d1bf      	bne.n	8007e2c <_scanf_float+0x70>
 8007eac:	2202      	movs	r2, #2
 8007eae:	e046      	b.n	8007f3e <_scanf_float+0x182>
 8007eb0:	2b65      	cmp	r3, #101	; 0x65
 8007eb2:	d07a      	beq.n	8007faa <_scanf_float+0x1ee>
 8007eb4:	d818      	bhi.n	8007ee8 <_scanf_float+0x12c>
 8007eb6:	2b54      	cmp	r3, #84	; 0x54
 8007eb8:	d066      	beq.n	8007f88 <_scanf_float+0x1cc>
 8007eba:	d811      	bhi.n	8007ee0 <_scanf_float+0x124>
 8007ebc:	2b4e      	cmp	r3, #78	; 0x4e
 8007ebe:	d1b5      	bne.n	8007e2c <_scanf_float+0x70>
 8007ec0:	2a00      	cmp	r2, #0
 8007ec2:	d146      	bne.n	8007f52 <_scanf_float+0x196>
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	d145      	bne.n	8007f56 <_scanf_float+0x19a>
 8007eca:	6821      	ldr	r1, [r4, #0]
 8007ecc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007ed0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007ed4:	d13f      	bne.n	8007f56 <_scanf_float+0x19a>
 8007ed6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007eda:	6021      	str	r1, [r4, #0]
 8007edc:	2201      	movs	r2, #1
 8007ede:	e02e      	b.n	8007f3e <_scanf_float+0x182>
 8007ee0:	2b59      	cmp	r3, #89	; 0x59
 8007ee2:	d01e      	beq.n	8007f22 <_scanf_float+0x166>
 8007ee4:	2b61      	cmp	r3, #97	; 0x61
 8007ee6:	e7de      	b.n	8007ea6 <_scanf_float+0xea>
 8007ee8:	2b6e      	cmp	r3, #110	; 0x6e
 8007eea:	d0e9      	beq.n	8007ec0 <_scanf_float+0x104>
 8007eec:	d815      	bhi.n	8007f1a <_scanf_float+0x15e>
 8007eee:	2b66      	cmp	r3, #102	; 0x66
 8007ef0:	d043      	beq.n	8007f7a <_scanf_float+0x1be>
 8007ef2:	2b69      	cmp	r3, #105	; 0x69
 8007ef4:	d19a      	bne.n	8007e2c <_scanf_float+0x70>
 8007ef6:	f1bb 0f00 	cmp.w	fp, #0
 8007efa:	d138      	bne.n	8007f6e <_scanf_float+0x1b2>
 8007efc:	f1b9 0f00 	cmp.w	r9, #0
 8007f00:	d197      	bne.n	8007e32 <_scanf_float+0x76>
 8007f02:	6821      	ldr	r1, [r4, #0]
 8007f04:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007f08:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007f0c:	d195      	bne.n	8007e3a <_scanf_float+0x7e>
 8007f0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007f12:	6021      	str	r1, [r4, #0]
 8007f14:	f04f 0b01 	mov.w	fp, #1
 8007f18:	e011      	b.n	8007f3e <_scanf_float+0x182>
 8007f1a:	2b74      	cmp	r3, #116	; 0x74
 8007f1c:	d034      	beq.n	8007f88 <_scanf_float+0x1cc>
 8007f1e:	2b79      	cmp	r3, #121	; 0x79
 8007f20:	d184      	bne.n	8007e2c <_scanf_float+0x70>
 8007f22:	f1bb 0f07 	cmp.w	fp, #7
 8007f26:	d181      	bne.n	8007e2c <_scanf_float+0x70>
 8007f28:	f04f 0b08 	mov.w	fp, #8
 8007f2c:	e007      	b.n	8007f3e <_scanf_float+0x182>
 8007f2e:	eb12 0f0b 	cmn.w	r2, fp
 8007f32:	f47f af7b 	bne.w	8007e2c <_scanf_float+0x70>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007f3c:	6021      	str	r1, [r4, #0]
 8007f3e:	702b      	strb	r3, [r5, #0]
 8007f40:	3501      	adds	r5, #1
 8007f42:	e79a      	b.n	8007e7a <_scanf_float+0xbe>
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	0608      	lsls	r0, r1, #24
 8007f48:	f57f af70 	bpl.w	8007e2c <_scanf_float+0x70>
 8007f4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f50:	e7f4      	b.n	8007f3c <_scanf_float+0x180>
 8007f52:	2a02      	cmp	r2, #2
 8007f54:	d047      	beq.n	8007fe6 <_scanf_float+0x22a>
 8007f56:	f1bb 0f01 	cmp.w	fp, #1
 8007f5a:	d003      	beq.n	8007f64 <_scanf_float+0x1a8>
 8007f5c:	f1bb 0f04 	cmp.w	fp, #4
 8007f60:	f47f af64 	bne.w	8007e2c <_scanf_float+0x70>
 8007f64:	f10b 0b01 	add.w	fp, fp, #1
 8007f68:	fa5f fb8b 	uxtb.w	fp, fp
 8007f6c:	e7e7      	b.n	8007f3e <_scanf_float+0x182>
 8007f6e:	f1bb 0f03 	cmp.w	fp, #3
 8007f72:	d0f7      	beq.n	8007f64 <_scanf_float+0x1a8>
 8007f74:	f1bb 0f05 	cmp.w	fp, #5
 8007f78:	e7f2      	b.n	8007f60 <_scanf_float+0x1a4>
 8007f7a:	f1bb 0f02 	cmp.w	fp, #2
 8007f7e:	f47f af55 	bne.w	8007e2c <_scanf_float+0x70>
 8007f82:	f04f 0b03 	mov.w	fp, #3
 8007f86:	e7da      	b.n	8007f3e <_scanf_float+0x182>
 8007f88:	f1bb 0f06 	cmp.w	fp, #6
 8007f8c:	f47f af4e 	bne.w	8007e2c <_scanf_float+0x70>
 8007f90:	f04f 0b07 	mov.w	fp, #7
 8007f94:	e7d3      	b.n	8007f3e <_scanf_float+0x182>
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	0588      	lsls	r0, r1, #22
 8007f9a:	f57f af47 	bpl.w	8007e2c <_scanf_float+0x70>
 8007f9e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007fa2:	6021      	str	r1, [r4, #0]
 8007fa4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fa8:	e7c9      	b.n	8007f3e <_scanf_float+0x182>
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007fb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007fb4:	d006      	beq.n	8007fc4 <_scanf_float+0x208>
 8007fb6:	0548      	lsls	r0, r1, #21
 8007fb8:	f57f af38 	bpl.w	8007e2c <_scanf_float+0x70>
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	f43f af3b 	beq.w	8007e3a <_scanf_float+0x7e>
 8007fc4:	0588      	lsls	r0, r1, #22
 8007fc6:	bf58      	it	pl
 8007fc8:	9802      	ldrpl	r0, [sp, #8]
 8007fca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007fce:	bf58      	it	pl
 8007fd0:	eba9 0000 	subpl.w	r0, r9, r0
 8007fd4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007fd8:	bf58      	it	pl
 8007fda:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007fde:	6021      	str	r1, [r4, #0]
 8007fe0:	f04f 0900 	mov.w	r9, #0
 8007fe4:	e7ab      	b.n	8007f3e <_scanf_float+0x182>
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	e7a9      	b.n	8007f3e <_scanf_float+0x182>
 8007fea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007fee:	9205      	str	r2, [sp, #20]
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4798      	blx	r3
 8007ff6:	9a05      	ldr	r2, [sp, #20]
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f43f af04 	beq.w	8007e06 <_scanf_float+0x4a>
 8007ffe:	e715      	b.n	8007e2c <_scanf_float+0x70>
 8008000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008004:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008008:	4632      	mov	r2, r6
 800800a:	4638      	mov	r0, r7
 800800c:	4798      	blx	r3
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	3b01      	subs	r3, #1
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	e715      	b.n	8007e42 <_scanf_float+0x86>
 8008016:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800801a:	2b06      	cmp	r3, #6
 800801c:	d80a      	bhi.n	8008034 <_scanf_float+0x278>
 800801e:	f1bb 0f02 	cmp.w	fp, #2
 8008022:	d968      	bls.n	80080f6 <_scanf_float+0x33a>
 8008024:	f1ab 0b03 	sub.w	fp, fp, #3
 8008028:	fa5f fb8b 	uxtb.w	fp, fp
 800802c:	eba5 0b0b 	sub.w	fp, r5, fp
 8008030:	455d      	cmp	r5, fp
 8008032:	d14b      	bne.n	80080cc <_scanf_float+0x310>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	05da      	lsls	r2, r3, #23
 8008038:	d51f      	bpl.n	800807a <_scanf_float+0x2be>
 800803a:	055b      	lsls	r3, r3, #21
 800803c:	d468      	bmi.n	8008110 <_scanf_float+0x354>
 800803e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	2965      	cmp	r1, #101	; 0x65
 8008046:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800804a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	d00d      	beq.n	800806e <_scanf_float+0x2b2>
 8008052:	2945      	cmp	r1, #69	; 0x45
 8008054:	d00b      	beq.n	800806e <_scanf_float+0x2b2>
 8008056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800805a:	4632      	mov	r2, r6
 800805c:	4638      	mov	r0, r7
 800805e:	4798      	blx	r3
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008066:	3b01      	subs	r3, #1
 8008068:	f1a5 0b02 	sub.w	fp, r5, #2
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008072:	4632      	mov	r2, r6
 8008074:	4638      	mov	r0, r7
 8008076:	4798      	blx	r3
 8008078:	465d      	mov	r5, fp
 800807a:	6826      	ldr	r6, [r4, #0]
 800807c:	f016 0610 	ands.w	r6, r6, #16
 8008080:	d17a      	bne.n	8008178 <_scanf_float+0x3bc>
 8008082:	702e      	strb	r6, [r5, #0]
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800808a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800808e:	d142      	bne.n	8008116 <_scanf_float+0x35a>
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	eba9 0303 	sub.w	r3, r9, r3
 8008096:	425a      	negs	r2, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d149      	bne.n	8008130 <_scanf_float+0x374>
 800809c:	2200      	movs	r2, #0
 800809e:	4641      	mov	r1, r8
 80080a0:	4638      	mov	r0, r7
 80080a2:	f000 fed9 	bl	8008e58 <_strtod_r>
 80080a6:	6825      	ldr	r5, [r4, #0]
 80080a8:	f8da 3000 	ldr.w	r3, [sl]
 80080ac:	f015 0f02 	tst.w	r5, #2
 80080b0:	f103 0204 	add.w	r2, r3, #4
 80080b4:	ec59 8b10 	vmov	r8, r9, d0
 80080b8:	f8ca 2000 	str.w	r2, [sl]
 80080bc:	d043      	beq.n	8008146 <_scanf_float+0x38a>
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	e9c3 8900 	strd	r8, r9, [r3]
 80080c4:	68e3      	ldr	r3, [r4, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60e3      	str	r3, [r4, #12]
 80080ca:	e6be      	b.n	8007e4a <_scanf_float+0x8e>
 80080cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80080d4:	4632      	mov	r2, r6
 80080d6:	4638      	mov	r0, r7
 80080d8:	4798      	blx	r3
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	3b01      	subs	r3, #1
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	e7a6      	b.n	8008030 <_scanf_float+0x274>
 80080e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80080ea:	4632      	mov	r2, r6
 80080ec:	4638      	mov	r0, r7
 80080ee:	4798      	blx	r3
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	4545      	cmp	r5, r8
 80080f8:	d8f3      	bhi.n	80080e2 <_scanf_float+0x326>
 80080fa:	e6a5      	b.n	8007e48 <_scanf_float+0x8c>
 80080fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008100:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008104:	4632      	mov	r2, r6
 8008106:	4638      	mov	r0, r7
 8008108:	4798      	blx	r3
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	3b01      	subs	r3, #1
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	4545      	cmp	r5, r8
 8008112:	d8f3      	bhi.n	80080fc <_scanf_float+0x340>
 8008114:	e698      	b.n	8007e48 <_scanf_float+0x8c>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0bf      	beq.n	800809c <_scanf_float+0x2e0>
 800811c:	9904      	ldr	r1, [sp, #16]
 800811e:	230a      	movs	r3, #10
 8008120:	4632      	mov	r2, r6
 8008122:	3101      	adds	r1, #1
 8008124:	4638      	mov	r0, r7
 8008126:	f000 ff23 	bl	8008f70 <_strtol_r>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	9d04      	ldr	r5, [sp, #16]
 800812e:	1ac2      	subs	r2, r0, r3
 8008130:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008134:	429d      	cmp	r5, r3
 8008136:	bf28      	it	cs
 8008138:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800813c:	490f      	ldr	r1, [pc, #60]	; (800817c <_scanf_float+0x3c0>)
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f858 	bl	80081f4 <siprintf>
 8008144:	e7aa      	b.n	800809c <_scanf_float+0x2e0>
 8008146:	f015 0504 	ands.w	r5, r5, #4
 800814a:	d1b8      	bne.n	80080be <_scanf_float+0x302>
 800814c:	681f      	ldr	r7, [r3, #0]
 800814e:	ee10 2a10 	vmov	r2, s0
 8008152:	464b      	mov	r3, r9
 8008154:	ee10 0a10 	vmov	r0, s0
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 fd07 	bl	8000b6c <__aeabi_dcmpun>
 800815e:	b128      	cbz	r0, 800816c <_scanf_float+0x3b0>
 8008160:	4628      	mov	r0, r5
 8008162:	f000 f80d 	bl	8008180 <nanf>
 8008166:	ed87 0a00 	vstr	s0, [r7]
 800816a:	e7ab      	b.n	80080c4 <_scanf_float+0x308>
 800816c:	4640      	mov	r0, r8
 800816e:	4649      	mov	r1, r9
 8008170:	f7f8 fd5a 	bl	8000c28 <__aeabi_d2f>
 8008174:	6038      	str	r0, [r7, #0]
 8008176:	e7a5      	b.n	80080c4 <_scanf_float+0x308>
 8008178:	2600      	movs	r6, #0
 800817a:	e666      	b.n	8007e4a <_scanf_float+0x8e>
 800817c:	0800dc6c 	.word	0x0800dc6c

08008180 <nanf>:
 8008180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008188 <nanf+0x8>
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	7fc00000 	.word	0x7fc00000

0800818c <sniprintf>:
 800818c:	b40c      	push	{r2, r3}
 800818e:	b530      	push	{r4, r5, lr}
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <sniprintf+0x64>)
 8008192:	1e0c      	subs	r4, r1, #0
 8008194:	b09d      	sub	sp, #116	; 0x74
 8008196:	681d      	ldr	r5, [r3, #0]
 8008198:	da08      	bge.n	80081ac <sniprintf+0x20>
 800819a:	238b      	movs	r3, #139	; 0x8b
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a2:	b01d      	add	sp, #116	; 0x74
 80081a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081a8:	b002      	add	sp, #8
 80081aa:	4770      	bx	lr
 80081ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80081b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081b4:	bf14      	ite	ne
 80081b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80081ba:	4623      	moveq	r3, r4
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081c4:	9002      	str	r0, [sp, #8]
 80081c6:	9006      	str	r0, [sp, #24]
 80081c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081ce:	ab21      	add	r3, sp, #132	; 0x84
 80081d0:	a902      	add	r1, sp, #8
 80081d2:	4628      	mov	r0, r5
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	f002 fd87 	bl	800ace8 <_svfiprintf_r>
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	bfbc      	itt	lt
 80081de:	238b      	movlt	r3, #139	; 0x8b
 80081e0:	602b      	strlt	r3, [r5, #0]
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	d0dd      	beq.n	80081a2 <sniprintf+0x16>
 80081e6:	9b02      	ldr	r3, [sp, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e7d9      	b.n	80081a2 <sniprintf+0x16>
 80081ee:	bf00      	nop
 80081f0:	20000058 	.word	0x20000058

080081f4 <siprintf>:
 80081f4:	b40e      	push	{r1, r2, r3}
 80081f6:	b500      	push	{lr}
 80081f8:	b09c      	sub	sp, #112	; 0x70
 80081fa:	ab1d      	add	r3, sp, #116	; 0x74
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	9006      	str	r0, [sp, #24]
 8008200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008204:	4809      	ldr	r0, [pc, #36]	; (800822c <siprintf+0x38>)
 8008206:	9107      	str	r1, [sp, #28]
 8008208:	9104      	str	r1, [sp, #16]
 800820a:	4909      	ldr	r1, [pc, #36]	; (8008230 <siprintf+0x3c>)
 800820c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008210:	9105      	str	r1, [sp, #20]
 8008212:	6800      	ldr	r0, [r0, #0]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	a902      	add	r1, sp, #8
 8008218:	f002 fd66 	bl	800ace8 <_svfiprintf_r>
 800821c:	9b02      	ldr	r3, [sp, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	b01c      	add	sp, #112	; 0x70
 8008224:	f85d eb04 	ldr.w	lr, [sp], #4
 8008228:	b003      	add	sp, #12
 800822a:	4770      	bx	lr
 800822c:	20000058 	.word	0x20000058
 8008230:	ffff0208 	.word	0xffff0208

08008234 <sulp>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	ec45 4b10 	vmov	d0, r4, r5
 800823e:	4616      	mov	r6, r2
 8008240:	f002 fb0e 	bl	800a860 <__ulp>
 8008244:	ec51 0b10 	vmov	r0, r1, d0
 8008248:	b17e      	cbz	r6, 800826a <sulp+0x36>
 800824a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800824e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008252:	2b00      	cmp	r3, #0
 8008254:	dd09      	ble.n	800826a <sulp+0x36>
 8008256:	051b      	lsls	r3, r3, #20
 8008258:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800825c:	2400      	movs	r4, #0
 800825e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008262:	4622      	mov	r2, r4
 8008264:	462b      	mov	r3, r5
 8008266:	f7f8 f9e7 	bl	8000638 <__aeabi_dmul>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	0000      	movs	r0, r0
	...

08008270 <_strtod_l>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	461f      	mov	r7, r3
 8008276:	b0a1      	sub	sp, #132	; 0x84
 8008278:	2300      	movs	r3, #0
 800827a:	4681      	mov	r9, r0
 800827c:	4638      	mov	r0, r7
 800827e:	460e      	mov	r6, r1
 8008280:	9217      	str	r2, [sp, #92]	; 0x5c
 8008282:	931c      	str	r3, [sp, #112]	; 0x70
 8008284:	f001 fff5 	bl	800a272 <__localeconv_l>
 8008288:	4680      	mov	r8, r0
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	f7f7 ffc0 	bl	8000210 <strlen>
 8008290:	f04f 0a00 	mov.w	sl, #0
 8008294:	4604      	mov	r4, r0
 8008296:	f04f 0b00 	mov.w	fp, #0
 800829a:	961b      	str	r6, [sp, #108]	; 0x6c
 800829c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	2a0d      	cmp	r2, #13
 80082a2:	d832      	bhi.n	800830a <_strtod_l+0x9a>
 80082a4:	2a09      	cmp	r2, #9
 80082a6:	d236      	bcs.n	8008316 <_strtod_l+0xa6>
 80082a8:	2a00      	cmp	r2, #0
 80082aa:	d03e      	beq.n	800832a <_strtod_l+0xba>
 80082ac:	2300      	movs	r3, #0
 80082ae:	930d      	str	r3, [sp, #52]	; 0x34
 80082b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80082b2:	782b      	ldrb	r3, [r5, #0]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	f040 80ac 	bne.w	8008412 <_strtod_l+0x1a2>
 80082ba:	786b      	ldrb	r3, [r5, #1]
 80082bc:	2b58      	cmp	r3, #88	; 0x58
 80082be:	d001      	beq.n	80082c4 <_strtod_l+0x54>
 80082c0:	2b78      	cmp	r3, #120	; 0x78
 80082c2:	d167      	bne.n	8008394 <_strtod_l+0x124>
 80082c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	ab1c      	add	r3, sp, #112	; 0x70
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	9702      	str	r7, [sp, #8]
 80082ce:	ab1d      	add	r3, sp, #116	; 0x74
 80082d0:	4a88      	ldr	r2, [pc, #544]	; (80084f4 <_strtod_l+0x284>)
 80082d2:	a91b      	add	r1, sp, #108	; 0x6c
 80082d4:	4648      	mov	r0, r9
 80082d6:	f001 fcf2 	bl	8009cbe <__gethex>
 80082da:	f010 0407 	ands.w	r4, r0, #7
 80082de:	4606      	mov	r6, r0
 80082e0:	d005      	beq.n	80082ee <_strtod_l+0x7e>
 80082e2:	2c06      	cmp	r4, #6
 80082e4:	d12b      	bne.n	800833e <_strtod_l+0xce>
 80082e6:	3501      	adds	r5, #1
 80082e8:	2300      	movs	r3, #0
 80082ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80082ec:	930d      	str	r3, [sp, #52]	; 0x34
 80082ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 859a 	bne.w	8008e2a <_strtod_l+0xbba>
 80082f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f8:	b1e3      	cbz	r3, 8008334 <_strtod_l+0xc4>
 80082fa:	4652      	mov	r2, sl
 80082fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008300:	ec43 2b10 	vmov	d0, r2, r3
 8008304:	b021      	add	sp, #132	; 0x84
 8008306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830a:	2a2b      	cmp	r2, #43	; 0x2b
 800830c:	d015      	beq.n	800833a <_strtod_l+0xca>
 800830e:	2a2d      	cmp	r2, #45	; 0x2d
 8008310:	d004      	beq.n	800831c <_strtod_l+0xac>
 8008312:	2a20      	cmp	r2, #32
 8008314:	d1ca      	bne.n	80082ac <_strtod_l+0x3c>
 8008316:	3301      	adds	r3, #1
 8008318:	931b      	str	r3, [sp, #108]	; 0x6c
 800831a:	e7bf      	b.n	800829c <_strtod_l+0x2c>
 800831c:	2201      	movs	r2, #1
 800831e:	920d      	str	r2, [sp, #52]	; 0x34
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	921b      	str	r2, [sp, #108]	; 0x6c
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1c2      	bne.n	80082b0 <_strtod_l+0x40>
 800832a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800832c:	961b      	str	r6, [sp, #108]	; 0x6c
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 8579 	bne.w	8008e26 <_strtod_l+0xbb6>
 8008334:	4652      	mov	r2, sl
 8008336:	465b      	mov	r3, fp
 8008338:	e7e2      	b.n	8008300 <_strtod_l+0x90>
 800833a:	2200      	movs	r2, #0
 800833c:	e7ef      	b.n	800831e <_strtod_l+0xae>
 800833e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008340:	b13a      	cbz	r2, 8008352 <_strtod_l+0xe2>
 8008342:	2135      	movs	r1, #53	; 0x35
 8008344:	a81e      	add	r0, sp, #120	; 0x78
 8008346:	f002 fb83 	bl	800aa50 <__copybits>
 800834a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800834c:	4648      	mov	r0, r9
 800834e:	f001 ffef 	bl	800a330 <_Bfree>
 8008352:	3c01      	subs	r4, #1
 8008354:	2c04      	cmp	r4, #4
 8008356:	d806      	bhi.n	8008366 <_strtod_l+0xf6>
 8008358:	e8df f004 	tbb	[pc, r4]
 800835c:	1714030a 	.word	0x1714030a
 8008360:	0a          	.byte	0x0a
 8008361:	00          	.byte	0x00
 8008362:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008366:	0730      	lsls	r0, r6, #28
 8008368:	d5c1      	bpl.n	80082ee <_strtod_l+0x7e>
 800836a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800836e:	e7be      	b.n	80082ee <_strtod_l+0x7e>
 8008370:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008374:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008376:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800837a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800837e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008382:	e7f0      	b.n	8008366 <_strtod_l+0xf6>
 8008384:	f8df b170 	ldr.w	fp, [pc, #368]	; 80084f8 <_strtod_l+0x288>
 8008388:	e7ed      	b.n	8008366 <_strtod_l+0xf6>
 800838a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800838e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008392:	e7e8      	b.n	8008366 <_strtod_l+0xf6>
 8008394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	921b      	str	r2, [sp, #108]	; 0x6c
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b30      	cmp	r3, #48	; 0x30
 800839e:	d0f9      	beq.n	8008394 <_strtod_l+0x124>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0a4      	beq.n	80082ee <_strtod_l+0x7e>
 80083a4:	2301      	movs	r3, #1
 80083a6:	2500      	movs	r5, #0
 80083a8:	9306      	str	r3, [sp, #24]
 80083aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083ac:	9308      	str	r3, [sp, #32]
 80083ae:	9507      	str	r5, [sp, #28]
 80083b0:	9505      	str	r5, [sp, #20]
 80083b2:	220a      	movs	r2, #10
 80083b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80083b6:	7807      	ldrb	r7, [r0, #0]
 80083b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80083bc:	b2d9      	uxtb	r1, r3
 80083be:	2909      	cmp	r1, #9
 80083c0:	d929      	bls.n	8008416 <_strtod_l+0x1a6>
 80083c2:	4622      	mov	r2, r4
 80083c4:	f8d8 1000 	ldr.w	r1, [r8]
 80083c8:	f002 fd96 	bl	800aef8 <strncmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d031      	beq.n	8008434 <_strtod_l+0x1c4>
 80083d0:	2000      	movs	r0, #0
 80083d2:	9c05      	ldr	r4, [sp, #20]
 80083d4:	9004      	str	r0, [sp, #16]
 80083d6:	463b      	mov	r3, r7
 80083d8:	4602      	mov	r2, r0
 80083da:	2b65      	cmp	r3, #101	; 0x65
 80083dc:	d001      	beq.n	80083e2 <_strtod_l+0x172>
 80083de:	2b45      	cmp	r3, #69	; 0x45
 80083e0:	d114      	bne.n	800840c <_strtod_l+0x19c>
 80083e2:	b924      	cbnz	r4, 80083ee <_strtod_l+0x17e>
 80083e4:	b910      	cbnz	r0, 80083ec <_strtod_l+0x17c>
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d09e      	beq.n	800832a <_strtod_l+0xba>
 80083ec:	2400      	movs	r4, #0
 80083ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80083f0:	1c73      	adds	r3, r6, #1
 80083f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80083f4:	7873      	ldrb	r3, [r6, #1]
 80083f6:	2b2b      	cmp	r3, #43	; 0x2b
 80083f8:	d078      	beq.n	80084ec <_strtod_l+0x27c>
 80083fa:	2b2d      	cmp	r3, #45	; 0x2d
 80083fc:	d070      	beq.n	80084e0 <_strtod_l+0x270>
 80083fe:	f04f 0c00 	mov.w	ip, #0
 8008402:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008406:	2f09      	cmp	r7, #9
 8008408:	d97c      	bls.n	8008504 <_strtod_l+0x294>
 800840a:	961b      	str	r6, [sp, #108]	; 0x6c
 800840c:	f04f 0e00 	mov.w	lr, #0
 8008410:	e09a      	b.n	8008548 <_strtod_l+0x2d8>
 8008412:	2300      	movs	r3, #0
 8008414:	e7c7      	b.n	80083a6 <_strtod_l+0x136>
 8008416:	9905      	ldr	r1, [sp, #20]
 8008418:	2908      	cmp	r1, #8
 800841a:	bfdd      	ittte	le
 800841c:	9907      	ldrle	r1, [sp, #28]
 800841e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008422:	9307      	strle	r3, [sp, #28]
 8008424:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008428:	9b05      	ldr	r3, [sp, #20]
 800842a:	3001      	adds	r0, #1
 800842c:	3301      	adds	r3, #1
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	901b      	str	r0, [sp, #108]	; 0x6c
 8008432:	e7bf      	b.n	80083b4 <_strtod_l+0x144>
 8008434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008436:	191a      	adds	r2, r3, r4
 8008438:	921b      	str	r2, [sp, #108]	; 0x6c
 800843a:	9a05      	ldr	r2, [sp, #20]
 800843c:	5d1b      	ldrb	r3, [r3, r4]
 800843e:	2a00      	cmp	r2, #0
 8008440:	d037      	beq.n	80084b2 <_strtod_l+0x242>
 8008442:	9c05      	ldr	r4, [sp, #20]
 8008444:	4602      	mov	r2, r0
 8008446:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800844a:	2909      	cmp	r1, #9
 800844c:	d913      	bls.n	8008476 <_strtod_l+0x206>
 800844e:	2101      	movs	r1, #1
 8008450:	9104      	str	r1, [sp, #16]
 8008452:	e7c2      	b.n	80083da <_strtod_l+0x16a>
 8008454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	921b      	str	r2, [sp, #108]	; 0x6c
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	3001      	adds	r0, #1
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d0f8      	beq.n	8008454 <_strtod_l+0x1e4>
 8008462:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008466:	2a08      	cmp	r2, #8
 8008468:	f200 84e4 	bhi.w	8008e34 <_strtod_l+0xbc4>
 800846c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800846e:	9208      	str	r2, [sp, #32]
 8008470:	4602      	mov	r2, r0
 8008472:	2000      	movs	r0, #0
 8008474:	4604      	mov	r4, r0
 8008476:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800847a:	f100 0101 	add.w	r1, r0, #1
 800847e:	d012      	beq.n	80084a6 <_strtod_l+0x236>
 8008480:	440a      	add	r2, r1
 8008482:	eb00 0c04 	add.w	ip, r0, r4
 8008486:	4621      	mov	r1, r4
 8008488:	270a      	movs	r7, #10
 800848a:	458c      	cmp	ip, r1
 800848c:	d113      	bne.n	80084b6 <_strtod_l+0x246>
 800848e:	1821      	adds	r1, r4, r0
 8008490:	2908      	cmp	r1, #8
 8008492:	f104 0401 	add.w	r4, r4, #1
 8008496:	4404      	add	r4, r0
 8008498:	dc19      	bgt.n	80084ce <_strtod_l+0x25e>
 800849a:	9b07      	ldr	r3, [sp, #28]
 800849c:	210a      	movs	r1, #10
 800849e:	fb01 e303 	mla	r3, r1, r3, lr
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	2100      	movs	r1, #0
 80084a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084a8:	1c58      	adds	r0, r3, #1
 80084aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	4608      	mov	r0, r1
 80084b0:	e7c9      	b.n	8008446 <_strtod_l+0x1d6>
 80084b2:	9805      	ldr	r0, [sp, #20]
 80084b4:	e7d3      	b.n	800845e <_strtod_l+0x1ee>
 80084b6:	2908      	cmp	r1, #8
 80084b8:	f101 0101 	add.w	r1, r1, #1
 80084bc:	dc03      	bgt.n	80084c6 <_strtod_l+0x256>
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	437b      	muls	r3, r7
 80084c2:	9307      	str	r3, [sp, #28]
 80084c4:	e7e1      	b.n	800848a <_strtod_l+0x21a>
 80084c6:	2910      	cmp	r1, #16
 80084c8:	bfd8      	it	le
 80084ca:	437d      	mulle	r5, r7
 80084cc:	e7dd      	b.n	800848a <_strtod_l+0x21a>
 80084ce:	2c10      	cmp	r4, #16
 80084d0:	bfdc      	itt	le
 80084d2:	210a      	movle	r1, #10
 80084d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80084d8:	e7e4      	b.n	80084a4 <_strtod_l+0x234>
 80084da:	2301      	movs	r3, #1
 80084dc:	9304      	str	r3, [sp, #16]
 80084de:	e781      	b.n	80083e4 <_strtod_l+0x174>
 80084e0:	f04f 0c01 	mov.w	ip, #1
 80084e4:	1cb3      	adds	r3, r6, #2
 80084e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80084e8:	78b3      	ldrb	r3, [r6, #2]
 80084ea:	e78a      	b.n	8008402 <_strtod_l+0x192>
 80084ec:	f04f 0c00 	mov.w	ip, #0
 80084f0:	e7f8      	b.n	80084e4 <_strtod_l+0x274>
 80084f2:	bf00      	nop
 80084f4:	0800dc74 	.word	0x0800dc74
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084fe:	1c5f      	adds	r7, r3, #1
 8008500:	971b      	str	r7, [sp, #108]	; 0x6c
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b30      	cmp	r3, #48	; 0x30
 8008506:	d0f9      	beq.n	80084fc <_strtod_l+0x28c>
 8008508:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800850c:	2f08      	cmp	r7, #8
 800850e:	f63f af7d 	bhi.w	800840c <_strtod_l+0x19c>
 8008512:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008518:	930a      	str	r3, [sp, #40]	; 0x28
 800851a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800851c:	1c5f      	adds	r7, r3, #1
 800851e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008526:	f1b8 0f09 	cmp.w	r8, #9
 800852a:	d937      	bls.n	800859c <_strtod_l+0x32c>
 800852c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800852e:	1a7f      	subs	r7, r7, r1
 8008530:	2f08      	cmp	r7, #8
 8008532:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008536:	dc37      	bgt.n	80085a8 <_strtod_l+0x338>
 8008538:	45be      	cmp	lr, r7
 800853a:	bfa8      	it	ge
 800853c:	46be      	movge	lr, r7
 800853e:	f1bc 0f00 	cmp.w	ip, #0
 8008542:	d001      	beq.n	8008548 <_strtod_l+0x2d8>
 8008544:	f1ce 0e00 	rsb	lr, lr, #0
 8008548:	2c00      	cmp	r4, #0
 800854a:	d151      	bne.n	80085f0 <_strtod_l+0x380>
 800854c:	2800      	cmp	r0, #0
 800854e:	f47f aece 	bne.w	80082ee <_strtod_l+0x7e>
 8008552:	9a06      	ldr	r2, [sp, #24]
 8008554:	2a00      	cmp	r2, #0
 8008556:	f47f aeca 	bne.w	80082ee <_strtod_l+0x7e>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	2a00      	cmp	r2, #0
 800855e:	f47f aee4 	bne.w	800832a <_strtod_l+0xba>
 8008562:	2b4e      	cmp	r3, #78	; 0x4e
 8008564:	d027      	beq.n	80085b6 <_strtod_l+0x346>
 8008566:	dc21      	bgt.n	80085ac <_strtod_l+0x33c>
 8008568:	2b49      	cmp	r3, #73	; 0x49
 800856a:	f47f aede 	bne.w	800832a <_strtod_l+0xba>
 800856e:	49a0      	ldr	r1, [pc, #640]	; (80087f0 <_strtod_l+0x580>)
 8008570:	a81b      	add	r0, sp, #108	; 0x6c
 8008572:	f001 fdd7 	bl	800a124 <__match>
 8008576:	2800      	cmp	r0, #0
 8008578:	f43f aed7 	beq.w	800832a <_strtod_l+0xba>
 800857c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800857e:	499d      	ldr	r1, [pc, #628]	; (80087f4 <_strtod_l+0x584>)
 8008580:	3b01      	subs	r3, #1
 8008582:	a81b      	add	r0, sp, #108	; 0x6c
 8008584:	931b      	str	r3, [sp, #108]	; 0x6c
 8008586:	f001 fdcd 	bl	800a124 <__match>
 800858a:	b910      	cbnz	r0, 8008592 <_strtod_l+0x322>
 800858c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800858e:	3301      	adds	r3, #1
 8008590:	931b      	str	r3, [sp, #108]	; 0x6c
 8008592:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008808 <_strtod_l+0x598>
 8008596:	f04f 0a00 	mov.w	sl, #0
 800859a:	e6a8      	b.n	80082ee <_strtod_l+0x7e>
 800859c:	210a      	movs	r1, #10
 800859e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80085a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80085a6:	e7b8      	b.n	800851a <_strtod_l+0x2aa>
 80085a8:	46be      	mov	lr, r7
 80085aa:	e7c8      	b.n	800853e <_strtod_l+0x2ce>
 80085ac:	2b69      	cmp	r3, #105	; 0x69
 80085ae:	d0de      	beq.n	800856e <_strtod_l+0x2fe>
 80085b0:	2b6e      	cmp	r3, #110	; 0x6e
 80085b2:	f47f aeba 	bne.w	800832a <_strtod_l+0xba>
 80085b6:	4990      	ldr	r1, [pc, #576]	; (80087f8 <_strtod_l+0x588>)
 80085b8:	a81b      	add	r0, sp, #108	; 0x6c
 80085ba:	f001 fdb3 	bl	800a124 <__match>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f43f aeb3 	beq.w	800832a <_strtod_l+0xba>
 80085c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b28      	cmp	r3, #40	; 0x28
 80085ca:	d10e      	bne.n	80085ea <_strtod_l+0x37a>
 80085cc:	aa1e      	add	r2, sp, #120	; 0x78
 80085ce:	498b      	ldr	r1, [pc, #556]	; (80087fc <_strtod_l+0x58c>)
 80085d0:	a81b      	add	r0, sp, #108	; 0x6c
 80085d2:	f001 fdbb 	bl	800a14c <__hexnan>
 80085d6:	2805      	cmp	r0, #5
 80085d8:	d107      	bne.n	80085ea <_strtod_l+0x37a>
 80085da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80085e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80085e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80085e8:	e681      	b.n	80082ee <_strtod_l+0x7e>
 80085ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008810 <_strtod_l+0x5a0>
 80085ee:	e7d2      	b.n	8008596 <_strtod_l+0x326>
 80085f0:	ebae 0302 	sub.w	r3, lr, r2
 80085f4:	9306      	str	r3, [sp, #24]
 80085f6:	9b05      	ldr	r3, [sp, #20]
 80085f8:	9807      	ldr	r0, [sp, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf08      	it	eq
 80085fe:	4623      	moveq	r3, r4
 8008600:	2c10      	cmp	r4, #16
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	46a0      	mov	r8, r4
 8008606:	bfa8      	it	ge
 8008608:	f04f 0810 	movge.w	r8, #16
 800860c:	f7f7 ff9a 	bl	8000544 <__aeabi_ui2d>
 8008610:	2c09      	cmp	r4, #9
 8008612:	4682      	mov	sl, r0
 8008614:	468b      	mov	fp, r1
 8008616:	dc13      	bgt.n	8008640 <_strtod_l+0x3d0>
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f43f ae67 	beq.w	80082ee <_strtod_l+0x7e>
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	dd7a      	ble.n	800871a <_strtod_l+0x4aa>
 8008624:	2b16      	cmp	r3, #22
 8008626:	dc61      	bgt.n	80086ec <_strtod_l+0x47c>
 8008628:	4a75      	ldr	r2, [pc, #468]	; (8008800 <_strtod_l+0x590>)
 800862a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800862e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f7 ffff 	bl	8000638 <__aeabi_dmul>
 800863a:	4682      	mov	sl, r0
 800863c:	468b      	mov	fp, r1
 800863e:	e656      	b.n	80082ee <_strtod_l+0x7e>
 8008640:	4b6f      	ldr	r3, [pc, #444]	; (8008800 <_strtod_l+0x590>)
 8008642:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008646:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800864a:	f7f7 fff5 	bl	8000638 <__aeabi_dmul>
 800864e:	4606      	mov	r6, r0
 8008650:	4628      	mov	r0, r5
 8008652:	460f      	mov	r7, r1
 8008654:	f7f7 ff76 	bl	8000544 <__aeabi_ui2d>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f7f7 fe34 	bl	80002cc <__adddf3>
 8008664:	2c0f      	cmp	r4, #15
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	ddd5      	ble.n	8008618 <_strtod_l+0x3a8>
 800866c:	9b06      	ldr	r3, [sp, #24]
 800866e:	eba4 0808 	sub.w	r8, r4, r8
 8008672:	4498      	add	r8, r3
 8008674:	f1b8 0f00 	cmp.w	r8, #0
 8008678:	f340 8096 	ble.w	80087a8 <_strtod_l+0x538>
 800867c:	f018 030f 	ands.w	r3, r8, #15
 8008680:	d00a      	beq.n	8008698 <_strtod_l+0x428>
 8008682:	495f      	ldr	r1, [pc, #380]	; (8008800 <_strtod_l+0x590>)
 8008684:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008688:	4652      	mov	r2, sl
 800868a:	465b      	mov	r3, fp
 800868c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008690:	f7f7 ffd2 	bl	8000638 <__aeabi_dmul>
 8008694:	4682      	mov	sl, r0
 8008696:	468b      	mov	fp, r1
 8008698:	f038 080f 	bics.w	r8, r8, #15
 800869c:	d073      	beq.n	8008786 <_strtod_l+0x516>
 800869e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80086a2:	dd47      	ble.n	8008734 <_strtod_l+0x4c4>
 80086a4:	2400      	movs	r4, #0
 80086a6:	46a0      	mov	r8, r4
 80086a8:	9407      	str	r4, [sp, #28]
 80086aa:	9405      	str	r4, [sp, #20]
 80086ac:	2322      	movs	r3, #34	; 0x22
 80086ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008808 <_strtod_l+0x598>
 80086b2:	f8c9 3000 	str.w	r3, [r9]
 80086b6:	f04f 0a00 	mov.w	sl, #0
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f43f ae16 	beq.w	80082ee <_strtod_l+0x7e>
 80086c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086c4:	4648      	mov	r0, r9
 80086c6:	f001 fe33 	bl	800a330 <_Bfree>
 80086ca:	9905      	ldr	r1, [sp, #20]
 80086cc:	4648      	mov	r0, r9
 80086ce:	f001 fe2f 	bl	800a330 <_Bfree>
 80086d2:	4641      	mov	r1, r8
 80086d4:	4648      	mov	r0, r9
 80086d6:	f001 fe2b 	bl	800a330 <_Bfree>
 80086da:	9907      	ldr	r1, [sp, #28]
 80086dc:	4648      	mov	r0, r9
 80086de:	f001 fe27 	bl	800a330 <_Bfree>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4648      	mov	r0, r9
 80086e6:	f001 fe23 	bl	800a330 <_Bfree>
 80086ea:	e600      	b.n	80082ee <_strtod_l+0x7e>
 80086ec:	9a06      	ldr	r2, [sp, #24]
 80086ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80086f2:	4293      	cmp	r3, r2
 80086f4:	dbba      	blt.n	800866c <_strtod_l+0x3fc>
 80086f6:	4d42      	ldr	r5, [pc, #264]	; (8008800 <_strtod_l+0x590>)
 80086f8:	f1c4 040f 	rsb	r4, r4, #15
 80086fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008700:	4652      	mov	r2, sl
 8008702:	465b      	mov	r3, fp
 8008704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008708:	f7f7 ff96 	bl	8000638 <__aeabi_dmul>
 800870c:	9b06      	ldr	r3, [sp, #24]
 800870e:	1b1c      	subs	r4, r3, r4
 8008710:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008714:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008718:	e78d      	b.n	8008636 <_strtod_l+0x3c6>
 800871a:	f113 0f16 	cmn.w	r3, #22
 800871e:	dba5      	blt.n	800866c <_strtod_l+0x3fc>
 8008720:	4a37      	ldr	r2, [pc, #220]	; (8008800 <_strtod_l+0x590>)
 8008722:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008726:	e9d2 2300 	ldrd	r2, r3, [r2]
 800872a:	4650      	mov	r0, sl
 800872c:	4659      	mov	r1, fp
 800872e:	f7f8 f8ad 	bl	800088c <__aeabi_ddiv>
 8008732:	e782      	b.n	800863a <_strtod_l+0x3ca>
 8008734:	2300      	movs	r3, #0
 8008736:	4e33      	ldr	r6, [pc, #204]	; (8008804 <_strtod_l+0x594>)
 8008738:	ea4f 1828 	mov.w	r8, r8, asr #4
 800873c:	4650      	mov	r0, sl
 800873e:	4659      	mov	r1, fp
 8008740:	461d      	mov	r5, r3
 8008742:	f1b8 0f01 	cmp.w	r8, #1
 8008746:	dc21      	bgt.n	800878c <_strtod_l+0x51c>
 8008748:	b10b      	cbz	r3, 800874e <_strtod_l+0x4de>
 800874a:	4682      	mov	sl, r0
 800874c:	468b      	mov	fp, r1
 800874e:	4b2d      	ldr	r3, [pc, #180]	; (8008804 <_strtod_l+0x594>)
 8008750:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008754:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008758:	4652      	mov	r2, sl
 800875a:	465b      	mov	r3, fp
 800875c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008760:	f7f7 ff6a 	bl	8000638 <__aeabi_dmul>
 8008764:	4b28      	ldr	r3, [pc, #160]	; (8008808 <_strtod_l+0x598>)
 8008766:	460a      	mov	r2, r1
 8008768:	400b      	ands	r3, r1
 800876a:	4928      	ldr	r1, [pc, #160]	; (800880c <_strtod_l+0x59c>)
 800876c:	428b      	cmp	r3, r1
 800876e:	4682      	mov	sl, r0
 8008770:	d898      	bhi.n	80086a4 <_strtod_l+0x434>
 8008772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008776:	428b      	cmp	r3, r1
 8008778:	bf86      	itte	hi
 800877a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008814 <_strtod_l+0x5a4>
 800877e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008782:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008786:	2300      	movs	r3, #0
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	e077      	b.n	800887c <_strtod_l+0x60c>
 800878c:	f018 0f01 	tst.w	r8, #1
 8008790:	d006      	beq.n	80087a0 <_strtod_l+0x530>
 8008792:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 ff4d 	bl	8000638 <__aeabi_dmul>
 800879e:	2301      	movs	r3, #1
 80087a0:	3501      	adds	r5, #1
 80087a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087a6:	e7cc      	b.n	8008742 <_strtod_l+0x4d2>
 80087a8:	d0ed      	beq.n	8008786 <_strtod_l+0x516>
 80087aa:	f1c8 0800 	rsb	r8, r8, #0
 80087ae:	f018 020f 	ands.w	r2, r8, #15
 80087b2:	d00a      	beq.n	80087ca <_strtod_l+0x55a>
 80087b4:	4b12      	ldr	r3, [pc, #72]	; (8008800 <_strtod_l+0x590>)
 80087b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ba:	4650      	mov	r0, sl
 80087bc:	4659      	mov	r1, fp
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f8 f863 	bl	800088c <__aeabi_ddiv>
 80087c6:	4682      	mov	sl, r0
 80087c8:	468b      	mov	fp, r1
 80087ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80087ce:	d0da      	beq.n	8008786 <_strtod_l+0x516>
 80087d0:	f1b8 0f1f 	cmp.w	r8, #31
 80087d4:	dd20      	ble.n	8008818 <_strtod_l+0x5a8>
 80087d6:	2400      	movs	r4, #0
 80087d8:	46a0      	mov	r8, r4
 80087da:	9407      	str	r4, [sp, #28]
 80087dc:	9405      	str	r4, [sp, #20]
 80087de:	2322      	movs	r3, #34	; 0x22
 80087e0:	f04f 0a00 	mov.w	sl, #0
 80087e4:	f04f 0b00 	mov.w	fp, #0
 80087e8:	f8c9 3000 	str.w	r3, [r9]
 80087ec:	e765      	b.n	80086ba <_strtod_l+0x44a>
 80087ee:	bf00      	nop
 80087f0:	0800dc3d 	.word	0x0800dc3d
 80087f4:	0800dccb 	.word	0x0800dccb
 80087f8:	0800dc45 	.word	0x0800dc45
 80087fc:	0800dc88 	.word	0x0800dc88
 8008800:	0800dd08 	.word	0x0800dd08
 8008804:	0800dce0 	.word	0x0800dce0
 8008808:	7ff00000 	.word	0x7ff00000
 800880c:	7ca00000 	.word	0x7ca00000
 8008810:	fff80000 	.word	0xfff80000
 8008814:	7fefffff 	.word	0x7fefffff
 8008818:	f018 0310 	ands.w	r3, r8, #16
 800881c:	bf18      	it	ne
 800881e:	236a      	movne	r3, #106	; 0x6a
 8008820:	4da0      	ldr	r5, [pc, #640]	; (8008aa4 <_strtod_l+0x834>)
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	4650      	mov	r0, sl
 8008826:	4659      	mov	r1, fp
 8008828:	2300      	movs	r3, #0
 800882a:	f1b8 0f00 	cmp.w	r8, #0
 800882e:	f300 810a 	bgt.w	8008a46 <_strtod_l+0x7d6>
 8008832:	b10b      	cbz	r3, 8008838 <_strtod_l+0x5c8>
 8008834:	4682      	mov	sl, r0
 8008836:	468b      	mov	fp, r1
 8008838:	9b04      	ldr	r3, [sp, #16]
 800883a:	b1bb      	cbz	r3, 800886c <_strtod_l+0x5fc>
 800883c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008844:	2b00      	cmp	r3, #0
 8008846:	4659      	mov	r1, fp
 8008848:	dd10      	ble.n	800886c <_strtod_l+0x5fc>
 800884a:	2b1f      	cmp	r3, #31
 800884c:	f340 8107 	ble.w	8008a5e <_strtod_l+0x7ee>
 8008850:	2b34      	cmp	r3, #52	; 0x34
 8008852:	bfde      	ittt	le
 8008854:	3b20      	suble	r3, #32
 8008856:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800885a:	fa02 f303 	lslle.w	r3, r2, r3
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	bfcc      	ite	gt
 8008864:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008868:	ea03 0b01 	andle.w	fp, r3, r1
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	4650      	mov	r0, sl
 8008872:	4659      	mov	r1, fp
 8008874:	f7f8 f948 	bl	8000b08 <__aeabi_dcmpeq>
 8008878:	2800      	cmp	r0, #0
 800887a:	d1ac      	bne.n	80087d6 <_strtod_l+0x566>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	9a05      	ldr	r2, [sp, #20]
 8008882:	9908      	ldr	r1, [sp, #32]
 8008884:	4623      	mov	r3, r4
 8008886:	4648      	mov	r0, r9
 8008888:	f001 fda4 	bl	800a3d4 <__s2b>
 800888c:	9007      	str	r0, [sp, #28]
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f af08 	beq.w	80086a4 <_strtod_l+0x434>
 8008894:	9a06      	ldr	r2, [sp, #24]
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	2a00      	cmp	r2, #0
 800889a:	f1c3 0300 	rsb	r3, r3, #0
 800889e:	bfa8      	it	ge
 80088a0:	2300      	movge	r3, #0
 80088a2:	930e      	str	r3, [sp, #56]	; 0x38
 80088a4:	2400      	movs	r4, #0
 80088a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088aa:	9316      	str	r3, [sp, #88]	; 0x58
 80088ac:	46a0      	mov	r8, r4
 80088ae:	9b07      	ldr	r3, [sp, #28]
 80088b0:	4648      	mov	r0, r9
 80088b2:	6859      	ldr	r1, [r3, #4]
 80088b4:	f001 fd08 	bl	800a2c8 <_Balloc>
 80088b8:	9005      	str	r0, [sp, #20]
 80088ba:	2800      	cmp	r0, #0
 80088bc:	f43f aef6 	beq.w	80086ac <_strtod_l+0x43c>
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	3202      	adds	r2, #2
 80088c6:	f103 010c 	add.w	r1, r3, #12
 80088ca:	0092      	lsls	r2, r2, #2
 80088cc:	300c      	adds	r0, #12
 80088ce:	f7fe fe05 	bl	80074dc <memcpy>
 80088d2:	aa1e      	add	r2, sp, #120	; 0x78
 80088d4:	a91d      	add	r1, sp, #116	; 0x74
 80088d6:	ec4b ab10 	vmov	d0, sl, fp
 80088da:	4648      	mov	r0, r9
 80088dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80088e0:	f002 f834 	bl	800a94c <__d2b>
 80088e4:	901c      	str	r0, [sp, #112]	; 0x70
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f aee0 	beq.w	80086ac <_strtod_l+0x43c>
 80088ec:	2101      	movs	r1, #1
 80088ee:	4648      	mov	r0, r9
 80088f0:	f001 fdfc 	bl	800a4ec <__i2b>
 80088f4:	4680      	mov	r8, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aed8 	beq.w	80086ac <_strtod_l+0x43c>
 80088fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80088fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008900:	2e00      	cmp	r6, #0
 8008902:	bfab      	itete	ge
 8008904:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008906:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008908:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800890a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800890c:	bfac      	ite	ge
 800890e:	18f7      	addge	r7, r6, r3
 8008910:	1b9d      	sublt	r5, r3, r6
 8008912:	9b04      	ldr	r3, [sp, #16]
 8008914:	1af6      	subs	r6, r6, r3
 8008916:	4416      	add	r6, r2
 8008918:	4b63      	ldr	r3, [pc, #396]	; (8008aa8 <_strtod_l+0x838>)
 800891a:	3e01      	subs	r6, #1
 800891c:	429e      	cmp	r6, r3
 800891e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008922:	f280 80af 	bge.w	8008a84 <_strtod_l+0x814>
 8008926:	1b9b      	subs	r3, r3, r6
 8008928:	2b1f      	cmp	r3, #31
 800892a:	eba2 0203 	sub.w	r2, r2, r3
 800892e:	f04f 0101 	mov.w	r1, #1
 8008932:	f300 809b 	bgt.w	8008a6c <_strtod_l+0x7fc>
 8008936:	fa01 f303 	lsl.w	r3, r1, r3
 800893a:	930f      	str	r3, [sp, #60]	; 0x3c
 800893c:	2300      	movs	r3, #0
 800893e:	930a      	str	r3, [sp, #40]	; 0x28
 8008940:	18be      	adds	r6, r7, r2
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	42b7      	cmp	r7, r6
 8008946:	4415      	add	r5, r2
 8008948:	441d      	add	r5, r3
 800894a:	463b      	mov	r3, r7
 800894c:	bfa8      	it	ge
 800894e:	4633      	movge	r3, r6
 8008950:	42ab      	cmp	r3, r5
 8008952:	bfa8      	it	ge
 8008954:	462b      	movge	r3, r5
 8008956:	2b00      	cmp	r3, #0
 8008958:	bfc2      	ittt	gt
 800895a:	1af6      	subgt	r6, r6, r3
 800895c:	1aed      	subgt	r5, r5, r3
 800895e:	1aff      	subgt	r7, r7, r3
 8008960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008962:	b1bb      	cbz	r3, 8008994 <_strtod_l+0x724>
 8008964:	4641      	mov	r1, r8
 8008966:	461a      	mov	r2, r3
 8008968:	4648      	mov	r0, r9
 800896a:	f001 fe5f 	bl	800a62c <__pow5mult>
 800896e:	4680      	mov	r8, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	f43f ae9b 	beq.w	80086ac <_strtod_l+0x43c>
 8008976:	4601      	mov	r1, r0
 8008978:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800897a:	4648      	mov	r0, r9
 800897c:	f001 fdbf 	bl	800a4fe <__multiply>
 8008980:	900c      	str	r0, [sp, #48]	; 0x30
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f ae92 	beq.w	80086ac <_strtod_l+0x43c>
 8008988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800898a:	4648      	mov	r0, r9
 800898c:	f001 fcd0 	bl	800a330 <_Bfree>
 8008990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008992:	931c      	str	r3, [sp, #112]	; 0x70
 8008994:	2e00      	cmp	r6, #0
 8008996:	dc7a      	bgt.n	8008a8e <_strtod_l+0x81e>
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd08      	ble.n	80089b0 <_strtod_l+0x740>
 800899e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089a0:	9905      	ldr	r1, [sp, #20]
 80089a2:	4648      	mov	r0, r9
 80089a4:	f001 fe42 	bl	800a62c <__pow5mult>
 80089a8:	9005      	str	r0, [sp, #20]
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f ae7e 	beq.w	80086ac <_strtod_l+0x43c>
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	dd08      	ble.n	80089c6 <_strtod_l+0x756>
 80089b4:	462a      	mov	r2, r5
 80089b6:	9905      	ldr	r1, [sp, #20]
 80089b8:	4648      	mov	r0, r9
 80089ba:	f001 fe85 	bl	800a6c8 <__lshift>
 80089be:	9005      	str	r0, [sp, #20]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f43f ae73 	beq.w	80086ac <_strtod_l+0x43c>
 80089c6:	2f00      	cmp	r7, #0
 80089c8:	dd08      	ble.n	80089dc <_strtod_l+0x76c>
 80089ca:	4641      	mov	r1, r8
 80089cc:	463a      	mov	r2, r7
 80089ce:	4648      	mov	r0, r9
 80089d0:	f001 fe7a 	bl	800a6c8 <__lshift>
 80089d4:	4680      	mov	r8, r0
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f43f ae68 	beq.w	80086ac <_strtod_l+0x43c>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089e0:	4648      	mov	r0, r9
 80089e2:	f001 fedf 	bl	800a7a4 <__mdiff>
 80089e6:	4604      	mov	r4, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f43f ae5f 	beq.w	80086ac <_strtod_l+0x43c>
 80089ee:	68c3      	ldr	r3, [r0, #12]
 80089f0:	930c      	str	r3, [sp, #48]	; 0x30
 80089f2:	2300      	movs	r3, #0
 80089f4:	60c3      	str	r3, [r0, #12]
 80089f6:	4641      	mov	r1, r8
 80089f8:	f001 feba 	bl	800a770 <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	da55      	bge.n	8008aac <_strtod_l+0x83c>
 8008a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a02:	b9e3      	cbnz	r3, 8008a3e <_strtod_l+0x7ce>
 8008a04:	f1ba 0f00 	cmp.w	sl, #0
 8008a08:	d119      	bne.n	8008a3e <_strtod_l+0x7ce>
 8008a0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a0e:	b9b3      	cbnz	r3, 8008a3e <_strtod_l+0x7ce>
 8008a10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a14:	0d1b      	lsrs	r3, r3, #20
 8008a16:	051b      	lsls	r3, r3, #20
 8008a18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a1c:	d90f      	bls.n	8008a3e <_strtod_l+0x7ce>
 8008a1e:	6963      	ldr	r3, [r4, #20]
 8008a20:	b913      	cbnz	r3, 8008a28 <_strtod_l+0x7b8>
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	dd0a      	ble.n	8008a3e <_strtod_l+0x7ce>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f001 fe4b 	bl	800a6c8 <__lshift>
 8008a32:	4641      	mov	r1, r8
 8008a34:	4604      	mov	r4, r0
 8008a36:	f001 fe9b 	bl	800a770 <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	dc67      	bgt.n	8008b0e <_strtod_l+0x89e>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d171      	bne.n	8008b28 <_strtod_l+0x8b8>
 8008a44:	e63d      	b.n	80086c2 <_strtod_l+0x452>
 8008a46:	f018 0f01 	tst.w	r8, #1
 8008a4a:	d004      	beq.n	8008a56 <_strtod_l+0x7e6>
 8008a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a50:	f7f7 fdf2 	bl	8000638 <__aeabi_dmul>
 8008a54:	2301      	movs	r3, #1
 8008a56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a5a:	3508      	adds	r5, #8
 8008a5c:	e6e5      	b.n	800882a <_strtod_l+0x5ba>
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	ea03 0a0a 	and.w	sl, r3, sl
 8008a6a:	e6ff      	b.n	800886c <_strtod_l+0x5fc>
 8008a6c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008a70:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008a74:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008a78:	36e2      	adds	r6, #226	; 0xe2
 8008a7a:	fa01 f306 	lsl.w	r3, r1, r6
 8008a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a80:	910f      	str	r1, [sp, #60]	; 0x3c
 8008a82:	e75d      	b.n	8008940 <_strtod_l+0x6d0>
 8008a84:	2300      	movs	r3, #0
 8008a86:	930a      	str	r3, [sp, #40]	; 0x28
 8008a88:	2301      	movs	r3, #1
 8008a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a8c:	e758      	b.n	8008940 <_strtod_l+0x6d0>
 8008a8e:	4632      	mov	r2, r6
 8008a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a92:	4648      	mov	r0, r9
 8008a94:	f001 fe18 	bl	800a6c8 <__lshift>
 8008a98:	901c      	str	r0, [sp, #112]	; 0x70
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f47f af7c 	bne.w	8008998 <_strtod_l+0x728>
 8008aa0:	e604      	b.n	80086ac <_strtod_l+0x43c>
 8008aa2:	bf00      	nop
 8008aa4:	0800dca0 	.word	0x0800dca0
 8008aa8:	fffffc02 	.word	0xfffffc02
 8008aac:	465d      	mov	r5, fp
 8008aae:	f040 8086 	bne.w	8008bbe <_strtod_l+0x94e>
 8008ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ab8:	b32a      	cbz	r2, 8008b06 <_strtod_l+0x896>
 8008aba:	4aaf      	ldr	r2, [pc, #700]	; (8008d78 <_strtod_l+0xb08>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d153      	bne.n	8008b68 <_strtod_l+0x8f8>
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	b1d3      	cbz	r3, 8008afc <_strtod_l+0x88c>
 8008ac6:	4aad      	ldr	r2, [pc, #692]	; (8008d7c <_strtod_l+0xb0c>)
 8008ac8:	402a      	ands	r2, r5
 8008aca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008ace:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ad2:	d816      	bhi.n	8008b02 <_strtod_l+0x892>
 8008ad4:	0d12      	lsrs	r2, r2, #20
 8008ad6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ada:	fa01 f303 	lsl.w	r3, r1, r3
 8008ade:	4298      	cmp	r0, r3
 8008ae0:	d142      	bne.n	8008b68 <_strtod_l+0x8f8>
 8008ae2:	4ba7      	ldr	r3, [pc, #668]	; (8008d80 <_strtod_l+0xb10>)
 8008ae4:	429d      	cmp	r5, r3
 8008ae6:	d102      	bne.n	8008aee <_strtod_l+0x87e>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f addf 	beq.w	80086ac <_strtod_l+0x43c>
 8008aee:	4ba3      	ldr	r3, [pc, #652]	; (8008d7c <_strtod_l+0xb0c>)
 8008af0:	402b      	ands	r3, r5
 8008af2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008af6:	f04f 0a00 	mov.w	sl, #0
 8008afa:	e7a0      	b.n	8008a3e <_strtod_l+0x7ce>
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b00:	e7ed      	b.n	8008ade <_strtod_l+0x86e>
 8008b02:	460b      	mov	r3, r1
 8008b04:	e7eb      	b.n	8008ade <_strtod_l+0x86e>
 8008b06:	bb7b      	cbnz	r3, 8008b68 <_strtod_l+0x8f8>
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	d12c      	bne.n	8008b68 <_strtod_l+0x8f8>
 8008b0e:	9904      	ldr	r1, [sp, #16]
 8008b10:	4a9a      	ldr	r2, [pc, #616]	; (8008d7c <_strtod_l+0xb0c>)
 8008b12:	465b      	mov	r3, fp
 8008b14:	b1f1      	cbz	r1, 8008b54 <_strtod_l+0x8e4>
 8008b16:	ea02 010b 	and.w	r1, r2, fp
 8008b1a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b1e:	dc19      	bgt.n	8008b54 <_strtod_l+0x8e4>
 8008b20:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b24:	f77f ae5b 	ble.w	80087de <_strtod_l+0x56e>
 8008b28:	4a96      	ldr	r2, [pc, #600]	; (8008d84 <_strtod_l+0xb14>)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008b30:	4650      	mov	r0, sl
 8008b32:	4659      	mov	r1, fp
 8008b34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b38:	f7f7 fd7e 	bl	8000638 <__aeabi_dmul>
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	468b      	mov	fp, r1
 8008b40:	2900      	cmp	r1, #0
 8008b42:	f47f adbe 	bne.w	80086c2 <_strtod_l+0x452>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f47f adbb 	bne.w	80086c2 <_strtod_l+0x452>
 8008b4c:	2322      	movs	r3, #34	; 0x22
 8008b4e:	f8c9 3000 	str.w	r3, [r9]
 8008b52:	e5b6      	b.n	80086c2 <_strtod_l+0x452>
 8008b54:	4013      	ands	r3, r2
 8008b56:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b5a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008b66:	e76a      	b.n	8008a3e <_strtod_l+0x7ce>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	b193      	cbz	r3, 8008b92 <_strtod_l+0x922>
 8008b6c:	422b      	tst	r3, r5
 8008b6e:	f43f af66 	beq.w	8008a3e <_strtod_l+0x7ce>
 8008b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b74:	9a04      	ldr	r2, [sp, #16]
 8008b76:	4650      	mov	r0, sl
 8008b78:	4659      	mov	r1, fp
 8008b7a:	b173      	cbz	r3, 8008b9a <_strtod_l+0x92a>
 8008b7c:	f7ff fb5a 	bl	8008234 <sulp>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b88:	f7f7 fba0 	bl	80002cc <__adddf3>
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	468b      	mov	fp, r1
 8008b90:	e755      	b.n	8008a3e <_strtod_l+0x7ce>
 8008b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b94:	ea13 0f0a 	tst.w	r3, sl
 8008b98:	e7e9      	b.n	8008b6e <_strtod_l+0x8fe>
 8008b9a:	f7ff fb4b 	bl	8008234 <sulp>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ba6:	f7f7 fb8f 	bl	80002c8 <__aeabi_dsub>
 8008baa:	2200      	movs	r2, #0
 8008bac:	2300      	movs	r3, #0
 8008bae:	4682      	mov	sl, r0
 8008bb0:	468b      	mov	fp, r1
 8008bb2:	f7f7 ffa9 	bl	8000b08 <__aeabi_dcmpeq>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f47f ae11 	bne.w	80087de <_strtod_l+0x56e>
 8008bbc:	e73f      	b.n	8008a3e <_strtod_l+0x7ce>
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f001 ff12 	bl	800a9ea <__ratio>
 8008bc6:	ec57 6b10 	vmov	r6, r7, d0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bd0:	ee10 0a10 	vmov	r0, s0
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 ffab 	bl	8000b30 <__aeabi_dcmple>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d077      	beq.n	8008cce <_strtod_l+0xa5e>
 8008bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d04a      	beq.n	8008c7a <_strtod_l+0xa0a>
 8008be4:	4b68      	ldr	r3, [pc, #416]	; (8008d88 <_strtod_l+0xb18>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008bec:	4f66      	ldr	r7, [pc, #408]	; (8008d88 <_strtod_l+0xb18>)
 8008bee:	2600      	movs	r6, #0
 8008bf0:	4b62      	ldr	r3, [pc, #392]	; (8008d7c <_strtod_l+0xb0c>)
 8008bf2:	402b      	ands	r3, r5
 8008bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bf8:	4b64      	ldr	r3, [pc, #400]	; (8008d8c <_strtod_l+0xb1c>)
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	f040 80ce 	bne.w	8008d9c <_strtod_l+0xb2c>
 8008c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c08:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008c0c:	ec4b ab10 	vmov	d0, sl, fp
 8008c10:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008c14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c18:	f001 fe22 	bl	800a860 <__ulp>
 8008c1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c20:	ec53 2b10 	vmov	r2, r3, d0
 8008c24:	f7f7 fd08 	bl	8000638 <__aeabi_dmul>
 8008c28:	4652      	mov	r2, sl
 8008c2a:	465b      	mov	r3, fp
 8008c2c:	f7f7 fb4e 	bl	80002cc <__adddf3>
 8008c30:	460b      	mov	r3, r1
 8008c32:	4952      	ldr	r1, [pc, #328]	; (8008d7c <_strtod_l+0xb0c>)
 8008c34:	4a56      	ldr	r2, [pc, #344]	; (8008d90 <_strtod_l+0xb20>)
 8008c36:	4019      	ands	r1, r3
 8008c38:	4291      	cmp	r1, r2
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	d95b      	bls.n	8008cf6 <_strtod_l+0xa86>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d103      	bne.n	8008c50 <_strtod_l+0x9e0>
 8008c48:	9b08      	ldr	r3, [sp, #32]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f43f ad2e 	beq.w	80086ac <_strtod_l+0x43c>
 8008c50:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008d80 <_strtod_l+0xb10>
 8008c54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f001 fb68 	bl	800a330 <_Bfree>
 8008c60:	9905      	ldr	r1, [sp, #20]
 8008c62:	4648      	mov	r0, r9
 8008c64:	f001 fb64 	bl	800a330 <_Bfree>
 8008c68:	4641      	mov	r1, r8
 8008c6a:	4648      	mov	r0, r9
 8008c6c:	f001 fb60 	bl	800a330 <_Bfree>
 8008c70:	4621      	mov	r1, r4
 8008c72:	4648      	mov	r0, r9
 8008c74:	f001 fb5c 	bl	800a330 <_Bfree>
 8008c78:	e619      	b.n	80088ae <_strtod_l+0x63e>
 8008c7a:	f1ba 0f00 	cmp.w	sl, #0
 8008c7e:	d11a      	bne.n	8008cb6 <_strtod_l+0xa46>
 8008c80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c84:	b9eb      	cbnz	r3, 8008cc2 <_strtod_l+0xa52>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b3f      	ldr	r3, [pc, #252]	; (8008d88 <_strtod_l+0xb18>)
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	f7f7 ff45 	bl	8000b1c <__aeabi_dcmplt>
 8008c92:	b9c8      	cbnz	r0, 8008cc8 <_strtod_l+0xa58>
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4b3e      	ldr	r3, [pc, #248]	; (8008d94 <_strtod_l+0xb24>)
 8008c9c:	f7f7 fccc 	bl	8000638 <__aeabi_dmul>
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	460f      	mov	r7, r1
 8008ca4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008ca8:	9618      	str	r6, [sp, #96]	; 0x60
 8008caa:	9319      	str	r3, [sp, #100]	; 0x64
 8008cac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008cb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008cb4:	e79c      	b.n	8008bf0 <_strtod_l+0x980>
 8008cb6:	f1ba 0f01 	cmp.w	sl, #1
 8008cba:	d102      	bne.n	8008cc2 <_strtod_l+0xa52>
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	f43f ad8e 	beq.w	80087de <_strtod_l+0x56e>
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4b34      	ldr	r3, [pc, #208]	; (8008d98 <_strtod_l+0xb28>)
 8008cc6:	e78f      	b.n	8008be8 <_strtod_l+0x978>
 8008cc8:	2600      	movs	r6, #0
 8008cca:	4f32      	ldr	r7, [pc, #200]	; (8008d94 <_strtod_l+0xb24>)
 8008ccc:	e7ea      	b.n	8008ca4 <_strtod_l+0xa34>
 8008cce:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <_strtod_l+0xb24>)
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f7f7 fcaf 	bl	8000638 <__aeabi_dmul>
 8008cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	b933      	cbnz	r3, 8008cf0 <_strtod_l+0xa80>
 8008ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ce6:	9010      	str	r0, [sp, #64]	; 0x40
 8008ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8008cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cee:	e7df      	b.n	8008cb0 <_strtod_l+0xa40>
 8008cf0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008cf4:	e7f9      	b.n	8008cea <_strtod_l+0xa7a>
 8008cf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1ab      	bne.n	8008c58 <_strtod_l+0x9e8>
 8008d00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d04:	0d1b      	lsrs	r3, r3, #20
 8008d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d08:	051b      	lsls	r3, r3, #20
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	465d      	mov	r5, fp
 8008d0e:	d1a3      	bne.n	8008c58 <_strtod_l+0x9e8>
 8008d10:	4639      	mov	r1, r7
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7f7 ff40 	bl	8000b98 <__aeabi_d2iz>
 8008d18:	f7f7 fc24 	bl	8000564 <__aeabi_i2d>
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4639      	mov	r1, r7
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7f7 fad0 	bl	80002c8 <__aeabi_dsub>
 8008d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	b933      	cbnz	r3, 8008d3e <_strtod_l+0xace>
 8008d30:	f1ba 0f00 	cmp.w	sl, #0
 8008d34:	d103      	bne.n	8008d3e <_strtod_l+0xace>
 8008d36:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	d06d      	beq.n	8008e1a <_strtod_l+0xbaa>
 8008d3e:	a30a      	add	r3, pc, #40	; (adr r3, 8008d68 <_strtod_l+0xaf8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 fee8 	bl	8000b1c <__aeabi_dcmplt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f47f acb8 	bne.w	80086c2 <_strtod_l+0x452>
 8008d52:	a307      	add	r3, pc, #28	; (adr r3, 8008d70 <_strtod_l+0xb00>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fefc 	bl	8000b58 <__aeabi_dcmpgt>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f43f af79 	beq.w	8008c58 <_strtod_l+0x9e8>
 8008d66:	e4ac      	b.n	80086c2 <_strtod_l+0x452>
 8008d68:	94a03595 	.word	0x94a03595
 8008d6c:	3fdfffff 	.word	0x3fdfffff
 8008d70:	35afe535 	.word	0x35afe535
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	000fffff 	.word	0x000fffff
 8008d7c:	7ff00000 	.word	0x7ff00000
 8008d80:	7fefffff 	.word	0x7fefffff
 8008d84:	39500000 	.word	0x39500000
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	7fe00000 	.word	0x7fe00000
 8008d90:	7c9fffff 	.word	0x7c9fffff
 8008d94:	3fe00000 	.word	0x3fe00000
 8008d98:	bff00000 	.word	0xbff00000
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	b333      	cbz	r3, 8008dee <_strtod_l+0xb7e>
 8008da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008da2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008da6:	d822      	bhi.n	8008dee <_strtod_l+0xb7e>
 8008da8:	a327      	add	r3, pc, #156	; (adr r3, 8008e48 <_strtod_l+0xbd8>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 febd 	bl	8000b30 <__aeabi_dcmple>
 8008db6:	b1a0      	cbz	r0, 8008de2 <_strtod_l+0xb72>
 8008db8:	4639      	mov	r1, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7f7 ff14 	bl	8000be8 <__aeabi_d2uiz>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	bf08      	it	eq
 8008dc4:	2001      	moveq	r0, #1
 8008dc6:	f7f7 fbbd 	bl	8000544 <__aeabi_ui2d>
 8008dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460f      	mov	r7, r1
 8008dd0:	bb03      	cbnz	r3, 8008e14 <_strtod_l+0xba4>
 8008dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dd6:	9012      	str	r0, [sp, #72]	; 0x48
 8008dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008de6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dee:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008df2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008df6:	f001 fd33 	bl	800a860 <__ulp>
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	ec53 2b10 	vmov	r2, r3, d0
 8008e00:	4659      	mov	r1, fp
 8008e02:	f7f7 fc19 	bl	8000638 <__aeabi_dmul>
 8008e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e0a:	f7f7 fa5f 	bl	80002cc <__adddf3>
 8008e0e:	4682      	mov	sl, r0
 8008e10:	468b      	mov	fp, r1
 8008e12:	e772      	b.n	8008cfa <_strtod_l+0xa8a>
 8008e14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008e18:	e7df      	b.n	8008dda <_strtod_l+0xb6a>
 8008e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8008e50 <_strtod_l+0xbe0>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8008e24:	e79c      	b.n	8008d60 <_strtod_l+0xaf0>
 8008e26:	2300      	movs	r3, #0
 8008e28:	930d      	str	r3, [sp, #52]	; 0x34
 8008e2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	f7ff ba61 	b.w	80082f6 <_strtod_l+0x86>
 8008e34:	2b65      	cmp	r3, #101	; 0x65
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	f43f ab4e 	beq.w	80084da <_strtod_l+0x26a>
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4614      	mov	r4, r2
 8008e42:	9104      	str	r1, [sp, #16]
 8008e44:	f7ff bacb 	b.w	80083de <_strtod_l+0x16e>
 8008e48:	ffc00000 	.word	0xffc00000
 8008e4c:	41dfffff 	.word	0x41dfffff
 8008e50:	94a03595 	.word	0x94a03595
 8008e54:	3fcfffff 	.word	0x3fcfffff

08008e58 <_strtod_r>:
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <_strtod_r+0x18>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	b410      	push	{r4}
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	4c04      	ldr	r4, [pc, #16]	; (8008e74 <_strtod_r+0x1c>)
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bf08      	it	eq
 8008e66:	4623      	moveq	r3, r4
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6c:	f7ff ba00 	b.w	8008270 <_strtod_l>
 8008e70:	20000058 	.word	0x20000058
 8008e74:	200000bc 	.word	0x200000bc

08008e78 <_strtol_l.isra.0>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	4692      	mov	sl, r2
 8008e82:	461e      	mov	r6, r3
 8008e84:	460f      	mov	r7, r1
 8008e86:	463d      	mov	r5, r7
 8008e88:	9808      	ldr	r0, [sp, #32]
 8008e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e8e:	f001 f9ed 	bl	800a26c <__locale_ctype_ptr_l>
 8008e92:	4420      	add	r0, r4
 8008e94:	7843      	ldrb	r3, [r0, #1]
 8008e96:	f013 0308 	ands.w	r3, r3, #8
 8008e9a:	d132      	bne.n	8008f02 <_strtol_l.isra.0+0x8a>
 8008e9c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e9e:	d132      	bne.n	8008f06 <_strtol_l.isra.0+0x8e>
 8008ea0:	787c      	ldrb	r4, [r7, #1]
 8008ea2:	1cbd      	adds	r5, r7, #2
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d05d      	beq.n	8008f66 <_strtol_l.isra.0+0xee>
 8008eaa:	2e10      	cmp	r6, #16
 8008eac:	d109      	bne.n	8008ec2 <_strtol_l.isra.0+0x4a>
 8008eae:	2c30      	cmp	r4, #48	; 0x30
 8008eb0:	d107      	bne.n	8008ec2 <_strtol_l.isra.0+0x4a>
 8008eb2:	782b      	ldrb	r3, [r5, #0]
 8008eb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008eb8:	2b58      	cmp	r3, #88	; 0x58
 8008eba:	d14f      	bne.n	8008f5c <_strtol_l.isra.0+0xe4>
 8008ebc:	786c      	ldrb	r4, [r5, #1]
 8008ebe:	2610      	movs	r6, #16
 8008ec0:	3502      	adds	r5, #2
 8008ec2:	2a00      	cmp	r2, #0
 8008ec4:	bf14      	ite	ne
 8008ec6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008eca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008ece:	2700      	movs	r7, #0
 8008ed0:	fbb1 fcf6 	udiv	ip, r1, r6
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008eda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d817      	bhi.n	8008f12 <_strtol_l.isra.0+0x9a>
 8008ee2:	461c      	mov	r4, r3
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	dd23      	ble.n	8008f30 <_strtol_l.isra.0+0xb8>
 8008ee8:	1c7b      	adds	r3, r7, #1
 8008eea:	d007      	beq.n	8008efc <_strtol_l.isra.0+0x84>
 8008eec:	4584      	cmp	ip, r0
 8008eee:	d31c      	bcc.n	8008f2a <_strtol_l.isra.0+0xb2>
 8008ef0:	d101      	bne.n	8008ef6 <_strtol_l.isra.0+0x7e>
 8008ef2:	45a6      	cmp	lr, r4
 8008ef4:	db19      	blt.n	8008f2a <_strtol_l.isra.0+0xb2>
 8008ef6:	fb00 4006 	mla	r0, r0, r6, r4
 8008efa:	2701      	movs	r7, #1
 8008efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f00:	e7eb      	b.n	8008eda <_strtol_l.isra.0+0x62>
 8008f02:	462f      	mov	r7, r5
 8008f04:	e7bf      	b.n	8008e86 <_strtol_l.isra.0+0xe>
 8008f06:	2c2b      	cmp	r4, #43	; 0x2b
 8008f08:	bf04      	itt	eq
 8008f0a:	1cbd      	addeq	r5, r7, #2
 8008f0c:	787c      	ldrbeq	r4, [r7, #1]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	e7c9      	b.n	8008ea6 <_strtol_l.isra.0+0x2e>
 8008f12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008f16:	2b19      	cmp	r3, #25
 8008f18:	d801      	bhi.n	8008f1e <_strtol_l.isra.0+0xa6>
 8008f1a:	3c37      	subs	r4, #55	; 0x37
 8008f1c:	e7e2      	b.n	8008ee4 <_strtol_l.isra.0+0x6c>
 8008f1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008f22:	2b19      	cmp	r3, #25
 8008f24:	d804      	bhi.n	8008f30 <_strtol_l.isra.0+0xb8>
 8008f26:	3c57      	subs	r4, #87	; 0x57
 8008f28:	e7dc      	b.n	8008ee4 <_strtol_l.isra.0+0x6c>
 8008f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008f2e:	e7e5      	b.n	8008efc <_strtol_l.isra.0+0x84>
 8008f30:	1c7b      	adds	r3, r7, #1
 8008f32:	d108      	bne.n	8008f46 <_strtol_l.isra.0+0xce>
 8008f34:	2322      	movs	r3, #34	; 0x22
 8008f36:	f8c8 3000 	str.w	r3, [r8]
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	f1ba 0f00 	cmp.w	sl, #0
 8008f40:	d107      	bne.n	8008f52 <_strtol_l.isra.0+0xda>
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	b102      	cbz	r2, 8008f4a <_strtol_l.isra.0+0xd2>
 8008f48:	4240      	negs	r0, r0
 8008f4a:	f1ba 0f00 	cmp.w	sl, #0
 8008f4e:	d0f8      	beq.n	8008f42 <_strtol_l.isra.0+0xca>
 8008f50:	b10f      	cbz	r7, 8008f56 <_strtol_l.isra.0+0xde>
 8008f52:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008f56:	f8ca 9000 	str.w	r9, [sl]
 8008f5a:	e7f2      	b.n	8008f42 <_strtol_l.isra.0+0xca>
 8008f5c:	2430      	movs	r4, #48	; 0x30
 8008f5e:	2e00      	cmp	r6, #0
 8008f60:	d1af      	bne.n	8008ec2 <_strtol_l.isra.0+0x4a>
 8008f62:	2608      	movs	r6, #8
 8008f64:	e7ad      	b.n	8008ec2 <_strtol_l.isra.0+0x4a>
 8008f66:	2c30      	cmp	r4, #48	; 0x30
 8008f68:	d0a3      	beq.n	8008eb2 <_strtol_l.isra.0+0x3a>
 8008f6a:	260a      	movs	r6, #10
 8008f6c:	e7a9      	b.n	8008ec2 <_strtol_l.isra.0+0x4a>
	...

08008f70 <_strtol_r>:
 8008f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f72:	4c06      	ldr	r4, [pc, #24]	; (8008f8c <_strtol_r+0x1c>)
 8008f74:	4d06      	ldr	r5, [pc, #24]	; (8008f90 <_strtol_r+0x20>)
 8008f76:	6824      	ldr	r4, [r4, #0]
 8008f78:	6a24      	ldr	r4, [r4, #32]
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	bf08      	it	eq
 8008f7e:	462c      	moveq	r4, r5
 8008f80:	9400      	str	r4, [sp, #0]
 8008f82:	f7ff ff79 	bl	8008e78 <_strtol_l.isra.0>
 8008f86:	b003      	add	sp, #12
 8008f88:	bd30      	pop	{r4, r5, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000058 	.word	0x20000058
 8008f90:	200000bc 	.word	0x200000bc

08008f94 <quorem>:
 8008f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	6903      	ldr	r3, [r0, #16]
 8008f9a:	690c      	ldr	r4, [r1, #16]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	f2c0 8082 	blt.w	80090a8 <quorem+0x114>
 8008fa4:	3c01      	subs	r4, #1
 8008fa6:	f101 0714 	add.w	r7, r1, #20
 8008faa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008fae:	f100 0614 	add.w	r6, r0, #20
 8008fb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008fb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008fba:	eb06 030c 	add.w	r3, r6, ip
 8008fbe:	3501      	adds	r5, #1
 8008fc0:	eb07 090c 	add.w	r9, r7, ip
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	fbb0 f5f5 	udiv	r5, r0, r5
 8008fca:	b395      	cbz	r5, 8009032 <quorem+0x9e>
 8008fcc:	f04f 0a00 	mov.w	sl, #0
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	46b6      	mov	lr, r6
 8008fd4:	46d3      	mov	fp, sl
 8008fd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fda:	b293      	uxth	r3, r2
 8008fdc:	fb05 a303 	mla	r3, r5, r3, sl
 8008fe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	ebab 0303 	sub.w	r3, fp, r3
 8008fea:	0c12      	lsrs	r2, r2, #16
 8008fec:	f8de b000 	ldr.w	fp, [lr]
 8008ff0:	fb05 a202 	mla	r2, r5, r2, sl
 8008ff4:	fa13 f38b 	uxtah	r3, r3, fp
 8008ff8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008ffc:	fa1f fb82 	uxth.w	fp, r2
 8009000:	f8de 2000 	ldr.w	r2, [lr]
 8009004:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800900c:	b29b      	uxth	r3, r3
 800900e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009012:	4581      	cmp	r9, r0
 8009014:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009018:	f84e 3b04 	str.w	r3, [lr], #4
 800901c:	d2db      	bcs.n	8008fd6 <quorem+0x42>
 800901e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009022:	b933      	cbnz	r3, 8009032 <quorem+0x9e>
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	3b04      	subs	r3, #4
 8009028:	429e      	cmp	r6, r3
 800902a:	461a      	mov	r2, r3
 800902c:	d330      	bcc.n	8009090 <quorem+0xfc>
 800902e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009032:	4640      	mov	r0, r8
 8009034:	f001 fb9c 	bl	800a770 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	db25      	blt.n	8009088 <quorem+0xf4>
 800903c:	3501      	adds	r5, #1
 800903e:	4630      	mov	r0, r6
 8009040:	f04f 0c00 	mov.w	ip, #0
 8009044:	f857 2b04 	ldr.w	r2, [r7], #4
 8009048:	f8d0 e000 	ldr.w	lr, [r0]
 800904c:	b293      	uxth	r3, r2
 800904e:	ebac 0303 	sub.w	r3, ip, r3
 8009052:	0c12      	lsrs	r2, r2, #16
 8009054:	fa13 f38e 	uxtah	r3, r3, lr
 8009058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800905c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009066:	45b9      	cmp	r9, r7
 8009068:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800906c:	f840 3b04 	str.w	r3, [r0], #4
 8009070:	d2e8      	bcs.n	8009044 <quorem+0xb0>
 8009072:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009076:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800907a:	b92a      	cbnz	r2, 8009088 <quorem+0xf4>
 800907c:	3b04      	subs	r3, #4
 800907e:	429e      	cmp	r6, r3
 8009080:	461a      	mov	r2, r3
 8009082:	d30b      	bcc.n	800909c <quorem+0x108>
 8009084:	f8c8 4010 	str.w	r4, [r8, #16]
 8009088:	4628      	mov	r0, r5
 800908a:	b003      	add	sp, #12
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	3b04      	subs	r3, #4
 8009094:	2a00      	cmp	r2, #0
 8009096:	d1ca      	bne.n	800902e <quorem+0x9a>
 8009098:	3c01      	subs	r4, #1
 800909a:	e7c5      	b.n	8009028 <quorem+0x94>
 800909c:	6812      	ldr	r2, [r2, #0]
 800909e:	3b04      	subs	r3, #4
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	d1ef      	bne.n	8009084 <quorem+0xf0>
 80090a4:	3c01      	subs	r4, #1
 80090a6:	e7ea      	b.n	800907e <quorem+0xea>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7ee      	b.n	800908a <quorem+0xf6>
 80090ac:	0000      	movs	r0, r0
	...

080090b0 <_dtoa_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	ec57 6b10 	vmov	r6, r7, d0
 80090b8:	b097      	sub	sp, #92	; 0x5c
 80090ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090bc:	9106      	str	r1, [sp, #24]
 80090be:	4604      	mov	r4, r0
 80090c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80090c2:	9312      	str	r3, [sp, #72]	; 0x48
 80090c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090c8:	e9cd 6700 	strd	r6, r7, [sp]
 80090cc:	b93d      	cbnz	r5, 80090de <_dtoa_r+0x2e>
 80090ce:	2010      	movs	r0, #16
 80090d0:	f001 f8e0 	bl	800a294 <malloc>
 80090d4:	6260      	str	r0, [r4, #36]	; 0x24
 80090d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090da:	6005      	str	r5, [r0, #0]
 80090dc:	60c5      	str	r5, [r0, #12]
 80090de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e0:	6819      	ldr	r1, [r3, #0]
 80090e2:	b151      	cbz	r1, 80090fa <_dtoa_r+0x4a>
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	604a      	str	r2, [r1, #4]
 80090e8:	2301      	movs	r3, #1
 80090ea:	4093      	lsls	r3, r2
 80090ec:	608b      	str	r3, [r1, #8]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f001 f91e 	bl	800a330 <_Bfree>
 80090f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	1e3b      	subs	r3, r7, #0
 80090fc:	bfbb      	ittet	lt
 80090fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009102:	9301      	strlt	r3, [sp, #4]
 8009104:	2300      	movge	r3, #0
 8009106:	2201      	movlt	r2, #1
 8009108:	bfac      	ite	ge
 800910a:	f8c8 3000 	strge.w	r3, [r8]
 800910e:	f8c8 2000 	strlt.w	r2, [r8]
 8009112:	4baf      	ldr	r3, [pc, #700]	; (80093d0 <_dtoa_r+0x320>)
 8009114:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009118:	ea33 0308 	bics.w	r3, r3, r8
 800911c:	d114      	bne.n	8009148 <_dtoa_r+0x98>
 800911e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009120:	f242 730f 	movw	r3, #9999	; 0x270f
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	b923      	cbnz	r3, 8009134 <_dtoa_r+0x84>
 800912a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800912e:	2800      	cmp	r0, #0
 8009130:	f000 8542 	beq.w	8009bb8 <_dtoa_r+0xb08>
 8009134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009136:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80093e4 <_dtoa_r+0x334>
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8544 	beq.w	8009bc8 <_dtoa_r+0xb18>
 8009140:	f10b 0303 	add.w	r3, fp, #3
 8009144:	f000 bd3e 	b.w	8009bc4 <_dtoa_r+0xb14>
 8009148:	e9dd 6700 	ldrd	r6, r7, [sp]
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8009158:	4681      	mov	r9, r0
 800915a:	b168      	cbz	r0, 8009178 <_dtoa_r+0xc8>
 800915c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800915e:	2301      	movs	r3, #1
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8524 	beq.w	8009bb2 <_dtoa_r+0xb02>
 800916a:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <_dtoa_r+0x324>)
 800916c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800916e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	f000 bd28 	b.w	8009bc8 <_dtoa_r+0xb18>
 8009178:	aa14      	add	r2, sp, #80	; 0x50
 800917a:	a915      	add	r1, sp, #84	; 0x54
 800917c:	ec47 6b10 	vmov	d0, r6, r7
 8009180:	4620      	mov	r0, r4
 8009182:	f001 fbe3 	bl	800a94c <__d2b>
 8009186:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800918a:	9004      	str	r0, [sp, #16]
 800918c:	2d00      	cmp	r5, #0
 800918e:	d07c      	beq.n	800928a <_dtoa_r+0x1da>
 8009190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009194:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009198:	46b2      	mov	sl, r6
 800919a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800919e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80091a6:	2200      	movs	r2, #0
 80091a8:	4b8b      	ldr	r3, [pc, #556]	; (80093d8 <_dtoa_r+0x328>)
 80091aa:	4650      	mov	r0, sl
 80091ac:	4659      	mov	r1, fp
 80091ae:	f7f7 f88b 	bl	80002c8 <__aeabi_dsub>
 80091b2:	a381      	add	r3, pc, #516	; (adr r3, 80093b8 <_dtoa_r+0x308>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 fa3e 	bl	8000638 <__aeabi_dmul>
 80091bc:	a380      	add	r3, pc, #512	; (adr r3, 80093c0 <_dtoa_r+0x310>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f883 	bl	80002cc <__adddf3>
 80091c6:	4606      	mov	r6, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	460f      	mov	r7, r1
 80091cc:	f7f7 f9ca 	bl	8000564 <__aeabi_i2d>
 80091d0:	a37d      	add	r3, pc, #500	; (adr r3, 80093c8 <_dtoa_r+0x318>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 fa2f 	bl	8000638 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 f873 	bl	80002cc <__adddf3>
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	f7f7 fcd5 	bl	8000b98 <__aeabi_d2iz>
 80091ee:	2200      	movs	r2, #0
 80091f0:	4682      	mov	sl, r0
 80091f2:	2300      	movs	r3, #0
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 fc90 	bl	8000b1c <__aeabi_dcmplt>
 80091fc:	b148      	cbz	r0, 8009212 <_dtoa_r+0x162>
 80091fe:	4650      	mov	r0, sl
 8009200:	f7f7 f9b0 	bl	8000564 <__aeabi_i2d>
 8009204:	4632      	mov	r2, r6
 8009206:	463b      	mov	r3, r7
 8009208:	f7f7 fc7e 	bl	8000b08 <__aeabi_dcmpeq>
 800920c:	b908      	cbnz	r0, 8009212 <_dtoa_r+0x162>
 800920e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009212:	f1ba 0f16 	cmp.w	sl, #22
 8009216:	d859      	bhi.n	80092cc <_dtoa_r+0x21c>
 8009218:	4970      	ldr	r1, [pc, #448]	; (80093dc <_dtoa_r+0x32c>)
 800921a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800921e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009226:	f7f7 fc97 	bl	8000b58 <__aeabi_dcmpgt>
 800922a:	2800      	cmp	r0, #0
 800922c:	d050      	beq.n	80092d0 <_dtoa_r+0x220>
 800922e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009232:	2300      	movs	r3, #0
 8009234:	930f      	str	r3, [sp, #60]	; 0x3c
 8009236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009238:	1b5d      	subs	r5, r3, r5
 800923a:	f1b5 0801 	subs.w	r8, r5, #1
 800923e:	bf49      	itett	mi
 8009240:	f1c5 0301 	rsbmi	r3, r5, #1
 8009244:	2300      	movpl	r3, #0
 8009246:	9305      	strmi	r3, [sp, #20]
 8009248:	f04f 0800 	movmi.w	r8, #0
 800924c:	bf58      	it	pl
 800924e:	9305      	strpl	r3, [sp, #20]
 8009250:	f1ba 0f00 	cmp.w	sl, #0
 8009254:	db3e      	blt.n	80092d4 <_dtoa_r+0x224>
 8009256:	2300      	movs	r3, #0
 8009258:	44d0      	add	r8, sl
 800925a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	9b06      	ldr	r3, [sp, #24]
 8009262:	2b09      	cmp	r3, #9
 8009264:	f200 8090 	bhi.w	8009388 <_dtoa_r+0x2d8>
 8009268:	2b05      	cmp	r3, #5
 800926a:	bfc4      	itt	gt
 800926c:	3b04      	subgt	r3, #4
 800926e:	9306      	strgt	r3, [sp, #24]
 8009270:	9b06      	ldr	r3, [sp, #24]
 8009272:	f1a3 0302 	sub.w	r3, r3, #2
 8009276:	bfcc      	ite	gt
 8009278:	2500      	movgt	r5, #0
 800927a:	2501      	movle	r5, #1
 800927c:	2b03      	cmp	r3, #3
 800927e:	f200 808f 	bhi.w	80093a0 <_dtoa_r+0x2f0>
 8009282:	e8df f003 	tbb	[pc, r3]
 8009286:	7f7d      	.short	0x7f7d
 8009288:	7131      	.short	0x7131
 800928a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800928e:	441d      	add	r5, r3
 8009290:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009294:	2820      	cmp	r0, #32
 8009296:	dd13      	ble.n	80092c0 <_dtoa_r+0x210>
 8009298:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800929c:	9b00      	ldr	r3, [sp, #0]
 800929e:	fa08 f800 	lsl.w	r8, r8, r0
 80092a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80092a6:	fa23 f000 	lsr.w	r0, r3, r0
 80092aa:	ea48 0000 	orr.w	r0, r8, r0
 80092ae:	f7f7 f949 	bl	8000544 <__aeabi_ui2d>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4682      	mov	sl, r0
 80092b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80092ba:	3d01      	subs	r5, #1
 80092bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80092be:	e772      	b.n	80091a6 <_dtoa_r+0xf6>
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	f1c0 0020 	rsb	r0, r0, #32
 80092c6:	fa03 f000 	lsl.w	r0, r3, r0
 80092ca:	e7f0      	b.n	80092ae <_dtoa_r+0x1fe>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e7b1      	b.n	8009234 <_dtoa_r+0x184>
 80092d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80092d2:	e7b0      	b.n	8009236 <_dtoa_r+0x186>
 80092d4:	9b05      	ldr	r3, [sp, #20]
 80092d6:	eba3 030a 	sub.w	r3, r3, sl
 80092da:	9305      	str	r3, [sp, #20]
 80092dc:	f1ca 0300 	rsb	r3, sl, #0
 80092e0:	9307      	str	r3, [sp, #28]
 80092e2:	2300      	movs	r3, #0
 80092e4:	930e      	str	r3, [sp, #56]	; 0x38
 80092e6:	e7bb      	b.n	8009260 <_dtoa_r+0x1b0>
 80092e8:	2301      	movs	r3, #1
 80092ea:	930a      	str	r3, [sp, #40]	; 0x28
 80092ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd59      	ble.n	80093a6 <_dtoa_r+0x2f6>
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	4699      	mov	r9, r3
 80092f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092f8:	2200      	movs	r2, #0
 80092fa:	6072      	str	r2, [r6, #4]
 80092fc:	2204      	movs	r2, #4
 80092fe:	f102 0014 	add.w	r0, r2, #20
 8009302:	4298      	cmp	r0, r3
 8009304:	6871      	ldr	r1, [r6, #4]
 8009306:	d953      	bls.n	80093b0 <_dtoa_r+0x300>
 8009308:	4620      	mov	r0, r4
 800930a:	f000 ffdd 	bl	800a2c8 <_Balloc>
 800930e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009310:	6030      	str	r0, [r6, #0]
 8009312:	f1b9 0f0e 	cmp.w	r9, #14
 8009316:	f8d3 b000 	ldr.w	fp, [r3]
 800931a:	f200 80e6 	bhi.w	80094ea <_dtoa_r+0x43a>
 800931e:	2d00      	cmp	r5, #0
 8009320:	f000 80e3 	beq.w	80094ea <_dtoa_r+0x43a>
 8009324:	ed9d 7b00 	vldr	d7, [sp]
 8009328:	f1ba 0f00 	cmp.w	sl, #0
 800932c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009330:	dd74      	ble.n	800941c <_dtoa_r+0x36c>
 8009332:	4a2a      	ldr	r2, [pc, #168]	; (80093dc <_dtoa_r+0x32c>)
 8009334:	f00a 030f 	and.w	r3, sl, #15
 8009338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800933c:	ed93 7b00 	vldr	d7, [r3]
 8009340:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009344:	06f0      	lsls	r0, r6, #27
 8009346:	ed8d 7b08 	vstr	d7, [sp, #32]
 800934a:	d565      	bpl.n	8009418 <_dtoa_r+0x368>
 800934c:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <_dtoa_r+0x330>)
 800934e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009352:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009356:	f7f7 fa99 	bl	800088c <__aeabi_ddiv>
 800935a:	e9cd 0100 	strd	r0, r1, [sp]
 800935e:	f006 060f 	and.w	r6, r6, #15
 8009362:	2503      	movs	r5, #3
 8009364:	4f1e      	ldr	r7, [pc, #120]	; (80093e0 <_dtoa_r+0x330>)
 8009366:	e04c      	b.n	8009402 <_dtoa_r+0x352>
 8009368:	2301      	movs	r3, #1
 800936a:	930a      	str	r3, [sp, #40]	; 0x28
 800936c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936e:	4453      	add	r3, sl
 8009370:	f103 0901 	add.w	r9, r3, #1
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	464b      	mov	r3, r9
 8009378:	2b01      	cmp	r3, #1
 800937a:	bfb8      	it	lt
 800937c:	2301      	movlt	r3, #1
 800937e:	e7ba      	b.n	80092f6 <_dtoa_r+0x246>
 8009380:	2300      	movs	r3, #0
 8009382:	e7b2      	b.n	80092ea <_dtoa_r+0x23a>
 8009384:	2300      	movs	r3, #0
 8009386:	e7f0      	b.n	800936a <_dtoa_r+0x2ba>
 8009388:	2501      	movs	r5, #1
 800938a:	2300      	movs	r3, #0
 800938c:	9306      	str	r3, [sp, #24]
 800938e:	950a      	str	r5, [sp, #40]	; 0x28
 8009390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	4699      	mov	r9, r3
 8009398:	2200      	movs	r2, #0
 800939a:	2312      	movs	r3, #18
 800939c:	920b      	str	r2, [sp, #44]	; 0x2c
 800939e:	e7aa      	b.n	80092f6 <_dtoa_r+0x246>
 80093a0:	2301      	movs	r3, #1
 80093a2:	930a      	str	r3, [sp, #40]	; 0x28
 80093a4:	e7f4      	b.n	8009390 <_dtoa_r+0x2e0>
 80093a6:	2301      	movs	r3, #1
 80093a8:	9302      	str	r3, [sp, #8]
 80093aa:	4699      	mov	r9, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	e7f5      	b.n	800939c <_dtoa_r+0x2ec>
 80093b0:	3101      	adds	r1, #1
 80093b2:	6071      	str	r1, [r6, #4]
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	e7a2      	b.n	80092fe <_dtoa_r+0x24e>
 80093b8:	636f4361 	.word	0x636f4361
 80093bc:	3fd287a7 	.word	0x3fd287a7
 80093c0:	8b60c8b3 	.word	0x8b60c8b3
 80093c4:	3fc68a28 	.word	0x3fc68a28
 80093c8:	509f79fb 	.word	0x509f79fb
 80093cc:	3fd34413 	.word	0x3fd34413
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	0800dc49 	.word	0x0800dc49
 80093d8:	3ff80000 	.word	0x3ff80000
 80093dc:	0800dd08 	.word	0x0800dd08
 80093e0:	0800dce0 	.word	0x0800dce0
 80093e4:	0800dcd1 	.word	0x0800dcd1
 80093e8:	07f1      	lsls	r1, r6, #31
 80093ea:	d508      	bpl.n	80093fe <_dtoa_r+0x34e>
 80093ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093fc:	3501      	adds	r5, #1
 80093fe:	1076      	asrs	r6, r6, #1
 8009400:	3708      	adds	r7, #8
 8009402:	2e00      	cmp	r6, #0
 8009404:	d1f0      	bne.n	80093e8 <_dtoa_r+0x338>
 8009406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800940a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800940e:	f7f7 fa3d 	bl	800088c <__aeabi_ddiv>
 8009412:	e9cd 0100 	strd	r0, r1, [sp]
 8009416:	e01a      	b.n	800944e <_dtoa_r+0x39e>
 8009418:	2502      	movs	r5, #2
 800941a:	e7a3      	b.n	8009364 <_dtoa_r+0x2b4>
 800941c:	f000 80a0 	beq.w	8009560 <_dtoa_r+0x4b0>
 8009420:	f1ca 0600 	rsb	r6, sl, #0
 8009424:	4b9f      	ldr	r3, [pc, #636]	; (80096a4 <_dtoa_r+0x5f4>)
 8009426:	4fa0      	ldr	r7, [pc, #640]	; (80096a8 <_dtoa_r+0x5f8>)
 8009428:	f006 020f 	and.w	r2, r6, #15
 800942c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009438:	f7f7 f8fe 	bl	8000638 <__aeabi_dmul>
 800943c:	e9cd 0100 	strd	r0, r1, [sp]
 8009440:	1136      	asrs	r6, r6, #4
 8009442:	2300      	movs	r3, #0
 8009444:	2502      	movs	r5, #2
 8009446:	2e00      	cmp	r6, #0
 8009448:	d17f      	bne.n	800954a <_dtoa_r+0x49a>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e1      	bne.n	8009412 <_dtoa_r+0x362>
 800944e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8087 	beq.w	8009564 <_dtoa_r+0x4b4>
 8009456:	e9dd 6700 	ldrd	r6, r7, [sp]
 800945a:	2200      	movs	r2, #0
 800945c:	4b93      	ldr	r3, [pc, #588]	; (80096ac <_dtoa_r+0x5fc>)
 800945e:	4630      	mov	r0, r6
 8009460:	4639      	mov	r1, r7
 8009462:	f7f7 fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8009466:	2800      	cmp	r0, #0
 8009468:	d07c      	beq.n	8009564 <_dtoa_r+0x4b4>
 800946a:	f1b9 0f00 	cmp.w	r9, #0
 800946e:	d079      	beq.n	8009564 <_dtoa_r+0x4b4>
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd35      	ble.n	80094e2 <_dtoa_r+0x432>
 8009476:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	4639      	mov	r1, r7
 800947e:	2200      	movs	r2, #0
 8009480:	4b8b      	ldr	r3, [pc, #556]	; (80096b0 <_dtoa_r+0x600>)
 8009482:	4630      	mov	r0, r6
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	e9cd 0100 	strd	r0, r1, [sp]
 800948c:	9f02      	ldr	r7, [sp, #8]
 800948e:	3501      	adds	r5, #1
 8009490:	4628      	mov	r0, r5
 8009492:	f7f7 f867 	bl	8000564 <__aeabi_i2d>
 8009496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800949a:	f7f7 f8cd 	bl	8000638 <__aeabi_dmul>
 800949e:	2200      	movs	r2, #0
 80094a0:	4b84      	ldr	r3, [pc, #528]	; (80096b4 <_dtoa_r+0x604>)
 80094a2:	f7f6 ff13 	bl	80002cc <__adddf3>
 80094a6:	4605      	mov	r5, r0
 80094a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	d15d      	bne.n	800956c <_dtoa_r+0x4bc>
 80094b0:	2200      	movs	r2, #0
 80094b2:	4b81      	ldr	r3, [pc, #516]	; (80096b8 <_dtoa_r+0x608>)
 80094b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094b8:	f7f6 ff06 	bl	80002c8 <__aeabi_dsub>
 80094bc:	462a      	mov	r2, r5
 80094be:	4633      	mov	r3, r6
 80094c0:	e9cd 0100 	strd	r0, r1, [sp]
 80094c4:	f7f7 fb48 	bl	8000b58 <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f040 8288 	bne.w	80099de <_dtoa_r+0x92e>
 80094ce:	462a      	mov	r2, r5
 80094d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094d8:	f7f7 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f040 827c 	bne.w	80099da <_dtoa_r+0x92a>
 80094e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094e6:	e9cd 2300 	strd	r2, r3, [sp]
 80094ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f2c0 8150 	blt.w	8009792 <_dtoa_r+0x6e2>
 80094f2:	f1ba 0f0e 	cmp.w	sl, #14
 80094f6:	f300 814c 	bgt.w	8009792 <_dtoa_r+0x6e2>
 80094fa:	4b6a      	ldr	r3, [pc, #424]	; (80096a4 <_dtoa_r+0x5f4>)
 80094fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009500:	ed93 7b00 	vldr	d7, [r3]
 8009504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009506:	2b00      	cmp	r3, #0
 8009508:	ed8d 7b02 	vstr	d7, [sp, #8]
 800950c:	f280 80d8 	bge.w	80096c0 <_dtoa_r+0x610>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	f300 80d4 	bgt.w	80096c0 <_dtoa_r+0x610>
 8009518:	f040 825e 	bne.w	80099d8 <_dtoa_r+0x928>
 800951c:	2200      	movs	r2, #0
 800951e:	4b66      	ldr	r3, [pc, #408]	; (80096b8 <_dtoa_r+0x608>)
 8009520:	ec51 0b17 	vmov	r0, r1, d7
 8009524:	f7f7 f888 	bl	8000638 <__aeabi_dmul>
 8009528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800952c:	f7f7 fb0a 	bl	8000b44 <__aeabi_dcmpge>
 8009530:	464f      	mov	r7, r9
 8009532:	464e      	mov	r6, r9
 8009534:	2800      	cmp	r0, #0
 8009536:	f040 8234 	bne.w	80099a2 <_dtoa_r+0x8f2>
 800953a:	2331      	movs	r3, #49	; 0x31
 800953c:	f10b 0501 	add.w	r5, fp, #1
 8009540:	f88b 3000 	strb.w	r3, [fp]
 8009544:	f10a 0a01 	add.w	sl, sl, #1
 8009548:	e22f      	b.n	80099aa <_dtoa_r+0x8fa>
 800954a:	07f2      	lsls	r2, r6, #31
 800954c:	d505      	bpl.n	800955a <_dtoa_r+0x4aa>
 800954e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009552:	f7f7 f871 	bl	8000638 <__aeabi_dmul>
 8009556:	3501      	adds	r5, #1
 8009558:	2301      	movs	r3, #1
 800955a:	1076      	asrs	r6, r6, #1
 800955c:	3708      	adds	r7, #8
 800955e:	e772      	b.n	8009446 <_dtoa_r+0x396>
 8009560:	2502      	movs	r5, #2
 8009562:	e774      	b.n	800944e <_dtoa_r+0x39e>
 8009564:	f8cd a020 	str.w	sl, [sp, #32]
 8009568:	464f      	mov	r7, r9
 800956a:	e791      	b.n	8009490 <_dtoa_r+0x3e0>
 800956c:	4b4d      	ldr	r3, [pc, #308]	; (80096a4 <_dtoa_r+0x5f4>)
 800956e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009572:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009578:	2b00      	cmp	r3, #0
 800957a:	d047      	beq.n	800960c <_dtoa_r+0x55c>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	2000      	movs	r0, #0
 8009582:	494e      	ldr	r1, [pc, #312]	; (80096bc <_dtoa_r+0x60c>)
 8009584:	f7f7 f982 	bl	800088c <__aeabi_ddiv>
 8009588:	462a      	mov	r2, r5
 800958a:	4633      	mov	r3, r6
 800958c:	f7f6 fe9c 	bl	80002c8 <__aeabi_dsub>
 8009590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009594:	465d      	mov	r5, fp
 8009596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800959a:	f7f7 fafd 	bl	8000b98 <__aeabi_d2iz>
 800959e:	4606      	mov	r6, r0
 80095a0:	f7f6 ffe0 	bl	8000564 <__aeabi_i2d>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095ac:	f7f6 fe8c 	bl	80002c8 <__aeabi_dsub>
 80095b0:	3630      	adds	r6, #48	; 0x30
 80095b2:	f805 6b01 	strb.w	r6, [r5], #1
 80095b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095ba:	e9cd 0100 	strd	r0, r1, [sp]
 80095be:	f7f7 faad 	bl	8000b1c <__aeabi_dcmplt>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d163      	bne.n	800968e <_dtoa_r+0x5de>
 80095c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ca:	2000      	movs	r0, #0
 80095cc:	4937      	ldr	r1, [pc, #220]	; (80096ac <_dtoa_r+0x5fc>)
 80095ce:	f7f6 fe7b 	bl	80002c8 <__aeabi_dsub>
 80095d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095d6:	f7f7 faa1 	bl	8000b1c <__aeabi_dcmplt>
 80095da:	2800      	cmp	r0, #0
 80095dc:	f040 80b7 	bne.w	800974e <_dtoa_r+0x69e>
 80095e0:	eba5 030b 	sub.w	r3, r5, fp
 80095e4:	429f      	cmp	r7, r3
 80095e6:	f77f af7c 	ble.w	80094e2 <_dtoa_r+0x432>
 80095ea:	2200      	movs	r2, #0
 80095ec:	4b30      	ldr	r3, [pc, #192]	; (80096b0 <_dtoa_r+0x600>)
 80095ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095f2:	f7f7 f821 	bl	8000638 <__aeabi_dmul>
 80095f6:	2200      	movs	r2, #0
 80095f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80095fc:	4b2c      	ldr	r3, [pc, #176]	; (80096b0 <_dtoa_r+0x600>)
 80095fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009602:	f7f7 f819 	bl	8000638 <__aeabi_dmul>
 8009606:	e9cd 0100 	strd	r0, r1, [sp]
 800960a:	e7c4      	b.n	8009596 <_dtoa_r+0x4e6>
 800960c:	462a      	mov	r2, r5
 800960e:	4633      	mov	r3, r6
 8009610:	f7f7 f812 	bl	8000638 <__aeabi_dmul>
 8009614:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009618:	eb0b 0507 	add.w	r5, fp, r7
 800961c:	465e      	mov	r6, fp
 800961e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009622:	f7f7 fab9 	bl	8000b98 <__aeabi_d2iz>
 8009626:	4607      	mov	r7, r0
 8009628:	f7f6 ff9c 	bl	8000564 <__aeabi_i2d>
 800962c:	3730      	adds	r7, #48	; 0x30
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009636:	f7f6 fe47 	bl	80002c8 <__aeabi_dsub>
 800963a:	f806 7b01 	strb.w	r7, [r6], #1
 800963e:	42ae      	cmp	r6, r5
 8009640:	e9cd 0100 	strd	r0, r1, [sp]
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	d126      	bne.n	8009698 <_dtoa_r+0x5e8>
 800964a:	4b1c      	ldr	r3, [pc, #112]	; (80096bc <_dtoa_r+0x60c>)
 800964c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009650:	f7f6 fe3c 	bl	80002cc <__adddf3>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800965c:	f7f7 fa7c 	bl	8000b58 <__aeabi_dcmpgt>
 8009660:	2800      	cmp	r0, #0
 8009662:	d174      	bne.n	800974e <_dtoa_r+0x69e>
 8009664:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009668:	2000      	movs	r0, #0
 800966a:	4914      	ldr	r1, [pc, #80]	; (80096bc <_dtoa_r+0x60c>)
 800966c:	f7f6 fe2c 	bl	80002c8 <__aeabi_dsub>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009678:	f7f7 fa50 	bl	8000b1c <__aeabi_dcmplt>
 800967c:	2800      	cmp	r0, #0
 800967e:	f43f af30 	beq.w	80094e2 <_dtoa_r+0x432>
 8009682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009686:	2b30      	cmp	r3, #48	; 0x30
 8009688:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800968c:	d002      	beq.n	8009694 <_dtoa_r+0x5e4>
 800968e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009692:	e04a      	b.n	800972a <_dtoa_r+0x67a>
 8009694:	4615      	mov	r5, r2
 8009696:	e7f4      	b.n	8009682 <_dtoa_r+0x5d2>
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <_dtoa_r+0x600>)
 800969a:	f7f6 ffcd 	bl	8000638 <__aeabi_dmul>
 800969e:	e9cd 0100 	strd	r0, r1, [sp]
 80096a2:	e7bc      	b.n	800961e <_dtoa_r+0x56e>
 80096a4:	0800dd08 	.word	0x0800dd08
 80096a8:	0800dce0 	.word	0x0800dce0
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	40240000 	.word	0x40240000
 80096b4:	401c0000 	.word	0x401c0000
 80096b8:	40140000 	.word	0x40140000
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80096c4:	465d      	mov	r5, fp
 80096c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ca:	4630      	mov	r0, r6
 80096cc:	4639      	mov	r1, r7
 80096ce:	f7f7 f8dd 	bl	800088c <__aeabi_ddiv>
 80096d2:	f7f7 fa61 	bl	8000b98 <__aeabi_d2iz>
 80096d6:	4680      	mov	r8, r0
 80096d8:	f7f6 ff44 	bl	8000564 <__aeabi_i2d>
 80096dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096e0:	f7f6 ffaa 	bl	8000638 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80096f0:	f7f6 fdea 	bl	80002c8 <__aeabi_dsub>
 80096f4:	f805 6b01 	strb.w	r6, [r5], #1
 80096f8:	eba5 060b 	sub.w	r6, r5, fp
 80096fc:	45b1      	cmp	r9, r6
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	d139      	bne.n	8009778 <_dtoa_r+0x6c8>
 8009704:	f7f6 fde2 	bl	80002cc <__adddf3>
 8009708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	f7f7 fa22 	bl	8000b58 <__aeabi_dcmpgt>
 8009714:	b9c8      	cbnz	r0, 800974a <_dtoa_r+0x69a>
 8009716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	f7f7 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 8009722:	b110      	cbz	r0, 800972a <_dtoa_r+0x67a>
 8009724:	f018 0f01 	tst.w	r8, #1
 8009728:	d10f      	bne.n	800974a <_dtoa_r+0x69a>
 800972a:	9904      	ldr	r1, [sp, #16]
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fdff 	bl	800a330 <_Bfree>
 8009732:	2300      	movs	r3, #0
 8009734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009736:	702b      	strb	r3, [r5, #0]
 8009738:	f10a 0301 	add.w	r3, sl, #1
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 8241 	beq.w	8009bc8 <_dtoa_r+0xb18>
 8009746:	601d      	str	r5, [r3, #0]
 8009748:	e23e      	b.n	8009bc8 <_dtoa_r+0xb18>
 800974a:	f8cd a020 	str.w	sl, [sp, #32]
 800974e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009752:	2a39      	cmp	r2, #57	; 0x39
 8009754:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009758:	d108      	bne.n	800976c <_dtoa_r+0x6bc>
 800975a:	459b      	cmp	fp, r3
 800975c:	d10a      	bne.n	8009774 <_dtoa_r+0x6c4>
 800975e:	9b08      	ldr	r3, [sp, #32]
 8009760:	3301      	adds	r3, #1
 8009762:	9308      	str	r3, [sp, #32]
 8009764:	2330      	movs	r3, #48	; 0x30
 8009766:	f88b 3000 	strb.w	r3, [fp]
 800976a:	465b      	mov	r3, fp
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	3201      	adds	r2, #1
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e78c      	b.n	800968e <_dtoa_r+0x5de>
 8009774:	461d      	mov	r5, r3
 8009776:	e7ea      	b.n	800974e <_dtoa_r+0x69e>
 8009778:	2200      	movs	r2, #0
 800977a:	4b9b      	ldr	r3, [pc, #620]	; (80099e8 <_dtoa_r+0x938>)
 800977c:	f7f6 ff5c 	bl	8000638 <__aeabi_dmul>
 8009780:	2200      	movs	r2, #0
 8009782:	2300      	movs	r3, #0
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	f7f7 f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800978c:	2800      	cmp	r0, #0
 800978e:	d09a      	beq.n	80096c6 <_dtoa_r+0x616>
 8009790:	e7cb      	b.n	800972a <_dtoa_r+0x67a>
 8009792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009794:	2a00      	cmp	r2, #0
 8009796:	f000 808b 	beq.w	80098b0 <_dtoa_r+0x800>
 800979a:	9a06      	ldr	r2, [sp, #24]
 800979c:	2a01      	cmp	r2, #1
 800979e:	dc6e      	bgt.n	800987e <_dtoa_r+0x7ce>
 80097a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	d067      	beq.n	8009876 <_dtoa_r+0x7c6>
 80097a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097aa:	9f07      	ldr	r7, [sp, #28]
 80097ac:	9d05      	ldr	r5, [sp, #20]
 80097ae:	9a05      	ldr	r2, [sp, #20]
 80097b0:	2101      	movs	r1, #1
 80097b2:	441a      	add	r2, r3
 80097b4:	4620      	mov	r0, r4
 80097b6:	9205      	str	r2, [sp, #20]
 80097b8:	4498      	add	r8, r3
 80097ba:	f000 fe97 	bl	800a4ec <__i2b>
 80097be:	4606      	mov	r6, r0
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	dd0c      	ble.n	80097de <_dtoa_r+0x72e>
 80097c4:	f1b8 0f00 	cmp.w	r8, #0
 80097c8:	dd09      	ble.n	80097de <_dtoa_r+0x72e>
 80097ca:	4545      	cmp	r5, r8
 80097cc:	9a05      	ldr	r2, [sp, #20]
 80097ce:	462b      	mov	r3, r5
 80097d0:	bfa8      	it	ge
 80097d2:	4643      	movge	r3, r8
 80097d4:	1ad2      	subs	r2, r2, r3
 80097d6:	9205      	str	r2, [sp, #20]
 80097d8:	1aed      	subs	r5, r5, r3
 80097da:	eba8 0803 	sub.w	r8, r8, r3
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	b1eb      	cbz	r3, 800981e <_dtoa_r+0x76e>
 80097e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d067      	beq.n	80098b8 <_dtoa_r+0x808>
 80097e8:	b18f      	cbz	r7, 800980e <_dtoa_r+0x75e>
 80097ea:	4631      	mov	r1, r6
 80097ec:	463a      	mov	r2, r7
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 ff1c 	bl	800a62c <__pow5mult>
 80097f4:	9a04      	ldr	r2, [sp, #16]
 80097f6:	4601      	mov	r1, r0
 80097f8:	4606      	mov	r6, r0
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 fe7f 	bl	800a4fe <__multiply>
 8009800:	9904      	ldr	r1, [sp, #16]
 8009802:	9008      	str	r0, [sp, #32]
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fd93 	bl	800a330 <_Bfree>
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	9b07      	ldr	r3, [sp, #28]
 8009810:	1bda      	subs	r2, r3, r7
 8009812:	d004      	beq.n	800981e <_dtoa_r+0x76e>
 8009814:	9904      	ldr	r1, [sp, #16]
 8009816:	4620      	mov	r0, r4
 8009818:	f000 ff08 	bl	800a62c <__pow5mult>
 800981c:	9004      	str	r0, [sp, #16]
 800981e:	2101      	movs	r1, #1
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fe63 	bl	800a4ec <__i2b>
 8009826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009828:	4607      	mov	r7, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 81d0 	beq.w	8009bd0 <_dtoa_r+0xb20>
 8009830:	461a      	mov	r2, r3
 8009832:	4601      	mov	r1, r0
 8009834:	4620      	mov	r0, r4
 8009836:	f000 fef9 	bl	800a62c <__pow5mult>
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	2b01      	cmp	r3, #1
 800983e:	4607      	mov	r7, r0
 8009840:	dc40      	bgt.n	80098c4 <_dtoa_r+0x814>
 8009842:	9b00      	ldr	r3, [sp, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d139      	bne.n	80098bc <_dtoa_r+0x80c>
 8009848:	9b01      	ldr	r3, [sp, #4]
 800984a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800984e:	2b00      	cmp	r3, #0
 8009850:	d136      	bne.n	80098c0 <_dtoa_r+0x810>
 8009852:	9b01      	ldr	r3, [sp, #4]
 8009854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009858:	0d1b      	lsrs	r3, r3, #20
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	b12b      	cbz	r3, 800986a <_dtoa_r+0x7ba>
 800985e:	9b05      	ldr	r3, [sp, #20]
 8009860:	3301      	adds	r3, #1
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	f108 0801 	add.w	r8, r8, #1
 8009868:	2301      	movs	r3, #1
 800986a:	9307      	str	r3, [sp, #28]
 800986c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800986e:	2b00      	cmp	r3, #0
 8009870:	d12a      	bne.n	80098c8 <_dtoa_r+0x818>
 8009872:	2001      	movs	r0, #1
 8009874:	e030      	b.n	80098d8 <_dtoa_r+0x828>
 8009876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009878:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800987c:	e795      	b.n	80097aa <_dtoa_r+0x6fa>
 800987e:	9b07      	ldr	r3, [sp, #28]
 8009880:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8009884:	42bb      	cmp	r3, r7
 8009886:	bfbf      	itttt	lt
 8009888:	9b07      	ldrlt	r3, [sp, #28]
 800988a:	9707      	strlt	r7, [sp, #28]
 800988c:	1afa      	sublt	r2, r7, r3
 800988e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009890:	bfbb      	ittet	lt
 8009892:	189b      	addlt	r3, r3, r2
 8009894:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009896:	1bdf      	subge	r7, r3, r7
 8009898:	2700      	movlt	r7, #0
 800989a:	f1b9 0f00 	cmp.w	r9, #0
 800989e:	bfb5      	itete	lt
 80098a0:	9b05      	ldrlt	r3, [sp, #20]
 80098a2:	9d05      	ldrge	r5, [sp, #20]
 80098a4:	eba3 0509 	sublt.w	r5, r3, r9
 80098a8:	464b      	movge	r3, r9
 80098aa:	bfb8      	it	lt
 80098ac:	2300      	movlt	r3, #0
 80098ae:	e77e      	b.n	80097ae <_dtoa_r+0x6fe>
 80098b0:	9f07      	ldr	r7, [sp, #28]
 80098b2:	9d05      	ldr	r5, [sp, #20]
 80098b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80098b6:	e783      	b.n	80097c0 <_dtoa_r+0x710>
 80098b8:	9a07      	ldr	r2, [sp, #28]
 80098ba:	e7ab      	b.n	8009814 <_dtoa_r+0x764>
 80098bc:	2300      	movs	r3, #0
 80098be:	e7d4      	b.n	800986a <_dtoa_r+0x7ba>
 80098c0:	9b00      	ldr	r3, [sp, #0]
 80098c2:	e7d2      	b.n	800986a <_dtoa_r+0x7ba>
 80098c4:	2300      	movs	r3, #0
 80098c6:	9307      	str	r3, [sp, #28]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80098ce:	6918      	ldr	r0, [r3, #16]
 80098d0:	f000 fdbe 	bl	800a450 <__hi0bits>
 80098d4:	f1c0 0020 	rsb	r0, r0, #32
 80098d8:	4440      	add	r0, r8
 80098da:	f010 001f 	ands.w	r0, r0, #31
 80098de:	d047      	beq.n	8009970 <_dtoa_r+0x8c0>
 80098e0:	f1c0 0320 	rsb	r3, r0, #32
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	dd3b      	ble.n	8009960 <_dtoa_r+0x8b0>
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	f1c0 001c 	rsb	r0, r0, #28
 80098ee:	4403      	add	r3, r0
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	4405      	add	r5, r0
 80098f4:	4480      	add	r8, r0
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	dd05      	ble.n	8009908 <_dtoa_r+0x858>
 80098fc:	461a      	mov	r2, r3
 80098fe:	9904      	ldr	r1, [sp, #16]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fee1 	bl	800a6c8 <__lshift>
 8009906:	9004      	str	r0, [sp, #16]
 8009908:	f1b8 0f00 	cmp.w	r8, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x86a>
 800990e:	4639      	mov	r1, r7
 8009910:	4642      	mov	r2, r8
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fed8 	bl	800a6c8 <__lshift>
 8009918:	4607      	mov	r7, r0
 800991a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800991c:	b353      	cbz	r3, 8009974 <_dtoa_r+0x8c4>
 800991e:	4639      	mov	r1, r7
 8009920:	9804      	ldr	r0, [sp, #16]
 8009922:	f000 ff25 	bl	800a770 <__mcmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	da24      	bge.n	8009974 <_dtoa_r+0x8c4>
 800992a:	2300      	movs	r3, #0
 800992c:	220a      	movs	r2, #10
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fd14 	bl	800a35e <__multadd>
 8009936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009938:	9004      	str	r0, [sp, #16]
 800993a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 814d 	beq.w	8009bde <_dtoa_r+0xb2e>
 8009944:	2300      	movs	r3, #0
 8009946:	4631      	mov	r1, r6
 8009948:	220a      	movs	r2, #10
 800994a:	4620      	mov	r0, r4
 800994c:	f000 fd07 	bl	800a35e <__multadd>
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	4606      	mov	r6, r0
 8009956:	dc4f      	bgt.n	80099f8 <_dtoa_r+0x948>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	2b02      	cmp	r3, #2
 800995c:	dd4c      	ble.n	80099f8 <_dtoa_r+0x948>
 800995e:	e011      	b.n	8009984 <_dtoa_r+0x8d4>
 8009960:	d0c9      	beq.n	80098f6 <_dtoa_r+0x846>
 8009962:	9a05      	ldr	r2, [sp, #20]
 8009964:	331c      	adds	r3, #28
 8009966:	441a      	add	r2, r3
 8009968:	9205      	str	r2, [sp, #20]
 800996a:	441d      	add	r5, r3
 800996c:	4498      	add	r8, r3
 800996e:	e7c2      	b.n	80098f6 <_dtoa_r+0x846>
 8009970:	4603      	mov	r3, r0
 8009972:	e7f6      	b.n	8009962 <_dtoa_r+0x8b2>
 8009974:	f1b9 0f00 	cmp.w	r9, #0
 8009978:	dc38      	bgt.n	80099ec <_dtoa_r+0x93c>
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	2b02      	cmp	r3, #2
 800997e:	dd35      	ble.n	80099ec <_dtoa_r+0x93c>
 8009980:	f8cd 9008 	str.w	r9, [sp, #8]
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	b963      	cbnz	r3, 80099a2 <_dtoa_r+0x8f2>
 8009988:	4639      	mov	r1, r7
 800998a:	2205      	movs	r2, #5
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fce6 	bl	800a35e <__multadd>
 8009992:	4601      	mov	r1, r0
 8009994:	4607      	mov	r7, r0
 8009996:	9804      	ldr	r0, [sp, #16]
 8009998:	f000 feea 	bl	800a770 <__mcmp>
 800999c:	2800      	cmp	r0, #0
 800999e:	f73f adcc 	bgt.w	800953a <_dtoa_r+0x48a>
 80099a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a4:	465d      	mov	r5, fp
 80099a6:	ea6f 0a03 	mvn.w	sl, r3
 80099aa:	f04f 0900 	mov.w	r9, #0
 80099ae:	4639      	mov	r1, r7
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fcbd 	bl	800a330 <_Bfree>
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	f43f aeb7 	beq.w	800972a <_dtoa_r+0x67a>
 80099bc:	f1b9 0f00 	cmp.w	r9, #0
 80099c0:	d005      	beq.n	80099ce <_dtoa_r+0x91e>
 80099c2:	45b1      	cmp	r9, r6
 80099c4:	d003      	beq.n	80099ce <_dtoa_r+0x91e>
 80099c6:	4649      	mov	r1, r9
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fcb1 	bl	800a330 <_Bfree>
 80099ce:	4631      	mov	r1, r6
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 fcad 	bl	800a330 <_Bfree>
 80099d6:	e6a8      	b.n	800972a <_dtoa_r+0x67a>
 80099d8:	2700      	movs	r7, #0
 80099da:	463e      	mov	r6, r7
 80099dc:	e7e1      	b.n	80099a2 <_dtoa_r+0x8f2>
 80099de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80099e2:	463e      	mov	r6, r7
 80099e4:	e5a9      	b.n	800953a <_dtoa_r+0x48a>
 80099e6:	bf00      	nop
 80099e8:	40240000 	.word	0x40240000
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80fa 	beq.w	8009bec <_dtoa_r+0xb3c>
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	dd05      	ble.n	8009a08 <_dtoa_r+0x958>
 80099fc:	4631      	mov	r1, r6
 80099fe:	462a      	mov	r2, r5
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fe61 	bl	800a6c8 <__lshift>
 8009a06:	4606      	mov	r6, r0
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d04c      	beq.n	8009aa8 <_dtoa_r+0x9f8>
 8009a0e:	6871      	ldr	r1, [r6, #4]
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fc59 	bl	800a2c8 <_Balloc>
 8009a16:	6932      	ldr	r2, [r6, #16]
 8009a18:	3202      	adds	r2, #2
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	0092      	lsls	r2, r2, #2
 8009a1e:	f106 010c 	add.w	r1, r6, #12
 8009a22:	300c      	adds	r0, #12
 8009a24:	f7fd fd5a 	bl	80074dc <memcpy>
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f000 fe4b 	bl	800a6c8 <__lshift>
 8009a32:	9b00      	ldr	r3, [sp, #0]
 8009a34:	f8cd b014 	str.w	fp, [sp, #20]
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	46b1      	mov	r9, r6
 8009a3e:	9307      	str	r3, [sp, #28]
 8009a40:	4606      	mov	r6, r0
 8009a42:	4639      	mov	r1, r7
 8009a44:	9804      	ldr	r0, [sp, #16]
 8009a46:	f7ff faa5 	bl	8008f94 <quorem>
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a52:	9804      	ldr	r0, [sp, #16]
 8009a54:	f000 fe8c 	bl	800a770 <__mcmp>
 8009a58:	4632      	mov	r2, r6
 8009a5a:	9000      	str	r0, [sp, #0]
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fea0 	bl	800a7a4 <__mdiff>
 8009a64:	68c3      	ldr	r3, [r0, #12]
 8009a66:	4602      	mov	r2, r0
 8009a68:	bb03      	cbnz	r3, 8009aac <_dtoa_r+0x9fc>
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	9008      	str	r0, [sp, #32]
 8009a6e:	9804      	ldr	r0, [sp, #16]
 8009a70:	f000 fe7e 	bl	800a770 <__mcmp>
 8009a74:	9a08      	ldr	r2, [sp, #32]
 8009a76:	4603      	mov	r3, r0
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	9308      	str	r3, [sp, #32]
 8009a7e:	f000 fc57 	bl	800a330 <_Bfree>
 8009a82:	9b08      	ldr	r3, [sp, #32]
 8009a84:	b9a3      	cbnz	r3, 8009ab0 <_dtoa_r+0xa00>
 8009a86:	9a06      	ldr	r2, [sp, #24]
 8009a88:	b992      	cbnz	r2, 8009ab0 <_dtoa_r+0xa00>
 8009a8a:	9a07      	ldr	r2, [sp, #28]
 8009a8c:	b982      	cbnz	r2, 8009ab0 <_dtoa_r+0xa00>
 8009a8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a92:	d029      	beq.n	8009ae8 <_dtoa_r+0xa38>
 8009a94:	9b00      	ldr	r3, [sp, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dd01      	ble.n	8009a9e <_dtoa_r+0x9ee>
 8009a9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009a9e:	9b05      	ldr	r3, [sp, #20]
 8009aa0:	1c5d      	adds	r5, r3, #1
 8009aa2:	f883 8000 	strb.w	r8, [r3]
 8009aa6:	e782      	b.n	80099ae <_dtoa_r+0x8fe>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	e7c2      	b.n	8009a32 <_dtoa_r+0x982>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e7e3      	b.n	8009a78 <_dtoa_r+0x9c8>
 8009ab0:	9a00      	ldr	r2, [sp, #0]
 8009ab2:	2a00      	cmp	r2, #0
 8009ab4:	db04      	blt.n	8009ac0 <_dtoa_r+0xa10>
 8009ab6:	d125      	bne.n	8009b04 <_dtoa_r+0xa54>
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	bb1a      	cbnz	r2, 8009b04 <_dtoa_r+0xa54>
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	bb0a      	cbnz	r2, 8009b04 <_dtoa_r+0xa54>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	ddec      	ble.n	8009a9e <_dtoa_r+0x9ee>
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	9904      	ldr	r1, [sp, #16]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fdfd 	bl	800a6c8 <__lshift>
 8009ace:	4639      	mov	r1, r7
 8009ad0:	9004      	str	r0, [sp, #16]
 8009ad2:	f000 fe4d 	bl	800a770 <__mcmp>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	dc03      	bgt.n	8009ae2 <_dtoa_r+0xa32>
 8009ada:	d1e0      	bne.n	8009a9e <_dtoa_r+0x9ee>
 8009adc:	f018 0f01 	tst.w	r8, #1
 8009ae0:	d0dd      	beq.n	8009a9e <_dtoa_r+0x9ee>
 8009ae2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ae6:	d1d8      	bne.n	8009a9a <_dtoa_r+0x9ea>
 8009ae8:	9b05      	ldr	r3, [sp, #20]
 8009aea:	9a05      	ldr	r2, [sp, #20]
 8009aec:	1c5d      	adds	r5, r3, #1
 8009aee:	2339      	movs	r3, #57	; 0x39
 8009af0:	7013      	strb	r3, [r2, #0]
 8009af2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009af6:	2b39      	cmp	r3, #57	; 0x39
 8009af8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009afc:	d04f      	beq.n	8009b9e <_dtoa_r+0xaee>
 8009afe:	3301      	adds	r3, #1
 8009b00:	7013      	strb	r3, [r2, #0]
 8009b02:	e754      	b.n	80099ae <_dtoa_r+0x8fe>
 8009b04:	9a05      	ldr	r2, [sp, #20]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f102 0501 	add.w	r5, r2, #1
 8009b0c:	dd06      	ble.n	8009b1c <_dtoa_r+0xa6c>
 8009b0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b12:	d0e9      	beq.n	8009ae8 <_dtoa_r+0xa38>
 8009b14:	f108 0801 	add.w	r8, r8, #1
 8009b18:	9b05      	ldr	r3, [sp, #20]
 8009b1a:	e7c2      	b.n	8009aa2 <_dtoa_r+0x9f2>
 8009b1c:	9a02      	ldr	r2, [sp, #8]
 8009b1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009b22:	eba5 030b 	sub.w	r3, r5, fp
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d021      	beq.n	8009b6e <_dtoa_r+0xabe>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	9904      	ldr	r1, [sp, #16]
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fc14 	bl	800a35e <__multadd>
 8009b36:	45b1      	cmp	r9, r6
 8009b38:	9004      	str	r0, [sp, #16]
 8009b3a:	f04f 0300 	mov.w	r3, #0
 8009b3e:	f04f 020a 	mov.w	r2, #10
 8009b42:	4649      	mov	r1, r9
 8009b44:	4620      	mov	r0, r4
 8009b46:	d105      	bne.n	8009b54 <_dtoa_r+0xaa4>
 8009b48:	f000 fc09 	bl	800a35e <__multadd>
 8009b4c:	4681      	mov	r9, r0
 8009b4e:	4606      	mov	r6, r0
 8009b50:	9505      	str	r5, [sp, #20]
 8009b52:	e776      	b.n	8009a42 <_dtoa_r+0x992>
 8009b54:	f000 fc03 	bl	800a35e <__multadd>
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4681      	mov	r9, r0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	220a      	movs	r2, #10
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fbfc 	bl	800a35e <__multadd>
 8009b66:	4606      	mov	r6, r0
 8009b68:	e7f2      	b.n	8009b50 <_dtoa_r+0xaa0>
 8009b6a:	f04f 0900 	mov.w	r9, #0
 8009b6e:	2201      	movs	r2, #1
 8009b70:	9904      	ldr	r1, [sp, #16]
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fda8 	bl	800a6c8 <__lshift>
 8009b78:	4639      	mov	r1, r7
 8009b7a:	9004      	str	r0, [sp, #16]
 8009b7c:	f000 fdf8 	bl	800a770 <__mcmp>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dcb6      	bgt.n	8009af2 <_dtoa_r+0xa42>
 8009b84:	d102      	bne.n	8009b8c <_dtoa_r+0xadc>
 8009b86:	f018 0f01 	tst.w	r8, #1
 8009b8a:	d1b2      	bne.n	8009af2 <_dtoa_r+0xa42>
 8009b8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b90:	2b30      	cmp	r3, #48	; 0x30
 8009b92:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009b96:	f47f af0a 	bne.w	80099ae <_dtoa_r+0x8fe>
 8009b9a:	4615      	mov	r5, r2
 8009b9c:	e7f6      	b.n	8009b8c <_dtoa_r+0xadc>
 8009b9e:	4593      	cmp	fp, r2
 8009ba0:	d105      	bne.n	8009bae <_dtoa_r+0xafe>
 8009ba2:	2331      	movs	r3, #49	; 0x31
 8009ba4:	f10a 0a01 	add.w	sl, sl, #1
 8009ba8:	f88b 3000 	strb.w	r3, [fp]
 8009bac:	e6ff      	b.n	80099ae <_dtoa_r+0x8fe>
 8009bae:	4615      	mov	r5, r2
 8009bb0:	e79f      	b.n	8009af2 <_dtoa_r+0xa42>
 8009bb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009c18 <_dtoa_r+0xb68>
 8009bb6:	e007      	b.n	8009bc8 <_dtoa_r+0xb18>
 8009bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009c1c <_dtoa_r+0xb6c>
 8009bbe:	b11b      	cbz	r3, 8009bc8 <_dtoa_r+0xb18>
 8009bc0:	f10b 0308 	add.w	r3, fp, #8
 8009bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4658      	mov	r0, fp
 8009bca:	b017      	add	sp, #92	; 0x5c
 8009bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	f77f ae35 	ble.w	8009842 <_dtoa_r+0x792>
 8009bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	e649      	b.n	8009872 <_dtoa_r+0x7c2>
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dc03      	bgt.n	8009bec <_dtoa_r+0xb3c>
 8009be4:	9b06      	ldr	r3, [sp, #24]
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	f73f aecc 	bgt.w	8009984 <_dtoa_r+0x8d4>
 8009bec:	465d      	mov	r5, fp
 8009bee:	4639      	mov	r1, r7
 8009bf0:	9804      	ldr	r0, [sp, #16]
 8009bf2:	f7ff f9cf 	bl	8008f94 <quorem>
 8009bf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009bfa:	f805 8b01 	strb.w	r8, [r5], #1
 8009bfe:	9a02      	ldr	r2, [sp, #8]
 8009c00:	eba5 030b 	sub.w	r3, r5, fp
 8009c04:	429a      	cmp	r2, r3
 8009c06:	ddb0      	ble.n	8009b6a <_dtoa_r+0xaba>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	220a      	movs	r2, #10
 8009c0c:	9904      	ldr	r1, [sp, #16]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 fba5 	bl	800a35e <__multadd>
 8009c14:	9004      	str	r0, [sp, #16]
 8009c16:	e7ea      	b.n	8009bee <_dtoa_r+0xb3e>
 8009c18:	0800dc48 	.word	0x0800dc48
 8009c1c:	0800dcc8 	.word	0x0800dcc8

08009c20 <rshift>:
 8009c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c22:	6906      	ldr	r6, [r0, #16]
 8009c24:	114b      	asrs	r3, r1, #5
 8009c26:	429e      	cmp	r6, r3
 8009c28:	f100 0414 	add.w	r4, r0, #20
 8009c2c:	dd30      	ble.n	8009c90 <rshift+0x70>
 8009c2e:	f011 011f 	ands.w	r1, r1, #31
 8009c32:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009c36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009c3a:	d108      	bne.n	8009c4e <rshift+0x2e>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	42b2      	cmp	r2, r6
 8009c40:	460b      	mov	r3, r1
 8009c42:	d211      	bcs.n	8009c68 <rshift+0x48>
 8009c44:	f852 3b04 	ldr.w	r3, [r2], #4
 8009c48:	f841 3b04 	str.w	r3, [r1], #4
 8009c4c:	e7f7      	b.n	8009c3e <rshift+0x1e>
 8009c4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009c52:	f1c1 0c20 	rsb	ip, r1, #32
 8009c56:	40cd      	lsrs	r5, r1
 8009c58:	3204      	adds	r2, #4
 8009c5a:	4623      	mov	r3, r4
 8009c5c:	42b2      	cmp	r2, r6
 8009c5e:	4617      	mov	r7, r2
 8009c60:	d30c      	bcc.n	8009c7c <rshift+0x5c>
 8009c62:	601d      	str	r5, [r3, #0]
 8009c64:	b105      	cbz	r5, 8009c68 <rshift+0x48>
 8009c66:	3304      	adds	r3, #4
 8009c68:	1b1a      	subs	r2, r3, r4
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c70:	bf08      	it	eq
 8009c72:	2300      	moveq	r3, #0
 8009c74:	6102      	str	r2, [r0, #16]
 8009c76:	bf08      	it	eq
 8009c78:	6143      	streq	r3, [r0, #20]
 8009c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7c:	683f      	ldr	r7, [r7, #0]
 8009c7e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009c82:	433d      	orrs	r5, r7
 8009c84:	f843 5b04 	str.w	r5, [r3], #4
 8009c88:	f852 5b04 	ldr.w	r5, [r2], #4
 8009c8c:	40cd      	lsrs	r5, r1
 8009c8e:	e7e5      	b.n	8009c5c <rshift+0x3c>
 8009c90:	4623      	mov	r3, r4
 8009c92:	e7e9      	b.n	8009c68 <rshift+0x48>

08009c94 <__hexdig_fun>:
 8009c94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c98:	2b09      	cmp	r3, #9
 8009c9a:	d802      	bhi.n	8009ca2 <__hexdig_fun+0xe>
 8009c9c:	3820      	subs	r0, #32
 8009c9e:	b2c0      	uxtb	r0, r0
 8009ca0:	4770      	bx	lr
 8009ca2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d801      	bhi.n	8009cae <__hexdig_fun+0x1a>
 8009caa:	3847      	subs	r0, #71	; 0x47
 8009cac:	e7f7      	b.n	8009c9e <__hexdig_fun+0xa>
 8009cae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	d801      	bhi.n	8009cba <__hexdig_fun+0x26>
 8009cb6:	3827      	subs	r0, #39	; 0x27
 8009cb8:	e7f1      	b.n	8009c9e <__hexdig_fun+0xa>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	4770      	bx	lr

08009cbe <__gethex>:
 8009cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc2:	b08b      	sub	sp, #44	; 0x2c
 8009cc4:	468a      	mov	sl, r1
 8009cc6:	9002      	str	r0, [sp, #8]
 8009cc8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009cca:	9306      	str	r3, [sp, #24]
 8009ccc:	4690      	mov	r8, r2
 8009cce:	f000 fad0 	bl	800a272 <__localeconv_l>
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f6 fa9a 	bl	8000210 <strlen>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	9001      	str	r0, [sp, #4]
 8009ce0:	4403      	add	r3, r0
 8009ce2:	f04f 0b00 	mov.w	fp, #0
 8009ce6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cea:	9307      	str	r3, [sp, #28]
 8009cec:	f8da 3000 	ldr.w	r3, [sl]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	461f      	mov	r7, r3
 8009cf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cf8:	2830      	cmp	r0, #48	; 0x30
 8009cfa:	d06c      	beq.n	8009dd6 <__gethex+0x118>
 8009cfc:	f7ff ffca 	bl	8009c94 <__hexdig_fun>
 8009d00:	4604      	mov	r4, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d16a      	bne.n	8009ddc <__gethex+0x11e>
 8009d06:	9a01      	ldr	r2, [sp, #4]
 8009d08:	9903      	ldr	r1, [sp, #12]
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	f001 f8f4 	bl	800aef8 <strncmp>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d166      	bne.n	8009de2 <__gethex+0x124>
 8009d14:	9b01      	ldr	r3, [sp, #4]
 8009d16:	5cf8      	ldrb	r0, [r7, r3]
 8009d18:	18fe      	adds	r6, r7, r3
 8009d1a:	f7ff ffbb 	bl	8009c94 <__hexdig_fun>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d062      	beq.n	8009de8 <__gethex+0x12a>
 8009d22:	4633      	mov	r3, r6
 8009d24:	7818      	ldrb	r0, [r3, #0]
 8009d26:	2830      	cmp	r0, #48	; 0x30
 8009d28:	461f      	mov	r7, r3
 8009d2a:	f103 0301 	add.w	r3, r3, #1
 8009d2e:	d0f9      	beq.n	8009d24 <__gethex+0x66>
 8009d30:	f7ff ffb0 	bl	8009c94 <__hexdig_fun>
 8009d34:	fab0 f580 	clz	r5, r0
 8009d38:	096d      	lsrs	r5, r5, #5
 8009d3a:	4634      	mov	r4, r6
 8009d3c:	f04f 0b01 	mov.w	fp, #1
 8009d40:	463a      	mov	r2, r7
 8009d42:	4616      	mov	r6, r2
 8009d44:	3201      	adds	r2, #1
 8009d46:	7830      	ldrb	r0, [r6, #0]
 8009d48:	f7ff ffa4 	bl	8009c94 <__hexdig_fun>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1f8      	bne.n	8009d42 <__gethex+0x84>
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	9903      	ldr	r1, [sp, #12]
 8009d54:	4630      	mov	r0, r6
 8009d56:	f001 f8cf 	bl	800aef8 <strncmp>
 8009d5a:	b950      	cbnz	r0, 8009d72 <__gethex+0xb4>
 8009d5c:	b954      	cbnz	r4, 8009d74 <__gethex+0xb6>
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	18f4      	adds	r4, r6, r3
 8009d62:	4622      	mov	r2, r4
 8009d64:	4616      	mov	r6, r2
 8009d66:	3201      	adds	r2, #1
 8009d68:	7830      	ldrb	r0, [r6, #0]
 8009d6a:	f7ff ff93 	bl	8009c94 <__hexdig_fun>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1f8      	bne.n	8009d64 <__gethex+0xa6>
 8009d72:	b10c      	cbz	r4, 8009d78 <__gethex+0xba>
 8009d74:	1ba4      	subs	r4, r4, r6
 8009d76:	00a4      	lsls	r4, r4, #2
 8009d78:	7833      	ldrb	r3, [r6, #0]
 8009d7a:	2b50      	cmp	r3, #80	; 0x50
 8009d7c:	d001      	beq.n	8009d82 <__gethex+0xc4>
 8009d7e:	2b70      	cmp	r3, #112	; 0x70
 8009d80:	d140      	bne.n	8009e04 <__gethex+0x146>
 8009d82:	7873      	ldrb	r3, [r6, #1]
 8009d84:	2b2b      	cmp	r3, #43	; 0x2b
 8009d86:	d031      	beq.n	8009dec <__gethex+0x12e>
 8009d88:	2b2d      	cmp	r3, #45	; 0x2d
 8009d8a:	d033      	beq.n	8009df4 <__gethex+0x136>
 8009d8c:	1c71      	adds	r1, r6, #1
 8009d8e:	f04f 0900 	mov.w	r9, #0
 8009d92:	7808      	ldrb	r0, [r1, #0]
 8009d94:	f7ff ff7e 	bl	8009c94 <__hexdig_fun>
 8009d98:	1e43      	subs	r3, r0, #1
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b18      	cmp	r3, #24
 8009d9e:	d831      	bhi.n	8009e04 <__gethex+0x146>
 8009da0:	f1a0 0210 	sub.w	r2, r0, #16
 8009da4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009da8:	f7ff ff74 	bl	8009c94 <__hexdig_fun>
 8009dac:	1e43      	subs	r3, r0, #1
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b18      	cmp	r3, #24
 8009db2:	d922      	bls.n	8009dfa <__gethex+0x13c>
 8009db4:	f1b9 0f00 	cmp.w	r9, #0
 8009db8:	d000      	beq.n	8009dbc <__gethex+0xfe>
 8009dba:	4252      	negs	r2, r2
 8009dbc:	4414      	add	r4, r2
 8009dbe:	f8ca 1000 	str.w	r1, [sl]
 8009dc2:	b30d      	cbz	r5, 8009e08 <__gethex+0x14a>
 8009dc4:	f1bb 0f00 	cmp.w	fp, #0
 8009dc8:	bf0c      	ite	eq
 8009dca:	2706      	moveq	r7, #6
 8009dcc:	2700      	movne	r7, #0
 8009dce:	4638      	mov	r0, r7
 8009dd0:	b00b      	add	sp, #44	; 0x2c
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd6:	f10b 0b01 	add.w	fp, fp, #1
 8009dda:	e78a      	b.n	8009cf2 <__gethex+0x34>
 8009ddc:	2500      	movs	r5, #0
 8009dde:	462c      	mov	r4, r5
 8009de0:	e7ae      	b.n	8009d40 <__gethex+0x82>
 8009de2:	463e      	mov	r6, r7
 8009de4:	2501      	movs	r5, #1
 8009de6:	e7c7      	b.n	8009d78 <__gethex+0xba>
 8009de8:	4604      	mov	r4, r0
 8009dea:	e7fb      	b.n	8009de4 <__gethex+0x126>
 8009dec:	f04f 0900 	mov.w	r9, #0
 8009df0:	1cb1      	adds	r1, r6, #2
 8009df2:	e7ce      	b.n	8009d92 <__gethex+0xd4>
 8009df4:	f04f 0901 	mov.w	r9, #1
 8009df8:	e7fa      	b.n	8009df0 <__gethex+0x132>
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	fb03 0202 	mla	r2, r3, r2, r0
 8009e00:	3a10      	subs	r2, #16
 8009e02:	e7cf      	b.n	8009da4 <__gethex+0xe6>
 8009e04:	4631      	mov	r1, r6
 8009e06:	e7da      	b.n	8009dbe <__gethex+0x100>
 8009e08:	1bf3      	subs	r3, r6, r7
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	dc49      	bgt.n	8009ea6 <__gethex+0x1e8>
 8009e12:	9802      	ldr	r0, [sp, #8]
 8009e14:	f000 fa58 	bl	800a2c8 <_Balloc>
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	f100 0914 	add.w	r9, r0, #20
 8009e1e:	f04f 0b00 	mov.w	fp, #0
 8009e22:	f1c3 0301 	rsb	r3, r3, #1
 8009e26:	4605      	mov	r5, r0
 8009e28:	f8cd 9010 	str.w	r9, [sp, #16]
 8009e2c:	46da      	mov	sl, fp
 8009e2e:	9308      	str	r3, [sp, #32]
 8009e30:	42b7      	cmp	r7, r6
 8009e32:	d33b      	bcc.n	8009eac <__gethex+0x1ee>
 8009e34:	9804      	ldr	r0, [sp, #16]
 8009e36:	f840 ab04 	str.w	sl, [r0], #4
 8009e3a:	eba0 0009 	sub.w	r0, r0, r9
 8009e3e:	1080      	asrs	r0, r0, #2
 8009e40:	6128      	str	r0, [r5, #16]
 8009e42:	0147      	lsls	r7, r0, #5
 8009e44:	4650      	mov	r0, sl
 8009e46:	f000 fb03 	bl	800a450 <__hi0bits>
 8009e4a:	f8d8 6000 	ldr.w	r6, [r8]
 8009e4e:	1a3f      	subs	r7, r7, r0
 8009e50:	42b7      	cmp	r7, r6
 8009e52:	dd64      	ble.n	8009f1e <__gethex+0x260>
 8009e54:	1bbf      	subs	r7, r7, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 fe13 	bl	800aa84 <__any_on>
 8009e5e:	4682      	mov	sl, r0
 8009e60:	b178      	cbz	r0, 8009e82 <__gethex+0x1c4>
 8009e62:	1e7b      	subs	r3, r7, #1
 8009e64:	1159      	asrs	r1, r3, #5
 8009e66:	f003 021f 	and.w	r2, r3, #31
 8009e6a:	f04f 0a01 	mov.w	sl, #1
 8009e6e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e72:	fa0a f202 	lsl.w	r2, sl, r2
 8009e76:	420a      	tst	r2, r1
 8009e78:	d003      	beq.n	8009e82 <__gethex+0x1c4>
 8009e7a:	4553      	cmp	r3, sl
 8009e7c:	dc46      	bgt.n	8009f0c <__gethex+0x24e>
 8009e7e:	f04f 0a02 	mov.w	sl, #2
 8009e82:	4639      	mov	r1, r7
 8009e84:	4628      	mov	r0, r5
 8009e86:	f7ff fecb 	bl	8009c20 <rshift>
 8009e8a:	443c      	add	r4, r7
 8009e8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e90:	42a3      	cmp	r3, r4
 8009e92:	da52      	bge.n	8009f3a <__gethex+0x27c>
 8009e94:	4629      	mov	r1, r5
 8009e96:	9802      	ldr	r0, [sp, #8]
 8009e98:	f000 fa4a 	bl	800a330 <_Bfree>
 8009e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	27a3      	movs	r7, #163	; 0xa3
 8009ea4:	e793      	b.n	8009dce <__gethex+0x110>
 8009ea6:	3101      	adds	r1, #1
 8009ea8:	105b      	asrs	r3, r3, #1
 8009eaa:	e7b0      	b.n	8009e0e <__gethex+0x150>
 8009eac:	1e73      	subs	r3, r6, #1
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d018      	beq.n	8009eec <__gethex+0x22e>
 8009eba:	f1bb 0f20 	cmp.w	fp, #32
 8009ebe:	d107      	bne.n	8009ed0 <__gethex+0x212>
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	f8c3 a000 	str.w	sl, [r3]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	f04f 0a00 	mov.w	sl, #0
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	46d3      	mov	fp, sl
 8009ed0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ed4:	f7ff fede 	bl	8009c94 <__hexdig_fun>
 8009ed8:	f000 000f 	and.w	r0, r0, #15
 8009edc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ee0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ee4:	f10b 0b04 	add.w	fp, fp, #4
 8009ee8:	9b05      	ldr	r3, [sp, #20]
 8009eea:	e00d      	b.n	8009f08 <__gethex+0x24a>
 8009eec:	9b05      	ldr	r3, [sp, #20]
 8009eee:	9a08      	ldr	r2, [sp, #32]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	d3e1      	bcc.n	8009eba <__gethex+0x1fc>
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	9a01      	ldr	r2, [sp, #4]
 8009efa:	9903      	ldr	r1, [sp, #12]
 8009efc:	9309      	str	r3, [sp, #36]	; 0x24
 8009efe:	f000 fffb 	bl	800aef8 <strncmp>
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1d8      	bne.n	8009eba <__gethex+0x1fc>
 8009f08:	461e      	mov	r6, r3
 8009f0a:	e791      	b.n	8009e30 <__gethex+0x172>
 8009f0c:	1eb9      	subs	r1, r7, #2
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 fdb8 	bl	800aa84 <__any_on>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d0b2      	beq.n	8009e7e <__gethex+0x1c0>
 8009f18:	f04f 0a03 	mov.w	sl, #3
 8009f1c:	e7b1      	b.n	8009e82 <__gethex+0x1c4>
 8009f1e:	da09      	bge.n	8009f34 <__gethex+0x276>
 8009f20:	1bf7      	subs	r7, r6, r7
 8009f22:	4629      	mov	r1, r5
 8009f24:	463a      	mov	r2, r7
 8009f26:	9802      	ldr	r0, [sp, #8]
 8009f28:	f000 fbce 	bl	800a6c8 <__lshift>
 8009f2c:	1be4      	subs	r4, r4, r7
 8009f2e:	4605      	mov	r5, r0
 8009f30:	f100 0914 	add.w	r9, r0, #20
 8009f34:	f04f 0a00 	mov.w	sl, #0
 8009f38:	e7a8      	b.n	8009e8c <__gethex+0x1ce>
 8009f3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f3e:	42a0      	cmp	r0, r4
 8009f40:	dd6a      	ble.n	800a018 <__gethex+0x35a>
 8009f42:	1b04      	subs	r4, r0, r4
 8009f44:	42a6      	cmp	r6, r4
 8009f46:	dc2e      	bgt.n	8009fa6 <__gethex+0x2e8>
 8009f48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d022      	beq.n	8009f96 <__gethex+0x2d8>
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d024      	beq.n	8009f9e <__gethex+0x2e0>
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d115      	bne.n	8009f84 <__gethex+0x2c6>
 8009f58:	42a6      	cmp	r6, r4
 8009f5a:	d113      	bne.n	8009f84 <__gethex+0x2c6>
 8009f5c:	2e01      	cmp	r6, #1
 8009f5e:	dc0b      	bgt.n	8009f78 <__gethex+0x2ba>
 8009f60:	9a06      	ldr	r2, [sp, #24]
 8009f62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	2301      	movs	r3, #1
 8009f6a:	612b      	str	r3, [r5, #16]
 8009f6c:	f8c9 3000 	str.w	r3, [r9]
 8009f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f72:	2762      	movs	r7, #98	; 0x62
 8009f74:	601d      	str	r5, [r3, #0]
 8009f76:	e72a      	b.n	8009dce <__gethex+0x110>
 8009f78:	1e71      	subs	r1, r6, #1
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 fd82 	bl	800aa84 <__any_on>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1ed      	bne.n	8009f60 <__gethex+0x2a2>
 8009f84:	4629      	mov	r1, r5
 8009f86:	9802      	ldr	r0, [sp, #8]
 8009f88:	f000 f9d2 	bl	800a330 <_Bfree>
 8009f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	2750      	movs	r7, #80	; 0x50
 8009f94:	e71b      	b.n	8009dce <__gethex+0x110>
 8009f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0e1      	beq.n	8009f60 <__gethex+0x2a2>
 8009f9c:	e7f2      	b.n	8009f84 <__gethex+0x2c6>
 8009f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1dd      	bne.n	8009f60 <__gethex+0x2a2>
 8009fa4:	e7ee      	b.n	8009f84 <__gethex+0x2c6>
 8009fa6:	1e67      	subs	r7, r4, #1
 8009fa8:	f1ba 0f00 	cmp.w	sl, #0
 8009fac:	d131      	bne.n	800a012 <__gethex+0x354>
 8009fae:	b127      	cbz	r7, 8009fba <__gethex+0x2fc>
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 fd66 	bl	800aa84 <__any_on>
 8009fb8:	4682      	mov	sl, r0
 8009fba:	117a      	asrs	r2, r7, #5
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f007 071f 	and.w	r7, r7, #31
 8009fc2:	fa03 f707 	lsl.w	r7, r3, r7
 8009fc6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009fca:	4621      	mov	r1, r4
 8009fcc:	421f      	tst	r7, r3
 8009fce:	4628      	mov	r0, r5
 8009fd0:	bf18      	it	ne
 8009fd2:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fd6:	1b36      	subs	r6, r6, r4
 8009fd8:	f7ff fe22 	bl	8009c20 <rshift>
 8009fdc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009fe0:	2702      	movs	r7, #2
 8009fe2:	f1ba 0f00 	cmp.w	sl, #0
 8009fe6:	d048      	beq.n	800a07a <__gethex+0x3bc>
 8009fe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d015      	beq.n	800a01c <__gethex+0x35e>
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d017      	beq.n	800a024 <__gethex+0x366>
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d109      	bne.n	800a00c <__gethex+0x34e>
 8009ff8:	f01a 0f02 	tst.w	sl, #2
 8009ffc:	d006      	beq.n	800a00c <__gethex+0x34e>
 8009ffe:	f8d9 3000 	ldr.w	r3, [r9]
 800a002:	ea4a 0a03 	orr.w	sl, sl, r3
 800a006:	f01a 0f01 	tst.w	sl, #1
 800a00a:	d10e      	bne.n	800a02a <__gethex+0x36c>
 800a00c:	f047 0710 	orr.w	r7, r7, #16
 800a010:	e033      	b.n	800a07a <__gethex+0x3bc>
 800a012:	f04f 0a01 	mov.w	sl, #1
 800a016:	e7d0      	b.n	8009fba <__gethex+0x2fc>
 800a018:	2701      	movs	r7, #1
 800a01a:	e7e2      	b.n	8009fe2 <__gethex+0x324>
 800a01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a01e:	f1c3 0301 	rsb	r3, r3, #1
 800a022:	9315      	str	r3, [sp, #84]	; 0x54
 800a024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0f0      	beq.n	800a00c <__gethex+0x34e>
 800a02a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a02e:	f105 0314 	add.w	r3, r5, #20
 800a032:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a036:	eb03 010a 	add.w	r1, r3, sl
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f853 2b04 	ldr.w	r2, [r3], #4
 800a044:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a048:	d01c      	beq.n	800a084 <__gethex+0x3c6>
 800a04a:	3201      	adds	r2, #1
 800a04c:	6002      	str	r2, [r0, #0]
 800a04e:	2f02      	cmp	r7, #2
 800a050:	f105 0314 	add.w	r3, r5, #20
 800a054:	d138      	bne.n	800a0c8 <__gethex+0x40a>
 800a056:	f8d8 2000 	ldr.w	r2, [r8]
 800a05a:	3a01      	subs	r2, #1
 800a05c:	42b2      	cmp	r2, r6
 800a05e:	d10a      	bne.n	800a076 <__gethex+0x3b8>
 800a060:	1171      	asrs	r1, r6, #5
 800a062:	2201      	movs	r2, #1
 800a064:	f006 061f 	and.w	r6, r6, #31
 800a068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a06c:	fa02 f606 	lsl.w	r6, r2, r6
 800a070:	421e      	tst	r6, r3
 800a072:	bf18      	it	ne
 800a074:	4617      	movne	r7, r2
 800a076:	f047 0720 	orr.w	r7, r7, #32
 800a07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a07c:	601d      	str	r5, [r3, #0]
 800a07e:	9b06      	ldr	r3, [sp, #24]
 800a080:	601c      	str	r4, [r3, #0]
 800a082:	e6a4      	b.n	8009dce <__gethex+0x110>
 800a084:	4299      	cmp	r1, r3
 800a086:	f843 cc04 	str.w	ip, [r3, #-4]
 800a08a:	d8d8      	bhi.n	800a03e <__gethex+0x380>
 800a08c:	68ab      	ldr	r3, [r5, #8]
 800a08e:	4599      	cmp	r9, r3
 800a090:	db12      	blt.n	800a0b8 <__gethex+0x3fa>
 800a092:	6869      	ldr	r1, [r5, #4]
 800a094:	9802      	ldr	r0, [sp, #8]
 800a096:	3101      	adds	r1, #1
 800a098:	f000 f916 	bl	800a2c8 <_Balloc>
 800a09c:	692a      	ldr	r2, [r5, #16]
 800a09e:	3202      	adds	r2, #2
 800a0a0:	f105 010c 	add.w	r1, r5, #12
 800a0a4:	4683      	mov	fp, r0
 800a0a6:	0092      	lsls	r2, r2, #2
 800a0a8:	300c      	adds	r0, #12
 800a0aa:	f7fd fa17 	bl	80074dc <memcpy>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	9802      	ldr	r0, [sp, #8]
 800a0b2:	f000 f93d 	bl	800a330 <_Bfree>
 800a0b6:	465d      	mov	r5, fp
 800a0b8:	692b      	ldr	r3, [r5, #16]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a0c0:	612a      	str	r2, [r5, #16]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	615a      	str	r2, [r3, #20]
 800a0c6:	e7c2      	b.n	800a04e <__gethex+0x390>
 800a0c8:	692a      	ldr	r2, [r5, #16]
 800a0ca:	454a      	cmp	r2, r9
 800a0cc:	dd0b      	ble.n	800a0e6 <__gethex+0x428>
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f7ff fda5 	bl	8009c20 <rshift>
 800a0d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0da:	3401      	adds	r4, #1
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	f6ff aed9 	blt.w	8009e94 <__gethex+0x1d6>
 800a0e2:	2701      	movs	r7, #1
 800a0e4:	e7c7      	b.n	800a076 <__gethex+0x3b8>
 800a0e6:	f016 061f 	ands.w	r6, r6, #31
 800a0ea:	d0fa      	beq.n	800a0e2 <__gethex+0x424>
 800a0ec:	449a      	add	sl, r3
 800a0ee:	f1c6 0620 	rsb	r6, r6, #32
 800a0f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a0f6:	f000 f9ab 	bl	800a450 <__hi0bits>
 800a0fa:	42b0      	cmp	r0, r6
 800a0fc:	dbe7      	blt.n	800a0ce <__gethex+0x410>
 800a0fe:	e7f0      	b.n	800a0e2 <__gethex+0x424>

0800a100 <L_shift>:
 800a100:	f1c2 0208 	rsb	r2, r2, #8
 800a104:	0092      	lsls	r2, r2, #2
 800a106:	b570      	push	{r4, r5, r6, lr}
 800a108:	f1c2 0620 	rsb	r6, r2, #32
 800a10c:	6843      	ldr	r3, [r0, #4]
 800a10e:	6804      	ldr	r4, [r0, #0]
 800a110:	fa03 f506 	lsl.w	r5, r3, r6
 800a114:	432c      	orrs	r4, r5
 800a116:	40d3      	lsrs	r3, r2
 800a118:	6004      	str	r4, [r0, #0]
 800a11a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a11e:	4288      	cmp	r0, r1
 800a120:	d3f4      	bcc.n	800a10c <L_shift+0xc>
 800a122:	bd70      	pop	{r4, r5, r6, pc}

0800a124 <__match>:
 800a124:	b530      	push	{r4, r5, lr}
 800a126:	6803      	ldr	r3, [r0, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12e:	b914      	cbnz	r4, 800a136 <__match+0x12>
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	2001      	movs	r0, #1
 800a134:	bd30      	pop	{r4, r5, pc}
 800a136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a13a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a13e:	2d19      	cmp	r5, #25
 800a140:	bf98      	it	ls
 800a142:	3220      	addls	r2, #32
 800a144:	42a2      	cmp	r2, r4
 800a146:	d0f0      	beq.n	800a12a <__match+0x6>
 800a148:	2000      	movs	r0, #0
 800a14a:	e7f3      	b.n	800a134 <__match+0x10>

0800a14c <__hexnan>:
 800a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	6801      	ldr	r1, [r0, #0]
 800a154:	115f      	asrs	r7, r3, #5
 800a156:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a15a:	f013 031f 	ands.w	r3, r3, #31
 800a15e:	b087      	sub	sp, #28
 800a160:	bf18      	it	ne
 800a162:	3704      	addne	r7, #4
 800a164:	2500      	movs	r5, #0
 800a166:	1f3e      	subs	r6, r7, #4
 800a168:	4682      	mov	sl, r0
 800a16a:	4690      	mov	r8, r2
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	f847 5c04 	str.w	r5, [r7, #-4]
 800a172:	46b1      	mov	r9, r6
 800a174:	4634      	mov	r4, r6
 800a176:	9502      	str	r5, [sp, #8]
 800a178:	46ab      	mov	fp, r5
 800a17a:	784a      	ldrb	r2, [r1, #1]
 800a17c:	1c4b      	adds	r3, r1, #1
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	b342      	cbz	r2, 800a1d4 <__hexnan+0x88>
 800a182:	4610      	mov	r0, r2
 800a184:	9105      	str	r1, [sp, #20]
 800a186:	9204      	str	r2, [sp, #16]
 800a188:	f7ff fd84 	bl	8009c94 <__hexdig_fun>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d143      	bne.n	800a218 <__hexnan+0xcc>
 800a190:	9a04      	ldr	r2, [sp, #16]
 800a192:	9905      	ldr	r1, [sp, #20]
 800a194:	2a20      	cmp	r2, #32
 800a196:	d818      	bhi.n	800a1ca <__hexnan+0x7e>
 800a198:	9b02      	ldr	r3, [sp, #8]
 800a19a:	459b      	cmp	fp, r3
 800a19c:	dd13      	ble.n	800a1c6 <__hexnan+0x7a>
 800a19e:	454c      	cmp	r4, r9
 800a1a0:	d206      	bcs.n	800a1b0 <__hexnan+0x64>
 800a1a2:	2d07      	cmp	r5, #7
 800a1a4:	dc04      	bgt.n	800a1b0 <__hexnan+0x64>
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7ff ffa8 	bl	800a100 <L_shift>
 800a1b0:	4544      	cmp	r4, r8
 800a1b2:	d944      	bls.n	800a23e <__hexnan+0xf2>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1be:	f8cd b008 	str.w	fp, [sp, #8]
 800a1c2:	464c      	mov	r4, r9
 800a1c4:	461d      	mov	r5, r3
 800a1c6:	9903      	ldr	r1, [sp, #12]
 800a1c8:	e7d7      	b.n	800a17a <__hexnan+0x2e>
 800a1ca:	2a29      	cmp	r2, #41	; 0x29
 800a1cc:	d14a      	bne.n	800a264 <__hexnan+0x118>
 800a1ce:	3102      	adds	r1, #2
 800a1d0:	f8ca 1000 	str.w	r1, [sl]
 800a1d4:	f1bb 0f00 	cmp.w	fp, #0
 800a1d8:	d044      	beq.n	800a264 <__hexnan+0x118>
 800a1da:	454c      	cmp	r4, r9
 800a1dc:	d206      	bcs.n	800a1ec <__hexnan+0xa0>
 800a1de:	2d07      	cmp	r5, #7
 800a1e0:	dc04      	bgt.n	800a1ec <__hexnan+0xa0>
 800a1e2:	462a      	mov	r2, r5
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7ff ff8a 	bl	800a100 <L_shift>
 800a1ec:	4544      	cmp	r4, r8
 800a1ee:	d928      	bls.n	800a242 <__hexnan+0xf6>
 800a1f0:	4643      	mov	r3, r8
 800a1f2:	f854 2b04 	ldr.w	r2, [r4], #4
 800a1f6:	f843 2b04 	str.w	r2, [r3], #4
 800a1fa:	42a6      	cmp	r6, r4
 800a1fc:	d2f9      	bcs.n	800a1f2 <__hexnan+0xa6>
 800a1fe:	2200      	movs	r2, #0
 800a200:	f843 2b04 	str.w	r2, [r3], #4
 800a204:	429e      	cmp	r6, r3
 800a206:	d2fb      	bcs.n	800a200 <__hexnan+0xb4>
 800a208:	6833      	ldr	r3, [r6, #0]
 800a20a:	b91b      	cbnz	r3, 800a214 <__hexnan+0xc8>
 800a20c:	4546      	cmp	r6, r8
 800a20e:	d127      	bne.n	800a260 <__hexnan+0x114>
 800a210:	2301      	movs	r3, #1
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	2005      	movs	r0, #5
 800a216:	e026      	b.n	800a266 <__hexnan+0x11a>
 800a218:	3501      	adds	r5, #1
 800a21a:	2d08      	cmp	r5, #8
 800a21c:	f10b 0b01 	add.w	fp, fp, #1
 800a220:	dd06      	ble.n	800a230 <__hexnan+0xe4>
 800a222:	4544      	cmp	r4, r8
 800a224:	d9cf      	bls.n	800a1c6 <__hexnan+0x7a>
 800a226:	2300      	movs	r3, #0
 800a228:	f844 3c04 	str.w	r3, [r4, #-4]
 800a22c:	2501      	movs	r5, #1
 800a22e:	3c04      	subs	r4, #4
 800a230:	6822      	ldr	r2, [r4, #0]
 800a232:	f000 000f 	and.w	r0, r0, #15
 800a236:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a23a:	6020      	str	r0, [r4, #0]
 800a23c:	e7c3      	b.n	800a1c6 <__hexnan+0x7a>
 800a23e:	2508      	movs	r5, #8
 800a240:	e7c1      	b.n	800a1c6 <__hexnan+0x7a>
 800a242:	9b01      	ldr	r3, [sp, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0df      	beq.n	800a208 <__hexnan+0xbc>
 800a248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a24c:	f1c3 0320 	rsb	r3, r3, #32
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
 800a254:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a258:	401a      	ands	r2, r3
 800a25a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a25e:	e7d3      	b.n	800a208 <__hexnan+0xbc>
 800a260:	3e04      	subs	r6, #4
 800a262:	e7d1      	b.n	800a208 <__hexnan+0xbc>
 800a264:	2004      	movs	r0, #4
 800a266:	b007      	add	sp, #28
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a26c <__locale_ctype_ptr_l>:
 800a26c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a270:	4770      	bx	lr

0800a272 <__localeconv_l>:
 800a272:	30f0      	adds	r0, #240	; 0xf0
 800a274:	4770      	bx	lr
	...

0800a278 <_localeconv_r>:
 800a278:	4b04      	ldr	r3, [pc, #16]	; (800a28c <_localeconv_r+0x14>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6a18      	ldr	r0, [r3, #32]
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <_localeconv_r+0x18>)
 800a280:	2800      	cmp	r0, #0
 800a282:	bf08      	it	eq
 800a284:	4618      	moveq	r0, r3
 800a286:	30f0      	adds	r0, #240	; 0xf0
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000058 	.word	0x20000058
 800a290:	200000bc 	.word	0x200000bc

0800a294 <malloc>:
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <malloc+0xc>)
 800a296:	4601      	mov	r1, r0
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	f000 bc71 	b.w	800ab80 <_malloc_r>
 800a29e:	bf00      	nop
 800a2a0:	20000058 	.word	0x20000058

0800a2a4 <__ascii_mbtowc>:
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	b901      	cbnz	r1, 800a2aa <__ascii_mbtowc+0x6>
 800a2a8:	a901      	add	r1, sp, #4
 800a2aa:	b142      	cbz	r2, 800a2be <__ascii_mbtowc+0x1a>
 800a2ac:	b14b      	cbz	r3, 800a2c2 <__ascii_mbtowc+0x1e>
 800a2ae:	7813      	ldrb	r3, [r2, #0]
 800a2b0:	600b      	str	r3, [r1, #0]
 800a2b2:	7812      	ldrb	r2, [r2, #0]
 800a2b4:	1c10      	adds	r0, r2, #0
 800a2b6:	bf18      	it	ne
 800a2b8:	2001      	movne	r0, #1
 800a2ba:	b002      	add	sp, #8
 800a2bc:	4770      	bx	lr
 800a2be:	4610      	mov	r0, r2
 800a2c0:	e7fb      	b.n	800a2ba <__ascii_mbtowc+0x16>
 800a2c2:	f06f 0001 	mvn.w	r0, #1
 800a2c6:	e7f8      	b.n	800a2ba <__ascii_mbtowc+0x16>

0800a2c8 <_Balloc>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460e      	mov	r6, r1
 800a2d0:	b93d      	cbnz	r5, 800a2e2 <_Balloc+0x1a>
 800a2d2:	2010      	movs	r0, #16
 800a2d4:	f7ff ffde 	bl	800a294 <malloc>
 800a2d8:	6260      	str	r0, [r4, #36]	; 0x24
 800a2da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2de:	6005      	str	r5, [r0, #0]
 800a2e0:	60c5      	str	r5, [r0, #12]
 800a2e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a2e4:	68eb      	ldr	r3, [r5, #12]
 800a2e6:	b183      	cbz	r3, 800a30a <_Balloc+0x42>
 800a2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a2f0:	b9b8      	cbnz	r0, 800a322 <_Balloc+0x5a>
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	fa01 f506 	lsl.w	r5, r1, r6
 800a2f8:	1d6a      	adds	r2, r5, #5
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 fbe2 	bl	800aac6 <_calloc_r>
 800a302:	b160      	cbz	r0, 800a31e <_Balloc+0x56>
 800a304:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a308:	e00e      	b.n	800a328 <_Balloc+0x60>
 800a30a:	2221      	movs	r2, #33	; 0x21
 800a30c:	2104      	movs	r1, #4
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fbd9 	bl	800aac6 <_calloc_r>
 800a314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a316:	60e8      	str	r0, [r5, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e4      	bne.n	800a2e8 <_Balloc+0x20>
 800a31e:	2000      	movs	r0, #0
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	6802      	ldr	r2, [r0, #0]
 800a324:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a328:	2300      	movs	r3, #0
 800a32a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a32e:	e7f7      	b.n	800a320 <_Balloc+0x58>

0800a330 <_Bfree>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a334:	4606      	mov	r6, r0
 800a336:	460d      	mov	r5, r1
 800a338:	b93c      	cbnz	r4, 800a34a <_Bfree+0x1a>
 800a33a:	2010      	movs	r0, #16
 800a33c:	f7ff ffaa 	bl	800a294 <malloc>
 800a340:	6270      	str	r0, [r6, #36]	; 0x24
 800a342:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a346:	6004      	str	r4, [r0, #0]
 800a348:	60c4      	str	r4, [r0, #12]
 800a34a:	b13d      	cbz	r5, 800a35c <_Bfree+0x2c>
 800a34c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a34e:	686a      	ldr	r2, [r5, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a356:	6029      	str	r1, [r5, #0]
 800a358:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a35c:	bd70      	pop	{r4, r5, r6, pc}

0800a35e <__multadd>:
 800a35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a362:	690d      	ldr	r5, [r1, #16]
 800a364:	461f      	mov	r7, r3
 800a366:	4606      	mov	r6, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	f101 0c14 	add.w	ip, r1, #20
 800a36e:	2300      	movs	r3, #0
 800a370:	f8dc 0000 	ldr.w	r0, [ip]
 800a374:	b281      	uxth	r1, r0
 800a376:	fb02 7101 	mla	r1, r2, r1, r7
 800a37a:	0c0f      	lsrs	r7, r1, #16
 800a37c:	0c00      	lsrs	r0, r0, #16
 800a37e:	fb02 7000 	mla	r0, r2, r0, r7
 800a382:	b289      	uxth	r1, r1
 800a384:	3301      	adds	r3, #1
 800a386:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a38a:	429d      	cmp	r5, r3
 800a38c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a390:	f84c 1b04 	str.w	r1, [ip], #4
 800a394:	dcec      	bgt.n	800a370 <__multadd+0x12>
 800a396:	b1d7      	cbz	r7, 800a3ce <__multadd+0x70>
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	42ab      	cmp	r3, r5
 800a39c:	dc12      	bgt.n	800a3c4 <__multadd+0x66>
 800a39e:	6861      	ldr	r1, [r4, #4]
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	3101      	adds	r1, #1
 800a3a4:	f7ff ff90 	bl	800a2c8 <_Balloc>
 800a3a8:	6922      	ldr	r2, [r4, #16]
 800a3aa:	3202      	adds	r2, #2
 800a3ac:	f104 010c 	add.w	r1, r4, #12
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	0092      	lsls	r2, r2, #2
 800a3b4:	300c      	adds	r0, #12
 800a3b6:	f7fd f891 	bl	80074dc <memcpy>
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff ffb7 	bl	800a330 <_Bfree>
 800a3c2:	4644      	mov	r4, r8
 800a3c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	615f      	str	r7, [r3, #20]
 800a3cc:	6125      	str	r5, [r4, #16]
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3d4 <__s2b>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	460c      	mov	r4, r1
 800a3da:	4615      	mov	r5, r2
 800a3dc:	461f      	mov	r7, r3
 800a3de:	2209      	movs	r2, #9
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	db20      	blt.n	800a432 <__s2b+0x5e>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7ff ff69 	bl	800a2c8 <_Balloc>
 800a3f6:	9b08      	ldr	r3, [sp, #32]
 800a3f8:	6143      	str	r3, [r0, #20]
 800a3fa:	2d09      	cmp	r5, #9
 800a3fc:	f04f 0301 	mov.w	r3, #1
 800a400:	6103      	str	r3, [r0, #16]
 800a402:	dd19      	ble.n	800a438 <__s2b+0x64>
 800a404:	f104 0809 	add.w	r8, r4, #9
 800a408:	46c1      	mov	r9, r8
 800a40a:	442c      	add	r4, r5
 800a40c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a410:	4601      	mov	r1, r0
 800a412:	3b30      	subs	r3, #48	; 0x30
 800a414:	220a      	movs	r2, #10
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ffa1 	bl	800a35e <__multadd>
 800a41c:	45a1      	cmp	r9, r4
 800a41e:	d1f5      	bne.n	800a40c <__s2b+0x38>
 800a420:	eb08 0405 	add.w	r4, r8, r5
 800a424:	3c08      	subs	r4, #8
 800a426:	1b2d      	subs	r5, r5, r4
 800a428:	1963      	adds	r3, r4, r5
 800a42a:	42bb      	cmp	r3, r7
 800a42c:	db07      	blt.n	800a43e <__s2b+0x6a>
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	0052      	lsls	r2, r2, #1
 800a434:	3101      	adds	r1, #1
 800a436:	e7d9      	b.n	800a3ec <__s2b+0x18>
 800a438:	340a      	adds	r4, #10
 800a43a:	2509      	movs	r5, #9
 800a43c:	e7f3      	b.n	800a426 <__s2b+0x52>
 800a43e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a442:	4601      	mov	r1, r0
 800a444:	3b30      	subs	r3, #48	; 0x30
 800a446:	220a      	movs	r2, #10
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff ff88 	bl	800a35e <__multadd>
 800a44e:	e7eb      	b.n	800a428 <__s2b+0x54>

0800a450 <__hi0bits>:
 800a450:	0c02      	lsrs	r2, r0, #16
 800a452:	0412      	lsls	r2, r2, #16
 800a454:	4603      	mov	r3, r0
 800a456:	b9b2      	cbnz	r2, 800a486 <__hi0bits+0x36>
 800a458:	0403      	lsls	r3, r0, #16
 800a45a:	2010      	movs	r0, #16
 800a45c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a460:	bf04      	itt	eq
 800a462:	021b      	lsleq	r3, r3, #8
 800a464:	3008      	addeq	r0, #8
 800a466:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a46a:	bf04      	itt	eq
 800a46c:	011b      	lsleq	r3, r3, #4
 800a46e:	3004      	addeq	r0, #4
 800a470:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a474:	bf04      	itt	eq
 800a476:	009b      	lsleq	r3, r3, #2
 800a478:	3002      	addeq	r0, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	db06      	blt.n	800a48c <__hi0bits+0x3c>
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	d503      	bpl.n	800a48a <__hi0bits+0x3a>
 800a482:	3001      	adds	r0, #1
 800a484:	4770      	bx	lr
 800a486:	2000      	movs	r0, #0
 800a488:	e7e8      	b.n	800a45c <__hi0bits+0xc>
 800a48a:	2020      	movs	r0, #32
 800a48c:	4770      	bx	lr

0800a48e <__lo0bits>:
 800a48e:	6803      	ldr	r3, [r0, #0]
 800a490:	f013 0207 	ands.w	r2, r3, #7
 800a494:	4601      	mov	r1, r0
 800a496:	d00b      	beq.n	800a4b0 <__lo0bits+0x22>
 800a498:	07da      	lsls	r2, r3, #31
 800a49a:	d423      	bmi.n	800a4e4 <__lo0bits+0x56>
 800a49c:	0798      	lsls	r0, r3, #30
 800a49e:	bf49      	itett	mi
 800a4a0:	085b      	lsrmi	r3, r3, #1
 800a4a2:	089b      	lsrpl	r3, r3, #2
 800a4a4:	2001      	movmi	r0, #1
 800a4a6:	600b      	strmi	r3, [r1, #0]
 800a4a8:	bf5c      	itt	pl
 800a4aa:	600b      	strpl	r3, [r1, #0]
 800a4ac:	2002      	movpl	r0, #2
 800a4ae:	4770      	bx	lr
 800a4b0:	b298      	uxth	r0, r3
 800a4b2:	b9a8      	cbnz	r0, 800a4e0 <__lo0bits+0x52>
 800a4b4:	0c1b      	lsrs	r3, r3, #16
 800a4b6:	2010      	movs	r0, #16
 800a4b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a4bc:	bf04      	itt	eq
 800a4be:	0a1b      	lsreq	r3, r3, #8
 800a4c0:	3008      	addeq	r0, #8
 800a4c2:	071a      	lsls	r2, r3, #28
 800a4c4:	bf04      	itt	eq
 800a4c6:	091b      	lsreq	r3, r3, #4
 800a4c8:	3004      	addeq	r0, #4
 800a4ca:	079a      	lsls	r2, r3, #30
 800a4cc:	bf04      	itt	eq
 800a4ce:	089b      	lsreq	r3, r3, #2
 800a4d0:	3002      	addeq	r0, #2
 800a4d2:	07da      	lsls	r2, r3, #31
 800a4d4:	d402      	bmi.n	800a4dc <__lo0bits+0x4e>
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	d006      	beq.n	800a4e8 <__lo0bits+0x5a>
 800a4da:	3001      	adds	r0, #1
 800a4dc:	600b      	str	r3, [r1, #0]
 800a4de:	4770      	bx	lr
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	e7e9      	b.n	800a4b8 <__lo0bits+0x2a>
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4770      	bx	lr
 800a4e8:	2020      	movs	r0, #32
 800a4ea:	4770      	bx	lr

0800a4ec <__i2b>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	f7ff fee9 	bl	800a2c8 <_Balloc>
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	6144      	str	r4, [r0, #20]
 800a4fa:	6102      	str	r2, [r0, #16]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__multiply>:
 800a4fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a502:	4614      	mov	r4, r2
 800a504:	690a      	ldr	r2, [r1, #16]
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	429a      	cmp	r2, r3
 800a50a:	bfb8      	it	lt
 800a50c:	460b      	movlt	r3, r1
 800a50e:	4688      	mov	r8, r1
 800a510:	bfbc      	itt	lt
 800a512:	46a0      	movlt	r8, r4
 800a514:	461c      	movlt	r4, r3
 800a516:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a51a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a51e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a522:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a526:	eb07 0609 	add.w	r6, r7, r9
 800a52a:	42b3      	cmp	r3, r6
 800a52c:	bfb8      	it	lt
 800a52e:	3101      	addlt	r1, #1
 800a530:	f7ff feca 	bl	800a2c8 <_Balloc>
 800a534:	f100 0514 	add.w	r5, r0, #20
 800a538:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a53c:	462b      	mov	r3, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	4573      	cmp	r3, lr
 800a542:	d316      	bcc.n	800a572 <__multiply+0x74>
 800a544:	f104 0214 	add.w	r2, r4, #20
 800a548:	f108 0114 	add.w	r1, r8, #20
 800a54c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a550:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	9b00      	ldr	r3, [sp, #0]
 800a558:	9201      	str	r2, [sp, #4]
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d80c      	bhi.n	800a578 <__multiply+0x7a>
 800a55e:	2e00      	cmp	r6, #0
 800a560:	dd03      	ble.n	800a56a <__multiply+0x6c>
 800a562:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a566:	2b00      	cmp	r3, #0
 800a568:	d05d      	beq.n	800a626 <__multiply+0x128>
 800a56a:	6106      	str	r6, [r0, #16]
 800a56c:	b003      	add	sp, #12
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	f843 2b04 	str.w	r2, [r3], #4
 800a576:	e7e3      	b.n	800a540 <__multiply+0x42>
 800a578:	f8b2 b000 	ldrh.w	fp, [r2]
 800a57c:	f1bb 0f00 	cmp.w	fp, #0
 800a580:	d023      	beq.n	800a5ca <__multiply+0xcc>
 800a582:	4689      	mov	r9, r1
 800a584:	46ac      	mov	ip, r5
 800a586:	f04f 0800 	mov.w	r8, #0
 800a58a:	f859 4b04 	ldr.w	r4, [r9], #4
 800a58e:	f8dc a000 	ldr.w	sl, [ip]
 800a592:	b2a3      	uxth	r3, r4
 800a594:	fa1f fa8a 	uxth.w	sl, sl
 800a598:	fb0b a303 	mla	r3, fp, r3, sl
 800a59c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5a0:	f8dc 4000 	ldr.w	r4, [ip]
 800a5a4:	4443      	add	r3, r8
 800a5a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5aa:	fb0b 840a 	mla	r4, fp, sl, r8
 800a5ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a5b2:	46e2      	mov	sl, ip
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5ba:	454f      	cmp	r7, r9
 800a5bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5c0:	f84a 3b04 	str.w	r3, [sl], #4
 800a5c4:	d82b      	bhi.n	800a61e <__multiply+0x120>
 800a5c6:	f8cc 8004 	str.w	r8, [ip, #4]
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a5d0:	3204      	adds	r2, #4
 800a5d2:	f1ba 0f00 	cmp.w	sl, #0
 800a5d6:	d020      	beq.n	800a61a <__multiply+0x11c>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	4689      	mov	r9, r1
 800a5dc:	46a8      	mov	r8, r5
 800a5de:	f04f 0b00 	mov.w	fp, #0
 800a5e2:	f8b9 c000 	ldrh.w	ip, [r9]
 800a5e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a5ea:	fb0a 440c 	mla	r4, sl, ip, r4
 800a5ee:	445c      	add	r4, fp
 800a5f0:	46c4      	mov	ip, r8
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5f8:	f84c 3b04 	str.w	r3, [ip], #4
 800a5fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a600:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	fb0a b303 	mla	r3, sl, r3, fp
 800a60a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a60e:	454f      	cmp	r7, r9
 800a610:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a614:	d805      	bhi.n	800a622 <__multiply+0x124>
 800a616:	f8c8 3004 	str.w	r3, [r8, #4]
 800a61a:	3504      	adds	r5, #4
 800a61c:	e79b      	b.n	800a556 <__multiply+0x58>
 800a61e:	46d4      	mov	ip, sl
 800a620:	e7b3      	b.n	800a58a <__multiply+0x8c>
 800a622:	46e0      	mov	r8, ip
 800a624:	e7dd      	b.n	800a5e2 <__multiply+0xe4>
 800a626:	3e01      	subs	r6, #1
 800a628:	e799      	b.n	800a55e <__multiply+0x60>
	...

0800a62c <__pow5mult>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	4615      	mov	r5, r2
 800a632:	f012 0203 	ands.w	r2, r2, #3
 800a636:	4606      	mov	r6, r0
 800a638:	460f      	mov	r7, r1
 800a63a:	d007      	beq.n	800a64c <__pow5mult+0x20>
 800a63c:	3a01      	subs	r2, #1
 800a63e:	4c21      	ldr	r4, [pc, #132]	; (800a6c4 <__pow5mult+0x98>)
 800a640:	2300      	movs	r3, #0
 800a642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a646:	f7ff fe8a 	bl	800a35e <__multadd>
 800a64a:	4607      	mov	r7, r0
 800a64c:	10ad      	asrs	r5, r5, #2
 800a64e:	d035      	beq.n	800a6bc <__pow5mult+0x90>
 800a650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a652:	b93c      	cbnz	r4, 800a664 <__pow5mult+0x38>
 800a654:	2010      	movs	r0, #16
 800a656:	f7ff fe1d 	bl	800a294 <malloc>
 800a65a:	6270      	str	r0, [r6, #36]	; 0x24
 800a65c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a660:	6004      	str	r4, [r0, #0]
 800a662:	60c4      	str	r4, [r0, #12]
 800a664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a66c:	b94c      	cbnz	r4, 800a682 <__pow5mult+0x56>
 800a66e:	f240 2171 	movw	r1, #625	; 0x271
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ff3a 	bl	800a4ec <__i2b>
 800a678:	2300      	movs	r3, #0
 800a67a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a67e:	4604      	mov	r4, r0
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	f04f 0800 	mov.w	r8, #0
 800a686:	07eb      	lsls	r3, r5, #31
 800a688:	d50a      	bpl.n	800a6a0 <__pow5mult+0x74>
 800a68a:	4639      	mov	r1, r7
 800a68c:	4622      	mov	r2, r4
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff35 	bl	800a4fe <__multiply>
 800a694:	4639      	mov	r1, r7
 800a696:	4681      	mov	r9, r0
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff fe49 	bl	800a330 <_Bfree>
 800a69e:	464f      	mov	r7, r9
 800a6a0:	106d      	asrs	r5, r5, #1
 800a6a2:	d00b      	beq.n	800a6bc <__pow5mult+0x90>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	b938      	cbnz	r0, 800a6b8 <__pow5mult+0x8c>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff ff26 	bl	800a4fe <__multiply>
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f8c0 8000 	str.w	r8, [r0]
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	e7e4      	b.n	800a686 <__pow5mult+0x5a>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c2:	bf00      	nop
 800a6c4:	0800ddd0 	.word	0x0800ddd0

0800a6c8 <__lshift>:
 800a6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	6849      	ldr	r1, [r1, #4]
 800a6d6:	eb0a 0903 	add.w	r9, sl, r3
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	4607      	mov	r7, r0
 800a6de:	4616      	mov	r6, r2
 800a6e0:	f109 0501 	add.w	r5, r9, #1
 800a6e4:	42ab      	cmp	r3, r5
 800a6e6:	db32      	blt.n	800a74e <__lshift+0x86>
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff fded 	bl	800a2c8 <_Balloc>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	f100 0114 	add.w	r1, r0, #20
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4553      	cmp	r3, sl
 800a6fa:	db2b      	blt.n	800a754 <__lshift+0x8c>
 800a6fc:	6920      	ldr	r0, [r4, #16]
 800a6fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a702:	f104 0314 	add.w	r3, r4, #20
 800a706:	f016 021f 	ands.w	r2, r6, #31
 800a70a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a70e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a712:	d025      	beq.n	800a760 <__lshift+0x98>
 800a714:	f1c2 0e20 	rsb	lr, r2, #32
 800a718:	2000      	movs	r0, #0
 800a71a:	681e      	ldr	r6, [r3, #0]
 800a71c:	468a      	mov	sl, r1
 800a71e:	4096      	lsls	r6, r2
 800a720:	4330      	orrs	r0, r6
 800a722:	f84a 0b04 	str.w	r0, [sl], #4
 800a726:	f853 0b04 	ldr.w	r0, [r3], #4
 800a72a:	459c      	cmp	ip, r3
 800a72c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a730:	d814      	bhi.n	800a75c <__lshift+0x94>
 800a732:	6048      	str	r0, [r1, #4]
 800a734:	b108      	cbz	r0, 800a73a <__lshift+0x72>
 800a736:	f109 0502 	add.w	r5, r9, #2
 800a73a:	3d01      	subs	r5, #1
 800a73c:	4638      	mov	r0, r7
 800a73e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a742:	4621      	mov	r1, r4
 800a744:	f7ff fdf4 	bl	800a330 <_Bfree>
 800a748:	4640      	mov	r0, r8
 800a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74e:	3101      	adds	r1, #1
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	e7c7      	b.n	800a6e4 <__lshift+0x1c>
 800a754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a758:	3301      	adds	r3, #1
 800a75a:	e7cd      	b.n	800a6f8 <__lshift+0x30>
 800a75c:	4651      	mov	r1, sl
 800a75e:	e7dc      	b.n	800a71a <__lshift+0x52>
 800a760:	3904      	subs	r1, #4
 800a762:	f853 2b04 	ldr.w	r2, [r3], #4
 800a766:	f841 2f04 	str.w	r2, [r1, #4]!
 800a76a:	459c      	cmp	ip, r3
 800a76c:	d8f9      	bhi.n	800a762 <__lshift+0x9a>
 800a76e:	e7e4      	b.n	800a73a <__lshift+0x72>

0800a770 <__mcmp>:
 800a770:	6903      	ldr	r3, [r0, #16]
 800a772:	690a      	ldr	r2, [r1, #16]
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	b530      	push	{r4, r5, lr}
 800a778:	d10c      	bne.n	800a794 <__mcmp+0x24>
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	3014      	adds	r0, #20
 800a77e:	3114      	adds	r1, #20
 800a780:	1884      	adds	r4, r0, r2
 800a782:	4411      	add	r1, r2
 800a784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a78c:	4295      	cmp	r5, r2
 800a78e:	d003      	beq.n	800a798 <__mcmp+0x28>
 800a790:	d305      	bcc.n	800a79e <__mcmp+0x2e>
 800a792:	2301      	movs	r3, #1
 800a794:	4618      	mov	r0, r3
 800a796:	bd30      	pop	{r4, r5, pc}
 800a798:	42a0      	cmp	r0, r4
 800a79a:	d3f3      	bcc.n	800a784 <__mcmp+0x14>
 800a79c:	e7fa      	b.n	800a794 <__mcmp+0x24>
 800a79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7a2:	e7f7      	b.n	800a794 <__mcmp+0x24>

0800a7a4 <__mdiff>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	f7ff ffdd 	bl	800a770 <__mcmp>
 800a7b6:	1e06      	subs	r6, r0, #0
 800a7b8:	d108      	bne.n	800a7cc <__mdiff+0x28>
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff fd83 	bl	800a2c8 <_Balloc>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7cc:	bfa4      	itt	ge
 800a7ce:	4623      	movge	r3, r4
 800a7d0:	462c      	movge	r4, r5
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	6861      	ldr	r1, [r4, #4]
 800a7d6:	bfa6      	itte	ge
 800a7d8:	461d      	movge	r5, r3
 800a7da:	2600      	movge	r6, #0
 800a7dc:	2601      	movlt	r6, #1
 800a7de:	f7ff fd73 	bl	800a2c8 <_Balloc>
 800a7e2:	692b      	ldr	r3, [r5, #16]
 800a7e4:	60c6      	str	r6, [r0, #12]
 800a7e6:	6926      	ldr	r6, [r4, #16]
 800a7e8:	f105 0914 	add.w	r9, r5, #20
 800a7ec:	f104 0214 	add.w	r2, r4, #20
 800a7f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a7f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a7f8:	f100 0514 	add.w	r5, r0, #20
 800a7fc:	f04f 0e00 	mov.w	lr, #0
 800a800:	f852 ab04 	ldr.w	sl, [r2], #4
 800a804:	f859 4b04 	ldr.w	r4, [r9], #4
 800a808:	fa1e f18a 	uxtah	r1, lr, sl
 800a80c:	b2a3      	uxth	r3, r4
 800a80e:	1ac9      	subs	r1, r1, r3
 800a810:	0c23      	lsrs	r3, r4, #16
 800a812:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a816:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a81a:	b289      	uxth	r1, r1
 800a81c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a820:	45c8      	cmp	r8, r9
 800a822:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a826:	4694      	mov	ip, r2
 800a828:	f845 3b04 	str.w	r3, [r5], #4
 800a82c:	d8e8      	bhi.n	800a800 <__mdiff+0x5c>
 800a82e:	45bc      	cmp	ip, r7
 800a830:	d304      	bcc.n	800a83c <__mdiff+0x98>
 800a832:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a836:	b183      	cbz	r3, 800a85a <__mdiff+0xb6>
 800a838:	6106      	str	r6, [r0, #16]
 800a83a:	e7c5      	b.n	800a7c8 <__mdiff+0x24>
 800a83c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a840:	fa1e f381 	uxtah	r3, lr, r1
 800a844:	141a      	asrs	r2, r3, #16
 800a846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a850:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a854:	f845 3b04 	str.w	r3, [r5], #4
 800a858:	e7e9      	b.n	800a82e <__mdiff+0x8a>
 800a85a:	3e01      	subs	r6, #1
 800a85c:	e7e9      	b.n	800a832 <__mdiff+0x8e>
	...

0800a860 <__ulp>:
 800a860:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <__ulp+0x4c>)
 800a862:	ee10 2a90 	vmov	r2, s1
 800a866:	401a      	ands	r2, r3
 800a868:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd04      	ble.n	800a87a <__ulp+0x1a>
 800a870:	2000      	movs	r0, #0
 800a872:	4619      	mov	r1, r3
 800a874:	ec41 0b10 	vmov	d0, r0, r1
 800a878:	4770      	bx	lr
 800a87a:	425b      	negs	r3, r3
 800a87c:	151b      	asrs	r3, r3, #20
 800a87e:	2b13      	cmp	r3, #19
 800a880:	f04f 0000 	mov.w	r0, #0
 800a884:	f04f 0100 	mov.w	r1, #0
 800a888:	dc04      	bgt.n	800a894 <__ulp+0x34>
 800a88a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a88e:	fa42 f103 	asr.w	r1, r2, r3
 800a892:	e7ef      	b.n	800a874 <__ulp+0x14>
 800a894:	3b14      	subs	r3, #20
 800a896:	2b1e      	cmp	r3, #30
 800a898:	f04f 0201 	mov.w	r2, #1
 800a89c:	bfda      	itte	le
 800a89e:	f1c3 031f 	rsble	r3, r3, #31
 800a8a2:	fa02 f303 	lslle.w	r3, r2, r3
 800a8a6:	4613      	movgt	r3, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	e7e3      	b.n	800a874 <__ulp+0x14>
 800a8ac:	7ff00000 	.word	0x7ff00000

0800a8b0 <__b2d>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	6905      	ldr	r5, [r0, #16]
 800a8b4:	f100 0714 	add.w	r7, r0, #20
 800a8b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8bc:	1f2e      	subs	r6, r5, #4
 800a8be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f7ff fdc4 	bl	800a450 <__hi0bits>
 800a8c8:	f1c0 0320 	rsb	r3, r0, #32
 800a8cc:	280a      	cmp	r0, #10
 800a8ce:	600b      	str	r3, [r1, #0]
 800a8d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a948 <__b2d+0x98>
 800a8d4:	dc14      	bgt.n	800a900 <__b2d+0x50>
 800a8d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8da:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8de:	42b7      	cmp	r7, r6
 800a8e0:	ea41 030c 	orr.w	r3, r1, ip
 800a8e4:	bf34      	ite	cc
 800a8e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8ea:	2100      	movcs	r1, #0
 800a8ec:	3015      	adds	r0, #21
 800a8ee:	fa04 f000 	lsl.w	r0, r4, r0
 800a8f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a8f6:	ea40 0201 	orr.w	r2, r0, r1
 800a8fa:	ec43 2b10 	vmov	d0, r2, r3
 800a8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a900:	42b7      	cmp	r7, r6
 800a902:	bf3a      	itte	cc
 800a904:	f1a5 0608 	subcc.w	r6, r5, #8
 800a908:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a90c:	2100      	movcs	r1, #0
 800a90e:	380b      	subs	r0, #11
 800a910:	d015      	beq.n	800a93e <__b2d+0x8e>
 800a912:	4084      	lsls	r4, r0
 800a914:	f1c0 0520 	rsb	r5, r0, #32
 800a918:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a91c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a920:	42be      	cmp	r6, r7
 800a922:	fa21 fc05 	lsr.w	ip, r1, r5
 800a926:	ea44 030c 	orr.w	r3, r4, ip
 800a92a:	bf8c      	ite	hi
 800a92c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a930:	2400      	movls	r4, #0
 800a932:	fa01 f000 	lsl.w	r0, r1, r0
 800a936:	40ec      	lsrs	r4, r5
 800a938:	ea40 0204 	orr.w	r2, r0, r4
 800a93c:	e7dd      	b.n	800a8fa <__b2d+0x4a>
 800a93e:	ea44 030c 	orr.w	r3, r4, ip
 800a942:	460a      	mov	r2, r1
 800a944:	e7d9      	b.n	800a8fa <__b2d+0x4a>
 800a946:	bf00      	nop
 800a948:	3ff00000 	.word	0x3ff00000

0800a94c <__d2b>:
 800a94c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a950:	460e      	mov	r6, r1
 800a952:	2101      	movs	r1, #1
 800a954:	ec59 8b10 	vmov	r8, r9, d0
 800a958:	4615      	mov	r5, r2
 800a95a:	f7ff fcb5 	bl	800a2c8 <_Balloc>
 800a95e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a962:	4607      	mov	r7, r0
 800a964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a968:	bb34      	cbnz	r4, 800a9b8 <__d2b+0x6c>
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	f1b8 0300 	subs.w	r3, r8, #0
 800a970:	d027      	beq.n	800a9c2 <__d2b+0x76>
 800a972:	a802      	add	r0, sp, #8
 800a974:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a978:	f7ff fd89 	bl	800a48e <__lo0bits>
 800a97c:	9900      	ldr	r1, [sp, #0]
 800a97e:	b1f0      	cbz	r0, 800a9be <__d2b+0x72>
 800a980:	9a01      	ldr	r2, [sp, #4]
 800a982:	f1c0 0320 	rsb	r3, r0, #32
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	430b      	orrs	r3, r1
 800a98c:	40c2      	lsrs	r2, r0
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	bf14      	ite	ne
 800a99a:	2102      	movne	r1, #2
 800a99c:	2101      	moveq	r1, #1
 800a99e:	6139      	str	r1, [r7, #16]
 800a9a0:	b1c4      	cbz	r4, 800a9d4 <__d2b+0x88>
 800a9a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a9a6:	4404      	add	r4, r0
 800a9a8:	6034      	str	r4, [r6, #0]
 800a9aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9ae:	6028      	str	r0, [r5, #0]
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	b003      	add	sp, #12
 800a9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9bc:	e7d5      	b.n	800a96a <__d2b+0x1e>
 800a9be:	6179      	str	r1, [r7, #20]
 800a9c0:	e7e7      	b.n	800a992 <__d2b+0x46>
 800a9c2:	a801      	add	r0, sp, #4
 800a9c4:	f7ff fd63 	bl	800a48e <__lo0bits>
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	6139      	str	r1, [r7, #16]
 800a9d0:	3020      	adds	r0, #32
 800a9d2:	e7e5      	b.n	800a9a0 <__d2b+0x54>
 800a9d4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9dc:	6030      	str	r0, [r6, #0]
 800a9de:	6918      	ldr	r0, [r3, #16]
 800a9e0:	f7ff fd36 	bl	800a450 <__hi0bits>
 800a9e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a9e8:	e7e1      	b.n	800a9ae <__d2b+0x62>

0800a9ea <__ratio>:
 800a9ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ee:	4688      	mov	r8, r1
 800a9f0:	4669      	mov	r1, sp
 800a9f2:	4681      	mov	r9, r0
 800a9f4:	f7ff ff5c 	bl	800a8b0 <__b2d>
 800a9f8:	a901      	add	r1, sp, #4
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	ec57 6b10 	vmov	r6, r7, d0
 800aa00:	f7ff ff56 	bl	800a8b0 <__b2d>
 800aa04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa0c:	eba3 0c02 	sub.w	ip, r3, r2
 800aa10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa1a:	ec5b ab10 	vmov	sl, fp, d0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfce      	itee	gt
 800aa22:	463a      	movgt	r2, r7
 800aa24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa28:	465a      	movle	r2, fp
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	463d      	mov	r5, r7
 800aa2e:	bfd4      	ite	le
 800aa30:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800aa34:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800aa38:	4630      	mov	r0, r6
 800aa3a:	ee10 2a10 	vmov	r2, s0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f5 ff23 	bl	800088c <__aeabi_ddiv>
 800aa46:	ec41 0b10 	vmov	d0, r0, r1
 800aa4a:	b003      	add	sp, #12
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa50 <__copybits>:
 800aa50:	3901      	subs	r1, #1
 800aa52:	b510      	push	{r4, lr}
 800aa54:	1149      	asrs	r1, r1, #5
 800aa56:	6914      	ldr	r4, [r2, #16]
 800aa58:	3101      	adds	r1, #1
 800aa5a:	f102 0314 	add.w	r3, r2, #20
 800aa5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	4602      	mov	r2, r0
 800aa6a:	d303      	bcc.n	800aa74 <__copybits+0x24>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	428a      	cmp	r2, r1
 800aa70:	d305      	bcc.n	800aa7e <__copybits+0x2e>
 800aa72:	bd10      	pop	{r4, pc}
 800aa74:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa78:	f840 2b04 	str.w	r2, [r0], #4
 800aa7c:	e7f3      	b.n	800aa66 <__copybits+0x16>
 800aa7e:	f842 3b04 	str.w	r3, [r2], #4
 800aa82:	e7f4      	b.n	800aa6e <__copybits+0x1e>

0800aa84 <__any_on>:
 800aa84:	f100 0214 	add.w	r2, r0, #20
 800aa88:	6900      	ldr	r0, [r0, #16]
 800aa8a:	114b      	asrs	r3, r1, #5
 800aa8c:	4298      	cmp	r0, r3
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	db11      	blt.n	800aab6 <__any_on+0x32>
 800aa92:	dd0a      	ble.n	800aaaa <__any_on+0x26>
 800aa94:	f011 011f 	ands.w	r1, r1, #31
 800aa98:	d007      	beq.n	800aaaa <__any_on+0x26>
 800aa9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa9e:	fa24 f001 	lsr.w	r0, r4, r1
 800aaa2:	fa00 f101 	lsl.w	r1, r0, r1
 800aaa6:	428c      	cmp	r4, r1
 800aaa8:	d10b      	bne.n	800aac2 <__any_on+0x3e>
 800aaaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d803      	bhi.n	800aaba <__any_on+0x36>
 800aab2:	2000      	movs	r0, #0
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	4603      	mov	r3, r0
 800aab8:	e7f7      	b.n	800aaaa <__any_on+0x26>
 800aaba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aabe:	2900      	cmp	r1, #0
 800aac0:	d0f5      	beq.n	800aaae <__any_on+0x2a>
 800aac2:	2001      	movs	r0, #1
 800aac4:	e7f6      	b.n	800aab4 <__any_on+0x30>

0800aac6 <_calloc_r>:
 800aac6:	b538      	push	{r3, r4, r5, lr}
 800aac8:	fb02 f401 	mul.w	r4, r2, r1
 800aacc:	4621      	mov	r1, r4
 800aace:	f000 f857 	bl	800ab80 <_malloc_r>
 800aad2:	4605      	mov	r5, r0
 800aad4:	b118      	cbz	r0, 800aade <_calloc_r+0x18>
 800aad6:	4622      	mov	r2, r4
 800aad8:	2100      	movs	r1, #0
 800aada:	f7fc fd0a 	bl	80074f2 <memset>
 800aade:	4628      	mov	r0, r5
 800aae0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800aae4 <_free_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4605      	mov	r5, r0
 800aae8:	2900      	cmp	r1, #0
 800aaea:	d045      	beq.n	800ab78 <_free_r+0x94>
 800aaec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf0:	1f0c      	subs	r4, r1, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bfb8      	it	lt
 800aaf6:	18e4      	addlt	r4, r4, r3
 800aaf8:	f000 fa36 	bl	800af68 <__malloc_lock>
 800aafc:	4a1f      	ldr	r2, [pc, #124]	; (800ab7c <_free_r+0x98>)
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	4610      	mov	r0, r2
 800ab02:	b933      	cbnz	r3, 800ab12 <_free_r+0x2e>
 800ab04:	6063      	str	r3, [r4, #4]
 800ab06:	6014      	str	r4, [r2, #0]
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0e:	f000 ba2c 	b.w	800af6a <__malloc_unlock>
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	d90c      	bls.n	800ab30 <_free_r+0x4c>
 800ab16:	6821      	ldr	r1, [r4, #0]
 800ab18:	1862      	adds	r2, r4, r1
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	bf04      	itt	eq
 800ab1e:	681a      	ldreq	r2, [r3, #0]
 800ab20:	685b      	ldreq	r3, [r3, #4]
 800ab22:	6063      	str	r3, [r4, #4]
 800ab24:	bf04      	itt	eq
 800ab26:	1852      	addeq	r2, r2, r1
 800ab28:	6022      	streq	r2, [r4, #0]
 800ab2a:	6004      	str	r4, [r0, #0]
 800ab2c:	e7ec      	b.n	800ab08 <_free_r+0x24>
 800ab2e:	4613      	mov	r3, r2
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	b10a      	cbz	r2, 800ab38 <_free_r+0x54>
 800ab34:	42a2      	cmp	r2, r4
 800ab36:	d9fa      	bls.n	800ab2e <_free_r+0x4a>
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	1858      	adds	r0, r3, r1
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	d10b      	bne.n	800ab58 <_free_r+0x74>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	4401      	add	r1, r0
 800ab44:	1858      	adds	r0, r3, r1
 800ab46:	4282      	cmp	r2, r0
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	d1dd      	bne.n	800ab08 <_free_r+0x24>
 800ab4c:	6810      	ldr	r0, [r2, #0]
 800ab4e:	6852      	ldr	r2, [r2, #4]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	4401      	add	r1, r0
 800ab54:	6019      	str	r1, [r3, #0]
 800ab56:	e7d7      	b.n	800ab08 <_free_r+0x24>
 800ab58:	d902      	bls.n	800ab60 <_free_r+0x7c>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	e7d3      	b.n	800ab08 <_free_r+0x24>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	1821      	adds	r1, r4, r0
 800ab64:	428a      	cmp	r2, r1
 800ab66:	bf04      	itt	eq
 800ab68:	6811      	ldreq	r1, [r2, #0]
 800ab6a:	6852      	ldreq	r2, [r2, #4]
 800ab6c:	6062      	str	r2, [r4, #4]
 800ab6e:	bf04      	itt	eq
 800ab70:	1809      	addeq	r1, r1, r0
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	605c      	str	r4, [r3, #4]
 800ab76:	e7c7      	b.n	800ab08 <_free_r+0x24>
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000538 	.word	0x20000538

0800ab80 <_malloc_r>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	1ccd      	adds	r5, r1, #3
 800ab84:	f025 0503 	bic.w	r5, r5, #3
 800ab88:	3508      	adds	r5, #8
 800ab8a:	2d0c      	cmp	r5, #12
 800ab8c:	bf38      	it	cc
 800ab8e:	250c      	movcc	r5, #12
 800ab90:	2d00      	cmp	r5, #0
 800ab92:	4606      	mov	r6, r0
 800ab94:	db01      	blt.n	800ab9a <_malloc_r+0x1a>
 800ab96:	42a9      	cmp	r1, r5
 800ab98:	d903      	bls.n	800aba2 <_malloc_r+0x22>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
 800aba2:	f000 f9e1 	bl	800af68 <__malloc_lock>
 800aba6:	4a21      	ldr	r2, [pc, #132]	; (800ac2c <_malloc_r+0xac>)
 800aba8:	6814      	ldr	r4, [r2, #0]
 800abaa:	4621      	mov	r1, r4
 800abac:	b991      	cbnz	r1, 800abd4 <_malloc_r+0x54>
 800abae:	4c20      	ldr	r4, [pc, #128]	; (800ac30 <_malloc_r+0xb0>)
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	b91b      	cbnz	r3, 800abbc <_malloc_r+0x3c>
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 f98f 	bl	800aed8 <_sbrk_r>
 800abba:	6020      	str	r0, [r4, #0]
 800abbc:	4629      	mov	r1, r5
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 f98a 	bl	800aed8 <_sbrk_r>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d124      	bne.n	800ac12 <_malloc_r+0x92>
 800abc8:	230c      	movs	r3, #12
 800abca:	6033      	str	r3, [r6, #0]
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f9cc 	bl	800af6a <__malloc_unlock>
 800abd2:	e7e4      	b.n	800ab9e <_malloc_r+0x1e>
 800abd4:	680b      	ldr	r3, [r1, #0]
 800abd6:	1b5b      	subs	r3, r3, r5
 800abd8:	d418      	bmi.n	800ac0c <_malloc_r+0x8c>
 800abda:	2b0b      	cmp	r3, #11
 800abdc:	d90f      	bls.n	800abfe <_malloc_r+0x7e>
 800abde:	600b      	str	r3, [r1, #0]
 800abe0:	50cd      	str	r5, [r1, r3]
 800abe2:	18cc      	adds	r4, r1, r3
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 f9c0 	bl	800af6a <__malloc_unlock>
 800abea:	f104 000b 	add.w	r0, r4, #11
 800abee:	1d23      	adds	r3, r4, #4
 800abf0:	f020 0007 	bic.w	r0, r0, #7
 800abf4:	1ac3      	subs	r3, r0, r3
 800abf6:	d0d3      	beq.n	800aba0 <_malloc_r+0x20>
 800abf8:	425a      	negs	r2, r3
 800abfa:	50e2      	str	r2, [r4, r3]
 800abfc:	e7d0      	b.n	800aba0 <_malloc_r+0x20>
 800abfe:	428c      	cmp	r4, r1
 800ac00:	684b      	ldr	r3, [r1, #4]
 800ac02:	bf16      	itet	ne
 800ac04:	6063      	strne	r3, [r4, #4]
 800ac06:	6013      	streq	r3, [r2, #0]
 800ac08:	460c      	movne	r4, r1
 800ac0a:	e7eb      	b.n	800abe4 <_malloc_r+0x64>
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	6849      	ldr	r1, [r1, #4]
 800ac10:	e7cc      	b.n	800abac <_malloc_r+0x2c>
 800ac12:	1cc4      	adds	r4, r0, #3
 800ac14:	f024 0403 	bic.w	r4, r4, #3
 800ac18:	42a0      	cmp	r0, r4
 800ac1a:	d005      	beq.n	800ac28 <_malloc_r+0xa8>
 800ac1c:	1a21      	subs	r1, r4, r0
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f000 f95a 	bl	800aed8 <_sbrk_r>
 800ac24:	3001      	adds	r0, #1
 800ac26:	d0cf      	beq.n	800abc8 <_malloc_r+0x48>
 800ac28:	6025      	str	r5, [r4, #0]
 800ac2a:	e7db      	b.n	800abe4 <_malloc_r+0x64>
 800ac2c:	20000538 	.word	0x20000538
 800ac30:	2000053c 	.word	0x2000053c

0800ac34 <__ssputs_r>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	688e      	ldr	r6, [r1, #8]
 800ac3a:	429e      	cmp	r6, r3
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4690      	mov	r8, r2
 800ac42:	4699      	mov	r9, r3
 800ac44:	d837      	bhi.n	800acb6 <__ssputs_r+0x82>
 800ac46:	898a      	ldrh	r2, [r1, #12]
 800ac48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4c:	d031      	beq.n	800acb2 <__ssputs_r+0x7e>
 800ac4e:	6825      	ldr	r5, [r4, #0]
 800ac50:	6909      	ldr	r1, [r1, #16]
 800ac52:	1a6f      	subs	r7, r5, r1
 800ac54:	6965      	ldr	r5, [r4, #20]
 800ac56:	2302      	movs	r3, #2
 800ac58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac5c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac60:	f109 0301 	add.w	r3, r9, #1
 800ac64:	443b      	add	r3, r7
 800ac66:	429d      	cmp	r5, r3
 800ac68:	bf38      	it	cc
 800ac6a:	461d      	movcc	r5, r3
 800ac6c:	0553      	lsls	r3, r2, #21
 800ac6e:	d530      	bpl.n	800acd2 <__ssputs_r+0x9e>
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7ff ff85 	bl	800ab80 <_malloc_r>
 800ac76:	4606      	mov	r6, r0
 800ac78:	b950      	cbnz	r0, 800ac90 <__ssputs_r+0x5c>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	f8ca 3000 	str.w	r3, [sl]
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac90:	463a      	mov	r2, r7
 800ac92:	6921      	ldr	r1, [r4, #16]
 800ac94:	f7fc fc22 	bl	80074dc <memcpy>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	6126      	str	r6, [r4, #16]
 800aca6:	6165      	str	r5, [r4, #20]
 800aca8:	443e      	add	r6, r7
 800acaa:	1bed      	subs	r5, r5, r7
 800acac:	6026      	str	r6, [r4, #0]
 800acae:	60a5      	str	r5, [r4, #8]
 800acb0:	464e      	mov	r6, r9
 800acb2:	454e      	cmp	r6, r9
 800acb4:	d900      	bls.n	800acb8 <__ssputs_r+0x84>
 800acb6:	464e      	mov	r6, r9
 800acb8:	4632      	mov	r2, r6
 800acba:	4641      	mov	r1, r8
 800acbc:	6820      	ldr	r0, [r4, #0]
 800acbe:	f000 f93a 	bl	800af36 <memmove>
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	1b9b      	subs	r3, r3, r6
 800acc6:	60a3      	str	r3, [r4, #8]
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	441e      	add	r6, r3
 800accc:	6026      	str	r6, [r4, #0]
 800acce:	2000      	movs	r0, #0
 800acd0:	e7dc      	b.n	800ac8c <__ssputs_r+0x58>
 800acd2:	462a      	mov	r2, r5
 800acd4:	f000 f94a 	bl	800af6c <_realloc_r>
 800acd8:	4606      	mov	r6, r0
 800acda:	2800      	cmp	r0, #0
 800acdc:	d1e2      	bne.n	800aca4 <__ssputs_r+0x70>
 800acde:	6921      	ldr	r1, [r4, #16]
 800ace0:	4650      	mov	r0, sl
 800ace2:	f7ff feff 	bl	800aae4 <_free_r>
 800ace6:	e7c8      	b.n	800ac7a <__ssputs_r+0x46>

0800ace8 <_svfiprintf_r>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	461d      	mov	r5, r3
 800acee:	898b      	ldrh	r3, [r1, #12]
 800acf0:	061f      	lsls	r7, r3, #24
 800acf2:	b09d      	sub	sp, #116	; 0x74
 800acf4:	4680      	mov	r8, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	4616      	mov	r6, r2
 800acfa:	d50f      	bpl.n	800ad1c <_svfiprintf_r+0x34>
 800acfc:	690b      	ldr	r3, [r1, #16]
 800acfe:	b96b      	cbnz	r3, 800ad1c <_svfiprintf_r+0x34>
 800ad00:	2140      	movs	r1, #64	; 0x40
 800ad02:	f7ff ff3d 	bl	800ab80 <_malloc_r>
 800ad06:	6020      	str	r0, [r4, #0]
 800ad08:	6120      	str	r0, [r4, #16]
 800ad0a:	b928      	cbnz	r0, 800ad18 <_svfiprintf_r+0x30>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	f8c8 3000 	str.w	r3, [r8]
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad16:	e0c8      	b.n	800aeaa <_svfiprintf_r+0x1c2>
 800ad18:	2340      	movs	r3, #64	; 0x40
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad20:	2320      	movs	r3, #32
 800ad22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad26:	2330      	movs	r3, #48	; 0x30
 800ad28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2c:	9503      	str	r5, [sp, #12]
 800ad2e:	f04f 0b01 	mov.w	fp, #1
 800ad32:	4637      	mov	r7, r6
 800ad34:	463d      	mov	r5, r7
 800ad36:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad3a:	b10b      	cbz	r3, 800ad40 <_svfiprintf_r+0x58>
 800ad3c:	2b25      	cmp	r3, #37	; 0x25
 800ad3e:	d13e      	bne.n	800adbe <_svfiprintf_r+0xd6>
 800ad40:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad44:	d00b      	beq.n	800ad5e <_svfiprintf_r+0x76>
 800ad46:	4653      	mov	r3, sl
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	f7ff ff71 	bl	800ac34 <__ssputs_r>
 800ad52:	3001      	adds	r0, #1
 800ad54:	f000 80a4 	beq.w	800aea0 <_svfiprintf_r+0x1b8>
 800ad58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5a:	4453      	add	r3, sl
 800ad5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5e:	783b      	ldrb	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 809d 	beq.w	800aea0 <_svfiprintf_r+0x1b8>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad78:	931a      	str	r3, [sp, #104]	; 0x68
 800ad7a:	462f      	mov	r7, r5
 800ad7c:	2205      	movs	r2, #5
 800ad7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ad82:	4850      	ldr	r0, [pc, #320]	; (800aec4 <_svfiprintf_r+0x1dc>)
 800ad84:	f7f5 fa4c 	bl	8000220 <memchr>
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	b9d0      	cbnz	r0, 800adc2 <_svfiprintf_r+0xda>
 800ad8c:	06d9      	lsls	r1, r3, #27
 800ad8e:	bf44      	itt	mi
 800ad90:	2220      	movmi	r2, #32
 800ad92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad96:	071a      	lsls	r2, r3, #28
 800ad98:	bf44      	itt	mi
 800ad9a:	222b      	movmi	r2, #43	; 0x2b
 800ad9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ada0:	782a      	ldrb	r2, [r5, #0]
 800ada2:	2a2a      	cmp	r2, #42	; 0x2a
 800ada4:	d015      	beq.n	800add2 <_svfiprintf_r+0xea>
 800ada6:	9a07      	ldr	r2, [sp, #28]
 800ada8:	462f      	mov	r7, r5
 800adaa:	2000      	movs	r0, #0
 800adac:	250a      	movs	r5, #10
 800adae:	4639      	mov	r1, r7
 800adb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb4:	3b30      	subs	r3, #48	; 0x30
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	d94d      	bls.n	800ae56 <_svfiprintf_r+0x16e>
 800adba:	b1b8      	cbz	r0, 800adec <_svfiprintf_r+0x104>
 800adbc:	e00f      	b.n	800adde <_svfiprintf_r+0xf6>
 800adbe:	462f      	mov	r7, r5
 800adc0:	e7b8      	b.n	800ad34 <_svfiprintf_r+0x4c>
 800adc2:	4a40      	ldr	r2, [pc, #256]	; (800aec4 <_svfiprintf_r+0x1dc>)
 800adc4:	1a80      	subs	r0, r0, r2
 800adc6:	fa0b f000 	lsl.w	r0, fp, r0
 800adca:	4318      	orrs	r0, r3
 800adcc:	9004      	str	r0, [sp, #16]
 800adce:	463d      	mov	r5, r7
 800add0:	e7d3      	b.n	800ad7a <_svfiprintf_r+0x92>
 800add2:	9a03      	ldr	r2, [sp, #12]
 800add4:	1d11      	adds	r1, r2, #4
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	9103      	str	r1, [sp, #12]
 800adda:	2a00      	cmp	r2, #0
 800addc:	db01      	blt.n	800ade2 <_svfiprintf_r+0xfa>
 800adde:	9207      	str	r2, [sp, #28]
 800ade0:	e004      	b.n	800adec <_svfiprintf_r+0x104>
 800ade2:	4252      	negs	r2, r2
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	9207      	str	r2, [sp, #28]
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	783b      	ldrb	r3, [r7, #0]
 800adee:	2b2e      	cmp	r3, #46	; 0x2e
 800adf0:	d10c      	bne.n	800ae0c <_svfiprintf_r+0x124>
 800adf2:	787b      	ldrb	r3, [r7, #1]
 800adf4:	2b2a      	cmp	r3, #42	; 0x2a
 800adf6:	d133      	bne.n	800ae60 <_svfiprintf_r+0x178>
 800adf8:	9b03      	ldr	r3, [sp, #12]
 800adfa:	1d1a      	adds	r2, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	9203      	str	r2, [sp, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfb8      	it	lt
 800ae04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae08:	3702      	adds	r7, #2
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	4d2e      	ldr	r5, [pc, #184]	; (800aec8 <_svfiprintf_r+0x1e0>)
 800ae0e:	7839      	ldrb	r1, [r7, #0]
 800ae10:	2203      	movs	r2, #3
 800ae12:	4628      	mov	r0, r5
 800ae14:	f7f5 fa04 	bl	8000220 <memchr>
 800ae18:	b138      	cbz	r0, 800ae2a <_svfiprintf_r+0x142>
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	1b40      	subs	r0, r0, r5
 800ae1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	4303      	orrs	r3, r0
 800ae26:	3701      	adds	r7, #1
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	7839      	ldrb	r1, [r7, #0]
 800ae2c:	4827      	ldr	r0, [pc, #156]	; (800aecc <_svfiprintf_r+0x1e4>)
 800ae2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae32:	2206      	movs	r2, #6
 800ae34:	1c7e      	adds	r6, r7, #1
 800ae36:	f7f5 f9f3 	bl	8000220 <memchr>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d038      	beq.n	800aeb0 <_svfiprintf_r+0x1c8>
 800ae3e:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <_svfiprintf_r+0x1e8>)
 800ae40:	bb13      	cbnz	r3, 800ae88 <_svfiprintf_r+0x1a0>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	3307      	adds	r3, #7
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	9303      	str	r3, [sp, #12]
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	444b      	add	r3, r9
 800ae52:	9309      	str	r3, [sp, #36]	; 0x24
 800ae54:	e76d      	b.n	800ad32 <_svfiprintf_r+0x4a>
 800ae56:	fb05 3202 	mla	r2, r5, r2, r3
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	e7a6      	b.n	800adae <_svfiprintf_r+0xc6>
 800ae60:	2300      	movs	r3, #0
 800ae62:	3701      	adds	r7, #1
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	4619      	mov	r1, r3
 800ae68:	250a      	movs	r5, #10
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae70:	3a30      	subs	r2, #48	; 0x30
 800ae72:	2a09      	cmp	r2, #9
 800ae74:	d903      	bls.n	800ae7e <_svfiprintf_r+0x196>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0c8      	beq.n	800ae0c <_svfiprintf_r+0x124>
 800ae7a:	9105      	str	r1, [sp, #20]
 800ae7c:	e7c6      	b.n	800ae0c <_svfiprintf_r+0x124>
 800ae7e:	fb05 2101 	mla	r1, r5, r1, r2
 800ae82:	2301      	movs	r3, #1
 800ae84:	4607      	mov	r7, r0
 800ae86:	e7f0      	b.n	800ae6a <_svfiprintf_r+0x182>
 800ae88:	ab03      	add	r3, sp, #12
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <_svfiprintf_r+0x1ec>)
 800ae90:	a904      	add	r1, sp, #16
 800ae92:	4640      	mov	r0, r8
 800ae94:	f7fc fbca 	bl	800762c <_printf_float>
 800ae98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ae9c:	4681      	mov	r9, r0
 800ae9e:	d1d6      	bne.n	800ae4e <_svfiprintf_r+0x166>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	065b      	lsls	r3, r3, #25
 800aea4:	f53f af35 	bmi.w	800ad12 <_svfiprintf_r+0x2a>
 800aea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeaa:	b01d      	add	sp, #116	; 0x74
 800aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb0:	ab03      	add	r3, sp, #12
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <_svfiprintf_r+0x1ec>)
 800aeb8:	a904      	add	r1, sp, #16
 800aeba:	4640      	mov	r0, r8
 800aebc:	f7fc fe6c 	bl	8007b98 <_printf_i>
 800aec0:	e7ea      	b.n	800ae98 <_svfiprintf_r+0x1b0>
 800aec2:	bf00      	nop
 800aec4:	0800dddc 	.word	0x0800dddc
 800aec8:	0800dde2 	.word	0x0800dde2
 800aecc:	0800dde6 	.word	0x0800dde6
 800aed0:	0800762d 	.word	0x0800762d
 800aed4:	0800ac35 	.word	0x0800ac35

0800aed8 <_sbrk_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4c06      	ldr	r4, [pc, #24]	; (800aef4 <_sbrk_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4605      	mov	r5, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	f7fc fa60 	bl	80073a8 <_sbrk>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_sbrk_r+0x1a>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_sbrk_r+0x1a>
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000934 	.word	0x20000934

0800aef8 <strncmp>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	b16a      	cbz	r2, 800af18 <strncmp+0x20>
 800aefc:	3901      	subs	r1, #1
 800aefe:	1884      	adds	r4, r0, r2
 800af00:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af08:	4293      	cmp	r3, r2
 800af0a:	d103      	bne.n	800af14 <strncmp+0x1c>
 800af0c:	42a0      	cmp	r0, r4
 800af0e:	d001      	beq.n	800af14 <strncmp+0x1c>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1f5      	bne.n	800af00 <strncmp+0x8>
 800af14:	1a98      	subs	r0, r3, r2
 800af16:	bd10      	pop	{r4, pc}
 800af18:	4610      	mov	r0, r2
 800af1a:	e7fc      	b.n	800af16 <strncmp+0x1e>

0800af1c <__ascii_wctomb>:
 800af1c:	b149      	cbz	r1, 800af32 <__ascii_wctomb+0x16>
 800af1e:	2aff      	cmp	r2, #255	; 0xff
 800af20:	bf85      	ittet	hi
 800af22:	238a      	movhi	r3, #138	; 0x8a
 800af24:	6003      	strhi	r3, [r0, #0]
 800af26:	700a      	strbls	r2, [r1, #0]
 800af28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af2c:	bf98      	it	ls
 800af2e:	2001      	movls	r0, #1
 800af30:	4770      	bx	lr
 800af32:	4608      	mov	r0, r1
 800af34:	4770      	bx	lr

0800af36 <memmove>:
 800af36:	4288      	cmp	r0, r1
 800af38:	b510      	push	{r4, lr}
 800af3a:	eb01 0302 	add.w	r3, r1, r2
 800af3e:	d807      	bhi.n	800af50 <memmove+0x1a>
 800af40:	1e42      	subs	r2, r0, #1
 800af42:	4299      	cmp	r1, r3
 800af44:	d00a      	beq.n	800af5c <memmove+0x26>
 800af46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af4e:	e7f8      	b.n	800af42 <memmove+0xc>
 800af50:	4283      	cmp	r3, r0
 800af52:	d9f5      	bls.n	800af40 <memmove+0xa>
 800af54:	1881      	adds	r1, r0, r2
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	42d3      	cmn	r3, r2
 800af5a:	d100      	bne.n	800af5e <memmove+0x28>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af66:	e7f7      	b.n	800af58 <memmove+0x22>

0800af68 <__malloc_lock>:
 800af68:	4770      	bx	lr

0800af6a <__malloc_unlock>:
 800af6a:	4770      	bx	lr

0800af6c <_realloc_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	4607      	mov	r7, r0
 800af70:	4614      	mov	r4, r2
 800af72:	460e      	mov	r6, r1
 800af74:	b921      	cbnz	r1, 800af80 <_realloc_r+0x14>
 800af76:	4611      	mov	r1, r2
 800af78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af7c:	f7ff be00 	b.w	800ab80 <_malloc_r>
 800af80:	b922      	cbnz	r2, 800af8c <_realloc_r+0x20>
 800af82:	f7ff fdaf 	bl	800aae4 <_free_r>
 800af86:	4625      	mov	r5, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	f000 f814 	bl	800afb8 <_malloc_usable_size_r>
 800af90:	42a0      	cmp	r0, r4
 800af92:	d20f      	bcs.n	800afb4 <_realloc_r+0x48>
 800af94:	4621      	mov	r1, r4
 800af96:	4638      	mov	r0, r7
 800af98:	f7ff fdf2 	bl	800ab80 <_malloc_r>
 800af9c:	4605      	mov	r5, r0
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d0f2      	beq.n	800af88 <_realloc_r+0x1c>
 800afa2:	4631      	mov	r1, r6
 800afa4:	4622      	mov	r2, r4
 800afa6:	f7fc fa99 	bl	80074dc <memcpy>
 800afaa:	4631      	mov	r1, r6
 800afac:	4638      	mov	r0, r7
 800afae:	f7ff fd99 	bl	800aae4 <_free_r>
 800afb2:	e7e9      	b.n	800af88 <_realloc_r+0x1c>
 800afb4:	4635      	mov	r5, r6
 800afb6:	e7e7      	b.n	800af88 <_realloc_r+0x1c>

0800afb8 <_malloc_usable_size_r>:
 800afb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afbc:	1f18      	subs	r0, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfbc      	itt	lt
 800afc2:	580b      	ldrlt	r3, [r1, r0]
 800afc4:	18c0      	addlt	r0, r0, r3
 800afc6:	4770      	bx	lr

0800afc8 <round>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	ec57 6b10 	vmov	r6, r7, d0
 800afce:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800afd2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800afd6:	2c13      	cmp	r4, #19
 800afd8:	463b      	mov	r3, r7
 800afda:	463d      	mov	r5, r7
 800afdc:	dc17      	bgt.n	800b00e <round+0x46>
 800afde:	2c00      	cmp	r4, #0
 800afe0:	da09      	bge.n	800aff6 <round+0x2e>
 800afe2:	3401      	adds	r4, #1
 800afe4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800afe8:	d103      	bne.n	800aff2 <round+0x2a>
 800afea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800afee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aff2:	2100      	movs	r1, #0
 800aff4:	e02c      	b.n	800b050 <round+0x88>
 800aff6:	4a18      	ldr	r2, [pc, #96]	; (800b058 <round+0x90>)
 800aff8:	4122      	asrs	r2, r4
 800affa:	4217      	tst	r7, r2
 800affc:	d100      	bne.n	800b000 <round+0x38>
 800affe:	b19e      	cbz	r6, 800b028 <round+0x60>
 800b000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b004:	4123      	asrs	r3, r4
 800b006:	442b      	add	r3, r5
 800b008:	ea23 0302 	bic.w	r3, r3, r2
 800b00c:	e7f1      	b.n	800aff2 <round+0x2a>
 800b00e:	2c33      	cmp	r4, #51	; 0x33
 800b010:	dd0d      	ble.n	800b02e <round+0x66>
 800b012:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b016:	d107      	bne.n	800b028 <round+0x60>
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	ee10 2a10 	vmov	r2, s0
 800b020:	f7f5 f954 	bl	80002cc <__adddf3>
 800b024:	4606      	mov	r6, r0
 800b026:	460f      	mov	r7, r1
 800b028:	ec47 6b10 	vmov	d0, r6, r7
 800b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800b032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b036:	40d0      	lsrs	r0, r2
 800b038:	4206      	tst	r6, r0
 800b03a:	d0f5      	beq.n	800b028 <round+0x60>
 800b03c:	2201      	movs	r2, #1
 800b03e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b042:	fa02 f404 	lsl.w	r4, r2, r4
 800b046:	1931      	adds	r1, r6, r4
 800b048:	bf28      	it	cs
 800b04a:	189b      	addcs	r3, r3, r2
 800b04c:	ea21 0100 	bic.w	r1, r1, r0
 800b050:	461f      	mov	r7, r3
 800b052:	460e      	mov	r6, r1
 800b054:	e7e8      	b.n	800b028 <round+0x60>
 800b056:	bf00      	nop
 800b058:	000fffff 	.word	0x000fffff

0800b05c <_init>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

0800b068 <_fini>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	bf00      	nop
 800b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06e:	bc08      	pop	{r3}
 800b070:	469e      	mov	lr, r3
 800b072:	4770      	bx	lr
