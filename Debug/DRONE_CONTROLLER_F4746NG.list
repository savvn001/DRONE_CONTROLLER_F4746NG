
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800a050  0800a050  0001a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d0  0800a7d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7d0  0800a7d0  0001a7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7d8  0800a7d8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d8  0800a7d8  0001a7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7dc  0800a7dc  0001a7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a7e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200001e8  0800a9c8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800a9c8  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb42  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003880  00000000  00000000  0003fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001057b  00000000  00000000  000435da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001768  00000000  00000000  00053b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001638  00000000  00000000  000552c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028da1  00000000  00000000  000568f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013d1d  00000000  00000000  0007f699  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fb13b  00000000  00000000  000933b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018e4f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eec  00000000  00000000  0018e56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a034 	.word	0x0800a034

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a034 	.word	0x0800a034

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 0;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000fc8:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8000fca:	f000 feed 	bl	8001da8 <DWT_Delay>

}
 8000fce:	bd08      	pop	{r3, pc}

08000fd0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fd0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fd2:	b938      	cbnz	r0, 8000fe4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <NRF24_csn+0x24>)
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <NRF24_csn+0x28>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 fe52 	bl	8002c86 <HAL_GPIO_WritePin>
}
 8000fe2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <NRF24_csn+0x24>)
 8000fe8:	8819      	ldrh	r1, [r3, #0]
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <NRF24_csn+0x28>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	f001 fe4a 	bl	8002c86 <HAL_GPIO_WritePin>
 8000ff2:	e7f6      	b.n	8000fe2 <NRF24_csn+0x12>
 8000ff4:	2000020a 	.word	0x2000020a
 8000ff8:	2000020c 	.word	0x2000020c

08000ffc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000ffc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ffe:	b938      	cbnz	r0, 8001010 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <NRF24_ce+0x24>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <NRF24_ce+0x28>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f001 fe3c 	bl	8002c86 <HAL_GPIO_WritePin>
}
 800100e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	4b03      	ldr	r3, [pc, #12]	; (8001020 <NRF24_ce+0x24>)
 8001014:	8819      	ldrh	r1, [r3, #0]
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <NRF24_ce+0x28>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f001 fe34 	bl	8002c86 <HAL_GPIO_WritePin>
 800101e:	e7f6      	b.n	800100e <NRF24_ce+0x12>
 8001020:	20000208 	.word	0x20000208
 8001024:	2000020c 	.word	0x2000020c

08001028 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ffce 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001034:	f004 041f 	and.w	r4, r4, #31
 8001038:	a902      	add	r1, sp, #8
 800103a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <NRF24_read_register+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <NRF24_read_register+0x5c>)
 8001048:	f002 ffc6 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <NRF24_read_register+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0fb      	beq.n	800104c <NRF24_read_register+0x24>
	}
	//Receive data
	SPI_RxCplt = 0;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <NRF24_read_register+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, &spiBuf[1], 1);
 800105a:	2201      	movs	r2, #1
 800105c:	f10d 0105 	add.w	r1, sp, #5
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <NRF24_read_register+0x5c>)
 8001062:	f003 f88b 	bl	800417c <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <NRF24_read_register+0x60>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0fb      	beq.n	8001066 <NRF24_read_register+0x3e>
	}
	retData = spiBuf[1];
 800106e:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ffac 	bl	8000fd0 <NRF24_csn>
	return retData;
}
 8001078:	4620      	mov	r0, r4
 800107a:	b002      	add	sp, #8
 800107c:	bd10      	pop	{r4, pc}
 800107e:	bf00      	nop
 8001080:	20000205 	.word	0x20000205
 8001084:	200002c4 	.word	0x200002c4
 8001088:	20000204 	.word	0x20000204

0800108c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff9a 	bl	8000fd0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800109c:	f004 041f 	and.w	r4, r4, #31
 80010a0:	a902      	add	r1, sp, #8
 80010a2:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	SPI_TxCplt = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <NRF24_read_registerN+0x54>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <NRF24_read_registerN+0x58>)
 80010b0:	f002 ff92 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <NRF24_read_registerN+0x54>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0fb      	beq.n	80010b4 <NRF24_read_registerN+0x28>
	}
	//Receive data
	SPI_RxCplt = 0;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <NRF24_read_registerN+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, len);
 80010c2:	4632      	mov	r2, r6
 80010c4:	4629      	mov	r1, r5
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <NRF24_read_registerN+0x58>)
 80010c8:	f003 f858 	bl	800417c <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <NRF24_read_registerN+0x5c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0fb      	beq.n	80010cc <NRF24_read_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff7b 	bl	8000fd0 <NRF24_csn>
}
 80010da:	b002      	add	sp, #8
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
 80010de:	bf00      	nop
 80010e0:	20000205 	.word	0x20000205
 80010e4:	200002c4 	.word	0x200002c4
 80010e8:	20000204 	.word	0x20000204

080010ec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010ec:	b530      	push	{r4, r5, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	4604      	mov	r4, r0
 80010f2:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff6b 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010fa:	f044 0420 	orr.w	r4, r4, #32
 80010fe:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8001102:	f88d 5005 	strb.w	r5, [sp, #5]
	SPI_TxCplt = 0;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <NRF24_write_register+0x3c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 2);
 800110c:	2202      	movs	r2, #2
 800110e:	a901      	add	r1, sp, #4
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <NRF24_write_register+0x40>)
 8001112:	f002 ff61 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <NRF24_write_register+0x3c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0fb      	beq.n	8001116 <NRF24_write_register+0x2a>
	}
	//Bring CSN high
	NRF24_csn(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff ff56 	bl	8000fd0 <NRF24_csn>
}
 8001124:	b003      	add	sp, #12
 8001126:	bd30      	pop	{r4, r5, pc}
 8001128:	20000205 	.word	0x20000205
 800112c:	200002c4 	.word	0x200002c4

08001130 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff48 	bl	8000fd0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001140:	f044 0420 	orr.w	r4, r4, #32
 8001144:	a902      	add	r1, sp, #8
 8001146:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <NRF24_write_registerN+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <NRF24_write_registerN+0x58>)
 8001154:	f002 ff40 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <NRF24_write_registerN+0x54>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0fb      	beq.n	8001158 <NRF24_write_registerN+0x28>
	}
	SPI_TxCplt = 0;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <NRF24_write_registerN+0x54>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)buf, len);
 8001166:	4632      	mov	r2, r6
 8001168:	4629      	mov	r1, r5
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <NRF24_write_registerN+0x58>)
 800116c:	f002 ff34 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <NRF24_write_registerN+0x54>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0fb      	beq.n	8001170 <NRF24_write_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff ff29 	bl	8000fd0 <NRF24_csn>
}
 800117e:	b002      	add	sp, #8
 8001180:	bd70      	pop	{r4, r5, r6, pc}
 8001182:	bf00      	nop
 8001184:	20000205 	.word	0x20000205
 8001188:	200002c4 	.word	0x200002c4

0800118c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800118c:	b530      	push	{r4, r5, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff1b 	bl	8000fd0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800119a:	a902      	add	r1, sp, #8
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <NRF24_write_payload+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &wrPayloadCmd, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <NRF24_write_payload+0x54>)
 80011ac:	f002 ff14 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <NRF24_write_payload+0x50>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0fb      	beq.n	80011b0 <NRF24_write_payload+0x24>
	}
	SPI_TxCplt = 0;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <NRF24_write_payload+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)buf, len);
 80011be:	462a      	mov	r2, r5
 80011c0:	4621      	mov	r1, r4
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <NRF24_write_payload+0x54>)
 80011c4:	f002 ff08 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <NRF24_write_payload+0x50>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0fb      	beq.n	80011c8 <NRF24_write_payload+0x3c>
	}
	//Bring CSN high
	NRF24_csn(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fefd 	bl	8000fd0 <NRF24_csn>
}
 80011d6:	b003      	add	sp, #12
 80011d8:	bd30      	pop	{r4, r5, pc}
 80011da:	bf00      	nop
 80011dc:	20000205 	.word	0x20000205
 80011e0:	200002c4 	.word	0x200002c4

080011e4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80011e4:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	20e1      	movs	r0, #225	; 0xe1
 80011ea:	f7ff ff7f 	bl	80010ec <NRF24_write_register>
}
 80011ee:	bd08      	pop	{r3, pc}

080011f0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80011f0:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	20e2      	movs	r0, #226	; 0xe2
 80011f6:	f7ff ff79 	bl	80010ec <NRF24_write_register>
}
 80011fa:	bd08      	pop	{r3, pc}

080011fc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80011fc:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80011fe:	2007      	movs	r0, #7
 8001200:	f7ff ff12 	bl	8001028 <NRF24_read_register>
	return statReg;
}
 8001204:	bd08      	pop	{r3, pc}

08001206 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001206:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fef7 	bl	8000ffc <NRF24_ce>
	NRF24_flush_tx();
 800120e:	f7ff ffe9 	bl	80011e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001212:	f7ff ffed 	bl	80011f0 <NRF24_flush_rx>
}
 8001216:	bd08      	pop	{r3, pc}

08001218 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	ac02      	add	r4, sp, #8
 800121e:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001222:	2205      	movs	r2, #5
 8001224:	4621      	mov	r1, r4
 8001226:	200a      	movs	r0, #10
 8001228:	f7ff ff82 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800122c:	2205      	movs	r2, #5
 800122e:	4621      	mov	r1, r4
 8001230:	2010      	movs	r0, #16
 8001232:	f7ff ff7d 	bl	8001130 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <NRF24_openWritingPipe+0x34>)
 8001238:	7819      	ldrb	r1, [r3, #0]
 800123a:	2920      	cmp	r1, #32
 800123c:	bf28      	it	cs
 800123e:	2120      	movcs	r1, #32
 8001240:	2011      	movs	r0, #17
 8001242:	f7ff ff53 	bl	80010ec <NRF24_write_register>
}
 8001246:	b002      	add	sp, #8
 8001248:	bd10      	pop	{r4, pc}
 800124a:	bf00      	nop
 800124c:	20000290 	.word	0x20000290

08001250 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001250:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001252:	f001 010f 	and.w	r1, r1, #15
 8001256:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800125a:	b2c9      	uxtb	r1, r1
 800125c:	2004      	movs	r0, #4
 800125e:	f7ff ff45 	bl	80010ec <NRF24_write_register>
}
 8001262:	bd08      	pop	{r3, pc}

08001264 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001264:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001266:	4601      	mov	r1, r0
 8001268:	287f      	cmp	r0, #127	; 0x7f
 800126a:	bf28      	it	cs
 800126c:	217f      	movcs	r1, #127	; 0x7f
 800126e:	2005      	movs	r0, #5
 8001270:	f7ff ff3c 	bl	80010ec <NRF24_write_register>
}
 8001274:	bd08      	pop	{r3, pc}
	...

08001278 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8001278:	2820      	cmp	r0, #32
 800127a:	bf28      	it	cs
 800127c:	2020      	movcs	r0, #32
 800127e:	4b01      	ldr	r3, [pc, #4]	; (8001284 <NRF24_setPayloadSize+0xc>)
 8001280:	7018      	strb	r0, [r3, #0]
}
 8001282:	4770      	bx	lr
 8001284:	20000290 	.word	0x20000290

08001288 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <NRF24_getPayloadSize+0x8>)
 800128a:	7818      	ldrb	r0, [r3, #0]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000290 	.word	0x20000290

08001294 <NRF24_read_payload>:
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	4606      	mov	r6, r0
 800129a:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800129c:	f7ff fff4 	bl	8001288 <NRF24_getPayloadSize>
 80012a0:	4604      	mov	r4, r0
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d900      	bls.n	80012a8 <NRF24_read_payload+0x14>
 80012a6:	462c      	mov	r4, r5
	NRF24_csn(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fe91 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80012ae:	a902      	add	r1, sp, #8
 80012b0:	2361      	movs	r3, #97	; 0x61
 80012b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <NRF24_read_payload+0x5c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &cmdRxBuf, 1);
 80012bc:	2201      	movs	r2, #1
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <NRF24_read_payload+0x60>)
 80012c0:	f002 fe8a 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <NRF24_read_payload+0x5c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0fb      	beq.n	80012c4 <NRF24_read_payload+0x30>
	SPI_RxCplt = 0;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <NRF24_read_payload+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, data_len);
 80012d2:	b2a2      	uxth	r2, r4
 80012d4:	4631      	mov	r1, r6
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <NRF24_read_payload+0x60>)
 80012d8:	f002 ff50 	bl	800417c <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <NRF24_read_payload+0x64>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fb      	beq.n	80012dc <NRF24_read_payload+0x48>
	NRF24_csn(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fe73 	bl	8000fd0 <NRF24_csn>
}
 80012ea:	b002      	add	sp, #8
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	bf00      	nop
 80012f0:	20000205 	.word	0x20000205
 80012f4:	200002c4 	.word	0x200002c4
 80012f8:	20000204 	.word	0x20000204

080012fc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80012fc:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80012fe:	2060      	movs	r0, #96	; 0x60
 8001300:	f7ff fe92 	bl	8001028 <NRF24_read_register>
}
 8001304:	bd08      	pop	{r3, pc}

08001306 <NRF24_read>:
{
 8001306:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001308:	f7ff ffc4 	bl	8001294 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800130c:	2017      	movs	r0, #23
 800130e:	f7ff fe8b 	bl	8001028 <NRF24_read_register>
 8001312:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001316:	f7ff ff6b 	bl	80011f0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800131a:	f7ff ffef 	bl	80012fc <NRF24_getDynamicPayloadSize>
}
 800131e:	4620      	mov	r0, r4
 8001320:	bd10      	pop	{r4, pc}

08001322 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8001322:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001324:	201d      	movs	r0, #29
 8001326:	f7ff fe7f 	bl	8001028 <NRF24_read_register>
 800132a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800132e:	201d      	movs	r0, #29
 8001330:	f7ff fedc 	bl	80010ec <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001334:	2100      	movs	r1, #0
 8001336:	201c      	movs	r0, #28
 8001338:	f7ff fed8 	bl	80010ec <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 800133c:	bd08      	pop	{r3, pc}

0800133e <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800133e:	b508      	push	{r3, lr}
	if ( enable )
 8001340:	b920      	cbnz	r0, 800134c <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fed1 	bl	80010ec <NRF24_write_register>
}
 800134a:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 800134c:	213f      	movs	r1, #63	; 0x3f
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fecc 	bl	80010ec <NRF24_write_register>
 8001354:	e7f9      	b.n	800134a <NRF24_setAutoAck+0xc>

08001356 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001356:	b510      	push	{r4, lr}
 8001358:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800135a:	2006      	movs	r0, #6
 800135c:	f7ff fe64 	bl	8001028 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001360:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 8001364:	2c03      	cmp	r4, #3
 8001366:	d009      	beq.n	800137c <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8001368:	2c02      	cmp	r4, #2
 800136a:	d00d      	beq.n	8001388 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 800136c:	2c01      	cmp	r4, #1
 800136e:	d00e      	beq.n	800138e <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 8001370:	b134      	cbz	r4, 8001380 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 8001372:	2c04      	cmp	r4, #4
 8001374:	d104      	bne.n	8001380 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001376:	f041 0106 	orr.w	r1, r1, #6
 800137a:	e001      	b.n	8001380 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800137c:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff feb3 	bl	80010ec <NRF24_write_register>
}
 8001386:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8001388:	f041 0104 	orr.w	r1, r1, #4
 800138c:	e7f8      	b.n	8001380 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 800138e:	f041 0102 	orr.w	r1, r1, #2
 8001392:	e7f5      	b.n	8001380 <NRF24_setPALevel+0x2a>

08001394 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001398:	2006      	movs	r0, #6
 800139a:	f7ff fe45 	bl	8001028 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800139e:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 80013a2:	2d02      	cmp	r5, #2
 80013a4:	d00c      	beq.n	80013c0 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 80013a6:	2d01      	cmp	r5, #1
 80013a8:	d00d      	beq.n	80013c6 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 80013aa:	4621      	mov	r1, r4
 80013ac:	2006      	movs	r0, #6
 80013ae:	f7ff fe9d 	bl	80010ec <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80013b2:	2006      	movs	r0, #6
 80013b4:	f7ff fe38 	bl	8001028 <NRF24_read_register>
 80013b8:	42a0      	cmp	r0, r4
 80013ba:	d007      	beq.n	80013cc <NRF24_setDataRate+0x38>
	bool result = false;
 80013bc:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 80013be:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 80013c0:	f044 0420 	orr.w	r4, r4, #32
 80013c4:	e7f1      	b.n	80013aa <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 80013c6:	f044 0408 	orr.w	r4, r4, #8
 80013ca:	e7ee      	b.n	80013aa <NRF24_setDataRate+0x16>
		result = true;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e7f6      	b.n	80013be <NRF24_setDataRate+0x2a>

080013d0 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe27 	bl	8001028 <NRF24_read_register>
 80013da:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 80013de:	b11c      	cbz	r4, 80013e8 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 80013e0:	2c01      	cmp	r4, #1
 80013e2:	d005      	beq.n	80013f0 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 80013e4:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fe7f 	bl	80010ec <NRF24_write_register>
}
 80013ee:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 80013f0:	f041 0108 	orr.w	r1, r1, #8
 80013f4:	e7f8      	b.n	80013e8 <NRF24_setCRCLength+0x18>

080013f6 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80013f6:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fe15 	bl	8001028 <NRF24_read_register>
 80013fe:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fe72 	bl	80010ec <NRF24_write_register>
}
 8001408:	bd08      	pop	{r3, pc}

0800140a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800140e:	f7ff fef5 	bl	80011fc <NRF24_get_status>
 8001412:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2501      	movne	r5, #1
 800141c:	2500      	moveq	r5, #0

	if (result)
 800141e:	d00b      	beq.n	8001438 <NRF24_availablePipe+0x2e>
 8001420:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8001422:	b116      	cbz	r6, 800142a <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001424:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001428:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	2007      	movs	r0, #7
 800142e:	f7ff fe5d 	bl	80010ec <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8001432:	f014 0f20 	tst.w	r4, #32
 8001436:	d101      	bne.n	800143c <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8001438:	4628      	mov	r0, r5
 800143a:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800143c:	2120      	movs	r1, #32
 800143e:	2007      	movs	r0, #7
 8001440:	f7ff fe54 	bl	80010ec <NRF24_write_register>
 8001444:	e7f8      	b.n	8001438 <NRF24_availablePipe+0x2e>

08001446 <NRF24_available>:
{
 8001446:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ffde 	bl	800140a <NRF24_availablePipe>
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fde6 	bl	8001028 <NRF24_read_register>
 800145c:	f020 0101 	bic.w	r1, r0, #1
 8001460:	f041 0102 	orr.w	r1, r1, #2
 8001464:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fe3f 	bl	80010ec <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 800146e:	2096      	movs	r0, #150	; 0x96
 8001470:	f7ff fdaa 	bl	8000fc8 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 8001474:	4629      	mov	r1, r5
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff fe88 	bl	800118c <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fdbd 	bl	8000ffc <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001482:	200f      	movs	r0, #15
 8001484:	f7ff fda0 	bl	8000fc8 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fdb7 	bl	8000ffc <NRF24_ce>
}
 800148e:	bd38      	pop	{r3, r4, r5, pc}

08001490 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	4605      	mov	r5, r0
 8001494:	460f      	mov	r7, r1
 8001496:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 8001498:	f7ff feb0 	bl	80011fc <NRF24_get_status>
 800149c:	4604      	mov	r4, r0
	*tx_ok = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80014a2:	2170      	movs	r1, #112	; 0x70
 80014a4:	2007      	movs	r0, #7
 80014a6:	f7ff fe21 	bl	80010ec <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80014aa:	f3c4 1340 	ubfx	r3, r4, #5, #1
 80014ae:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80014b0:	f3c4 1300 	ubfx	r3, r4, #4, #1
 80014b4:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80014b6:	f3c4 1480 	ubfx	r4, r4, #6, #1
 80014ba:	7034      	strb	r4, [r6, #0]
}
 80014bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014be <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80014be:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80014c0:	2170      	movs	r1, #112	; 0x70
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff fe12 	bl	80010ec <NRF24_write_register>
}
 80014c8:	bd08      	pop	{r3, pc}
	...

080014cc <NRF24_write>:
{
 80014cc:	b530      	push	{r4, r5, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	4604      	mov	r4, r0
 80014d2:	460d      	mov	r5, r1
	NRF24_resetStatus();
 80014d4:	f7ff fff3 	bl	80014be <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80014d8:	4629      	mov	r1, r5
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ffb8 	bl	8001450 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 80014e0:	f000 fcb0 	bl	8001e44 <HAL_GetTick>
 80014e4:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f10d 0107 	add.w	r1, sp, #7
 80014ec:	2008      	movs	r0, #8
 80014ee:	f7ff fdcd 	bl	800108c <NRF24_read_registerN>
		status = NRF24_get_status();
 80014f2:	f7ff fe83 	bl	80011fc <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80014f6:	f010 0f30 	tst.w	r0, #48	; 0x30
 80014fa:	d104      	bne.n	8001506 <NRF24_write+0x3a>
 80014fc:	f000 fca2 	bl	8001e44 <HAL_GetTick>
 8001500:	1b00      	subs	r0, r0, r4
 8001502:	2809      	cmp	r0, #9
 8001504:	d9ef      	bls.n	80014e6 <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001506:	4c0c      	ldr	r4, [pc, #48]	; (8001538 <NRF24_write+0x6c>)
 8001508:	4622      	mov	r2, r4
 800150a:	f10d 0105 	add.w	r1, sp, #5
 800150e:	f10d 0006 	add.w	r0, sp, #6
 8001512:	f7ff ffbd 	bl	8001490 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001516:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 800151a:	7823      	ldrb	r3, [r4, #0]
 800151c:	b933      	cbnz	r3, 800152c <NRF24_write+0x60>
	NRF24_available();
 800151e:	f7ff ff92 	bl	8001446 <NRF24_available>
	NRF24_flush_tx();
 8001522:	f7ff fe5f 	bl	80011e4 <NRF24_flush_tx>
}
 8001526:	4628      	mov	r0, r5
 8001528:	b003      	add	sp, #12
 800152a:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 800152c:	f7ff fee6 	bl	80012fc <NRF24_getDynamicPayloadSize>
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <NRF24_write+0x70>)
 8001532:	7018      	strb	r0, [r3, #0]
 8001534:	e7f3      	b.n	800151e <NRF24_write+0x52>
 8001536:	bf00      	nop
 8001538:	20000206 	.word	0x20000206
 800153c:	20000207 	.word	0x20000207

08001540 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001540:	b500      	push	{lr}
 8001542:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fd43 	bl	8000fd0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800154a:	2350      	movs	r3, #80	; 0x50
 800154c:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8001550:	2373      	movs	r3, #115	; 0x73
 8001552:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxCplt = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <NRF24_ACTIVATE_cmd+0x3c>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, cmdRxBuf, 2);
 800155c:	2202      	movs	r2, #2
 800155e:	a901      	add	r1, sp, #4
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <NRF24_ACTIVATE_cmd+0x40>)
 8001562:	f002 fd39 	bl	8003fd8 <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <NRF24_ACTIVATE_cmd+0x3c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0fb      	beq.n	8001566 <NRF24_ACTIVATE_cmd+0x26>
	}

	NRF24_csn(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fd2e 	bl	8000fd0 <NRF24_csn>
}
 8001574:	b003      	add	sp, #12
 8001576:	f85d fb04 	ldr.w	pc, [sp], #4
 800157a:	bf00      	nop
 800157c:	20000205 	.word	0x20000205
 8001580:	200002c4 	.word	0x200002c4

08001584 <NRF24_enableAckPayload>:
{
 8001584:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001586:	201d      	movs	r0, #29
 8001588:	f7ff fd4e 	bl	8001028 <NRF24_read_register>
 800158c:	f040 0106 	orr.w	r1, r0, #6
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	201d      	movs	r0, #29
 8001594:	f7ff fdaa 	bl	80010ec <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001598:	201d      	movs	r0, #29
 800159a:	f7ff fd45 	bl	8001028 <NRF24_read_register>
 800159e:	b148      	cbz	r0, 80015b4 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80015a0:	201c      	movs	r0, #28
 80015a2:	f7ff fd41 	bl	8001028 <NRF24_read_register>
 80015a6:	f040 0103 	orr.w	r1, r0, #3
 80015aa:	b2c9      	uxtb	r1, r1
 80015ac:	201c      	movs	r0, #28
 80015ae:	f7ff fd9d 	bl	80010ec <NRF24_write_register>
}
 80015b2:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 80015b4:	f7ff ffc4 	bl	8001540 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80015b8:	201d      	movs	r0, #29
 80015ba:	f7ff fd35 	bl	8001028 <NRF24_read_register>
 80015be:	f040 0106 	orr.w	r1, r0, #6
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	201d      	movs	r0, #29
 80015c6:	f7ff fd91 	bl	80010ec <NRF24_write_register>
 80015ca:	e7e9      	b.n	80015a0 <NRF24_enableAckPayload+0x1c>

080015cc <NRF24_begin>:
{
 80015cc:	b082      	sub	sp, #8
 80015ce:	b530      	push	{r4, r5, lr}
 80015d0:	b083      	sub	sp, #12
 80015d2:	9307      	str	r3, [sp, #28]
	nrf24_PORT = nrf24PORT;
 80015d4:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <NRF24_begin+0x188>)
 80015d6:	6018      	str	r0, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <NRF24_begin+0x18c>)
 80015da:	8019      	strh	r1, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <NRF24_begin+0x190>)
 80015de:	801a      	strh	r2, [r3, #0]
	NRF24_csn(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fcf5 	bl	8000fd0 <NRF24_csn>
	NRF24_ce(0);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fd08 	bl	8000ffc <NRF24_ce>
	HAL_Delay(5);
 80015ec:	2005      	movs	r0, #5
 80015ee:	f000 fc2f 	bl	8001e50 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 80015f2:	2108      	movs	r1, #8
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fd79 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80015fa:	213f      	movs	r1, #63	; 0x3f
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd75 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001602:	2103      	movs	r1, #3
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff fd71 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800160a:	2103      	movs	r1, #3
 800160c:	4608      	mov	r0, r1
 800160e:	f7ff fd6d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001612:	2103      	movs	r1, #3
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff fd69 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800161a:	2102      	movs	r1, #2
 800161c:	2005      	movs	r0, #5
 800161e:	f7ff fd65 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001622:	210f      	movs	r1, #15
 8001624:	2006      	movs	r0, #6
 8001626:	f7ff fd61 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800162a:	210e      	movs	r1, #14
 800162c:	2007      	movs	r0, #7
 800162e:	f7ff fd5d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001632:	2100      	movs	r1, #0
 8001634:	2008      	movs	r0, #8
 8001636:	f7ff fd59 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800163a:	2100      	movs	r1, #0
 800163c:	2009      	movs	r0, #9
 800163e:	f7ff fd55 	bl	80010ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001642:	24e7      	movs	r4, #231	; 0xe7
 8001644:	f88d 4004 	strb.w	r4, [sp, #4]
 8001648:	f88d 4003 	strb.w	r4, [sp, #3]
 800164c:	f88d 4002 	strb.w	r4, [sp, #2]
 8001650:	f88d 4001 	strb.w	r4, [sp, #1]
 8001654:	ad02      	add	r5, sp, #8
 8001656:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800165a:	2205      	movs	r2, #5
 800165c:	4629      	mov	r1, r5
 800165e:	200a      	movs	r0, #10
 8001660:	f7ff fd66 	bl	8001130 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001664:	23c2      	movs	r3, #194	; 0xc2
 8001666:	f88d 3004 	strb.w	r3, [sp, #4]
 800166a:	f88d 3003 	strb.w	r3, [sp, #3]
 800166e:	f88d 3002 	strb.w	r3, [sp, #2]
 8001672:	f88d 3001 	strb.w	r3, [sp, #1]
 8001676:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800167a:	2205      	movs	r2, #5
 800167c:	4629      	mov	r1, r5
 800167e:	200b      	movs	r0, #11
 8001680:	f7ff fd56 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001684:	21c3      	movs	r1, #195	; 0xc3
 8001686:	200c      	movs	r0, #12
 8001688:	f7ff fd30 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800168c:	21c4      	movs	r1, #196	; 0xc4
 800168e:	200d      	movs	r0, #13
 8001690:	f7ff fd2c 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001694:	21c5      	movs	r1, #197	; 0xc5
 8001696:	200e      	movs	r0, #14
 8001698:	f7ff fd28 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800169c:	21c6      	movs	r1, #198	; 0xc6
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fd24 	bl	80010ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80016a4:	f88d 4004 	strb.w	r4, [sp, #4]
 80016a8:	f88d 4003 	strb.w	r4, [sp, #3]
 80016ac:	f88d 4002 	strb.w	r4, [sp, #2]
 80016b0:	f88d 4001 	strb.w	r4, [sp, #1]
 80016b4:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80016b8:	2205      	movs	r2, #5
 80016ba:	4629      	mov	r1, r5
 80016bc:	2010      	movs	r0, #16
 80016be:	f7ff fd37 	bl	8001130 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2011      	movs	r0, #17
 80016c6:	f7ff fd11 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2012      	movs	r0, #18
 80016ce:	f7ff fd0d 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	2013      	movs	r0, #19
 80016d6:	f7ff fd09 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80016da:	2100      	movs	r1, #0
 80016dc:	2014      	movs	r0, #20
 80016de:	f7ff fd05 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2015      	movs	r0, #21
 80016e6:	f7ff fd01 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2016      	movs	r0, #22
 80016ee:	f7ff fcfd 	bl	80010ec <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80016f2:	f7ff ff25 	bl	8001540 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	201c      	movs	r0, #28
 80016fa:	f7ff fcf7 	bl	80010ec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	201d      	movs	r0, #29
 8001702:	f7ff fcf3 	bl	80010ec <NRF24_write_register>
	NRF24_setRetries(15, 15);
 8001706:	210f      	movs	r1, #15
 8001708:	4608      	mov	r0, r1
 800170a:	f7ff fda1 	bl	8001250 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff fe21 	bl	8001356 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fe3d 	bl	8001394 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fe58 	bl	80013d0 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8001720:	f7ff fdff 	bl	8001322 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8001724:	2020      	movs	r0, #32
 8001726:	f7ff fda7 	bl	8001278 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fe07 	bl	800133e <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8001730:	f7ff ff28 	bl	8001584 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8001734:	f7ff fec3 	bl	80014be <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001738:	204c      	movs	r0, #76	; 0x4c
 800173a:	f7ff fd93 	bl	8001264 <NRF24_setChannel>
	NRF24_flush_tx();
 800173e:	f7ff fd51 	bl	80011e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001742:	f7ff fd55 	bl	80011f0 <NRF24_flush_rx>
	NRF24_powerDown();
 8001746:	f7ff fe56 	bl	80013f6 <NRF24_powerDown>
}
 800174a:	b003      	add	sp, #12
 800174c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001750:	b002      	add	sp, #8
 8001752:	4770      	bx	lr
 8001754:	2000020c 	.word	0x2000020c
 8001758:	2000020a 	.word	0x2000020a
 800175c:	20000208 	.word	0x20000208

08001760 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001764:	ac07      	add	r4, sp, #28
 8001766:	4dc4      	ldr	r5, [pc, #784]	; (8001a78 <printRadioSettings+0x318>)
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	f824 3b02 	strh.w	r3, [r4], #2
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800177e:	a807      	add	r0, sp, #28
 8001780:	f7fe fd46 	bl	8000210 <strlen>
 8001784:	230a      	movs	r3, #10
 8001786:	b282      	uxth	r2, r0
 8001788:	a907      	add	r1, sp, #28
 800178a:	48bc      	ldr	r0, [pc, #752]	; (8001a7c <printRadioSettings+0x31c>)
 800178c:	f003 fc23 	bl	8004fd6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fc49 	bl	8001028 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001796:	f010 0f08 	tst.w	r0, #8
 800179a:	f000 8261 	beq.w	8001c60 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800179e:	f010 0f04 	tst.w	r0, #4
 80017a2:	f000 8251 	beq.w	8001c48 <printRadioSettings+0x4e8>
 80017a6:	ac07      	add	r4, sp, #28
 80017a8:	4db5      	ldr	r5, [pc, #724]	; (8001a80 <printRadioSettings+0x320>)
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017b6:	a807      	add	r0, sp, #28
 80017b8:	f7fe fd2a 	bl	8000210 <strlen>
 80017bc:	4caf      	ldr	r4, [pc, #700]	; (8001a7c <printRadioSettings+0x31c>)
 80017be:	230a      	movs	r3, #10
 80017c0:	b282      	uxth	r2, r0
 80017c2:	a907      	add	r1, sp, #28
 80017c4:	4620      	mov	r0, r4
 80017c6:	f003 fc06 	bl	8004fd6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fc2c 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80017d4:	9303      	str	r3, [sp, #12]
 80017d6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80017ec:	f000 0201 	and.w	r2, r0, #1
 80017f0:	49a4      	ldr	r1, [pc, #656]	; (8001a84 <printRadioSettings+0x324>)
 80017f2:	a807      	add	r0, sp, #28
 80017f4:	f005 fcec 	bl	80071d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f8:	a807      	add	r0, sp, #28
 80017fa:	f7fe fd09 	bl	8000210 <strlen>
 80017fe:	230a      	movs	r3, #10
 8001800:	b282      	uxth	r2, r0
 8001802:	a907      	add	r1, sp, #28
 8001804:	4620      	mov	r0, r4
 8001806:	f003 fbe6 	bl	8004fd6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fc0c 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001810:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001814:	9303      	str	r3, [sp, #12]
 8001816:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800182c:	f000 0201 	and.w	r2, r0, #1
 8001830:	4995      	ldr	r1, [pc, #596]	; (8001a88 <printRadioSettings+0x328>)
 8001832:	a807      	add	r0, sp, #28
 8001834:	f005 fccc 	bl	80071d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001838:	a807      	add	r0, sp, #28
 800183a:	f7fe fce9 	bl	8000210 <strlen>
 800183e:	230a      	movs	r3, #10
 8001840:	b282      	uxth	r2, r0
 8001842:	a907      	add	r1, sp, #28
 8001844:	4620      	mov	r0, r4
 8001846:	f003 fbc6 	bl	8004fd6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800184a:	2003      	movs	r0, #3
 800184c:	f7ff fbec 	bl	8001028 <NRF24_read_register>
 8001850:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001854:	3202      	adds	r2, #2
 8001856:	498d      	ldr	r1, [pc, #564]	; (8001a8c <printRadioSettings+0x32c>)
 8001858:	a807      	add	r0, sp, #28
 800185a:	f005 fcb9 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185e:	a807      	add	r0, sp, #28
 8001860:	f7fe fcd6 	bl	8000210 <strlen>
 8001864:	230a      	movs	r3, #10
 8001866:	b282      	uxth	r2, r0
 8001868:	a907      	add	r1, sp, #28
 800186a:	4620      	mov	r0, r4
 800186c:	f003 fbb3 	bl	8004fd6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001870:	2005      	movs	r0, #5
 8001872:	f7ff fbd9 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001876:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800187a:	4985      	ldr	r1, [pc, #532]	; (8001a90 <printRadioSettings+0x330>)
 800187c:	a807      	add	r0, sp, #28
 800187e:	f005 fca7 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001882:	a807      	add	r0, sp, #28
 8001884:	f7fe fcc4 	bl	8000210 <strlen>
 8001888:	230a      	movs	r3, #10
 800188a:	b282      	uxth	r2, r0
 800188c:	a907      	add	r1, sp, #28
 800188e:	4620      	mov	r0, r4
 8001890:	f003 fba1 	bl	8004fd6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001894:	2006      	movs	r0, #6
 8001896:	f7ff fbc7 	bl	8001028 <NRF24_read_register>
 800189a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800189c:	f010 0f08 	tst.w	r0, #8
 80018a0:	f000 81e5 	beq.w	8001c6e <printRadioSettings+0x50e>
 80018a4:	ad07      	add	r5, sp, #28
 80018a6:	4e7b      	ldr	r6, [pc, #492]	; (8001a94 <printRadioSettings+0x334>)
 80018a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80018b0:	f845 0b04 	str.w	r0, [r5], #4
 80018b4:	f825 1b02 	strh.w	r1, [r5], #2
 80018b8:	0c09      	lsrs	r1, r1, #16
 80018ba:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	a807      	add	r0, sp, #28
 80018be:	f7fe fca7 	bl	8000210 <strlen>
 80018c2:	230a      	movs	r3, #10
 80018c4:	b282      	uxth	r2, r0
 80018c6:	a907      	add	r1, sp, #28
 80018c8:	486c      	ldr	r0, [pc, #432]	; (8001a7c <printRadioSettings+0x31c>)
 80018ca:	f003 fb84 	bl	8004fd6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80018ce:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80018d2:	2c00      	cmp	r4, #0
 80018d4:	f000 81d8 	beq.w	8001c88 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80018d8:	2c01      	cmp	r4, #1
 80018da:	f000 81dc 	beq.w	8001c96 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80018de:	2c02      	cmp	r4, #2
 80018e0:	f000 81e0 	beq.w	8001ca4 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80018e4:	2c03      	cmp	r4, #3
 80018e6:	f000 81e7 	beq.w	8001cb8 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ea:	a807      	add	r0, sp, #28
 80018ec:	f7fe fc90 	bl	8000210 <strlen>
 80018f0:	4c62      	ldr	r4, [pc, #392]	; (8001a7c <printRadioSettings+0x31c>)
 80018f2:	230a      	movs	r3, #10
 80018f4:	b282      	uxth	r2, r0
 80018f6:	a907      	add	r1, sp, #28
 80018f8:	4620      	mov	r0, r4
 80018fa:	f003 fb6c 	bl	8004fd6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80018fe:	2205      	movs	r2, #5
 8001900:	a905      	add	r1, sp, #20
 8001902:	200a      	movs	r0, #10
 8001904:	f7ff fbc2 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001908:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800190c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001910:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001914:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001918:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800191c:	9502      	str	r5, [sp, #8]
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	9100      	str	r1, [sp, #0]
 8001922:	495d      	ldr	r1, [pc, #372]	; (8001a98 <printRadioSettings+0x338>)
 8001924:	a807      	add	r0, sp, #28
 8001926:	f005 fc53 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800192a:	a807      	add	r0, sp, #28
 800192c:	f7fe fc70 	bl	8000210 <strlen>
 8001930:	230a      	movs	r3, #10
 8001932:	b282      	uxth	r2, r0
 8001934:	a907      	add	r1, sp, #28
 8001936:	4620      	mov	r0, r4
 8001938:	f003 fb4d 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800193c:	2205      	movs	r2, #5
 800193e:	a905      	add	r1, sp, #20
 8001940:	200b      	movs	r0, #11
 8001942:	f7ff fba3 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001946:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800194a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800194e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001952:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001956:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800195a:	9502      	str	r5, [sp, #8]
 800195c:	9001      	str	r0, [sp, #4]
 800195e:	9100      	str	r1, [sp, #0]
 8001960:	494e      	ldr	r1, [pc, #312]	; (8001a9c <printRadioSettings+0x33c>)
 8001962:	a807      	add	r0, sp, #28
 8001964:	f005 fc34 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001968:	a807      	add	r0, sp, #28
 800196a:	f7fe fc51 	bl	8000210 <strlen>
 800196e:	230a      	movs	r3, #10
 8001970:	b282      	uxth	r2, r0
 8001972:	a907      	add	r1, sp, #28
 8001974:	4620      	mov	r0, r4
 8001976:	f003 fb2e 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	a905      	add	r1, sp, #20
 800197e:	200c      	movs	r0, #12
 8001980:	f7ff fb84 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001984:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001988:	4945      	ldr	r1, [pc, #276]	; (8001aa0 <printRadioSettings+0x340>)
 800198a:	a807      	add	r0, sp, #28
 800198c:	f005 fc20 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001990:	a807      	add	r0, sp, #28
 8001992:	f7fe fc3d 	bl	8000210 <strlen>
 8001996:	230a      	movs	r3, #10
 8001998:	b282      	uxth	r2, r0
 800199a:	a907      	add	r1, sp, #28
 800199c:	4620      	mov	r0, r4
 800199e:	f003 fb1a 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	a905      	add	r1, sp, #20
 80019a6:	200d      	movs	r0, #13
 80019a8:	f7ff fb70 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80019b0:	493c      	ldr	r1, [pc, #240]	; (8001aa4 <printRadioSettings+0x344>)
 80019b2:	a807      	add	r0, sp, #28
 80019b4:	f005 fc0c 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b8:	a807      	add	r0, sp, #28
 80019ba:	f7fe fc29 	bl	8000210 <strlen>
 80019be:	230a      	movs	r3, #10
 80019c0:	b282      	uxth	r2, r0
 80019c2:	a907      	add	r1, sp, #28
 80019c4:	4620      	mov	r0, r4
 80019c6:	f003 fb06 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	a905      	add	r1, sp, #20
 80019ce:	200e      	movs	r0, #14
 80019d0:	f7ff fb5c 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019d4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80019d8:	4933      	ldr	r1, [pc, #204]	; (8001aa8 <printRadioSettings+0x348>)
 80019da:	a807      	add	r0, sp, #28
 80019dc:	f005 fbf8 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e0:	a807      	add	r0, sp, #28
 80019e2:	f7fe fc15 	bl	8000210 <strlen>
 80019e6:	230a      	movs	r3, #10
 80019e8:	b282      	uxth	r2, r0
 80019ea:	a907      	add	r1, sp, #28
 80019ec:	4620      	mov	r0, r4
 80019ee:	f003 faf2 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	a905      	add	r1, sp, #20
 80019f6:	200f      	movs	r0, #15
 80019f8:	f7ff fb48 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001a00:	492a      	ldr	r1, [pc, #168]	; (8001aac <printRadioSettings+0x34c>)
 8001a02:	a807      	add	r0, sp, #28
 8001a04:	f005 fbe4 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a08:	a807      	add	r0, sp, #28
 8001a0a:	f7fe fc01 	bl	8000210 <strlen>
 8001a0e:	230a      	movs	r3, #10
 8001a10:	b282      	uxth	r2, r0
 8001a12:	a907      	add	r1, sp, #28
 8001a14:	4620      	mov	r0, r4
 8001a16:	f003 fade 	bl	8004fd6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	a905      	add	r1, sp, #20
 8001a1e:	2010      	movs	r0, #16
 8001a20:	f7ff fb34 	bl	800108c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a24:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001a28:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a2c:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001a30:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001a34:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001a38:	9502      	str	r5, [sp, #8]
 8001a3a:	9001      	str	r0, [sp, #4]
 8001a3c:	9100      	str	r1, [sp, #0]
 8001a3e:	491c      	ldr	r1, [pc, #112]	; (8001ab0 <printRadioSettings+0x350>)
 8001a40:	a807      	add	r0, sp, #28
 8001a42:	f005 fbc5 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a46:	a807      	add	r0, sp, #28
 8001a48:	f7fe fbe2 	bl	8000210 <strlen>
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	b282      	uxth	r2, r0
 8001a50:	a907      	add	r1, sp, #28
 8001a52:	4620      	mov	r0, r4
 8001a54:	f003 fabf 	bl	8004fd6 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a58:	2011      	movs	r0, #17
 8001a5a:	f7ff fae5 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a5e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <printRadioSettings+0x354>)
 8001a64:	a807      	add	r0, sp, #28
 8001a66:	f005 fbb3 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a6a:	a807      	add	r0, sp, #28
 8001a6c:	f7fe fbd0 	bl	8000210 <strlen>
 8001a70:	230a      	movs	r3, #10
 8001a72:	b282      	uxth	r2, r0
 8001a74:	e020      	b.n	8001ab8 <printRadioSettings+0x358>
 8001a76:	bf00      	nop
 8001a78:	0800a050 	.word	0x0800a050
 8001a7c:	20000210 	.word	0x20000210
 8001a80:	0800a084 	.word	0x0800a084
 8001a84:	0800a0d0 	.word	0x0800a0d0
 8001a88:	0800a114 	.word	0x0800a114
 8001a8c:	0800a160 	.word	0x0800a160
 8001a90:	0800a17c 	.word	0x0800a17c
 8001a94:	0800a190 	.word	0x0800a190
 8001a98:	0800a210 	.word	0x0800a210
 8001a9c:	0800a240 	.word	0x0800a240
 8001aa0:	0800a270 	.word	0x0800a270
 8001aa4:	0800a298 	.word	0x0800a298
 8001aa8:	0800a2c0 	.word	0x0800a2c0
 8001aac:	0800a2e8 	.word	0x0800a2e8
 8001ab0:	0800a310 	.word	0x0800a310
 8001ab4:	0800a33c 	.word	0x0800a33c
 8001ab8:	a907      	add	r1, sp, #28
 8001aba:	4620      	mov	r0, r4
 8001abc:	f003 fa8b 	bl	8004fd6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f7ff fab1 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001aca:	498a      	ldr	r1, [pc, #552]	; (8001cf4 <printRadioSettings+0x594>)
 8001acc:	a807      	add	r0, sp, #28
 8001ace:	f005 fb7f 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad2:	a807      	add	r0, sp, #28
 8001ad4:	f7fe fb9c 	bl	8000210 <strlen>
 8001ad8:	230a      	movs	r3, #10
 8001ada:	b282      	uxth	r2, r0
 8001adc:	a907      	add	r1, sp, #28
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f003 fa79 	bl	8004fd6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001ae4:	2013      	movs	r0, #19
 8001ae6:	f7ff fa9f 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aea:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001aee:	4982      	ldr	r1, [pc, #520]	; (8001cf8 <printRadioSettings+0x598>)
 8001af0:	a807      	add	r0, sp, #28
 8001af2:	f005 fb6d 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001af6:	a807      	add	r0, sp, #28
 8001af8:	f7fe fb8a 	bl	8000210 <strlen>
 8001afc:	230a      	movs	r3, #10
 8001afe:	b282      	uxth	r2, r0
 8001b00:	a907      	add	r1, sp, #28
 8001b02:	4620      	mov	r0, r4
 8001b04:	f003 fa67 	bl	8004fd6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001b08:	2014      	movs	r0, #20
 8001b0a:	f7ff fa8d 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b12:	497a      	ldr	r1, [pc, #488]	; (8001cfc <printRadioSettings+0x59c>)
 8001b14:	a807      	add	r0, sp, #28
 8001b16:	f005 fb5b 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	a807      	add	r0, sp, #28
 8001b1c:	f7fe fb78 	bl	8000210 <strlen>
 8001b20:	230a      	movs	r3, #10
 8001b22:	b282      	uxth	r2, r0
 8001b24:	a907      	add	r1, sp, #28
 8001b26:	4620      	mov	r0, r4
 8001b28:	f003 fa55 	bl	8004fd6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001b2c:	2015      	movs	r0, #21
 8001b2e:	f7ff fa7b 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b32:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b36:	4972      	ldr	r1, [pc, #456]	; (8001d00 <printRadioSettings+0x5a0>)
 8001b38:	a807      	add	r0, sp, #28
 8001b3a:	f005 fb49 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b3e:	a807      	add	r0, sp, #28
 8001b40:	f7fe fb66 	bl	8000210 <strlen>
 8001b44:	230a      	movs	r3, #10
 8001b46:	b282      	uxth	r2, r0
 8001b48:	a907      	add	r1, sp, #28
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f003 fa43 	bl	8004fd6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001b50:	2016      	movs	r0, #22
 8001b52:	f7ff fa69 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b56:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001b5a:	496a      	ldr	r1, [pc, #424]	; (8001d04 <printRadioSettings+0x5a4>)
 8001b5c:	a807      	add	r0, sp, #28
 8001b5e:	f005 fb37 	bl	80071d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b62:	a807      	add	r0, sp, #28
 8001b64:	f7fe fb54 	bl	8000210 <strlen>
 8001b68:	230a      	movs	r3, #10
 8001b6a:	b282      	uxth	r2, r0
 8001b6c:	a907      	add	r1, sp, #28
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f003 fa31 	bl	8004fd6 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b74:	201c      	movs	r0, #28
 8001b76:	f7ff fa57 	bl	8001028 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b7a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001b7e:	9303      	str	r3, [sp, #12]
 8001b80:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001b96:	f000 0201 	and.w	r2, r0, #1
 8001b9a:	495b      	ldr	r1, [pc, #364]	; (8001d08 <printRadioSettings+0x5a8>)
 8001b9c:	a807      	add	r0, sp, #28
 8001b9e:	f005 fb17 	bl	80071d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba2:	a807      	add	r0, sp, #28
 8001ba4:	f7fe fb34 	bl	8000210 <strlen>
 8001ba8:	230a      	movs	r3, #10
 8001baa:	b282      	uxth	r2, r0
 8001bac:	a907      	add	r1, sp, #28
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f003 fa11 	bl	8004fd6 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001bb4:	201d      	movs	r0, #29
 8001bb6:	f7ff fa37 	bl	8001028 <NRF24_read_register>
 8001bba:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001bbc:	f010 0f04 	tst.w	r0, #4
 8001bc0:	f000 8081 	beq.w	8001cc6 <printRadioSettings+0x566>
 8001bc4:	ac07      	add	r4, sp, #28
 8001bc6:	4d51      	ldr	r5, [pc, #324]	; (8001d0c <printRadioSettings+0x5ac>)
 8001bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bd0:	f844 0b04 	str.w	r0, [r4], #4
 8001bd4:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bd6:	a807      	add	r0, sp, #28
 8001bd8:	f7fe fb1a 	bl	8000210 <strlen>
 8001bdc:	230a      	movs	r3, #10
 8001bde:	b282      	uxth	r2, r0
 8001be0:	a907      	add	r1, sp, #28
 8001be2:	484b      	ldr	r0, [pc, #300]	; (8001d10 <printRadioSettings+0x5b0>)
 8001be4:	f003 f9f7 	bl	8004fd6 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001be8:	f016 0f02 	tst.w	r6, #2
 8001bec:	d178      	bne.n	8001ce0 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001bee:	ac07      	add	r4, sp, #28
 8001bf0:	4d48      	ldr	r5, [pc, #288]	; (8001d14 <printRadioSettings+0x5b4>)
 8001bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bfa:	c403      	stmia	r4!, {r0, r1}
 8001bfc:	f824 2b02 	strh.w	r2, [r4], #2
 8001c00:	0c12      	lsrs	r2, r2, #16
 8001c02:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c04:	a807      	add	r0, sp, #28
 8001c06:	f7fe fb03 	bl	8000210 <strlen>
 8001c0a:	4e41      	ldr	r6, [pc, #260]	; (8001d10 <printRadioSettings+0x5b0>)
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	b282      	uxth	r2, r0
 8001c10:	a907      	add	r1, sp, #28
 8001c12:	4630      	mov	r0, r6
 8001c14:	f003 f9df 	bl	8004fd6 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001c18:	ac07      	add	r4, sp, #28
 8001c1a:	4d3f      	ldr	r5, [pc, #252]	; (8001d18 <printRadioSettings+0x5b8>)
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	f824 3b02 	strh.w	r3, [r4], #2
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c32:	a807      	add	r0, sp, #28
 8001c34:	f7fe faec 	bl	8000210 <strlen>
 8001c38:	230a      	movs	r3, #10
 8001c3a:	b282      	uxth	r2, r0
 8001c3c:	a907      	add	r1, sp, #28
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f003 f9c9 	bl	8004fd6 <HAL_UART_Transmit>
}
 8001c44:	b020      	add	sp, #128	; 0x80
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001c48:	ac07      	add	r4, sp, #28
 8001c4a:	4d34      	ldr	r5, [pc, #208]	; (8001d1c <printRadioSettings+0x5bc>)
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c54:	c403      	stmia	r4!, {r0, r1}
 8001c56:	f824 2b02 	strh.w	r2, [r4], #2
 8001c5a:	0c12      	lsrs	r2, r2, #16
 8001c5c:	7022      	strb	r2, [r4, #0]
 8001c5e:	e5aa      	b.n	80017b6 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001c60:	ac07      	add	r4, sp, #28
 8001c62:	4d2f      	ldr	r5, [pc, #188]	; (8001d20 <printRadioSettings+0x5c0>)
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	6023      	str	r3, [r4, #0]
 8001c6c:	e5a3      	b.n	80017b6 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001c6e:	ad07      	add	r5, sp, #28
 8001c70:	4e2c      	ldr	r6, [pc, #176]	; (8001d24 <printRadioSettings+0x5c4>)
 8001c72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001c7a:	f845 0b04 	str.w	r0, [r5], #4
 8001c7e:	f825 1b02 	strh.w	r1, [r5], #2
 8001c82:	0c09      	lsrs	r1, r1, #16
 8001c84:	7029      	strb	r1, [r5, #0]
 8001c86:	e619      	b.n	80018bc <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001c88:	ac07      	add	r4, sp, #28
 8001c8a:	4d27      	ldr	r5, [pc, #156]	; (8001d28 <printRadioSettings+0x5c8>)
 8001c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	6023      	str	r3, [r4, #0]
 8001c94:	e629      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001c96:	ac07      	add	r4, sp, #28
 8001c98:	4d24      	ldr	r5, [pc, #144]	; (8001d2c <printRadioSettings+0x5cc>)
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	e622      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001ca4:	ac07      	add	r4, sp, #28
 8001ca6:	4d22      	ldr	r5, [pc, #136]	; (8001d30 <printRadioSettings+0x5d0>)
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	f824 3b02 	strh.w	r3, [r4], #2
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	7023      	strb	r3, [r4, #0]
 8001cb6:	e618      	b.n	80018ea <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001cb8:	ac07      	add	r4, sp, #28
 8001cba:	4d1e      	ldr	r5, [pc, #120]	; (8001d34 <printRadioSettings+0x5d4>)
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	8023      	strh	r3, [r4, #0]
 8001cc4:	e611      	b.n	80018ea <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001cc6:	ac07      	add	r4, sp, #28
 8001cc8:	4d1b      	ldr	r5, [pc, #108]	; (8001d38 <printRadioSettings+0x5d8>)
 8001cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cd2:	f844 0b04 	str.w	r0, [r4], #4
 8001cd6:	f824 1b02 	strh.w	r1, [r4], #2
 8001cda:	0c09      	lsrs	r1, r1, #16
 8001cdc:	7021      	strb	r1, [r4, #0]
 8001cde:	e77a      	b.n	8001bd6 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ce0:	ac07      	add	r4, sp, #28
 8001ce2:	4d16      	ldr	r5, [pc, #88]	; (8001d3c <printRadioSettings+0x5dc>)
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cec:	c403      	stmia	r4!, {r0, r1}
 8001cee:	8022      	strh	r2, [r4, #0]
 8001cf0:	e788      	b.n	8001c04 <printRadioSettings+0x4a4>
 8001cf2:	bf00      	nop
 8001cf4:	0800a358 	.word	0x0800a358
 8001cf8:	0800a374 	.word	0x0800a374
 8001cfc:	0800a390 	.word	0x0800a390
 8001d00:	0800a3ac 	.word	0x0800a3ac
 8001d04:	0800a3c8 	.word	0x0800a3c8
 8001d08:	0800a3e4 	.word	0x0800a3e4
 8001d0c:	0800a430 	.word	0x0800a430
 8001d10:	20000210 	.word	0x20000210
 8001d14:	0800a47c 	.word	0x0800a47c
 8001d18:	0800a050 	.word	0x0800a050
 8001d1c:	0800a0a0 	.word	0x0800a0a0
 8001d20:	0800a0bc 	.word	0x0800a0bc
 8001d24:	0800a1a8 	.word	0x0800a1a8
 8001d28:	0800a1c0 	.word	0x0800a1c0
 8001d2c:	0800a1d4 	.word	0x0800a1d4
 8001d30:	0800a1e8 	.word	0x0800a1e8
 8001d34:	0800a1fc 	.word	0x0800a1fc
 8001d38:	0800a448 	.word	0x0800a448
 8001d3c:	0800a460 	.word	0x0800a460

08001d40 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001d40:	b084      	sub	sp, #16
 8001d42:	b508      	push	{r3, lr}
 8001d44:	f10d 0c08 	add.w	ip, sp, #8
 8001d48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	4661      	mov	r1, ip
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <nrf24_DebugUART_Init+0x20>)
 8001d52:	f004 fbe5 	bl	8006520 <memcpy>
}
 8001d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d5a:	b004      	add	sp, #16
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000210 	.word	0x20000210

08001d64 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_TxCplt = 1;
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_SPI_TxCpltCallback+0x8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000205 	.word	0x20000205

08001d70 <HAL_SPI_RxCpltCallback>:



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_RxCplt = 1;
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <HAL_SPI_RxCpltCallback+0x8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
}
 8001d76:	4770      	bx	lr
 8001d78:	20000204 	.word	0x20000204

08001d7c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <DWT_Init+0x20>)
 8001d7e:	68d3      	ldr	r3, [r2, #12]
 8001d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d84:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <DWT_Init+0x24>)
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <DWT_Init+0x28>)
 8001d8a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000edf0 	.word	0xe000edf0
 8001da0:	e0001000 	.word	0xe0001000
 8001da4:	c5acce55 	.word	0xc5acce55

08001da8 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <DWT_Delay+0x20>)
 8001daa:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <DWT_Delay+0x24>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <DWT_Delay+0x28>)
 8001db2:	fba1 1303 	umull	r1, r3, r1, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <DWT_Delay+0x20>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	4283      	cmp	r3, r0
 8001dc4:	d3fa      	bcc.n	8001dbc <DWT_Delay+0x14>
}
 8001dc6:	4770      	bx	lr
 8001dc8:	e0001000 	.word	0xe0001000
 8001dcc:	20000014 	.word	0x20000014
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_InitTick+0x40>)
 8001dda:	7818      	ldrb	r0, [r3, #0]
 8001ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_InitTick+0x44>)
 8001de6:	6810      	ldr	r0, [r2, #0]
 8001de8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dec:	f000 fb6c 	bl	80024c8 <HAL_SYSTICK_Config>
 8001df0:	b968      	cbnz	r0, 8001e0e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	2c0f      	cmp	r4, #15
 8001df4:	d901      	bls.n	8001dfa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
 8001df8:	e00a      	b.n	8001e10 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e02:	f000 fb21 	bl	8002448 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_InitTick+0x48>)
 8001e08:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
}
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000014 	.word	0x20000014
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_Init>:
{
 8001e20:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001e22:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x20>)
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 faf9 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff ffce 	bl	8001dd4 <HAL_InitTick>
  HAL_MspInit();
 8001e38:	f004 f834 	bl	8005ea4 <HAL_MspInit>
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	bd08      	pop	{r3, pc}
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e44:	4b01      	ldr	r3, [pc, #4]	; (8001e4c <HAL_GetTick+0x8>)
 8001e46:	6818      	ldr	r0, [r3, #0]
}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000328 	.word	0x20000328

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fff6 	bl	8001e44 <HAL_GetTick>
 8001e58:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001e5e:	d002      	beq.n	8001e66 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_Delay+0x24>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	f7ff ffed 	bl	8001e44 <HAL_GetTick>
 8001e6a:	1b40      	subs	r0, r0, r5
 8001e6c:	42a0      	cmp	r0, r4
 8001e6e:	d3fa      	bcc.n	8001e66 <HAL_Delay+0x16>
  {
  }
}
 8001e70:	bd38      	pop	{r3, r4, r5, pc}
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <ADC_Init+0x12c>)
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e80:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	6841      	ldr	r1, [r0, #4]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8a:	6802      	ldr	r2, [r0, #0]
 8001e8c:	6853      	ldr	r3, [r2, #4]
 8001e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e92:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e94:	6802      	ldr	r2, [r0, #0]
 8001e96:	6853      	ldr	r3, [r2, #4]
 8001e98:	6901      	ldr	r1, [r0, #16]
 8001e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e9e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea0:	6802      	ldr	r2, [r0, #0]
 8001ea2:	6853      	ldr	r3, [r2, #4]
 8001ea4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ea8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	6853      	ldr	r3, [r2, #4]
 8001eae:	6881      	ldr	r1, [r0, #8]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	6893      	ldr	r3, [r2, #8]
 8001eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ebc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ebe:	6802      	ldr	r2, [r0, #0]
 8001ec0:	6893      	ldr	r3, [r2, #8]
 8001ec2:	68c1      	ldr	r1, [r0, #12]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <ADC_Init+0x130>)
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d04b      	beq.n	8001f68 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	6893      	ldr	r3, [r2, #8]
 8001ed4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ed8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	6893      	ldr	r3, [r2, #8]
 8001ede:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee4:	6802      	ldr	r2, [r0, #0]
 8001ee6:	6893      	ldr	r3, [r2, #8]
 8001ee8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001eec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eee:	6802      	ldr	r2, [r0, #0]
 8001ef0:	6893      	ldr	r3, [r2, #8]
 8001ef2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ef8:	6802      	ldr	r2, [r0, #0]
 8001efa:	6893      	ldr	r3, [r2, #8]
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f02:	6802      	ldr	r2, [r0, #0]
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	6981      	ldr	r1, [r0, #24]
 8001f08:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001f0c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d133      	bne.n	8001f7e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f16:	6802      	ldr	r2, [r0, #0]
 8001f18:	6853      	ldr	r3, [r2, #4]
 8001f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f1e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f20:	6802      	ldr	r2, [r0, #0]
 8001f22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f28:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f2a:	6801      	ldr	r1, [r0, #0]
 8001f2c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f2e:	69c2      	ldr	r2, [r0, #28]
 8001f30:	3a01      	subs	r2, #1
 8001f32:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f36:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	6893      	ldr	r3, [r2, #8]
 8001f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f42:	6802      	ldr	r2, [r0, #0]
 8001f44:	6893      	ldr	r3, [r2, #8]
 8001f46:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001f4a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001f4e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	6893      	ldr	r3, [r2, #8]
 8001f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f58:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	6893      	ldr	r3, [r2, #8]
 8001f5e:	6941      	ldr	r1, [r0, #20]
 8001f60:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001f64:	6093      	str	r3, [r2, #8]
}
 8001f66:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6893      	ldr	r3, [r2, #8]
 8001f6c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	6893      	ldr	r3, [r2, #8]
 8001f76:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f7a:	6093      	str	r3, [r2, #8]
 8001f7c:	e7bc      	b.n	8001ef8 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	6853      	ldr	r3, [r2, #4]
 8001f82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f86:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f88:	6802      	ldr	r2, [r0, #0]
 8001f8a:	6853      	ldr	r3, [r2, #4]
 8001f8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f90:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f92:	6801      	ldr	r1, [r0, #0]
 8001f94:	684b      	ldr	r3, [r1, #4]
 8001f96:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f98:	3a01      	subs	r2, #1
 8001f9a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	e7be      	b.n	8001f20 <ADC_Init+0xa8>
 8001fa2:	bf00      	nop
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	0f000001 	.word	0x0f000001

08001fac <HAL_ADC_Init>:
  if(hadc == NULL)
 8001fac:	b328      	cbz	r0, 8001ffa <HAL_ADC_Init+0x4e>
{
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fb4:	b143      	cbz	r3, 8001fc8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb8:	f013 0f10 	tst.w	r3, #16
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001fc6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001fc8:	f003 ff84 	bl	8005ed4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001fd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001fd4:	e7ef      	b.n	8001fb6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_ADC_Init+0x54>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ff48 	bl	8001e78 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6423      	str	r3, [r4, #64]	; 0x40
 8001ff8:	e7e2      	b.n	8001fc0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	ffffeefd 	.word	0xffffeefd

08002004 <HAL_ADC_Start>:
{
 8002004:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800200a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d073      	beq.n	80020fa <HAL_ADC_Start+0xf6>
 8002012:	2301      	movs	r3, #1
 8002014:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	f012 0f01 	tst.w	r2, #1
 8002020:	d113      	bne.n	800204a <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_ADC_Start+0x10c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_ADC_Start+0x110>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800203a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800203c:	e002      	b.n	8002044 <HAL_ADC_Start+0x40>
      counter--;
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	3b01      	subs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800204a:	6802      	ldr	r2, [r0, #0]
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	f013 0f01 	tst.w	r3, #1
 8002052:	d054      	beq.n	80020fe <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_ADC_Start+0x114>)
 8002058:	400b      	ands	r3, r1
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002060:	6853      	ldr	r3, [r2, #4]
 8002062:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002066:	d005      	beq.n	8002074 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002068:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800206a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800206e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002072:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002076:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800207a:	d019      	beq.n	80020b0 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800207c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800207e:	f023 0306 	bic.w	r3, r3, #6
 8002082:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002084:	2300      	movs	r3, #0
 8002086:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800208a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 800208e:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_ADC_Start+0x118>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f013 0f1f 	tst.w	r3, #31
 8002098:	d10d      	bne.n	80020b6 <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020a2:	d12f      	bne.n	8002104 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e027      	b.n	8002100 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 80020b0:	2300      	movs	r3, #0
 80020b2:	6443      	str	r3, [r0, #68]	; 0x44
 80020b4:	e7e6      	b.n	8002084 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020b6:	6803      	ldr	r3, [r0, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_ADC_Start+0x11c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_ADC_Start+0x118>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f013 0f10 	tst.w	r3, #16
 80020c6:	d11f      	bne.n	8002108 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_ADC_Start+0x120>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00a      	beq.n	80020e6 <HAL_ADC_Start+0xe2>
  return HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	e015      	b.n	8002100 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020da:	d1f0      	bne.n	80020be <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e7eb      	b.n	80020be <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020ec:	d10e      	bne.n	800210c <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020f6:	2000      	movs	r0, #0
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 80020fa:	2002      	movs	r0, #2
 80020fc:	e000      	b.n	8002100 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 80020fe:	2000      	movs	r0, #0
}
 8002100:	b002      	add	sp, #8
 8002102:	4770      	bx	lr
  return HAL_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	e7fb      	b.n	8002100 <HAL_ADC_Start+0xfc>
 8002108:	2000      	movs	r0, #0
 800210a:	e7f9      	b.n	8002100 <HAL_ADC_Start+0xfc>
 800210c:	2000      	movs	r0, #0
 800210e:	e7f7      	b.n	8002100 <HAL_ADC_Start+0xfc>
 8002110:	20000014 	.word	0x20000014
 8002114:	431bde83 	.word	0x431bde83
 8002118:	fffff8fe 	.word	0xfffff8fe
 800211c:	40012300 	.word	0x40012300
 8002120:	40012000 	.word	0x40012000
 8002124:	40012200 	.word	0x40012200

08002128 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002128:	4770      	bx	lr

0800212a <HAL_ADC_IRQHandler>:
{
 800212a:	b538      	push	{r3, r4, r5, lr}
 800212c:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800212e:	6801      	ldr	r1, [r0, #0]
 8002130:	680a      	ldr	r2, [r1, #0]
 8002132:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002136:	684b      	ldr	r3, [r1, #4]
 8002138:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 800213c:	421a      	tst	r2, r3
 800213e:	d02c      	beq.n	800219a <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002140:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002142:	f013 0f10 	tst.w	r3, #16
 8002146:	d103      	bne.n	8002150 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002148:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002150:	688b      	ldr	r3, [r1, #8]
 8002152:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8002156:	d119      	bne.n	800218c <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002158:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215a:	b9bb      	cbnz	r3, 800218c <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002162:	d003      	beq.n	800216c <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002164:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002166:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800216a:	d10f      	bne.n	800218c <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800216c:	684b      	ldr	r3, [r1, #4]
 800216e:	f023 0320 	bic.w	r3, r3, #32
 8002172:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800217c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800217e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002182:	d103      	bne.n	800218c <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800218c:	4620      	mov	r0, r4
 800218e:	f003 fde1 	bl	8005d54 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	f06f 0212 	mvn.w	r2, #18
 8002198:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 80021a8:	4211      	tst	r1, r2
 80021aa:	d034      	beq.n	8002216 <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021ae:	f012 0f10 	tst.w	r2, #16
 80021b2:	d103      	bne.n	80021bc <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ba:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80021c2:	d121      	bne.n	8002208 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80021c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021c6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80021ca:	d003      	beq.n	80021d4 <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021cc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80021ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80021d2:	d119      	bne.n	8002208 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021d4:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021d6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80021da:	d115      	bne.n	8002208 <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021dc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021de:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80021e2:	d111      	bne.n	8002208 <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80021e4:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021e6:	b97a      	cbnz	r2, 8002208 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ee:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021fe:	d103      	bne.n	8002208 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002208:	4620      	mov	r0, r4
 800220a:	f000 f909 	bl	8002420 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	f06f 020c 	mvn.w	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800221a:	6853      	ldr	r3, [r2, #4]
 800221c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8002220:	4219      	tst	r1, r3
 8002222:	d003      	beq.n	800222c <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	f013 0f01 	tst.w	r3, #1
 800222a:	d109      	bne.n	8002240 <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800222c:	6821      	ldr	r1, [r4, #0]
 800222e:	680a      	ldr	r2, [r1, #0]
 8002230:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002234:	684b      	ldr	r3, [r1, #4]
 8002236:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 800223a:	421a      	tst	r2, r3
 800223c:	d10c      	bne.n	8002258 <HAL_ADC_IRQHandler+0x12e>
}
 800223e:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ff6d 	bl	8002128 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f06f 0201 	mvn.w	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e7e9      	b.n	800222c <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002258:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002260:	f06f 0520 	mvn.w	r5, #32
 8002264:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002266:	4620      	mov	r0, r4
 8002268:	f003 fd75 	bl	8005d56 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	601d      	str	r5, [r3, #0]
}
 8002270:	e7e5      	b.n	800223e <HAL_ADC_IRQHandler+0x114>
	...

08002274 <HAL_ADC_ConfigChannel>:
{
 8002274:	b430      	push	{r4, r5}
 8002276:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800227c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	f000 80c0 	beq.w	8002406 <HAL_ADC_ConfigChannel+0x192>
 8002286:	2301      	movs	r3, #1
 8002288:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	2b09      	cmp	r3, #9
 8002290:	d922      	bls.n	80022d8 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002292:	6805      	ldr	r5, [r0, #0]
 8002294:	68ea      	ldr	r2, [r5, #12]
 8002296:	b29b      	uxth	r3, r3
 8002298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800229c:	3b1e      	subs	r3, #30
 800229e:	2407      	movs	r4, #7
 80022a0:	fa04 f303 	lsl.w	r3, r4, r3
 80022a4:	ea22 0303 	bic.w	r3, r2, r3
 80022a8:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022aa:	680b      	ldr	r3, [r1, #0]
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_ADC_ConfigChannel+0x198>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00b      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b2:	6805      	ldr	r5, [r0, #0]
 80022b4:	68ea      	ldr	r2, [r5, #12]
 80022b6:	688c      	ldr	r4, [r1, #8]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022be:	3b1e      	subs	r3, #30
 80022c0:	fa04 f303 	lsl.w	r3, r4, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60eb      	str	r3, [r5, #12]
 80022c8:	e01b      	b.n	8002302 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022ca:	6802      	ldr	r2, [r0, #0]
 80022cc:	68d3      	ldr	r3, [r2, #12]
 80022ce:	688c      	ldr	r4, [r1, #8]
 80022d0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e014      	b.n	8002302 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022d8:	6805      	ldr	r5, [r0, #0]
 80022da:	692a      	ldr	r2, [r5, #16]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022e2:	2407      	movs	r4, #7
 80022e4:	fa04 f303 	lsl.w	r3, r4, r3
 80022e8:	ea22 0303 	bic.w	r3, r2, r3
 80022ec:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ee:	6805      	ldr	r5, [r0, #0]
 80022f0:	692a      	ldr	r2, [r5, #16]
 80022f2:	688c      	ldr	r4, [r1, #8]
 80022f4:	880b      	ldrh	r3, [r1, #0]
 80022f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022fa:	fa04 f303 	lsl.w	r3, r4, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8002302:	684b      	ldr	r3, [r1, #4]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d824      	bhi.n	8002352 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002308:	6805      	ldr	r5, [r0, #0]
 800230a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800230c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002310:	3b05      	subs	r3, #5
 8002312:	241f      	movs	r4, #31
 8002314:	fa04 f303 	lsl.w	r3, r4, r3
 8002318:	ea22 0303 	bic.w	r3, r2, r3
 800231c:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800231e:	6805      	ldr	r5, [r0, #0]
 8002320:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002322:	684b      	ldr	r3, [r1, #4]
 8002324:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002328:	3b05      	subs	r3, #5
 800232a:	880c      	ldrh	r4, [r1, #0]
 800232c:	fa04 f303 	lsl.w	r3, r4, r3
 8002330:	4313      	orrs	r3, r2
 8002332:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_ADC_ConfigChannel+0x19c>)
 8002338:	429a      	cmp	r2, r3
 800233a:	d03a      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800233c:	6802      	ldr	r2, [r0, #0]
 800233e:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_ADC_ConfigChannel+0x19c>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d03f      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002344:	2300      	movs	r3, #0
 8002346:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800234a:	4618      	mov	r0, r3
}
 800234c:	b002      	add	sp, #8
 800234e:	bc30      	pop	{r4, r5}
 8002350:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d816      	bhi.n	8002384 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002356:	6805      	ldr	r5, [r0, #0]
 8002358:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800235a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800235e:	3b23      	subs	r3, #35	; 0x23
 8002360:	241f      	movs	r4, #31
 8002362:	fa04 f303 	lsl.w	r3, r4, r3
 8002366:	ea22 0303 	bic.w	r3, r2, r3
 800236a:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800236c:	6805      	ldr	r5, [r0, #0]
 800236e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002370:	684b      	ldr	r3, [r1, #4]
 8002372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002376:	3b23      	subs	r3, #35	; 0x23
 8002378:	880c      	ldrh	r4, [r1, #0]
 800237a:	fa04 f303 	lsl.w	r3, r4, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	632b      	str	r3, [r5, #48]	; 0x30
 8002382:	e7d7      	b.n	8002334 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002384:	6805      	ldr	r5, [r0, #0]
 8002386:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800238c:	3b41      	subs	r3, #65	; 0x41
 800238e:	241f      	movs	r4, #31
 8002390:	fa04 f303 	lsl.w	r3, r4, r3
 8002394:	ea22 0303 	bic.w	r3, r2, r3
 8002398:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239a:	6805      	ldr	r5, [r0, #0]
 800239c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800239e:	684b      	ldr	r3, [r1, #4]
 80023a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023a4:	3b41      	subs	r3, #65	; 0x41
 80023a6:	880c      	ldrh	r4, [r1, #0]
 80023a8:	fa04 f303 	lsl.w	r3, r4, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	62eb      	str	r3, [r5, #44]	; 0x2c
 80023b0:	e7c0      	b.n	8002334 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023b2:	680b      	ldr	r3, [r1, #0]
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d1c1      	bne.n	800233c <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_ADC_ConfigChannel+0x1a0>)
 80023ba:	6853      	ldr	r3, [r2, #4]
 80023bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c0:	6053      	str	r3, [r2, #4]
 80023c2:	e7bb      	b.n	800233c <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c4:	680b      	ldr	r3, [r1, #0]
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_ADC_ConfigChannel+0x198>)
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	bf18      	it	ne
 80023cc:	4293      	cmpne	r3, r2
 80023ce:	d1b9      	bne.n	8002344 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023d0:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_ADC_ConfigChannel+0x1a0>)
 80023d2:	6853      	ldr	r3, [r2, #4]
 80023d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d8:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023da:	680a      	ldr	r2, [r1, #0]
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_ADC_ConfigChannel+0x198>)
 80023de:	429a      	cmp	r2, r3
 80023e0:	d1b0      	bne.n	8002344 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_ADC_ConfigChannel+0x1a4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_ADC_ConfigChannel+0x1a8>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023f2:	005a      	lsls	r2, r3, #1
 80023f4:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80023f6:	e002      	b.n	80023fe <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80023f8:	9b01      	ldr	r3, [sp, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80023fe:	9b01      	ldr	r3, [sp, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x184>
 8002404:	e79e      	b.n	8002344 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8002406:	2002      	movs	r0, #2
 8002408:	e7a0      	b.n	800234c <HAL_ADC_ConfigChannel+0xd8>
 800240a:	bf00      	nop
 800240c:	10000012 	.word	0x10000012
 8002410:	40012000 	.word	0x40012000
 8002414:	40012300 	.word	0x40012300
 8002418:	20000014 	.word	0x20000014
 800241c:	431bde83 	.word	0x431bde83

08002420 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002420:	4770      	bx	lr
	...

08002424 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4906      	ldr	r1, [pc, #24]	; (8002440 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002426:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002428:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	0200      	lsls	r0, r0, #8
 8002432:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002436:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002438:	4a02      	ldr	r2, [pc, #8]	; (8002444 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800243a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800243c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00
 8002444:	05fa0000 	.word	0x05fa0000

08002448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002448:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_NVIC_SetPriority+0x58>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002452:	f1c3 0407 	rsb	r4, r3, #7
 8002456:	2c04      	cmp	r4, #4
 8002458:	bf28      	it	cs
 800245a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245c:	1d1d      	adds	r5, r3, #4
 800245e:	2d06      	cmp	r5, #6
 8002460:	d914      	bls.n	800248c <HAL_NVIC_SetPriority+0x44>
 8002462:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002468:	fa05 f404 	lsl.w	r4, r5, r4
 800246c:	ea21 0104 	bic.w	r1, r1, r4
 8002470:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002472:	fa05 f303 	lsl.w	r3, r5, r3
 8002476:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800247c:	2800      	cmp	r0, #0
 800247e:	db07      	blt.n	8002490 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	0109      	lsls	r1, r1, #4
 8002482:	b2c9      	uxtb	r1, r1
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_NVIC_SetPriority+0x5c>)
 8002486:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002488:	bc30      	pop	{r4, r5}
 800248a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248c:	2300      	movs	r3, #0
 800248e:	e7e9      	b.n	8002464 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	f000 000f 	and.w	r0, r0, #15
 8002494:	0109      	lsls	r1, r1, #4
 8002496:	b2c9      	uxtb	r1, r1
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_NVIC_SetPriority+0x60>)
 800249a:	5419      	strb	r1, [r3, r0]
 800249c:	e7f4      	b.n	8002488 <HAL_NVIC_SetPriority+0x40>
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00
 80024a4:	e000e400 	.word	0xe000e400
 80024a8:	e000ed14 	.word	0xe000ed14

080024ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	db07      	blt.n	80024c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b0:	f000 021f 	and.w	r2, r0, #31
 80024b4:	0940      	lsrs	r0, r0, #5
 80024b6:	2301      	movs	r3, #1
 80024b8:	4093      	lsls	r3, r2
 80024ba:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <HAL_NVIC_EnableIRQ+0x18>)
 80024bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	3801      	subs	r0, #1
 80024ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024ce:	d20a      	bcs.n	80024e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_SYSTICK_Config+0x24>)
 80024d2:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_SYSTICK_Config+0x28>)
 80024d6:	21f0      	movs	r1, #240	; 0xf0
 80024d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	2000      	movs	r0, #0
 80024de:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d038      	beq.n	800256a <HAL_CRC_Init+0x76>
{
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024fc:	7f43      	ldrb	r3, [r0, #29]
 80024fe:	b31b      	cbz	r3, 8002548 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002500:	2302      	movs	r3, #2
 8002502:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002504:	7923      	ldrb	r3, [r4, #4]
 8002506:	bb1b      	cbnz	r3, 8002550 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_CRC_Init+0x7c>)
 800250c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6893      	ldr	r3, [r2, #8]
 8002512:	f023 0318 	bic.w	r3, r3, #24
 8002516:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002518:	7963      	ldrb	r3, [r4, #5]
 800251a:	bb13      	cbnz	r3, 8002562 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002522:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	6893      	ldr	r3, [r2, #8]
 8002528:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800252c:	6961      	ldr	r1, [r4, #20]
 800252e:	430b      	orrs	r3, r1
 8002530:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6893      	ldr	r3, [r2, #8]
 8002536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253a:	69a1      	ldr	r1, [r4, #24]
 800253c:	430b      	orrs	r3, r1
 800253e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002540:	2301      	movs	r3, #1
 8002542:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002548:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800254a:	f003 fd33 	bl	8005fb4 <HAL_CRC_MspInit>
 800254e:	e7d7      	b.n	8002500 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002550:	68e2      	ldr	r2, [r4, #12]
 8002552:	68a1      	ldr	r1, [r4, #8]
 8002554:	4620      	mov	r0, r4
 8002556:	f000 f80d 	bl	8002574 <HAL_CRCEx_Polynomial_Set>
 800255a:	2800      	cmp	r0, #0
 800255c:	d0dc      	beq.n	8002518 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800255e:	2001      	movs	r0, #1
 8002560:	e7f1      	b.n	8002546 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	6922      	ldr	r2, [r4, #16]
 8002566:	611a      	str	r2, [r3, #16]
 8002568:	e7dc      	b.n	8002524 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	04c11db7 	.word	0x04c11db7

08002574 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002574:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002576:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002578:	1e65      	subs	r5, r4, #1
 800257a:	b13c      	cbz	r4, 800258c <HAL_CRCEx_Polynomial_Set+0x18>
 800257c:	f005 031f 	and.w	r3, r5, #31
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
 8002584:	462c      	mov	r4, r5
 8002586:	f013 0f01 	tst.w	r3, #1
 800258a:	d0f5      	beq.n	8002578 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800258c:	2a18      	cmp	r2, #24
 800258e:	d823      	bhi.n	80025d8 <HAL_CRCEx_Polynomial_Set+0x64>
 8002590:	e8df f002 	tbb	[pc, r2]
 8002594:	2222220f 	.word	0x2222220f
 8002598:	22222222 	.word	0x22222222
 800259c:	2222221e 	.word	0x2222221e
 80025a0:	22222222 	.word	0x22222222
 80025a4:	2222221a 	.word	0x2222221a
 80025a8:	22222222 	.word	0x22222222
 80025ac:	0d          	.byte	0x0d
 80025ad:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80025ae:	2d06      	cmp	r5, #6
 80025b0:	d814      	bhi.n	80025dc <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	688b      	ldr	r3, [r1, #8]
 80025ba:	f023 0318 	bic.w	r3, r3, #24
 80025be:	431a      	orrs	r2, r3
 80025c0:	608a      	str	r2, [r1, #8]
 80025c2:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80025c4:	bc30      	pop	{r4, r5}
 80025c6:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 80025c8:	2d07      	cmp	r5, #7
 80025ca:	d9f2      	bls.n	80025b2 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e7f9      	b.n	80025c4 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 80025d0:	2d0f      	cmp	r5, #15
 80025d2:	d9ee      	bls.n	80025b2 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7f5      	b.n	80025c4 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
 80025da:	e7f3      	b.n	80025c4 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
 80025de:	e7f1      	b.n	80025c4 <HAL_CRCEx_Polynomial_Set+0x50>

080025e0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025e0:	6802      	ldr	r2, [r0, #0]
 80025e2:	b2d3      	uxtb	r3, r2
 80025e4:	3b10      	subs	r3, #16
 80025e6:	4909      	ldr	r1, [pc, #36]	; (800260c <DMA_CalcBaseAndBitshift+0x2c>)
 80025e8:	fba1 1303 	umull	r1, r3, r1, r3
 80025ec:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <DMA_CalcBaseAndBitshift+0x30>)
 80025f0:	5cc9      	ldrb	r1, [r1, r3]
 80025f2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d804      	bhi.n	8002602 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <DMA_CalcBaseAndBitshift+0x34>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80025fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002600:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <DMA_CalcBaseAndBitshift+0x34>)
 8002604:	4013      	ands	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	6583      	str	r3, [r0, #88]	; 0x58
 800260a:	e7f8      	b.n	80025fe <DMA_CalcBaseAndBitshift+0x1e>
 800260c:	aaaaaaab 	.word	0xaaaaaaab
 8002610:	0800a498 	.word	0x0800a498
 8002614:	fffffc00 	.word	0xfffffc00

08002618 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002618:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800261a:	6982      	ldr	r2, [r0, #24]
 800261c:	b992      	cbnz	r2, 8002644 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800261e:	2b01      	cmp	r3, #1
 8002620:	d00a      	beq.n	8002638 <DMA_CheckFifoParam+0x20>
 8002622:	b11b      	cbz	r3, 800262c <DMA_CheckFifoParam+0x14>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d001      	beq.n	800262c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002628:	2000      	movs	r0, #0
 800262a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800262e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002632:	d12c      	bne.n	800268e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2000      	movs	r0, #0
 8002636:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002638:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800263a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263e:	d028      	beq.n	8002692 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002644:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002648:	d005      	beq.n	8002656 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800264a:	2b02      	cmp	r3, #2
 800264c:	d929      	bls.n	80026a2 <DMA_CheckFifoParam+0x8a>
 800264e:	2b03      	cmp	r3, #3
 8002650:	d015      	beq.n	800267e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2000      	movs	r0, #0
 8002654:	4770      	bx	lr
    switch (tmp)
 8002656:	2b03      	cmp	r3, #3
 8002658:	d803      	bhi.n	8002662 <DMA_CheckFifoParam+0x4a>
 800265a:	e8df f003 	tbb	[pc, r3]
 800265e:	041c      	.short	0x041c
 8002660:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2000      	movs	r0, #0
 8002664:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002666:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002668:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800266c:	d115      	bne.n	800269a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2000      	movs	r0, #0
 8002670:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002672:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002678:	d011      	beq.n	800269e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002680:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002684:	d001      	beq.n	800268a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002686:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002688:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2000      	movs	r0, #0
 800268c:	4770      	bx	lr
        status = HAL_ERROR;
 800268e:	2001      	movs	r0, #1
 8002690:	4770      	bx	lr
        status = HAL_ERROR;
 8002692:	2001      	movs	r0, #1
 8002694:	4770      	bx	lr
      status = HAL_ERROR;
 8002696:	2001      	movs	r0, #1
 8002698:	4770      	bx	lr
        status = HAL_ERROR;
 800269a:	2001      	movs	r0, #1
 800269c:	4770      	bx	lr
        status = HAL_ERROR;
 800269e:	2001      	movs	r0, #1
 80026a0:	4770      	bx	lr
      status = HAL_ERROR;
 80026a2:	2001      	movs	r0, #1
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_DMA_Init>:
{
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff fbca 	bl	8001e44 <HAL_GetTick>
  if(hdma == NULL)
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d05b      	beq.n	800276c <HAL_DMA_Init+0xc4>
 80026b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80026b6:	2300      	movs	r3, #0
 80026b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f012 0f01 	tst.w	r2, #1
 80026d4:	d00a      	beq.n	80026ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d6:	f7ff fbb5 	bl	8001e44 <HAL_GetTick>
 80026da:	1b40      	subs	r0, r0, r5
 80026dc:	2805      	cmp	r0, #5
 80026de:	d9f5      	bls.n	80026cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e0:	2320      	movs	r3, #32
 80026e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e4:	2003      	movs	r0, #3
 80026e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80026ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <HAL_DMA_Init+0xc8>)
 80026f0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	6861      	ldr	r1, [r4, #4]
 80026f4:	68a2      	ldr	r2, [r4, #8]
 80026f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	6921      	ldr	r1, [r4, #16]
 80026fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002704:	69a1      	ldr	r1, [r4, #24]
 8002706:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	6a21      	ldr	r1, [r4, #32]
 800270e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002710:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002712:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002714:	2904      	cmp	r1, #4
 8002716:	d01e      	beq.n	8002756 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002718:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800271a:	6826      	ldr	r6, [r4, #0]
 800271c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800271e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002724:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800272a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800272c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800272e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002730:	b11b      	cbz	r3, 800273a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff ff70 	bl	8002618 <DMA_CheckFifoParam>
 8002738:	b990      	cbnz	r0, 8002760 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800273a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff ff4f 	bl	80025e0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002742:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002744:	233f      	movs	r3, #63	; 0x3f
 8002746:	4093      	lsls	r3, r2
 8002748:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274a:	2000      	movs	r0, #0
 800274c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800274e:	2301      	movs	r3, #1
 8002750:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002754:	e7c9      	b.n	80026ea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002756:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002758:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800275a:	4301      	orrs	r1, r0
 800275c:	430a      	orrs	r2, r1
 800275e:	e7db      	b.n	8002718 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002764:	2001      	movs	r0, #1
 8002766:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800276a:	e7be      	b.n	80026ea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800276c:	2001      	movs	r0, #1
 800276e:	e7bc      	b.n	80026ea <HAL_DMA_Init+0x42>
 8002770:	f010803f 	.word	0xf010803f

08002774 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002774:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002782:	2001      	movs	r0, #1
 8002784:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002786:	2305      	movs	r3, #5
 8002788:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002796:	2000      	movs	r0, #0
}
 8002798:	4770      	bx	lr
	...

0800279c <HAL_DMA_IRQHandler>:
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80027a6:	4b72      	ldr	r3, [pc, #456]	; (8002970 <HAL_DMA_IRQHandler+0x1d4>)
 80027a8:	681d      	ldr	r5, [r3, #0]
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_DMA_IRQHandler+0x1d8>)
 80027ac:	fba3 3505 	umull	r3, r5, r3, r5
 80027b0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80027b4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027b8:	2308      	movs	r3, #8
 80027ba:	4093      	lsls	r3, r2
 80027bc:	4233      	tst	r3, r6
 80027be:	d010      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f012 0f04 	tst.w	r2, #4
 80027c8:	d00b      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027d4:	2308      	movs	r3, #8
 80027d6:	4093      	lsls	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80027e4:	2301      	movs	r3, #1
 80027e6:	4093      	lsls	r3, r2
 80027e8:	4233      	tst	r3, r6
 80027ea:	d009      	beq.n	8002800 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	6952      	ldr	r2, [r2, #20]
 80027f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027f6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002802:	2304      	movs	r3, #4
 8002804:	4093      	lsls	r3, r2
 8002806:	4233      	tst	r3, r6
 8002808:	d009      	beq.n	800281e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f012 0f02 	tst.w	r2, #2
 8002812:	d004      	beq.n	800281e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002814:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002816:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002820:	2310      	movs	r3, #16
 8002822:	4093      	lsls	r3, r2
 8002824:	4233      	tst	r3, r6
 8002826:	d024      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f012 0f08 	tst.w	r2, #8
 8002830:	d01f      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002832:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800283c:	d00d      	beq.n	800285a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002844:	d104      	bne.n	8002850 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002848:	b19b      	cbz	r3, 8002872 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800284a:	4620      	mov	r0, r4
 800284c:	4798      	blx	r3
 800284e:	e010      	b.n	8002872 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002850:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002852:	b173      	cbz	r3, 8002872 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002854:	4620      	mov	r0, r4
 8002856:	4798      	blx	r3
 8002858:	e00b      	b.n	8002872 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002860:	d103      	bne.n	800286a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800286a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286c:	b10b      	cbz	r3, 8002872 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800286e:	4620      	mov	r0, r4
 8002870:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002872:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002874:	2320      	movs	r3, #32
 8002876:	4093      	lsls	r3, r2
 8002878:	4233      	tst	r3, r6
 800287a:	d055      	beq.n	8002928 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	f012 0f10 	tst.w	r2, #16
 8002884:	d050      	beq.n	8002928 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002886:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002888:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d00e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800289a:	d033      	beq.n	8002904 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80028a2:	d12a      	bne.n	80028fa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80028a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03e      	beq.n	8002928 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80028aa:	4620      	mov	r0, r4
 80028ac:	4798      	blx	r3
 80028ae:	e03b      	b.n	8002928 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b0:	6822      	ldr	r2, [r4, #0]
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	f023 0316 	bic.w	r3, r3, #22
 80028b8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	6953      	ldr	r3, [r2, #20]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c6:	b1a3      	cbz	r3, 80028f2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	f023 0308 	bic.w	r3, r3, #8
 80028d0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028d4:	233f      	movs	r3, #63	; 0x3f
 80028d6:	4093      	lsls	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80028da:	2300      	movs	r3, #0
 80028dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80028e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d03f      	beq.n	800296c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80028ec:	4620      	mov	r0, r4
 80028ee:	4798      	blx	r3
 80028f0:	e03c      	b.n	800296c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e7      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x12c>
 80028f8:	e7eb      	b.n	80028d2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80028fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028fc:	b1a3      	cbz	r3, 8002928 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80028fe:	4620      	mov	r0, r4
 8002900:	4798      	blx	r3
 8002902:	e011      	b.n	8002928 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f412 7f80 	tst.w	r2, #256	; 0x100
 800290a:	d109      	bne.n	8002920 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f022 0210 	bic.w	r2, r2, #16
 8002912:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002914:	2300      	movs	r3, #0
 8002916:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800291a:	2301      	movs	r3, #1
 800291c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002922:	b10b      	cbz	r3, 8002928 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002924:	4620      	mov	r0, r4
 8002926:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002928:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800292a:	b1fb      	cbz	r3, 800296c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800292c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800292e:	f013 0f01 	tst.w	r3, #1
 8002932:	d017      	beq.n	8002964 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002934:	2305      	movs	r3, #5
 8002936:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002944:	9b01      	ldr	r3, [sp, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	42ab      	cmp	r3, r5
 800294c:	d804      	bhi.n	8002958 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f013 0f01 	tst.w	r3, #1
 8002956:	d1f5      	bne.n	8002944 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002958:	2300      	movs	r3, #0
 800295a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800295e:	2301      	movs	r3, #1
 8002960:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002964:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002966:	b10b      	cbz	r3, 800296c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002968:	4620      	mov	r0, r4
 800296a:	4798      	blx	r3
}
 800296c:	b003      	add	sp, #12
 800296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002970:	20000014 	.word	0x20000014
 8002974:	1b4e81b5 	.word	0x1b4e81b5

08002978 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002978:	b338      	cbz	r0, 80029ca <HAL_DMA2D_Init+0x52>
{
 800297a:	b510      	push	{r4, lr}
 800297c:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800297e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002982:	b1eb      	cbz	r3, 80029c0 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002992:	6861      	ldr	r1, [r4, #4]
 8002994:	430b      	orrs	r3, r1
 8002996:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002998:	6822      	ldr	r2, [r4, #0]
 800299a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800299c:	f023 0307 	bic.w	r3, r3, #7
 80029a0:	68a1      	ldr	r1, [r4, #8]
 80029a2:	430b      	orrs	r3, r1
 80029a4:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_DMA2D_Init+0x58>)
 80029ac:	400b      	ands	r3, r1
 80029ae:	68e1      	ldr	r1, [r4, #12]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029b4:	2000      	movs	r0, #0
 80029b6:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80029be:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80029c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80029c4:	f003 fb0c 	bl	8005fe0 <HAL_DMA2D_MspInit>
 80029c8:	e7dc      	b.n	8002984 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	ffffc000 	.word	0xffffc000

080029d4 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d059      	beq.n	8002a90 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80029dc:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80029de:	2301      	movs	r3, #1
 80029e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80029ea:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	1c8b      	adds	r3, r1, #2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	58c3      	ldr	r3, [r0, r3]
 80029f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029fa:	3a09      	subs	r2, #9
 80029fc:	2a01      	cmp	r2, #1
 80029fe:	d91e      	bls.n	8002a3e <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a00:	1c8a      	adds	r2, r1, #2
 8002a02:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002a06:	6852      	ldr	r2, [r2, #4]
 8002a08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a0c:	bb41      	cbnz	r1, 8002a60 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a0e:	6804      	ldr	r4, [r0, #0]
 8002a10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002a12:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002a14:	402a      	ands	r2, r5
 8002a16:	4313      	orrs	r3, r2
 8002a18:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a1a:	6802      	ldr	r2, [r0, #0]
 8002a1c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002a20:	699c      	ldr	r4, [r3, #24]
 8002a22:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	3b09      	subs	r3, #9
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d910      	bls.n	8002a4e <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a32:	2300      	movs	r3, #0
 8002a34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002a38:	4618      	mov	r0, r3
}
 8002a3a:	bc30      	pop	{r4, r5}
 8002a3c:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a3e:	1c8a      	adds	r2, r1, #2
 8002a40:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002a44:	6852      	ldr	r2, [r2, #4]
 8002a46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	e7de      	b.n	8002a0c <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002a4e:	3102      	adds	r1, #2
 8002a50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002a54:	684b      	ldr	r3, [r1, #4]
 8002a56:	6802      	ldr	r2, [r0, #0]
 8002a58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a5c:	6293      	str	r3, [r2, #40]	; 0x28
 8002a5e:	e7e5      	b.n	8002a2c <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a60:	6804      	ldr	r4, [r0, #0]
 8002a62:	69e5      	ldr	r5, [r4, #28]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002a66:	402a      	ands	r2, r5
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002a72:	699c      	ldr	r4, [r3, #24]
 8002a74:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	3b09      	subs	r3, #9
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d8d6      	bhi.n	8002a2c <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002a7e:	3102      	adds	r1, #2
 8002a80:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002a84:	684b      	ldr	r3, [r1, #4]
 8002a86:	6802      	ldr	r2, [r0, #0]
 8002a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	e7cd      	b.n	8002a2c <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002a90:	2002      	movs	r0, #2
}
 8002a92:	4770      	bx	lr
 8002a94:	00fcfff0 	.word	0x00fcfff0

08002a98 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f200 80e2 	bhi.w	8002c64 <HAL_GPIO_Init+0x1cc>
{
 8002aa0:	b4f0      	push	{r4, r5, r6, r7}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	e039      	b.n	8002b1a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aa6:	2209      	movs	r2, #9
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002aaa:	2200      	movs	r2, #0
 8002aac:	40b2      	lsls	r2, r6
 8002aae:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ab0:	3402      	adds	r4, #2
 8002ab2:	4e6d      	ldr	r6, [pc, #436]	; (8002c68 <HAL_GPIO_Init+0x1d0>)
 8002ab4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <HAL_GPIO_Init+0x1d4>)
 8002aba:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	43ea      	mvns	r2, r5
 8002abe:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac2:	684f      	ldr	r7, [r1, #4]
 8002ac4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002ac8:	d001      	beq.n	8002ace <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002aca:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002ace:	4c67      	ldr	r4, [pc, #412]	; (8002c6c <HAL_GPIO_Init+0x1d4>)
 8002ad0:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002ad2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad8:	684f      	ldr	r7, [r1, #4]
 8002ada:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002ade:	d001      	beq.n	8002ae4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002ae0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002ae4:	4c61      	ldr	r4, [pc, #388]	; (8002c6c <HAL_GPIO_Init+0x1d4>)
 8002ae6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ae8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aee:	684f      	ldr	r7, [r1, #4]
 8002af0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002af4:	d001      	beq.n	8002afa <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002af6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002afa:	4c5c      	ldr	r4, [pc, #368]	; (8002c6c <HAL_GPIO_Init+0x1d4>)
 8002afc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002afe:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b02:	684e      	ldr	r6, [r1, #4]
 8002b04:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002b08:	d001      	beq.n	8002b0e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002b0a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002b0e:	4c57      	ldr	r4, [pc, #348]	; (8002c6c <HAL_GPIO_Init+0x1d4>)
 8002b10:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b12:	3301      	adds	r3, #1
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	f200 80a2 	bhi.w	8002c5e <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	680c      	ldr	r4, [r1, #0]
 8002b20:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002b24:	42aa      	cmp	r2, r5
 8002b26:	d1f4      	bne.n	8002b12 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b28:	684c      	ldr	r4, [r1, #4]
 8002b2a:	2c12      	cmp	r4, #18
 8002b2c:	bf18      	it	ne
 8002b2e:	2c02      	cmpne	r4, #2
 8002b30:	d110      	bne.n	8002b54 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8002b32:	08de      	lsrs	r6, r3, #3
 8002b34:	3608      	adds	r6, #8
 8002b36:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b3a:	f003 0407 	and.w	r4, r3, #7
 8002b3e:	00a7      	lsls	r7, r4, #2
 8002b40:	240f      	movs	r4, #15
 8002b42:	40bc      	lsls	r4, r7
 8002b44:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b48:	690c      	ldr	r4, [r1, #16]
 8002b4a:	40bc      	lsls	r4, r7
 8002b4c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8002b50:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002b54:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b56:	005f      	lsls	r7, r3, #1
 8002b58:	2603      	movs	r6, #3
 8002b5a:	40be      	lsls	r6, r7
 8002b5c:	43f6      	mvns	r6, r6
 8002b5e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b62:	684c      	ldr	r4, [r1, #4]
 8002b64:	f004 0403 	and.w	r4, r4, #3
 8002b68:	40bc      	lsls	r4, r7
 8002b6a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002b6e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b70:	684c      	ldr	r4, [r1, #4]
 8002b72:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002b76:	2c11      	cmp	r4, #17
 8002b78:	bf18      	it	ne
 8002b7a:	f1bc 0f01 	cmpne.w	ip, #1
 8002b7e:	d901      	bls.n	8002b84 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b80:	2c12      	cmp	r4, #18
 8002b82:	d111      	bne.n	8002ba8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8002b84:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b86:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b8a:	68cc      	ldr	r4, [r1, #12]
 8002b8c:	40bc      	lsls	r4, r7
 8002b8e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002b92:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b94:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b96:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b9a:	684c      	ldr	r4, [r1, #4]
 8002b9c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8002ba6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ba8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002baa:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bac:	688a      	ldr	r2, [r1, #8]
 8002bae:	40ba      	lsls	r2, r7
 8002bb0:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002bb2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb4:	684a      	ldr	r2, [r1, #4]
 8002bb6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002bba:	d0aa      	beq.n	8002b12 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_GPIO_Init+0x1d8>)
 8002bbe:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002bc0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002bc4:	6454      	str	r4, [r2, #68]	; 0x44
 8002bc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002bcc:	9201      	str	r2, [sp, #4]
 8002bce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002bd0:	089c      	lsrs	r4, r3, #2
 8002bd2:	1ca6      	adds	r6, r4, #2
 8002bd4:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <HAL_GPIO_Init+0x1d0>)
 8002bd6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bda:	f003 0203 	and.w	r2, r3, #3
 8002bde:	0096      	lsls	r6, r2, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	40b2      	lsls	r2, r6
 8002be4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_GPIO_Init+0x1dc>)
 8002bea:	4290      	cmp	r0, r2
 8002bec:	f43f af5d 	beq.w	8002aaa <HAL_GPIO_Init+0x12>
 8002bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf4:	4290      	cmp	r0, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_GPIO_Init+0x1a6>
 8002bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bfc:	4290      	cmp	r0, r2
 8002bfe:	d020      	beq.n	8002c42 <HAL_GPIO_Init+0x1aa>
 8002c00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d01e      	beq.n	8002c46 <HAL_GPIO_Init+0x1ae>
 8002c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c0c:	4290      	cmp	r0, r2
 8002c0e:	d01c      	beq.n	8002c4a <HAL_GPIO_Init+0x1b2>
 8002c10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d01a      	beq.n	8002c4e <HAL_GPIO_Init+0x1b6>
 8002c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1c:	4290      	cmp	r0, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_GPIO_Init+0x1ba>
 8002c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c24:	4290      	cmp	r0, r2
 8002c26:	d016      	beq.n	8002c56 <HAL_GPIO_Init+0x1be>
 8002c28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c2c:	4290      	cmp	r0, r2
 8002c2e:	d014      	beq.n	8002c5a <HAL_GPIO_Init+0x1c2>
 8002c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c34:	4290      	cmp	r0, r2
 8002c36:	f43f af36 	beq.w	8002aa6 <HAL_GPIO_Init+0xe>
 8002c3a:	220a      	movs	r2, #10
 8002c3c:	e736      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c3e:	2201      	movs	r2, #1
 8002c40:	e734      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c42:	2202      	movs	r2, #2
 8002c44:	e732      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c46:	2203      	movs	r2, #3
 8002c48:	e730      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	e72e      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c4e:	2205      	movs	r2, #5
 8002c50:	e72c      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c52:	2206      	movs	r2, #6
 8002c54:	e72a      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c56:	2207      	movs	r2, #7
 8002c58:	e728      	b.n	8002aac <HAL_GPIO_Init+0x14>
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	e726      	b.n	8002aac <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002c5e:	b002      	add	sp, #8
 8002c60:	bcf0      	pop	{r4, r5, r6, r7}
 8002c62:	4770      	bx	lr
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40013c00 	.word	0x40013c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000

08002c78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c78:	6903      	ldr	r3, [r0, #16]
 8002c7a:	4219      	tst	r1, r3
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c7e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002c80:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002c82:	2001      	movs	r0, #1
 8002c84:	4770      	bx	lr

08002c86 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c86:	b912      	cbnz	r2, 8002c8e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c88:	0409      	lsls	r1, r1, #16
 8002c8a:	6181      	str	r1, [r0, #24]
  }
}
 8002c8c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	6181      	str	r1, [r0, #24]
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c94:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4203      	tst	r3, r0
 8002c9c:	d100      	bne.n	8002ca0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002c9e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002ca2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca4:	f002 ffd8 	bl	8005c58 <HAL_GPIO_EXTI_Callback>
}
 8002ca8:	e7f9      	b.n	8002c9e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002caa:	bf00      	nop
 8002cac:	40013c00 	.word	0x40013c00

08002cb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cb0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cb2:	684d      	ldr	r5, [r1, #4]
 8002cb4:	6804      	ldr	r4, [r0, #0]
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002cbc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cbe:	01d2      	lsls	r2, r2, #7
 8002cc0:	4414      	add	r4, r2
 8002cc2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cce:	680b      	ldr	r3, [r1, #0]
 8002cd0:	6804      	ldr	r4, [r0, #0]
 8002cd2:	68e6      	ldr	r6, [r4, #12]
 8002cd4:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002cd8:	4433      	add	r3, r6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	4414      	add	r4, r2
 8002cde:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ce2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002ce6:	68cd      	ldr	r5, [r1, #12]
 8002ce8:	6804      	ldr	r4, [r0, #0]
 8002cea:	68e3      	ldr	r3, [r4, #12]
 8002cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf0:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002cf2:	4414      	add	r4, r2
 8002cf4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002cf8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cfc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d00:	688b      	ldr	r3, [r1, #8]
 8002d02:	6804      	ldr	r4, [r0, #0]
 8002d04:	68e6      	ldr	r6, [r4, #12]
 8002d06:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002d0a:	4433      	add	r3, r6
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4414      	add	r4, r2
 8002d10:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002d14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d18:	6803      	ldr	r3, [r0, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002d20:	f024 0407 	bic.w	r4, r4, #7
 8002d24:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d28:	6803      	ldr	r3, [r0, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	690c      	ldr	r4, [r1, #16]
 8002d2e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002d32:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002d36:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002d3a:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002d3c:	6805      	ldr	r5, [r0, #0]
 8002d3e:	4415      	add	r5, r2
 8002d40:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002d44:	2400      	movs	r4, #0
 8002d46:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002d4a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002d4e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002d52:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002d56:	6805      	ldr	r5, [r0, #0]
 8002d58:	4415      	add	r5, r2
 8002d5a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002d5e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002d62:	6803      	ldr	r3, [r0, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002d6a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002d6e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	694d      	ldr	r5, [r1, #20]
 8002d78:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d7c:	6803      	ldr	r3, [r0, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8002d84:	4d2d      	ldr	r5, [pc, #180]	; (8002e3c <LTDC_SetConfig+0x18c>)
 8002d86:	4035      	ands	r5, r6
 8002d88:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002d8c:	69cd      	ldr	r5, [r1, #28]
 8002d8e:	6a0e      	ldr	r6, [r1, #32]
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4335      	orrs	r5, r6
 8002d96:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8002da2:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002dac:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002db0:	690b      	ldr	r3, [r1, #16]
 8002db2:	b16b      	cbz	r3, 8002dd0 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d03a      	beq.n	8002e2e <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	bf18      	it	ne
 8002dbc:	2b04      	cmpne	r3, #4
 8002dbe:	d038      	beq.n	8002e32 <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d038      	beq.n	8002e36 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	d001      	beq.n	8002dcc <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e002      	b.n	8002dd2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e000      	b.n	8002dd2 <LTDC_SetConfig+0x122>
    tmp = 4U;
 8002dd0:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002dd2:	6804      	ldr	r4, [r0, #0]
 8002dd4:	4414      	add	r4, r2
 8002dd6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8002dda:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002dde:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002de2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002de4:	fb03 f504 	mul.w	r5, r3, r4
 8002de8:	684c      	ldr	r4, [r1, #4]
 8002dea:	680e      	ldr	r6, [r1, #0]
 8002dec:	1ba4      	subs	r4, r4, r6
 8002dee:	fb03 f304 	mul.w	r3, r3, r4
 8002df2:	3303      	adds	r3, #3
 8002df4:	6804      	ldr	r4, [r0, #0]
 8002df6:	4414      	add	r4, r2
 8002df8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002dfc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <LTDC_SetConfig+0x190>)
 8002e0a:	402c      	ands	r4, r5
 8002e0c:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e10:	6803      	ldr	r3, [r0, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002e16:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8002e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e2c:	4770      	bx	lr
    tmp = 3U;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e7cf      	b.n	8002dd2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002e32:	2302      	movs	r3, #2
 8002e34:	e7cd      	b.n	8002dd2 <LTDC_SetConfig+0x122>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e7cb      	b.n	8002dd2 <LTDC_SetConfig+0x122>
 8002e3a:	bf00      	nop
 8002e3c:	fffff8f8 	.word	0xfffff8f8
 8002e40:	fffff800 	.word	0xfffff800

08002e44 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d072      	beq.n	8002f2e <HAL_LTDC_Init+0xea>
{
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002e4c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d067      	beq.n	8002f24 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	6993      	ldr	r3, [r2, #24]
 8002e5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e62:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e64:	6821      	ldr	r1, [r4, #0]
 8002e66:	698a      	ldr	r2, [r1, #24]
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	68a0      	ldr	r0, [r4, #8]
 8002e6c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e6e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e70:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e72:	6920      	ldr	r0, [r4, #16]
 8002e74:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e76:	4313      	orrs	r3, r2
 8002e78:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	688a      	ldr	r2, [r1, #8]
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_LTDC_Init+0xf0>)
 8002e80:	401a      	ands	r2, r3
 8002e82:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e84:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	6882      	ldr	r2, [r0, #8]
 8002e8a:	69a1      	ldr	r1, [r4, #24]
 8002e8c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002e90:	430a      	orrs	r2, r1
 8002e92:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e94:	6821      	ldr	r1, [r4, #0]
 8002e96:	68ca      	ldr	r2, [r1, #12]
 8002e98:	401a      	ands	r2, r3
 8002e9a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e9c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e9e:	6820      	ldr	r0, [r4, #0]
 8002ea0:	68c2      	ldr	r2, [r0, #12]
 8002ea2:	6a21      	ldr	r1, [r4, #32]
 8002ea4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002eac:	6821      	ldr	r1, [r4, #0]
 8002eae:	690a      	ldr	r2, [r1, #16]
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002eb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	6902      	ldr	r2, [r0, #16]
 8002eba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ebc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	694a      	ldr	r2, [r1, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002ecc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ece:	6821      	ldr	r1, [r4, #0]
 8002ed0:	694b      	ldr	r3, [r1, #20]
 8002ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ed4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002edc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ee0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002ee4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002eea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002eee:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002ef0:	6821      	ldr	r1, [r4, #0]
 8002ef2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002ef4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002ef8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002efc:	4303      	orrs	r3, r0
 8002efe:	4313      	orrs	r3, r2
 8002f00:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002f06:	f043 0306 	orr.w	r3, r3, #6
 8002f0a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	6993      	ldr	r3, [r2, #24]
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f16:	2000      	movs	r0, #0
 8002f18:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002f24:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002f28:	f003 f870 	bl	800600c <HAL_LTDC_MspInit>
 8002f2c:	e792      	b.n	8002e54 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002f2e:	2001      	movs	r0, #1
}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	f000f800 	.word	0xf000f800

08002f38 <HAL_LTDC_ErrorCallback>:
}
 8002f38:	4770      	bx	lr

08002f3a <HAL_LTDC_LineEventCallback>:
}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_LTDC_ReloadEventCallback>:
}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_LTDC_IRQHandler>:
{
 8002f3e:	b570      	push	{r4, r5, r6, lr}
 8002f40:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002f42:	6803      	ldr	r3, [r0, #0]
 8002f44:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002f46:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002f48:	f015 0f04 	tst.w	r5, #4
 8002f4c:	d002      	beq.n	8002f54 <HAL_LTDC_IRQHandler+0x16>
 8002f4e:	f016 0f04 	tst.w	r6, #4
 8002f52:	d112      	bne.n	8002f7a <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002f54:	f015 0f02 	tst.w	r5, #2
 8002f58:	d002      	beq.n	8002f60 <HAL_LTDC_IRQHandler+0x22>
 8002f5a:	f016 0f02 	tst.w	r6, #2
 8002f5e:	d121      	bne.n	8002fa4 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002f60:	f015 0f01 	tst.w	r5, #1
 8002f64:	d002      	beq.n	8002f6c <HAL_LTDC_IRQHandler+0x2e>
 8002f66:	f016 0f01 	tst.w	r6, #1
 8002f6a:	d132      	bne.n	8002fd2 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002f6c:	f015 0f08 	tst.w	r5, #8
 8002f70:	d002      	beq.n	8002f78 <HAL_LTDC_IRQHandler+0x3a>
 8002f72:	f016 0f08 	tst.w	r6, #8
 8002f76:	d13d      	bne.n	8002ff4 <HAL_LTDC_IRQHandler+0xb6>
}
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002f88:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002f94:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002f9e:	f7ff ffcb 	bl	8002f38 <HAL_LTDC_ErrorCallback>
 8002fa2:	e7d7      	b.n	8002f54 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002fb4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f7ff ffb4 	bl	8002f38 <HAL_LTDC_ErrorCallback>
 8002fd0:	e7c6      	b.n	8002f60 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002fe2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff ffa4 	bl	8002f3a <HAL_LTDC_LineEventCallback>
 8002ff2:	e7bb      	b.n	8002f6c <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002ff8:	f023 0308 	bic.w	r3, r3, #8
 8002ffc:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003004:	2301      	movs	r3, #1
 8003006:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800300a:	2300      	movs	r3, #0
 800300c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003010:	4620      	mov	r0, r4
 8003012:	f7ff ff93 	bl	8002f3c <HAL_LTDC_ReloadEventCallback>
}
 8003016:	e7af      	b.n	8002f78 <HAL_LTDC_IRQHandler+0x3a>

08003018 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003018:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d027      	beq.n	8003070 <HAL_LTDC_ConfigLayer+0x58>
{
 8003020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003024:	4694      	mov	ip, r2
 8003026:	460f      	mov	r7, r1
 8003028:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 800302a:	f04f 0801 	mov.w	r8, #1
 800302e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003038:	2434      	movs	r4, #52	; 0x34
 800303a:	fb04 0402 	mla	r4, r4, r2, r0
 800303e:	3438      	adds	r4, #56	; 0x38
 8003040:	460d      	mov	r5, r1
 8003042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003052:	4662      	mov	r2, ip
 8003054:	4639      	mov	r1, r7
 8003056:	4630      	mov	r0, r6
 8003058:	f7ff fe2a 	bl	8002cb0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800305c:	6833      	ldr	r3, [r6, #0]
 800305e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003062:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003066:	2000      	movs	r0, #0
 8003068:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003070:	2002      	movs	r0, #2
}
 8003072:	4770      	bx	lr

08003074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003074:	b510      	push	{r4, lr}
 8003076:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_PWREx_EnableOverDrive+0x74>)
 800307a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_PWREx_EnableOverDrive+0x78>)
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003096:	f7fe fed5 	bl	8001e44 <HAL_GetTick>
 800309a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_PWREx_EnableOverDrive+0x78>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030a4:	d108      	bne.n	80030b8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030a6:	f7fe fecd 	bl	8001e44 <HAL_GetTick>
 80030aa:	1b00      	subs	r0, r0, r4
 80030ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030b0:	d9f4      	bls.n	800309c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80030b4:	b002      	add	sp, #8
 80030b6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <HAL_PWREx_EnableOverDrive+0x78>)
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80030c2:	f7fe febf 	bl	8001e44 <HAL_GetTick>
 80030c6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_PWREx_EnableOverDrive+0x78>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030d0:	d107      	bne.n	80030e2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d2:	f7fe feb7 	bl	8001e44 <HAL_GetTick>
 80030d6:	1b00      	subs	r0, r0, r4
 80030d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030dc:	d9f4      	bls.n	80030c8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80030de:	2003      	movs	r0, #3
 80030e0:	e7e8      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80030e2:	2000      	movs	r0, #0
 80030e4:	e7e6      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x40>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40007000 	.word	0x40007000

080030f0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	2800      	cmp	r0, #0
 80030f2:	f000 81db 	beq.w	80034ac <HAL_RCC_OscConfig+0x3bc>
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fc:	6803      	ldr	r3, [r0, #0]
 80030fe:	f013 0f01 	tst.w	r3, #1
 8003102:	d029      	beq.n	8003158 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003104:	4ba2      	ldr	r3, [pc, #648]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d01a      	beq.n	8003146 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003110:	4b9f      	ldr	r3, [pc, #636]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d00f      	beq.n	800313c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003122:	d040      	beq.n	80031a6 <HAL_RCC_OscConfig+0xb6>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d154      	bne.n	80031d2 <HAL_RCC_OscConfig+0xe2>
 8003128:	4b99      	ldr	r3, [pc, #612]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e039      	b.n	80031b0 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313c:	4b94      	ldr	r3, [pc, #592]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003144:	d0ea      	beq.n	800311c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	4b92      	ldr	r3, [pc, #584]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800314e:	d003      	beq.n	8003158 <HAL_RCC_OscConfig+0x68>
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 81ac 	beq.w	80034b0 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f013 0f02 	tst.w	r3, #2
 800315e:	d075      	beq.n	800324c <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003160:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f013 0f0c 	tst.w	r3, #12
 8003168:	d05e      	beq.n	8003228 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b89      	ldr	r3, [pc, #548]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b08      	cmp	r3, #8
 8003174:	d053      	beq.n	800321e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003176:	68e3      	ldr	r3, [r4, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808a 	beq.w	8003292 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317e:	4a84      	ldr	r2, [pc, #528]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fe5c 	bl	8001e44 <HAL_GetTick>
 800318c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f013 0f02 	tst.w	r3, #2
 8003196:	d173      	bne.n	8003280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003198:	f7fe fe54 	bl	8001e44 <HAL_GetTick>
 800319c:	1b40      	subs	r0, r0, r5
 800319e:	2802      	cmp	r0, #2
 80031a0:	d9f5      	bls.n	800318e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e187      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a6:	4a7a      	ldr	r2, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	b32b      	cbz	r3, 8003200 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80031b4:	f7fe fe46 	bl	8001e44 <HAL_GetTick>
 80031b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031c2:	d1c9      	bne.n	8003158 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fe3e 	bl	8001e44 <HAL_GetTick>
 80031c8:	1b40      	subs	r0, r0, r5
 80031ca:	2864      	cmp	r0, #100	; 0x64
 80031cc:	d9f5      	bls.n	80031ba <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80031ce:	2003      	movs	r0, #3
 80031d0:	e171      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d6:	d009      	beq.n	80031ec <HAL_RCC_OscConfig+0xfc>
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e7e1      	b.n	80031b0 <HAL_RCC_OscConfig+0xc0>
 80031ec:	4b68      	ldr	r3, [pc, #416]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e7d7      	b.n	80031b0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003200:	f7fe fe20 	bl	8001e44 <HAL_GetTick>
 8003204:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800320e:	d0a3      	beq.n	8003158 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fe18 	bl	8001e44 <HAL_GetTick>
 8003214:	1b40      	subs	r0, r0, r5
 8003216:	2864      	cmp	r0, #100	; 0x64
 8003218:	d9f5      	bls.n	8003206 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800321a:	2003      	movs	r0, #3
 800321c:	e14b      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003226:	d1a6      	bne.n	8003176 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f013 0f02 	tst.w	r3, #2
 8003230:	d004      	beq.n	800323c <HAL_RCC_OscConfig+0x14c>
 8003232:	68e3      	ldr	r3, [r4, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e13c      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003244:	6921      	ldr	r1, [r4, #16]
 8003246:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800324a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f013 0f08 	tst.w	r3, #8
 8003252:	d046      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003254:	6963      	ldr	r3, [r4, #20]
 8003256:	b383      	cbz	r3, 80032ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800325a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fdef 	bl	8001e44 <HAL_GetTick>
 8003266:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f013 0f02 	tst.w	r3, #2
 8003270:	d137      	bne.n	80032e2 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003272:	f7fe fde7 	bl	8001e44 <HAL_GetTick>
 8003276:	1b40      	subs	r0, r0, r5
 8003278:	2802      	cmp	r0, #2
 800327a:	d9f5      	bls.n	8003268 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800327c:	2003      	movs	r0, #3
 800327e:	e11a      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003288:	6921      	ldr	r1, [r4, #16]
 800328a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e7dc      	b.n	800324c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800329c:	f7fe fdd2 	bl	8001e44 <HAL_GetTick>
 80032a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f013 0f02 	tst.w	r3, #2
 80032aa:	d0cf      	beq.n	800324c <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe fdca 	bl	8001e44 <HAL_GetTick>
 80032b0:	1b40      	subs	r0, r0, r5
 80032b2:	2802      	cmp	r0, #2
 80032b4:	d9f5      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80032b6:	2003      	movs	r0, #3
 80032b8:	e0fd      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ba:	4a35      	ldr	r2, [pc, #212]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80032bc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fdbe 	bl	8001e44 <HAL_GetTick>
 80032c8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f013 0f02 	tst.w	r3, #2
 80032d2:	d006      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fdb6 	bl	8001e44 <HAL_GetTick>
 80032d8:	1b40      	subs	r0, r0, r5
 80032da:	2802      	cmp	r0, #2
 80032dc:	d9f5      	bls.n	80032ca <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80032de:	2003      	movs	r0, #3
 80032e0:	e0e9      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f013 0f04 	tst.w	r3, #4
 80032e8:	d07e      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80032f2:	d11e      	bne.n	8003332 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 80032f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003308:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_OscConfig+0x2a4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003312:	d010      	beq.n	8003336 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d021      	beq.n	800335e <HAL_RCC_OscConfig+0x26e>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d13c      	bne.n	8003398 <HAL_RCC_OscConfig+0x2a8>
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	671a      	str	r2, [r3, #112]	; 0x70
 8003328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	671a      	str	r2, [r3, #112]	; 0x70
 8003330:	e01a      	b.n	8003368 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8003332:	2500      	movs	r5, #0
 8003334:	e7e9      	b.n	800330a <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_RCC_OscConfig+0x2a4>)
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003340:	f7fe fd80 	bl	8001e44 <HAL_GetTick>
 8003344:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_OscConfig+0x2a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800334e:	d1e1      	bne.n	8003314 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fe fd78 	bl	8001e44 <HAL_GetTick>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	2864      	cmp	r0, #100	; 0x64
 8003358:	d9f5      	bls.n	8003346 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
 800335c:	e0ab      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003360:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	68a3      	ldr	r3, [r4, #8]
 800336a:	b35b      	cbz	r3, 80033c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fd6a 	bl	8001e44 <HAL_GetTick>
 8003370:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCC_OscConfig+0x2a0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f013 0f02 	tst.w	r3, #2
 800337a:	d134      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe fd62 	bl	8001e44 <HAL_GetTick>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	f241 3388 	movw	r3, #5000	; 0x1388
 8003386:	4298      	cmp	r0, r3
 8003388:	d9f3      	bls.n	8003372 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800338a:	2003      	movs	r0, #3
 800338c:	e093      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	2b05      	cmp	r3, #5
 800339a:	d009      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2c0>
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 800339e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	671a      	str	r2, [r3, #112]	; 0x70
 80033a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a8:	f022 0204 	bic.w	r2, r2, #4
 80033ac:	671a      	str	r2, [r3, #112]	; 0x70
 80033ae:	e7db      	b.n	8003368 <HAL_RCC_OscConfig+0x278>
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 80033b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b4:	f042 0204 	orr.w	r2, r2, #4
 80033b8:	671a      	str	r2, [r3, #112]	; 0x70
 80033ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	671a      	str	r2, [r3, #112]	; 0x70
 80033c2:	e7d1      	b.n	8003368 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fd3e 	bl	8001e44 <HAL_GetTick>
 80033c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	f013 0f02 	tst.w	r3, #2
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe fd36 	bl	8001e44 <HAL_GetTick>
 80033d8:	1b80      	subs	r0, r0, r6
 80033da:	f241 3388 	movw	r3, #5000	; 0x1388
 80033de:	4298      	cmp	r0, r3
 80033e0:	d9f3      	bls.n	80033ca <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80033e2:	2003      	movs	r0, #3
 80033e4:	e067      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e6:	b9f5      	cbnz	r5, 8003426 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e8:	69a3      	ldr	r3, [r4, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d062      	beq.n	80034b4 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	f002 020c 	and.w	r2, r2, #12
 80033f6:	2a08      	cmp	r2, #8
 80033f8:	d05f      	beq.n	80034ba <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 8003400:	6813      	ldr	r3, [r2, #0]
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fd1c 	bl	8001e44 <HAL_GetTick>
 800340c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003416:	d047      	beq.n	80034a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe fd14 	bl	8001e44 <HAL_GetTick>
 800341c:	1b00      	subs	r0, r0, r4
 800341e:	2802      	cmp	r0, #2
 8003420:	d9f5      	bls.n	800340e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003422:	2003      	movs	r0, #3
 8003424:	e047      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 8003428:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	e7da      	b.n	80033e8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 8003434:	6813      	ldr	r3, [r2, #0]
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800343c:	f7fe fd02 	bl	8001e44 <HAL_GetTick>
 8003440:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800344a:	d006      	beq.n	800345a <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fcfa 	bl	8001e44 <HAL_GetTick>
 8003450:	1b40      	subs	r0, r0, r5
 8003452:	2802      	cmp	r0, #2
 8003454:	d9f5      	bls.n	8003442 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8003456:	2003      	movs	r0, #3
 8003458:	e02d      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345a:	69e3      	ldr	r3, [r4, #28]
 800345c:	6a22      	ldr	r2, [r4, #32]
 800345e:	4313      	orrs	r3, r2
 8003460:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003462:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003466:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003468:	0852      	lsrs	r2, r2, #1
 800346a:	3a01      	subs	r2, #1
 800346c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003470:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003472:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800347a:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 800347c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003486:	f7fe fcdd 	bl	8001e44 <HAL_GetTick>
 800348a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x3d0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe fcd5 	bl	8001e44 <HAL_GetTick>
 800349a:	1b00      	subs	r0, r0, r4
 800349c:	2802      	cmp	r0, #2
 800349e:	d9f5      	bls.n	800348c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80034a0:	2003      	movs	r0, #3
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80034a4:	2000      	movs	r0, #0
 80034a6:	e006      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
 80034a8:	2000      	movs	r0, #0
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
}
 80034ae:	4770      	bx	lr
        return HAL_ERROR;
 80034b0:	2001      	movs	r0, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80034b4:	2000      	movs	r0, #0
}
 80034b6:	b002      	add	sp, #8
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034ba:	2001      	movs	r0, #1
 80034bc:	e7fb      	b.n	80034b6 <HAL_RCC_OscConfig+0x3c6>
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800

080034c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d044      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x96>
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4823      	ldr	r0, [pc, #140]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034d6:	4770      	bx	lr
{
 80034d8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034dc:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034f4:	2300      	movs	r3, #0
 80034f6:	481c      	ldr	r0, [pc, #112]	; (8003568 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034f8:	fba1 0100 	umull	r0, r1, r1, r0
 80034fc:	f7fd fbe4 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003508:	3301      	adds	r3, #1
 800350a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800350c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003510:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800351c:	461e      	mov	r6, r3
 800351e:	2700      	movs	r7, #0
 8003520:	015c      	lsls	r4, r3, #5
 8003522:	2500      	movs	r5, #0
 8003524:	1ae4      	subs	r4, r4, r3
 8003526:	eb65 0507 	sbc.w	r5, r5, r7
 800352a:	01a9      	lsls	r1, r5, #6
 800352c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003530:	01a0      	lsls	r0, r4, #6
 8003532:	1b00      	subs	r0, r0, r4
 8003534:	eb61 0105 	sbc.w	r1, r1, r5
 8003538:	00cb      	lsls	r3, r1, #3
 800353a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800353e:	00c4      	lsls	r4, r0, #3
 8003540:	19a0      	adds	r0, r4, r6
 8003542:	eb43 0107 	adc.w	r1, r3, r7
 8003546:	028b      	lsls	r3, r1, #10
 8003548:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800354c:	0284      	lsls	r4, r0, #10
 800354e:	4620      	mov	r0, r4
 8003550:	4619      	mov	r1, r3
 8003552:	2300      	movs	r3, #0
 8003554:	f7fd fbb8 	bl	8000cc8 <__aeabi_uldivmod>
 8003558:	e7d2      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	017d7840 	.word	0x017d7840

0800356c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800356c:	2800      	cmp	r0, #0
 800356e:	f000 80a2 	beq.w	80036b6 <HAL_RCC_ClockConfig+0x14a>
{
 8003572:	b570      	push	{r4, r5, r6, lr}
 8003574:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003576:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <HAL_RCC_ClockConfig+0x154>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	428b      	cmp	r3, r1
 8003580:	d20c      	bcs.n	800359c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_RCC_ClockConfig+0x154>)
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	f023 030f 	bic.w	r3, r3, #15
 800358a:	430b      	orrs	r3, r1
 800358c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	428b      	cmp	r3, r1
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
}
 800359a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	f013 0f02 	tst.w	r3, #2
 80035a2:	d017      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	f013 0f04 	tst.w	r3, #4
 80035a8:	d004      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035aa:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 80035ac:	6893      	ldr	r3, [r2, #8]
 80035ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b2:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	f013 0f08 	tst.w	r3, #8
 80035ba:	d004      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4a41      	ldr	r2, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 80035be:	6893      	ldr	r3, [r2, #8]
 80035c0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	4a3f      	ldr	r2, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 80035c8:	6893      	ldr	r3, [r2, #8]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ce:	68a0      	ldr	r0, [r4, #8]
 80035d0:	4303      	orrs	r3, r0
 80035d2:	6093      	str	r3, [r2, #8]
 80035d4:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f013 0f01 	tst.w	r3, #1
 80035dc:	d031      	beq.n	8003642 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	6863      	ldr	r3, [r4, #4]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d025      	beq.n	8003634 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	f012 0f02 	tst.w	r2, #2
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	f022 0203 	bic.w	r2, r2, #3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80035fe:	f7fe fc21 	bl	8001e44 <HAL_GetTick>
 8003602:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	6862      	ldr	r2, [r4, #4]
 800360e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003612:	d016      	beq.n	8003642 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fc16 	bl	8001e44 <HAL_GetTick>
 8003618:	1b80      	subs	r0, r0, r6
 800361a:	f241 3388 	movw	r3, #5000	; 0x1388
 800361e:	4298      	cmp	r0, r3
 8003620:	d9f0      	bls.n	8003604 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
 8003624:	e7b9      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800362e:	d1e0      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
 8003632:	e7b2      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800363c:	d1d9      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800363e:	2001      	movs	r0, #1
 8003640:	e7ab      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_RCC_ClockConfig+0x154>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	42ab      	cmp	r3, r5
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_RCC_ClockConfig+0x154>)
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	432b      	orrs	r3, r5
 8003658:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	42ab      	cmp	r3, r5
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
 8003666:	e798      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f013 0f04 	tst.w	r3, #4
 800366e:	d006      	beq.n	800367e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 8003672:	6893      	ldr	r3, [r2, #8]
 8003674:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003678:	68e1      	ldr	r1, [r4, #12]
 800367a:	430b      	orrs	r3, r1
 800367c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	f013 0f08 	tst.w	r3, #8
 8003684:	d007      	beq.n	8003696 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003686:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 8003688:	6893      	ldr	r3, [r2, #8]
 800368a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800368e:	6921      	ldr	r1, [r4, #16]
 8003690:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003694:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f7ff ff15 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_ClockConfig+0x158>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x15c>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	40d8      	lsrs	r0, r3
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_ClockConfig+0x160>)
 80036aa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fe fb91 	bl	8001dd4 <HAL_InitTick>
  return HAL_OK;
 80036b2:	2000      	movs	r0, #0
 80036b4:	e771      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036b6:	2001      	movs	r0, #1
}
 80036b8:	4770      	bx	lr
        return HAL_ERROR;
 80036ba:	2001      	movs	r0, #1
 80036bc:	e76d      	b.n	800359a <HAL_RCC_ClockConfig+0x2e>
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800a500 	.word	0x0800a500
 80036cc:	20000014 	.word	0x20000014

080036d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80036d0:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000014 	.word	0x20000014

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036de:	f7ff fff7 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80036ea:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80036ee:	40d8      	lsrs	r0, r3
 80036f0:	bd08      	pop	{r3, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	0800a510 	.word	0x0800a510

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036fe:	f7ff ffe7 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800370a:	4a03      	ldr	r2, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
}
 800370e:	40d8      	lsrs	r0, r3
 8003710:	bd08      	pop	{r3, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	0800a510 	.word	0x0800a510

0800371c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371e:	b083      	sub	sp, #12
 8003720:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	f013 0f01 	tst.w	r3, #1
 8003728:	d00c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800372a:	4baf      	ldr	r3, [pc, #700]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800373c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800373e:	b1c3      	cbz	r3, 8003772 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8003740:	2600      	movs	r6, #0
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8003744:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800374c:	d015      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374e:	4aa6      	ldr	r2, [pc, #664]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003750:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003754:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003758:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800375a:	430b      	orrs	r3, r1
 800375c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003766:	d006      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 811b 	beq.w	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 800376e:	2500      	movs	r5, #0
 8003770:	e004      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8003772:	2601      	movs	r6, #1
 8003774:	e7e7      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8003776:	2601      	movs	r6, #1
 8003778:	e7f6      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800377a:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003782:	d00f      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003784:	4a98      	ldr	r2, [pc, #608]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003786:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800378a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800378e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003790:	430b      	orrs	r3, r1
 8003792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	f000 8104 	beq.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037a0:	b903      	cbnz	r3, 80037a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 80037a2:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80037aa:	d000      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 80037ac:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ae:	f013 0f20 	tst.w	r3, #32
 80037b2:	f040 80fb 	bne.w	80039ac <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f013 0f10 	tst.w	r3, #16
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037be:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80037c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80037cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037d2:	430a      	orrs	r2, r1
 80037d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e0:	4a81      	ldr	r2, [pc, #516]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80037e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80037ec:	430b      	orrs	r3, r1
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fa:	4a7b      	ldr	r2, [pc, #492]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003800:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003804:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003806:	430b      	orrs	r3, r1
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003814:	4a74      	ldr	r2, [pc, #464]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003816:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800381a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800381e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003820:	430b      	orrs	r3, r1
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003830:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003834:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003838:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800383a:	430b      	orrs	r3, r1
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800384a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003854:	430b      	orrs	r3, r1
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003862:	4a61      	ldr	r2, [pc, #388]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003864:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003868:	f023 030c 	bic.w	r3, r3, #12
 800386c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800386e:	430b      	orrs	r3, r1
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f413 7f80 	tst.w	r3, #256	; 0x100
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387c:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800387e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003882:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003886:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003888:	430b      	orrs	r3, r1
 800388a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003896:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003898:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800389c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80038a2:	430b      	orrs	r3, r1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038bc:	430b      	orrs	r3, r1
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ca:	4a47      	ldr	r2, [pc, #284]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038d6:	430b      	orrs	r3, r1
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038e4:	4a40      	ldr	r2, [pc, #256]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038f0:	430b      	orrs	r3, r1
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80038fc:	d008      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038fe:	4a3a      	ldr	r2, [pc, #232]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003900:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003908:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800390a:	430b      	orrs	r3, r1
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003918:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800391a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800391e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003922:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003924:	430b      	orrs	r3, r1
 8003926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003930:	d00d      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003934:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003938:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800393c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800393e:	430b      	orrs	r3, r1
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003944:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394a:	f000 8099 	beq.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	f013 0f08 	tst.w	r3, #8
 8003954:	d000      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8003956:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003958:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003960:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003964:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003968:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800396a:	430b      	orrs	r3, r1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003976:	d009      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800397a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003982:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003986:	430b      	orrs	r3, r1
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800398c:	2e00      	cmp	r6, #0
 800398e:	d179      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003996:	d075      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003998:	2d00      	cmp	r5, #0
 800399a:	f040 8106 	bne.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800399e:	2000      	movs	r0, #0
}
 80039a0:	b003      	add	sp, #12
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80039a4:	2501      	movs	r5, #1
 80039a6:	e6e9      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80039a8:	2601      	movs	r6, #1
 80039aa:	e6f9      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80039ca:	f7fe fa3b 	bl	8001e44 <HAL_GetTick>
 80039ce:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039d8:	d10a      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7fe fa33 	bl	8001e44 <HAL_GetTick>
 80039de:	1bc0      	subs	r0, r0, r7
 80039e0:	2864      	cmp	r0, #100	; 0x64
 80039e2:	d9f5      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 80039e4:	2003      	movs	r0, #3
 80039e6:	e7db      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f0:	4bb3      	ldr	r3, [pc, #716]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80039f8:	d015      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80039fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80039fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d010      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a04:	4bae      	ldr	r3, [pc, #696]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a0e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003a12:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a16:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003a1a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003a1c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	f013 0f01 	tst.w	r3, #1
 8003a24:	d112      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a28:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003a2c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003a30:	d01d      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003a32:	4aa3      	ldr	r2, [pc, #652]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a34:	6893      	ldr	r3, [r2, #8]
 8003a36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	49a0      	ldr	r1, [pc, #640]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a3e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003a40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a42:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003a46:	4313      	orrs	r3, r2
 8003a48:	670b      	str	r3, [r1, #112]	; 0x70
 8003a4a:	e6b4      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f9fa 	bl	8001e44 <HAL_GetTick>
 8003a50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	4b9b      	ldr	r3, [pc, #620]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f013 0f02 	tst.w	r3, #2
 8003a5a:	d1e4      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe f9f2 	bl	8001e44 <HAL_GetTick>
 8003a60:	1bc0      	subs	r0, r0, r7
 8003a62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a66:	4298      	cmp	r0, r3
 8003a68:	d9f3      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	e798      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6e:	4894      	ldr	r0, [pc, #592]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a70:	6882      	ldr	r2, [r0, #8]
 8003a72:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003a76:	4993      	ldr	r1, [pc, #588]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003a78:	4019      	ands	r1, r3
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	6082      	str	r2, [r0, #8]
 8003a7e:	e7dd      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8003a80:	2501      	movs	r5, #1
 8003a82:	e764      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8003a84:	4a8e      	ldr	r2, [pc, #568]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a8c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a8e:	f7fe f9d9 	bl	8001e44 <HAL_GetTick>
 8003a92:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a94:	4b8a      	ldr	r3, [pc, #552]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a9c:	d006      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a9e:	f7fe f9d1 	bl	8001e44 <HAL_GetTick>
 8003aa2:	1b80      	subs	r0, r0, r6
 8003aa4:	2864      	cmp	r0, #100	; 0x64
 8003aa6:	d9f5      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8003aa8:	2003      	movs	r0, #3
 8003aaa:	e779      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f013 0f01 	tst.w	r3, #1
 8003ab2:	d013      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab6:	b98b      	cbnz	r3, 8003adc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ab8:	4a81      	ldr	r2, [pc, #516]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003aba:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003abe:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac2:	6860      	ldr	r0, [r4, #4]
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003acc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	68a1      	ldr	r1, [r4, #8]
 8003ad4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003ad8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ae2:	d003      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ae4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ae6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003aea:	d006      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003af0:	d01e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af8:	d11a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003afa:	4a71      	ldr	r2, [pc, #452]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003afc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b00:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b04:	6860      	ldr	r0, [r4, #4]
 8003b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b0e:	68e0      	ldr	r0, [r4, #12]
 8003b10:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003b14:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b1e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003b22:	f023 031f 	bic.w	r3, r3, #31
 8003b26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b28:	3901      	subs	r1, #1
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b36:	d011      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b3a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b3e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b42:	6866      	ldr	r6, [r4, #4]
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003b4c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003b50:	4303      	orrs	r3, r0
 8003b52:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b62:	d00d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b64:	6862      	ldr	r2, [r4, #4]
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b6e:	68e2      	ldr	r2, [r4, #12]
 8003b70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b74:	68a2      	ldr	r2, [r4, #8]
 8003b76:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003b7a:	4a51      	ldr	r2, [pc, #324]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003b80:	4a4f      	ldr	r2, [pc, #316]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b88:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b8a:	f7fe f95b 	bl	8001e44 <HAL_GetTick>
 8003b8e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003b98:	f47f aefe 	bne.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9c:	f7fe f952 	bl	8001e44 <HAL_GetTick>
 8003ba0:	1b80      	subs	r0, r0, r6
 8003ba2:	2864      	cmp	r0, #100	; 0x64
 8003ba4:	d9f4      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	e6fa      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8003baa:	4a45      	ldr	r2, [pc, #276]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f946 	bl	8001e44 <HAL_GetTick>
 8003bb8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003bc2:	d006      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bc4:	f7fe f93e 	bl	8001e44 <HAL_GetTick>
 8003bc8:	1b40      	subs	r0, r0, r5
 8003bca:	2864      	cmp	r0, #100	; 0x64
 8003bcc:	d9f5      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8003bce:	2003      	movs	r0, #3
 8003bd0:	e6e6      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003bda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bdc:	b122      	cbz	r2, 8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003bde:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003be2:	d01d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be6:	b9db      	cbnz	r3, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be8:	4a35      	ldr	r2, [pc, #212]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003bea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bf2:	6960      	ldr	r0, [r4, #20]
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003bfc:	69a0      	ldr	r0, [r4, #24]
 8003bfe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c02:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003c06:	430b      	orrs	r3, r1
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c0c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c10:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c16:	3901      	subs	r1, #1
 8003c18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c28:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c2e:	d031      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	f013 0f08 	tst.w	r3, #8
 8003c36:	d019      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c3a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c42:	6960      	ldr	r0, [r4, #20]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c4c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003c50:	430b      	orrs	r3, r1
 8003c52:	69e1      	ldr	r1, [r4, #28]
 8003c54:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c5c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c76:	f7fe f8e5 	bl	8001e44 <HAL_GetTick>
 8003c7a:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003c84:	d119      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c86:	f7fe f8dd 	bl	8001e44 <HAL_GetTick>
 8003c8a:	1b00      	subs	r0, r0, r4
 8003c8c:	2864      	cmp	r0, #100	; 0x64
 8003c8e:	d9f5      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8003c90:	2003      	movs	r0, #3
 8003c92:	e685      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003c96:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c9e:	6965      	ldr	r5, [r4, #20]
 8003ca0:	6a23      	ldr	r3, [r4, #32]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003ca8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003cac:	4303      	orrs	r3, r0
 8003cae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003cb8:	e7ba      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e670      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0ffffcff 	.word	0x0ffffcff

08003cc8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003cc8:	b1d8      	cbz	r0, 8003d02 <HAL_SDRAM_Init+0x3a>
{   
 8003cca:	b538      	push	{r3, r4, r5, lr}
 8003ccc:	4604      	mov	r4, r0
 8003cce:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003cd0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003cd4:	b183      	cbz	r3, 8003cf8 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003cdc:	1d21      	adds	r1, r4, #4
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	f001 fa3a 	bl	8005158 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ce4:	6862      	ldr	r2, [r4, #4]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	f001 fa6f 	bl	80051cc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003cf4:	2000      	movs	r0, #0
}
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003cf8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003cfc:	f002 fb34 	bl	8006368 <HAL_SDRAM_MspInit>
 8003d00:	e7e9      	b.n	8003cd6 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
}
 8003d04:	4770      	bx	lr

08003d06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d08:	4605      	mov	r5, r0
 8003d0a:	460f      	mov	r7, r1
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	ea37 0303 	bics.w	r3, r7, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	42b3      	cmp	r3, r6
 8003d20:	d037      	beq.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003d26:	d0f3      	beq.n	8003d10 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d28:	f7fe f88c 	bl	8001e44 <HAL_GetTick>
 8003d2c:	9b06      	ldr	r3, [sp, #24]
 8003d2e:	1ac0      	subs	r0, r0, r3
 8003d30:	42a0      	cmp	r0, r4
 8003d32:	d201      	bcs.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x32>
 8003d34:	2c00      	cmp	r4, #0
 8003d36:	d1eb      	bne.n	8003d10 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d38:	682a      	ldr	r2, [r5, #0]
 8003d3a:	6853      	ldr	r3, [r2, #4]
 8003d3c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003d40:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d42:	686b      	ldr	r3, [r5, #4]
 8003d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d48:	d00b      	beq.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d014      	beq.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d5e:	2003      	movs	r0, #3
 8003d60:	e018      	b.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d62:	68ab      	ldr	r3, [r5, #8]
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	bf18      	it	ne
 8003d6a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003d6e:	d1ec      	bne.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003d70:	682a      	ldr	r2, [r5, #0]
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e7e6      	b.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8003d7c:	682a      	ldr	r2, [r5, #0]
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	682a      	ldr	r2, [r5, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e7df      	b.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003d92:	2000      	movs	r0, #0
}
 8003d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d96 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d98:	4607      	mov	r7, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8003da0:	e002      	b.n	8003da8 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003da2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003da6:	d10b      	bne.n	8003dc0 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	6893      	ldr	r3, [r2, #8]
 8003dac:	402b      	ands	r3, r5
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	d03b      	beq.n	8003e2a <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003db2:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8003db6:	bf08      	it	eq
 8003db8:	2c00      	cmpeq	r4, #0
 8003dba:	d1f2      	bne.n	8003da2 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003dbc:	7b13      	ldrb	r3, [r2, #12]
 8003dbe:	e7f0      	b.n	8003da2 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dc0:	f7fe f840 	bl	8001e44 <HAL_GetTick>
 8003dc4:	9b06      	ldr	r3, [sp, #24]
 8003dc6:	1ac0      	subs	r0, r0, r3
 8003dc8:	42b0      	cmp	r0, r6
 8003dca:	d201      	bcs.n	8003dd0 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8003dcc:	2e00      	cmp	r6, #0
 8003dce:	d1eb      	bne.n	8003da8 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	6853      	ldr	r3, [r2, #4]
 8003dd4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003dd8:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de0:	d00b      	beq.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d014      	beq.n	8003e14 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003df6:	2003      	movs	r0, #3
 8003df8:	e018      	b.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	bf18      	it	ne
 8003e02:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003e06:	d1ec      	bne.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e7e6      	b.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	e7df      	b.n	8003dea <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8003e2a:	2000      	movs	r0, #0
}
 8003e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e2e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	4604      	mov	r4, r0
 8003e34:	460d      	mov	r5, r1
 8003e36:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e38:	9200      	str	r2, [sp, #0]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e42:	f7ff ffa8 	bl	8003d96 <SPI_WaitFifoStateUntilTimeout>
 8003e46:	b9b8      	cbnz	r0, 8003e78 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e48:	9600      	str	r6, [sp, #0]
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff ff58 	bl	8003d06 <SPI_WaitFlagStateUntilTimeout>
 8003e56:	b9b8      	cbnz	r0, 8003e88 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e58:	9600      	str	r6, [sp, #0]
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff ff97 	bl	8003d96 <SPI_WaitFifoStateUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	b150      	cbz	r0, 8003e82 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e004      	b.n	8003e82 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e7a:	f043 0320 	orr.w	r3, r3, #32
 8003e7e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	b002      	add	sp, #8
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e8a:	f043 0320 	orr.w	r3, r3, #32
 8003e8e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e7f6      	b.n	8003e82 <SPI_EndRxTxTransaction+0x54>

08003e94 <SPI_EndRxTransaction>:
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	4604      	mov	r4, r0
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9e:	6843      	ldr	r3, [r0, #4]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea4:	d00f      	beq.n	8003ec6 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	9600      	str	r6, [sp, #0]
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2180      	movs	r1, #128	; 0x80
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff ff29 	bl	8003d06 <SPI_WaitFlagStateUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	b998      	cbnz	r0, 8003ee0 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003ebe:	d015      	beq.n	8003eec <SPI_EndRxTransaction+0x58>
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec6:	6883      	ldr	r3, [r0, #8]
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	bf18      	it	ne
 8003ece:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003ed2:	d1e8      	bne.n	8003ea6 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003ed4:	6802      	ldr	r2, [r0, #0]
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e7e2      	b.n	8003ea6 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
 8003ee6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e7e9      	b.n	8003ec0 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	68a2      	ldr	r2, [r4, #8]
 8003eee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003ef2:	bf18      	it	ne
 8003ef4:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 8003ef8:	d1e2      	bne.n	8003ec0 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003efa:	9600      	str	r6, [sp, #0]
 8003efc:	462b      	mov	r3, r5
 8003efe:	2200      	movs	r2, #0
 8003f00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff ff46 	bl	8003d96 <SPI_WaitFifoStateUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d0d7      	beq.n	8003ec0 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e7d1      	b.n	8003ec0 <SPI_EndRxTransaction+0x2c>

08003f1c <HAL_SPI_Init>:
  if (hspi == NULL)
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d058      	beq.n	8003fd2 <HAL_SPI_Init+0xb6>
{
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f28:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d045      	beq.n	8003fbc <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f40:	68e3      	ldr	r3, [r4, #12]
 8003f42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f46:	d93e      	bls.n	8003fc6 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f48:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f4e:	bf18      	it	ne
 8003f50:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8003f54:	d001      	beq.n	8003f5a <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f56:	2100      	movs	r1, #0
 8003f58:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003f5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003f5c:	b921      	cbnz	r1, 8003f68 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f62:	d933      	bls.n	8003fcc <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f64:	2302      	movs	r3, #2
 8003f66:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	68a1      	ldr	r1, [r4, #8]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6921      	ldr	r1, [r4, #16]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6961      	ldr	r1, [r4, #20]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	69a1      	ldr	r1, [r4, #24]
 8003f78:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	69e1      	ldr	r1, [r4, #28]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6a21      	ldr	r1, [r4, #32]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003f88:	6821      	ldr	r1, [r4, #0]
 8003f8a:	4303      	orrs	r3, r0
 8003f8c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003f8e:	8b63      	ldrh	r3, [r4, #26]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	68e1      	ldr	r1, [r4, #12]
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	69d3      	ldr	r3, [r2, #28]
 8003faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fae:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003fba:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003fbc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003fc0:	f002 f904 	bl	80061cc <HAL_SPI_MspInit>
 8003fc4:	e7b4      	b.n	8003f30 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fca:	e7be      	b.n	8003f4a <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd0:	e7ca      	b.n	8003f68 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003fd2:	2001      	movs	r0, #1
}
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_SPI_Transmit_IT>:
{
 8003fd8:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8003fda:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003fde:	2801      	cmp	r0, #1
 8003fe0:	d049      	beq.n	8004076 <HAL_SPI_Transmit_IT+0x9e>
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8003fe8:	fab2 f082 	clz	r0, r2
 8003fec:	0940      	lsrs	r0, r0, #5
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	bf08      	it	eq
 8003ff2:	2001      	moveq	r0, #1
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d137      	bne.n	8004068 <HAL_SPI_Transmit_IT+0x90>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff8:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8003ffc:	b2c0      	uxtb	r0, r0
 8003ffe:	2801      	cmp	r0, #1
 8004000:	d001      	beq.n	8004006 <HAL_SPI_Transmit_IT+0x2e>
    errorcode = HAL_BUSY;
 8004002:	2002      	movs	r0, #2
 8004004:	e031      	b.n	800406a <HAL_SPI_Transmit_IT+0x92>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004006:	2003      	movs	r0, #3
 8004008:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	2000      	movs	r0, #0
 800400e:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004010:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004016:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004018:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800401c:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004020:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004028:	d915      	bls.n	8004056 <HAL_SPI_Transmit_IT+0x7e>
    hspi->TxISR = SPI_TxISR_16BIT;
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_SPI_Transmit_IT+0xa4>)
 800402c:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004034:	d012      	beq.n	800405c <HAL_SPI_Transmit_IT+0x84>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	684a      	ldr	r2, [r1, #4]
 800403a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800403e:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	6811      	ldr	r1, [r2, #0]
 8004044:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004048:	d113      	bne.n	8004072 <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800404a:	6811      	ldr	r1, [r2, #0]
 800404c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004050:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004052:	2000      	movs	r0, #0
 8004054:	e009      	b.n	800406a <HAL_SPI_Transmit_IT+0x92>
    hspi->TxISR = SPI_TxISR_8BIT;
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <HAL_SPI_Transmit_IT+0xa8>)
 8004058:	651a      	str	r2, [r3, #80]	; 0x50
 800405a:	e7e8      	b.n	800402e <HAL_SPI_Transmit_IT+0x56>
    SPI_1LINE_TX(hspi);
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	680a      	ldr	r2, [r1, #0]
 8004060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004064:	600a      	str	r2, [r1, #0]
 8004066:	e7e6      	b.n	8004036 <HAL_SPI_Transmit_IT+0x5e>
    errorcode = HAL_ERROR;
 8004068:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800406a:	2200      	movs	r2, #0
 800406c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004070:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004072:	2000      	movs	r0, #0
 8004074:	e7f9      	b.n	800406a <HAL_SPI_Transmit_IT+0x92>
  __HAL_LOCK(hspi);
 8004076:	2002      	movs	r0, #2
}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	080042dd 	.word	0x080042dd
 8004080:	080042b7 	.word	0x080042b7

08004084 <HAL_SPI_TransmitReceive_IT>:
{
 8004084:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8004086:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800408a:	2c01      	cmp	r4, #1
 800408c:	d06b      	beq.n	8004166 <HAL_SPI_TransmitReceive_IT+0xe2>
 800408e:	2401      	movs	r4, #1
 8004090:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8004094:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8004098:	b2e4      	uxtb	r4, r4
  tmp_mode            = hspi->Init.Mode;
 800409a:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800409c:	2c01      	cmp	r4, #1
 800409e:	d010      	beq.n	80040c2 <HAL_SPI_TransmitReceive_IT+0x3e>
 80040a0:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80040a4:	d006      	beq.n	80040b4 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80040a8:	2200      	movs	r2, #0
 80040aa:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bc30      	pop	{r4, r5}
 80040b2:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b4:	6885      	ldr	r5, [r0, #8]
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	d14d      	bne.n	8004156 <HAL_SPI_TransmitReceive_IT+0xd2>
 80040ba:	2c04      	cmp	r4, #4
 80040bc:	d001      	beq.n	80040c2 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 80040be:	2302      	movs	r3, #2
 80040c0:	e7f2      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c2:	fab2 f482 	clz	r4, r2
 80040c6:	0964      	lsrs	r4, r4, #5
 80040c8:	2900      	cmp	r1, #0
 80040ca:	bf08      	it	eq
 80040cc:	2401      	moveq	r4, #1
 80040ce:	2c00      	cmp	r4, #0
 80040d0:	d143      	bne.n	800415a <HAL_SPI_TransmitReceive_IT+0xd6>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d043      	beq.n	800415e <HAL_SPI_TransmitReceive_IT+0xda>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80040da:	b2e4      	uxtb	r4, r4
 80040dc:	2c04      	cmp	r4, #4
 80040de:	d002      	beq.n	80040e6 <HAL_SPI_TransmitReceive_IT+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e0:	2405      	movs	r4, #5
 80040e2:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e6:	2400      	movs	r4, #0
 80040e8:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ea:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040ec:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040ee:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040f0:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040f2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040f6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040fa:	68c2      	ldr	r2, [r0, #12]
 80040fc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004100:	d91e      	bls.n	8004140 <HAL_SPI_TransmitReceive_IT+0xbc>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_SPI_TransmitReceive_IT+0xe8>)
 8004104:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_SPI_TransmitReceive_IT+0xec>)
 8004108:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800410a:	68c2      	ldr	r2, [r0, #12]
 800410c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004110:	d801      	bhi.n	8004116 <HAL_SPI_TransmitReceive_IT+0x92>
 8004112:	2b01      	cmp	r3, #1
 8004114:	d919      	bls.n	800414a <HAL_SPI_TransmitReceive_IT+0xc6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004116:	6802      	ldr	r2, [r0, #0]
 8004118:	6853      	ldr	r3, [r2, #4]
 800411a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800411e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004120:	6802      	ldr	r2, [r0, #0]
 8004122:	6853      	ldr	r3, [r2, #4]
 8004124:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004128:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004132:	d116      	bne.n	8004162 <HAL_SPI_TransmitReceive_IT+0xde>
    __HAL_SPI_ENABLE(hspi);
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e7b3      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004140:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_SPI_TransmitReceive_IT+0xf0>)
 8004142:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004144:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8004146:	6502      	str	r2, [r0, #80]	; 0x50
 8004148:	e7df      	b.n	800410a <HAL_SPI_TransmitReceive_IT+0x86>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800414a:	6802      	ldr	r2, [r0, #0]
 800414c:	6853      	ldr	r3, [r2, #4]
 800414e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004152:	6053      	str	r3, [r2, #4]
 8004154:	e7e4      	b.n	8004120 <HAL_SPI_TransmitReceive_IT+0x9c>
    errorcode = HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	e7a6      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e7a4      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
 800415e:	2301      	movs	r3, #1
 8004160:	e7a2      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e7a0      	b.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8004166:	2302      	movs	r3, #2
 8004168:	e7a1      	b.n	80040ae <HAL_SPI_TransmitReceive_IT+0x2a>
 800416a:	bf00      	nop
 800416c:	08004501 	.word	0x08004501
 8004170:	080044c9 	.word	0x080044c9
 8004174:	08004451 	.word	0x08004451
 8004178:	080043f9 	.word	0x080043f9

0800417c <HAL_SPI_Receive_IT>:
{
 800417c:	b510      	push	{r4, lr}
 800417e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004180:	6880      	ldr	r0, [r0, #8]
 8004182:	b918      	cbnz	r0, 800418c <HAL_SPI_Receive_IT+0x10>
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418a:	d010      	beq.n	80041ae <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800418c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8004190:	2801      	cmp	r0, #1
 8004192:	d05c      	beq.n	800424e <HAL_SPI_Receive_IT+0xd2>
 8004194:	2301      	movs	r3, #1
 8004196:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800419a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800419e:	b2c0      	uxtb	r0, r0
 80041a0:	4298      	cmp	r0, r3
 80041a2:	d00d      	beq.n	80041c0 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 80041a4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80041a6:	2300      	movs	r3, #0
 80041a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	4613      	mov	r3, r2
 80041b0:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041b2:	2204      	movs	r2, #4
 80041b4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80041b8:	460a      	mov	r2, r1
 80041ba:	f7ff ff63 	bl	8004084 <HAL_SPI_TransmitReceive_IT>
 80041be:	e7f5      	b.n	80041ac <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 80041c0:	fab2 f382 	clz	r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2900      	cmp	r1, #0
 80041c8:	bf08      	it	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d13a      	bne.n	8004246 <HAL_SPI_Receive_IT+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041d0:	2304      	movs	r3, #4
 80041d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041da:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041dc:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041e0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041e4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ea:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f2:	d91a      	bls.n	800422a <HAL_SPI_Receive_IT+0xae>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	6853      	ldr	r3, [r2, #4]
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_SPI_Receive_IT+0xd8>)
 8004200:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d017      	beq.n	800423a <HAL_SPI_Receive_IT+0xbe>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	6853      	ldr	r3, [r2, #4]
 800420e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004212:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f012 0f40 	tst.w	r2, #64	; 0x40
 800421c:	d115      	bne.n	800424a <HAL_SPI_Receive_IT+0xce>
    __HAL_SPI_ENABLE(hspi);
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004224:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004226:	2000      	movs	r0, #0
 8004228:	e7bd      	b.n	80041a6 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	6853      	ldr	r3, [r2, #4]
 800422e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004232:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_SPI_Receive_IT+0xdc>)
 8004236:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004238:	e7e3      	b.n	8004202 <HAL_SPI_Receive_IT+0x86>
    SPI_1LINE_RX(hspi);
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	6813      	ldr	r3, [r2, #0]
 800423e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e7e1      	b.n	800420a <HAL_SPI_Receive_IT+0x8e>
    errorcode = HAL_ERROR;
 8004246:	2001      	movs	r0, #1
 8004248:	e7ad      	b.n	80041a6 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800424a:	2000      	movs	r0, #0
 800424c:	e7ab      	b.n	80041a6 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800424e:	2002      	movs	r0, #2
 8004250:	e7ac      	b.n	80041ac <HAL_SPI_Receive_IT+0x30>
 8004252:	bf00      	nop
 8004254:	0800436f 	.word	0x0800436f
 8004258:	08004343 	.word	0x08004343

0800425c <HAL_SPI_TxRxCpltCallback>:
}
 800425c:	4770      	bx	lr

0800425e <HAL_SPI_ErrorCallback>:
}
 800425e:	4770      	bx	lr

08004260 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004260:	b510      	push	{r4, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004266:	f7fd fded 	bl	8001e44 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	6853      	ldr	r3, [r2, #4]
 800426e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004272:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004274:	4602      	mov	r2, r0
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	4620      	mov	r0, r4
 800427a:	f7ff fdd8 	bl	8003e2e <SPI_EndRxTxTransaction>
 800427e:	b118      	cbz	r0, 8004288 <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004280:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	b933      	cbnz	r3, 800429a <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800429a:	2301      	movs	r3, #1
 800429c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042a2:	b923      	cbnz	r3, 80042ae <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7fd fd5d 	bl	8001d64 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80042aa:	b002      	add	sp, #8
 80042ac:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ffd5 	bl	800425e <HAL_SPI_ErrorCallback>
 80042b4:	e7f9      	b.n	80042aa <SPI_CloseTx_ISR+0x4a>

080042b6 <SPI_TxISR_8BIT>:
{
 80042b6:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80042ba:	6803      	ldr	r3, [r0, #0]
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80042c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042c2:	3301      	adds	r3, #1
 80042c4:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80042c6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80042ce:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b103      	cbz	r3, 80042d6 <SPI_TxISR_8BIT+0x20>
}
 80042d4:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80042d6:	f7ff ffc3 	bl	8004260 <SPI_CloseTx_ISR>
}
 80042da:	e7fb      	b.n	80042d4 <SPI_TxISR_8BIT+0x1e>

080042dc <SPI_TxISR_16BIT>:
{
 80042dc:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80042e0:	6803      	ldr	r3, [r0, #0]
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042e8:	3302      	adds	r3, #2
 80042ea:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80042ec:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80042f4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	b103      	cbz	r3, 80042fc <SPI_TxISR_16BIT+0x20>
}
 80042fa:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80042fc:	f7ff ffb0 	bl	8004260 <SPI_CloseTx_ISR>
}
 8004300:	e7fb      	b.n	80042fa <SPI_TxISR_16BIT+0x1e>

08004302 <SPI_CloseRx_ISR>:
{
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004306:	6802      	ldr	r2, [r0, #0]
 8004308:	6853      	ldr	r3, [r2, #4]
 800430a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800430e:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004310:	f7fd fd98 	bl	8001e44 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff fdbb 	bl	8003e94 <SPI_EndRxTransaction>
 800431e:	b118      	cbz	r0, 8004328 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004322:	f043 0320 	orr.w	r3, r3, #32
 8004326:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004328:	2301      	movs	r3, #1
 800432a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800432e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004330:	b11b      	cbz	r3, 800433a <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff ff93 	bl	800425e <HAL_SPI_ErrorCallback>
}
 8004338:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800433a:	4620      	mov	r0, r4
 800433c:	f7fd fd18 	bl	8001d70 <HAL_SPI_RxCpltCallback>
 8004340:	e7fa      	b.n	8004338 <SPI_CloseRx_ISR+0x36>

08004342 <SPI_RxISR_8BIT>:
{
 8004342:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004344:	6802      	ldr	r2, [r0, #0]
 8004346:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004348:	7b12      	ldrb	r2, [r2, #12]
 800434a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800434c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800434e:	3301      	adds	r3, #1
 8004350:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004352:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004356:	3b01      	subs	r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800435e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004362:	b29b      	uxth	r3, r3
 8004364:	b103      	cbz	r3, 8004368 <SPI_RxISR_8BIT+0x26>
}
 8004366:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8004368:	f7ff ffcb 	bl	8004302 <SPI_CloseRx_ISR>
}
 800436c:	e7fb      	b.n	8004366 <SPI_RxISR_8BIT+0x24>

0800436e <SPI_RxISR_16BIT>:
{
 800436e:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004376:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004378:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800437a:	3302      	adds	r3, #2
 800437c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800437e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004382:	3b01      	subs	r3, #1
 8004384:	b29b      	uxth	r3, r3
 8004386:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800438a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800438e:	b29b      	uxth	r3, r3
 8004390:	b103      	cbz	r3, 8004394 <SPI_RxISR_16BIT+0x26>
}
 8004392:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8004394:	f7ff ffb5 	bl	8004302 <SPI_CloseRx_ISR>
}
 8004398:	e7fb      	b.n	8004392 <SPI_RxISR_16BIT+0x24>

0800439a <SPI_CloseRxTx_ISR>:
{
 800439a:	b510      	push	{r4, lr}
 800439c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800439e:	f7fd fd51 	bl	8001e44 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	6853      	ldr	r3, [r2, #4]
 80043a6:	f023 0320 	bic.w	r3, r3, #32
 80043aa:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043ac:	4602      	mov	r2, r0
 80043ae:	2164      	movs	r1, #100	; 0x64
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff fd3c 	bl	8003e2e <SPI_EndRxTxTransaction>
 80043b6:	b118      	cbz	r0, 80043c0 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043ba:	f043 0320 	orr.w	r3, r3, #32
 80043be:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80043c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043c2:	b993      	cbnz	r3, 80043ea <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80043c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d006      	beq.n	80043dc <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ff41 	bl	800425c <HAL_SPI_TxRxCpltCallback>
}
 80043da:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80043dc:	2301      	movs	r3, #1
 80043de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7fd fcc4 	bl	8001d70 <HAL_SPI_RxCpltCallback>
 80043e8:	e7f7      	b.n	80043da <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7ff ff34 	bl	800425e <HAL_SPI_ErrorCallback>
}
 80043f6:	e7f0      	b.n	80043da <SPI_CloseRxTx_ISR+0x40>

080043f8 <SPI_2linesTxISR_8BIT>:
{
 80043f8:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 80043fa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d917      	bls.n	8004432 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004402:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004404:	6803      	ldr	r3, [r0, #0]
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800440c:	3302      	adds	r3, #2
 800440e:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004410:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004412:	3b02      	subs	r3, #2
 8004414:	b29b      	uxth	r3, r3
 8004416:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004418:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	b943      	cbnz	r3, 8004430 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800441e:	6802      	ldr	r2, [r0, #0]
 8004420:	6853      	ldr	r3, [r2, #4]
 8004422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004426:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8004428:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800442c:	b29b      	uxth	r3, r3
 800442e:	b163      	cbz	r3, 800444a <SPI_2linesTxISR_8BIT+0x52>
}
 8004430:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004432:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004434:	6803      	ldr	r3, [r0, #0]
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 800443a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800443c:	3301      	adds	r3, #1
 800443e:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8004440:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004448:	e7e6      	b.n	8004418 <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 800444a:	f7ff ffa6 	bl	800439a <SPI_CloseRxTx_ISR>
}
 800444e:	e7ef      	b.n	8004430 <SPI_2linesTxISR_8BIT+0x38>

08004450 <SPI_2linesRxISR_8BIT>:
{
 8004450:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8004452:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d924      	bls.n	80044a6 <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800445c:	6803      	ldr	r3, [r0, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004462:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004466:	3302      	adds	r3, #2
 8004468:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800446a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800446e:	3b02      	subs	r3, #2
 8004470:	b29b      	uxth	r3, r3
 8004472:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004476:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d00c      	beq.n	800449a <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 8004480:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004484:	b29b      	uxth	r3, r3
 8004486:	b93b      	cbnz	r3, 8004498 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004488:	6802      	ldr	r2, [r0, #0]
 800448a:	6853      	ldr	r3, [r2, #4]
 800448c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004490:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8004492:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	b1a3      	cbz	r3, 80044c2 <SPI_2linesRxISR_8BIT+0x72>
}
 8004498:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800449a:	6802      	ldr	r2, [r0, #0]
 800449c:	6853      	ldr	r3, [r2, #4]
 800449e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044a2:	6053      	str	r3, [r2, #4]
 80044a4:	e7ec      	b.n	8004480 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80044a6:	6802      	ldr	r2, [r0, #0]
 80044a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044aa:	7b12      	ldrb	r2, [r2, #12]
 80044ac:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80044ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044b0:	3301      	adds	r3, #1
 80044b2:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 80044b4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80044c0:	e7de      	b.n	8004480 <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 80044c2:	f7ff ff6a 	bl	800439a <SPI_CloseRxTx_ISR>
}
 80044c6:	e7e7      	b.n	8004498 <SPI_2linesRxISR_8BIT+0x48>

080044c8 <SPI_2linesTxISR_16BIT>:
{
 80044c8:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80044cc:	6803      	ldr	r3, [r0, #0]
 80044ce:	8812      	ldrh	r2, [r2, #0]
 80044d0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044d4:	3302      	adds	r3, #2
 80044d6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80044d8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80044e0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	b943      	cbnz	r3, 80044f8 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80044e6:	6802      	ldr	r2, [r0, #0]
 80044e8:	6853      	ldr	r3, [r2, #4]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ee:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80044f0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b103      	cbz	r3, 80044fa <SPI_2linesTxISR_16BIT+0x32>
}
 80044f8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80044fa:	f7ff ff4e 	bl	800439a <SPI_CloseRxTx_ISR>
}
 80044fe:	e7fb      	b.n	80044f8 <SPI_2linesTxISR_16BIT+0x30>

08004500 <SPI_2linesRxISR_16BIT>:
{
 8004500:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004502:	6803      	ldr	r3, [r0, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004508:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800450a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800450c:	3302      	adds	r3, #2
 800450e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004510:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004514:	3b01      	subs	r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800451c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004520:	b29b      	uxth	r3, r3
 8004522:	b93b      	cbnz	r3, 8004534 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	6853      	ldr	r3, [r2, #4]
 8004528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800452e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	b103      	cbz	r3, 8004536 <SPI_2linesRxISR_16BIT+0x36>
}
 8004534:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8004536:	f7ff ff30 	bl	800439a <SPI_CloseRxTx_ISR>
}
 800453a:	e7fb      	b.n	8004534 <SPI_2linesRxISR_16BIT+0x34>

0800453c <HAL_SPI_IRQHandler>:
{
 800453c:	b530      	push	{r4, r5, lr}
 800453e:	b085      	sub	sp, #20
 8004540:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004542:	6802      	ldr	r2, [r0, #0]
 8004544:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004546:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004548:	f3c3 1180 	ubfx	r1, r3, #6, #1
 800454c:	b949      	cbnz	r1, 8004562 <HAL_SPI_IRQHandler+0x26>
 800454e:	f013 0f01 	tst.w	r3, #1
 8004552:	d006      	beq.n	8004562 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004554:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004558:	d003      	beq.n	8004562 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 800455a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800455c:	4620      	mov	r0, r4
 800455e:	4798      	blx	r3
    return;
 8004560:	e008      	b.n	8004574 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004562:	f013 0f02 	tst.w	r3, #2
 8004566:	d007      	beq.n	8004578 <HAL_SPI_IRQHandler+0x3c>
 8004568:	f010 0f80 	tst.w	r0, #128	; 0x80
 800456c:	d004      	beq.n	8004578 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800456e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004570:	4620      	mov	r0, r4
 8004572:	4798      	blx	r3
}
 8004574:	b005      	add	sp, #20
 8004576:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004578:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800457c:	b91d      	cbnz	r5, 8004586 <HAL_SPI_IRQHandler+0x4a>
 800457e:	b911      	cbnz	r1, 8004586 <HAL_SPI_IRQHandler+0x4a>
 8004580:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004584:	d0f6      	beq.n	8004574 <HAL_SPI_IRQHandler+0x38>
 8004586:	f010 0f20 	tst.w	r0, #32
 800458a:	d0f3      	beq.n	8004574 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800458c:	b179      	cbz	r1, 80045ae <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800458e:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 8004592:	b2c9      	uxtb	r1, r1
 8004594:	2903      	cmp	r1, #3
 8004596:	d053      	beq.n	8004640 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004598:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800459a:	f041 0104 	orr.w	r1, r1, #4
 800459e:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a0:	2100      	movs	r1, #0
 80045a2:	9100      	str	r1, [sp, #0]
 80045a4:	68d1      	ldr	r1, [r2, #12]
 80045a6:	9100      	str	r1, [sp, #0]
 80045a8:	6891      	ldr	r1, [r2, #8]
 80045aa:	9100      	str	r1, [sp, #0]
 80045ac:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045ae:	b165      	cbz	r5, 80045ca <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80045b2:	f041 0101 	orr.w	r1, r1, #1
 80045b6:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045b8:	2100      	movs	r1, #0
 80045ba:	9102      	str	r1, [sp, #8]
 80045bc:	6891      	ldr	r1, [r2, #8]
 80045be:	9102      	str	r1, [sp, #8]
 80045c0:	6811      	ldr	r1, [r2, #0]
 80045c2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80045c6:	6011      	str	r1, [r2, #0]
 80045c8:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045ce:	d009      	beq.n	80045e4 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045d8:	2300      	movs	r3, #0
 80045da:	9303      	str	r3, [sp, #12]
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0c4      	beq.n	8004574 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	6853      	ldr	r3, [r2, #4]
 80045ee:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80045f2:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045fa:	f010 0f03 	tst.w	r0, #3
 80045fe:	d027      	beq.n	8004650 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	6853      	ldr	r3, [r2, #4]
 8004604:	f023 0303 	bic.w	r3, r3, #3
 8004608:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800460a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800460c:	b14b      	cbz	r3, 8004622 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <HAL_SPI_IRQHandler+0x11c>)
 8004610:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004614:	f7fe f8ae 	bl	8002774 <HAL_DMA_Abort_IT>
 8004618:	b118      	cbz	r0, 8004622 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800461a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800461c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004620:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0a5      	beq.n	8004574 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_SPI_IRQHandler+0x11c>)
 800462a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800462c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800462e:	f7fe f8a1 	bl	8002774 <HAL_DMA_Abort_IT>
 8004632:	2800      	cmp	r0, #0
 8004634:	d09e      	beq.n	8004574 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004636:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463c:	6623      	str	r3, [r4, #96]	; 0x60
 800463e:	e799      	b.n	8004574 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004640:	2300      	movs	r3, #0
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	68d3      	ldr	r3, [r2, #12]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	6893      	ldr	r3, [r2, #8]
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	9b01      	ldr	r3, [sp, #4]
        return;
 800464e:	e791      	b.n	8004574 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff fe04 	bl	800425e <HAL_SPI_ErrorCallback>
 8004656:	e78d      	b.n	8004574 <HAL_SPI_IRQHandler+0x38>
 8004658:	0800465d 	.word	0x0800465d

0800465c <SPI_DMAAbortOnError>:
{
 800465c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800465e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004666:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004668:	f7ff fdf9 	bl	800425e <HAL_SPI_ErrorCallback>
}
 800466c:	bd08      	pop	{r3, pc}

0800466e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	6a04      	ldr	r4, [r0, #32]
 8004674:	f024 0401 	bic.w	r4, r4, #1
 8004678:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800467c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004680:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004684:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004688:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800468c:	6203      	str	r3, [r0, #32]
}
 800468e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004692:	4770      	bx	lr

08004694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004694:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	6a03      	ldr	r3, [r0, #32]
 8004698:	f023 0310 	bic.w	r3, r3, #16
 800469c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80046a0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a6:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80046b4:	6203      	str	r3, [r0, #32]
}
 80046b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c2:	4319      	orrs	r1, r3
 80046c4:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c8:	6081      	str	r1, [r0, #8]
}
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046cc:	6802      	ldr	r2, [r0, #0]
 80046ce:	68d3      	ldr	r3, [r2, #12]
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	6802      	ldr	r2, [r0, #0]
 80046d8:	6891      	ldr	r1, [r2, #8]
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_TIM_Base_Start_IT+0x28>)
 80046dc:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	2b06      	cmp	r3, #6
 80046e0:	bf18      	it	ne
 80046e2:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 80046e8:	6813      	ldr	r3, [r2, #0]
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]
}
 80046f0:	2000      	movs	r0, #0
 80046f2:	4770      	bx	lr
 80046f4:	00010007 	.word	0x00010007

080046f8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_IC_CaptureCallback>:
}
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_TriggerCallback>:
}
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_IRQHandler>:
{
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	6803      	ldr	r3, [r0, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	f012 0f02 	tst.w	r2, #2
 800470c:	d011      	beq.n	8004732 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	f012 0f02 	tst.w	r2, #2
 8004714:	d00d      	beq.n	8004732 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004716:	f06f 0202 	mvn.w	r2, #2
 800471a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471c:	2301      	movs	r3, #1
 800471e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004720:	6803      	ldr	r3, [r0, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f013 0f03 	tst.w	r3, #3
 8004728:	d079      	beq.n	800481e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800472a:	f7ff ffe6 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	2300      	movs	r3, #0
 8004730:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	f012 0f04 	tst.w	r2, #4
 800473a:	d012      	beq.n	8004762 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	f012 0f04 	tst.w	r2, #4
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004744:	f06f 0204 	mvn.w	r2, #4
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	2302      	movs	r3, #2
 800474c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004756:	d068      	beq.n	800482a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff ffce 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	2300      	movs	r3, #0
 8004760:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	f012 0f08 	tst.w	r2, #8
 800476a:	d012      	beq.n	8004792 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	f012 0f08 	tst.w	r2, #8
 8004772:	d00e      	beq.n	8004792 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	2304      	movs	r3, #4
 800477c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f013 0f03 	tst.w	r3, #3
 8004786:	d057      	beq.n	8004838 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004788:	4620      	mov	r0, r4
 800478a:	f7ff ffb6 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	2300      	movs	r3, #0
 8004790:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	f012 0f10 	tst.w	r2, #16
 800479a:	d012      	beq.n	80047c2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	f012 0f10 	tst.w	r2, #16
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a4:	f06f 0210 	mvn.w	r2, #16
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047aa:	2308      	movs	r3, #8
 80047ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80047b6:	d046      	beq.n	8004846 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ff9e 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	2300      	movs	r3, #0
 80047c0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	f012 0f01 	tst.w	r2, #1
 80047ca:	d003      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	f012 0f01 	tst.w	r2, #1
 80047d2:	d13f      	bne.n	8004854 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047e4:	d13d      	bne.n	8004862 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80047ee:	d003      	beq.n	80047f8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047f6:	d13b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004808:	d139      	bne.n	800487e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	f012 0f20 	tst.w	r2, #32
 8004812:	d003      	beq.n	800481c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	f012 0f20 	tst.w	r2, #32
 800481a:	d137      	bne.n	800488c <HAL_TIM_IRQHandler+0x18c>
}
 800481c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	f7ff ff6b 	bl	80046f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff ff6a 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
 8004828:	e781      	b.n	800472e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff ff64 	bl	80046f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff ff63 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
 8004836:	e792      	b.n	800475e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004838:	4620      	mov	r0, r4
 800483a:	f7ff ff5d 	bl	80046f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff ff5c 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
 8004844:	e7a3      	b.n	800478e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff ff56 	bl	80046f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff ff55 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
 8004852:	e7b4      	b.n	80047be <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004854:	f06f 0201 	mvn.w	r2, #1
 8004858:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800485a:	4620      	mov	r0, r4
 800485c:	f001 fa7c 	bl	8005d58 <HAL_TIM_PeriodElapsedCallback>
 8004860:	e7b8      	b.n	80047d4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004866:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004868:	4620      	mov	r0, r4
 800486a:	f000 f964 	bl	8004b36 <HAL_TIMEx_BreakCallback>
 800486e:	e7ba      	b.n	80047e6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004870:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004874:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f95e 	bl	8004b38 <HAL_TIMEx_Break2Callback>
 800487c:	e7bc      	b.n	80047f8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004882:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004884:	4620      	mov	r0, r4
 8004886:	f7ff ff3a 	bl	80046fe <HAL_TIM_TriggerCallback>
 800488a:	e7be      	b.n	800480a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800488c:	f06f 0220 	mvn.w	r2, #32
 8004890:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f94e 	bl	8004b34 <HAL_TIMEx_CommutCallback>
}
 8004898:	e7c0      	b.n	800481c <HAL_TIM_IRQHandler+0x11c>
	...

0800489c <TIM_Base_SetConfig>:
{
 800489c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 800489e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	4c3a      	ldr	r4, [pc, #232]	; (800498c <TIM_Base_SetConfig+0xf0>)
 80048a2:	42a0      	cmp	r0, r4
 80048a4:	bf14      	ite	ne
 80048a6:	2400      	movne	r4, #0
 80048a8:	2401      	moveq	r4, #1
 80048aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048ae:	bf14      	ite	ne
 80048b0:	4622      	movne	r2, r4
 80048b2:	f044 0201 	orreq.w	r2, r4, #1
 80048b6:	b9aa      	cbnz	r2, 80048e4 <TIM_Base_SetConfig+0x48>
 80048b8:	4d35      	ldr	r5, [pc, #212]	; (8004990 <TIM_Base_SetConfig+0xf4>)
 80048ba:	42a8      	cmp	r0, r5
 80048bc:	bf14      	ite	ne
 80048be:	2500      	movne	r5, #0
 80048c0:	2501      	moveq	r5, #1
 80048c2:	4e34      	ldr	r6, [pc, #208]	; (8004994 <TIM_Base_SetConfig+0xf8>)
 80048c4:	42b0      	cmp	r0, r6
 80048c6:	d00d      	beq.n	80048e4 <TIM_Base_SetConfig+0x48>
 80048c8:	b965      	cbnz	r5, 80048e4 <TIM_Base_SetConfig+0x48>
 80048ca:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80048ce:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80048d2:	42a8      	cmp	r0, r5
 80048d4:	bf14      	ite	ne
 80048d6:	2500      	movne	r5, #0
 80048d8:	2501      	moveq	r5, #1
 80048da:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80048de:	42b0      	cmp	r0, r6
 80048e0:	d000      	beq.n	80048e4 <TIM_Base_SetConfig+0x48>
 80048e2:	b11d      	cbz	r5, 80048ec <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048e8:	684d      	ldr	r5, [r1, #4]
 80048ea:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d133      	bne.n	8004958 <TIM_Base_SetConfig+0xbc>
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <TIM_Base_SetConfig+0xf4>)
 80048f2:	4290      	cmp	r0, r2
 80048f4:	bf14      	ite	ne
 80048f6:	2200      	movne	r2, #0
 80048f8:	2201      	moveq	r2, #1
 80048fa:	4d26      	ldr	r5, [pc, #152]	; (8004994 <TIM_Base_SetConfig+0xf8>)
 80048fc:	42a8      	cmp	r0, r5
 80048fe:	d02b      	beq.n	8004958 <TIM_Base_SetConfig+0xbc>
 8004900:	bb52      	cbnz	r2, 8004958 <TIM_Base_SetConfig+0xbc>
 8004902:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004906:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800490a:	4290      	cmp	r0, r2
 800490c:	bf14      	ite	ne
 800490e:	2200      	movne	r2, #0
 8004910:	2201      	moveq	r2, #1
 8004912:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004916:	42a8      	cmp	r0, r5
 8004918:	d01e      	beq.n	8004958 <TIM_Base_SetConfig+0xbc>
 800491a:	b9ea      	cbnz	r2, 8004958 <TIM_Base_SetConfig+0xbc>
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <TIM_Base_SetConfig+0xfc>)
 800491e:	4290      	cmp	r0, r2
 8004920:	bf14      	ite	ne
 8004922:	2200      	movne	r2, #0
 8004924:	2201      	moveq	r2, #1
 8004926:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800492a:	42a8      	cmp	r0, r5
 800492c:	d014      	beq.n	8004958 <TIM_Base_SetConfig+0xbc>
 800492e:	b99a      	cbnz	r2, 8004958 <TIM_Base_SetConfig+0xbc>
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <TIM_Base_SetConfig+0x100>)
 8004932:	4290      	cmp	r0, r2
 8004934:	bf14      	ite	ne
 8004936:	2200      	movne	r2, #0
 8004938:	2201      	moveq	r2, #1
 800493a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800493e:	42a8      	cmp	r0, r5
 8004940:	d00a      	beq.n	8004958 <TIM_Base_SetConfig+0xbc>
 8004942:	b94a      	cbnz	r2, 8004958 <TIM_Base_SetConfig+0xbc>
 8004944:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <TIM_Base_SetConfig+0x104>)
 8004946:	4290      	cmp	r0, r2
 8004948:	bf14      	ite	ne
 800494a:	2200      	movne	r2, #0
 800494c:	2201      	moveq	r2, #1
 800494e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8004952:	42a8      	cmp	r0, r5
 8004954:	d000      	beq.n	8004958 <TIM_Base_SetConfig+0xbc>
 8004956:	b11a      	cbz	r2, 8004960 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495c:	68ca      	ldr	r2, [r1, #12]
 800495e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004964:	694a      	ldr	r2, [r1, #20]
 8004966:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004968:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496a:	688a      	ldr	r2, [r1, #8]
 800496c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800496e:	680a      	ldr	r2, [r1, #0]
 8004970:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <TIM_Base_SetConfig+0x108>)
 8004974:	4298      	cmp	r0, r3
 8004976:	bf14      	ite	ne
 8004978:	4623      	movne	r3, r4
 800497a:	f044 0301 	orreq.w	r3, r4, #1
 800497e:	b10b      	cbz	r3, 8004984 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	690b      	ldr	r3, [r1, #16]
 8004982:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004984:	2301      	movs	r3, #1
 8004986:	6143      	str	r3, [r0, #20]
}
 8004988:	bc70      	pop	{r4, r5, r6}
 800498a:	4770      	bx	lr
 800498c:	40010000 	.word	0x40010000
 8004990:	40000800 	.word	0x40000800
 8004994:	40000400 	.word	0x40000400
 8004998:	40014400 	.word	0x40014400
 800499c:	40001800 	.word	0x40001800
 80049a0:	40002000 	.word	0x40002000
 80049a4:	40010400 	.word	0x40010400

080049a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80049a8:	b1a8      	cbz	r0, 80049d6 <HAL_TIM_Base_Init+0x2e>
{
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049b2:	b15b      	cbz	r3, 80049cc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	2302      	movs	r3, #2
 80049b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ba:	1d21      	adds	r1, r4, #4
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	f7ff ff6d 	bl	800489c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049c8:	2000      	movs	r0, #0
}
 80049ca:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049d0:	f001 fc4e 	bl	8006270 <HAL_TIM_Base_MspInit>
 80049d4:	e7ee      	b.n	80049b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80049d6:	2001      	movs	r0, #1
}
 80049d8:	4770      	bx	lr

080049da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049da:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049dc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049de:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80049e6:	430b      	orrs	r3, r1
 80049e8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	6083      	str	r3, [r0, #8]
}
 80049ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80049f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d064      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xd2>
{
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a00:	2301      	movs	r3, #1
 8004a02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	6802      	ldr	r2, [r0, #0]
 8004a0e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	4b2e      	ldr	r3, [pc, #184]	; (8004acc <HAL_TIM_ConfigClockSource+0xd8>)
 8004a12:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004a14:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a16:	680b      	ldr	r3, [r1, #0]
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d04a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xbe>
 8004a1c:	d913      	bls.n	8004a46 <HAL_TIM_ConfigClockSource+0x52>
 8004a1e:	2b60      	cmp	r3, #96	; 0x60
 8004a20:	d03d      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xaa>
 8004a22:	d91e      	bls.n	8004a62 <HAL_TIM_ConfigClockSource+0x6e>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d028      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x86>
 8004a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2c:	d130      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a2e:	68cb      	ldr	r3, [r1, #12]
 8004a30:	684a      	ldr	r2, [r1, #4]
 8004a32:	6889      	ldr	r1, [r1, #8]
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	f7ff ffd0 	bl	80049da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	6893      	ldr	r3, [r2, #8]
 8004a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a42:	6093      	str	r3, [r2, #8]
      break;
 8004a44:	e024      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d006      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x64>
 8004a4a:	d904      	bls.n	8004a56 <HAL_TIM_ConfigClockSource+0x62>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d003      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x64>
 8004a50:	2b30      	cmp	r3, #48	; 0x30
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x64>
 8004a54:	e01c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
 8004a56:	b9db      	cbnz	r3, 8004a90 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	f7ff fe2e 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004a60:	e016      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004a62:	2b50      	cmp	r3, #80	; 0x50
 8004a64:	d114      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	68ca      	ldr	r2, [r1, #12]
 8004a68:	6849      	ldr	r1, [r1, #4]
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	f7ff fdff 	bl	800466e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a70:	2150      	movs	r1, #80	; 0x50
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	f7ff fe22 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004a78:	e00a      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	68cb      	ldr	r3, [r1, #12]
 8004a7c:	684a      	ldr	r2, [r1, #4]
 8004a7e:	6889      	ldr	r1, [r1, #8]
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	f7ff ffaa 	bl	80049da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004a8e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004a9c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9e:	68ca      	ldr	r2, [r1, #12]
 8004aa0:	6849      	ldr	r1, [r1, #4]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	f7ff fdf6 	bl	8004694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa8:	2160      	movs	r1, #96	; 0x60
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	f7ff fe06 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e7ee      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	68ca      	ldr	r2, [r1, #12]
 8004ab4:	6849      	ldr	r1, [r1, #4]
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	f7ff fdd9 	bl	800466e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	f7ff fdfc 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004ac4:	e7e4      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8004ac6:	2002      	movs	r0, #2
}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	fffe0088 	.word	0xfffe0088

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d027      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8004ad8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004ada:	2301      	movs	r3, #1
 8004adc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aea:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aec:	4e0f      	ldr	r6, [pc, #60]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004aee:	4c10      	ldr	r4, [pc, #64]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	bf18      	it	ne
 8004af4:	42b3      	cmpne	r3, r6
 8004af6:	d103      	bne.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004afc:	684c      	ldr	r4, [r1, #4]
 8004afe:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	680c      	ldr	r4, [r1, #0]
 8004b06:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b08:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0c:	6889      	ldr	r1, [r1, #8]
 8004b0e:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b10:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b12:	6803      	ldr	r3, [r0, #0]
 8004b14:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004b22:	4618      	mov	r0, r3
}
 8004b24:	bc70      	pop	{r4, r5, r6}
 8004b26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b28:	2002      	movs	r0, #2
}
 8004b2a:	4770      	bx	lr
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40010400 	.word	0x40010400

08004b34 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b38:	4770      	bx	lr
	...

08004b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	6883      	ldr	r3, [r0, #8]
 8004b42:	6902      	ldr	r2, [r0, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	6942      	ldr	r2, [r0, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	69c2      	ldr	r2, [r0, #28]
 8004b4c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b4e:	6801      	ldr	r1, [r0, #0]
 8004b50:	6808      	ldr	r0, [r1, #0]
 8004b52:	4a99      	ldr	r2, [pc, #612]	; (8004db8 <UART_SetConfig+0x27c>)
 8004b54:	4002      	ands	r2, r0
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	6853      	ldr	r3, [r2, #4]
 8004b5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b62:	68e1      	ldr	r1, [r4, #12]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b68:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8004b6a:	6a23      	ldr	r3, [r4, #32]
 8004b6c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6e:	6821      	ldr	r1, [r4, #0]
 8004b70:	688b      	ldr	r3, [r1, #8]
 8004b72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	4a8f      	ldr	r2, [pc, #572]	; (8004dbc <UART_SetConfig+0x280>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <UART_SetConfig+0x78>
 8004b82:	4a8f      	ldr	r2, [pc, #572]	; (8004dc0 <UART_SetConfig+0x284>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d028      	beq.n	8004bda <UART_SetConfig+0x9e>
 8004b88:	4a8e      	ldr	r2, [pc, #568]	; (8004dc4 <UART_SetConfig+0x288>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03d      	beq.n	8004c0a <UART_SetConfig+0xce>
 8004b8e:	4a8e      	ldr	r2, [pc, #568]	; (8004dc8 <UART_SetConfig+0x28c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d050      	beq.n	8004c36 <UART_SetConfig+0xfa>
 8004b94:	4a8d      	ldr	r2, [pc, #564]	; (8004dcc <UART_SetConfig+0x290>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d062      	beq.n	8004c60 <UART_SetConfig+0x124>
 8004b9a:	4a8d      	ldr	r2, [pc, #564]	; (8004dd0 <UART_SetConfig+0x294>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d077      	beq.n	8004c90 <UART_SetConfig+0x154>
 8004ba0:	4a8c      	ldr	r2, [pc, #560]	; (8004dd4 <UART_SetConfig+0x298>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	f000 808c 	beq.w	8004cc0 <UART_SetConfig+0x184>
 8004ba8:	4a8b      	ldr	r2, [pc, #556]	; (8004dd8 <UART_SetConfig+0x29c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	f000 80a0 	beq.w	8004cf0 <UART_SetConfig+0x1b4>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	e0b6      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bb4:	4b89      	ldr	r3, [pc, #548]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d809      	bhi.n	8004bd6 <UART_SetConfig+0x9a>
 8004bc2:	e8df f003 	tbb	[pc, r3]
 8004bc6:	0402      	.short	0x0402
 8004bc8:	06ad      	.short	0x06ad
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0a9      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	e0a7      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	e0a5      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	e0a3      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bda:	4b80      	ldr	r3, [pc, #512]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	d80e      	bhi.n	8004c06 <UART_SetConfig+0xca>
 8004be8:	e8df f003 	tbb	[pc, r3]
 8004bec:	0d0d0d07 	.word	0x0d0d0d07
 8004bf0:	0d0d0d09 	.word	0x0d0d0d09
 8004bf4:	0d0d0da9 	.word	0x0d0d0da9
 8004bf8:	0b          	.byte	0x0b
 8004bf9:	00          	.byte	0x00
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e091      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	e08f      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c02:	2308      	movs	r3, #8
 8004c04:	e08d      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c06:	2310      	movs	r3, #16
 8004c08:	e08b      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c0a:	4b74      	ldr	r3, [pc, #464]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d00a      	beq.n	8004c2e <UART_SetConfig+0xf2>
 8004c18:	d906      	bls.n	8004c28 <UART_SetConfig+0xec>
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f000 8091 	beq.w	8004d42 <UART_SetConfig+0x206>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d106      	bne.n	8004c32 <UART_SetConfig+0xf6>
 8004c24:	2308      	movs	r3, #8
 8004c26:	e07c      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c28:	b91b      	cbnz	r3, 8004c32 <UART_SetConfig+0xf6>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e079      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	e077      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c32:	2310      	movs	r3, #16
 8004c34:	e075      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c36:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d009      	beq.n	8004c58 <UART_SetConfig+0x11c>
 8004c44:	d905      	bls.n	8004c52 <UART_SetConfig+0x116>
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d07d      	beq.n	8004d46 <UART_SetConfig+0x20a>
 8004c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c4c:	d106      	bne.n	8004c5c <UART_SetConfig+0x120>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	e067      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c52:	b91b      	cbnz	r3, 8004c5c <UART_SetConfig+0x120>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e064      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	e062      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	e060      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c60:	4b5e      	ldr	r3, [pc, #376]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d00b      	beq.n	8004c88 <UART_SetConfig+0x14c>
 8004c70:	d907      	bls.n	8004c82 <UART_SetConfig+0x146>
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d068      	beq.n	8004d4a <UART_SetConfig+0x20e>
 8004c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7c:	d106      	bne.n	8004c8c <UART_SetConfig+0x150>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	e04f      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c82:	b91b      	cbnz	r3, 8004c8c <UART_SetConfig+0x150>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e04c      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e04a      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e048      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004c90:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9e:	d00b      	beq.n	8004cb8 <UART_SetConfig+0x17c>
 8004ca0:	d907      	bls.n	8004cb2 <UART_SetConfig+0x176>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d052      	beq.n	8004d4e <UART_SetConfig+0x212>
 8004ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cac:	d106      	bne.n	8004cbc <UART_SetConfig+0x180>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	e037      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cb2:	b91b      	cbnz	r3, 8004cbc <UART_SetConfig+0x180>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e034      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e032      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	e030      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cc0:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d00b      	beq.n	8004ce8 <UART_SetConfig+0x1ac>
 8004cd0:	d907      	bls.n	8004ce2 <UART_SetConfig+0x1a6>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd6:	d03c      	beq.n	8004d52 <UART_SetConfig+0x216>
 8004cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cdc:	d106      	bne.n	8004cec <UART_SetConfig+0x1b0>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	e01f      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004ce2:	b91b      	cbnz	r3, 8004cec <UART_SetConfig+0x1b0>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e01c      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	e01a      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	e018      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <UART_SetConfig+0x2a0>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfe:	d00b      	beq.n	8004d18 <UART_SetConfig+0x1dc>
 8004d00:	d907      	bls.n	8004d12 <UART_SetConfig+0x1d6>
 8004d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d06:	d026      	beq.n	8004d56 <UART_SetConfig+0x21a>
 8004d08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d0c:	d106      	bne.n	8004d1c <UART_SetConfig+0x1e0>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e007      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d12:	b91b      	cbnz	r3, 8004d1c <UART_SetConfig+0x1e0>
 8004d14:	2300      	movs	r3, #0
 8004d16:	e004      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	e002      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	e000      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d20:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d22:	69e2      	ldr	r2, [r4, #28]
 8004d24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004d28:	d017      	beq.n	8004d5a <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	f200 80b3 	bhi.w	8004e96 <UART_SetConfig+0x35a>
 8004d30:	e8df f003 	tbb	[pc, r3]
 8004d34:	b1958b76 	.word	0xb1958b76
 8004d38:	b1b1b19e 	.word	0xb1b1b19e
 8004d3c:	a8          	.byte	0xa8
 8004d3d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e7ef      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e7ed      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e7eb      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e7e9      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e7e7      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e7e5      	b.n	8004d22 <UART_SetConfig+0x1e6>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e7e3      	b.n	8004d22 <UART_SetConfig+0x1e6>
    switch (clocksource)
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d85d      	bhi.n	8004e1a <UART_SetConfig+0x2de>
 8004d5e:	e8df f003 	tbb	[pc, r3]
 8004d62:	1f05      	.short	0x1f05
 8004d64:	5c485c3f 	.word	0x5c485c3f
 8004d68:	5c5c      	.short	0x5c5c
 8004d6a:	53          	.byte	0x53
 8004d6b:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d6c:	f7fe fcb6 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	0853      	lsrs	r3, r2, #1
 8004d74:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d7e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d80:	f1a3 0110 	sub.w	r1, r3, #16
 8004d84:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004d88:	4291      	cmp	r1, r2
 8004d8a:	f200 8087 	bhi.w	8004e9c <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d94:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004d98:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	60d3      	str	r3, [r2, #12]
 8004d9e:	e050      	b.n	8004e42 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004da0:	f7fe fcac 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004da4:	6862      	ldr	r2, [r4, #4]
 8004da6:	0853      	lsrs	r3, r2, #1
 8004da8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db2:	2000      	movs	r0, #0
        break;
 8004db4:	e7e4      	b.n	8004d80 <UART_SetConfig+0x244>
 8004db6:	bf00      	nop
 8004db8:	efff69f3 	.word	0xefff69f3
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	40004400 	.word	0x40004400
 8004dc4:	40004800 	.word	0x40004800
 8004dc8:	40004c00 	.word	0x40004c00
 8004dcc:	40005000 	.word	0x40005000
 8004dd0:	40011400 	.word	0x40011400
 8004dd4:	40007800 	.word	0x40007800
 8004dd8:	40007c00 	.word	0x40007c00
 8004ddc:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <UART_SetConfig+0x368>)
 8004de4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2000      	movs	r0, #0
        break;
 8004df0:	e7c6      	b.n	8004d80 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004df2:	f7fe fb67 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	0853      	lsrs	r3, r2, #1
 8004dfa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e04:	2000      	movs	r0, #0
        break;
 8004e06:	e7bb      	b.n	8004d80 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e08:	6862      	ldr	r2, [r4, #4]
 8004e0a:	0853      	lsrs	r3, r2, #1
 8004e0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e16:	2000      	movs	r0, #0
        break;
 8004e18:	e7b2      	b.n	8004d80 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8004e1a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e7af      	b.n	8004d80 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e20:	f7fe fc5c 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8004e24:	6862      	ldr	r2, [r4, #4]
 8004e26:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e30:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e32:	f1a3 0110 	sub.w	r1, r3, #16
 8004e36:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	d830      	bhi.n	8004ea0 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004e46:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004e48:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e4a:	f7fe fc57 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e58:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5a:	2000      	movs	r0, #0
        break;
 8004e5c:	e7e9      	b.n	8004e32 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <UART_SetConfig+0x36c>)
 8004e62:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6c:	2000      	movs	r0, #0
        break;
 8004e6e:	e7e0      	b.n	8004e32 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e70:	f7fe fb28 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8004e74:	6862      	ldr	r2, [r4, #4]
 8004e76:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e80:	2000      	movs	r0, #0
        break;
 8004e82:	e7d6      	b.n	8004e32 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	0853      	lsrs	r3, r2, #1
 8004e88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e92:	2000      	movs	r0, #0
        break;
 8004e94:	e7cd      	b.n	8004e32 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8004e96:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e7ca      	b.n	8004e32 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	e7d0      	b.n	8004e42 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	e7ce      	b.n	8004e42 <UART_SetConfig+0x306>
 8004ea4:	01e84800 	.word	0x01e84800
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004eae:	f013 0f01 	tst.w	r3, #1
 8004eb2:	d006      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb4:	6802      	ldr	r2, [r0, #0]
 8004eb6:	6853      	ldr	r3, [r2, #4]
 8004eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ebc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ec4:	f013 0f02 	tst.w	r3, #2
 8004ec8:	d006      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eca:	6802      	ldr	r2, [r0, #0]
 8004ecc:	6853      	ldr	r3, [r2, #4]
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004eda:	f013 0f04 	tst.w	r3, #4
 8004ede:	d006      	beq.n	8004eee <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee0:	6802      	ldr	r2, [r0, #0]
 8004ee2:	6853      	ldr	r3, [r2, #4]
 8004ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ef0:	f013 0f08 	tst.w	r3, #8
 8004ef4:	d006      	beq.n	8004f04 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef6:	6802      	ldr	r2, [r0, #0]
 8004ef8:	6853      	ldr	r3, [r2, #4]
 8004efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004efe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f06:	f013 0f10 	tst.w	r3, #16
 8004f0a:	d006      	beq.n	8004f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0c:	6802      	ldr	r2, [r0, #0]
 8004f0e:	6893      	ldr	r3, [r2, #8]
 8004f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f14:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004f16:	430b      	orrs	r3, r1
 8004f18:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f1c:	f013 0f20 	tst.w	r3, #32
 8004f20:	d006      	beq.n	8004f30 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f22:	6802      	ldr	r2, [r0, #0]
 8004f24:	6893      	ldr	r3, [r2, #8]
 8004f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f38:	6802      	ldr	r2, [r0, #0]
 8004f3a:	6853      	ldr	r3, [r2, #4]
 8004f3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4c:	d00b      	beq.n	8004f66 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f54:	d006      	beq.n	8004f64 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f56:	6802      	ldr	r2, [r0, #0]
 8004f58:	6853      	ldr	r3, [r2, #4]
 8004f5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004f5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6053      	str	r3, [r2, #4]
  }
}
 8004f64:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f66:	6802      	ldr	r2, [r0, #0]
 8004f68:	6853      	ldr	r3, [r2, #4]
 8004f6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f6e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6053      	str	r3, [r2, #4]
 8004f74:	e7eb      	b.n	8004f4e <UART_AdvFeatureConfig+0xa2>

08004f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	4616      	mov	r6, r2
 8004f80:	4698      	mov	r8, r3
 8004f82:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	ea37 0303 	bics.w	r3, r7, r3
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	42b3      	cmp	r3, r6
 8004f94:	d11c      	bne.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004f9a:	d0f3      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fc ff52 	bl	8001e44 <HAL_GetTick>
 8004fa0:	eba0 0008 	sub.w	r0, r0, r8
 8004fa4:	42a0      	cmp	r0, r4
 8004fa6:	d801      	bhi.n	8004fac <UART_WaitOnFlagUntilTimeout+0x36>
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	d1eb      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fac:	682a      	ldr	r2, [r5, #0]
 8004fae:	6813      	ldr	r3, [r2, #0]
 8004fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	682a      	ldr	r2, [r5, #0]
 8004fb8:	6893      	ldr	r3, [r2, #8]
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fc0:	2320      	movs	r3, #32
 8004fc2:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fcc:	2003      	movs	r0, #3
 8004fce:	e000      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2000      	movs	r0, #0
}
 8004fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fd6 <HAL_UART_Transmit>:
{
 8004fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004fde:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d159      	bne.n	8005098 <HAL_UART_Transmit+0xc2>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004fea:	fab2 f382 	clz	r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	bf08      	it	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d153      	bne.n	80050a2 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004ffa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d051      	beq.n	80050a6 <HAL_UART_Transmit+0xd0>
 8005002:	2301      	movs	r3, #1
 8005004:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	2300      	movs	r3, #0
 800500a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500c:	2321      	movs	r3, #33	; 0x21
 800500e:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005010:	f7fc ff18 	bl	8001e44 <HAL_GetTick>
 8005014:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005016:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800501a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501e:	68a3      	ldr	r3, [r4, #8]
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005024:	d002      	beq.n	800502c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8005026:	f04f 0800 	mov.w	r8, #0
 800502a:	e010      	b.n	800504e <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	b30b      	cbz	r3, 8005074 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8005030:	f04f 0800 	mov.w	r8, #0
 8005034:	e00b      	b.n	800504e <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005036:	f838 3b02 	ldrh.w	r3, [r8], #2
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005040:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005042:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005046:	3b01      	subs	r3, #1
 8005048:	b29b      	uxth	r3, r3
 800504a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800504e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005052:	b29b      	uxth	r3, r3
 8005054:	b18b      	cbz	r3, 800507a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	9600      	str	r6, [sp, #0]
 8005058:	463b      	mov	r3, r7
 800505a:	2200      	movs	r2, #0
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	4620      	mov	r0, r4
 8005060:	f7ff ff89 	bl	8004f76 <UART_WaitOnFlagUntilTimeout>
 8005064:	bb08      	cbnz	r0, 80050aa <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8005066:	2d00      	cmp	r5, #0
 8005068:	d0e5      	beq.n	8005036 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
 8005072:	e7e6      	b.n	8005042 <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 8005074:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005076:	2500      	movs	r5, #0
 8005078:	e7e9      	b.n	800504e <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	9600      	str	r6, [sp, #0]
 800507c:	463b      	mov	r3, r7
 800507e:	2200      	movs	r2, #0
 8005080:	2140      	movs	r1, #64	; 0x40
 8005082:	4620      	mov	r0, r4
 8005084:	f7ff ff77 	bl	8004f76 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	b980      	cbnz	r0, 80050ae <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 800508c:	2220      	movs	r2, #32
 800508e:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005090:	2200      	movs	r2, #0
 8005092:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8005096:	e000      	b.n	800509a <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
}
 800509a:	4618      	mov	r0, r3
 800509c:	b002      	add	sp, #8
 800509e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e7f9      	b.n	800509a <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80050a6:	2302      	movs	r3, #2
 80050a8:	e7f7      	b.n	800509a <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e7f5      	b.n	800509a <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e7f3      	b.n	800509a <HAL_UART_Transmit+0xc4>

080050b2 <UART_CheckIdleState>:
{
 80050b2:	b510      	push	{r4, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80050bc:	f7fc fec2 	bl	8001e44 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	f012 0f08 	tst.w	r2, #8
 80050c8:	d107      	bne.n	80050da <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80050ca:	2320      	movs	r3, #32
 80050cc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80050d0:	2000      	movs	r0, #0
 80050d2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80050d6:	b002      	add	sp, #8
 80050d8:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	2200      	movs	r2, #0
 80050e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7ff ff44 	bl	8004f76 <UART_WaitOnFlagUntilTimeout>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0eb      	beq.n	80050ca <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80050f2:	2003      	movs	r0, #3
 80050f4:	e7ef      	b.n	80050d6 <UART_CheckIdleState+0x24>

080050f6 <HAL_UART_Init>:
  if (huart == NULL)
 80050f6:	b368      	cbz	r0, 8005154 <HAL_UART_Init+0x5e>
{
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80050fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80050fe:	b303      	cbz	r3, 8005142 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005100:	2324      	movs	r3, #36	; 0x24
 8005102:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff fd14 	bl	8004b3c <UART_SetConfig>
 8005114:	2801      	cmp	r0, #1
 8005116:	d013      	beq.n	8005140 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800511a:	b9bb      	cbnz	r3, 800514c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	6853      	ldr	r3, [r2, #4]
 8005120:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005124:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800512e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800513a:	4620      	mov	r0, r4
 800513c:	f7ff ffb9 	bl	80050b2 <UART_CheckIdleState>
}
 8005140:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005142:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005146:	f001 f8c3 	bl	80062d0 <HAL_UART_MspInit>
 800514a:	e7d9      	b.n	8005100 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff fead 	bl	8004eac <UART_AdvFeatureConfig>
 8005152:	e7e3      	b.n	800511c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005154:	2001      	movs	r0, #1
}
 8005156:	4770      	bx	lr

08005158 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005158:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800515a:	680b      	ldr	r3, [r1, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d018      	beq.n	8005192 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005160:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <FMC_SDRAM_Init+0x70>)
 8005164:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005166:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005168:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800516a:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 800516c:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800516e:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005170:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8005172:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005174:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005176:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005178:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 800517a:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 800517c:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800517e:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005180:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8005182:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005184:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005186:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005188:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800518a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800518c:	2000      	movs	r0, #0
 800518e:	bc30      	pop	{r4, r5}
 8005190:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005192:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005194:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005198:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800519a:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800519c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800519e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80051a0:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051a2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80051a4:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80051a6:	4c08      	ldr	r4, [pc, #32]	; (80051c8 <FMC_SDRAM_Init+0x70>)
 80051a8:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051aa:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80051ac:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051ae:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80051b0:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80051b2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80051b4:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80051b6:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80051b8:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80051ba:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80051bc:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80051be:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051c0:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051c2:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80051c4:	6043      	str	r3, [r0, #4]
 80051c6:	e7e1      	b.n	800518c <FMC_SDRAM_Init+0x34>
 80051c8:	ffff8000 	.word	0xffff8000

080051cc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80051cc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80051ce:	2a01      	cmp	r2, #1
 80051d0:	d021      	beq.n	8005216 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80051d2:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80051d4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80051dc:	684c      	ldr	r4, [r1, #4]
 80051de:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80051e4:	688c      	ldr	r4, [r1, #8]
 80051e6:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80051e8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80051ec:	68cc      	ldr	r4, [r1, #12]
 80051ee:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80051f0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80051f4:	690c      	ldr	r4, [r1, #16]
 80051f6:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80051f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 80051fc:	694c      	ldr	r4, [r1, #20]
 80051fe:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005200:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8005204:	6989      	ldr	r1, [r1, #24]
 8005206:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005208:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800520c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800520e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005210:	2000      	movs	r0, #0
 8005212:	bc30      	pop	{r4, r5}
 8005214:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005216:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005218:	4c11      	ldr	r4, [pc, #68]	; (8005260 <FMC_SDRAM_Timing_Init+0x94>)
 800521a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800521c:	68ca      	ldr	r2, [r1, #12]
 800521e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8005220:	694b      	ldr	r3, [r1, #20]
 8005222:	1e5a      	subs	r2, r3, #1
 8005224:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005226:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800522a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800522c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800522e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005232:	680b      	ldr	r3, [r1, #0]
 8005234:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005236:	684d      	ldr	r5, [r1, #4]
 8005238:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800523a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800523e:	688d      	ldr	r5, [r1, #8]
 8005240:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005242:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005246:	690d      	ldr	r5, [r1, #16]
 8005248:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800524a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800524e:	6989      	ldr	r1, [r1, #24]
 8005250:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005252:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005256:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005258:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800525a:	60c3      	str	r3, [r0, #12]
 800525c:	e7d8      	b.n	8005210 <FMC_SDRAM_Timing_Init+0x44>
 800525e:	bf00      	nop
 8005260:	ff0f0fff 	.word	0xff0f0fff

08005264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526a:	2400      	movs	r4, #0
 800526c:	940b      	str	r4, [sp, #44]	; 0x2c
 800526e:	940c      	str	r4, [sp, #48]	; 0x30
 8005270:	940d      	str	r4, [sp, #52]	; 0x34
 8005272:	940e      	str	r4, [sp, #56]	; 0x38
 8005274:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005276:	4b5e      	ldr	r3, [pc, #376]	; (80053f0 <MX_GPIO_Init+0x18c>)
 8005278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527a:	f042 0210 	orr.w	r2, r2, #16
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
 8005280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005282:	f002 0210 	and.w	r2, r2, #16
 8005286:	9200      	str	r2, [sp, #0]
 8005288:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	f042 0202 	orr.w	r2, r2, #2
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	f002 0202 	and.w	r2, r2, #2
 8005298:	9201      	str	r2, [sp, #4]
 800529a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800529c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	f002 0201 	and.w	r2, r2, #1
 80052aa:	9202      	str	r2, [sp, #8]
 80052ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	f002 0208 	and.w	r2, r2, #8
 80052ce:	9204      	str	r2, [sp, #16]
 80052d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
 80052da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052dc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80052e0:	9205      	str	r2, [sp, #20]
 80052e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80052f2:	9206      	str	r2, [sp, #24]
 80052f4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	f042 0220 	orr.w	r2, r2, #32
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	f002 0220 	and.w	r2, r2, #32
 8005304:	9207      	str	r2, [sp, #28]
 8005306:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005316:	9208      	str	r2, [sp, #32]
 8005318:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800531a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531c:	f042 0204 	orr.w	r2, r2, #4
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
 8005322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005324:	f002 0204 	and.w	r2, r2, #4
 8005328:	9209      	str	r2, [sp, #36]	; 0x24
 800532a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800532c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800533a:	930a      	str	r3, [sp, #40]	; 0x28
 800533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800533e:	4f2d      	ldr	r7, [pc, #180]	; (80053f4 <MX_GPIO_Init+0x190>)
 8005340:	4622      	mov	r2, r4
 8005342:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8005346:	4638      	mov	r0, r7
 8005348:	f7fd fc9d 	bl	8002c86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 800534c:	2310      	movs	r3, #16
 800534e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005350:	4e29      	ldr	r6, [pc, #164]	; (80053f8 <MX_GPIO_Init+0x194>)
 8005352:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005354:	2501      	movs	r5, #1
 8005356:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 8005358:	a90b      	add	r1, sp, #44	; 0x2c
 800535a:	4828      	ldr	r0, [pc, #160]	; (80053fc <MX_GPIO_Init+0x198>)
 800535c:	f7fd fb9c 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8005360:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005364:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005366:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005368:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536a:	2303      	movs	r3, #3
 800536c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	a90b      	add	r1, sp, #44	; 0x2c
 8005370:	4638      	mov	r0, r7
 8005372:	f7fd fb91 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC3_B_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 8005376:	230d      	movs	r3, #13
 8005378:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800537a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800537c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800537e:	a90b      	add	r1, sp, #44	; 0x2c
 8005380:	481f      	ldr	r0, [pc, #124]	; (8005400 <MX_GPIO_Init+0x19c>)
 8005382:	f7fd fb89 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 8005386:	2740      	movs	r7, #64	; 0x40
 8005388:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800538a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800538c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 800538e:	a90b      	add	r1, sp, #44	; 0x2c
 8005390:	481c      	ldr	r0, [pc, #112]	; (8005404 <MX_GPIO_Init+0x1a0>)
 8005392:	f7fd fb81 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8005396:	f04f 0880 	mov.w	r8, #128	; 0x80
 800539a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800539e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053a0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 80053a2:	a90b      	add	r1, sp, #44	; 0x2c
 80053a4:	4818      	ldr	r0, [pc, #96]	; (8005408 <MX_GPIO_Init+0x1a4>)
 80053a6:	f7fd fb77 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 80053aa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053ae:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 80053b2:	a90b      	add	r1, sp, #44	; 0x2c
 80053b4:	4815      	ldr	r0, [pc, #84]	; (800540c <MX_GPIO_Init+0x1a8>)
 80053b6:	f7fd fb6f 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 80053ba:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053bc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053be:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 80053c0:	a90b      	add	r1, sp, #44	; 0x2c
 80053c2:	4813      	ldr	r0, [pc, #76]	; (8005410 <MX_GPIO_Init+0x1ac>)
 80053c4:	f7fd fb68 	bl	8002a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80053c8:	4622      	mov	r2, r4
 80053ca:	4621      	mov	r1, r4
 80053cc:	200a      	movs	r0, #10
 80053ce:	f7fd f83b 	bl	8002448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80053d2:	200a      	movs	r0, #10
 80053d4:	f7fd f86a 	bl	80024ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80053d8:	4622      	mov	r2, r4
 80053da:	4621      	mov	r1, r4
 80053dc:	2017      	movs	r0, #23
 80053de:	f7fd f833 	bl	8002448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053e2:	2017      	movs	r0, #23
 80053e4:	f7fd f862 	bl	80024ac <HAL_NVIC_EnableIRQ>

}
 80053e8:	b010      	add	sp, #64	; 0x40
 80053ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	10110000 	.word	0x10110000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40022000 	.word	0x40022000
 8005404:	40020800 	.word	0x40020800
 8005408:	40021800 	.word	0x40021800
 800540c:	40021400 	.word	0x40021400
 8005410:	40021c00 	.word	0x40021c00

08005414 <MX_DMA_Init>:
{
 8005414:	b500      	push	{lr}
 8005416:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <MX_DMA_Init+0x30>)
 800541a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 800542c:	2200      	movs	r2, #0
 800542e:	2104      	movs	r1, #4
 8005430:	2038      	movs	r0, #56	; 0x38
 8005432:	f7fd f809 	bl	8002448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005436:	2038      	movs	r0, #56	; 0x38
 8005438:	f7fd f838 	bl	80024ac <HAL_NVIC_EnableIRQ>
}
 800543c:	b003      	add	sp, #12
 800543e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800

08005448 <MX_SPI2_Init>:
{
 8005448:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800544a:	480e      	ldr	r0, [pc, #56]	; (8005484 <MX_SPI2_Init+0x3c>)
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <MX_SPI2_Init+0x40>)
 800544e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005450:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005454:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005456:	2300      	movs	r3, #0
 8005458:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800545a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800545e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005460:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005462:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800546a:	2220      	movs	r2, #32
 800546c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800546e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005470:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005472:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005474:	2207      	movs	r2, #7
 8005476:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005478:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800547a:	2308      	movs	r3, #8
 800547c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800547e:	f7fe fd4d 	bl	8003f1c <HAL_SPI_Init>
}
 8005482:	bd08      	pop	{r3, pc}
 8005484:	200002c4 	.word	0x200002c4
 8005488:	40003800 	.word	0x40003800

0800548c <MX_USART1_UART_Init>:
{
 800548c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800548e:	4809      	ldr	r0, [pc, #36]	; (80054b4 <MX_USART1_UART_Init+0x28>)
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <MX_USART1_UART_Init+0x2c>)
 8005492:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005494:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005498:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800549a:	2300      	movs	r3, #0
 800549c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800549e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054a2:	220c      	movs	r2, #12
 80054a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054aa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054ac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054ae:	f7ff fe22 	bl	80050f6 <HAL_UART_Init>
}
 80054b2:	bd08      	pop	{r3, pc}
 80054b4:	20000544 	.word	0x20000544
 80054b8:	40011000 	.word	0x40011000

080054bc <MX_ADC3_Init>:
{
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80054c0:	2500      	movs	r5, #0
 80054c2:	9500      	str	r5, [sp, #0]
 80054c4:	9501      	str	r5, [sp, #4]
 80054c6:	9502      	str	r5, [sp, #8]
 80054c8:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 80054ca:	4c1d      	ldr	r4, [pc, #116]	; (8005540 <MX_ADC3_Init+0x84>)
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <MX_ADC3_Init+0x88>)
 80054ce:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80054d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054d4:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80054d6:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80054d8:	2601      	movs	r6, #1
 80054da:	6126      	str	r6, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80054dc:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80054de:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80054e2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80054e8:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
 80054ec:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054ee:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 4;
 80054f0:	2704      	movs	r7, #4
 80054f2:	61e7      	str	r7, [r4, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80054f4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80054f8:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7fc fd56 	bl	8001fac <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8005500:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005502:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005504:	2506      	movs	r5, #6
 8005506:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005508:	4669      	mov	r1, sp
 800550a:	4620      	mov	r0, r4
 800550c:	f7fc feb2 	bl	8002274 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8005510:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005512:	2302      	movs	r3, #2
 8005514:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005516:	4669      	mov	r1, sp
 8005518:	4620      	mov	r0, r4
 800551a:	f7fc feab 	bl	8002274 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 800551e:	2307      	movs	r3, #7
 8005520:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005522:	2303      	movs	r3, #3
 8005524:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005526:	4669      	mov	r1, sp
 8005528:	4620      	mov	r0, r4
 800552a:	f7fc fea3 	bl	8002274 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 800552e:	2308      	movs	r3, #8
 8005530:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005532:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005534:	4669      	mov	r1, sp
 8005536:	4620      	mov	r0, r4
 8005538:	f7fc fe9c 	bl	8002274 <HAL_ADC_ConfigChannel>
}
 800553c:	b005      	add	sp, #20
 800553e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005540:	200004bc 	.word	0x200004bc
 8005544:	40012200 	.word	0x40012200

08005548 <MX_CRC_Init>:
{
 8005548:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800554a:	4806      	ldr	r0, [pc, #24]	; (8005564 <MX_CRC_Init+0x1c>)
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <MX_CRC_Init+0x20>)
 800554e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8005550:	2300      	movs	r3, #0
 8005552:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005554:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8005556:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8005558:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800555a:	2301      	movs	r3, #1
 800555c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800555e:	f7fc ffc9 	bl	80024f4 <HAL_CRC_Init>
}
 8005562:	bd08      	pop	{r3, pc}
 8005564:	2000035c 	.word	0x2000035c
 8005568:	40023000 	.word	0x40023000

0800556c <MX_DMA2D_Init>:
{
 800556c:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 800556e:	4c09      	ldr	r4, [pc, #36]	; (8005594 <MX_DMA2D_Init+0x28>)
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <MX_DMA2D_Init+0x2c>)
 8005572:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005574:	2300      	movs	r3, #0
 8005576:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005578:	60a3      	str	r3, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 800557a:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800557c:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800557e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005580:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005582:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005584:	4620      	mov	r0, r4
 8005586:	f7fd f9f7 	bl	8002978 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800558a:	2101      	movs	r1, #1
 800558c:	4620      	mov	r0, r4
 800558e:	f7fd fa21 	bl	80029d4 <HAL_DMA2D_ConfigLayer>
}
 8005592:	bd10      	pop	{r4, pc}
 8005594:	2000062c 	.word	0x2000062c
 8005598:	4002b000 	.word	0x4002b000

0800559c <MX_FMC_Init>:
{
 800559c:	b500      	push	{lr}
 800559e:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80055a0:	480e      	ldr	r0, [pc, #56]	; (80055dc <MX_FMC_Init+0x40>)
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <MX_FMC_Init+0x44>)
 80055a4:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80055a6:	2200      	movs	r2, #0
 80055a8:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80055aa:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80055ac:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80055ae:	2310      	movs	r3, #16
 80055b0:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80055b2:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80055b8:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80055ba:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80055bc:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80055be:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 80055c0:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80055c2:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 80055c4:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 80055c6:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80055c8:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 80055ca:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 80055cc:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80055ce:	a901      	add	r1, sp, #4
 80055d0:	f7fe fb7a 	bl	8003cc8 <HAL_SDRAM_Init>
}
 80055d4:	b009      	add	sp, #36	; 0x24
 80055d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80055da:	bf00      	nop
 80055dc:	2000066c 	.word	0x2000066c
 80055e0:	a0000140 	.word	0xa0000140

080055e4 <MX_LTDC_Init>:
{
 80055e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e6:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80055e8:	2434      	movs	r4, #52	; 0x34
 80055ea:	4622      	mov	r2, r4
 80055ec:	2100      	movs	r1, #0
 80055ee:	eb0d 0004 	add.w	r0, sp, r4
 80055f2:	f000 ffa0 	bl	8006536 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80055f6:	4622      	mov	r2, r4
 80055f8:	2100      	movs	r1, #0
 80055fa:	4668      	mov	r0, sp
 80055fc:	f000 ff9b 	bl	8006536 <memset>
  hltdc.Instance = LTDC;
 8005600:	4d2b      	ldr	r5, [pc, #172]	; (80056b0 <MX_LTDC_Init+0xcc>)
 8005602:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <MX_LTDC_Init+0xd0>)
 8005604:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005606:	2400      	movs	r4, #0
 8005608:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800560a:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800560c:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800560e:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 8005610:	2307      	movs	r3, #7
 8005612:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 8005614:	2303      	movs	r3, #3
 8005616:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005618:	230e      	movs	r3, #14
 800561a:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800561c:	2605      	movs	r6, #5
 800561e:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8005620:	f240 238e 	movw	r3, #654	; 0x28e
 8005624:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8005626:	f240 13e5 	movw	r3, #485	; 0x1e5
 800562a:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800562c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005630:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8005632:	f240 13e7 	movw	r3, #487	; 0x1e7
 8005636:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005638:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800563c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005640:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005644:	4628      	mov	r0, r5
 8005646:	f7fd fbfd 	bl	8002e44 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 800564a:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800564c:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800564e:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8005650:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005652:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8005654:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8005656:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005658:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800565c:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800565e:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8005660:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8005662:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8005664:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8005666:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800566a:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800566e:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005672:	4622      	mov	r2, r4
 8005674:	a90d      	add	r1, sp, #52	; 0x34
 8005676:	4628      	mov	r0, r5
 8005678:	f7fd fcce 	bl	8003018 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 800567c:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800567e:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8005680:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 8005682:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005684:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8005686:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8005688:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800568a:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800568c:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 800568e:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8005690:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8005692:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8005694:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8005698:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800569c:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80056a0:	2201      	movs	r2, #1
 80056a2:	4669      	mov	r1, sp
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7fd fcb7 	bl	8003018 <HAL_LTDC_ConfigLayer>
}
 80056aa:	b01b      	add	sp, #108	; 0x6c
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000414 	.word	0x20000414
 80056b4:	40016800 	.word	0x40016800

080056b8 <MX_TIM13_Init>:
{
 80056b8:	b508      	push	{r3, lr}
  htim13.Instance = TIM13;
 80056ba:	4807      	ldr	r0, [pc, #28]	; (80056d8 <MX_TIM13_Init+0x20>)
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <MX_TIM13_Init+0x24>)
 80056be:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 1000-1;
 80056c0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80056c4:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056c6:	2300      	movs	r3, #0
 80056c8:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 108-1;
 80056ca:	226b      	movs	r2, #107	; 0x6b
 80056cc:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ce:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056d0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80056d2:	f7ff f969 	bl	80049a8 <HAL_TIM_Base_Init>
}
 80056d6:	bd08      	pop	{r3, pc}
 80056d8:	20000504 	.word	0x20000504
 80056dc:	40001c00 	.word	0x40001c00

080056e0 <MX_TIM1_Init>:
{
 80056e0:	b530      	push	{r4, r5, lr}
 80056e2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056e4:	2400      	movs	r4, #0
 80056e6:	9404      	str	r4, [sp, #16]
 80056e8:	9405      	str	r4, [sp, #20]
 80056ea:	9406      	str	r4, [sp, #24]
 80056ec:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056ee:	9401      	str	r4, [sp, #4]
 80056f0:	9402      	str	r4, [sp, #8]
 80056f2:	9403      	str	r4, [sp, #12]
  htim1.Instance = TIM1;
 80056f4:	4d10      	ldr	r5, [pc, #64]	; (8005738 <MX_TIM1_Init+0x58>)
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <MX_TIM1_Init+0x5c>)
 80056f8:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 100-1;
 80056fa:	2363      	movs	r3, #99	; 0x63
 80056fc:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056fe:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 216-1;
 8005700:	23d7      	movs	r3, #215	; 0xd7
 8005702:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005704:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8005706:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005708:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800570a:	4628      	mov	r0, r5
 800570c:	f7ff f94c 	bl	80049a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005714:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4628      	mov	r0, r5
 800571a:	f7ff f96b 	bl	80049f4 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800571e:	2320      	movs	r3, #32
 8005720:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8005722:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005726:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005728:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800572a:	a901      	add	r1, sp, #4
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff f9cf 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8005732:	b009      	add	sp, #36	; 0x24
 8005734:	bd30      	pop	{r4, r5, pc}
 8005736:	bf00      	nop
 8005738:	200005ec 	.word	0x200005ec
 800573c:	40010000 	.word	0x40010000

08005740 <SystemClock_Config>:
{
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005744:	2230      	movs	r2, #48	; 0x30
 8005746:	2100      	movs	r1, #0
 8005748:	a828      	add	r0, sp, #160	; 0xa0
 800574a:	f000 fef4 	bl	8006536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800574e:	2400      	movs	r4, #0
 8005750:	9423      	str	r4, [sp, #140]	; 0x8c
 8005752:	9424      	str	r4, [sp, #144]	; 0x90
 8005754:	9425      	str	r4, [sp, #148]	; 0x94
 8005756:	9426      	str	r4, [sp, #152]	; 0x98
 8005758:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800575a:	2284      	movs	r2, #132	; 0x84
 800575c:	4621      	mov	r1, r4
 800575e:	a802      	add	r0, sp, #8
 8005760:	f000 fee9 	bl	8006536 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005764:	4b26      	ldr	r3, [pc, #152]	; (8005800 <SystemClock_Config+0xc0>)
 8005766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005778:	4b22      	ldr	r3, [pc, #136]	; (8005804 <SystemClock_Config+0xc4>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800578c:	2601      	movs	r6, #1
 800578e:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005794:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005796:	2502      	movs	r5, #2
 8005798:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800579a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800579e:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80057a0:	2319      	movs	r3, #25
 80057a2:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80057a4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80057a8:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057aa:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80057ac:	2309      	movs	r3, #9
 80057ae:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b0:	a828      	add	r0, sp, #160	; 0xa0
 80057b2:	f7fd fc9d 	bl	80030f0 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80057b6:	f7fd fc5d 	bl	8003074 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057ba:	230f      	movs	r3, #15
 80057bc:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057be:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057c0:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80057c6:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80057c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057cc:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80057ce:	2107      	movs	r1, #7
 80057d0:	a823      	add	r0, sp, #140	; 0x8c
 80057d2:	f7fd fecb 	bl	800356c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 80057d6:	2348      	movs	r3, #72	; 0x48
 80057d8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80057da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80057de:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80057e0:	2305      	movs	r3, #5
 80057e2:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80057e4:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80057e6:	2303      	movs	r3, #3
 80057e8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80057ea:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80057ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057f0:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80057f2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057f4:	a802      	add	r0, sp, #8
 80057f6:	f7fd ff91 	bl	800371c <HAL_RCCEx_PeriphCLKConfig>
}
 80057fa:	b034      	add	sp, #208	; 0xd0
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000

08005808 <main>:
{
 8005808:	b510      	push	{r4, lr}
 800580a:	b09c      	sub	sp, #112	; 0x70
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800580c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005810:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005814:	4b41      	ldr	r3, [pc, #260]	; (800591c <main+0x114>)
 8005816:	2100      	movs	r1, #0
 8005818:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800581c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005820:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800582a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800582c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005830:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005834:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005838:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800583c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005840:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8005844:	e00f      	b.n	8005866 <main+0x5e>
      } while (ways-- != 0U);
 8005846:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005848:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800584c:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8005850:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8005854:	4831      	ldr	r0, [pc, #196]	; (800591c <main+0x114>)
 8005856:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800585a:	1e53      	subs	r3, r2, #1
 800585c:	2a00      	cmp	r2, #0
 800585e:	d1f2      	bne.n	8005846 <main+0x3e>
    } while(sets-- != 0U);
 8005860:	1e4b      	subs	r3, r1, #1
 8005862:	b119      	cbz	r1, 800586c <main+0x64>
 8005864:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005866:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800586a:	e7ed      	b.n	8005848 <main+0x40>
 800586c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005870:	6943      	ldr	r3, [r0, #20]
 8005872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005876:	6143      	str	r3, [r0, #20]
 8005878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800587c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005880:	f7fc face 	bl	8001e20 <HAL_Init>
  SystemClock_Config();
 8005884:	f7ff ff5c 	bl	8005740 <SystemClock_Config>
  MX_GPIO_Init();
 8005888:	f7ff fcec 	bl	8005264 <MX_GPIO_Init>
  MX_DMA_Init();
 800588c:	f7ff fdc2 	bl	8005414 <MX_DMA_Init>
  MX_SPI2_Init();
 8005890:	f7ff fdda 	bl	8005448 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005894:	f7ff fdfa 	bl	800548c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8005898:	f7ff fe10 	bl	80054bc <MX_ADC3_Init>
  MX_CRC_Init();
 800589c:	f7ff fe54 	bl	8005548 <MX_CRC_Init>
  MX_DMA2D_Init();
 80058a0:	f7ff fe64 	bl	800556c <MX_DMA2D_Init>
  MX_FMC_Init();
 80058a4:	f7ff fe7a 	bl	800559c <MX_FMC_Init>
  MX_LTDC_Init();
 80058a8:	f7ff fe9c 	bl	80055e4 <MX_LTDC_Init>
  MX_TIM1_Init();
 80058ac:	f7ff ff18 	bl	80056e0 <MX_TIM1_Init>
  MX_TIM13_Init();
 80058b0:	f7ff ff02 	bl	80056b8 <MX_TIM13_Init>
	if( HAL_ADC_Start(&hadc3) == HAL_OK) {
 80058b4:	481a      	ldr	r0, [pc, #104]	; (8005920 <main+0x118>)
 80058b6:	f7fc fba5 	bl	8002004 <HAL_ADC_Start>
	DWT_Init(); //For uS delays
 80058ba:	f7fc fa5f 	bl	8001d7c <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 80058be:	4c19      	ldr	r4, [pc, #100]	; (8005924 <main+0x11c>)
 80058c0:	2260      	movs	r2, #96	; 0x60
 80058c2:	1d21      	adds	r1, r4, #4
 80058c4:	4668      	mov	r0, sp
 80058c6:	f000 fe2b 	bl	8006520 <memcpy>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058d4:	4814      	ldr	r0, [pc, #80]	; (8005928 <main+0x120>)
 80058d6:	f7fb fe79 	bl	80015cc <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80058da:	4c14      	ldr	r4, [pc, #80]	; (800592c <main+0x124>)
 80058dc:	2270      	movs	r2, #112	; 0x70
 80058de:	f104 0110 	add.w	r1, r4, #16
 80058e2:	4668      	mov	r0, sp
 80058e4:	f000 fe1c 	bl	8006520 <memcpy>
 80058e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058ec:	f7fc fa28 	bl	8001d40 <nrf24_DebugUART_Init>
	NRF24_stopListening();
 80058f0:	f7fb fc89 	bl	8001206 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <main+0x128>)
 80058f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058fa:	f7fb fc8d 	bl	8001218 <NRF24_openWritingPipe>
	printRadioSettings();
 80058fe:	f7fb ff2f 	bl	8001760 <printRadioSettings>
	for (int i = 0; i < 31; ++i) {
 8005902:	2300      	movs	r3, #0
 8005904:	e003      	b.n	800590e <main+0x106>
		TxData[i] = 0;
 8005906:	4a0b      	ldr	r2, [pc, #44]	; (8005934 <main+0x12c>)
 8005908:	2100      	movs	r1, #0
 800590a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 31; ++i) {
 800590c:	3301      	adds	r3, #1
 800590e:	2b1e      	cmp	r3, #30
 8005910:	ddf9      	ble.n	8005906 <main+0xfe>
	HAL_TIM_Base_Start_IT(&htim13);
 8005912:	4809      	ldr	r0, [pc, #36]	; (8005938 <main+0x130>)
 8005914:	f7fe feda 	bl	80046cc <HAL_TIM_Base_Start_IT>
 8005918:	e7fe      	b.n	8005918 <main+0x110>
 800591a:	bf00      	nop
 800591c:	e000ed00 	.word	0xe000ed00
 8005920:	200004bc 	.word	0x200004bc
 8005924:	200002c4 	.word	0x200002c4
 8005928:	40020000 	.word	0x40020000
 800592c:	20000544 	.word	0x20000544
 8005930:	20000008 	.word	0x20000008
 8005934:	200005c8 	.word	0x200005c8
 8005938:	20000504 	.word	0x20000504

0800593c <packData>:

/* USER CODE BEGIN 4 */
void packData() {
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	ed2d 8b02 	vpush	{d8}

	//Reverse A2 and A3 as joystick is upside down
	adcArray[2] = 4096 - adcArray[2];
 8005942:	483d      	ldr	r0, [pc, #244]	; (8005a38 <packData+0xfc>)
 8005944:	6881      	ldr	r1, [r0, #8]
 8005946:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800594a:	6081      	str	r1, [r0, #8]
	adcArray[4] = 4096 - adcArray[4];
 800594c:	6902      	ldr	r2, [r0, #16]
 800594e:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8005952:	6102      	str	r2, [r0, #16]

	//L Joystick X
	//First byte = first byte of A0
	TxData[0] = adcArray[0];
 8005954:	6804      	ldr	r4, [r0, #0]
 8005956:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <packData+0x100>)
 8005958:	701c      	strb	r4, [r3, #0]
	//Second bytes = last byte of A0
	TxData[1] = adcArray[0] >> 8;
 800595a:	0a24      	lsrs	r4, r4, #8
 800595c:	705c      	strb	r4, [r3, #1]

	//L Joystick Y
	TxData[2] = adcArray[3];
 800595e:	68c0      	ldr	r0, [r0, #12]
 8005960:	7098      	strb	r0, [r3, #2]
	//4th byte = last 8 bits of A1
	TxData[3] = adcArray[3] >> 8;
 8005962:	0a00      	lsrs	r0, r0, #8
 8005964:	70d8      	strb	r0, [r3, #3]

	//R Joystick X
	TxData[4] = adcArray[2];
 8005966:	7119      	strb	r1, [r3, #4]
	TxData[5] = adcArray[2] >> 8;
 8005968:	0a09      	lsrs	r1, r1, #8
 800596a:	7159      	strb	r1, [r3, #5]
	//R Joystick Y
	TxData[6] = adcArray[4];
 800596c:	719a      	strb	r2, [r3, #6]
	TxData[7] = adcArray[4] >> 8;
 800596e:	0a12      	lsrs	r2, r2, #8
 8005970:	71da      	strb	r2, [r3, #7]

	//Air mode bit
	if (airmode) {
 8005972:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <packData+0x104>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d052      	beq.n	8005a20 <packData+0xe4>
		TxData[8] |= 1 << 0;
 800597a:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <packData+0x100>)
 800597c:	7a13      	ldrb	r3, [r2, #8]
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	7213      	strb	r3, [r2, #8]
	} else {
		TxData[8] &= ~(1 << 0);
	}

	//Kill switch
	if (kill) {
 8005984:	4b2f      	ldr	r3, [pc, #188]	; (8005a44 <packData+0x108>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d14f      	bne.n	8005a2c <packData+0xf0>

		TxData[8] |= 1 << 1;
	} else {
		TxData[8] &= ~(1 << 1);
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <packData+0x100>)
 800598e:	7a13      	ldrb	r3, [r2, #8]
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	7213      	strb	r3, [r2, #8]
	}


	uint16_t roll_p_tx = round(roll_p * 100);
 8005996:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <packData+0x10c>)
 8005998:	edd3 7a00 	vldr	s15, [r3]
 800599c:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8005a4c <packData+0x110>
 80059a0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059a4:	ee17 0a90 	vmov	r0, s15
 80059a8:	f7fa fdee 	bl	8000588 <__aeabi_f2d>
 80059ac:	ec41 0b10 	vmov	d0, r0, r1
 80059b0:	f004 faf6 	bl	8009fa0 <round>
 80059b4:	ec51 0b10 	vmov	r0, r1, d0
 80059b8:	f7fb f916 	bl	8000be8 <__aeabi_d2uiz>
 80059bc:	b285      	uxth	r5, r0
	uint16_t roll_i_tx = round(roll_i * 100) ;
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <packData+0x114>)
 80059c0:	edd3 7a00 	vldr	s15, [r3]
 80059c4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059c8:	ee17 0a90 	vmov	r0, s15
 80059cc:	f7fa fddc 	bl	8000588 <__aeabi_f2d>
 80059d0:	ec41 0b10 	vmov	d0, r0, r1
 80059d4:	f004 fae4 	bl	8009fa0 <round>
 80059d8:	ec51 0b10 	vmov	r0, r1, d0
 80059dc:	f7fb f904 	bl	8000be8 <__aeabi_d2uiz>
 80059e0:	b284      	uxth	r4, r0
	uint16_t roll_d_tx = round(roll_d * 100) ;
 80059e2:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <packData+0x118>)
 80059e4:	edd3 7a00 	vldr	s15, [r3]
 80059e8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059ec:	ee17 0a90 	vmov	r0, s15
 80059f0:	f7fa fdca 	bl	8000588 <__aeabi_f2d>
 80059f4:	ec41 0b10 	vmov	d0, r0, r1
 80059f8:	f004 fad2 	bl	8009fa0 <round>
 80059fc:	ec51 0b10 	vmov	r0, r1, d0
 8005a00:	f7fb f8f2 	bl	8000be8 <__aeabi_d2uiz>
 8005a04:	b280      	uxth	r0, r0

	TxData[9] = roll_p_tx;
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <packData+0x100>)
 8005a08:	725d      	strb	r5, [r3, #9]
	TxData[10] = roll_p_tx >> 8;
 8005a0a:	0a2d      	lsrs	r5, r5, #8
 8005a0c:	729d      	strb	r5, [r3, #10]

	TxData[11] = roll_i_tx;
 8005a0e:	72dc      	strb	r4, [r3, #11]
	TxData[12] = roll_i_tx >> 8;
 8005a10:	0a24      	lsrs	r4, r4, #8
 8005a12:	731c      	strb	r4, [r3, #12]

	TxData[13] = roll_d_tx;
 8005a14:	7358      	strb	r0, [r3, #13]
	TxData[14] = roll_d_tx >> 8;
 8005a16:	0a00      	lsrs	r0, r0, #8
 8005a18:	7398      	strb	r0, [r3, #14]

}
 8005a1a:	ecbd 8b02 	vpop	{d8}
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
		TxData[8] &= ~(1 << 0);
 8005a20:	4a06      	ldr	r2, [pc, #24]	; (8005a3c <packData+0x100>)
 8005a22:	7a13      	ldrb	r3, [r2, #8]
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	7213      	strb	r3, [r2, #8]
 8005a2a:	e7ab      	b.n	8005984 <packData+0x48>
		TxData[8] |= 1 << 1;
 8005a2c:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <packData+0x100>)
 8005a2e:	7a13      	ldrb	r3, [r2, #8]
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	7213      	strb	r3, [r2, #8]
 8005a36:	e7ae      	b.n	8005996 <packData+0x5a>
 8005a38:	2000034c 	.word	0x2000034c
 8005a3c:	200005c8 	.word	0x200005c8
 8005a40:	20000291 	.word	0x20000291
 8005a44:	20000293 	.word	0x20000293
 8005a48:	200002a8 	.word	0x200002a8
 8005a4c:	42c80000 	.word	0x42c80000
 8005a50:	200002a4 	.word	0x200002a4
 8005a54:	200002a0 	.word	0x200002a0

08005a58 <unpackAckPayload>:

void unpackAckPayload() {

	//Check if this is packet 0 or packet 1
	if (AckPayload[0] == 0x00) {
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <unpackAckPayload+0x60>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	bb5b      	cbnz	r3, 8005ab6 <unpackAckPayload+0x5e>

		droneBatteryLvl = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 8005a5e:	4916      	ldr	r1, [pc, #88]	; (8005ab8 <unpackAckPayload+0x60>)
 8005a60:	784b      	ldrb	r3, [r1, #1]
 8005a62:	788a      	ldrb	r2, [r1, #2]
 8005a64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <unpackAckPayload+0x64>)
 8005a6a:	6013      	str	r3, [r2, #0]
		int16_t roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 8005a6c:	78ca      	ldrb	r2, [r1, #3]
 8005a6e:	790b      	ldrb	r3, [r1, #4]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b21b      	sxth	r3, r3
 8005a74:	431a      	orrs	r2, r3
		roll = roll_rx / 100;
 8005a76:	4812      	ldr	r0, [pc, #72]	; (8005ac0 <unpackAckPayload+0x68>)
 8005a78:	fb80 c302 	smull	ip, r3, r0, r2
 8005a7c:	17d2      	asrs	r2, r2, #31
 8005a7e:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8005a82:	b212      	sxth	r2, r2
 8005a84:	ee07 2a90 	vmov	s15, r2
 8005a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <unpackAckPayload+0x6c>)
 8005a8e:	edc3 7a00 	vstr	s15, [r3]


		int16_t pitch_rx = (AckPayload[5] & 0xFF) | (AckPayload[6] << 8);
 8005a92:	794b      	ldrb	r3, [r1, #5]
 8005a94:	798a      	ldrb	r2, [r1, #6]
 8005a96:	0212      	lsls	r2, r2, #8
 8005a98:	b212      	sxth	r2, r2
 8005a9a:	4313      	orrs	r3, r2
		pitch = pitch_rx / 100;
 8005a9c:	fb80 2003 	smull	r2, r0, r0, r3
 8005aa0:	17db      	asrs	r3, r3, #31
 8005aa2:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <unpackAckPayload+0x70>)
 8005ab2:	edc3 7a00 	vstr	s15, [r3]
	//This is packet 1, only sent every
	if (AckPayload[0] == 0xFF) {

	}

}
 8005ab6:	4770      	bx	lr
 8005ab8:	2000032c 	.word	0x2000032c
 8005abc:	20000010 	.word	0x20000010
 8005ac0:	51eb851f 	.word	0x51eb851f
 8005ac4:	2000029c 	.word	0x2000029c
 8005ac8:	20000294 	.word	0x20000294

08005acc <read_rotary_1>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 8005acc:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_1 <<= 2;
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <read_rotary_1+0x70>)
 8005ad0:	7813      	ldrb	r3, [r2, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8005ad6:	2180      	movs	r1, #128	; 0x80
 8005ad8:	4819      	ldr	r0, [pc, #100]	; (8005b40 <read_rotary_1+0x74>)
 8005ada:	f7fd f8cd 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005ade:	2801      	cmp	r0, #1
 8005ae0:	d01a      	beq.n	8005b18 <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	4817      	ldr	r0, [pc, #92]	; (8005b44 <read_rotary_1+0x78>)
 8005ae6:	f7fd f8c7 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005aea:	2801      	cmp	r0, #1
 8005aec:	d01a      	beq.n	8005b24 <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 8005aee:	4913      	ldr	r1, [pc, #76]	; (8005b3c <read_rotary_1+0x70>)
 8005af0:	780b      	ldrb	r3, [r1, #0]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_1] ) {
 8005af8:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <read_rotary_1+0x7c>)
 8005afa:	5698      	ldrsb	r0, [r3, r2]
 8005afc:	b158      	cbz	r0, 8005b16 <read_rotary_1+0x4a>
		store_1 <<= 4;
 8005afe:	4913      	ldr	r1, [pc, #76]	; (8005b4c <read_rotary_1+0x80>)
 8005b00:	880b      	ldrh	r3, [r1, #0]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 8005b06:	4313      	orrs	r3, r2
 8005b08:	800b      	strh	r3, [r1, #0]
 8005b0a:	b2db      	uxtb	r3, r3

		if ((store_1&0xff)==0x2b) return -1;
 8005b0c:	2b2b      	cmp	r3, #43	; 0x2b
 8005b0e:	d011      	beq.n	8005b34 <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 8005b10:	2b17      	cmp	r3, #23
 8005b12:	d00d      	beq.n	8005b30 <read_rotary_1+0x64>
	}
	return 0;
 8005b14:	2000      	movs	r0, #0
}
 8005b16:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <read_rotary_1+0x70>)
 8005b1a:	7813      	ldrb	r3, [r2, #0]
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	e7de      	b.n	8005ae2 <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8005b24:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <read_rotary_1+0x70>)
 8005b26:	7813      	ldrb	r3, [r2, #0]
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	7013      	strb	r3, [r2, #0]
 8005b2e:	e7de      	b.n	8005aee <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 8005b30:	2001      	movs	r0, #1
 8005b32:	e7f0      	b.n	8005b16 <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b38:	e7ed      	b.n	8005b16 <read_rotary_1+0x4a>
 8005b3a:	bf00      	nop
 8005b3c:	20000298 	.word	0x20000298
 8005b40:	40021400 	.word	0x40021400
 8005b44:	40020800 	.word	0x40020800
 8005b48:	0800a4d0 	.word	0x0800a4d0
 8005b4c:	200002ac 	.word	0x200002ac

08005b50 <read_rotary_2>:


// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 8005b50:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_2 <<= 2;
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <read_rotary_2+0x70>)
 8005b54:	7813      	ldrb	r3, [r2, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8005b5a:	2110      	movs	r1, #16
 8005b5c:	4819      	ldr	r0, [pc, #100]	; (8005bc4 <read_rotary_2+0x74>)
 8005b5e:	f7fd f88b 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005b62:	2801      	cmp	r0, #1
 8005b64:	d01a      	beq.n	8005b9c <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	4817      	ldr	r0, [pc, #92]	; (8005bc8 <read_rotary_2+0x78>)
 8005b6a:	f7fd f885 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005b6e:	2801      	cmp	r0, #1
 8005b70:	d01a      	beq.n	8005ba8 <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 8005b72:	4913      	ldr	r1, [pc, #76]	; (8005bc0 <read_rotary_2+0x70>)
 8005b74:	780b      	ldrb	r3, [r1, #0]
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if  (rot_enc_table[prevNextCode_2] ) {
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <read_rotary_2+0x7c>)
 8005b7e:	5698      	ldrsb	r0, [r3, r2]
 8005b80:	b158      	cbz	r0, 8005b9a <read_rotary_2+0x4a>
		store_2 <<= 4;
 8005b82:	4913      	ldr	r1, [pc, #76]	; (8005bd0 <read_rotary_2+0x80>)
 8005b84:	880b      	ldrh	r3, [r1, #0]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	800b      	strh	r3, [r1, #0]
 8005b8e:	b2db      	uxtb	r3, r3

		if ((store_2&0xff)==0x2b) return -1;
 8005b90:	2b2b      	cmp	r3, #43	; 0x2b
 8005b92:	d011      	beq.n	8005bb8 <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 8005b94:	2b17      	cmp	r3, #23
 8005b96:	d00d      	beq.n	8005bb4 <read_rotary_2+0x64>
	}
	return 0;
 8005b98:	2000      	movs	r0, #0
}
 8005b9a:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8005b9c:	4a08      	ldr	r2, [pc, #32]	; (8005bc0 <read_rotary_2+0x70>)
 8005b9e:	7813      	ldrb	r3, [r2, #0]
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	7013      	strb	r3, [r2, #0]
 8005ba6:	e7de      	b.n	8005b66 <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8005ba8:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <read_rotary_2+0x70>)
 8005baa:	7813      	ldrb	r3, [r2, #0]
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	7013      	strb	r3, [r2, #0]
 8005bb2:	e7de      	b.n	8005b72 <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	e7f0      	b.n	8005b9a <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bbc:	e7ed      	b.n	8005b9a <read_rotary_2+0x4a>
 8005bbe:	bf00      	nop
 8005bc0:	20000299 	.word	0x20000299
 8005bc4:	40020400 	.word	0x40020400
 8005bc8:	40021800 	.word	0x40021800
 8005bcc:	0800a4e0 	.word	0x0800a4e0
 8005bd0:	200002ae 	.word	0x200002ae

08005bd4 <read_rotary_3>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 8005bd4:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_3 <<= 2;
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <read_rotary_3+0x70>)
 8005bd8:	7813      	ldrb	r3, [r2, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8005bde:	2140      	movs	r1, #64	; 0x40
 8005be0:	4819      	ldr	r0, [pc, #100]	; (8005c48 <read_rotary_3+0x74>)
 8005be2:	f7fd f849 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005be6:	2801      	cmp	r0, #1
 8005be8:	d01a      	beq.n	8005c20 <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8005bea:	2108      	movs	r1, #8
 8005bec:	4817      	ldr	r0, [pc, #92]	; (8005c4c <read_rotary_3+0x78>)
 8005bee:	f7fd f843 	bl	8002c78 <HAL_GPIO_ReadPin>
 8005bf2:	2801      	cmp	r0, #1
 8005bf4:	d01a      	beq.n	8005c2c <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 8005bf6:	4913      	ldr	r1, [pc, #76]	; (8005c44 <read_rotary_3+0x70>)
 8005bf8:	780b      	ldrb	r3, [r1, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_3] ) {
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <read_rotary_3+0x7c>)
 8005c02:	5698      	ldrsb	r0, [r3, r2]
 8005c04:	b158      	cbz	r0, 8005c1e <read_rotary_3+0x4a>
		store_3 <<= 4;
 8005c06:	4913      	ldr	r1, [pc, #76]	; (8005c54 <read_rotary_3+0x80>)
 8005c08:	880b      	ldrh	r3, [r1, #0]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	800b      	strh	r3, [r1, #0]
 8005c12:	b2db      	uxtb	r3, r3

		if ((store_3&0xff)==0x2b) return -1;
 8005c14:	2b2b      	cmp	r3, #43	; 0x2b
 8005c16:	d011      	beq.n	8005c3c <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 8005c18:	2b17      	cmp	r3, #23
 8005c1a:	d00d      	beq.n	8005c38 <read_rotary_3+0x64>
	}
	return 0;
 8005c1c:	2000      	movs	r0, #0
}
 8005c1e:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8005c20:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <read_rotary_3+0x70>)
 8005c22:	7813      	ldrb	r3, [r2, #0]
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	7013      	strb	r3, [r2, #0]
 8005c2a:	e7de      	b.n	8005bea <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8005c2c:	4a05      	ldr	r2, [pc, #20]	; (8005c44 <read_rotary_3+0x70>)
 8005c2e:	7813      	ldrb	r3, [r2, #0]
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	e7de      	b.n	8005bf6 <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e7f0      	b.n	8005c1e <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c40:	e7ed      	b.n	8005c1e <read_rotary_3+0x4a>
 8005c42:	bf00      	nop
 8005c44:	2000029a 	.word	0x2000029a
 8005c48:	40021c00 	.word	0x40021c00
 8005c4c:	40022000 	.word	0x40022000
 8005c50:	0800a4f0 	.word	0x0800a4f0
 8005c54:	200002b0 	.word	0x200002b0

08005c58 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8005c5c:	2880      	cmp	r0, #128	; 0x80
 8005c5e:	d004      	beq.n	8005c6a <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8005c60:	2c10      	cmp	r4, #16
 8005c62:	d025      	beq.n	8005cb0 <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8005c64:	2c40      	cmp	r4, #64	; 0x40
 8005c66:	d046      	beq.n	8005cf6 <HAL_GPIO_EXTI_Callback+0x9e>
}
 8005c68:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 8005c6a:	f7ff ff2f 	bl	8005acc <read_rotary_1>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d0f6      	beq.n	8005c60 <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 8005c72:	4b32      	ldr	r3, [pc, #200]	; (8005d3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d00b      	beq.n	8005c92 <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 8005c7e:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8005c80:	edd3 7a00 	vldr	s15, [r3]
 8005c84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c8c:	edc3 7a00 	vstr	s15, [r3]
 8005c90:	e7e6      	b.n	8005c60 <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 8005c92:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8005c94:	edd2 7a00 	vldr	s15, [r2]
 8005c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	ddeb      	ble.n	8005c7a <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 8005ca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005caa:	edc2 7a00 	vstr	s15, [r2]
 8005cae:	e7e4      	b.n	8005c7a <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 8005cb0:	f7ff ff4e 	bl	8005b50 <read_rotary_2>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d0d5      	beq.n	8005c64 <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 8005cb8:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <HAL_GPIO_EXTI_Callback+0xec>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b0b      	cmp	r3, #11
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 8005cc0:	2b07      	cmp	r3, #7
 8005cc2:	d1cf      	bne.n	8005c64 <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005cc6:	edd3 7a00 	vldr	s15, [r3]
 8005cca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cd2:	edc3 7a00 	vstr	s15, [r3]
 8005cd6:	e7c5      	b.n	8005c64 <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005cda:	edd2 7a00 	vldr	s15, [r2]
 8005cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce6:	ddeb      	ble.n	8005cc0 <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 8005ce8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cf0:	edc2 7a00 	vstr	s15, [r2]
 8005cf4:	e7e4      	b.n	8005cc0 <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 8005cf6:	f7ff ff6d 	bl	8005bd4 <read_rotary_3>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0b4      	beq.n	8005c68 <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <HAL_GPIO_EXTI_Callback+0xf4>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d00b      	beq.n	8005d1e <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d1ae      	bne.n	8005c68 <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d18:	edc3 7a00 	vstr	s15, [r3]
}
 8005d1c:	e7a4      	b.n	8005c68 <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 8005d1e:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005d20:	edd2 7a00 	vldr	s15, [r2]
 8005d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	ddeb      	ble.n	8005d06 <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 8005d2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d36:	edc2 7a00 	vstr	s15, [r2]
 8005d3a:	e7e4      	b.n	8005d06 <HAL_GPIO_EXTI_Callback+0xae>
 8005d3c:	20000298 	.word	0x20000298
 8005d40:	200002a0 	.word	0x200002a0
 8005d44:	20000299 	.word	0x20000299
 8005d48:	200002a4 	.word	0x200002a4
 8005d4c:	2000029a 	.word	0x2000029a
 8005d50:	200002a8 	.word	0x200002a8

08005d54 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){




}
 8005d54:	4770      	bx	lr

08005d56 <HAL_ADC_ErrorCallback>:





}
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if (htim->Instance == TIM13) {
 8005d58:	6802      	ldr	r2, [r0, #0]
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d000      	beq.n	8005d62 <HAL_TIM_PeriodElapsedCallback+0xa>
 8005d60:	4770      	bx	lr
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005d62:	b530      	push	{r4, r5, lr}
 8005d64:	b089      	sub	sp, #36	; 0x24
		packData();
 8005d66:	f7ff fde9 	bl	800593c <packData>

		//Transmit payload to drone
		if (NRF24_write(TxData, 32)) {
 8005d6a:	2120      	movs	r1, #32
 8005d6c:	4815      	ldr	r0, [pc, #84]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005d6e:	f7fb fbad 	bl	80014cc <NRF24_write>
 8005d72:	b930      	cbnz	r0, 8005d82 <HAL_TIM_PeriodElapsedCallback+0x2a>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
					10);
			connection = 1;
		} else {
			connection = 0;
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
		}

		unpackAckPayload();
 8005d7a:	f7ff fe6d 	bl	8005a58 <unpackAckPayload>
	}

}
 8005d7e:	b009      	add	sp, #36	; 0x24
 8005d80:	bd30      	pop	{r4, r5, pc}
			NRF24_read(AckPayload, 32);
 8005d82:	4d12      	ldr	r5, [pc, #72]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005d84:	2120      	movs	r1, #32
 8005d86:	4628      	mov	r0, r5
 8005d88:	f7fb fabd 	bl	8001306 <NRF24_read>
			HAL_UART_Transmit(&huart1,
 8005d8c:	4c10      	ldr	r4, [pc, #64]	; (8005dd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005d8e:	230a      	movs	r3, #10
 8005d90:	221a      	movs	r2, #26
 8005d92:	4910      	ldr	r1, [pc, #64]	; (8005dd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005d94:	4620      	mov	r0, r4
 8005d96:	f7ff f91e 	bl	8004fd6 <HAL_UART_Transmit>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	490e      	ldr	r1, [pc, #56]	; (8005dd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005d9e:	4668      	mov	r0, sp
 8005da0:	f001 fa16 	bl	80071d0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) myDataack, strlen(myDataack),
 8005da4:	4668      	mov	r0, sp
 8005da6:	f7fa fa33 	bl	8000210 <strlen>
 8005daa:	230a      	movs	r3, #10
 8005dac:	b282      	uxth	r2, r0
 8005dae:	4669      	mov	r1, sp
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff f910 	bl	8004fd6 <HAL_UART_Transmit>
			connection = 1;
 8005db6:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e7dd      	b.n	8005d7a <HAL_TIM_PeriodElapsedCallback+0x22>
 8005dbe:	bf00      	nop
 8005dc0:	40001c00 	.word	0x40001c00
 8005dc4:	200005c8 	.word	0x200005c8
 8005dc8:	20000292 	.word	0x20000292
 8005dcc:	2000032c 	.word	0x2000032c
 8005dd0:	20000544 	.word	0x20000544
 8005dd4:	0800a4a0 	.word	0x0800a4a0
 8005dd8:	0800a4bc 	.word	0x0800a4bc

08005ddc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005de4:	2300      	movs	r3, #0
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <HAL_FMC_MspInit+0xa8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b10b      	cbz	r3, 8005dfa <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005df6:	b007      	add	sp, #28
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8005dfa:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_FMC_MspInit+0xa8>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <HAL_FMC_MspInit+0xac>)
 8005e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8005e14:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005e18:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1a:	2602      	movs	r6, #2
 8005e1c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e1e:	2503      	movs	r5, #3
 8005e20:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e22:	240c      	movs	r4, #12
 8005e24:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e26:	a901      	add	r1, sp, #4
 8005e28:	4819      	ldr	r0, [pc, #100]	; (8005e90 <HAL_FMC_MspInit+0xb0>)
 8005e2a:	f7fc fe35 	bl	8002a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8005e2e:	f248 1311 	movw	r3, #33041	; 0x8111
 8005e32:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2700      	movs	r7, #0
 8005e38:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e3c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e3e:	a901      	add	r1, sp, #4
 8005e40:	4814      	ldr	r0, [pc, #80]	; (8005e94 <HAL_FMC_MspInit+0xb4>)
 8005e42:	f7fc fe29 	bl	8002a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8005e46:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005e4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e50:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e52:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e54:	a901      	add	r1, sp, #4
 8005e56:	4810      	ldr	r0, [pc, #64]	; (8005e98 <HAL_FMC_MspInit+0xb8>)
 8005e58:	f7fc fe1e 	bl	8002a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005e5c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005e60:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e62:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e66:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e68:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e6a:	a901      	add	r1, sp, #4
 8005e6c:	480b      	ldr	r0, [pc, #44]	; (8005e9c <HAL_FMC_MspInit+0xbc>)
 8005e6e:	f7fc fe13 	bl	8002a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8005e72:	232c      	movs	r3, #44	; 0x2c
 8005e74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e76:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e78:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e7c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005e7e:	a901      	add	r1, sp, #4
 8005e80:	4807      	ldr	r0, [pc, #28]	; (8005ea0 <HAL_FMC_MspInit+0xc0>)
 8005e82:	f7fc fe09 	bl	8002a98 <HAL_GPIO_Init>
 8005e86:	e7b6      	b.n	8005df6 <HAL_FMC_MspInit+0x16>
 8005e88:	200002b4 	.word	0x200002b4
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40021800 	.word	0x40021800
 8005e98:	40020c00 	.word	0x40020c00
 8005e9c:	40021400 	.word	0x40021400
 8005ea0:	40021c00 	.word	0x40021c00

08005ea4 <HAL_MspInit>:
{
 8005ea4:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <HAL_MspInit+0x2c>)
 8005ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
 8005eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005eb6:	9200      	str	r2, [sp, #0]
 8005eb8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	9b01      	ldr	r3, [sp, #4]
}
 8005ecc:	b002      	add	sp, #8
 8005ece:	4770      	bx	lr
 8005ed0:	40023800 	.word	0x40023800

08005ed4 <HAL_ADC_MspInit>:
{
 8005ed4:	b530      	push	{r4, r5, lr}
 8005ed6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	9306      	str	r3, [sp, #24]
 8005ee2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8005ee4:	6802      	ldr	r2, [r0, #0]
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <HAL_ADC_MspInit+0xcc>)
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_ADC_MspInit+0x1c>
}
 8005eec:	b009      	add	sp, #36	; 0x24
 8005eee:	bd30      	pop	{r4, r5, pc}
 8005ef0:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005ef2:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8005ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
 8005efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f00:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005f04:	9200      	str	r2, [sp, #0]
 8005f06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0a:	f042 0220 	orr.w	r2, r2, #32
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f12:	f002 0220 	and.w	r2, r2, #32
 8005f16:	9201      	str	r2, [sp, #4]
 8005f18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8005f2c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005f30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f32:	2503      	movs	r5, #3
 8005f34:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f36:	a903      	add	r1, sp, #12
 8005f38:	481a      	ldr	r0, [pc, #104]	; (8005fa4 <HAL_ADC_MspInit+0xd0>)
 8005f3a:	f7fc fdad 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f42:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f44:	2500      	movs	r5, #0
 8005f46:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8005f48:	a903      	add	r1, sp, #12
 8005f4a:	4817      	ldr	r0, [pc, #92]	; (8005fa8 <HAL_ADC_MspInit+0xd4>)
 8005f4c:	f7fc fda4 	bl	8002a98 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8005f50:	4816      	ldr	r0, [pc, #88]	; (8005fac <HAL_ADC_MspInit+0xd8>)
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <HAL_ADC_MspInit+0xdc>)
 8005f54:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f5a:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f5c:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f5e:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f64:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6a:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f70:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f76:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005f78:	6205      	str	r5, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f7a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005f7c:	f7fc fb94 	bl	80026a8 <HAL_DMA_Init>
 8005f80:	b958      	cbnz	r0, 8005f9a <HAL_ADC_MspInit+0xc6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <HAL_ADC_MspInit+0xd8>)
 8005f84:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f86:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	2012      	movs	r0, #18
 8005f8e:	f7fc fa5b 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005f92:	2012      	movs	r0, #18
 8005f94:	f7fc fa8a 	bl	80024ac <HAL_NVIC_EnableIRQ>
}
 8005f98:	e7a8      	b.n	8005eec <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8005f9a:	f7ff ff1f 	bl	8005ddc <Error_Handler>
 8005f9e:	e7f0      	b.n	8005f82 <HAL_ADC_MspInit+0xae>
 8005fa0:	40012200 	.word	0x40012200
 8005fa4:	40021400 	.word	0x40021400
 8005fa8:	40020000 	.word	0x40020000
 8005fac:	20000398 	.word	0x20000398
 8005fb0:	40026410 	.word	0x40026410

08005fb4 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8005fb4:	6802      	ldr	r2, [r0, #0]
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_CRC_MspInit+0x28>)
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d000      	beq.n	8005fbe <HAL_CRC_MspInit+0xa>
 8005fbc:	4770      	bx	lr
{
 8005fbe:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	9b01      	ldr	r3, [sp, #4]
}
 8005fd6:	b002      	add	sp, #8
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40023000 	.word	0x40023000

08005fe0 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8005fe0:	6802      	ldr	r2, [r0, #0]
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <HAL_DMA2D_MspInit+0x28>)
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d000      	beq.n	8005fea <HAL_DMA2D_MspInit+0xa>
 8005fe8:	4770      	bx	lr
{
 8005fea:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005fec:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	9b01      	ldr	r3, [sp, #4]
}
 8006002:	b002      	add	sp, #8
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	4002b000 	.word	0x4002b000

0800600c <HAL_LTDC_MspInit>:
{
 800600c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006010:	2300      	movs	r3, #0
 8006012:	9309      	str	r3, [sp, #36]	; 0x24
 8006014:	930a      	str	r3, [sp, #40]	; 0x28
 8006016:	930b      	str	r3, [sp, #44]	; 0x2c
 8006018:	930c      	str	r3, [sp, #48]	; 0x30
 800601a:	930d      	str	r3, [sp, #52]	; 0x34
  if(hltdc->Instance==LTDC)
 800601c:	6802      	ldr	r2, [r0, #0]
 800601e:	4b62      	ldr	r3, [pc, #392]	; (80061a8 <HAL_LTDC_MspInit+0x19c>)
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_LTDC_MspInit+0x1c>
}
 8006024:	b00f      	add	sp, #60	; 0x3c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006028:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800603a:	9200      	str	r2, [sp, #0]
 800603c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800603e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006040:	f042 0202 	orr.w	r2, r2, #2
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
 8006046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006048:	f002 0202 	and.w	r2, r2, #2
 800604c:	9201      	str	r2, [sp, #4]
 800604e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
 8006058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800605e:	9202      	str	r2, [sp, #8]
 8006060:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
 800606a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606c:	f002 0201 	and.w	r2, r2, #1
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
 800607c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800607e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006082:	9204      	str	r2, [sp, #16]
 8006084:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
 800608e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006090:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006094:	9205      	str	r2, [sp, #20]
 8006096:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
 80060a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a2:	f002 0208 	and.w	r2, r2, #8
 80060a6:	9206      	str	r2, [sp, #24]
 80060a8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80060aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
 80060b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80060b8:	9207      	str	r2, [sp, #28]
 80060ba:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ca:	9308      	str	r3, [sp, #32]
 80060cc:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80060ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80060d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2502      	movs	r5, #2
 80060d6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80060d8:	260e      	movs	r6, #14
 80060da:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060dc:	a909      	add	r1, sp, #36	; 0x24
 80060de:	4833      	ldr	r0, [pc, #204]	; (80061ac <HAL_LTDC_MspInit+0x1a0>)
 80060e0:	f7fc fcda 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 80060e4:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ea:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2400      	movs	r4, #0
 80060ee:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80060f2:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060f4:	4f2e      	ldr	r7, [pc, #184]	; (80061b0 <HAL_LTDC_MspInit+0x1a4>)
 80060f6:	a909      	add	r1, sp, #36	; 0x24
 80060f8:	4638      	mov	r0, r7
 80060fa:	f7fc fccd 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80060fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006102:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006104:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006106:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006108:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800610a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610c:	a909      	add	r1, sp, #36	; 0x24
 800610e:	4829      	ldr	r0, [pc, #164]	; (80061b4 <HAL_LTDC_MspInit+0x1a8>)
 8006110:	f7fc fcc2 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 8006114:	f244 6330 	movw	r3, #17968	; 0x4630
 8006118:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006120:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006122:	a909      	add	r1, sp, #36	; 0x24
 8006124:	4824      	ldr	r0, [pc, #144]	; (80061b8 <HAL_LTDC_MspInit+0x1ac>)
 8006126:	f7fc fcb7 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 800612a:	2383      	movs	r3, #131	; 0x83
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006132:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006134:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006136:	a909      	add	r1, sp, #36	; 0x24
 8006138:	4820      	ldr	r0, [pc, #128]	; (80061bc <HAL_LTDC_MspInit+0x1b0>)
 800613a:	f7fc fcad 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006144:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006146:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006148:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800614a:	2309      	movs	r3, #9
 800614c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800614e:	a909      	add	r1, sp, #36	; 0x24
 8006150:	4638      	mov	r0, r7
 8006152:	f7fc fca1 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006156:	2308      	movs	r3, #8
 8006158:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006160:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006162:	a909      	add	r1, sp, #36	; 0x24
 8006164:	4816      	ldr	r0, [pc, #88]	; (80061c0 <HAL_LTDC_MspInit+0x1b4>)
 8006166:	f7fc fc97 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 800616a:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 800616e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006174:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006176:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006178:	a909      	add	r1, sp, #36	; 0x24
 800617a:	4812      	ldr	r0, [pc, #72]	; (80061c4 <HAL_LTDC_MspInit+0x1b8>)
 800617c:	f7fc fc8c 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006180:	2320      	movs	r3, #32
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006184:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006188:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800618a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800618c:	a909      	add	r1, sp, #36	; 0x24
 800618e:	480e      	ldr	r0, [pc, #56]	; (80061c8 <HAL_LTDC_MspInit+0x1bc>)
 8006190:	f7fc fc82 	bl	8002a98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8006194:	4622      	mov	r2, r4
 8006196:	4621      	mov	r1, r4
 8006198:	2058      	movs	r0, #88	; 0x58
 800619a:	f7fc f955 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800619e:	2058      	movs	r0, #88	; 0x58
 80061a0:	f7fc f984 	bl	80024ac <HAL_NVIC_EnableIRQ>
}
 80061a4:	e73e      	b.n	8006024 <HAL_LTDC_MspInit+0x18>
 80061a6:	bf00      	nop
 80061a8:	40016800 	.word	0x40016800
 80061ac:	40020400 	.word	0x40020400
 80061b0:	40021800 	.word	0x40021800
 80061b4:	40020000 	.word	0x40020000
 80061b8:	40022000 	.word	0x40022000
 80061bc:	40022800 	.word	0x40022800
 80061c0:	40020c00 	.word	0x40020c00
 80061c4:	40021c00 	.word	0x40021c00
 80061c8:	40022400 	.word	0x40022400

080061cc <HAL_SPI_MspInit>:
{
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d0:	2300      	movs	r3, #0
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	9305      	str	r3, [sp, #20]
 80061d8:	9306      	str	r3, [sp, #24]
 80061da:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80061dc:	6802      	ldr	r2, [r0, #0]
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_SPI_MspInit+0x98>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_SPI_MspInit+0x1c>
}
 80061e4:	b008      	add	sp, #32
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80061ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
 80061f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80061fa:	9200      	str	r2, [sp, #0]
 80061fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
 8006206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006208:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800620c:	9201      	str	r2, [sp, #4]
 800620e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006212:	f042 0202 	orr.w	r2, r2, #2
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006222:	2502      	movs	r5, #2
 8006224:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006228:	2603      	movs	r6, #3
 800622a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800622c:	2405      	movs	r4, #5
 800622e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006230:	a903      	add	r1, sp, #12
 8006232:	480d      	ldr	r0, [pc, #52]	; (8006268 <HAL_SPI_MspInit+0x9c>)
 8006234:	f7fc fc30 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006238:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800623c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	2500      	movs	r5, #0
 8006242:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006244:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006246:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006248:	a903      	add	r1, sp, #12
 800624a:	4808      	ldr	r0, [pc, #32]	; (800626c <HAL_SPI_MspInit+0xa0>)
 800624c:	f7fc fc24 	bl	8002a98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8006250:	462a      	mov	r2, r5
 8006252:	4621      	mov	r1, r4
 8006254:	2024      	movs	r0, #36	; 0x24
 8006256:	f7fc f8f7 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800625a:	2024      	movs	r0, #36	; 0x24
 800625c:	f7fc f926 	bl	80024ac <HAL_NVIC_EnableIRQ>
}
 8006260:	e7c0      	b.n	80061e4 <HAL_SPI_MspInit+0x18>
 8006262:	bf00      	nop
 8006264:	40003800 	.word	0x40003800
 8006268:	40022000 	.word	0x40022000
 800626c:	40020400 	.word	0x40020400

08006270 <HAL_TIM_Base_MspInit>:
{
 8006270:	b500      	push	{lr}
 8006272:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <HAL_TIM_Base_MspInit+0x54>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d005      	beq.n	8006288 <HAL_TIM_Base_MspInit+0x18>
  else if(htim_base->Instance==TIM13)
 800627c:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <HAL_TIM_Base_MspInit+0x58>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00d      	beq.n	800629e <HAL_TIM_Base_MspInit+0x2e>
}
 8006282:	b003      	add	sp, #12
 8006284:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006288:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_TIM_Base_MspInit+0x5c>)
 800628a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	645a      	str	r2, [r3, #68]	; 0x44
 8006292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	e7f1      	b.n	8006282 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <HAL_TIM_Base_MspInit+0x5c>)
 80062a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80062b2:	2200      	movs	r2, #0
 80062b4:	4611      	mov	r1, r2
 80062b6:	202c      	movs	r0, #44	; 0x2c
 80062b8:	f7fc f8c6 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80062bc:	202c      	movs	r0, #44	; 0x2c
 80062be:	f7fc f8f5 	bl	80024ac <HAL_NVIC_EnableIRQ>
}
 80062c2:	e7de      	b.n	8006282 <HAL_TIM_Base_MspInit+0x12>
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40001c00 	.word	0x40001c00
 80062cc:	40023800 	.word	0x40023800

080062d0 <HAL_UART_MspInit>:
{
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d4:	2300      	movs	r3, #0
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	9306      	str	r3, [sp, #24]
 80062de:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80062e0:	6802      	ldr	r2, [r0, #0]
 80062e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062e6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d001      	beq.n	80062f2 <HAL_UART_MspInit+0x22>
}
 80062ee:	b008      	add	sp, #32
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80062f2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80062f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f8:	f042 0210 	orr.w	r2, r2, #16
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
 80062fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006300:	f002 0210 	and.w	r2, r2, #16
 8006304:	9200      	str	r2, [sp, #0]
 8006306:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630a:	f042 0202 	orr.w	r2, r2, #2
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
 8006310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006312:	f002 0202 	and.w	r2, r2, #2
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006330:	2602      	movs	r6, #2
 8006332:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006334:	2503      	movs	r5, #3
 8006336:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006338:	2407      	movs	r4, #7
 800633a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800633c:	a903      	add	r1, sp, #12
 800633e:	4808      	ldr	r0, [pc, #32]	; (8006360 <HAL_UART_MspInit+0x90>)
 8006340:	f7fc fbaa 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006348:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634c:	2300      	movs	r3, #0
 800634e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006350:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006352:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006354:	a903      	add	r1, sp, #12
 8006356:	4803      	ldr	r0, [pc, #12]	; (8006364 <HAL_UART_MspInit+0x94>)
 8006358:	f7fc fb9e 	bl	8002a98 <HAL_GPIO_Init>
}
 800635c:	e7c7      	b.n	80062ee <HAL_UART_MspInit+0x1e>
 800635e:	bf00      	nop
 8006360:	40020400 	.word	0x40020400
 8006364:	40020000 	.word	0x40020000

08006368 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800636a:	f7ff fd39 	bl	8005de0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800636e:	bd08      	pop	{r3, pc}

08006370 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006370:	4770      	bx	lr

08006372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006372:	e7fe      	b.n	8006372 <HardFault_Handler>

08006374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006374:	e7fe      	b.n	8006374 <MemManage_Handler>

08006376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006376:	e7fe      	b.n	8006376 <BusFault_Handler>

08006378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006378:	e7fe      	b.n	8006378 <UsageFault_Handler>

0800637a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800637a:	4770      	bx	lr

0800637c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800637c:	4770      	bx	lr

0800637e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800637e:	4770      	bx	lr

08006380 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006382:	2010      	movs	r0, #16
 8006384:	f7fc fc86 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006388:	bd08      	pop	{r3, pc}
	...

0800638c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800638c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800638e:	4802      	ldr	r0, [pc, #8]	; (8006398 <ADC_IRQHandler+0xc>)
 8006390:	f7fb fecb 	bl	800212a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006394:	bd08      	pop	{r3, pc}
 8006396:	bf00      	nop
 8006398:	200004bc 	.word	0x200004bc

0800639c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800639c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800639e:	2040      	movs	r0, #64	; 0x40
 80063a0:	f7fc fc78 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80063a4:	2080      	movs	r0, #128	; 0x80
 80063a6:	f7fc fc75 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80063aa:	bd08      	pop	{r3, pc}

080063ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80063ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80063ae:	4802      	ldr	r0, [pc, #8]	; (80063b8 <SPI2_IRQHandler+0xc>)
 80063b0:	f7fe f8c4 	bl	800453c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80063b4:	bd08      	pop	{r3, pc}
 80063b6:	bf00      	nop
 80063b8:	200002c4 	.word	0x200002c4

080063bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80063bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80063be:	4802      	ldr	r0, [pc, #8]	; (80063c8 <TIM8_UP_TIM13_IRQHandler+0xc>)
 80063c0:	f7fe f99e 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80063c4:	bd08      	pop	{r3, pc}
 80063c6:	bf00      	nop
 80063c8:	20000504 	.word	0x20000504

080063cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80063cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80063ce:	4802      	ldr	r0, [pc, #8]	; (80063d8 <DMA2_Stream0_IRQHandler+0xc>)
 80063d0:	f7fc f9e4 	bl	800279c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80063d4:	bd08      	pop	{r3, pc}
 80063d6:	bf00      	nop
 80063d8:	20000398 	.word	0x20000398

080063dc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80063dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80063de:	4802      	ldr	r0, [pc, #8]	; (80063e8 <LTDC_IRQHandler+0xc>)
 80063e0:	f7fc fdad 	bl	8002f3e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80063e4:	bd08      	pop	{r3, pc}
 80063e6:	bf00      	nop
 80063e8:	20000414 	.word	0x20000414

080063ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063ec:	b508      	push	{r3, lr}
 80063ee:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063f0:	4a0b      	ldr	r2, [pc, #44]	; (8006420 <_sbrk+0x34>)
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	b142      	cbz	r2, 8006408 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <_sbrk+0x34>)
 80063f8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80063fa:	4403      	add	r3, r0
 80063fc:	466a      	mov	r2, sp
 80063fe:	4293      	cmp	r3, r2
 8006400:	d806      	bhi.n	8006410 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006402:	4a07      	ldr	r2, [pc, #28]	; (8006420 <_sbrk+0x34>)
 8006404:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006406:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006408:	4a05      	ldr	r2, [pc, #20]	; (8006420 <_sbrk+0x34>)
 800640a:	4906      	ldr	r1, [pc, #24]	; (8006424 <_sbrk+0x38>)
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	e7f2      	b.n	80063f6 <_sbrk+0xa>
		errno = ENOMEM;
 8006410:	f000 f85c 	bl	80064cc <__errno>
 8006414:	230c      	movs	r3, #12
 8006416:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800641c:	e7f3      	b.n	8006406 <_sbrk+0x1a>
 800641e:	bf00      	nop
 8006420:	200002b8 	.word	0x200002b8
 8006424:	200006a8 	.word	0x200006a8

08006428 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006428:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800642a:	4a0f      	ldr	r2, [pc, #60]	; (8006468 <SystemInit+0x40>)
 800642c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <SystemInit+0x44>)
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	f041 0101 	orr.w	r1, r1, #1
 8006440:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006442:	2000      	movs	r0, #0
 8006444:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006446:	681c      	ldr	r4, [r3, #0]
 8006448:	4909      	ldr	r1, [pc, #36]	; (8006470 <SystemInit+0x48>)
 800644a:	4021      	ands	r1, r4
 800644c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800644e:	4909      	ldr	r1, [pc, #36]	; (8006474 <SystemInit+0x4c>)
 8006450:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006458:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800645a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800645c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006460:	6093      	str	r3, [r2, #8]
#endif
}
 8006462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	e000ed00 	.word	0xe000ed00
 800646c:	40023800 	.word	0x40023800
 8006470:	fef6ffff 	.word	0xfef6ffff
 8006474:	24003010 	.word	0x24003010

08006478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800647c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800647e:	e003      	b.n	8006488 <LoopCopyDataInit>

08006480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006486:	3104      	adds	r1, #4

08006488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006488:	480b      	ldr	r0, [pc, #44]	; (80064b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800648a:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800648c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800648e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006490:	d3f6      	bcc.n	8006480 <CopyDataInit>
  ldr  r2, =_sbss
 8006492:	4a0b      	ldr	r2, [pc, #44]	; (80064c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006494:	e002      	b.n	800649c <LoopFillZerobss>

08006496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006498:	f842 3b04 	str.w	r3, [r2], #4

0800649c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800649e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80064a0:	d3f9      	bcc.n	8006496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80064a2:	f7ff ffc1 	bl	8006428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064a6:	f000 f817 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064aa:	f7ff f9ad 	bl	8005808 <main>
  bx  lr    
 80064ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80064b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80064b4:	0800a7e0 	.word	0x0800a7e0
  ldr  r0, =_sdata
 80064b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80064bc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80064c0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80064c4:	200006a8 	.word	0x200006a8

080064c8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064c8:	e7fe      	b.n	80064c8 <CAN1_RX0_IRQHandler>
	...

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000018 	.word	0x20000018

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4e0d      	ldr	r6, [pc, #52]	; (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064de:	1ba4      	subs	r4, r4, r6
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2500      	movs	r5, #0
 80064e4:	42a5      	cmp	r5, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4e0b      	ldr	r6, [pc, #44]	; (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	; (800651c <__libc_init_array+0x44>)
 80064ec:	f003 fda2 	bl	800a034 <_init>
 80064f0:	1ba4      	subs	r4, r4, r6
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2500      	movs	r5, #0
 80064f6:	42a5      	cmp	r5, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006500:	4798      	blx	r3
 8006502:	3501      	adds	r5, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800650a:	4798      	blx	r3
 800650c:	3501      	adds	r5, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	0800a7d8 	.word	0x0800a7d8
 8006514:	0800a7d8 	.word	0x0800a7d8
 8006518:	0800a7d8 	.word	0x0800a7d8
 800651c:	0800a7dc 	.word	0x0800a7dc

08006520 <memcpy>:
 8006520:	b510      	push	{r4, lr}
 8006522:	1e43      	subs	r3, r0, #1
 8006524:	440a      	add	r2, r1
 8006526:	4291      	cmp	r1, r2
 8006528:	d100      	bne.n	800652c <memcpy+0xc>
 800652a:	bd10      	pop	{r4, pc}
 800652c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006534:	e7f7      	b.n	8006526 <memcpy+0x6>

08006536 <memset>:
 8006536:	4402      	add	r2, r0
 8006538:	4603      	mov	r3, r0
 800653a:	4293      	cmp	r3, r2
 800653c:	d100      	bne.n	8006540 <memset+0xa>
 800653e:	4770      	bx	lr
 8006540:	f803 1b01 	strb.w	r1, [r3], #1
 8006544:	e7f9      	b.n	800653a <memset+0x4>

08006546 <__cvt>:
 8006546:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800654a:	ec55 4b10 	vmov	r4, r5, d0
 800654e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006554:	2d00      	cmp	r5, #0
 8006556:	460e      	mov	r6, r1
 8006558:	4691      	mov	r9, r2
 800655a:	4619      	mov	r1, r3
 800655c:	bfb8      	it	lt
 800655e:	4622      	movlt	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	f027 0720 	bic.w	r7, r7, #32
 8006566:	bfbb      	ittet	lt
 8006568:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800656c:	461d      	movlt	r5, r3
 800656e:	2300      	movge	r3, #0
 8006570:	232d      	movlt	r3, #45	; 0x2d
 8006572:	bfb8      	it	lt
 8006574:	4614      	movlt	r4, r2
 8006576:	2f46      	cmp	r7, #70	; 0x46
 8006578:	700b      	strb	r3, [r1, #0]
 800657a:	d004      	beq.n	8006586 <__cvt+0x40>
 800657c:	2f45      	cmp	r7, #69	; 0x45
 800657e:	d100      	bne.n	8006582 <__cvt+0x3c>
 8006580:	3601      	adds	r6, #1
 8006582:	2102      	movs	r1, #2
 8006584:	e000      	b.n	8006588 <__cvt+0x42>
 8006586:	2103      	movs	r1, #3
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	ab02      	add	r3, sp, #8
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	4632      	mov	r2, r6
 8006592:	4653      	mov	r3, sl
 8006594:	ec45 4b10 	vmov	d0, r4, r5
 8006598:	f001 fd76 	bl	8008088 <_dtoa_r>
 800659c:	2f47      	cmp	r7, #71	; 0x47
 800659e:	4680      	mov	r8, r0
 80065a0:	d102      	bne.n	80065a8 <__cvt+0x62>
 80065a2:	f019 0f01 	tst.w	r9, #1
 80065a6:	d026      	beq.n	80065f6 <__cvt+0xb0>
 80065a8:	2f46      	cmp	r7, #70	; 0x46
 80065aa:	eb08 0906 	add.w	r9, r8, r6
 80065ae:	d111      	bne.n	80065d4 <__cvt+0x8e>
 80065b0:	f898 3000 	ldrb.w	r3, [r8]
 80065b4:	2b30      	cmp	r3, #48	; 0x30
 80065b6:	d10a      	bne.n	80065ce <__cvt+0x88>
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7fa faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80065c4:	b918      	cbnz	r0, 80065ce <__cvt+0x88>
 80065c6:	f1c6 0601 	rsb	r6, r6, #1
 80065ca:	f8ca 6000 	str.w	r6, [sl]
 80065ce:	f8da 3000 	ldr.w	r3, [sl]
 80065d2:	4499      	add	r9, r3
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7fa fa94 	bl	8000b08 <__aeabi_dcmpeq>
 80065e0:	b938      	cbnz	r0, 80065f2 <__cvt+0xac>
 80065e2:	2230      	movs	r2, #48	; 0x30
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	454b      	cmp	r3, r9
 80065e8:	d205      	bcs.n	80065f6 <__cvt+0xb0>
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	9103      	str	r1, [sp, #12]
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e7f8      	b.n	80065e4 <__cvt+0x9e>
 80065f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065fa:	eba3 0308 	sub.w	r3, r3, r8
 80065fe:	4640      	mov	r0, r8
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	b004      	add	sp, #16
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006608 <__exponent>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	2900      	cmp	r1, #0
 800660c:	4604      	mov	r4, r0
 800660e:	bfba      	itte	lt
 8006610:	4249      	neglt	r1, r1
 8006612:	232d      	movlt	r3, #45	; 0x2d
 8006614:	232b      	movge	r3, #43	; 0x2b
 8006616:	2909      	cmp	r1, #9
 8006618:	f804 2b02 	strb.w	r2, [r4], #2
 800661c:	7043      	strb	r3, [r0, #1]
 800661e:	dd20      	ble.n	8006662 <__exponent+0x5a>
 8006620:	f10d 0307 	add.w	r3, sp, #7
 8006624:	461f      	mov	r7, r3
 8006626:	260a      	movs	r6, #10
 8006628:	fb91 f5f6 	sdiv	r5, r1, r6
 800662c:	fb06 1115 	mls	r1, r6, r5, r1
 8006630:	3130      	adds	r1, #48	; 0x30
 8006632:	2d09      	cmp	r5, #9
 8006634:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006638:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800663c:	4629      	mov	r1, r5
 800663e:	dc09      	bgt.n	8006654 <__exponent+0x4c>
 8006640:	3130      	adds	r1, #48	; 0x30
 8006642:	3b02      	subs	r3, #2
 8006644:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006648:	42bb      	cmp	r3, r7
 800664a:	4622      	mov	r2, r4
 800664c:	d304      	bcc.n	8006658 <__exponent+0x50>
 800664e:	1a10      	subs	r0, r2, r0
 8006650:	b003      	add	sp, #12
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006654:	4613      	mov	r3, r2
 8006656:	e7e7      	b.n	8006628 <__exponent+0x20>
 8006658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665c:	f804 2b01 	strb.w	r2, [r4], #1
 8006660:	e7f2      	b.n	8006648 <__exponent+0x40>
 8006662:	2330      	movs	r3, #48	; 0x30
 8006664:	4419      	add	r1, r3
 8006666:	7083      	strb	r3, [r0, #2]
 8006668:	1d02      	adds	r2, r0, #4
 800666a:	70c1      	strb	r1, [r0, #3]
 800666c:	e7ef      	b.n	800664e <__exponent+0x46>
	...

08006670 <_printf_float>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	b08d      	sub	sp, #52	; 0x34
 8006676:	460c      	mov	r4, r1
 8006678:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800667c:	4616      	mov	r6, r2
 800667e:	461f      	mov	r7, r3
 8006680:	4605      	mov	r5, r0
 8006682:	f002 fde5 	bl	8009250 <_localeconv_r>
 8006686:	6803      	ldr	r3, [r0, #0]
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	4618      	mov	r0, r3
 800668c:	f7f9 fdc0 	bl	8000210 <strlen>
 8006690:	2300      	movs	r3, #0
 8006692:	930a      	str	r3, [sp, #40]	; 0x28
 8006694:	f8d8 3000 	ldr.w	r3, [r8]
 8006698:	9005      	str	r0, [sp, #20]
 800669a:	3307      	adds	r3, #7
 800669c:	f023 0307 	bic.w	r3, r3, #7
 80066a0:	f103 0208 	add.w	r2, r3, #8
 80066a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066a8:	f8d4 b000 	ldr.w	fp, [r4]
 80066ac:	f8c8 2000 	str.w	r2, [r8]
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ca:	4ba7      	ldr	r3, [pc, #668]	; (8006968 <_printf_float+0x2f8>)
 80066cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d0:	f7fa fa4c 	bl	8000b6c <__aeabi_dcmpun>
 80066d4:	bb70      	cbnz	r0, 8006734 <_printf_float+0xc4>
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066da:	4ba3      	ldr	r3, [pc, #652]	; (8006968 <_printf_float+0x2f8>)
 80066dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e0:	f7fa fa26 	bl	8000b30 <__aeabi_dcmple>
 80066e4:	bb30      	cbnz	r0, 8006734 <_printf_float+0xc4>
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7fa fa15 	bl	8000b1c <__aeabi_dcmplt>
 80066f2:	b110      	cbz	r0, 80066fa <_printf_float+0x8a>
 80066f4:	232d      	movs	r3, #45	; 0x2d
 80066f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066fa:	4a9c      	ldr	r2, [pc, #624]	; (800696c <_printf_float+0x2fc>)
 80066fc:	4b9c      	ldr	r3, [pc, #624]	; (8006970 <_printf_float+0x300>)
 80066fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006702:	bf8c      	ite	hi
 8006704:	4690      	movhi	r8, r2
 8006706:	4698      	movls	r8, r3
 8006708:	2303      	movs	r3, #3
 800670a:	f02b 0204 	bic.w	r2, fp, #4
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	f04f 0900 	mov.w	r9, #0
 8006716:	9700      	str	r7, [sp, #0]
 8006718:	4633      	mov	r3, r6
 800671a:	aa0b      	add	r2, sp, #44	; 0x2c
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f9e6 	bl	8006af0 <_printf_common>
 8006724:	3001      	adds	r0, #1
 8006726:	f040 808d 	bne.w	8006844 <_printf_float+0x1d4>
 800672a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800672e:	b00d      	add	sp, #52	; 0x34
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7fa fa16 	bl	8000b6c <__aeabi_dcmpun>
 8006740:	b110      	cbz	r0, 8006748 <_printf_float+0xd8>
 8006742:	4a8c      	ldr	r2, [pc, #560]	; (8006974 <_printf_float+0x304>)
 8006744:	4b8c      	ldr	r3, [pc, #560]	; (8006978 <_printf_float+0x308>)
 8006746:	e7da      	b.n	80066fe <_printf_float+0x8e>
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	1c4b      	adds	r3, r1, #1
 800674c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006750:	a80a      	add	r0, sp, #40	; 0x28
 8006752:	d13e      	bne.n	80067d2 <_printf_float+0x162>
 8006754:	2306      	movs	r3, #6
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	2300      	movs	r3, #0
 800675a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800675e:	ab09      	add	r3, sp, #36	; 0x24
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	ec49 8b10 	vmov	d0, r8, r9
 8006766:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	f8cd a004 	str.w	sl, [sp, #4]
 8006770:	6861      	ldr	r1, [r4, #4]
 8006772:	4628      	mov	r0, r5
 8006774:	f7ff fee7 	bl	8006546 <__cvt>
 8006778:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800677c:	2b47      	cmp	r3, #71	; 0x47
 800677e:	4680      	mov	r8, r0
 8006780:	d109      	bne.n	8006796 <_printf_float+0x126>
 8006782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006784:	1cd8      	adds	r0, r3, #3
 8006786:	db02      	blt.n	800678e <_printf_float+0x11e>
 8006788:	6862      	ldr	r2, [r4, #4]
 800678a:	4293      	cmp	r3, r2
 800678c:	dd47      	ble.n	800681e <_printf_float+0x1ae>
 800678e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006792:	fa5f fa8a 	uxtb.w	sl, sl
 8006796:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800679a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800679c:	d824      	bhi.n	80067e8 <_printf_float+0x178>
 800679e:	3901      	subs	r1, #1
 80067a0:	4652      	mov	r2, sl
 80067a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067a6:	9109      	str	r1, [sp, #36]	; 0x24
 80067a8:	f7ff ff2e 	bl	8006608 <__exponent>
 80067ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ae:	1813      	adds	r3, r2, r0
 80067b0:	2a01      	cmp	r2, #1
 80067b2:	4681      	mov	r9, r0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	dc02      	bgt.n	80067be <_printf_float+0x14e>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	07d1      	lsls	r1, r2, #31
 80067bc:	d501      	bpl.n	80067c2 <_printf_float+0x152>
 80067be:	3301      	adds	r3, #1
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0a5      	beq.n	8006716 <_printf_float+0xa6>
 80067ca:	232d      	movs	r3, #45	; 0x2d
 80067cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d0:	e7a1      	b.n	8006716 <_printf_float+0xa6>
 80067d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067d6:	f000 8177 	beq.w	8006ac8 <_printf_float+0x458>
 80067da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067de:	d1bb      	bne.n	8006758 <_printf_float+0xe8>
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d1b9      	bne.n	8006758 <_printf_float+0xe8>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e7b6      	b.n	8006756 <_printf_float+0xe6>
 80067e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067ec:	d119      	bne.n	8006822 <_printf_float+0x1b2>
 80067ee:	2900      	cmp	r1, #0
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	dd0c      	ble.n	800680e <_printf_float+0x19e>
 80067f4:	6121      	str	r1, [r4, #16]
 80067f6:	b913      	cbnz	r3, 80067fe <_printf_float+0x18e>
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	07d2      	lsls	r2, r2, #31
 80067fc:	d502      	bpl.n	8006804 <_printf_float+0x194>
 80067fe:	3301      	adds	r3, #1
 8006800:	440b      	add	r3, r1
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006806:	65a3      	str	r3, [r4, #88]	; 0x58
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	e7d9      	b.n	80067c2 <_printf_float+0x152>
 800680e:	b913      	cbnz	r3, 8006816 <_printf_float+0x1a6>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	07d0      	lsls	r0, r2, #31
 8006814:	d501      	bpl.n	800681a <_printf_float+0x1aa>
 8006816:	3302      	adds	r3, #2
 8006818:	e7f3      	b.n	8006802 <_printf_float+0x192>
 800681a:	2301      	movs	r3, #1
 800681c:	e7f1      	b.n	8006802 <_printf_float+0x192>
 800681e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006822:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006826:	4293      	cmp	r3, r2
 8006828:	db05      	blt.n	8006836 <_printf_float+0x1c6>
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	07d1      	lsls	r1, r2, #31
 8006830:	d5e8      	bpl.n	8006804 <_printf_float+0x194>
 8006832:	3301      	adds	r3, #1
 8006834:	e7e5      	b.n	8006802 <_printf_float+0x192>
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfd4      	ite	le
 800683a:	f1c3 0302 	rsble	r3, r3, #2
 800683e:	2301      	movgt	r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	e7de      	b.n	8006802 <_printf_float+0x192>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	055a      	lsls	r2, r3, #21
 8006848:	d407      	bmi.n	800685a <_printf_float+0x1ea>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	4642      	mov	r2, r8
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	d12b      	bne.n	80068b0 <_printf_float+0x240>
 8006858:	e767      	b.n	800672a <_printf_float+0xba>
 800685a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800685e:	f240 80dc 	bls.w	8006a1a <_printf_float+0x3aa>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800686a:	f7fa f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d033      	beq.n	80068da <_printf_float+0x26a>
 8006872:	2301      	movs	r3, #1
 8006874:	4a41      	ldr	r2, [pc, #260]	; (800697c <_printf_float+0x30c>)
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f af54 	beq.w	800672a <_printf_float+0xba>
 8006882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006886:	429a      	cmp	r2, r3
 8006888:	db02      	blt.n	8006890 <_printf_float+0x220>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	07d8      	lsls	r0, r3, #31
 800688e:	d50f      	bpl.n	80068b0 <_printf_float+0x240>
 8006890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af45 	beq.w	800672a <_printf_float+0xba>
 80068a0:	f04f 0800 	mov.w	r8, #0
 80068a4:	f104 091a 	add.w	r9, r4, #26
 80068a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4543      	cmp	r3, r8
 80068ae:	dc09      	bgt.n	80068c4 <_printf_float+0x254>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	079b      	lsls	r3, r3, #30
 80068b4:	f100 8103 	bmi.w	8006abe <_printf_float+0x44e>
 80068b8:	68e0      	ldr	r0, [r4, #12]
 80068ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068bc:	4298      	cmp	r0, r3
 80068be:	bfb8      	it	lt
 80068c0:	4618      	movlt	r0, r3
 80068c2:	e734      	b.n	800672e <_printf_float+0xbe>
 80068c4:	2301      	movs	r3, #1
 80068c6:	464a      	mov	r2, r9
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f af2b 	beq.w	800672a <_printf_float+0xba>
 80068d4:	f108 0801 	add.w	r8, r8, #1
 80068d8:	e7e6      	b.n	80068a8 <_printf_float+0x238>
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc2b      	bgt.n	8006938 <_printf_float+0x2c8>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4a26      	ldr	r2, [pc, #152]	; (800697c <_printf_float+0x30c>)
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af1d 	beq.w	800672a <_printf_float+0xba>
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	b923      	cbnz	r3, 80068fe <_printf_float+0x28e>
 80068f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f6:	b913      	cbnz	r3, 80068fe <_printf_float+0x28e>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	d5d8      	bpl.n	80068b0 <_printf_float+0x240>
 80068fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f af0e 	beq.w	800672a <_printf_float+0xba>
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	f104 0a1a 	add.w	sl, r4, #26
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	425b      	negs	r3, r3
 800691a:	454b      	cmp	r3, r9
 800691c:	dc01      	bgt.n	8006922 <_printf_float+0x2b2>
 800691e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006920:	e794      	b.n	800684c <_printf_float+0x1dc>
 8006922:	2301      	movs	r3, #1
 8006924:	4652      	mov	r2, sl
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f aefc 	beq.w	800672a <_printf_float+0xba>
 8006932:	f109 0901 	add.w	r9, r9, #1
 8006936:	e7ee      	b.n	8006916 <_printf_float+0x2a6>
 8006938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800693a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693c:	429a      	cmp	r2, r3
 800693e:	bfa8      	it	ge
 8006940:	461a      	movge	r2, r3
 8006942:	2a00      	cmp	r2, #0
 8006944:	4691      	mov	r9, r2
 8006946:	dd07      	ble.n	8006958 <_printf_float+0x2e8>
 8006948:	4613      	mov	r3, r2
 800694a:	4631      	mov	r1, r6
 800694c:	4642      	mov	r2, r8
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f aee9 	beq.w	800672a <_printf_float+0xba>
 8006958:	f104 031a 	add.w	r3, r4, #26
 800695c:	f04f 0b00 	mov.w	fp, #0
 8006960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006964:	9306      	str	r3, [sp, #24]
 8006966:	e015      	b.n	8006994 <_printf_float+0x324>
 8006968:	7fefffff 	.word	0x7fefffff
 800696c:	0800a51c 	.word	0x0800a51c
 8006970:	0800a518 	.word	0x0800a518
 8006974:	0800a524 	.word	0x0800a524
 8006978:	0800a520 	.word	0x0800a520
 800697c:	0800a528 	.word	0x0800a528
 8006980:	2301      	movs	r3, #1
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f aecd 	beq.w	800672a <_printf_float+0xba>
 8006990:	f10b 0b01 	add.w	fp, fp, #1
 8006994:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006998:	ebaa 0309 	sub.w	r3, sl, r9
 800699c:	455b      	cmp	r3, fp
 800699e:	dcef      	bgt.n	8006980 <_printf_float+0x310>
 80069a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a4:	429a      	cmp	r2, r3
 80069a6:	44d0      	add	r8, sl
 80069a8:	db15      	blt.n	80069d6 <_printf_float+0x366>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	07da      	lsls	r2, r3, #31
 80069ae:	d412      	bmi.n	80069d6 <_printf_float+0x366>
 80069b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b4:	eba3 020a 	sub.w	r2, r3, sl
 80069b8:	eba3 0a01 	sub.w	sl, r3, r1
 80069bc:	4592      	cmp	sl, r2
 80069be:	bfa8      	it	ge
 80069c0:	4692      	movge	sl, r2
 80069c2:	f1ba 0f00 	cmp.w	sl, #0
 80069c6:	dc0e      	bgt.n	80069e6 <_printf_float+0x376>
 80069c8:	f04f 0800 	mov.w	r8, #0
 80069cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069d0:	f104 091a 	add.w	r9, r4, #26
 80069d4:	e019      	b.n	8006a0a <_printf_float+0x39a>
 80069d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	d1e5      	bne.n	80069b0 <_printf_float+0x340>
 80069e4:	e6a1      	b.n	800672a <_printf_float+0xba>
 80069e6:	4653      	mov	r3, sl
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d1e9      	bne.n	80069c8 <_printf_float+0x358>
 80069f4:	e699      	b.n	800672a <_printf_float+0xba>
 80069f6:	2301      	movs	r3, #1
 80069f8:	464a      	mov	r2, r9
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f ae92 	beq.w	800672a <_printf_float+0xba>
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	eba3 030a 	sub.w	r3, r3, sl
 8006a14:	4543      	cmp	r3, r8
 8006a16:	dcee      	bgt.n	80069f6 <_printf_float+0x386>
 8006a18:	e74a      	b.n	80068b0 <_printf_float+0x240>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	2a01      	cmp	r2, #1
 8006a1e:	dc01      	bgt.n	8006a24 <_printf_float+0x3b4>
 8006a20:	07db      	lsls	r3, r3, #31
 8006a22:	d53a      	bpl.n	8006a9a <_printf_float+0x42a>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4642      	mov	r2, r8
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae7b 	beq.w	800672a <_printf_float+0xba>
 8006a34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f108 0801 	add.w	r8, r8, #1
 8006a44:	f43f ae71 	beq.w	800672a <_printf_float+0xba>
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a54:	2300      	movs	r3, #0
 8006a56:	f7fa f857 	bl	8000b08 <__aeabi_dcmpeq>
 8006a5a:	b9c8      	cbnz	r0, 8006a90 <_printf_float+0x420>
 8006a5c:	4653      	mov	r3, sl
 8006a5e:	4642      	mov	r2, r8
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	d10e      	bne.n	8006a88 <_printf_float+0x418>
 8006a6a:	e65e      	b.n	800672a <_printf_float+0xba>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4652      	mov	r2, sl
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f ae57 	beq.w	800672a <_printf_float+0xba>
 8006a7c:	f108 0801 	add.w	r8, r8, #1
 8006a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dcf1      	bgt.n	8006a6c <_printf_float+0x3fc>
 8006a88:	464b      	mov	r3, r9
 8006a8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a8e:	e6de      	b.n	800684e <_printf_float+0x1de>
 8006a90:	f04f 0800 	mov.w	r8, #0
 8006a94:	f104 0a1a 	add.w	sl, r4, #26
 8006a98:	e7f2      	b.n	8006a80 <_printf_float+0x410>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e7df      	b.n	8006a5e <_printf_float+0x3ee>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	464a      	mov	r2, r9
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f ae3e 	beq.w	800672a <_printf_float+0xba>
 8006aae:	f108 0801 	add.w	r8, r8, #1
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	4543      	cmp	r3, r8
 8006aba:	dcf0      	bgt.n	8006a9e <_printf_float+0x42e>
 8006abc:	e6fc      	b.n	80068b8 <_printf_float+0x248>
 8006abe:	f04f 0800 	mov.w	r8, #0
 8006ac2:	f104 0919 	add.w	r9, r4, #25
 8006ac6:	e7f4      	b.n	8006ab2 <_printf_float+0x442>
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	f43f ae8b 	beq.w	80067e4 <_printf_float+0x174>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ad4:	ab09      	add	r3, sp, #36	; 0x24
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	ec49 8b10 	vmov	d0, r8, r9
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	f8cd a004 	str.w	sl, [sp, #4]
 8006ae2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7ff fd2d 	bl	8006546 <__cvt>
 8006aec:	4680      	mov	r8, r0
 8006aee:	e648      	b.n	8006782 <_printf_float+0x112>

08006af0 <_printf_common>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	4691      	mov	r9, r2
 8006af6:	461f      	mov	r7, r3
 8006af8:	688a      	ldr	r2, [r1, #8]
 8006afa:	690b      	ldr	r3, [r1, #16]
 8006afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bfb8      	it	lt
 8006b04:	4613      	movlt	r3, r2
 8006b06:	f8c9 3000 	str.w	r3, [r9]
 8006b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	b112      	cbz	r2, 8006b1a <_printf_common+0x2a>
 8006b14:	3301      	adds	r3, #1
 8006b16:	f8c9 3000 	str.w	r3, [r9]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	0699      	lsls	r1, r3, #26
 8006b1e:	bf42      	ittt	mi
 8006b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b24:	3302      	addmi	r3, #2
 8006b26:	f8c9 3000 	strmi.w	r3, [r9]
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	f015 0506 	ands.w	r5, r5, #6
 8006b30:	d107      	bne.n	8006b42 <_printf_common+0x52>
 8006b32:	f104 0a19 	add.w	sl, r4, #25
 8006b36:	68e3      	ldr	r3, [r4, #12]
 8006b38:	f8d9 2000 	ldr.w	r2, [r9]
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	42ab      	cmp	r3, r5
 8006b40:	dc28      	bgt.n	8006b94 <_printf_common+0xa4>
 8006b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	3300      	adds	r3, #0
 8006b4a:	bf18      	it	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	0692      	lsls	r2, r2, #26
 8006b50:	d42d      	bmi.n	8006bae <_printf_common+0xbe>
 8006b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b56:	4639      	mov	r1, r7
 8006b58:	4630      	mov	r0, r6
 8006b5a:	47c0      	blx	r8
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d020      	beq.n	8006ba2 <_printf_common+0xb2>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	68e5      	ldr	r5, [r4, #12]
 8006b64:	f8d9 2000 	ldr.w	r2, [r9]
 8006b68:	f003 0306 	and.w	r3, r3, #6
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	bf08      	it	eq
 8006b70:	1aad      	subeq	r5, r5, r2
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	6922      	ldr	r2, [r4, #16]
 8006b76:	bf0c      	ite	eq
 8006b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b7c:	2500      	movne	r5, #0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	bfc4      	itt	gt
 8006b82:	1a9b      	subgt	r3, r3, r2
 8006b84:	18ed      	addgt	r5, r5, r3
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	341a      	adds	r4, #26
 8006b8c:	454d      	cmp	r5, r9
 8006b8e:	d11a      	bne.n	8006bc6 <_printf_common+0xd6>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e008      	b.n	8006ba6 <_printf_common+0xb6>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4652      	mov	r2, sl
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d103      	bne.n	8006baa <_printf_common+0xba>
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	3501      	adds	r5, #1
 8006bac:	e7c3      	b.n	8006b36 <_printf_common+0x46>
 8006bae:	18e1      	adds	r1, r4, r3
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	2030      	movs	r0, #48	; 0x30
 8006bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb8:	4422      	add	r2, r4
 8006bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc2:	3302      	adds	r3, #2
 8006bc4:	e7c5      	b.n	8006b52 <_printf_common+0x62>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4639      	mov	r1, r7
 8006bcc:	4630      	mov	r0, r6
 8006bce:	47c0      	blx	r8
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d0e6      	beq.n	8006ba2 <_printf_common+0xb2>
 8006bd4:	f109 0901 	add.w	r9, r9, #1
 8006bd8:	e7d8      	b.n	8006b8c <_printf_common+0x9c>
	...

08006bdc <_printf_i>:
 8006bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006be4:	460c      	mov	r4, r1
 8006be6:	7e09      	ldrb	r1, [r1, #24]
 8006be8:	b085      	sub	sp, #20
 8006bea:	296e      	cmp	r1, #110	; 0x6e
 8006bec:	4617      	mov	r7, r2
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4698      	mov	r8, r3
 8006bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf4:	f000 80b3 	beq.w	8006d5e <_printf_i+0x182>
 8006bf8:	d822      	bhi.n	8006c40 <_printf_i+0x64>
 8006bfa:	2963      	cmp	r1, #99	; 0x63
 8006bfc:	d036      	beq.n	8006c6c <_printf_i+0x90>
 8006bfe:	d80a      	bhi.n	8006c16 <_printf_i+0x3a>
 8006c00:	2900      	cmp	r1, #0
 8006c02:	f000 80b9 	beq.w	8006d78 <_printf_i+0x19c>
 8006c06:	2958      	cmp	r1, #88	; 0x58
 8006c08:	f000 8083 	beq.w	8006d12 <_printf_i+0x136>
 8006c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c14:	e032      	b.n	8006c7c <_printf_i+0xa0>
 8006c16:	2964      	cmp	r1, #100	; 0x64
 8006c18:	d001      	beq.n	8006c1e <_printf_i+0x42>
 8006c1a:	2969      	cmp	r1, #105	; 0x69
 8006c1c:	d1f6      	bne.n	8006c0c <_printf_i+0x30>
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	6813      	ldr	r3, [r2, #0]
 8006c22:	0605      	lsls	r5, r0, #24
 8006c24:	f103 0104 	add.w	r1, r3, #4
 8006c28:	d52a      	bpl.n	8006c80 <_printf_i+0xa4>
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6011      	str	r1, [r2, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da03      	bge.n	8006c3a <_printf_i+0x5e>
 8006c32:	222d      	movs	r2, #45	; 0x2d
 8006c34:	425b      	negs	r3, r3
 8006c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c3a:	486f      	ldr	r0, [pc, #444]	; (8006df8 <_printf_i+0x21c>)
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	e039      	b.n	8006cb4 <_printf_i+0xd8>
 8006c40:	2973      	cmp	r1, #115	; 0x73
 8006c42:	f000 809d 	beq.w	8006d80 <_printf_i+0x1a4>
 8006c46:	d808      	bhi.n	8006c5a <_printf_i+0x7e>
 8006c48:	296f      	cmp	r1, #111	; 0x6f
 8006c4a:	d020      	beq.n	8006c8e <_printf_i+0xb2>
 8006c4c:	2970      	cmp	r1, #112	; 0x70
 8006c4e:	d1dd      	bne.n	8006c0c <_printf_i+0x30>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	f043 0320 	orr.w	r3, r3, #32
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	e003      	b.n	8006c62 <_printf_i+0x86>
 8006c5a:	2975      	cmp	r1, #117	; 0x75
 8006c5c:	d017      	beq.n	8006c8e <_printf_i+0xb2>
 8006c5e:	2978      	cmp	r1, #120	; 0x78
 8006c60:	d1d4      	bne.n	8006c0c <_printf_i+0x30>
 8006c62:	2378      	movs	r3, #120	; 0x78
 8006c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c68:	4864      	ldr	r0, [pc, #400]	; (8006dfc <_printf_i+0x220>)
 8006c6a:	e055      	b.n	8006d18 <_printf_i+0x13c>
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	1d19      	adds	r1, r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6011      	str	r1, [r2, #0]
 8006c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e08c      	b.n	8006d9a <_printf_i+0x1be>
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6011      	str	r1, [r2, #0]
 8006c84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c88:	bf18      	it	ne
 8006c8a:	b21b      	sxthne	r3, r3
 8006c8c:	e7cf      	b.n	8006c2e <_printf_i+0x52>
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	6825      	ldr	r5, [r4, #0]
 8006c92:	1d18      	adds	r0, r3, #4
 8006c94:	6010      	str	r0, [r2, #0]
 8006c96:	0628      	lsls	r0, r5, #24
 8006c98:	d501      	bpl.n	8006c9e <_printf_i+0xc2>
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <_printf_i+0xc8>
 8006c9e:	0668      	lsls	r0, r5, #25
 8006ca0:	d5fb      	bpl.n	8006c9a <_printf_i+0xbe>
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	4854      	ldr	r0, [pc, #336]	; (8006df8 <_printf_i+0x21c>)
 8006ca6:	296f      	cmp	r1, #111	; 0x6f
 8006ca8:	bf14      	ite	ne
 8006caa:	220a      	movne	r2, #10
 8006cac:	2208      	moveq	r2, #8
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cb4:	6865      	ldr	r5, [r4, #4]
 8006cb6:	60a5      	str	r5, [r4, #8]
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	f2c0 8095 	blt.w	8006de8 <_printf_i+0x20c>
 8006cbe:	6821      	ldr	r1, [r4, #0]
 8006cc0:	f021 0104 	bic.w	r1, r1, #4
 8006cc4:	6021      	str	r1, [r4, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13d      	bne.n	8006d46 <_printf_i+0x16a>
 8006cca:	2d00      	cmp	r5, #0
 8006ccc:	f040 808e 	bne.w	8006dec <_printf_i+0x210>
 8006cd0:	4665      	mov	r5, ip
 8006cd2:	2a08      	cmp	r2, #8
 8006cd4:	d10b      	bne.n	8006cee <_printf_i+0x112>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d508      	bpl.n	8006cee <_printf_i+0x112>
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	bfde      	ittt	le
 8006ce4:	2330      	movle	r3, #48	; 0x30
 8006ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cee:	ebac 0305 	sub.w	r3, ip, r5
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	f8cd 8000 	str.w	r8, [sp]
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	aa03      	add	r2, sp, #12
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff fef6 	bl	8006af0 <_printf_common>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d14d      	bne.n	8006da4 <_printf_i+0x1c8>
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d0c:	b005      	add	sp, #20
 8006d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d12:	4839      	ldr	r0, [pc, #228]	; (8006df8 <_printf_i+0x21c>)
 8006d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d18:	6813      	ldr	r3, [r2, #0]
 8006d1a:	6821      	ldr	r1, [r4, #0]
 8006d1c:	1d1d      	adds	r5, r3, #4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6015      	str	r5, [r2, #0]
 8006d22:	060a      	lsls	r2, r1, #24
 8006d24:	d50b      	bpl.n	8006d3e <_printf_i+0x162>
 8006d26:	07ca      	lsls	r2, r1, #31
 8006d28:	bf44      	itt	mi
 8006d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8006d2e:	6021      	strmi	r1, [r4, #0]
 8006d30:	b91b      	cbnz	r3, 8006d3a <_printf_i+0x15e>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	f022 0220 	bic.w	r2, r2, #32
 8006d38:	6022      	str	r2, [r4, #0]
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	e7b7      	b.n	8006cae <_printf_i+0xd2>
 8006d3e:	064d      	lsls	r5, r1, #25
 8006d40:	bf48      	it	mi
 8006d42:	b29b      	uxthmi	r3, r3
 8006d44:	e7ef      	b.n	8006d26 <_printf_i+0x14a>
 8006d46:	4665      	mov	r5, ip
 8006d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8006d50:	5cc3      	ldrb	r3, [r0, r3]
 8006d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d56:	460b      	mov	r3, r1
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d1f5      	bne.n	8006d48 <_printf_i+0x16c>
 8006d5c:	e7b9      	b.n	8006cd2 <_printf_i+0xf6>
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	6825      	ldr	r5, [r4, #0]
 8006d62:	6961      	ldr	r1, [r4, #20]
 8006d64:	1d18      	adds	r0, r3, #4
 8006d66:	6010      	str	r0, [r2, #0]
 8006d68:	0628      	lsls	r0, r5, #24
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	d501      	bpl.n	8006d72 <_printf_i+0x196>
 8006d6e:	6019      	str	r1, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <_printf_i+0x19c>
 8006d72:	066a      	lsls	r2, r5, #25
 8006d74:	d5fb      	bpl.n	8006d6e <_printf_i+0x192>
 8006d76:	8019      	strh	r1, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	4665      	mov	r5, ip
 8006d7e:	e7b9      	b.n	8006cf4 <_printf_i+0x118>
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	1d19      	adds	r1, r3, #4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	681d      	ldr	r5, [r3, #0]
 8006d88:	6862      	ldr	r2, [r4, #4]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f7f9 fa47 	bl	8000220 <memchr>
 8006d92:	b108      	cbz	r0, 8006d98 <_printf_i+0x1bc>
 8006d94:	1b40      	subs	r0, r0, r5
 8006d96:	6060      	str	r0, [r4, #4]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da2:	e7a7      	b.n	8006cf4 <_printf_i+0x118>
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	462a      	mov	r2, r5
 8006da8:	4639      	mov	r1, r7
 8006daa:	4630      	mov	r0, r6
 8006dac:	47c0      	blx	r8
 8006dae:	3001      	adds	r0, #1
 8006db0:	d0aa      	beq.n	8006d08 <_printf_i+0x12c>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	079b      	lsls	r3, r3, #30
 8006db6:	d413      	bmi.n	8006de0 <_printf_i+0x204>
 8006db8:	68e0      	ldr	r0, [r4, #12]
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	bfb8      	it	lt
 8006dc0:	4618      	movlt	r0, r3
 8006dc2:	e7a3      	b.n	8006d0c <_printf_i+0x130>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4630      	mov	r0, r6
 8006dcc:	47c0      	blx	r8
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d09a      	beq.n	8006d08 <_printf_i+0x12c>
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	68e3      	ldr	r3, [r4, #12]
 8006dd6:	9a03      	ldr	r2, [sp, #12]
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	42ab      	cmp	r3, r5
 8006ddc:	dcf2      	bgt.n	8006dc4 <_printf_i+0x1e8>
 8006dde:	e7eb      	b.n	8006db8 <_printf_i+0x1dc>
 8006de0:	2500      	movs	r5, #0
 8006de2:	f104 0919 	add.w	r9, r4, #25
 8006de6:	e7f5      	b.n	8006dd4 <_printf_i+0x1f8>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ac      	bne.n	8006d46 <_printf_i+0x16a>
 8006dec:	7803      	ldrb	r3, [r0, #0]
 8006dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df6:	e76c      	b.n	8006cd2 <_printf_i+0xf6>
 8006df8:	0800a52a 	.word	0x0800a52a
 8006dfc:	0800a53b 	.word	0x0800a53b

08006e00 <_scanf_float>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	469a      	mov	sl, r3
 8006e06:	688b      	ldr	r3, [r1, #8]
 8006e08:	4616      	mov	r6, r2
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e10:	b087      	sub	sp, #28
 8006e12:	bf83      	ittte	hi
 8006e14:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006e18:	189b      	addhi	r3, r3, r2
 8006e1a:	9301      	strhi	r3, [sp, #4]
 8006e1c:	2300      	movls	r3, #0
 8006e1e:	bf86      	itte	hi
 8006e20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e24:	608b      	strhi	r3, [r1, #8]
 8006e26:	9301      	strls	r3, [sp, #4]
 8006e28:	680b      	ldr	r3, [r1, #0]
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	f04f 0b00 	mov.w	fp, #0
 8006e30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e34:	f848 3b1c 	str.w	r3, [r8], #28
 8006e38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	4645      	mov	r5, r8
 8006e42:	465a      	mov	r2, fp
 8006e44:	46d9      	mov	r9, fp
 8006e46:	f8cd b008 	str.w	fp, [sp, #8]
 8006e4a:	68a1      	ldr	r1, [r4, #8]
 8006e4c:	b181      	cbz	r1, 8006e70 <_scanf_float+0x70>
 8006e4e:	6833      	ldr	r3, [r6, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b49      	cmp	r3, #73	; 0x49
 8006e54:	d071      	beq.n	8006f3a <_scanf_float+0x13a>
 8006e56:	d84d      	bhi.n	8006ef4 <_scanf_float+0xf4>
 8006e58:	2b39      	cmp	r3, #57	; 0x39
 8006e5a:	d840      	bhi.n	8006ede <_scanf_float+0xde>
 8006e5c:	2b31      	cmp	r3, #49	; 0x31
 8006e5e:	f080 8088 	bcs.w	8006f72 <_scanf_float+0x172>
 8006e62:	2b2d      	cmp	r3, #45	; 0x2d
 8006e64:	f000 8090 	beq.w	8006f88 <_scanf_float+0x188>
 8006e68:	d815      	bhi.n	8006e96 <_scanf_float+0x96>
 8006e6a:	2b2b      	cmp	r3, #43	; 0x2b
 8006e6c:	f000 808c 	beq.w	8006f88 <_scanf_float+0x188>
 8006e70:	f1b9 0f00 	cmp.w	r9, #0
 8006e74:	d003      	beq.n	8006e7e <_scanf_float+0x7e>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	3a01      	subs	r2, #1
 8006e80:	2a01      	cmp	r2, #1
 8006e82:	f200 80ea 	bhi.w	800705a <_scanf_float+0x25a>
 8006e86:	4545      	cmp	r5, r8
 8006e88:	f200 80dc 	bhi.w	8007044 <_scanf_float+0x244>
 8006e8c:	2601      	movs	r6, #1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	b007      	add	sp, #28
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	2b2e      	cmp	r3, #46	; 0x2e
 8006e98:	f000 809f 	beq.w	8006fda <_scanf_float+0x1da>
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d1e7      	bne.n	8006e70 <_scanf_float+0x70>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006ea6:	d064      	beq.n	8006f72 <_scanf_float+0x172>
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006eae:	6020      	str	r0, [r4, #0]
 8006eb0:	f109 0901 	add.w	r9, r9, #1
 8006eb4:	b11b      	cbz	r3, 8006ebe <_scanf_float+0xbe>
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	3101      	adds	r1, #1
 8006eba:	9301      	str	r3, [sp, #4]
 8006ebc:	60a1      	str	r1, [r4, #8]
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	6873      	ldr	r3, [r6, #4]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	6073      	str	r3, [r6, #4]
 8006ed2:	f340 80ac 	ble.w	800702e <_scanf_float+0x22e>
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	e7b5      	b.n	8006e4a <_scanf_float+0x4a>
 8006ede:	2b45      	cmp	r3, #69	; 0x45
 8006ee0:	f000 8085 	beq.w	8006fee <_scanf_float+0x1ee>
 8006ee4:	2b46      	cmp	r3, #70	; 0x46
 8006ee6:	d06a      	beq.n	8006fbe <_scanf_float+0x1be>
 8006ee8:	2b41      	cmp	r3, #65	; 0x41
 8006eea:	d1c1      	bne.n	8006e70 <_scanf_float+0x70>
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	d1bf      	bne.n	8006e70 <_scanf_float+0x70>
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	e046      	b.n	8006f82 <_scanf_float+0x182>
 8006ef4:	2b65      	cmp	r3, #101	; 0x65
 8006ef6:	d07a      	beq.n	8006fee <_scanf_float+0x1ee>
 8006ef8:	d818      	bhi.n	8006f2c <_scanf_float+0x12c>
 8006efa:	2b54      	cmp	r3, #84	; 0x54
 8006efc:	d066      	beq.n	8006fcc <_scanf_float+0x1cc>
 8006efe:	d811      	bhi.n	8006f24 <_scanf_float+0x124>
 8006f00:	2b4e      	cmp	r3, #78	; 0x4e
 8006f02:	d1b5      	bne.n	8006e70 <_scanf_float+0x70>
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	d146      	bne.n	8006f96 <_scanf_float+0x196>
 8006f08:	f1b9 0f00 	cmp.w	r9, #0
 8006f0c:	d145      	bne.n	8006f9a <_scanf_float+0x19a>
 8006f0e:	6821      	ldr	r1, [r4, #0]
 8006f10:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f14:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f18:	d13f      	bne.n	8006f9a <_scanf_float+0x19a>
 8006f1a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f1e:	6021      	str	r1, [r4, #0]
 8006f20:	2201      	movs	r2, #1
 8006f22:	e02e      	b.n	8006f82 <_scanf_float+0x182>
 8006f24:	2b59      	cmp	r3, #89	; 0x59
 8006f26:	d01e      	beq.n	8006f66 <_scanf_float+0x166>
 8006f28:	2b61      	cmp	r3, #97	; 0x61
 8006f2a:	e7de      	b.n	8006eea <_scanf_float+0xea>
 8006f2c:	2b6e      	cmp	r3, #110	; 0x6e
 8006f2e:	d0e9      	beq.n	8006f04 <_scanf_float+0x104>
 8006f30:	d815      	bhi.n	8006f5e <_scanf_float+0x15e>
 8006f32:	2b66      	cmp	r3, #102	; 0x66
 8006f34:	d043      	beq.n	8006fbe <_scanf_float+0x1be>
 8006f36:	2b69      	cmp	r3, #105	; 0x69
 8006f38:	d19a      	bne.n	8006e70 <_scanf_float+0x70>
 8006f3a:	f1bb 0f00 	cmp.w	fp, #0
 8006f3e:	d138      	bne.n	8006fb2 <_scanf_float+0x1b2>
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	d197      	bne.n	8006e76 <_scanf_float+0x76>
 8006f46:	6821      	ldr	r1, [r4, #0]
 8006f48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f50:	d195      	bne.n	8006e7e <_scanf_float+0x7e>
 8006f52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f56:	6021      	str	r1, [r4, #0]
 8006f58:	f04f 0b01 	mov.w	fp, #1
 8006f5c:	e011      	b.n	8006f82 <_scanf_float+0x182>
 8006f5e:	2b74      	cmp	r3, #116	; 0x74
 8006f60:	d034      	beq.n	8006fcc <_scanf_float+0x1cc>
 8006f62:	2b79      	cmp	r3, #121	; 0x79
 8006f64:	d184      	bne.n	8006e70 <_scanf_float+0x70>
 8006f66:	f1bb 0f07 	cmp.w	fp, #7
 8006f6a:	d181      	bne.n	8006e70 <_scanf_float+0x70>
 8006f6c:	f04f 0b08 	mov.w	fp, #8
 8006f70:	e007      	b.n	8006f82 <_scanf_float+0x182>
 8006f72:	eb12 0f0b 	cmn.w	r2, fp
 8006f76:	f47f af7b 	bne.w	8006e70 <_scanf_float+0x70>
 8006f7a:	6821      	ldr	r1, [r4, #0]
 8006f7c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006f80:	6021      	str	r1, [r4, #0]
 8006f82:	702b      	strb	r3, [r5, #0]
 8006f84:	3501      	adds	r5, #1
 8006f86:	e79a      	b.n	8006ebe <_scanf_float+0xbe>
 8006f88:	6821      	ldr	r1, [r4, #0]
 8006f8a:	0608      	lsls	r0, r1, #24
 8006f8c:	f57f af70 	bpl.w	8006e70 <_scanf_float+0x70>
 8006f90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f94:	e7f4      	b.n	8006f80 <_scanf_float+0x180>
 8006f96:	2a02      	cmp	r2, #2
 8006f98:	d047      	beq.n	800702a <_scanf_float+0x22a>
 8006f9a:	f1bb 0f01 	cmp.w	fp, #1
 8006f9e:	d003      	beq.n	8006fa8 <_scanf_float+0x1a8>
 8006fa0:	f1bb 0f04 	cmp.w	fp, #4
 8006fa4:	f47f af64 	bne.w	8006e70 <_scanf_float+0x70>
 8006fa8:	f10b 0b01 	add.w	fp, fp, #1
 8006fac:	fa5f fb8b 	uxtb.w	fp, fp
 8006fb0:	e7e7      	b.n	8006f82 <_scanf_float+0x182>
 8006fb2:	f1bb 0f03 	cmp.w	fp, #3
 8006fb6:	d0f7      	beq.n	8006fa8 <_scanf_float+0x1a8>
 8006fb8:	f1bb 0f05 	cmp.w	fp, #5
 8006fbc:	e7f2      	b.n	8006fa4 <_scanf_float+0x1a4>
 8006fbe:	f1bb 0f02 	cmp.w	fp, #2
 8006fc2:	f47f af55 	bne.w	8006e70 <_scanf_float+0x70>
 8006fc6:	f04f 0b03 	mov.w	fp, #3
 8006fca:	e7da      	b.n	8006f82 <_scanf_float+0x182>
 8006fcc:	f1bb 0f06 	cmp.w	fp, #6
 8006fd0:	f47f af4e 	bne.w	8006e70 <_scanf_float+0x70>
 8006fd4:	f04f 0b07 	mov.w	fp, #7
 8006fd8:	e7d3      	b.n	8006f82 <_scanf_float+0x182>
 8006fda:	6821      	ldr	r1, [r4, #0]
 8006fdc:	0588      	lsls	r0, r1, #22
 8006fde:	f57f af47 	bpl.w	8006e70 <_scanf_float+0x70>
 8006fe2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006fe6:	6021      	str	r1, [r4, #0]
 8006fe8:	f8cd 9008 	str.w	r9, [sp, #8]
 8006fec:	e7c9      	b.n	8006f82 <_scanf_float+0x182>
 8006fee:	6821      	ldr	r1, [r4, #0]
 8006ff0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006ff4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ff8:	d006      	beq.n	8007008 <_scanf_float+0x208>
 8006ffa:	0548      	lsls	r0, r1, #21
 8006ffc:	f57f af38 	bpl.w	8006e70 <_scanf_float+0x70>
 8007000:	f1b9 0f00 	cmp.w	r9, #0
 8007004:	f43f af3b 	beq.w	8006e7e <_scanf_float+0x7e>
 8007008:	0588      	lsls	r0, r1, #22
 800700a:	bf58      	it	pl
 800700c:	9802      	ldrpl	r0, [sp, #8]
 800700e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007012:	bf58      	it	pl
 8007014:	eba9 0000 	subpl.w	r0, r9, r0
 8007018:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800701c:	bf58      	it	pl
 800701e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007022:	6021      	str	r1, [r4, #0]
 8007024:	f04f 0900 	mov.w	r9, #0
 8007028:	e7ab      	b.n	8006f82 <_scanf_float+0x182>
 800702a:	2203      	movs	r2, #3
 800702c:	e7a9      	b.n	8006f82 <_scanf_float+0x182>
 800702e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007032:	9205      	str	r2, [sp, #20]
 8007034:	4631      	mov	r1, r6
 8007036:	4638      	mov	r0, r7
 8007038:	4798      	blx	r3
 800703a:	9a05      	ldr	r2, [sp, #20]
 800703c:	2800      	cmp	r0, #0
 800703e:	f43f af04 	beq.w	8006e4a <_scanf_float+0x4a>
 8007042:	e715      	b.n	8006e70 <_scanf_float+0x70>
 8007044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007048:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800704c:	4632      	mov	r2, r6
 800704e:	4638      	mov	r0, r7
 8007050:	4798      	blx	r3
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	3b01      	subs	r3, #1
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	e715      	b.n	8006e86 <_scanf_float+0x86>
 800705a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800705e:	2b06      	cmp	r3, #6
 8007060:	d80a      	bhi.n	8007078 <_scanf_float+0x278>
 8007062:	f1bb 0f02 	cmp.w	fp, #2
 8007066:	d968      	bls.n	800713a <_scanf_float+0x33a>
 8007068:	f1ab 0b03 	sub.w	fp, fp, #3
 800706c:	fa5f fb8b 	uxtb.w	fp, fp
 8007070:	eba5 0b0b 	sub.w	fp, r5, fp
 8007074:	455d      	cmp	r5, fp
 8007076:	d14b      	bne.n	8007110 <_scanf_float+0x310>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	05da      	lsls	r2, r3, #23
 800707c:	d51f      	bpl.n	80070be <_scanf_float+0x2be>
 800707e:	055b      	lsls	r3, r3, #21
 8007080:	d468      	bmi.n	8007154 <_scanf_float+0x354>
 8007082:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	2965      	cmp	r1, #101	; 0x65
 800708a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800708e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	d00d      	beq.n	80070b2 <_scanf_float+0x2b2>
 8007096:	2945      	cmp	r1, #69	; 0x45
 8007098:	d00b      	beq.n	80070b2 <_scanf_float+0x2b2>
 800709a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800709e:	4632      	mov	r2, r6
 80070a0:	4638      	mov	r0, r7
 80070a2:	4798      	blx	r3
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070b6:	4632      	mov	r2, r6
 80070b8:	4638      	mov	r0, r7
 80070ba:	4798      	blx	r3
 80070bc:	465d      	mov	r5, fp
 80070be:	6826      	ldr	r6, [r4, #0]
 80070c0:	f016 0610 	ands.w	r6, r6, #16
 80070c4:	d17a      	bne.n	80071bc <_scanf_float+0x3bc>
 80070c6:	702e      	strb	r6, [r5, #0]
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d2:	d142      	bne.n	800715a <_scanf_float+0x35a>
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	eba9 0303 	sub.w	r3, r9, r3
 80070da:	425a      	negs	r2, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d149      	bne.n	8007174 <_scanf_float+0x374>
 80070e0:	2200      	movs	r2, #0
 80070e2:	4641      	mov	r1, r8
 80070e4:	4638      	mov	r0, r7
 80070e6:	f000 fea3 	bl	8007e30 <_strtod_r>
 80070ea:	6825      	ldr	r5, [r4, #0]
 80070ec:	f8da 3000 	ldr.w	r3, [sl]
 80070f0:	f015 0f02 	tst.w	r5, #2
 80070f4:	f103 0204 	add.w	r2, r3, #4
 80070f8:	ec59 8b10 	vmov	r8, r9, d0
 80070fc:	f8ca 2000 	str.w	r2, [sl]
 8007100:	d043      	beq.n	800718a <_scanf_float+0x38a>
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	e9c3 8900 	strd	r8, r9, [r3]
 8007108:	68e3      	ldr	r3, [r4, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60e3      	str	r3, [r4, #12]
 800710e:	e6be      	b.n	8006e8e <_scanf_float+0x8e>
 8007110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007114:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007118:	4632      	mov	r2, r6
 800711a:	4638      	mov	r0, r7
 800711c:	4798      	blx	r3
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	3b01      	subs	r3, #1
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	e7a6      	b.n	8007074 <_scanf_float+0x274>
 8007126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800712e:	4632      	mov	r2, r6
 8007130:	4638      	mov	r0, r7
 8007132:	4798      	blx	r3
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	3b01      	subs	r3, #1
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	4545      	cmp	r5, r8
 800713c:	d8f3      	bhi.n	8007126 <_scanf_float+0x326>
 800713e:	e6a5      	b.n	8006e8c <_scanf_float+0x8c>
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007148:	4632      	mov	r2, r6
 800714a:	4638      	mov	r0, r7
 800714c:	4798      	blx	r3
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	3b01      	subs	r3, #1
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	4545      	cmp	r5, r8
 8007156:	d8f3      	bhi.n	8007140 <_scanf_float+0x340>
 8007158:	e698      	b.n	8006e8c <_scanf_float+0x8c>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0bf      	beq.n	80070e0 <_scanf_float+0x2e0>
 8007160:	9904      	ldr	r1, [sp, #16]
 8007162:	230a      	movs	r3, #10
 8007164:	4632      	mov	r2, r6
 8007166:	3101      	adds	r1, #1
 8007168:	4638      	mov	r0, r7
 800716a:	f000 feed 	bl	8007f48 <_strtol_r>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	9d04      	ldr	r5, [sp, #16]
 8007172:	1ac2      	subs	r2, r0, r3
 8007174:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007178:	429d      	cmp	r5, r3
 800717a:	bf28      	it	cs
 800717c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007180:	490f      	ldr	r1, [pc, #60]	; (80071c0 <_scanf_float+0x3c0>)
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f824 	bl	80071d0 <siprintf>
 8007188:	e7aa      	b.n	80070e0 <_scanf_float+0x2e0>
 800718a:	f015 0504 	ands.w	r5, r5, #4
 800718e:	d1b8      	bne.n	8007102 <_scanf_float+0x302>
 8007190:	681f      	ldr	r7, [r3, #0]
 8007192:	ee10 2a10 	vmov	r2, s0
 8007196:	464b      	mov	r3, r9
 8007198:	ee10 0a10 	vmov	r0, s0
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 fce5 	bl	8000b6c <__aeabi_dcmpun>
 80071a2:	b128      	cbz	r0, 80071b0 <_scanf_float+0x3b0>
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f80d 	bl	80071c4 <nanf>
 80071aa:	ed87 0a00 	vstr	s0, [r7]
 80071ae:	e7ab      	b.n	8007108 <_scanf_float+0x308>
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fd38 	bl	8000c28 <__aeabi_d2f>
 80071b8:	6038      	str	r0, [r7, #0]
 80071ba:	e7a5      	b.n	8007108 <_scanf_float+0x308>
 80071bc:	2600      	movs	r6, #0
 80071be:	e666      	b.n	8006e8e <_scanf_float+0x8e>
 80071c0:	0800a54c 	.word	0x0800a54c

080071c4 <nanf>:
 80071c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071cc <nanf+0x8>
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	7fc00000 	.word	0x7fc00000

080071d0 <siprintf>:
 80071d0:	b40e      	push	{r1, r2, r3}
 80071d2:	b500      	push	{lr}
 80071d4:	b09c      	sub	sp, #112	; 0x70
 80071d6:	ab1d      	add	r3, sp, #116	; 0x74
 80071d8:	9002      	str	r0, [sp, #8]
 80071da:	9006      	str	r0, [sp, #24]
 80071dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e0:	4809      	ldr	r0, [pc, #36]	; (8007208 <siprintf+0x38>)
 80071e2:	9107      	str	r1, [sp, #28]
 80071e4:	9104      	str	r1, [sp, #16]
 80071e6:	4909      	ldr	r1, [pc, #36]	; (800720c <siprintf+0x3c>)
 80071e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	6800      	ldr	r0, [r0, #0]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	a902      	add	r1, sp, #8
 80071f4:	f002 fd64 	bl	8009cc0 <_svfiprintf_r>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	b01c      	add	sp, #112	; 0x70
 8007200:	f85d eb04 	ldr.w	lr, [sp], #4
 8007204:	b003      	add	sp, #12
 8007206:	4770      	bx	lr
 8007208:	20000018 	.word	0x20000018
 800720c:	ffff0208 	.word	0xffff0208

08007210 <sulp>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	460d      	mov	r5, r1
 8007216:	ec45 4b10 	vmov	d0, r4, r5
 800721a:	4616      	mov	r6, r2
 800721c:	f002 fb0c 	bl	8009838 <__ulp>
 8007220:	ec51 0b10 	vmov	r0, r1, d0
 8007224:	b17e      	cbz	r6, 8007246 <sulp+0x36>
 8007226:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800722a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd09      	ble.n	8007246 <sulp+0x36>
 8007232:	051b      	lsls	r3, r3, #20
 8007234:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007238:	2400      	movs	r4, #0
 800723a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	f7f9 f9f9 	bl	8000638 <__aeabi_dmul>
 8007246:	bd70      	pop	{r4, r5, r6, pc}

08007248 <_strtod_l>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	461f      	mov	r7, r3
 800724e:	b0a1      	sub	sp, #132	; 0x84
 8007250:	2300      	movs	r3, #0
 8007252:	4681      	mov	r9, r0
 8007254:	4638      	mov	r0, r7
 8007256:	460e      	mov	r6, r1
 8007258:	9217      	str	r2, [sp, #92]	; 0x5c
 800725a:	931c      	str	r3, [sp, #112]	; 0x70
 800725c:	f001 fff5 	bl	800924a <__localeconv_l>
 8007260:	4680      	mov	r8, r0
 8007262:	6800      	ldr	r0, [r0, #0]
 8007264:	f7f8 ffd4 	bl	8000210 <strlen>
 8007268:	f04f 0a00 	mov.w	sl, #0
 800726c:	4604      	mov	r4, r0
 800726e:	f04f 0b00 	mov.w	fp, #0
 8007272:	961b      	str	r6, [sp, #108]	; 0x6c
 8007274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	2a0d      	cmp	r2, #13
 800727a:	d832      	bhi.n	80072e2 <_strtod_l+0x9a>
 800727c:	2a09      	cmp	r2, #9
 800727e:	d236      	bcs.n	80072ee <_strtod_l+0xa6>
 8007280:	2a00      	cmp	r2, #0
 8007282:	d03e      	beq.n	8007302 <_strtod_l+0xba>
 8007284:	2300      	movs	r3, #0
 8007286:	930d      	str	r3, [sp, #52]	; 0x34
 8007288:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800728a:	782b      	ldrb	r3, [r5, #0]
 800728c:	2b30      	cmp	r3, #48	; 0x30
 800728e:	f040 80ac 	bne.w	80073ea <_strtod_l+0x1a2>
 8007292:	786b      	ldrb	r3, [r5, #1]
 8007294:	2b58      	cmp	r3, #88	; 0x58
 8007296:	d001      	beq.n	800729c <_strtod_l+0x54>
 8007298:	2b78      	cmp	r3, #120	; 0x78
 800729a:	d167      	bne.n	800736c <_strtod_l+0x124>
 800729c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	ab1c      	add	r3, sp, #112	; 0x70
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	9702      	str	r7, [sp, #8]
 80072a6:	ab1d      	add	r3, sp, #116	; 0x74
 80072a8:	4a88      	ldr	r2, [pc, #544]	; (80074cc <_strtod_l+0x284>)
 80072aa:	a91b      	add	r1, sp, #108	; 0x6c
 80072ac:	4648      	mov	r0, r9
 80072ae:	f001 fcf2 	bl	8008c96 <__gethex>
 80072b2:	f010 0407 	ands.w	r4, r0, #7
 80072b6:	4606      	mov	r6, r0
 80072b8:	d005      	beq.n	80072c6 <_strtod_l+0x7e>
 80072ba:	2c06      	cmp	r4, #6
 80072bc:	d12b      	bne.n	8007316 <_strtod_l+0xce>
 80072be:	3501      	adds	r5, #1
 80072c0:	2300      	movs	r3, #0
 80072c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80072c4:	930d      	str	r3, [sp, #52]	; 0x34
 80072c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 859a 	bne.w	8007e02 <_strtod_l+0xbba>
 80072ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d0:	b1e3      	cbz	r3, 800730c <_strtod_l+0xc4>
 80072d2:	4652      	mov	r2, sl
 80072d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072d8:	ec43 2b10 	vmov	d0, r2, r3
 80072dc:	b021      	add	sp, #132	; 0x84
 80072de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e2:	2a2b      	cmp	r2, #43	; 0x2b
 80072e4:	d015      	beq.n	8007312 <_strtod_l+0xca>
 80072e6:	2a2d      	cmp	r2, #45	; 0x2d
 80072e8:	d004      	beq.n	80072f4 <_strtod_l+0xac>
 80072ea:	2a20      	cmp	r2, #32
 80072ec:	d1ca      	bne.n	8007284 <_strtod_l+0x3c>
 80072ee:	3301      	adds	r3, #1
 80072f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80072f2:	e7bf      	b.n	8007274 <_strtod_l+0x2c>
 80072f4:	2201      	movs	r2, #1
 80072f6:	920d      	str	r2, [sp, #52]	; 0x34
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1c2      	bne.n	8007288 <_strtod_l+0x40>
 8007302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007304:	961b      	str	r6, [sp, #108]	; 0x6c
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 8579 	bne.w	8007dfe <_strtod_l+0xbb6>
 800730c:	4652      	mov	r2, sl
 800730e:	465b      	mov	r3, fp
 8007310:	e7e2      	b.n	80072d8 <_strtod_l+0x90>
 8007312:	2200      	movs	r2, #0
 8007314:	e7ef      	b.n	80072f6 <_strtod_l+0xae>
 8007316:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007318:	b13a      	cbz	r2, 800732a <_strtod_l+0xe2>
 800731a:	2135      	movs	r1, #53	; 0x35
 800731c:	a81e      	add	r0, sp, #120	; 0x78
 800731e:	f002 fb83 	bl	8009a28 <__copybits>
 8007322:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007324:	4648      	mov	r0, r9
 8007326:	f001 ffef 	bl	8009308 <_Bfree>
 800732a:	3c01      	subs	r4, #1
 800732c:	2c04      	cmp	r4, #4
 800732e:	d806      	bhi.n	800733e <_strtod_l+0xf6>
 8007330:	e8df f004 	tbb	[pc, r4]
 8007334:	1714030a 	.word	0x1714030a
 8007338:	0a          	.byte	0x0a
 8007339:	00          	.byte	0x00
 800733a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800733e:	0730      	lsls	r0, r6, #28
 8007340:	d5c1      	bpl.n	80072c6 <_strtod_l+0x7e>
 8007342:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007346:	e7be      	b.n	80072c6 <_strtod_l+0x7e>
 8007348:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800734c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800734e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007352:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007356:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800735a:	e7f0      	b.n	800733e <_strtod_l+0xf6>
 800735c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80074d0 <_strtod_l+0x288>
 8007360:	e7ed      	b.n	800733e <_strtod_l+0xf6>
 8007362:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007366:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800736a:	e7e8      	b.n	800733e <_strtod_l+0xf6>
 800736c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	921b      	str	r2, [sp, #108]	; 0x6c
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d0f9      	beq.n	800736c <_strtod_l+0x124>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0a4      	beq.n	80072c6 <_strtod_l+0x7e>
 800737c:	2301      	movs	r3, #1
 800737e:	2500      	movs	r5, #0
 8007380:	9306      	str	r3, [sp, #24]
 8007382:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007384:	9308      	str	r3, [sp, #32]
 8007386:	9507      	str	r5, [sp, #28]
 8007388:	9505      	str	r5, [sp, #20]
 800738a:	220a      	movs	r2, #10
 800738c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800738e:	7807      	ldrb	r7, [r0, #0]
 8007390:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007394:	b2d9      	uxtb	r1, r3
 8007396:	2909      	cmp	r1, #9
 8007398:	d929      	bls.n	80073ee <_strtod_l+0x1a6>
 800739a:	4622      	mov	r2, r4
 800739c:	f8d8 1000 	ldr.w	r1, [r8]
 80073a0:	f002 fd96 	bl	8009ed0 <strncmp>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d031      	beq.n	800740c <_strtod_l+0x1c4>
 80073a8:	2000      	movs	r0, #0
 80073aa:	9c05      	ldr	r4, [sp, #20]
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	463b      	mov	r3, r7
 80073b0:	4602      	mov	r2, r0
 80073b2:	2b65      	cmp	r3, #101	; 0x65
 80073b4:	d001      	beq.n	80073ba <_strtod_l+0x172>
 80073b6:	2b45      	cmp	r3, #69	; 0x45
 80073b8:	d114      	bne.n	80073e4 <_strtod_l+0x19c>
 80073ba:	b924      	cbnz	r4, 80073c6 <_strtod_l+0x17e>
 80073bc:	b910      	cbnz	r0, 80073c4 <_strtod_l+0x17c>
 80073be:	9b06      	ldr	r3, [sp, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d09e      	beq.n	8007302 <_strtod_l+0xba>
 80073c4:	2400      	movs	r4, #0
 80073c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80073c8:	1c73      	adds	r3, r6, #1
 80073ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80073cc:	7873      	ldrb	r3, [r6, #1]
 80073ce:	2b2b      	cmp	r3, #43	; 0x2b
 80073d0:	d078      	beq.n	80074c4 <_strtod_l+0x27c>
 80073d2:	2b2d      	cmp	r3, #45	; 0x2d
 80073d4:	d070      	beq.n	80074b8 <_strtod_l+0x270>
 80073d6:	f04f 0c00 	mov.w	ip, #0
 80073da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80073de:	2f09      	cmp	r7, #9
 80073e0:	d97c      	bls.n	80074dc <_strtod_l+0x294>
 80073e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80073e4:	f04f 0e00 	mov.w	lr, #0
 80073e8:	e09a      	b.n	8007520 <_strtod_l+0x2d8>
 80073ea:	2300      	movs	r3, #0
 80073ec:	e7c7      	b.n	800737e <_strtod_l+0x136>
 80073ee:	9905      	ldr	r1, [sp, #20]
 80073f0:	2908      	cmp	r1, #8
 80073f2:	bfdd      	ittte	le
 80073f4:	9907      	ldrle	r1, [sp, #28]
 80073f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80073fa:	9307      	strle	r3, [sp, #28]
 80073fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007400:	9b05      	ldr	r3, [sp, #20]
 8007402:	3001      	adds	r0, #1
 8007404:	3301      	adds	r3, #1
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	901b      	str	r0, [sp, #108]	; 0x6c
 800740a:	e7bf      	b.n	800738c <_strtod_l+0x144>
 800740c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800740e:	191a      	adds	r2, r3, r4
 8007410:	921b      	str	r2, [sp, #108]	; 0x6c
 8007412:	9a05      	ldr	r2, [sp, #20]
 8007414:	5d1b      	ldrb	r3, [r3, r4]
 8007416:	2a00      	cmp	r2, #0
 8007418:	d037      	beq.n	800748a <_strtod_l+0x242>
 800741a:	9c05      	ldr	r4, [sp, #20]
 800741c:	4602      	mov	r2, r0
 800741e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007422:	2909      	cmp	r1, #9
 8007424:	d913      	bls.n	800744e <_strtod_l+0x206>
 8007426:	2101      	movs	r1, #1
 8007428:	9104      	str	r1, [sp, #16]
 800742a:	e7c2      	b.n	80073b2 <_strtod_l+0x16a>
 800742c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	921b      	str	r2, [sp, #108]	; 0x6c
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	3001      	adds	r0, #1
 8007436:	2b30      	cmp	r3, #48	; 0x30
 8007438:	d0f8      	beq.n	800742c <_strtod_l+0x1e4>
 800743a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800743e:	2a08      	cmp	r2, #8
 8007440:	f200 84e4 	bhi.w	8007e0c <_strtod_l+0xbc4>
 8007444:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007446:	9208      	str	r2, [sp, #32]
 8007448:	4602      	mov	r2, r0
 800744a:	2000      	movs	r0, #0
 800744c:	4604      	mov	r4, r0
 800744e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007452:	f100 0101 	add.w	r1, r0, #1
 8007456:	d012      	beq.n	800747e <_strtod_l+0x236>
 8007458:	440a      	add	r2, r1
 800745a:	eb00 0c04 	add.w	ip, r0, r4
 800745e:	4621      	mov	r1, r4
 8007460:	270a      	movs	r7, #10
 8007462:	458c      	cmp	ip, r1
 8007464:	d113      	bne.n	800748e <_strtod_l+0x246>
 8007466:	1821      	adds	r1, r4, r0
 8007468:	2908      	cmp	r1, #8
 800746a:	f104 0401 	add.w	r4, r4, #1
 800746e:	4404      	add	r4, r0
 8007470:	dc19      	bgt.n	80074a6 <_strtod_l+0x25e>
 8007472:	9b07      	ldr	r3, [sp, #28]
 8007474:	210a      	movs	r1, #10
 8007476:	fb01 e303 	mla	r3, r1, r3, lr
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	2100      	movs	r1, #0
 800747e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007480:	1c58      	adds	r0, r3, #1
 8007482:	901b      	str	r0, [sp, #108]	; 0x6c
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	4608      	mov	r0, r1
 8007488:	e7c9      	b.n	800741e <_strtod_l+0x1d6>
 800748a:	9805      	ldr	r0, [sp, #20]
 800748c:	e7d3      	b.n	8007436 <_strtod_l+0x1ee>
 800748e:	2908      	cmp	r1, #8
 8007490:	f101 0101 	add.w	r1, r1, #1
 8007494:	dc03      	bgt.n	800749e <_strtod_l+0x256>
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	437b      	muls	r3, r7
 800749a:	9307      	str	r3, [sp, #28]
 800749c:	e7e1      	b.n	8007462 <_strtod_l+0x21a>
 800749e:	2910      	cmp	r1, #16
 80074a0:	bfd8      	it	le
 80074a2:	437d      	mulle	r5, r7
 80074a4:	e7dd      	b.n	8007462 <_strtod_l+0x21a>
 80074a6:	2c10      	cmp	r4, #16
 80074a8:	bfdc      	itt	le
 80074aa:	210a      	movle	r1, #10
 80074ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80074b0:	e7e4      	b.n	800747c <_strtod_l+0x234>
 80074b2:	2301      	movs	r3, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	e781      	b.n	80073bc <_strtod_l+0x174>
 80074b8:	f04f 0c01 	mov.w	ip, #1
 80074bc:	1cb3      	adds	r3, r6, #2
 80074be:	931b      	str	r3, [sp, #108]	; 0x6c
 80074c0:	78b3      	ldrb	r3, [r6, #2]
 80074c2:	e78a      	b.n	80073da <_strtod_l+0x192>
 80074c4:	f04f 0c00 	mov.w	ip, #0
 80074c8:	e7f8      	b.n	80074bc <_strtod_l+0x274>
 80074ca:	bf00      	nop
 80074cc:	0800a554 	.word	0x0800a554
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074d6:	1c5f      	adds	r7, r3, #1
 80074d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d0f9      	beq.n	80074d4 <_strtod_l+0x28c>
 80074e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80074e4:	2f08      	cmp	r7, #8
 80074e6:	f63f af7d 	bhi.w	80073e4 <_strtod_l+0x19c>
 80074ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80074ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074f0:	930a      	str	r3, [sp, #40]	; 0x28
 80074f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074f4:	1c5f      	adds	r7, r3, #1
 80074f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80074fe:	f1b8 0f09 	cmp.w	r8, #9
 8007502:	d937      	bls.n	8007574 <_strtod_l+0x32c>
 8007504:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007506:	1a7f      	subs	r7, r7, r1
 8007508:	2f08      	cmp	r7, #8
 800750a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800750e:	dc37      	bgt.n	8007580 <_strtod_l+0x338>
 8007510:	45be      	cmp	lr, r7
 8007512:	bfa8      	it	ge
 8007514:	46be      	movge	lr, r7
 8007516:	f1bc 0f00 	cmp.w	ip, #0
 800751a:	d001      	beq.n	8007520 <_strtod_l+0x2d8>
 800751c:	f1ce 0e00 	rsb	lr, lr, #0
 8007520:	2c00      	cmp	r4, #0
 8007522:	d151      	bne.n	80075c8 <_strtod_l+0x380>
 8007524:	2800      	cmp	r0, #0
 8007526:	f47f aece 	bne.w	80072c6 <_strtod_l+0x7e>
 800752a:	9a06      	ldr	r2, [sp, #24]
 800752c:	2a00      	cmp	r2, #0
 800752e:	f47f aeca 	bne.w	80072c6 <_strtod_l+0x7e>
 8007532:	9a04      	ldr	r2, [sp, #16]
 8007534:	2a00      	cmp	r2, #0
 8007536:	f47f aee4 	bne.w	8007302 <_strtod_l+0xba>
 800753a:	2b4e      	cmp	r3, #78	; 0x4e
 800753c:	d027      	beq.n	800758e <_strtod_l+0x346>
 800753e:	dc21      	bgt.n	8007584 <_strtod_l+0x33c>
 8007540:	2b49      	cmp	r3, #73	; 0x49
 8007542:	f47f aede 	bne.w	8007302 <_strtod_l+0xba>
 8007546:	49a0      	ldr	r1, [pc, #640]	; (80077c8 <_strtod_l+0x580>)
 8007548:	a81b      	add	r0, sp, #108	; 0x6c
 800754a:	f001 fdd7 	bl	80090fc <__match>
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f aed7 	beq.w	8007302 <_strtod_l+0xba>
 8007554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007556:	499d      	ldr	r1, [pc, #628]	; (80077cc <_strtod_l+0x584>)
 8007558:	3b01      	subs	r3, #1
 800755a:	a81b      	add	r0, sp, #108	; 0x6c
 800755c:	931b      	str	r3, [sp, #108]	; 0x6c
 800755e:	f001 fdcd 	bl	80090fc <__match>
 8007562:	b910      	cbnz	r0, 800756a <_strtod_l+0x322>
 8007564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007566:	3301      	adds	r3, #1
 8007568:	931b      	str	r3, [sp, #108]	; 0x6c
 800756a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80077e0 <_strtod_l+0x598>
 800756e:	f04f 0a00 	mov.w	sl, #0
 8007572:	e6a8      	b.n	80072c6 <_strtod_l+0x7e>
 8007574:	210a      	movs	r1, #10
 8007576:	fb01 3e0e 	mla	lr, r1, lr, r3
 800757a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800757e:	e7b8      	b.n	80074f2 <_strtod_l+0x2aa>
 8007580:	46be      	mov	lr, r7
 8007582:	e7c8      	b.n	8007516 <_strtod_l+0x2ce>
 8007584:	2b69      	cmp	r3, #105	; 0x69
 8007586:	d0de      	beq.n	8007546 <_strtod_l+0x2fe>
 8007588:	2b6e      	cmp	r3, #110	; 0x6e
 800758a:	f47f aeba 	bne.w	8007302 <_strtod_l+0xba>
 800758e:	4990      	ldr	r1, [pc, #576]	; (80077d0 <_strtod_l+0x588>)
 8007590:	a81b      	add	r0, sp, #108	; 0x6c
 8007592:	f001 fdb3 	bl	80090fc <__match>
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f aeb3 	beq.w	8007302 <_strtod_l+0xba>
 800759c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b28      	cmp	r3, #40	; 0x28
 80075a2:	d10e      	bne.n	80075c2 <_strtod_l+0x37a>
 80075a4:	aa1e      	add	r2, sp, #120	; 0x78
 80075a6:	498b      	ldr	r1, [pc, #556]	; (80077d4 <_strtod_l+0x58c>)
 80075a8:	a81b      	add	r0, sp, #108	; 0x6c
 80075aa:	f001 fdbb 	bl	8009124 <__hexnan>
 80075ae:	2805      	cmp	r0, #5
 80075b0:	d107      	bne.n	80075c2 <_strtod_l+0x37a>
 80075b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80075b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80075bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80075c0:	e681      	b.n	80072c6 <_strtod_l+0x7e>
 80075c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80077e8 <_strtod_l+0x5a0>
 80075c6:	e7d2      	b.n	800756e <_strtod_l+0x326>
 80075c8:	ebae 0302 	sub.w	r3, lr, r2
 80075cc:	9306      	str	r3, [sp, #24]
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	9807      	ldr	r0, [sp, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf08      	it	eq
 80075d6:	4623      	moveq	r3, r4
 80075d8:	2c10      	cmp	r4, #16
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	46a0      	mov	r8, r4
 80075de:	bfa8      	it	ge
 80075e0:	f04f 0810 	movge.w	r8, #16
 80075e4:	f7f8 ffae 	bl	8000544 <__aeabi_ui2d>
 80075e8:	2c09      	cmp	r4, #9
 80075ea:	4682      	mov	sl, r0
 80075ec:	468b      	mov	fp, r1
 80075ee:	dc13      	bgt.n	8007618 <_strtod_l+0x3d0>
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f43f ae67 	beq.w	80072c6 <_strtod_l+0x7e>
 80075f8:	9b06      	ldr	r3, [sp, #24]
 80075fa:	dd7a      	ble.n	80076f2 <_strtod_l+0x4aa>
 80075fc:	2b16      	cmp	r3, #22
 80075fe:	dc61      	bgt.n	80076c4 <_strtod_l+0x47c>
 8007600:	4a75      	ldr	r2, [pc, #468]	; (80077d8 <_strtod_l+0x590>)
 8007602:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007606:	e9de 0100 	ldrd	r0, r1, [lr]
 800760a:	4652      	mov	r2, sl
 800760c:	465b      	mov	r3, fp
 800760e:	f7f9 f813 	bl	8000638 <__aeabi_dmul>
 8007612:	4682      	mov	sl, r0
 8007614:	468b      	mov	fp, r1
 8007616:	e656      	b.n	80072c6 <_strtod_l+0x7e>
 8007618:	4b6f      	ldr	r3, [pc, #444]	; (80077d8 <_strtod_l+0x590>)
 800761a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800761e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007622:	f7f9 f809 	bl	8000638 <__aeabi_dmul>
 8007626:	4606      	mov	r6, r0
 8007628:	4628      	mov	r0, r5
 800762a:	460f      	mov	r7, r1
 800762c:	f7f8 ff8a 	bl	8000544 <__aeabi_ui2d>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f7f8 fe48 	bl	80002cc <__adddf3>
 800763c:	2c0f      	cmp	r4, #15
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	ddd5      	ble.n	80075f0 <_strtod_l+0x3a8>
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	eba4 0808 	sub.w	r8, r4, r8
 800764a:	4498      	add	r8, r3
 800764c:	f1b8 0f00 	cmp.w	r8, #0
 8007650:	f340 8096 	ble.w	8007780 <_strtod_l+0x538>
 8007654:	f018 030f 	ands.w	r3, r8, #15
 8007658:	d00a      	beq.n	8007670 <_strtod_l+0x428>
 800765a:	495f      	ldr	r1, [pc, #380]	; (80077d8 <_strtod_l+0x590>)
 800765c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007660:	4652      	mov	r2, sl
 8007662:	465b      	mov	r3, fp
 8007664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007668:	f7f8 ffe6 	bl	8000638 <__aeabi_dmul>
 800766c:	4682      	mov	sl, r0
 800766e:	468b      	mov	fp, r1
 8007670:	f038 080f 	bics.w	r8, r8, #15
 8007674:	d073      	beq.n	800775e <_strtod_l+0x516>
 8007676:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800767a:	dd47      	ble.n	800770c <_strtod_l+0x4c4>
 800767c:	2400      	movs	r4, #0
 800767e:	46a0      	mov	r8, r4
 8007680:	9407      	str	r4, [sp, #28]
 8007682:	9405      	str	r4, [sp, #20]
 8007684:	2322      	movs	r3, #34	; 0x22
 8007686:	f8df b158 	ldr.w	fp, [pc, #344]	; 80077e0 <_strtod_l+0x598>
 800768a:	f8c9 3000 	str.w	r3, [r9]
 800768e:	f04f 0a00 	mov.w	sl, #0
 8007692:	9b07      	ldr	r3, [sp, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f43f ae16 	beq.w	80072c6 <_strtod_l+0x7e>
 800769a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800769c:	4648      	mov	r0, r9
 800769e:	f001 fe33 	bl	8009308 <_Bfree>
 80076a2:	9905      	ldr	r1, [sp, #20]
 80076a4:	4648      	mov	r0, r9
 80076a6:	f001 fe2f 	bl	8009308 <_Bfree>
 80076aa:	4641      	mov	r1, r8
 80076ac:	4648      	mov	r0, r9
 80076ae:	f001 fe2b 	bl	8009308 <_Bfree>
 80076b2:	9907      	ldr	r1, [sp, #28]
 80076b4:	4648      	mov	r0, r9
 80076b6:	f001 fe27 	bl	8009308 <_Bfree>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4648      	mov	r0, r9
 80076be:	f001 fe23 	bl	8009308 <_Bfree>
 80076c2:	e600      	b.n	80072c6 <_strtod_l+0x7e>
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80076ca:	4293      	cmp	r3, r2
 80076cc:	dbba      	blt.n	8007644 <_strtod_l+0x3fc>
 80076ce:	4d42      	ldr	r5, [pc, #264]	; (80077d8 <_strtod_l+0x590>)
 80076d0:	f1c4 040f 	rsb	r4, r4, #15
 80076d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076e0:	f7f8 ffaa 	bl	8000638 <__aeabi_dmul>
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	1b1c      	subs	r4, r3, r4
 80076e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80076ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076f0:	e78d      	b.n	800760e <_strtod_l+0x3c6>
 80076f2:	f113 0f16 	cmn.w	r3, #22
 80076f6:	dba5      	blt.n	8007644 <_strtod_l+0x3fc>
 80076f8:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <_strtod_l+0x590>)
 80076fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80076fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007702:	4650      	mov	r0, sl
 8007704:	4659      	mov	r1, fp
 8007706:	f7f9 f8c1 	bl	800088c <__aeabi_ddiv>
 800770a:	e782      	b.n	8007612 <_strtod_l+0x3ca>
 800770c:	2300      	movs	r3, #0
 800770e:	4e33      	ldr	r6, [pc, #204]	; (80077dc <_strtod_l+0x594>)
 8007710:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007714:	4650      	mov	r0, sl
 8007716:	4659      	mov	r1, fp
 8007718:	461d      	mov	r5, r3
 800771a:	f1b8 0f01 	cmp.w	r8, #1
 800771e:	dc21      	bgt.n	8007764 <_strtod_l+0x51c>
 8007720:	b10b      	cbz	r3, 8007726 <_strtod_l+0x4de>
 8007722:	4682      	mov	sl, r0
 8007724:	468b      	mov	fp, r1
 8007726:	4b2d      	ldr	r3, [pc, #180]	; (80077dc <_strtod_l+0x594>)
 8007728:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800772c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007730:	4652      	mov	r2, sl
 8007732:	465b      	mov	r3, fp
 8007734:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007738:	f7f8 ff7e 	bl	8000638 <__aeabi_dmul>
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <_strtod_l+0x598>)
 800773e:	460a      	mov	r2, r1
 8007740:	400b      	ands	r3, r1
 8007742:	4928      	ldr	r1, [pc, #160]	; (80077e4 <_strtod_l+0x59c>)
 8007744:	428b      	cmp	r3, r1
 8007746:	4682      	mov	sl, r0
 8007748:	d898      	bhi.n	800767c <_strtod_l+0x434>
 800774a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800774e:	428b      	cmp	r3, r1
 8007750:	bf86      	itte	hi
 8007752:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80077ec <_strtod_l+0x5a4>
 8007756:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800775a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800775e:	2300      	movs	r3, #0
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	e077      	b.n	8007854 <_strtod_l+0x60c>
 8007764:	f018 0f01 	tst.w	r8, #1
 8007768:	d006      	beq.n	8007778 <_strtod_l+0x530>
 800776a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f8 ff61 	bl	8000638 <__aeabi_dmul>
 8007776:	2301      	movs	r3, #1
 8007778:	3501      	adds	r5, #1
 800777a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800777e:	e7cc      	b.n	800771a <_strtod_l+0x4d2>
 8007780:	d0ed      	beq.n	800775e <_strtod_l+0x516>
 8007782:	f1c8 0800 	rsb	r8, r8, #0
 8007786:	f018 020f 	ands.w	r2, r8, #15
 800778a:	d00a      	beq.n	80077a2 <_strtod_l+0x55a>
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <_strtod_l+0x590>)
 800778e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f9 f877 	bl	800088c <__aeabi_ddiv>
 800779e:	4682      	mov	sl, r0
 80077a0:	468b      	mov	fp, r1
 80077a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80077a6:	d0da      	beq.n	800775e <_strtod_l+0x516>
 80077a8:	f1b8 0f1f 	cmp.w	r8, #31
 80077ac:	dd20      	ble.n	80077f0 <_strtod_l+0x5a8>
 80077ae:	2400      	movs	r4, #0
 80077b0:	46a0      	mov	r8, r4
 80077b2:	9407      	str	r4, [sp, #28]
 80077b4:	9405      	str	r4, [sp, #20]
 80077b6:	2322      	movs	r3, #34	; 0x22
 80077b8:	f04f 0a00 	mov.w	sl, #0
 80077bc:	f04f 0b00 	mov.w	fp, #0
 80077c0:	f8c9 3000 	str.w	r3, [r9]
 80077c4:	e765      	b.n	8007692 <_strtod_l+0x44a>
 80077c6:	bf00      	nop
 80077c8:	0800a51d 	.word	0x0800a51d
 80077cc:	0800a5ab 	.word	0x0800a5ab
 80077d0:	0800a525 	.word	0x0800a525
 80077d4:	0800a568 	.word	0x0800a568
 80077d8:	0800a5e8 	.word	0x0800a5e8
 80077dc:	0800a5c0 	.word	0x0800a5c0
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	7ca00000 	.word	0x7ca00000
 80077e8:	fff80000 	.word	0xfff80000
 80077ec:	7fefffff 	.word	0x7fefffff
 80077f0:	f018 0310 	ands.w	r3, r8, #16
 80077f4:	bf18      	it	ne
 80077f6:	236a      	movne	r3, #106	; 0x6a
 80077f8:	4da0      	ldr	r5, [pc, #640]	; (8007a7c <_strtod_l+0x834>)
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	4650      	mov	r0, sl
 80077fe:	4659      	mov	r1, fp
 8007800:	2300      	movs	r3, #0
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	f300 810a 	bgt.w	8007a1e <_strtod_l+0x7d6>
 800780a:	b10b      	cbz	r3, 8007810 <_strtod_l+0x5c8>
 800780c:	4682      	mov	sl, r0
 800780e:	468b      	mov	fp, r1
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	b1bb      	cbz	r3, 8007844 <_strtod_l+0x5fc>
 8007814:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800781c:	2b00      	cmp	r3, #0
 800781e:	4659      	mov	r1, fp
 8007820:	dd10      	ble.n	8007844 <_strtod_l+0x5fc>
 8007822:	2b1f      	cmp	r3, #31
 8007824:	f340 8107 	ble.w	8007a36 <_strtod_l+0x7ee>
 8007828:	2b34      	cmp	r3, #52	; 0x34
 800782a:	bfde      	ittt	le
 800782c:	3b20      	suble	r3, #32
 800782e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007832:	fa02 f303 	lslle.w	r3, r2, r3
 8007836:	f04f 0a00 	mov.w	sl, #0
 800783a:	bfcc      	ite	gt
 800783c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007840:	ea03 0b01 	andle.w	fp, r3, r1
 8007844:	2200      	movs	r2, #0
 8007846:	2300      	movs	r3, #0
 8007848:	4650      	mov	r0, sl
 800784a:	4659      	mov	r1, fp
 800784c:	f7f9 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8007850:	2800      	cmp	r0, #0
 8007852:	d1ac      	bne.n	80077ae <_strtod_l+0x566>
 8007854:	9b07      	ldr	r3, [sp, #28]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	9a05      	ldr	r2, [sp, #20]
 800785a:	9908      	ldr	r1, [sp, #32]
 800785c:	4623      	mov	r3, r4
 800785e:	4648      	mov	r0, r9
 8007860:	f001 fda4 	bl	80093ac <__s2b>
 8007864:	9007      	str	r0, [sp, #28]
 8007866:	2800      	cmp	r0, #0
 8007868:	f43f af08 	beq.w	800767c <_strtod_l+0x434>
 800786c:	9a06      	ldr	r2, [sp, #24]
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	2a00      	cmp	r2, #0
 8007872:	f1c3 0300 	rsb	r3, r3, #0
 8007876:	bfa8      	it	ge
 8007878:	2300      	movge	r3, #0
 800787a:	930e      	str	r3, [sp, #56]	; 0x38
 800787c:	2400      	movs	r4, #0
 800787e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007882:	9316      	str	r3, [sp, #88]	; 0x58
 8007884:	46a0      	mov	r8, r4
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	4648      	mov	r0, r9
 800788a:	6859      	ldr	r1, [r3, #4]
 800788c:	f001 fd08 	bl	80092a0 <_Balloc>
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aef6 	beq.w	8007684 <_strtod_l+0x43c>
 8007898:	9b07      	ldr	r3, [sp, #28]
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	3202      	adds	r2, #2
 800789e:	f103 010c 	add.w	r1, r3, #12
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	300c      	adds	r0, #12
 80078a6:	f7fe fe3b 	bl	8006520 <memcpy>
 80078aa:	aa1e      	add	r2, sp, #120	; 0x78
 80078ac:	a91d      	add	r1, sp, #116	; 0x74
 80078ae:	ec4b ab10 	vmov	d0, sl, fp
 80078b2:	4648      	mov	r0, r9
 80078b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80078b8:	f002 f834 	bl	8009924 <__d2b>
 80078bc:	901c      	str	r0, [sp, #112]	; 0x70
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f aee0 	beq.w	8007684 <_strtod_l+0x43c>
 80078c4:	2101      	movs	r1, #1
 80078c6:	4648      	mov	r0, r9
 80078c8:	f001 fdfc 	bl	80094c4 <__i2b>
 80078cc:	4680      	mov	r8, r0
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f aed8 	beq.w	8007684 <_strtod_l+0x43c>
 80078d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80078d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078d8:	2e00      	cmp	r6, #0
 80078da:	bfab      	itete	ge
 80078dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80078de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80078e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80078e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80078e4:	bfac      	ite	ge
 80078e6:	18f7      	addge	r7, r6, r3
 80078e8:	1b9d      	sublt	r5, r3, r6
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	1af6      	subs	r6, r6, r3
 80078ee:	4416      	add	r6, r2
 80078f0:	4b63      	ldr	r3, [pc, #396]	; (8007a80 <_strtod_l+0x838>)
 80078f2:	3e01      	subs	r6, #1
 80078f4:	429e      	cmp	r6, r3
 80078f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078fa:	f280 80af 	bge.w	8007a5c <_strtod_l+0x814>
 80078fe:	1b9b      	subs	r3, r3, r6
 8007900:	2b1f      	cmp	r3, #31
 8007902:	eba2 0203 	sub.w	r2, r2, r3
 8007906:	f04f 0101 	mov.w	r1, #1
 800790a:	f300 809b 	bgt.w	8007a44 <_strtod_l+0x7fc>
 800790e:	fa01 f303 	lsl.w	r3, r1, r3
 8007912:	930f      	str	r3, [sp, #60]	; 0x3c
 8007914:	2300      	movs	r3, #0
 8007916:	930a      	str	r3, [sp, #40]	; 0x28
 8007918:	18be      	adds	r6, r7, r2
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	42b7      	cmp	r7, r6
 800791e:	4415      	add	r5, r2
 8007920:	441d      	add	r5, r3
 8007922:	463b      	mov	r3, r7
 8007924:	bfa8      	it	ge
 8007926:	4633      	movge	r3, r6
 8007928:	42ab      	cmp	r3, r5
 800792a:	bfa8      	it	ge
 800792c:	462b      	movge	r3, r5
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfc2      	ittt	gt
 8007932:	1af6      	subgt	r6, r6, r3
 8007934:	1aed      	subgt	r5, r5, r3
 8007936:	1aff      	subgt	r7, r7, r3
 8007938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793a:	b1bb      	cbz	r3, 800796c <_strtod_l+0x724>
 800793c:	4641      	mov	r1, r8
 800793e:	461a      	mov	r2, r3
 8007940:	4648      	mov	r0, r9
 8007942:	f001 fe5f 	bl	8009604 <__pow5mult>
 8007946:	4680      	mov	r8, r0
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f ae9b 	beq.w	8007684 <_strtod_l+0x43c>
 800794e:	4601      	mov	r1, r0
 8007950:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007952:	4648      	mov	r0, r9
 8007954:	f001 fdbf 	bl	80094d6 <__multiply>
 8007958:	900c      	str	r0, [sp, #48]	; 0x30
 800795a:	2800      	cmp	r0, #0
 800795c:	f43f ae92 	beq.w	8007684 <_strtod_l+0x43c>
 8007960:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007962:	4648      	mov	r0, r9
 8007964:	f001 fcd0 	bl	8009308 <_Bfree>
 8007968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800796a:	931c      	str	r3, [sp, #112]	; 0x70
 800796c:	2e00      	cmp	r6, #0
 800796e:	dc7a      	bgt.n	8007a66 <_strtod_l+0x81e>
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	2b00      	cmp	r3, #0
 8007974:	dd08      	ble.n	8007988 <_strtod_l+0x740>
 8007976:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007978:	9905      	ldr	r1, [sp, #20]
 800797a:	4648      	mov	r0, r9
 800797c:	f001 fe42 	bl	8009604 <__pow5mult>
 8007980:	9005      	str	r0, [sp, #20]
 8007982:	2800      	cmp	r0, #0
 8007984:	f43f ae7e 	beq.w	8007684 <_strtod_l+0x43c>
 8007988:	2d00      	cmp	r5, #0
 800798a:	dd08      	ble.n	800799e <_strtod_l+0x756>
 800798c:	462a      	mov	r2, r5
 800798e:	9905      	ldr	r1, [sp, #20]
 8007990:	4648      	mov	r0, r9
 8007992:	f001 fe85 	bl	80096a0 <__lshift>
 8007996:	9005      	str	r0, [sp, #20]
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f ae73 	beq.w	8007684 <_strtod_l+0x43c>
 800799e:	2f00      	cmp	r7, #0
 80079a0:	dd08      	ble.n	80079b4 <_strtod_l+0x76c>
 80079a2:	4641      	mov	r1, r8
 80079a4:	463a      	mov	r2, r7
 80079a6:	4648      	mov	r0, r9
 80079a8:	f001 fe7a 	bl	80096a0 <__lshift>
 80079ac:	4680      	mov	r8, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f43f ae68 	beq.w	8007684 <_strtod_l+0x43c>
 80079b4:	9a05      	ldr	r2, [sp, #20]
 80079b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079b8:	4648      	mov	r0, r9
 80079ba:	f001 fedf 	bl	800977c <__mdiff>
 80079be:	4604      	mov	r4, r0
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f43f ae5f 	beq.w	8007684 <_strtod_l+0x43c>
 80079c6:	68c3      	ldr	r3, [r0, #12]
 80079c8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ca:	2300      	movs	r3, #0
 80079cc:	60c3      	str	r3, [r0, #12]
 80079ce:	4641      	mov	r1, r8
 80079d0:	f001 feba 	bl	8009748 <__mcmp>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	da55      	bge.n	8007a84 <_strtod_l+0x83c>
 80079d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079da:	b9e3      	cbnz	r3, 8007a16 <_strtod_l+0x7ce>
 80079dc:	f1ba 0f00 	cmp.w	sl, #0
 80079e0:	d119      	bne.n	8007a16 <_strtod_l+0x7ce>
 80079e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079e6:	b9b3      	cbnz	r3, 8007a16 <_strtod_l+0x7ce>
 80079e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	051b      	lsls	r3, r3, #20
 80079f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079f4:	d90f      	bls.n	8007a16 <_strtod_l+0x7ce>
 80079f6:	6963      	ldr	r3, [r4, #20]
 80079f8:	b913      	cbnz	r3, 8007a00 <_strtod_l+0x7b8>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	dd0a      	ble.n	8007a16 <_strtod_l+0x7ce>
 8007a00:	4621      	mov	r1, r4
 8007a02:	2201      	movs	r2, #1
 8007a04:	4648      	mov	r0, r9
 8007a06:	f001 fe4b 	bl	80096a0 <__lshift>
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	f001 fe9b 	bl	8009748 <__mcmp>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	dc67      	bgt.n	8007ae6 <_strtod_l+0x89e>
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d171      	bne.n	8007b00 <_strtod_l+0x8b8>
 8007a1c:	e63d      	b.n	800769a <_strtod_l+0x452>
 8007a1e:	f018 0f01 	tst.w	r8, #1
 8007a22:	d004      	beq.n	8007a2e <_strtod_l+0x7e6>
 8007a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a32:	3508      	adds	r5, #8
 8007a34:	e6e5      	b.n	8007802 <_strtod_l+0x5ba>
 8007a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	ea03 0a0a 	and.w	sl, r3, sl
 8007a42:	e6ff      	b.n	8007844 <_strtod_l+0x5fc>
 8007a44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007a48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007a4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007a50:	36e2      	adds	r6, #226	; 0xe2
 8007a52:	fa01 f306 	lsl.w	r3, r1, r6
 8007a56:	930a      	str	r3, [sp, #40]	; 0x28
 8007a58:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a5a:	e75d      	b.n	8007918 <_strtod_l+0x6d0>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a60:	2301      	movs	r3, #1
 8007a62:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a64:	e758      	b.n	8007918 <_strtod_l+0x6d0>
 8007a66:	4632      	mov	r2, r6
 8007a68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a6a:	4648      	mov	r0, r9
 8007a6c:	f001 fe18 	bl	80096a0 <__lshift>
 8007a70:	901c      	str	r0, [sp, #112]	; 0x70
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f47f af7c 	bne.w	8007970 <_strtod_l+0x728>
 8007a78:	e604      	b.n	8007684 <_strtod_l+0x43c>
 8007a7a:	bf00      	nop
 8007a7c:	0800a580 	.word	0x0800a580
 8007a80:	fffffc02 	.word	0xfffffc02
 8007a84:	465d      	mov	r5, fp
 8007a86:	f040 8086 	bne.w	8007b96 <_strtod_l+0x94e>
 8007a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a90:	b32a      	cbz	r2, 8007ade <_strtod_l+0x896>
 8007a92:	4aaf      	ldr	r2, [pc, #700]	; (8007d50 <_strtod_l+0xb08>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d153      	bne.n	8007b40 <_strtod_l+0x8f8>
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	b1d3      	cbz	r3, 8007ad4 <_strtod_l+0x88c>
 8007a9e:	4aad      	ldr	r2, [pc, #692]	; (8007d54 <_strtod_l+0xb0c>)
 8007aa0:	402a      	ands	r2, r5
 8007aa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007aa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aaa:	d816      	bhi.n	8007ada <_strtod_l+0x892>
 8007aac:	0d12      	lsrs	r2, r2, #20
 8007aae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	4298      	cmp	r0, r3
 8007ab8:	d142      	bne.n	8007b40 <_strtod_l+0x8f8>
 8007aba:	4ba7      	ldr	r3, [pc, #668]	; (8007d58 <_strtod_l+0xb10>)
 8007abc:	429d      	cmp	r5, r3
 8007abe:	d102      	bne.n	8007ac6 <_strtod_l+0x87e>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f addf 	beq.w	8007684 <_strtod_l+0x43c>
 8007ac6:	4ba3      	ldr	r3, [pc, #652]	; (8007d54 <_strtod_l+0xb0c>)
 8007ac8:	402b      	ands	r3, r5
 8007aca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	e7a0      	b.n	8007a16 <_strtod_l+0x7ce>
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad8:	e7ed      	b.n	8007ab6 <_strtod_l+0x86e>
 8007ada:	460b      	mov	r3, r1
 8007adc:	e7eb      	b.n	8007ab6 <_strtod_l+0x86e>
 8007ade:	bb7b      	cbnz	r3, 8007b40 <_strtod_l+0x8f8>
 8007ae0:	f1ba 0f00 	cmp.w	sl, #0
 8007ae4:	d12c      	bne.n	8007b40 <_strtod_l+0x8f8>
 8007ae6:	9904      	ldr	r1, [sp, #16]
 8007ae8:	4a9a      	ldr	r2, [pc, #616]	; (8007d54 <_strtod_l+0xb0c>)
 8007aea:	465b      	mov	r3, fp
 8007aec:	b1f1      	cbz	r1, 8007b2c <_strtod_l+0x8e4>
 8007aee:	ea02 010b 	and.w	r1, r2, fp
 8007af2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007af6:	dc19      	bgt.n	8007b2c <_strtod_l+0x8e4>
 8007af8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007afc:	f77f ae5b 	ble.w	80077b6 <_strtod_l+0x56e>
 8007b00:	4a96      	ldr	r2, [pc, #600]	; (8007d5c <_strtod_l+0xb14>)
 8007b02:	2300      	movs	r3, #0
 8007b04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007b08:	4650      	mov	r0, sl
 8007b0a:	4659      	mov	r1, fp
 8007b0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b10:	f7f8 fd92 	bl	8000638 <__aeabi_dmul>
 8007b14:	4682      	mov	sl, r0
 8007b16:	468b      	mov	fp, r1
 8007b18:	2900      	cmp	r1, #0
 8007b1a:	f47f adbe 	bne.w	800769a <_strtod_l+0x452>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f47f adbb 	bne.w	800769a <_strtod_l+0x452>
 8007b24:	2322      	movs	r3, #34	; 0x22
 8007b26:	f8c9 3000 	str.w	r3, [r9]
 8007b2a:	e5b6      	b.n	800769a <_strtod_l+0x452>
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b3e:	e76a      	b.n	8007a16 <_strtod_l+0x7ce>
 8007b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b42:	b193      	cbz	r3, 8007b6a <_strtod_l+0x922>
 8007b44:	422b      	tst	r3, r5
 8007b46:	f43f af66 	beq.w	8007a16 <_strtod_l+0x7ce>
 8007b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4c:	9a04      	ldr	r2, [sp, #16]
 8007b4e:	4650      	mov	r0, sl
 8007b50:	4659      	mov	r1, fp
 8007b52:	b173      	cbz	r3, 8007b72 <_strtod_l+0x92a>
 8007b54:	f7ff fb5c 	bl	8007210 <sulp>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b60:	f7f8 fbb4 	bl	80002cc <__adddf3>
 8007b64:	4682      	mov	sl, r0
 8007b66:	468b      	mov	fp, r1
 8007b68:	e755      	b.n	8007a16 <_strtod_l+0x7ce>
 8007b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b6c:	ea13 0f0a 	tst.w	r3, sl
 8007b70:	e7e9      	b.n	8007b46 <_strtod_l+0x8fe>
 8007b72:	f7ff fb4d 	bl	8007210 <sulp>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b7e:	f7f8 fba3 	bl	80002c8 <__aeabi_dsub>
 8007b82:	2200      	movs	r2, #0
 8007b84:	2300      	movs	r3, #0
 8007b86:	4682      	mov	sl, r0
 8007b88:	468b      	mov	fp, r1
 8007b8a:	f7f8 ffbd 	bl	8000b08 <__aeabi_dcmpeq>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f47f ae11 	bne.w	80077b6 <_strtod_l+0x56e>
 8007b94:	e73f      	b.n	8007a16 <_strtod_l+0x7ce>
 8007b96:	4641      	mov	r1, r8
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f001 ff12 	bl	80099c2 <__ratio>
 8007b9e:	ec57 6b10 	vmov	r6, r7, d0
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ba8:	ee10 0a10 	vmov	r0, s0
 8007bac:	4639      	mov	r1, r7
 8007bae:	f7f8 ffbf 	bl	8000b30 <__aeabi_dcmple>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d077      	beq.n	8007ca6 <_strtod_l+0xa5e>
 8007bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d04a      	beq.n	8007c52 <_strtod_l+0xa0a>
 8007bbc:	4b68      	ldr	r3, [pc, #416]	; (8007d60 <_strtod_l+0xb18>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007bc4:	4f66      	ldr	r7, [pc, #408]	; (8007d60 <_strtod_l+0xb18>)
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	4b62      	ldr	r3, [pc, #392]	; (8007d54 <_strtod_l+0xb0c>)
 8007bca:	402b      	ands	r3, r5
 8007bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd0:	4b64      	ldr	r3, [pc, #400]	; (8007d64 <_strtod_l+0xb1c>)
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	f040 80ce 	bne.w	8007d74 <_strtod_l+0xb2c>
 8007bd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007be0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007be4:	ec4b ab10 	vmov	d0, sl, fp
 8007be8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007bec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007bf0:	f001 fe22 	bl	8009838 <__ulp>
 8007bf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf8:	ec53 2b10 	vmov	r2, r3, d0
 8007bfc:	f7f8 fd1c 	bl	8000638 <__aeabi_dmul>
 8007c00:	4652      	mov	r2, sl
 8007c02:	465b      	mov	r3, fp
 8007c04:	f7f8 fb62 	bl	80002cc <__adddf3>
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4952      	ldr	r1, [pc, #328]	; (8007d54 <_strtod_l+0xb0c>)
 8007c0c:	4a56      	ldr	r2, [pc, #344]	; (8007d68 <_strtod_l+0xb20>)
 8007c0e:	4019      	ands	r1, r3
 8007c10:	4291      	cmp	r1, r2
 8007c12:	4682      	mov	sl, r0
 8007c14:	d95b      	bls.n	8007cce <_strtod_l+0xa86>
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d103      	bne.n	8007c28 <_strtod_l+0x9e0>
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	3301      	adds	r3, #1
 8007c24:	f43f ad2e 	beq.w	8007684 <_strtod_l+0x43c>
 8007c28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007d58 <_strtod_l+0xb10>
 8007c2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c32:	4648      	mov	r0, r9
 8007c34:	f001 fb68 	bl	8009308 <_Bfree>
 8007c38:	9905      	ldr	r1, [sp, #20]
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	f001 fb64 	bl	8009308 <_Bfree>
 8007c40:	4641      	mov	r1, r8
 8007c42:	4648      	mov	r0, r9
 8007c44:	f001 fb60 	bl	8009308 <_Bfree>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f001 fb5c 	bl	8009308 <_Bfree>
 8007c50:	e619      	b.n	8007886 <_strtod_l+0x63e>
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	d11a      	bne.n	8007c8e <_strtod_l+0xa46>
 8007c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c5c:	b9eb      	cbnz	r3, 8007c9a <_strtod_l+0xa52>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4b3f      	ldr	r3, [pc, #252]	; (8007d60 <_strtod_l+0xb18>)
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 ff59 	bl	8000b1c <__aeabi_dcmplt>
 8007c6a:	b9c8      	cbnz	r0, 8007ca0 <_strtod_l+0xa58>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	4639      	mov	r1, r7
 8007c70:	2200      	movs	r2, #0
 8007c72:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <_strtod_l+0xb24>)
 8007c74:	f7f8 fce0 	bl	8000638 <__aeabi_dmul>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c80:	9618      	str	r6, [sp, #96]	; 0x60
 8007c82:	9319      	str	r3, [sp, #100]	; 0x64
 8007c84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007c88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c8c:	e79c      	b.n	8007bc8 <_strtod_l+0x980>
 8007c8e:	f1ba 0f01 	cmp.w	sl, #1
 8007c92:	d102      	bne.n	8007c9a <_strtod_l+0xa52>
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	f43f ad8e 	beq.w	80077b6 <_strtod_l+0x56e>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <_strtod_l+0xb28>)
 8007c9e:	e78f      	b.n	8007bc0 <_strtod_l+0x978>
 8007ca0:	2600      	movs	r6, #0
 8007ca2:	4f32      	ldr	r7, [pc, #200]	; (8007d6c <_strtod_l+0xb24>)
 8007ca4:	e7ea      	b.n	8007c7c <_strtod_l+0xa34>
 8007ca6:	4b31      	ldr	r3, [pc, #196]	; (8007d6c <_strtod_l+0xb24>)
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	2200      	movs	r2, #0
 8007cae:	f7f8 fcc3 	bl	8000638 <__aeabi_dmul>
 8007cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	b933      	cbnz	r3, 8007cc8 <_strtod_l+0xa80>
 8007cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cbe:	9010      	str	r0, [sp, #64]	; 0x40
 8007cc0:	9311      	str	r3, [sp, #68]	; 0x44
 8007cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cc6:	e7df      	b.n	8007c88 <_strtod_l+0xa40>
 8007cc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007ccc:	e7f9      	b.n	8007cc2 <_strtod_l+0xa7a>
 8007cce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ab      	bne.n	8007c30 <_strtod_l+0x9e8>
 8007cd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cdc:	0d1b      	lsrs	r3, r3, #20
 8007cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ce0:	051b      	lsls	r3, r3, #20
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	465d      	mov	r5, fp
 8007ce6:	d1a3      	bne.n	8007c30 <_strtod_l+0x9e8>
 8007ce8:	4639      	mov	r1, r7
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7f8 ff54 	bl	8000b98 <__aeabi_d2iz>
 8007cf0:	f7f8 fc38 	bl	8000564 <__aeabi_i2d>
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 fae4 	bl	80002c8 <__aeabi_dsub>
 8007d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d02:	4606      	mov	r6, r0
 8007d04:	460f      	mov	r7, r1
 8007d06:	b933      	cbnz	r3, 8007d16 <_strtod_l+0xace>
 8007d08:	f1ba 0f00 	cmp.w	sl, #0
 8007d0c:	d103      	bne.n	8007d16 <_strtod_l+0xace>
 8007d0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	d06d      	beq.n	8007df2 <_strtod_l+0xbaa>
 8007d16:	a30a      	add	r3, pc, #40	; (adr r3, 8007d40 <_strtod_l+0xaf8>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 fefc 	bl	8000b1c <__aeabi_dcmplt>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f47f acb8 	bne.w	800769a <_strtod_l+0x452>
 8007d2a:	a307      	add	r3, pc, #28	; (adr r3, 8007d48 <_strtod_l+0xb00>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 ff10 	bl	8000b58 <__aeabi_dcmpgt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f43f af79 	beq.w	8007c30 <_strtod_l+0x9e8>
 8007d3e:	e4ac      	b.n	800769a <_strtod_l+0x452>
 8007d40:	94a03595 	.word	0x94a03595
 8007d44:	3fdfffff 	.word	0x3fdfffff
 8007d48:	35afe535 	.word	0x35afe535
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	000fffff 	.word	0x000fffff
 8007d54:	7ff00000 	.word	0x7ff00000
 8007d58:	7fefffff 	.word	0x7fefffff
 8007d5c:	39500000 	.word	0x39500000
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	7fe00000 	.word	0x7fe00000
 8007d68:	7c9fffff 	.word	0x7c9fffff
 8007d6c:	3fe00000 	.word	0x3fe00000
 8007d70:	bff00000 	.word	0xbff00000
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	b333      	cbz	r3, 8007dc6 <_strtod_l+0xb7e>
 8007d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d7e:	d822      	bhi.n	8007dc6 <_strtod_l+0xb7e>
 8007d80:	a327      	add	r3, pc, #156	; (adr r3, 8007e20 <_strtod_l+0xbd8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	4630      	mov	r0, r6
 8007d88:	4639      	mov	r1, r7
 8007d8a:	f7f8 fed1 	bl	8000b30 <__aeabi_dcmple>
 8007d8e:	b1a0      	cbz	r0, 8007dba <_strtod_l+0xb72>
 8007d90:	4639      	mov	r1, r7
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7f8 ff28 	bl	8000be8 <__aeabi_d2uiz>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	bf08      	it	eq
 8007d9c:	2001      	moveq	r0, #1
 8007d9e:	f7f8 fbd1 	bl	8000544 <__aeabi_ui2d>
 8007da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da4:	4606      	mov	r6, r0
 8007da6:	460f      	mov	r7, r1
 8007da8:	bb03      	cbnz	r3, 8007dec <_strtod_l+0xba4>
 8007daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dae:	9012      	str	r0, [sp, #72]	; 0x48
 8007db0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007db2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007dca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007dce:	f001 fd33 	bl	8009838 <__ulp>
 8007dd2:	4650      	mov	r0, sl
 8007dd4:	ec53 2b10 	vmov	r2, r3, d0
 8007dd8:	4659      	mov	r1, fp
 8007dda:	f7f8 fc2d 	bl	8000638 <__aeabi_dmul>
 8007dde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007de2:	f7f8 fa73 	bl	80002cc <__adddf3>
 8007de6:	4682      	mov	sl, r0
 8007de8:	468b      	mov	fp, r1
 8007dea:	e772      	b.n	8007cd2 <_strtod_l+0xa8a>
 8007dec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007df0:	e7df      	b.n	8007db2 <_strtod_l+0xb6a>
 8007df2:	a30d      	add	r3, pc, #52	; (adr r3, 8007e28 <_strtod_l+0xbe0>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f7f8 fe90 	bl	8000b1c <__aeabi_dcmplt>
 8007dfc:	e79c      	b.n	8007d38 <_strtod_l+0xaf0>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	930d      	str	r3, [sp, #52]	; 0x34
 8007e02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	f7ff ba61 	b.w	80072ce <_strtod_l+0x86>
 8007e0c:	2b65      	cmp	r3, #101	; 0x65
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f43f ab4e 	beq.w	80074b2 <_strtod_l+0x26a>
 8007e16:	2101      	movs	r1, #1
 8007e18:	4614      	mov	r4, r2
 8007e1a:	9104      	str	r1, [sp, #16]
 8007e1c:	f7ff bacb 	b.w	80073b6 <_strtod_l+0x16e>
 8007e20:	ffc00000 	.word	0xffc00000
 8007e24:	41dfffff 	.word	0x41dfffff
 8007e28:	94a03595 	.word	0x94a03595
 8007e2c:	3fcfffff 	.word	0x3fcfffff

08007e30 <_strtod_r>:
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <_strtod_r+0x18>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	b410      	push	{r4}
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	4c04      	ldr	r4, [pc, #16]	; (8007e4c <_strtod_r+0x1c>)
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf08      	it	eq
 8007e3e:	4623      	moveq	r3, r4
 8007e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e44:	f7ff ba00 	b.w	8007248 <_strtod_l>
 8007e48:	20000018 	.word	0x20000018
 8007e4c:	2000007c 	.word	0x2000007c

08007e50 <_strtol_l.isra.0>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	4692      	mov	sl, r2
 8007e5a:	461e      	mov	r6, r3
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	463d      	mov	r5, r7
 8007e60:	9808      	ldr	r0, [sp, #32]
 8007e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e66:	f001 f9ed 	bl	8009244 <__locale_ctype_ptr_l>
 8007e6a:	4420      	add	r0, r4
 8007e6c:	7843      	ldrb	r3, [r0, #1]
 8007e6e:	f013 0308 	ands.w	r3, r3, #8
 8007e72:	d132      	bne.n	8007eda <_strtol_l.isra.0+0x8a>
 8007e74:	2c2d      	cmp	r4, #45	; 0x2d
 8007e76:	d132      	bne.n	8007ede <_strtol_l.isra.0+0x8e>
 8007e78:	787c      	ldrb	r4, [r7, #1]
 8007e7a:	1cbd      	adds	r5, r7, #2
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d05d      	beq.n	8007f3e <_strtol_l.isra.0+0xee>
 8007e82:	2e10      	cmp	r6, #16
 8007e84:	d109      	bne.n	8007e9a <_strtol_l.isra.0+0x4a>
 8007e86:	2c30      	cmp	r4, #48	; 0x30
 8007e88:	d107      	bne.n	8007e9a <_strtol_l.isra.0+0x4a>
 8007e8a:	782b      	ldrb	r3, [r5, #0]
 8007e8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e90:	2b58      	cmp	r3, #88	; 0x58
 8007e92:	d14f      	bne.n	8007f34 <_strtol_l.isra.0+0xe4>
 8007e94:	786c      	ldrb	r4, [r5, #1]
 8007e96:	2610      	movs	r6, #16
 8007e98:	3502      	adds	r5, #2
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007ea2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007ea6:	2700      	movs	r7, #0
 8007ea8:	fbb1 fcf6 	udiv	ip, r1, r6
 8007eac:	4638      	mov	r0, r7
 8007eae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007eb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d817      	bhi.n	8007eea <_strtol_l.isra.0+0x9a>
 8007eba:	461c      	mov	r4, r3
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	dd23      	ble.n	8007f08 <_strtol_l.isra.0+0xb8>
 8007ec0:	1c7b      	adds	r3, r7, #1
 8007ec2:	d007      	beq.n	8007ed4 <_strtol_l.isra.0+0x84>
 8007ec4:	4584      	cmp	ip, r0
 8007ec6:	d31c      	bcc.n	8007f02 <_strtol_l.isra.0+0xb2>
 8007ec8:	d101      	bne.n	8007ece <_strtol_l.isra.0+0x7e>
 8007eca:	45a6      	cmp	lr, r4
 8007ecc:	db19      	blt.n	8007f02 <_strtol_l.isra.0+0xb2>
 8007ece:	fb00 4006 	mla	r0, r0, r6, r4
 8007ed2:	2701      	movs	r7, #1
 8007ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed8:	e7eb      	b.n	8007eb2 <_strtol_l.isra.0+0x62>
 8007eda:	462f      	mov	r7, r5
 8007edc:	e7bf      	b.n	8007e5e <_strtol_l.isra.0+0xe>
 8007ede:	2c2b      	cmp	r4, #43	; 0x2b
 8007ee0:	bf04      	itt	eq
 8007ee2:	1cbd      	addeq	r5, r7, #2
 8007ee4:	787c      	ldrbeq	r4, [r7, #1]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	e7c9      	b.n	8007e7e <_strtol_l.isra.0+0x2e>
 8007eea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007eee:	2b19      	cmp	r3, #25
 8007ef0:	d801      	bhi.n	8007ef6 <_strtol_l.isra.0+0xa6>
 8007ef2:	3c37      	subs	r4, #55	; 0x37
 8007ef4:	e7e2      	b.n	8007ebc <_strtol_l.isra.0+0x6c>
 8007ef6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007efa:	2b19      	cmp	r3, #25
 8007efc:	d804      	bhi.n	8007f08 <_strtol_l.isra.0+0xb8>
 8007efe:	3c57      	subs	r4, #87	; 0x57
 8007f00:	e7dc      	b.n	8007ebc <_strtol_l.isra.0+0x6c>
 8007f02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f06:	e7e5      	b.n	8007ed4 <_strtol_l.isra.0+0x84>
 8007f08:	1c7b      	adds	r3, r7, #1
 8007f0a:	d108      	bne.n	8007f1e <_strtol_l.isra.0+0xce>
 8007f0c:	2322      	movs	r3, #34	; 0x22
 8007f0e:	f8c8 3000 	str.w	r3, [r8]
 8007f12:	4608      	mov	r0, r1
 8007f14:	f1ba 0f00 	cmp.w	sl, #0
 8007f18:	d107      	bne.n	8007f2a <_strtol_l.isra.0+0xda>
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	b102      	cbz	r2, 8007f22 <_strtol_l.isra.0+0xd2>
 8007f20:	4240      	negs	r0, r0
 8007f22:	f1ba 0f00 	cmp.w	sl, #0
 8007f26:	d0f8      	beq.n	8007f1a <_strtol_l.isra.0+0xca>
 8007f28:	b10f      	cbz	r7, 8007f2e <_strtol_l.isra.0+0xde>
 8007f2a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007f2e:	f8ca 9000 	str.w	r9, [sl]
 8007f32:	e7f2      	b.n	8007f1a <_strtol_l.isra.0+0xca>
 8007f34:	2430      	movs	r4, #48	; 0x30
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d1af      	bne.n	8007e9a <_strtol_l.isra.0+0x4a>
 8007f3a:	2608      	movs	r6, #8
 8007f3c:	e7ad      	b.n	8007e9a <_strtol_l.isra.0+0x4a>
 8007f3e:	2c30      	cmp	r4, #48	; 0x30
 8007f40:	d0a3      	beq.n	8007e8a <_strtol_l.isra.0+0x3a>
 8007f42:	260a      	movs	r6, #10
 8007f44:	e7a9      	b.n	8007e9a <_strtol_l.isra.0+0x4a>
	...

08007f48 <_strtol_r>:
 8007f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f4a:	4c06      	ldr	r4, [pc, #24]	; (8007f64 <_strtol_r+0x1c>)
 8007f4c:	4d06      	ldr	r5, [pc, #24]	; (8007f68 <_strtol_r+0x20>)
 8007f4e:	6824      	ldr	r4, [r4, #0]
 8007f50:	6a24      	ldr	r4, [r4, #32]
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	bf08      	it	eq
 8007f56:	462c      	moveq	r4, r5
 8007f58:	9400      	str	r4, [sp, #0]
 8007f5a:	f7ff ff79 	bl	8007e50 <_strtol_l.isra.0>
 8007f5e:	b003      	add	sp, #12
 8007f60:	bd30      	pop	{r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018
 8007f68:	2000007c 	.word	0x2000007c

08007f6c <quorem>:
 8007f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	6903      	ldr	r3, [r0, #16]
 8007f72:	690c      	ldr	r4, [r1, #16]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	4680      	mov	r8, r0
 8007f78:	f2c0 8082 	blt.w	8008080 <quorem+0x114>
 8007f7c:	3c01      	subs	r4, #1
 8007f7e:	f101 0714 	add.w	r7, r1, #20
 8007f82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007f86:	f100 0614 	add.w	r6, r0, #20
 8007f8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007f8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007f92:	eb06 030c 	add.w	r3, r6, ip
 8007f96:	3501      	adds	r5, #1
 8007f98:	eb07 090c 	add.w	r9, r7, ip
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007fa2:	b395      	cbz	r5, 800800a <quorem+0x9e>
 8007fa4:	f04f 0a00 	mov.w	sl, #0
 8007fa8:	4638      	mov	r0, r7
 8007faa:	46b6      	mov	lr, r6
 8007fac:	46d3      	mov	fp, sl
 8007fae:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fb2:	b293      	uxth	r3, r2
 8007fb4:	fb05 a303 	mla	r3, r5, r3, sl
 8007fb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	ebab 0303 	sub.w	r3, fp, r3
 8007fc2:	0c12      	lsrs	r2, r2, #16
 8007fc4:	f8de b000 	ldr.w	fp, [lr]
 8007fc8:	fb05 a202 	mla	r2, r5, r2, sl
 8007fcc:	fa13 f38b 	uxtah	r3, r3, fp
 8007fd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007fd4:	fa1f fb82 	uxth.w	fp, r2
 8007fd8:	f8de 2000 	ldr.w	r2, [lr]
 8007fdc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fea:	4581      	cmp	r9, r0
 8007fec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ff0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ff4:	d2db      	bcs.n	8007fae <quorem+0x42>
 8007ff6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ffa:	b933      	cbnz	r3, 800800a <quorem+0x9e>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	3b04      	subs	r3, #4
 8008000:	429e      	cmp	r6, r3
 8008002:	461a      	mov	r2, r3
 8008004:	d330      	bcc.n	8008068 <quorem+0xfc>
 8008006:	f8c8 4010 	str.w	r4, [r8, #16]
 800800a:	4640      	mov	r0, r8
 800800c:	f001 fb9c 	bl	8009748 <__mcmp>
 8008010:	2800      	cmp	r0, #0
 8008012:	db25      	blt.n	8008060 <quorem+0xf4>
 8008014:	3501      	adds	r5, #1
 8008016:	4630      	mov	r0, r6
 8008018:	f04f 0c00 	mov.w	ip, #0
 800801c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008020:	f8d0 e000 	ldr.w	lr, [r0]
 8008024:	b293      	uxth	r3, r2
 8008026:	ebac 0303 	sub.w	r3, ip, r3
 800802a:	0c12      	lsrs	r2, r2, #16
 800802c:	fa13 f38e 	uxtah	r3, r3, lr
 8008030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800803e:	45b9      	cmp	r9, r7
 8008040:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008044:	f840 3b04 	str.w	r3, [r0], #4
 8008048:	d2e8      	bcs.n	800801c <quorem+0xb0>
 800804a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800804e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008052:	b92a      	cbnz	r2, 8008060 <quorem+0xf4>
 8008054:	3b04      	subs	r3, #4
 8008056:	429e      	cmp	r6, r3
 8008058:	461a      	mov	r2, r3
 800805a:	d30b      	bcc.n	8008074 <quorem+0x108>
 800805c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008060:	4628      	mov	r0, r5
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	3b04      	subs	r3, #4
 800806c:	2a00      	cmp	r2, #0
 800806e:	d1ca      	bne.n	8008006 <quorem+0x9a>
 8008070:	3c01      	subs	r4, #1
 8008072:	e7c5      	b.n	8008000 <quorem+0x94>
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	3b04      	subs	r3, #4
 8008078:	2a00      	cmp	r2, #0
 800807a:	d1ef      	bne.n	800805c <quorem+0xf0>
 800807c:	3c01      	subs	r4, #1
 800807e:	e7ea      	b.n	8008056 <quorem+0xea>
 8008080:	2000      	movs	r0, #0
 8008082:	e7ee      	b.n	8008062 <quorem+0xf6>
 8008084:	0000      	movs	r0, r0
	...

08008088 <_dtoa_r>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ec57 6b10 	vmov	r6, r7, d0
 8008090:	b097      	sub	sp, #92	; 0x5c
 8008092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008094:	9106      	str	r1, [sp, #24]
 8008096:	4604      	mov	r4, r0
 8008098:	920b      	str	r2, [sp, #44]	; 0x2c
 800809a:	9312      	str	r3, [sp, #72]	; 0x48
 800809c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080a0:	e9cd 6700 	strd	r6, r7, [sp]
 80080a4:	b93d      	cbnz	r5, 80080b6 <_dtoa_r+0x2e>
 80080a6:	2010      	movs	r0, #16
 80080a8:	f001 f8e0 	bl	800926c <malloc>
 80080ac:	6260      	str	r0, [r4, #36]	; 0x24
 80080ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080b2:	6005      	str	r5, [r0, #0]
 80080b4:	60c5      	str	r5, [r0, #12]
 80080b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	b151      	cbz	r1, 80080d2 <_dtoa_r+0x4a>
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	604a      	str	r2, [r1, #4]
 80080c0:	2301      	movs	r3, #1
 80080c2:	4093      	lsls	r3, r2
 80080c4:	608b      	str	r3, [r1, #8]
 80080c6:	4620      	mov	r0, r4
 80080c8:	f001 f91e 	bl	8009308 <_Bfree>
 80080cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	1e3b      	subs	r3, r7, #0
 80080d4:	bfbb      	ittet	lt
 80080d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080da:	9301      	strlt	r3, [sp, #4]
 80080dc:	2300      	movge	r3, #0
 80080de:	2201      	movlt	r2, #1
 80080e0:	bfac      	ite	ge
 80080e2:	f8c8 3000 	strge.w	r3, [r8]
 80080e6:	f8c8 2000 	strlt.w	r2, [r8]
 80080ea:	4baf      	ldr	r3, [pc, #700]	; (80083a8 <_dtoa_r+0x320>)
 80080ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080f0:	ea33 0308 	bics.w	r3, r3, r8
 80080f4:	d114      	bne.n	8008120 <_dtoa_r+0x98>
 80080f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	b923      	cbnz	r3, 800810c <_dtoa_r+0x84>
 8008102:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008106:	2800      	cmp	r0, #0
 8008108:	f000 8542 	beq.w	8008b90 <_dtoa_r+0xb08>
 800810c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800810e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80083bc <_dtoa_r+0x334>
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8544 	beq.w	8008ba0 <_dtoa_r+0xb18>
 8008118:	f10b 0303 	add.w	r3, fp, #3
 800811c:	f000 bd3e 	b.w	8008b9c <_dtoa_r+0xb14>
 8008120:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fcec 	bl	8000b08 <__aeabi_dcmpeq>
 8008130:	4681      	mov	r9, r0
 8008132:	b168      	cbz	r0, 8008150 <_dtoa_r+0xc8>
 8008134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008136:	2301      	movs	r3, #1
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8524 	beq.w	8008b8a <_dtoa_r+0xb02>
 8008142:	4b9a      	ldr	r3, [pc, #616]	; (80083ac <_dtoa_r+0x324>)
 8008144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008146:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	f000 bd28 	b.w	8008ba0 <_dtoa_r+0xb18>
 8008150:	aa14      	add	r2, sp, #80	; 0x50
 8008152:	a915      	add	r1, sp, #84	; 0x54
 8008154:	ec47 6b10 	vmov	d0, r6, r7
 8008158:	4620      	mov	r0, r4
 800815a:	f001 fbe3 	bl	8009924 <__d2b>
 800815e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008162:	9004      	str	r0, [sp, #16]
 8008164:	2d00      	cmp	r5, #0
 8008166:	d07c      	beq.n	8008262 <_dtoa_r+0x1da>
 8008168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800816c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008170:	46b2      	mov	sl, r6
 8008172:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800817a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800817e:	2200      	movs	r2, #0
 8008180:	4b8b      	ldr	r3, [pc, #556]	; (80083b0 <_dtoa_r+0x328>)
 8008182:	4650      	mov	r0, sl
 8008184:	4659      	mov	r1, fp
 8008186:	f7f8 f89f 	bl	80002c8 <__aeabi_dsub>
 800818a:	a381      	add	r3, pc, #516	; (adr r3, 8008390 <_dtoa_r+0x308>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fa52 	bl	8000638 <__aeabi_dmul>
 8008194:	a380      	add	r3, pc, #512	; (adr r3, 8008398 <_dtoa_r+0x310>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 f897 	bl	80002cc <__adddf3>
 800819e:	4606      	mov	r6, r0
 80081a0:	4628      	mov	r0, r5
 80081a2:	460f      	mov	r7, r1
 80081a4:	f7f8 f9de 	bl	8000564 <__aeabi_i2d>
 80081a8:	a37d      	add	r3, pc, #500	; (adr r3, 80083a0 <_dtoa_r+0x318>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fa43 	bl	8000638 <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4630      	mov	r0, r6
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 f887 	bl	80002cc <__adddf3>
 80081be:	4606      	mov	r6, r0
 80081c0:	460f      	mov	r7, r1
 80081c2:	f7f8 fce9 	bl	8000b98 <__aeabi_d2iz>
 80081c6:	2200      	movs	r2, #0
 80081c8:	4682      	mov	sl, r0
 80081ca:	2300      	movs	r3, #0
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 fca4 	bl	8000b1c <__aeabi_dcmplt>
 80081d4:	b148      	cbz	r0, 80081ea <_dtoa_r+0x162>
 80081d6:	4650      	mov	r0, sl
 80081d8:	f7f8 f9c4 	bl	8000564 <__aeabi_i2d>
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	f7f8 fc92 	bl	8000b08 <__aeabi_dcmpeq>
 80081e4:	b908      	cbnz	r0, 80081ea <_dtoa_r+0x162>
 80081e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80081ea:	f1ba 0f16 	cmp.w	sl, #22
 80081ee:	d859      	bhi.n	80082a4 <_dtoa_r+0x21c>
 80081f0:	4970      	ldr	r1, [pc, #448]	; (80083b4 <_dtoa_r+0x32c>)
 80081f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80081f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fe:	f7f8 fcab 	bl	8000b58 <__aeabi_dcmpgt>
 8008202:	2800      	cmp	r0, #0
 8008204:	d050      	beq.n	80082a8 <_dtoa_r+0x220>
 8008206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800820a:	2300      	movs	r3, #0
 800820c:	930f      	str	r3, [sp, #60]	; 0x3c
 800820e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008210:	1b5d      	subs	r5, r3, r5
 8008212:	f1b5 0801 	subs.w	r8, r5, #1
 8008216:	bf49      	itett	mi
 8008218:	f1c5 0301 	rsbmi	r3, r5, #1
 800821c:	2300      	movpl	r3, #0
 800821e:	9305      	strmi	r3, [sp, #20]
 8008220:	f04f 0800 	movmi.w	r8, #0
 8008224:	bf58      	it	pl
 8008226:	9305      	strpl	r3, [sp, #20]
 8008228:	f1ba 0f00 	cmp.w	sl, #0
 800822c:	db3e      	blt.n	80082ac <_dtoa_r+0x224>
 800822e:	2300      	movs	r3, #0
 8008230:	44d0      	add	r8, sl
 8008232:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	9b06      	ldr	r3, [sp, #24]
 800823a:	2b09      	cmp	r3, #9
 800823c:	f200 8090 	bhi.w	8008360 <_dtoa_r+0x2d8>
 8008240:	2b05      	cmp	r3, #5
 8008242:	bfc4      	itt	gt
 8008244:	3b04      	subgt	r3, #4
 8008246:	9306      	strgt	r3, [sp, #24]
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	f1a3 0302 	sub.w	r3, r3, #2
 800824e:	bfcc      	ite	gt
 8008250:	2500      	movgt	r5, #0
 8008252:	2501      	movle	r5, #1
 8008254:	2b03      	cmp	r3, #3
 8008256:	f200 808f 	bhi.w	8008378 <_dtoa_r+0x2f0>
 800825a:	e8df f003 	tbb	[pc, r3]
 800825e:	7f7d      	.short	0x7f7d
 8008260:	7131      	.short	0x7131
 8008262:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008266:	441d      	add	r5, r3
 8008268:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800826c:	2820      	cmp	r0, #32
 800826e:	dd13      	ble.n	8008298 <_dtoa_r+0x210>
 8008270:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	fa08 f800 	lsl.w	r8, r8, r0
 800827a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800827e:	fa23 f000 	lsr.w	r0, r3, r0
 8008282:	ea48 0000 	orr.w	r0, r8, r0
 8008286:	f7f8 f95d 	bl	8000544 <__aeabi_ui2d>
 800828a:	2301      	movs	r3, #1
 800828c:	4682      	mov	sl, r0
 800828e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008292:	3d01      	subs	r5, #1
 8008294:	9313      	str	r3, [sp, #76]	; 0x4c
 8008296:	e772      	b.n	800817e <_dtoa_r+0xf6>
 8008298:	9b00      	ldr	r3, [sp, #0]
 800829a:	f1c0 0020 	rsb	r0, r0, #32
 800829e:	fa03 f000 	lsl.w	r0, r3, r0
 80082a2:	e7f0      	b.n	8008286 <_dtoa_r+0x1fe>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e7b1      	b.n	800820c <_dtoa_r+0x184>
 80082a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082aa:	e7b0      	b.n	800820e <_dtoa_r+0x186>
 80082ac:	9b05      	ldr	r3, [sp, #20]
 80082ae:	eba3 030a 	sub.w	r3, r3, sl
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	f1ca 0300 	rsb	r3, sl, #0
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	2300      	movs	r3, #0
 80082bc:	930e      	str	r3, [sp, #56]	; 0x38
 80082be:	e7bb      	b.n	8008238 <_dtoa_r+0x1b0>
 80082c0:	2301      	movs	r3, #1
 80082c2:	930a      	str	r3, [sp, #40]	; 0x28
 80082c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dd59      	ble.n	800837e <_dtoa_r+0x2f6>
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	4699      	mov	r9, r3
 80082ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082d0:	2200      	movs	r2, #0
 80082d2:	6072      	str	r2, [r6, #4]
 80082d4:	2204      	movs	r2, #4
 80082d6:	f102 0014 	add.w	r0, r2, #20
 80082da:	4298      	cmp	r0, r3
 80082dc:	6871      	ldr	r1, [r6, #4]
 80082de:	d953      	bls.n	8008388 <_dtoa_r+0x300>
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 ffdd 	bl	80092a0 <_Balloc>
 80082e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e8:	6030      	str	r0, [r6, #0]
 80082ea:	f1b9 0f0e 	cmp.w	r9, #14
 80082ee:	f8d3 b000 	ldr.w	fp, [r3]
 80082f2:	f200 80e6 	bhi.w	80084c2 <_dtoa_r+0x43a>
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	f000 80e3 	beq.w	80084c2 <_dtoa_r+0x43a>
 80082fc:	ed9d 7b00 	vldr	d7, [sp]
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008308:	dd74      	ble.n	80083f4 <_dtoa_r+0x36c>
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <_dtoa_r+0x32c>)
 800830c:	f00a 030f 	and.w	r3, sl, #15
 8008310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008314:	ed93 7b00 	vldr	d7, [r3]
 8008318:	ea4f 162a 	mov.w	r6, sl, asr #4
 800831c:	06f0      	lsls	r0, r6, #27
 800831e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008322:	d565      	bpl.n	80083f0 <_dtoa_r+0x368>
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <_dtoa_r+0x330>)
 8008326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800832a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800832e:	f7f8 faad 	bl	800088c <__aeabi_ddiv>
 8008332:	e9cd 0100 	strd	r0, r1, [sp]
 8008336:	f006 060f 	and.w	r6, r6, #15
 800833a:	2503      	movs	r5, #3
 800833c:	4f1e      	ldr	r7, [pc, #120]	; (80083b8 <_dtoa_r+0x330>)
 800833e:	e04c      	b.n	80083da <_dtoa_r+0x352>
 8008340:	2301      	movs	r3, #1
 8008342:	930a      	str	r3, [sp, #40]	; 0x28
 8008344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008346:	4453      	add	r3, sl
 8008348:	f103 0901 	add.w	r9, r3, #1
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	464b      	mov	r3, r9
 8008350:	2b01      	cmp	r3, #1
 8008352:	bfb8      	it	lt
 8008354:	2301      	movlt	r3, #1
 8008356:	e7ba      	b.n	80082ce <_dtoa_r+0x246>
 8008358:	2300      	movs	r3, #0
 800835a:	e7b2      	b.n	80082c2 <_dtoa_r+0x23a>
 800835c:	2300      	movs	r3, #0
 800835e:	e7f0      	b.n	8008342 <_dtoa_r+0x2ba>
 8008360:	2501      	movs	r5, #1
 8008362:	2300      	movs	r3, #0
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	950a      	str	r5, [sp, #40]	; 0x28
 8008368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	4699      	mov	r9, r3
 8008370:	2200      	movs	r2, #0
 8008372:	2312      	movs	r3, #18
 8008374:	920b      	str	r2, [sp, #44]	; 0x2c
 8008376:	e7aa      	b.n	80082ce <_dtoa_r+0x246>
 8008378:	2301      	movs	r3, #1
 800837a:	930a      	str	r3, [sp, #40]	; 0x28
 800837c:	e7f4      	b.n	8008368 <_dtoa_r+0x2e0>
 800837e:	2301      	movs	r3, #1
 8008380:	9302      	str	r3, [sp, #8]
 8008382:	4699      	mov	r9, r3
 8008384:	461a      	mov	r2, r3
 8008386:	e7f5      	b.n	8008374 <_dtoa_r+0x2ec>
 8008388:	3101      	adds	r1, #1
 800838a:	6071      	str	r1, [r6, #4]
 800838c:	0052      	lsls	r2, r2, #1
 800838e:	e7a2      	b.n	80082d6 <_dtoa_r+0x24e>
 8008390:	636f4361 	.word	0x636f4361
 8008394:	3fd287a7 	.word	0x3fd287a7
 8008398:	8b60c8b3 	.word	0x8b60c8b3
 800839c:	3fc68a28 	.word	0x3fc68a28
 80083a0:	509f79fb 	.word	0x509f79fb
 80083a4:	3fd34413 	.word	0x3fd34413
 80083a8:	7ff00000 	.word	0x7ff00000
 80083ac:	0800a529 	.word	0x0800a529
 80083b0:	3ff80000 	.word	0x3ff80000
 80083b4:	0800a5e8 	.word	0x0800a5e8
 80083b8:	0800a5c0 	.word	0x0800a5c0
 80083bc:	0800a5b1 	.word	0x0800a5b1
 80083c0:	07f1      	lsls	r1, r6, #31
 80083c2:	d508      	bpl.n	80083d6 <_dtoa_r+0x34e>
 80083c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083cc:	f7f8 f934 	bl	8000638 <__aeabi_dmul>
 80083d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083d4:	3501      	adds	r5, #1
 80083d6:	1076      	asrs	r6, r6, #1
 80083d8:	3708      	adds	r7, #8
 80083da:	2e00      	cmp	r6, #0
 80083dc:	d1f0      	bne.n	80083c0 <_dtoa_r+0x338>
 80083de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80083e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e6:	f7f8 fa51 	bl	800088c <__aeabi_ddiv>
 80083ea:	e9cd 0100 	strd	r0, r1, [sp]
 80083ee:	e01a      	b.n	8008426 <_dtoa_r+0x39e>
 80083f0:	2502      	movs	r5, #2
 80083f2:	e7a3      	b.n	800833c <_dtoa_r+0x2b4>
 80083f4:	f000 80a0 	beq.w	8008538 <_dtoa_r+0x4b0>
 80083f8:	f1ca 0600 	rsb	r6, sl, #0
 80083fc:	4b9f      	ldr	r3, [pc, #636]	; (800867c <_dtoa_r+0x5f4>)
 80083fe:	4fa0      	ldr	r7, [pc, #640]	; (8008680 <_dtoa_r+0x5f8>)
 8008400:	f006 020f 	and.w	r2, r6, #15
 8008404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008410:	f7f8 f912 	bl	8000638 <__aeabi_dmul>
 8008414:	e9cd 0100 	strd	r0, r1, [sp]
 8008418:	1136      	asrs	r6, r6, #4
 800841a:	2300      	movs	r3, #0
 800841c:	2502      	movs	r5, #2
 800841e:	2e00      	cmp	r6, #0
 8008420:	d17f      	bne.n	8008522 <_dtoa_r+0x49a>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e1      	bne.n	80083ea <_dtoa_r+0x362>
 8008426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8087 	beq.w	800853c <_dtoa_r+0x4b4>
 800842e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008432:	2200      	movs	r2, #0
 8008434:	4b93      	ldr	r3, [pc, #588]	; (8008684 <_dtoa_r+0x5fc>)
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 fb6f 	bl	8000b1c <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	d07c      	beq.n	800853c <_dtoa_r+0x4b4>
 8008442:	f1b9 0f00 	cmp.w	r9, #0
 8008446:	d079      	beq.n	800853c <_dtoa_r+0x4b4>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd35      	ble.n	80084ba <_dtoa_r+0x432>
 800844e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008452:	9308      	str	r3, [sp, #32]
 8008454:	4639      	mov	r1, r7
 8008456:	2200      	movs	r2, #0
 8008458:	4b8b      	ldr	r3, [pc, #556]	; (8008688 <_dtoa_r+0x600>)
 800845a:	4630      	mov	r0, r6
 800845c:	f7f8 f8ec 	bl	8000638 <__aeabi_dmul>
 8008460:	e9cd 0100 	strd	r0, r1, [sp]
 8008464:	9f02      	ldr	r7, [sp, #8]
 8008466:	3501      	adds	r5, #1
 8008468:	4628      	mov	r0, r5
 800846a:	f7f8 f87b 	bl	8000564 <__aeabi_i2d>
 800846e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008472:	f7f8 f8e1 	bl	8000638 <__aeabi_dmul>
 8008476:	2200      	movs	r2, #0
 8008478:	4b84      	ldr	r3, [pc, #528]	; (800868c <_dtoa_r+0x604>)
 800847a:	f7f7 ff27 	bl	80002cc <__adddf3>
 800847e:	4605      	mov	r5, r0
 8008480:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008484:	2f00      	cmp	r7, #0
 8008486:	d15d      	bne.n	8008544 <_dtoa_r+0x4bc>
 8008488:	2200      	movs	r2, #0
 800848a:	4b81      	ldr	r3, [pc, #516]	; (8008690 <_dtoa_r+0x608>)
 800848c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008490:	f7f7 ff1a 	bl	80002c8 <__aeabi_dsub>
 8008494:	462a      	mov	r2, r5
 8008496:	4633      	mov	r3, r6
 8008498:	e9cd 0100 	strd	r0, r1, [sp]
 800849c:	f7f8 fb5c 	bl	8000b58 <__aeabi_dcmpgt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	f040 8288 	bne.w	80089b6 <_dtoa_r+0x92e>
 80084a6:	462a      	mov	r2, r5
 80084a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b0:	f7f8 fb34 	bl	8000b1c <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f040 827c 	bne.w	80089b2 <_dtoa_r+0x92a>
 80084ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084be:	e9cd 2300 	strd	r2, r3, [sp]
 80084c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f2c0 8150 	blt.w	800876a <_dtoa_r+0x6e2>
 80084ca:	f1ba 0f0e 	cmp.w	sl, #14
 80084ce:	f300 814c 	bgt.w	800876a <_dtoa_r+0x6e2>
 80084d2:	4b6a      	ldr	r3, [pc, #424]	; (800867c <_dtoa_r+0x5f4>)
 80084d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084d8:	ed93 7b00 	vldr	d7, [r3]
 80084dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084e4:	f280 80d8 	bge.w	8008698 <_dtoa_r+0x610>
 80084e8:	f1b9 0f00 	cmp.w	r9, #0
 80084ec:	f300 80d4 	bgt.w	8008698 <_dtoa_r+0x610>
 80084f0:	f040 825e 	bne.w	80089b0 <_dtoa_r+0x928>
 80084f4:	2200      	movs	r2, #0
 80084f6:	4b66      	ldr	r3, [pc, #408]	; (8008690 <_dtoa_r+0x608>)
 80084f8:	ec51 0b17 	vmov	r0, r1, d7
 80084fc:	f7f8 f89c 	bl	8000638 <__aeabi_dmul>
 8008500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008504:	f7f8 fb1e 	bl	8000b44 <__aeabi_dcmpge>
 8008508:	464f      	mov	r7, r9
 800850a:	464e      	mov	r6, r9
 800850c:	2800      	cmp	r0, #0
 800850e:	f040 8234 	bne.w	800897a <_dtoa_r+0x8f2>
 8008512:	2331      	movs	r3, #49	; 0x31
 8008514:	f10b 0501 	add.w	r5, fp, #1
 8008518:	f88b 3000 	strb.w	r3, [fp]
 800851c:	f10a 0a01 	add.w	sl, sl, #1
 8008520:	e22f      	b.n	8008982 <_dtoa_r+0x8fa>
 8008522:	07f2      	lsls	r2, r6, #31
 8008524:	d505      	bpl.n	8008532 <_dtoa_r+0x4aa>
 8008526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852a:	f7f8 f885 	bl	8000638 <__aeabi_dmul>
 800852e:	3501      	adds	r5, #1
 8008530:	2301      	movs	r3, #1
 8008532:	1076      	asrs	r6, r6, #1
 8008534:	3708      	adds	r7, #8
 8008536:	e772      	b.n	800841e <_dtoa_r+0x396>
 8008538:	2502      	movs	r5, #2
 800853a:	e774      	b.n	8008426 <_dtoa_r+0x39e>
 800853c:	f8cd a020 	str.w	sl, [sp, #32]
 8008540:	464f      	mov	r7, r9
 8008542:	e791      	b.n	8008468 <_dtoa_r+0x3e0>
 8008544:	4b4d      	ldr	r3, [pc, #308]	; (800867c <_dtoa_r+0x5f4>)
 8008546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800854a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800854e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008550:	2b00      	cmp	r3, #0
 8008552:	d047      	beq.n	80085e4 <_dtoa_r+0x55c>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	2000      	movs	r0, #0
 800855a:	494e      	ldr	r1, [pc, #312]	; (8008694 <_dtoa_r+0x60c>)
 800855c:	f7f8 f996 	bl	800088c <__aeabi_ddiv>
 8008560:	462a      	mov	r2, r5
 8008562:	4633      	mov	r3, r6
 8008564:	f7f7 feb0 	bl	80002c8 <__aeabi_dsub>
 8008568:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800856c:	465d      	mov	r5, fp
 800856e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008572:	f7f8 fb11 	bl	8000b98 <__aeabi_d2iz>
 8008576:	4606      	mov	r6, r0
 8008578:	f7f7 fff4 	bl	8000564 <__aeabi_i2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	3630      	adds	r6, #48	; 0x30
 800858a:	f805 6b01 	strb.w	r6, [r5], #1
 800858e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008592:	e9cd 0100 	strd	r0, r1, [sp]
 8008596:	f7f8 fac1 	bl	8000b1c <__aeabi_dcmplt>
 800859a:	2800      	cmp	r0, #0
 800859c:	d163      	bne.n	8008666 <_dtoa_r+0x5de>
 800859e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085a2:	2000      	movs	r0, #0
 80085a4:	4937      	ldr	r1, [pc, #220]	; (8008684 <_dtoa_r+0x5fc>)
 80085a6:	f7f7 fe8f 	bl	80002c8 <__aeabi_dsub>
 80085aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085ae:	f7f8 fab5 	bl	8000b1c <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f040 80b7 	bne.w	8008726 <_dtoa_r+0x69e>
 80085b8:	eba5 030b 	sub.w	r3, r5, fp
 80085bc:	429f      	cmp	r7, r3
 80085be:	f77f af7c 	ble.w	80084ba <_dtoa_r+0x432>
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b30      	ldr	r3, [pc, #192]	; (8008688 <_dtoa_r+0x600>)
 80085c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085ca:	f7f8 f835 	bl	8000638 <__aeabi_dmul>
 80085ce:	2200      	movs	r2, #0
 80085d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085d4:	4b2c      	ldr	r3, [pc, #176]	; (8008688 <_dtoa_r+0x600>)
 80085d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085da:	f7f8 f82d 	bl	8000638 <__aeabi_dmul>
 80085de:	e9cd 0100 	strd	r0, r1, [sp]
 80085e2:	e7c4      	b.n	800856e <_dtoa_r+0x4e6>
 80085e4:	462a      	mov	r2, r5
 80085e6:	4633      	mov	r3, r6
 80085e8:	f7f8 f826 	bl	8000638 <__aeabi_dmul>
 80085ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085f0:	eb0b 0507 	add.w	r5, fp, r7
 80085f4:	465e      	mov	r6, fp
 80085f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085fa:	f7f8 facd 	bl	8000b98 <__aeabi_d2iz>
 80085fe:	4607      	mov	r7, r0
 8008600:	f7f7 ffb0 	bl	8000564 <__aeabi_i2d>
 8008604:	3730      	adds	r7, #48	; 0x30
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800860e:	f7f7 fe5b 	bl	80002c8 <__aeabi_dsub>
 8008612:	f806 7b01 	strb.w	r7, [r6], #1
 8008616:	42ae      	cmp	r6, r5
 8008618:	e9cd 0100 	strd	r0, r1, [sp]
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	d126      	bne.n	8008670 <_dtoa_r+0x5e8>
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <_dtoa_r+0x60c>)
 8008624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008628:	f7f7 fe50 	bl	80002cc <__adddf3>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008634:	f7f8 fa90 	bl	8000b58 <__aeabi_dcmpgt>
 8008638:	2800      	cmp	r0, #0
 800863a:	d174      	bne.n	8008726 <_dtoa_r+0x69e>
 800863c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008640:	2000      	movs	r0, #0
 8008642:	4914      	ldr	r1, [pc, #80]	; (8008694 <_dtoa_r+0x60c>)
 8008644:	f7f7 fe40 	bl	80002c8 <__aeabi_dsub>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008650:	f7f8 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f43f af30 	beq.w	80084ba <_dtoa_r+0x432>
 800865a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800865e:	2b30      	cmp	r3, #48	; 0x30
 8008660:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008664:	d002      	beq.n	800866c <_dtoa_r+0x5e4>
 8008666:	f8dd a020 	ldr.w	sl, [sp, #32]
 800866a:	e04a      	b.n	8008702 <_dtoa_r+0x67a>
 800866c:	4615      	mov	r5, r2
 800866e:	e7f4      	b.n	800865a <_dtoa_r+0x5d2>
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <_dtoa_r+0x600>)
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	e9cd 0100 	strd	r0, r1, [sp]
 800867a:	e7bc      	b.n	80085f6 <_dtoa_r+0x56e>
 800867c:	0800a5e8 	.word	0x0800a5e8
 8008680:	0800a5c0 	.word	0x0800a5c0
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	40240000 	.word	0x40240000
 800868c:	401c0000 	.word	0x401c0000
 8008690:	40140000 	.word	0x40140000
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	e9dd 6700 	ldrd	r6, r7, [sp]
 800869c:	465d      	mov	r5, fp
 800869e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 f8f1 	bl	800088c <__aeabi_ddiv>
 80086aa:	f7f8 fa75 	bl	8000b98 <__aeabi_d2iz>
 80086ae:	4680      	mov	r8, r0
 80086b0:	f7f7 ff58 	bl	8000564 <__aeabi_i2d>
 80086b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086b8:	f7f7 ffbe 	bl	8000638 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80086c8:	f7f7 fdfe 	bl	80002c8 <__aeabi_dsub>
 80086cc:	f805 6b01 	strb.w	r6, [r5], #1
 80086d0:	eba5 060b 	sub.w	r6, r5, fp
 80086d4:	45b1      	cmp	r9, r6
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	d139      	bne.n	8008750 <_dtoa_r+0x6c8>
 80086dc:	f7f7 fdf6 	bl	80002cc <__adddf3>
 80086e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	f7f8 fa36 	bl	8000b58 <__aeabi_dcmpgt>
 80086ec:	b9c8      	cbnz	r0, 8008722 <_dtoa_r+0x69a>
 80086ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	f7f8 fa07 	bl	8000b08 <__aeabi_dcmpeq>
 80086fa:	b110      	cbz	r0, 8008702 <_dtoa_r+0x67a>
 80086fc:	f018 0f01 	tst.w	r8, #1
 8008700:	d10f      	bne.n	8008722 <_dtoa_r+0x69a>
 8008702:	9904      	ldr	r1, [sp, #16]
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fdff 	bl	8009308 <_Bfree>
 800870a:	2300      	movs	r3, #0
 800870c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800870e:	702b      	strb	r3, [r5, #0]
 8008710:	f10a 0301 	add.w	r3, sl, #1
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8241 	beq.w	8008ba0 <_dtoa_r+0xb18>
 800871e:	601d      	str	r5, [r3, #0]
 8008720:	e23e      	b.n	8008ba0 <_dtoa_r+0xb18>
 8008722:	f8cd a020 	str.w	sl, [sp, #32]
 8008726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800872a:	2a39      	cmp	r2, #57	; 0x39
 800872c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008730:	d108      	bne.n	8008744 <_dtoa_r+0x6bc>
 8008732:	459b      	cmp	fp, r3
 8008734:	d10a      	bne.n	800874c <_dtoa_r+0x6c4>
 8008736:	9b08      	ldr	r3, [sp, #32]
 8008738:	3301      	adds	r3, #1
 800873a:	9308      	str	r3, [sp, #32]
 800873c:	2330      	movs	r3, #48	; 0x30
 800873e:	f88b 3000 	strb.w	r3, [fp]
 8008742:	465b      	mov	r3, fp
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	3201      	adds	r2, #1
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e78c      	b.n	8008666 <_dtoa_r+0x5de>
 800874c:	461d      	mov	r5, r3
 800874e:	e7ea      	b.n	8008726 <_dtoa_r+0x69e>
 8008750:	2200      	movs	r2, #0
 8008752:	4b9b      	ldr	r3, [pc, #620]	; (80089c0 <_dtoa_r+0x938>)
 8008754:	f7f7 ff70 	bl	8000638 <__aeabi_dmul>
 8008758:	2200      	movs	r2, #0
 800875a:	2300      	movs	r3, #0
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	f7f8 f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8008764:	2800      	cmp	r0, #0
 8008766:	d09a      	beq.n	800869e <_dtoa_r+0x616>
 8008768:	e7cb      	b.n	8008702 <_dtoa_r+0x67a>
 800876a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876c:	2a00      	cmp	r2, #0
 800876e:	f000 808b 	beq.w	8008888 <_dtoa_r+0x800>
 8008772:	9a06      	ldr	r2, [sp, #24]
 8008774:	2a01      	cmp	r2, #1
 8008776:	dc6e      	bgt.n	8008856 <_dtoa_r+0x7ce>
 8008778:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800877a:	2a00      	cmp	r2, #0
 800877c:	d067      	beq.n	800884e <_dtoa_r+0x7c6>
 800877e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008782:	9f07      	ldr	r7, [sp, #28]
 8008784:	9d05      	ldr	r5, [sp, #20]
 8008786:	9a05      	ldr	r2, [sp, #20]
 8008788:	2101      	movs	r1, #1
 800878a:	441a      	add	r2, r3
 800878c:	4620      	mov	r0, r4
 800878e:	9205      	str	r2, [sp, #20]
 8008790:	4498      	add	r8, r3
 8008792:	f000 fe97 	bl	80094c4 <__i2b>
 8008796:	4606      	mov	r6, r0
 8008798:	2d00      	cmp	r5, #0
 800879a:	dd0c      	ble.n	80087b6 <_dtoa_r+0x72e>
 800879c:	f1b8 0f00 	cmp.w	r8, #0
 80087a0:	dd09      	ble.n	80087b6 <_dtoa_r+0x72e>
 80087a2:	4545      	cmp	r5, r8
 80087a4:	9a05      	ldr	r2, [sp, #20]
 80087a6:	462b      	mov	r3, r5
 80087a8:	bfa8      	it	ge
 80087aa:	4643      	movge	r3, r8
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	9205      	str	r2, [sp, #20]
 80087b0:	1aed      	subs	r5, r5, r3
 80087b2:	eba8 0803 	sub.w	r8, r8, r3
 80087b6:	9b07      	ldr	r3, [sp, #28]
 80087b8:	b1eb      	cbz	r3, 80087f6 <_dtoa_r+0x76e>
 80087ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d067      	beq.n	8008890 <_dtoa_r+0x808>
 80087c0:	b18f      	cbz	r7, 80087e6 <_dtoa_r+0x75e>
 80087c2:	4631      	mov	r1, r6
 80087c4:	463a      	mov	r2, r7
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 ff1c 	bl	8009604 <__pow5mult>
 80087cc:	9a04      	ldr	r2, [sp, #16]
 80087ce:	4601      	mov	r1, r0
 80087d0:	4606      	mov	r6, r0
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fe7f 	bl	80094d6 <__multiply>
 80087d8:	9904      	ldr	r1, [sp, #16]
 80087da:	9008      	str	r0, [sp, #32]
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fd93 	bl	8009308 <_Bfree>
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	9b07      	ldr	r3, [sp, #28]
 80087e8:	1bda      	subs	r2, r3, r7
 80087ea:	d004      	beq.n	80087f6 <_dtoa_r+0x76e>
 80087ec:	9904      	ldr	r1, [sp, #16]
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 ff08 	bl	8009604 <__pow5mult>
 80087f4:	9004      	str	r0, [sp, #16]
 80087f6:	2101      	movs	r1, #1
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fe63 	bl	80094c4 <__i2b>
 80087fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008800:	4607      	mov	r7, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 81d0 	beq.w	8008ba8 <_dtoa_r+0xb20>
 8008808:	461a      	mov	r2, r3
 800880a:	4601      	mov	r1, r0
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fef9 	bl	8009604 <__pow5mult>
 8008812:	9b06      	ldr	r3, [sp, #24]
 8008814:	2b01      	cmp	r3, #1
 8008816:	4607      	mov	r7, r0
 8008818:	dc40      	bgt.n	800889c <_dtoa_r+0x814>
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d139      	bne.n	8008894 <_dtoa_r+0x80c>
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008826:	2b00      	cmp	r3, #0
 8008828:	d136      	bne.n	8008898 <_dtoa_r+0x810>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008830:	0d1b      	lsrs	r3, r3, #20
 8008832:	051b      	lsls	r3, r3, #20
 8008834:	b12b      	cbz	r3, 8008842 <_dtoa_r+0x7ba>
 8008836:	9b05      	ldr	r3, [sp, #20]
 8008838:	3301      	adds	r3, #1
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	f108 0801 	add.w	r8, r8, #1
 8008840:	2301      	movs	r3, #1
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d12a      	bne.n	80088a0 <_dtoa_r+0x818>
 800884a:	2001      	movs	r0, #1
 800884c:	e030      	b.n	80088b0 <_dtoa_r+0x828>
 800884e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008850:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008854:	e795      	b.n	8008782 <_dtoa_r+0x6fa>
 8008856:	9b07      	ldr	r3, [sp, #28]
 8008858:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800885c:	42bb      	cmp	r3, r7
 800885e:	bfbf      	itttt	lt
 8008860:	9b07      	ldrlt	r3, [sp, #28]
 8008862:	9707      	strlt	r7, [sp, #28]
 8008864:	1afa      	sublt	r2, r7, r3
 8008866:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008868:	bfbb      	ittet	lt
 800886a:	189b      	addlt	r3, r3, r2
 800886c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800886e:	1bdf      	subge	r7, r3, r7
 8008870:	2700      	movlt	r7, #0
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	bfb5      	itete	lt
 8008878:	9b05      	ldrlt	r3, [sp, #20]
 800887a:	9d05      	ldrge	r5, [sp, #20]
 800887c:	eba3 0509 	sublt.w	r5, r3, r9
 8008880:	464b      	movge	r3, r9
 8008882:	bfb8      	it	lt
 8008884:	2300      	movlt	r3, #0
 8008886:	e77e      	b.n	8008786 <_dtoa_r+0x6fe>
 8008888:	9f07      	ldr	r7, [sp, #28]
 800888a:	9d05      	ldr	r5, [sp, #20]
 800888c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800888e:	e783      	b.n	8008798 <_dtoa_r+0x710>
 8008890:	9a07      	ldr	r2, [sp, #28]
 8008892:	e7ab      	b.n	80087ec <_dtoa_r+0x764>
 8008894:	2300      	movs	r3, #0
 8008896:	e7d4      	b.n	8008842 <_dtoa_r+0x7ba>
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	e7d2      	b.n	8008842 <_dtoa_r+0x7ba>
 800889c:	2300      	movs	r3, #0
 800889e:	9307      	str	r3, [sp, #28]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80088a6:	6918      	ldr	r0, [r3, #16]
 80088a8:	f000 fdbe 	bl	8009428 <__hi0bits>
 80088ac:	f1c0 0020 	rsb	r0, r0, #32
 80088b0:	4440      	add	r0, r8
 80088b2:	f010 001f 	ands.w	r0, r0, #31
 80088b6:	d047      	beq.n	8008948 <_dtoa_r+0x8c0>
 80088b8:	f1c0 0320 	rsb	r3, r0, #32
 80088bc:	2b04      	cmp	r3, #4
 80088be:	dd3b      	ble.n	8008938 <_dtoa_r+0x8b0>
 80088c0:	9b05      	ldr	r3, [sp, #20]
 80088c2:	f1c0 001c 	rsb	r0, r0, #28
 80088c6:	4403      	add	r3, r0
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	4405      	add	r5, r0
 80088cc:	4480      	add	r8, r0
 80088ce:	9b05      	ldr	r3, [sp, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dd05      	ble.n	80088e0 <_dtoa_r+0x858>
 80088d4:	461a      	mov	r2, r3
 80088d6:	9904      	ldr	r1, [sp, #16]
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fee1 	bl	80096a0 <__lshift>
 80088de:	9004      	str	r0, [sp, #16]
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	dd05      	ble.n	80088f2 <_dtoa_r+0x86a>
 80088e6:	4639      	mov	r1, r7
 80088e8:	4642      	mov	r2, r8
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fed8 	bl	80096a0 <__lshift>
 80088f0:	4607      	mov	r7, r0
 80088f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f4:	b353      	cbz	r3, 800894c <_dtoa_r+0x8c4>
 80088f6:	4639      	mov	r1, r7
 80088f8:	9804      	ldr	r0, [sp, #16]
 80088fa:	f000 ff25 	bl	8009748 <__mcmp>
 80088fe:	2800      	cmp	r0, #0
 8008900:	da24      	bge.n	800894c <_dtoa_r+0x8c4>
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	9904      	ldr	r1, [sp, #16]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fd14 	bl	8009336 <__multadd>
 800890e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008910:	9004      	str	r0, [sp, #16]
 8008912:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 814d 	beq.w	8008bb6 <_dtoa_r+0xb2e>
 800891c:	2300      	movs	r3, #0
 800891e:	4631      	mov	r1, r6
 8008920:	220a      	movs	r2, #10
 8008922:	4620      	mov	r0, r4
 8008924:	f000 fd07 	bl	8009336 <__multadd>
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	4606      	mov	r6, r0
 800892e:	dc4f      	bgt.n	80089d0 <_dtoa_r+0x948>
 8008930:	9b06      	ldr	r3, [sp, #24]
 8008932:	2b02      	cmp	r3, #2
 8008934:	dd4c      	ble.n	80089d0 <_dtoa_r+0x948>
 8008936:	e011      	b.n	800895c <_dtoa_r+0x8d4>
 8008938:	d0c9      	beq.n	80088ce <_dtoa_r+0x846>
 800893a:	9a05      	ldr	r2, [sp, #20]
 800893c:	331c      	adds	r3, #28
 800893e:	441a      	add	r2, r3
 8008940:	9205      	str	r2, [sp, #20]
 8008942:	441d      	add	r5, r3
 8008944:	4498      	add	r8, r3
 8008946:	e7c2      	b.n	80088ce <_dtoa_r+0x846>
 8008948:	4603      	mov	r3, r0
 800894a:	e7f6      	b.n	800893a <_dtoa_r+0x8b2>
 800894c:	f1b9 0f00 	cmp.w	r9, #0
 8008950:	dc38      	bgt.n	80089c4 <_dtoa_r+0x93c>
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	2b02      	cmp	r3, #2
 8008956:	dd35      	ble.n	80089c4 <_dtoa_r+0x93c>
 8008958:	f8cd 9008 	str.w	r9, [sp, #8]
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	b963      	cbnz	r3, 800897a <_dtoa_r+0x8f2>
 8008960:	4639      	mov	r1, r7
 8008962:	2205      	movs	r2, #5
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fce6 	bl	8009336 <__multadd>
 800896a:	4601      	mov	r1, r0
 800896c:	4607      	mov	r7, r0
 800896e:	9804      	ldr	r0, [sp, #16]
 8008970:	f000 feea 	bl	8009748 <__mcmp>
 8008974:	2800      	cmp	r0, #0
 8008976:	f73f adcc 	bgt.w	8008512 <_dtoa_r+0x48a>
 800897a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897c:	465d      	mov	r5, fp
 800897e:	ea6f 0a03 	mvn.w	sl, r3
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	4639      	mov	r1, r7
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fcbd 	bl	8009308 <_Bfree>
 800898e:	2e00      	cmp	r6, #0
 8008990:	f43f aeb7 	beq.w	8008702 <_dtoa_r+0x67a>
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	d005      	beq.n	80089a6 <_dtoa_r+0x91e>
 800899a:	45b1      	cmp	r9, r6
 800899c:	d003      	beq.n	80089a6 <_dtoa_r+0x91e>
 800899e:	4649      	mov	r1, r9
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fcb1 	bl	8009308 <_Bfree>
 80089a6:	4631      	mov	r1, r6
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fcad 	bl	8009308 <_Bfree>
 80089ae:	e6a8      	b.n	8008702 <_dtoa_r+0x67a>
 80089b0:	2700      	movs	r7, #0
 80089b2:	463e      	mov	r6, r7
 80089b4:	e7e1      	b.n	800897a <_dtoa_r+0x8f2>
 80089b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80089ba:	463e      	mov	r6, r7
 80089bc:	e5a9      	b.n	8008512 <_dtoa_r+0x48a>
 80089be:	bf00      	nop
 80089c0:	40240000 	.word	0x40240000
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80fa 	beq.w	8008bc4 <_dtoa_r+0xb3c>
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	dd05      	ble.n	80089e0 <_dtoa_r+0x958>
 80089d4:	4631      	mov	r1, r6
 80089d6:	462a      	mov	r2, r5
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fe61 	bl	80096a0 <__lshift>
 80089de:	4606      	mov	r6, r0
 80089e0:	9b07      	ldr	r3, [sp, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d04c      	beq.n	8008a80 <_dtoa_r+0x9f8>
 80089e6:	6871      	ldr	r1, [r6, #4]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fc59 	bl	80092a0 <_Balloc>
 80089ee:	6932      	ldr	r2, [r6, #16]
 80089f0:	3202      	adds	r2, #2
 80089f2:	4605      	mov	r5, r0
 80089f4:	0092      	lsls	r2, r2, #2
 80089f6:	f106 010c 	add.w	r1, r6, #12
 80089fa:	300c      	adds	r0, #12
 80089fc:	f7fd fd90 	bl	8006520 <memcpy>
 8008a00:	2201      	movs	r2, #1
 8008a02:	4629      	mov	r1, r5
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 fe4b 	bl	80096a0 <__lshift>
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	f8cd b014 	str.w	fp, [sp, #20]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	46b1      	mov	r9, r6
 8008a16:	9307      	str	r3, [sp, #28]
 8008a18:	4606      	mov	r6, r0
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	9804      	ldr	r0, [sp, #16]
 8008a1e:	f7ff faa5 	bl	8007f6c <quorem>
 8008a22:	4649      	mov	r1, r9
 8008a24:	4605      	mov	r5, r0
 8008a26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a2a:	9804      	ldr	r0, [sp, #16]
 8008a2c:	f000 fe8c 	bl	8009748 <__mcmp>
 8008a30:	4632      	mov	r2, r6
 8008a32:	9000      	str	r0, [sp, #0]
 8008a34:	4639      	mov	r1, r7
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 fea0 	bl	800977c <__mdiff>
 8008a3c:	68c3      	ldr	r3, [r0, #12]
 8008a3e:	4602      	mov	r2, r0
 8008a40:	bb03      	cbnz	r3, 8008a84 <_dtoa_r+0x9fc>
 8008a42:	4601      	mov	r1, r0
 8008a44:	9008      	str	r0, [sp, #32]
 8008a46:	9804      	ldr	r0, [sp, #16]
 8008a48:	f000 fe7e 	bl	8009748 <__mcmp>
 8008a4c:	9a08      	ldr	r2, [sp, #32]
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4611      	mov	r1, r2
 8008a52:	4620      	mov	r0, r4
 8008a54:	9308      	str	r3, [sp, #32]
 8008a56:	f000 fc57 	bl	8009308 <_Bfree>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	b9a3      	cbnz	r3, 8008a88 <_dtoa_r+0xa00>
 8008a5e:	9a06      	ldr	r2, [sp, #24]
 8008a60:	b992      	cbnz	r2, 8008a88 <_dtoa_r+0xa00>
 8008a62:	9a07      	ldr	r2, [sp, #28]
 8008a64:	b982      	cbnz	r2, 8008a88 <_dtoa_r+0xa00>
 8008a66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a6a:	d029      	beq.n	8008ac0 <_dtoa_r+0xa38>
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd01      	ble.n	8008a76 <_dtoa_r+0x9ee>
 8008a72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008a76:	9b05      	ldr	r3, [sp, #20]
 8008a78:	1c5d      	adds	r5, r3, #1
 8008a7a:	f883 8000 	strb.w	r8, [r3]
 8008a7e:	e782      	b.n	8008986 <_dtoa_r+0x8fe>
 8008a80:	4630      	mov	r0, r6
 8008a82:	e7c2      	b.n	8008a0a <_dtoa_r+0x982>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e7e3      	b.n	8008a50 <_dtoa_r+0x9c8>
 8008a88:	9a00      	ldr	r2, [sp, #0]
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	db04      	blt.n	8008a98 <_dtoa_r+0xa10>
 8008a8e:	d125      	bne.n	8008adc <_dtoa_r+0xa54>
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	bb1a      	cbnz	r2, 8008adc <_dtoa_r+0xa54>
 8008a94:	9a07      	ldr	r2, [sp, #28]
 8008a96:	bb0a      	cbnz	r2, 8008adc <_dtoa_r+0xa54>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	ddec      	ble.n	8008a76 <_dtoa_r+0x9ee>
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	9904      	ldr	r1, [sp, #16]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fdfd 	bl	80096a0 <__lshift>
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	9004      	str	r0, [sp, #16]
 8008aaa:	f000 fe4d 	bl	8009748 <__mcmp>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	dc03      	bgt.n	8008aba <_dtoa_r+0xa32>
 8008ab2:	d1e0      	bne.n	8008a76 <_dtoa_r+0x9ee>
 8008ab4:	f018 0f01 	tst.w	r8, #1
 8008ab8:	d0dd      	beq.n	8008a76 <_dtoa_r+0x9ee>
 8008aba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008abe:	d1d8      	bne.n	8008a72 <_dtoa_r+0x9ea>
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	1c5d      	adds	r5, r3, #1
 8008ac6:	2339      	movs	r3, #57	; 0x39
 8008ac8:	7013      	strb	r3, [r2, #0]
 8008aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ace:	2b39      	cmp	r3, #57	; 0x39
 8008ad0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008ad4:	d04f      	beq.n	8008b76 <_dtoa_r+0xaee>
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	7013      	strb	r3, [r2, #0]
 8008ada:	e754      	b.n	8008986 <_dtoa_r+0x8fe>
 8008adc:	9a05      	ldr	r2, [sp, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f102 0501 	add.w	r5, r2, #1
 8008ae4:	dd06      	ble.n	8008af4 <_dtoa_r+0xa6c>
 8008ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008aea:	d0e9      	beq.n	8008ac0 <_dtoa_r+0xa38>
 8008aec:	f108 0801 	add.w	r8, r8, #1
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	e7c2      	b.n	8008a7a <_dtoa_r+0x9f2>
 8008af4:	9a02      	ldr	r2, [sp, #8]
 8008af6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008afa:	eba5 030b 	sub.w	r3, r5, fp
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d021      	beq.n	8008b46 <_dtoa_r+0xabe>
 8008b02:	2300      	movs	r3, #0
 8008b04:	220a      	movs	r2, #10
 8008b06:	9904      	ldr	r1, [sp, #16]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fc14 	bl	8009336 <__multadd>
 8008b0e:	45b1      	cmp	r9, r6
 8008b10:	9004      	str	r0, [sp, #16]
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	f04f 020a 	mov.w	r2, #10
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	d105      	bne.n	8008b2c <_dtoa_r+0xaa4>
 8008b20:	f000 fc09 	bl	8009336 <__multadd>
 8008b24:	4681      	mov	r9, r0
 8008b26:	4606      	mov	r6, r0
 8008b28:	9505      	str	r5, [sp, #20]
 8008b2a:	e776      	b.n	8008a1a <_dtoa_r+0x992>
 8008b2c:	f000 fc03 	bl	8009336 <__multadd>
 8008b30:	4631      	mov	r1, r6
 8008b32:	4681      	mov	r9, r0
 8008b34:	2300      	movs	r3, #0
 8008b36:	220a      	movs	r2, #10
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fbfc 	bl	8009336 <__multadd>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	e7f2      	b.n	8008b28 <_dtoa_r+0xaa0>
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	2201      	movs	r2, #1
 8008b48:	9904      	ldr	r1, [sp, #16]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fda8 	bl	80096a0 <__lshift>
 8008b50:	4639      	mov	r1, r7
 8008b52:	9004      	str	r0, [sp, #16]
 8008b54:	f000 fdf8 	bl	8009748 <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dcb6      	bgt.n	8008aca <_dtoa_r+0xa42>
 8008b5c:	d102      	bne.n	8008b64 <_dtoa_r+0xadc>
 8008b5e:	f018 0f01 	tst.w	r8, #1
 8008b62:	d1b2      	bne.n	8008aca <_dtoa_r+0xa42>
 8008b64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b68:	2b30      	cmp	r3, #48	; 0x30
 8008b6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008b6e:	f47f af0a 	bne.w	8008986 <_dtoa_r+0x8fe>
 8008b72:	4615      	mov	r5, r2
 8008b74:	e7f6      	b.n	8008b64 <_dtoa_r+0xadc>
 8008b76:	4593      	cmp	fp, r2
 8008b78:	d105      	bne.n	8008b86 <_dtoa_r+0xafe>
 8008b7a:	2331      	movs	r3, #49	; 0x31
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	f88b 3000 	strb.w	r3, [fp]
 8008b84:	e6ff      	b.n	8008986 <_dtoa_r+0x8fe>
 8008b86:	4615      	mov	r5, r2
 8008b88:	e79f      	b.n	8008aca <_dtoa_r+0xa42>
 8008b8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008bf0 <_dtoa_r+0xb68>
 8008b8e:	e007      	b.n	8008ba0 <_dtoa_r+0xb18>
 8008b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008bf4 <_dtoa_r+0xb6c>
 8008b96:	b11b      	cbz	r3, 8008ba0 <_dtoa_r+0xb18>
 8008b98:	f10b 0308 	add.w	r3, fp, #8
 8008b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	4658      	mov	r0, fp
 8008ba2:	b017      	add	sp, #92	; 0x5c
 8008ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	f77f ae35 	ble.w	800881a <_dtoa_r+0x792>
 8008bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb2:	9307      	str	r3, [sp, #28]
 8008bb4:	e649      	b.n	800884a <_dtoa_r+0x7c2>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc03      	bgt.n	8008bc4 <_dtoa_r+0xb3c>
 8008bbc:	9b06      	ldr	r3, [sp, #24]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	f73f aecc 	bgt.w	800895c <_dtoa_r+0x8d4>
 8008bc4:	465d      	mov	r5, fp
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	9804      	ldr	r0, [sp, #16]
 8008bca:	f7ff f9cf 	bl	8007f6c <quorem>
 8008bce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008bd2:	f805 8b01 	strb.w	r8, [r5], #1
 8008bd6:	9a02      	ldr	r2, [sp, #8]
 8008bd8:	eba5 030b 	sub.w	r3, r5, fp
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	ddb0      	ble.n	8008b42 <_dtoa_r+0xaba>
 8008be0:	2300      	movs	r3, #0
 8008be2:	220a      	movs	r2, #10
 8008be4:	9904      	ldr	r1, [sp, #16]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 fba5 	bl	8009336 <__multadd>
 8008bec:	9004      	str	r0, [sp, #16]
 8008bee:	e7ea      	b.n	8008bc6 <_dtoa_r+0xb3e>
 8008bf0:	0800a528 	.word	0x0800a528
 8008bf4:	0800a5a8 	.word	0x0800a5a8

08008bf8 <rshift>:
 8008bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bfa:	6906      	ldr	r6, [r0, #16]
 8008bfc:	114b      	asrs	r3, r1, #5
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	f100 0414 	add.w	r4, r0, #20
 8008c04:	dd30      	ble.n	8008c68 <rshift+0x70>
 8008c06:	f011 011f 	ands.w	r1, r1, #31
 8008c0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c0e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008c12:	d108      	bne.n	8008c26 <rshift+0x2e>
 8008c14:	4621      	mov	r1, r4
 8008c16:	42b2      	cmp	r2, r6
 8008c18:	460b      	mov	r3, r1
 8008c1a:	d211      	bcs.n	8008c40 <rshift+0x48>
 8008c1c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c20:	f841 3b04 	str.w	r3, [r1], #4
 8008c24:	e7f7      	b.n	8008c16 <rshift+0x1e>
 8008c26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008c2a:	f1c1 0c20 	rsb	ip, r1, #32
 8008c2e:	40cd      	lsrs	r5, r1
 8008c30:	3204      	adds	r2, #4
 8008c32:	4623      	mov	r3, r4
 8008c34:	42b2      	cmp	r2, r6
 8008c36:	4617      	mov	r7, r2
 8008c38:	d30c      	bcc.n	8008c54 <rshift+0x5c>
 8008c3a:	601d      	str	r5, [r3, #0]
 8008c3c:	b105      	cbz	r5, 8008c40 <rshift+0x48>
 8008c3e:	3304      	adds	r3, #4
 8008c40:	1b1a      	subs	r2, r3, r4
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c48:	bf08      	it	eq
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	6102      	str	r2, [r0, #16]
 8008c4e:	bf08      	it	eq
 8008c50:	6143      	streq	r3, [r0, #20]
 8008c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c54:	683f      	ldr	r7, [r7, #0]
 8008c56:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c5a:	433d      	orrs	r5, r7
 8008c5c:	f843 5b04 	str.w	r5, [r3], #4
 8008c60:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c64:	40cd      	lsrs	r5, r1
 8008c66:	e7e5      	b.n	8008c34 <rshift+0x3c>
 8008c68:	4623      	mov	r3, r4
 8008c6a:	e7e9      	b.n	8008c40 <rshift+0x48>

08008c6c <__hexdig_fun>:
 8008c6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d802      	bhi.n	8008c7a <__hexdig_fun+0xe>
 8008c74:	3820      	subs	r0, #32
 8008c76:	b2c0      	uxtb	r0, r0
 8008c78:	4770      	bx	lr
 8008c7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d801      	bhi.n	8008c86 <__hexdig_fun+0x1a>
 8008c82:	3847      	subs	r0, #71	; 0x47
 8008c84:	e7f7      	b.n	8008c76 <__hexdig_fun+0xa>
 8008c86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d801      	bhi.n	8008c92 <__hexdig_fun+0x26>
 8008c8e:	3827      	subs	r0, #39	; 0x27
 8008c90:	e7f1      	b.n	8008c76 <__hexdig_fun+0xa>
 8008c92:	2000      	movs	r0, #0
 8008c94:	4770      	bx	lr

08008c96 <__gethex>:
 8008c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	b08b      	sub	sp, #44	; 0x2c
 8008c9c:	468a      	mov	sl, r1
 8008c9e:	9002      	str	r0, [sp, #8]
 8008ca0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008ca2:	9306      	str	r3, [sp, #24]
 8008ca4:	4690      	mov	r8, r2
 8008ca6:	f000 fad0 	bl	800924a <__localeconv_l>
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f7 faae 	bl	8000210 <strlen>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	9001      	str	r0, [sp, #4]
 8008cb8:	4403      	add	r3, r0
 8008cba:	f04f 0b00 	mov.w	fp, #0
 8008cbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cc2:	9307      	str	r3, [sp, #28]
 8008cc4:	f8da 3000 	ldr.w	r3, [sl]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	461f      	mov	r7, r3
 8008ccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cd0:	2830      	cmp	r0, #48	; 0x30
 8008cd2:	d06c      	beq.n	8008dae <__gethex+0x118>
 8008cd4:	f7ff ffca 	bl	8008c6c <__hexdig_fun>
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d16a      	bne.n	8008db4 <__gethex+0x11e>
 8008cde:	9a01      	ldr	r2, [sp, #4]
 8008ce0:	9903      	ldr	r1, [sp, #12]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f001 f8f4 	bl	8009ed0 <strncmp>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d166      	bne.n	8008dba <__gethex+0x124>
 8008cec:	9b01      	ldr	r3, [sp, #4]
 8008cee:	5cf8      	ldrb	r0, [r7, r3]
 8008cf0:	18fe      	adds	r6, r7, r3
 8008cf2:	f7ff ffbb 	bl	8008c6c <__hexdig_fun>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d062      	beq.n	8008dc0 <__gethex+0x12a>
 8008cfa:	4633      	mov	r3, r6
 8008cfc:	7818      	ldrb	r0, [r3, #0]
 8008cfe:	2830      	cmp	r0, #48	; 0x30
 8008d00:	461f      	mov	r7, r3
 8008d02:	f103 0301 	add.w	r3, r3, #1
 8008d06:	d0f9      	beq.n	8008cfc <__gethex+0x66>
 8008d08:	f7ff ffb0 	bl	8008c6c <__hexdig_fun>
 8008d0c:	fab0 f580 	clz	r5, r0
 8008d10:	096d      	lsrs	r5, r5, #5
 8008d12:	4634      	mov	r4, r6
 8008d14:	f04f 0b01 	mov.w	fp, #1
 8008d18:	463a      	mov	r2, r7
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	3201      	adds	r2, #1
 8008d1e:	7830      	ldrb	r0, [r6, #0]
 8008d20:	f7ff ffa4 	bl	8008c6c <__hexdig_fun>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d1f8      	bne.n	8008d1a <__gethex+0x84>
 8008d28:	9a01      	ldr	r2, [sp, #4]
 8008d2a:	9903      	ldr	r1, [sp, #12]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f001 f8cf 	bl	8009ed0 <strncmp>
 8008d32:	b950      	cbnz	r0, 8008d4a <__gethex+0xb4>
 8008d34:	b954      	cbnz	r4, 8008d4c <__gethex+0xb6>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	18f4      	adds	r4, r6, r3
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	3201      	adds	r2, #1
 8008d40:	7830      	ldrb	r0, [r6, #0]
 8008d42:	f7ff ff93 	bl	8008c6c <__hexdig_fun>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d1f8      	bne.n	8008d3c <__gethex+0xa6>
 8008d4a:	b10c      	cbz	r4, 8008d50 <__gethex+0xba>
 8008d4c:	1ba4      	subs	r4, r4, r6
 8008d4e:	00a4      	lsls	r4, r4, #2
 8008d50:	7833      	ldrb	r3, [r6, #0]
 8008d52:	2b50      	cmp	r3, #80	; 0x50
 8008d54:	d001      	beq.n	8008d5a <__gethex+0xc4>
 8008d56:	2b70      	cmp	r3, #112	; 0x70
 8008d58:	d140      	bne.n	8008ddc <__gethex+0x146>
 8008d5a:	7873      	ldrb	r3, [r6, #1]
 8008d5c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d5e:	d031      	beq.n	8008dc4 <__gethex+0x12e>
 8008d60:	2b2d      	cmp	r3, #45	; 0x2d
 8008d62:	d033      	beq.n	8008dcc <__gethex+0x136>
 8008d64:	1c71      	adds	r1, r6, #1
 8008d66:	f04f 0900 	mov.w	r9, #0
 8008d6a:	7808      	ldrb	r0, [r1, #0]
 8008d6c:	f7ff ff7e 	bl	8008c6c <__hexdig_fun>
 8008d70:	1e43      	subs	r3, r0, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	d831      	bhi.n	8008ddc <__gethex+0x146>
 8008d78:	f1a0 0210 	sub.w	r2, r0, #16
 8008d7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d80:	f7ff ff74 	bl	8008c6c <__hexdig_fun>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b18      	cmp	r3, #24
 8008d8a:	d922      	bls.n	8008dd2 <__gethex+0x13c>
 8008d8c:	f1b9 0f00 	cmp.w	r9, #0
 8008d90:	d000      	beq.n	8008d94 <__gethex+0xfe>
 8008d92:	4252      	negs	r2, r2
 8008d94:	4414      	add	r4, r2
 8008d96:	f8ca 1000 	str.w	r1, [sl]
 8008d9a:	b30d      	cbz	r5, 8008de0 <__gethex+0x14a>
 8008d9c:	f1bb 0f00 	cmp.w	fp, #0
 8008da0:	bf0c      	ite	eq
 8008da2:	2706      	moveq	r7, #6
 8008da4:	2700      	movne	r7, #0
 8008da6:	4638      	mov	r0, r7
 8008da8:	b00b      	add	sp, #44	; 0x2c
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	f10b 0b01 	add.w	fp, fp, #1
 8008db2:	e78a      	b.n	8008cca <__gethex+0x34>
 8008db4:	2500      	movs	r5, #0
 8008db6:	462c      	mov	r4, r5
 8008db8:	e7ae      	b.n	8008d18 <__gethex+0x82>
 8008dba:	463e      	mov	r6, r7
 8008dbc:	2501      	movs	r5, #1
 8008dbe:	e7c7      	b.n	8008d50 <__gethex+0xba>
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	e7fb      	b.n	8008dbc <__gethex+0x126>
 8008dc4:	f04f 0900 	mov.w	r9, #0
 8008dc8:	1cb1      	adds	r1, r6, #2
 8008dca:	e7ce      	b.n	8008d6a <__gethex+0xd4>
 8008dcc:	f04f 0901 	mov.w	r9, #1
 8008dd0:	e7fa      	b.n	8008dc8 <__gethex+0x132>
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	fb03 0202 	mla	r2, r3, r2, r0
 8008dd8:	3a10      	subs	r2, #16
 8008dda:	e7cf      	b.n	8008d7c <__gethex+0xe6>
 8008ddc:	4631      	mov	r1, r6
 8008dde:	e7da      	b.n	8008d96 <__gethex+0x100>
 8008de0:	1bf3      	subs	r3, r6, r7
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4629      	mov	r1, r5
 8008de6:	2b07      	cmp	r3, #7
 8008de8:	dc49      	bgt.n	8008e7e <__gethex+0x1e8>
 8008dea:	9802      	ldr	r0, [sp, #8]
 8008dec:	f000 fa58 	bl	80092a0 <_Balloc>
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	f100 0914 	add.w	r9, r0, #20
 8008df6:	f04f 0b00 	mov.w	fp, #0
 8008dfa:	f1c3 0301 	rsb	r3, r3, #1
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e04:	46da      	mov	sl, fp
 8008e06:	9308      	str	r3, [sp, #32]
 8008e08:	42b7      	cmp	r7, r6
 8008e0a:	d33b      	bcc.n	8008e84 <__gethex+0x1ee>
 8008e0c:	9804      	ldr	r0, [sp, #16]
 8008e0e:	f840 ab04 	str.w	sl, [r0], #4
 8008e12:	eba0 0009 	sub.w	r0, r0, r9
 8008e16:	1080      	asrs	r0, r0, #2
 8008e18:	6128      	str	r0, [r5, #16]
 8008e1a:	0147      	lsls	r7, r0, #5
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f000 fb03 	bl	8009428 <__hi0bits>
 8008e22:	f8d8 6000 	ldr.w	r6, [r8]
 8008e26:	1a3f      	subs	r7, r7, r0
 8008e28:	42b7      	cmp	r7, r6
 8008e2a:	dd64      	ble.n	8008ef6 <__gethex+0x260>
 8008e2c:	1bbf      	subs	r7, r7, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 fe13 	bl	8009a5c <__any_on>
 8008e36:	4682      	mov	sl, r0
 8008e38:	b178      	cbz	r0, 8008e5a <__gethex+0x1c4>
 8008e3a:	1e7b      	subs	r3, r7, #1
 8008e3c:	1159      	asrs	r1, r3, #5
 8008e3e:	f003 021f 	and.w	r2, r3, #31
 8008e42:	f04f 0a01 	mov.w	sl, #1
 8008e46:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e4a:	fa0a f202 	lsl.w	r2, sl, r2
 8008e4e:	420a      	tst	r2, r1
 8008e50:	d003      	beq.n	8008e5a <__gethex+0x1c4>
 8008e52:	4553      	cmp	r3, sl
 8008e54:	dc46      	bgt.n	8008ee4 <__gethex+0x24e>
 8008e56:	f04f 0a02 	mov.w	sl, #2
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7ff fecb 	bl	8008bf8 <rshift>
 8008e62:	443c      	add	r4, r7
 8008e64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	da52      	bge.n	8008f12 <__gethex+0x27c>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	9802      	ldr	r0, [sp, #8]
 8008e70:	f000 fa4a 	bl	8009308 <_Bfree>
 8008e74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e76:	2300      	movs	r3, #0
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	27a3      	movs	r7, #163	; 0xa3
 8008e7c:	e793      	b.n	8008da6 <__gethex+0x110>
 8008e7e:	3101      	adds	r1, #1
 8008e80:	105b      	asrs	r3, r3, #1
 8008e82:	e7b0      	b.n	8008de6 <__gethex+0x150>
 8008e84:	1e73      	subs	r3, r6, #1
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	9a07      	ldr	r2, [sp, #28]
 8008e8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <__gethex+0x22e>
 8008e92:	f1bb 0f20 	cmp.w	fp, #32
 8008e96:	d107      	bne.n	8008ea8 <__gethex+0x212>
 8008e98:	9b04      	ldr	r3, [sp, #16]
 8008e9a:	f8c3 a000 	str.w	sl, [r3]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	f04f 0a00 	mov.w	sl, #0
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	46d3      	mov	fp, sl
 8008ea8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008eac:	f7ff fede 	bl	8008c6c <__hexdig_fun>
 8008eb0:	f000 000f 	and.w	r0, r0, #15
 8008eb4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008eb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ebc:	f10b 0b04 	add.w	fp, fp, #4
 8008ec0:	9b05      	ldr	r3, [sp, #20]
 8008ec2:	e00d      	b.n	8008ee0 <__gethex+0x24a>
 8008ec4:	9b05      	ldr	r3, [sp, #20]
 8008ec6:	9a08      	ldr	r2, [sp, #32]
 8008ec8:	4413      	add	r3, r2
 8008eca:	42bb      	cmp	r3, r7
 8008ecc:	d3e1      	bcc.n	8008e92 <__gethex+0x1fc>
 8008ece:	4618      	mov	r0, r3
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	9903      	ldr	r1, [sp, #12]
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	f000 fffb 	bl	8009ed0 <strncmp>
 8008eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1d8      	bne.n	8008e92 <__gethex+0x1fc>
 8008ee0:	461e      	mov	r6, r3
 8008ee2:	e791      	b.n	8008e08 <__gethex+0x172>
 8008ee4:	1eb9      	subs	r1, r7, #2
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fdb8 	bl	8009a5c <__any_on>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0b2      	beq.n	8008e56 <__gethex+0x1c0>
 8008ef0:	f04f 0a03 	mov.w	sl, #3
 8008ef4:	e7b1      	b.n	8008e5a <__gethex+0x1c4>
 8008ef6:	da09      	bge.n	8008f0c <__gethex+0x276>
 8008ef8:	1bf7      	subs	r7, r6, r7
 8008efa:	4629      	mov	r1, r5
 8008efc:	463a      	mov	r2, r7
 8008efe:	9802      	ldr	r0, [sp, #8]
 8008f00:	f000 fbce 	bl	80096a0 <__lshift>
 8008f04:	1be4      	subs	r4, r4, r7
 8008f06:	4605      	mov	r5, r0
 8008f08:	f100 0914 	add.w	r9, r0, #20
 8008f0c:	f04f 0a00 	mov.w	sl, #0
 8008f10:	e7a8      	b.n	8008e64 <__gethex+0x1ce>
 8008f12:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f16:	42a0      	cmp	r0, r4
 8008f18:	dd6a      	ble.n	8008ff0 <__gethex+0x35a>
 8008f1a:	1b04      	subs	r4, r0, r4
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	dc2e      	bgt.n	8008f7e <__gethex+0x2e8>
 8008f20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d022      	beq.n	8008f6e <__gethex+0x2d8>
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d024      	beq.n	8008f76 <__gethex+0x2e0>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d115      	bne.n	8008f5c <__gethex+0x2c6>
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	d113      	bne.n	8008f5c <__gethex+0x2c6>
 8008f34:	2e01      	cmp	r6, #1
 8008f36:	dc0b      	bgt.n	8008f50 <__gethex+0x2ba>
 8008f38:	9a06      	ldr	r2, [sp, #24]
 8008f3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	2301      	movs	r3, #1
 8008f42:	612b      	str	r3, [r5, #16]
 8008f44:	f8c9 3000 	str.w	r3, [r9]
 8008f48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f4a:	2762      	movs	r7, #98	; 0x62
 8008f4c:	601d      	str	r5, [r3, #0]
 8008f4e:	e72a      	b.n	8008da6 <__gethex+0x110>
 8008f50:	1e71      	subs	r1, r6, #1
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 fd82 	bl	8009a5c <__any_on>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1ed      	bne.n	8008f38 <__gethex+0x2a2>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	9802      	ldr	r0, [sp, #8]
 8008f60:	f000 f9d2 	bl	8009308 <_Bfree>
 8008f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f66:	2300      	movs	r3, #0
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	2750      	movs	r7, #80	; 0x50
 8008f6c:	e71b      	b.n	8008da6 <__gethex+0x110>
 8008f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0e1      	beq.n	8008f38 <__gethex+0x2a2>
 8008f74:	e7f2      	b.n	8008f5c <__gethex+0x2c6>
 8008f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1dd      	bne.n	8008f38 <__gethex+0x2a2>
 8008f7c:	e7ee      	b.n	8008f5c <__gethex+0x2c6>
 8008f7e:	1e67      	subs	r7, r4, #1
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d131      	bne.n	8008fea <__gethex+0x354>
 8008f86:	b127      	cbz	r7, 8008f92 <__gethex+0x2fc>
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 fd66 	bl	8009a5c <__any_on>
 8008f90:	4682      	mov	sl, r0
 8008f92:	117a      	asrs	r2, r7, #5
 8008f94:	2301      	movs	r3, #1
 8008f96:	f007 071f 	and.w	r7, r7, #31
 8008f9a:	fa03 f707 	lsl.w	r7, r3, r7
 8008f9e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	421f      	tst	r7, r3
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	bf18      	it	ne
 8008faa:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fae:	1b36      	subs	r6, r6, r4
 8008fb0:	f7ff fe22 	bl	8008bf8 <rshift>
 8008fb4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008fb8:	2702      	movs	r7, #2
 8008fba:	f1ba 0f00 	cmp.w	sl, #0
 8008fbe:	d048      	beq.n	8009052 <__gethex+0x3bc>
 8008fc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d015      	beq.n	8008ff4 <__gethex+0x35e>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d017      	beq.n	8008ffc <__gethex+0x366>
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d109      	bne.n	8008fe4 <__gethex+0x34e>
 8008fd0:	f01a 0f02 	tst.w	sl, #2
 8008fd4:	d006      	beq.n	8008fe4 <__gethex+0x34e>
 8008fd6:	f8d9 3000 	ldr.w	r3, [r9]
 8008fda:	ea4a 0a03 	orr.w	sl, sl, r3
 8008fde:	f01a 0f01 	tst.w	sl, #1
 8008fe2:	d10e      	bne.n	8009002 <__gethex+0x36c>
 8008fe4:	f047 0710 	orr.w	r7, r7, #16
 8008fe8:	e033      	b.n	8009052 <__gethex+0x3bc>
 8008fea:	f04f 0a01 	mov.w	sl, #1
 8008fee:	e7d0      	b.n	8008f92 <__gethex+0x2fc>
 8008ff0:	2701      	movs	r7, #1
 8008ff2:	e7e2      	b.n	8008fba <__gethex+0x324>
 8008ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ff6:	f1c3 0301 	rsb	r3, r3, #1
 8008ffa:	9315      	str	r3, [sp, #84]	; 0x54
 8008ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f0      	beq.n	8008fe4 <__gethex+0x34e>
 8009002:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009006:	f105 0314 	add.w	r3, r5, #20
 800900a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800900e:	eb03 010a 	add.w	r1, r3, sl
 8009012:	f04f 0c00 	mov.w	ip, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f853 2b04 	ldr.w	r2, [r3], #4
 800901c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009020:	d01c      	beq.n	800905c <__gethex+0x3c6>
 8009022:	3201      	adds	r2, #1
 8009024:	6002      	str	r2, [r0, #0]
 8009026:	2f02      	cmp	r7, #2
 8009028:	f105 0314 	add.w	r3, r5, #20
 800902c:	d138      	bne.n	80090a0 <__gethex+0x40a>
 800902e:	f8d8 2000 	ldr.w	r2, [r8]
 8009032:	3a01      	subs	r2, #1
 8009034:	42b2      	cmp	r2, r6
 8009036:	d10a      	bne.n	800904e <__gethex+0x3b8>
 8009038:	1171      	asrs	r1, r6, #5
 800903a:	2201      	movs	r2, #1
 800903c:	f006 061f 	and.w	r6, r6, #31
 8009040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009044:	fa02 f606 	lsl.w	r6, r2, r6
 8009048:	421e      	tst	r6, r3
 800904a:	bf18      	it	ne
 800904c:	4617      	movne	r7, r2
 800904e:	f047 0720 	orr.w	r7, r7, #32
 8009052:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009054:	601d      	str	r5, [r3, #0]
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	601c      	str	r4, [r3, #0]
 800905a:	e6a4      	b.n	8008da6 <__gethex+0x110>
 800905c:	4299      	cmp	r1, r3
 800905e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009062:	d8d8      	bhi.n	8009016 <__gethex+0x380>
 8009064:	68ab      	ldr	r3, [r5, #8]
 8009066:	4599      	cmp	r9, r3
 8009068:	db12      	blt.n	8009090 <__gethex+0x3fa>
 800906a:	6869      	ldr	r1, [r5, #4]
 800906c:	9802      	ldr	r0, [sp, #8]
 800906e:	3101      	adds	r1, #1
 8009070:	f000 f916 	bl	80092a0 <_Balloc>
 8009074:	692a      	ldr	r2, [r5, #16]
 8009076:	3202      	adds	r2, #2
 8009078:	f105 010c 	add.w	r1, r5, #12
 800907c:	4683      	mov	fp, r0
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	300c      	adds	r0, #12
 8009082:	f7fd fa4d 	bl	8006520 <memcpy>
 8009086:	4629      	mov	r1, r5
 8009088:	9802      	ldr	r0, [sp, #8]
 800908a:	f000 f93d 	bl	8009308 <_Bfree>
 800908e:	465d      	mov	r5, fp
 8009090:	692b      	ldr	r3, [r5, #16]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009098:	612a      	str	r2, [r5, #16]
 800909a:	2201      	movs	r2, #1
 800909c:	615a      	str	r2, [r3, #20]
 800909e:	e7c2      	b.n	8009026 <__gethex+0x390>
 80090a0:	692a      	ldr	r2, [r5, #16]
 80090a2:	454a      	cmp	r2, r9
 80090a4:	dd0b      	ble.n	80090be <__gethex+0x428>
 80090a6:	2101      	movs	r1, #1
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7ff fda5 	bl	8008bf8 <rshift>
 80090ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b2:	3401      	adds	r4, #1
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	f6ff aed9 	blt.w	8008e6c <__gethex+0x1d6>
 80090ba:	2701      	movs	r7, #1
 80090bc:	e7c7      	b.n	800904e <__gethex+0x3b8>
 80090be:	f016 061f 	ands.w	r6, r6, #31
 80090c2:	d0fa      	beq.n	80090ba <__gethex+0x424>
 80090c4:	449a      	add	sl, r3
 80090c6:	f1c6 0620 	rsb	r6, r6, #32
 80090ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80090ce:	f000 f9ab 	bl	8009428 <__hi0bits>
 80090d2:	42b0      	cmp	r0, r6
 80090d4:	dbe7      	blt.n	80090a6 <__gethex+0x410>
 80090d6:	e7f0      	b.n	80090ba <__gethex+0x424>

080090d8 <L_shift>:
 80090d8:	f1c2 0208 	rsb	r2, r2, #8
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	f1c2 0620 	rsb	r6, r2, #32
 80090e4:	6843      	ldr	r3, [r0, #4]
 80090e6:	6804      	ldr	r4, [r0, #0]
 80090e8:	fa03 f506 	lsl.w	r5, r3, r6
 80090ec:	432c      	orrs	r4, r5
 80090ee:	40d3      	lsrs	r3, r2
 80090f0:	6004      	str	r4, [r0, #0]
 80090f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090f6:	4288      	cmp	r0, r1
 80090f8:	d3f4      	bcc.n	80090e4 <L_shift+0xc>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}

080090fc <__match>:
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	b914      	cbnz	r4, 800910e <__match+0x12>
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	2001      	movs	r0, #1
 800910c:	bd30      	pop	{r4, r5, pc}
 800910e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009112:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009116:	2d19      	cmp	r5, #25
 8009118:	bf98      	it	ls
 800911a:	3220      	addls	r2, #32
 800911c:	42a2      	cmp	r2, r4
 800911e:	d0f0      	beq.n	8009102 <__match+0x6>
 8009120:	2000      	movs	r0, #0
 8009122:	e7f3      	b.n	800910c <__match+0x10>

08009124 <__hexnan>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	680b      	ldr	r3, [r1, #0]
 800912a:	6801      	ldr	r1, [r0, #0]
 800912c:	115f      	asrs	r7, r3, #5
 800912e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009132:	f013 031f 	ands.w	r3, r3, #31
 8009136:	b087      	sub	sp, #28
 8009138:	bf18      	it	ne
 800913a:	3704      	addne	r7, #4
 800913c:	2500      	movs	r5, #0
 800913e:	1f3e      	subs	r6, r7, #4
 8009140:	4682      	mov	sl, r0
 8009142:	4690      	mov	r8, r2
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	f847 5c04 	str.w	r5, [r7, #-4]
 800914a:	46b1      	mov	r9, r6
 800914c:	4634      	mov	r4, r6
 800914e:	9502      	str	r5, [sp, #8]
 8009150:	46ab      	mov	fp, r5
 8009152:	784a      	ldrb	r2, [r1, #1]
 8009154:	1c4b      	adds	r3, r1, #1
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	b342      	cbz	r2, 80091ac <__hexnan+0x88>
 800915a:	4610      	mov	r0, r2
 800915c:	9105      	str	r1, [sp, #20]
 800915e:	9204      	str	r2, [sp, #16]
 8009160:	f7ff fd84 	bl	8008c6c <__hexdig_fun>
 8009164:	2800      	cmp	r0, #0
 8009166:	d143      	bne.n	80091f0 <__hexnan+0xcc>
 8009168:	9a04      	ldr	r2, [sp, #16]
 800916a:	9905      	ldr	r1, [sp, #20]
 800916c:	2a20      	cmp	r2, #32
 800916e:	d818      	bhi.n	80091a2 <__hexnan+0x7e>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	459b      	cmp	fp, r3
 8009174:	dd13      	ble.n	800919e <__hexnan+0x7a>
 8009176:	454c      	cmp	r4, r9
 8009178:	d206      	bcs.n	8009188 <__hexnan+0x64>
 800917a:	2d07      	cmp	r5, #7
 800917c:	dc04      	bgt.n	8009188 <__hexnan+0x64>
 800917e:	462a      	mov	r2, r5
 8009180:	4649      	mov	r1, r9
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff ffa8 	bl	80090d8 <L_shift>
 8009188:	4544      	cmp	r4, r8
 800918a:	d944      	bls.n	8009216 <__hexnan+0xf2>
 800918c:	2300      	movs	r3, #0
 800918e:	f1a4 0904 	sub.w	r9, r4, #4
 8009192:	f844 3c04 	str.w	r3, [r4, #-4]
 8009196:	f8cd b008 	str.w	fp, [sp, #8]
 800919a:	464c      	mov	r4, r9
 800919c:	461d      	mov	r5, r3
 800919e:	9903      	ldr	r1, [sp, #12]
 80091a0:	e7d7      	b.n	8009152 <__hexnan+0x2e>
 80091a2:	2a29      	cmp	r2, #41	; 0x29
 80091a4:	d14a      	bne.n	800923c <__hexnan+0x118>
 80091a6:	3102      	adds	r1, #2
 80091a8:	f8ca 1000 	str.w	r1, [sl]
 80091ac:	f1bb 0f00 	cmp.w	fp, #0
 80091b0:	d044      	beq.n	800923c <__hexnan+0x118>
 80091b2:	454c      	cmp	r4, r9
 80091b4:	d206      	bcs.n	80091c4 <__hexnan+0xa0>
 80091b6:	2d07      	cmp	r5, #7
 80091b8:	dc04      	bgt.n	80091c4 <__hexnan+0xa0>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4649      	mov	r1, r9
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff ff8a 	bl	80090d8 <L_shift>
 80091c4:	4544      	cmp	r4, r8
 80091c6:	d928      	bls.n	800921a <__hexnan+0xf6>
 80091c8:	4643      	mov	r3, r8
 80091ca:	f854 2b04 	ldr.w	r2, [r4], #4
 80091ce:	f843 2b04 	str.w	r2, [r3], #4
 80091d2:	42a6      	cmp	r6, r4
 80091d4:	d2f9      	bcs.n	80091ca <__hexnan+0xa6>
 80091d6:	2200      	movs	r2, #0
 80091d8:	f843 2b04 	str.w	r2, [r3], #4
 80091dc:	429e      	cmp	r6, r3
 80091de:	d2fb      	bcs.n	80091d8 <__hexnan+0xb4>
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	b91b      	cbnz	r3, 80091ec <__hexnan+0xc8>
 80091e4:	4546      	cmp	r6, r8
 80091e6:	d127      	bne.n	8009238 <__hexnan+0x114>
 80091e8:	2301      	movs	r3, #1
 80091ea:	6033      	str	r3, [r6, #0]
 80091ec:	2005      	movs	r0, #5
 80091ee:	e026      	b.n	800923e <__hexnan+0x11a>
 80091f0:	3501      	adds	r5, #1
 80091f2:	2d08      	cmp	r5, #8
 80091f4:	f10b 0b01 	add.w	fp, fp, #1
 80091f8:	dd06      	ble.n	8009208 <__hexnan+0xe4>
 80091fa:	4544      	cmp	r4, r8
 80091fc:	d9cf      	bls.n	800919e <__hexnan+0x7a>
 80091fe:	2300      	movs	r3, #0
 8009200:	f844 3c04 	str.w	r3, [r4, #-4]
 8009204:	2501      	movs	r5, #1
 8009206:	3c04      	subs	r4, #4
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f000 000f 	and.w	r0, r0, #15
 800920e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009212:	6020      	str	r0, [r4, #0]
 8009214:	e7c3      	b.n	800919e <__hexnan+0x7a>
 8009216:	2508      	movs	r5, #8
 8009218:	e7c1      	b.n	800919e <__hexnan+0x7a>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0df      	beq.n	80091e0 <__hexnan+0xbc>
 8009220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009224:	f1c3 0320 	rsb	r3, r3, #32
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009230:	401a      	ands	r2, r3
 8009232:	f847 2c04 	str.w	r2, [r7, #-4]
 8009236:	e7d3      	b.n	80091e0 <__hexnan+0xbc>
 8009238:	3e04      	subs	r6, #4
 800923a:	e7d1      	b.n	80091e0 <__hexnan+0xbc>
 800923c:	2004      	movs	r0, #4
 800923e:	b007      	add	sp, #28
 8009240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009244 <__locale_ctype_ptr_l>:
 8009244:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009248:	4770      	bx	lr

0800924a <__localeconv_l>:
 800924a:	30f0      	adds	r0, #240	; 0xf0
 800924c:	4770      	bx	lr
	...

08009250 <_localeconv_r>:
 8009250:	4b04      	ldr	r3, [pc, #16]	; (8009264 <_localeconv_r+0x14>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6a18      	ldr	r0, [r3, #32]
 8009256:	4b04      	ldr	r3, [pc, #16]	; (8009268 <_localeconv_r+0x18>)
 8009258:	2800      	cmp	r0, #0
 800925a:	bf08      	it	eq
 800925c:	4618      	moveq	r0, r3
 800925e:	30f0      	adds	r0, #240	; 0xf0
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000018 	.word	0x20000018
 8009268:	2000007c 	.word	0x2000007c

0800926c <malloc>:
 800926c:	4b02      	ldr	r3, [pc, #8]	; (8009278 <malloc+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 bc71 	b.w	8009b58 <_malloc_r>
 8009276:	bf00      	nop
 8009278:	20000018 	.word	0x20000018

0800927c <__ascii_mbtowc>:
 800927c:	b082      	sub	sp, #8
 800927e:	b901      	cbnz	r1, 8009282 <__ascii_mbtowc+0x6>
 8009280:	a901      	add	r1, sp, #4
 8009282:	b142      	cbz	r2, 8009296 <__ascii_mbtowc+0x1a>
 8009284:	b14b      	cbz	r3, 800929a <__ascii_mbtowc+0x1e>
 8009286:	7813      	ldrb	r3, [r2, #0]
 8009288:	600b      	str	r3, [r1, #0]
 800928a:	7812      	ldrb	r2, [r2, #0]
 800928c:	1c10      	adds	r0, r2, #0
 800928e:	bf18      	it	ne
 8009290:	2001      	movne	r0, #1
 8009292:	b002      	add	sp, #8
 8009294:	4770      	bx	lr
 8009296:	4610      	mov	r0, r2
 8009298:	e7fb      	b.n	8009292 <__ascii_mbtowc+0x16>
 800929a:	f06f 0001 	mvn.w	r0, #1
 800929e:	e7f8      	b.n	8009292 <__ascii_mbtowc+0x16>

080092a0 <_Balloc>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092a4:	4604      	mov	r4, r0
 80092a6:	460e      	mov	r6, r1
 80092a8:	b93d      	cbnz	r5, 80092ba <_Balloc+0x1a>
 80092aa:	2010      	movs	r0, #16
 80092ac:	f7ff ffde 	bl	800926c <malloc>
 80092b0:	6260      	str	r0, [r4, #36]	; 0x24
 80092b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092b6:	6005      	str	r5, [r0, #0]
 80092b8:	60c5      	str	r5, [r0, #12]
 80092ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80092bc:	68eb      	ldr	r3, [r5, #12]
 80092be:	b183      	cbz	r3, 80092e2 <_Balloc+0x42>
 80092c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092c8:	b9b8      	cbnz	r0, 80092fa <_Balloc+0x5a>
 80092ca:	2101      	movs	r1, #1
 80092cc:	fa01 f506 	lsl.w	r5, r1, r6
 80092d0:	1d6a      	adds	r2, r5, #5
 80092d2:	0092      	lsls	r2, r2, #2
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 fbe2 	bl	8009a9e <_calloc_r>
 80092da:	b160      	cbz	r0, 80092f6 <_Balloc+0x56>
 80092dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80092e0:	e00e      	b.n	8009300 <_Balloc+0x60>
 80092e2:	2221      	movs	r2, #33	; 0x21
 80092e4:	2104      	movs	r1, #4
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fbd9 	bl	8009a9e <_calloc_r>
 80092ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ee:	60e8      	str	r0, [r5, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e4      	bne.n	80092c0 <_Balloc+0x20>
 80092f6:	2000      	movs	r0, #0
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	6802      	ldr	r2, [r0, #0]
 80092fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009300:	2300      	movs	r3, #0
 8009302:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009306:	e7f7      	b.n	80092f8 <_Balloc+0x58>

08009308 <_Bfree>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800930c:	4606      	mov	r6, r0
 800930e:	460d      	mov	r5, r1
 8009310:	b93c      	cbnz	r4, 8009322 <_Bfree+0x1a>
 8009312:	2010      	movs	r0, #16
 8009314:	f7ff ffaa 	bl	800926c <malloc>
 8009318:	6270      	str	r0, [r6, #36]	; 0x24
 800931a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800931e:	6004      	str	r4, [r0, #0]
 8009320:	60c4      	str	r4, [r0, #12]
 8009322:	b13d      	cbz	r5, 8009334 <_Bfree+0x2c>
 8009324:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009326:	686a      	ldr	r2, [r5, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800932e:	6029      	str	r1, [r5, #0]
 8009330:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009334:	bd70      	pop	{r4, r5, r6, pc}

08009336 <__multadd>:
 8009336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	690d      	ldr	r5, [r1, #16]
 800933c:	461f      	mov	r7, r3
 800933e:	4606      	mov	r6, r0
 8009340:	460c      	mov	r4, r1
 8009342:	f101 0c14 	add.w	ip, r1, #20
 8009346:	2300      	movs	r3, #0
 8009348:	f8dc 0000 	ldr.w	r0, [ip]
 800934c:	b281      	uxth	r1, r0
 800934e:	fb02 7101 	mla	r1, r2, r1, r7
 8009352:	0c0f      	lsrs	r7, r1, #16
 8009354:	0c00      	lsrs	r0, r0, #16
 8009356:	fb02 7000 	mla	r0, r2, r0, r7
 800935a:	b289      	uxth	r1, r1
 800935c:	3301      	adds	r3, #1
 800935e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009362:	429d      	cmp	r5, r3
 8009364:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009368:	f84c 1b04 	str.w	r1, [ip], #4
 800936c:	dcec      	bgt.n	8009348 <__multadd+0x12>
 800936e:	b1d7      	cbz	r7, 80093a6 <__multadd+0x70>
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	42ab      	cmp	r3, r5
 8009374:	dc12      	bgt.n	800939c <__multadd+0x66>
 8009376:	6861      	ldr	r1, [r4, #4]
 8009378:	4630      	mov	r0, r6
 800937a:	3101      	adds	r1, #1
 800937c:	f7ff ff90 	bl	80092a0 <_Balloc>
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	3202      	adds	r2, #2
 8009384:	f104 010c 	add.w	r1, r4, #12
 8009388:	4680      	mov	r8, r0
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	300c      	adds	r0, #12
 800938e:	f7fd f8c7 	bl	8006520 <memcpy>
 8009392:	4621      	mov	r1, r4
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff ffb7 	bl	8009308 <_Bfree>
 800939a:	4644      	mov	r4, r8
 800939c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093a0:	3501      	adds	r5, #1
 80093a2:	615f      	str	r7, [r3, #20]
 80093a4:	6125      	str	r5, [r4, #16]
 80093a6:	4620      	mov	r0, r4
 80093a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093ac <__s2b>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	4615      	mov	r5, r2
 80093b4:	461f      	mov	r7, r3
 80093b6:	2209      	movs	r2, #9
 80093b8:	3308      	adds	r3, #8
 80093ba:	4606      	mov	r6, r0
 80093bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80093c0:	2100      	movs	r1, #0
 80093c2:	2201      	movs	r2, #1
 80093c4:	429a      	cmp	r2, r3
 80093c6:	db20      	blt.n	800940a <__s2b+0x5e>
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ff69 	bl	80092a0 <_Balloc>
 80093ce:	9b08      	ldr	r3, [sp, #32]
 80093d0:	6143      	str	r3, [r0, #20]
 80093d2:	2d09      	cmp	r5, #9
 80093d4:	f04f 0301 	mov.w	r3, #1
 80093d8:	6103      	str	r3, [r0, #16]
 80093da:	dd19      	ble.n	8009410 <__s2b+0x64>
 80093dc:	f104 0809 	add.w	r8, r4, #9
 80093e0:	46c1      	mov	r9, r8
 80093e2:	442c      	add	r4, r5
 80093e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80093e8:	4601      	mov	r1, r0
 80093ea:	3b30      	subs	r3, #48	; 0x30
 80093ec:	220a      	movs	r2, #10
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ffa1 	bl	8009336 <__multadd>
 80093f4:	45a1      	cmp	r9, r4
 80093f6:	d1f5      	bne.n	80093e4 <__s2b+0x38>
 80093f8:	eb08 0405 	add.w	r4, r8, r5
 80093fc:	3c08      	subs	r4, #8
 80093fe:	1b2d      	subs	r5, r5, r4
 8009400:	1963      	adds	r3, r4, r5
 8009402:	42bb      	cmp	r3, r7
 8009404:	db07      	blt.n	8009416 <__s2b+0x6a>
 8009406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940a:	0052      	lsls	r2, r2, #1
 800940c:	3101      	adds	r1, #1
 800940e:	e7d9      	b.n	80093c4 <__s2b+0x18>
 8009410:	340a      	adds	r4, #10
 8009412:	2509      	movs	r5, #9
 8009414:	e7f3      	b.n	80093fe <__s2b+0x52>
 8009416:	f814 3b01 	ldrb.w	r3, [r4], #1
 800941a:	4601      	mov	r1, r0
 800941c:	3b30      	subs	r3, #48	; 0x30
 800941e:	220a      	movs	r2, #10
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff ff88 	bl	8009336 <__multadd>
 8009426:	e7eb      	b.n	8009400 <__s2b+0x54>

08009428 <__hi0bits>:
 8009428:	0c02      	lsrs	r2, r0, #16
 800942a:	0412      	lsls	r2, r2, #16
 800942c:	4603      	mov	r3, r0
 800942e:	b9b2      	cbnz	r2, 800945e <__hi0bits+0x36>
 8009430:	0403      	lsls	r3, r0, #16
 8009432:	2010      	movs	r0, #16
 8009434:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009438:	bf04      	itt	eq
 800943a:	021b      	lsleq	r3, r3, #8
 800943c:	3008      	addeq	r0, #8
 800943e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009442:	bf04      	itt	eq
 8009444:	011b      	lsleq	r3, r3, #4
 8009446:	3004      	addeq	r0, #4
 8009448:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800944c:	bf04      	itt	eq
 800944e:	009b      	lsleq	r3, r3, #2
 8009450:	3002      	addeq	r0, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	db06      	blt.n	8009464 <__hi0bits+0x3c>
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	d503      	bpl.n	8009462 <__hi0bits+0x3a>
 800945a:	3001      	adds	r0, #1
 800945c:	4770      	bx	lr
 800945e:	2000      	movs	r0, #0
 8009460:	e7e8      	b.n	8009434 <__hi0bits+0xc>
 8009462:	2020      	movs	r0, #32
 8009464:	4770      	bx	lr

08009466 <__lo0bits>:
 8009466:	6803      	ldr	r3, [r0, #0]
 8009468:	f013 0207 	ands.w	r2, r3, #7
 800946c:	4601      	mov	r1, r0
 800946e:	d00b      	beq.n	8009488 <__lo0bits+0x22>
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	d423      	bmi.n	80094bc <__lo0bits+0x56>
 8009474:	0798      	lsls	r0, r3, #30
 8009476:	bf49      	itett	mi
 8009478:	085b      	lsrmi	r3, r3, #1
 800947a:	089b      	lsrpl	r3, r3, #2
 800947c:	2001      	movmi	r0, #1
 800947e:	600b      	strmi	r3, [r1, #0]
 8009480:	bf5c      	itt	pl
 8009482:	600b      	strpl	r3, [r1, #0]
 8009484:	2002      	movpl	r0, #2
 8009486:	4770      	bx	lr
 8009488:	b298      	uxth	r0, r3
 800948a:	b9a8      	cbnz	r0, 80094b8 <__lo0bits+0x52>
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	2010      	movs	r0, #16
 8009490:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009494:	bf04      	itt	eq
 8009496:	0a1b      	lsreq	r3, r3, #8
 8009498:	3008      	addeq	r0, #8
 800949a:	071a      	lsls	r2, r3, #28
 800949c:	bf04      	itt	eq
 800949e:	091b      	lsreq	r3, r3, #4
 80094a0:	3004      	addeq	r0, #4
 80094a2:	079a      	lsls	r2, r3, #30
 80094a4:	bf04      	itt	eq
 80094a6:	089b      	lsreq	r3, r3, #2
 80094a8:	3002      	addeq	r0, #2
 80094aa:	07da      	lsls	r2, r3, #31
 80094ac:	d402      	bmi.n	80094b4 <__lo0bits+0x4e>
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	d006      	beq.n	80094c0 <__lo0bits+0x5a>
 80094b2:	3001      	adds	r0, #1
 80094b4:	600b      	str	r3, [r1, #0]
 80094b6:	4770      	bx	lr
 80094b8:	4610      	mov	r0, r2
 80094ba:	e7e9      	b.n	8009490 <__lo0bits+0x2a>
 80094bc:	2000      	movs	r0, #0
 80094be:	4770      	bx	lr
 80094c0:	2020      	movs	r0, #32
 80094c2:	4770      	bx	lr

080094c4 <__i2b>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	460c      	mov	r4, r1
 80094c8:	2101      	movs	r1, #1
 80094ca:	f7ff fee9 	bl	80092a0 <_Balloc>
 80094ce:	2201      	movs	r2, #1
 80094d0:	6144      	str	r4, [r0, #20]
 80094d2:	6102      	str	r2, [r0, #16]
 80094d4:	bd10      	pop	{r4, pc}

080094d6 <__multiply>:
 80094d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	4614      	mov	r4, r2
 80094dc:	690a      	ldr	r2, [r1, #16]
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	bfb8      	it	lt
 80094e4:	460b      	movlt	r3, r1
 80094e6:	4688      	mov	r8, r1
 80094e8:	bfbc      	itt	lt
 80094ea:	46a0      	movlt	r8, r4
 80094ec:	461c      	movlt	r4, r3
 80094ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80094f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094fe:	eb07 0609 	add.w	r6, r7, r9
 8009502:	42b3      	cmp	r3, r6
 8009504:	bfb8      	it	lt
 8009506:	3101      	addlt	r1, #1
 8009508:	f7ff feca 	bl	80092a0 <_Balloc>
 800950c:	f100 0514 	add.w	r5, r0, #20
 8009510:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009514:	462b      	mov	r3, r5
 8009516:	2200      	movs	r2, #0
 8009518:	4573      	cmp	r3, lr
 800951a:	d316      	bcc.n	800954a <__multiply+0x74>
 800951c:	f104 0214 	add.w	r2, r4, #20
 8009520:	f108 0114 	add.w	r1, r8, #20
 8009524:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009528:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	9b00      	ldr	r3, [sp, #0]
 8009530:	9201      	str	r2, [sp, #4]
 8009532:	4293      	cmp	r3, r2
 8009534:	d80c      	bhi.n	8009550 <__multiply+0x7a>
 8009536:	2e00      	cmp	r6, #0
 8009538:	dd03      	ble.n	8009542 <__multiply+0x6c>
 800953a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800953e:	2b00      	cmp	r3, #0
 8009540:	d05d      	beq.n	80095fe <__multiply+0x128>
 8009542:	6106      	str	r6, [r0, #16]
 8009544:	b003      	add	sp, #12
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	f843 2b04 	str.w	r2, [r3], #4
 800954e:	e7e3      	b.n	8009518 <__multiply+0x42>
 8009550:	f8b2 b000 	ldrh.w	fp, [r2]
 8009554:	f1bb 0f00 	cmp.w	fp, #0
 8009558:	d023      	beq.n	80095a2 <__multiply+0xcc>
 800955a:	4689      	mov	r9, r1
 800955c:	46ac      	mov	ip, r5
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	f859 4b04 	ldr.w	r4, [r9], #4
 8009566:	f8dc a000 	ldr.w	sl, [ip]
 800956a:	b2a3      	uxth	r3, r4
 800956c:	fa1f fa8a 	uxth.w	sl, sl
 8009570:	fb0b a303 	mla	r3, fp, r3, sl
 8009574:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009578:	f8dc 4000 	ldr.w	r4, [ip]
 800957c:	4443      	add	r3, r8
 800957e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009582:	fb0b 840a 	mla	r4, fp, sl, r8
 8009586:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800958a:	46e2      	mov	sl, ip
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009592:	454f      	cmp	r7, r9
 8009594:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009598:	f84a 3b04 	str.w	r3, [sl], #4
 800959c:	d82b      	bhi.n	80095f6 <__multiply+0x120>
 800959e:	f8cc 8004 	str.w	r8, [ip, #4]
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80095a8:	3204      	adds	r2, #4
 80095aa:	f1ba 0f00 	cmp.w	sl, #0
 80095ae:	d020      	beq.n	80095f2 <__multiply+0x11c>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	4689      	mov	r9, r1
 80095b4:	46a8      	mov	r8, r5
 80095b6:	f04f 0b00 	mov.w	fp, #0
 80095ba:	f8b9 c000 	ldrh.w	ip, [r9]
 80095be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80095c2:	fb0a 440c 	mla	r4, sl, ip, r4
 80095c6:	445c      	add	r4, fp
 80095c8:	46c4      	mov	ip, r8
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095d0:	f84c 3b04 	str.w	r3, [ip], #4
 80095d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	fb0a b303 	mla	r3, sl, r3, fp
 80095e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80095e6:	454f      	cmp	r7, r9
 80095e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80095ec:	d805      	bhi.n	80095fa <__multiply+0x124>
 80095ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80095f2:	3504      	adds	r5, #4
 80095f4:	e79b      	b.n	800952e <__multiply+0x58>
 80095f6:	46d4      	mov	ip, sl
 80095f8:	e7b3      	b.n	8009562 <__multiply+0x8c>
 80095fa:	46e0      	mov	r8, ip
 80095fc:	e7dd      	b.n	80095ba <__multiply+0xe4>
 80095fe:	3e01      	subs	r6, #1
 8009600:	e799      	b.n	8009536 <__multiply+0x60>
	...

08009604 <__pow5mult>:
 8009604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009608:	4615      	mov	r5, r2
 800960a:	f012 0203 	ands.w	r2, r2, #3
 800960e:	4606      	mov	r6, r0
 8009610:	460f      	mov	r7, r1
 8009612:	d007      	beq.n	8009624 <__pow5mult+0x20>
 8009614:	3a01      	subs	r2, #1
 8009616:	4c21      	ldr	r4, [pc, #132]	; (800969c <__pow5mult+0x98>)
 8009618:	2300      	movs	r3, #0
 800961a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800961e:	f7ff fe8a 	bl	8009336 <__multadd>
 8009622:	4607      	mov	r7, r0
 8009624:	10ad      	asrs	r5, r5, #2
 8009626:	d035      	beq.n	8009694 <__pow5mult+0x90>
 8009628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800962a:	b93c      	cbnz	r4, 800963c <__pow5mult+0x38>
 800962c:	2010      	movs	r0, #16
 800962e:	f7ff fe1d 	bl	800926c <malloc>
 8009632:	6270      	str	r0, [r6, #36]	; 0x24
 8009634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009638:	6004      	str	r4, [r0, #0]
 800963a:	60c4      	str	r4, [r0, #12]
 800963c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009644:	b94c      	cbnz	r4, 800965a <__pow5mult+0x56>
 8009646:	f240 2171 	movw	r1, #625	; 0x271
 800964a:	4630      	mov	r0, r6
 800964c:	f7ff ff3a 	bl	80094c4 <__i2b>
 8009650:	2300      	movs	r3, #0
 8009652:	f8c8 0008 	str.w	r0, [r8, #8]
 8009656:	4604      	mov	r4, r0
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	07eb      	lsls	r3, r5, #31
 8009660:	d50a      	bpl.n	8009678 <__pow5mult+0x74>
 8009662:	4639      	mov	r1, r7
 8009664:	4622      	mov	r2, r4
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff ff35 	bl	80094d6 <__multiply>
 800966c:	4639      	mov	r1, r7
 800966e:	4681      	mov	r9, r0
 8009670:	4630      	mov	r0, r6
 8009672:	f7ff fe49 	bl	8009308 <_Bfree>
 8009676:	464f      	mov	r7, r9
 8009678:	106d      	asrs	r5, r5, #1
 800967a:	d00b      	beq.n	8009694 <__pow5mult+0x90>
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	b938      	cbnz	r0, 8009690 <__pow5mult+0x8c>
 8009680:	4622      	mov	r2, r4
 8009682:	4621      	mov	r1, r4
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff ff26 	bl	80094d6 <__multiply>
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	f8c0 8000 	str.w	r8, [r0]
 8009690:	4604      	mov	r4, r0
 8009692:	e7e4      	b.n	800965e <__pow5mult+0x5a>
 8009694:	4638      	mov	r0, r7
 8009696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969a:	bf00      	nop
 800969c:	0800a6b0 	.word	0x0800a6b0

080096a0 <__lshift>:
 80096a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a4:	460c      	mov	r4, r1
 80096a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	6849      	ldr	r1, [r1, #4]
 80096ae:	eb0a 0903 	add.w	r9, sl, r3
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	4607      	mov	r7, r0
 80096b6:	4616      	mov	r6, r2
 80096b8:	f109 0501 	add.w	r5, r9, #1
 80096bc:	42ab      	cmp	r3, r5
 80096be:	db32      	blt.n	8009726 <__lshift+0x86>
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff fded 	bl	80092a0 <_Balloc>
 80096c6:	2300      	movs	r3, #0
 80096c8:	4680      	mov	r8, r0
 80096ca:	f100 0114 	add.w	r1, r0, #20
 80096ce:	461a      	mov	r2, r3
 80096d0:	4553      	cmp	r3, sl
 80096d2:	db2b      	blt.n	800972c <__lshift+0x8c>
 80096d4:	6920      	ldr	r0, [r4, #16]
 80096d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096da:	f104 0314 	add.w	r3, r4, #20
 80096de:	f016 021f 	ands.w	r2, r6, #31
 80096e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096ea:	d025      	beq.n	8009738 <__lshift+0x98>
 80096ec:	f1c2 0e20 	rsb	lr, r2, #32
 80096f0:	2000      	movs	r0, #0
 80096f2:	681e      	ldr	r6, [r3, #0]
 80096f4:	468a      	mov	sl, r1
 80096f6:	4096      	lsls	r6, r2
 80096f8:	4330      	orrs	r0, r6
 80096fa:	f84a 0b04 	str.w	r0, [sl], #4
 80096fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8009702:	459c      	cmp	ip, r3
 8009704:	fa20 f00e 	lsr.w	r0, r0, lr
 8009708:	d814      	bhi.n	8009734 <__lshift+0x94>
 800970a:	6048      	str	r0, [r1, #4]
 800970c:	b108      	cbz	r0, 8009712 <__lshift+0x72>
 800970e:	f109 0502 	add.w	r5, r9, #2
 8009712:	3d01      	subs	r5, #1
 8009714:	4638      	mov	r0, r7
 8009716:	f8c8 5010 	str.w	r5, [r8, #16]
 800971a:	4621      	mov	r1, r4
 800971c:	f7ff fdf4 	bl	8009308 <_Bfree>
 8009720:	4640      	mov	r0, r8
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	3101      	adds	r1, #1
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	e7c7      	b.n	80096bc <__lshift+0x1c>
 800972c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009730:	3301      	adds	r3, #1
 8009732:	e7cd      	b.n	80096d0 <__lshift+0x30>
 8009734:	4651      	mov	r1, sl
 8009736:	e7dc      	b.n	80096f2 <__lshift+0x52>
 8009738:	3904      	subs	r1, #4
 800973a:	f853 2b04 	ldr.w	r2, [r3], #4
 800973e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009742:	459c      	cmp	ip, r3
 8009744:	d8f9      	bhi.n	800973a <__lshift+0x9a>
 8009746:	e7e4      	b.n	8009712 <__lshift+0x72>

08009748 <__mcmp>:
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	690a      	ldr	r2, [r1, #16]
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	b530      	push	{r4, r5, lr}
 8009750:	d10c      	bne.n	800976c <__mcmp+0x24>
 8009752:	0092      	lsls	r2, r2, #2
 8009754:	3014      	adds	r0, #20
 8009756:	3114      	adds	r1, #20
 8009758:	1884      	adds	r4, r0, r2
 800975a:	4411      	add	r1, r2
 800975c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009760:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009764:	4295      	cmp	r5, r2
 8009766:	d003      	beq.n	8009770 <__mcmp+0x28>
 8009768:	d305      	bcc.n	8009776 <__mcmp+0x2e>
 800976a:	2301      	movs	r3, #1
 800976c:	4618      	mov	r0, r3
 800976e:	bd30      	pop	{r4, r5, pc}
 8009770:	42a0      	cmp	r0, r4
 8009772:	d3f3      	bcc.n	800975c <__mcmp+0x14>
 8009774:	e7fa      	b.n	800976c <__mcmp+0x24>
 8009776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800977a:	e7f7      	b.n	800976c <__mcmp+0x24>

0800977c <__mdiff>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	460d      	mov	r5, r1
 8009782:	4607      	mov	r7, r0
 8009784:	4611      	mov	r1, r2
 8009786:	4628      	mov	r0, r5
 8009788:	4614      	mov	r4, r2
 800978a:	f7ff ffdd 	bl	8009748 <__mcmp>
 800978e:	1e06      	subs	r6, r0, #0
 8009790:	d108      	bne.n	80097a4 <__mdiff+0x28>
 8009792:	4631      	mov	r1, r6
 8009794:	4638      	mov	r0, r7
 8009796:	f7ff fd83 	bl	80092a0 <_Balloc>
 800979a:	2301      	movs	r3, #1
 800979c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	bfa4      	itt	ge
 80097a6:	4623      	movge	r3, r4
 80097a8:	462c      	movge	r4, r5
 80097aa:	4638      	mov	r0, r7
 80097ac:	6861      	ldr	r1, [r4, #4]
 80097ae:	bfa6      	itte	ge
 80097b0:	461d      	movge	r5, r3
 80097b2:	2600      	movge	r6, #0
 80097b4:	2601      	movlt	r6, #1
 80097b6:	f7ff fd73 	bl	80092a0 <_Balloc>
 80097ba:	692b      	ldr	r3, [r5, #16]
 80097bc:	60c6      	str	r6, [r0, #12]
 80097be:	6926      	ldr	r6, [r4, #16]
 80097c0:	f105 0914 	add.w	r9, r5, #20
 80097c4:	f104 0214 	add.w	r2, r4, #20
 80097c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80097cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80097d0:	f100 0514 	add.w	r5, r0, #20
 80097d4:	f04f 0e00 	mov.w	lr, #0
 80097d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80097dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80097e0:	fa1e f18a 	uxtah	r1, lr, sl
 80097e4:	b2a3      	uxth	r3, r4
 80097e6:	1ac9      	subs	r1, r1, r3
 80097e8:	0c23      	lsrs	r3, r4, #16
 80097ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80097ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097f2:	b289      	uxth	r1, r1
 80097f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80097f8:	45c8      	cmp	r8, r9
 80097fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80097fe:	4694      	mov	ip, r2
 8009800:	f845 3b04 	str.w	r3, [r5], #4
 8009804:	d8e8      	bhi.n	80097d8 <__mdiff+0x5c>
 8009806:	45bc      	cmp	ip, r7
 8009808:	d304      	bcc.n	8009814 <__mdiff+0x98>
 800980a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800980e:	b183      	cbz	r3, 8009832 <__mdiff+0xb6>
 8009810:	6106      	str	r6, [r0, #16]
 8009812:	e7c5      	b.n	80097a0 <__mdiff+0x24>
 8009814:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009818:	fa1e f381 	uxtah	r3, lr, r1
 800981c:	141a      	asrs	r2, r3, #16
 800981e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009822:	b29b      	uxth	r3, r3
 8009824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009828:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800982c:	f845 3b04 	str.w	r3, [r5], #4
 8009830:	e7e9      	b.n	8009806 <__mdiff+0x8a>
 8009832:	3e01      	subs	r6, #1
 8009834:	e7e9      	b.n	800980a <__mdiff+0x8e>
	...

08009838 <__ulp>:
 8009838:	4b12      	ldr	r3, [pc, #72]	; (8009884 <__ulp+0x4c>)
 800983a:	ee10 2a90 	vmov	r2, s1
 800983e:	401a      	ands	r2, r3
 8009840:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd04      	ble.n	8009852 <__ulp+0x1a>
 8009848:	2000      	movs	r0, #0
 800984a:	4619      	mov	r1, r3
 800984c:	ec41 0b10 	vmov	d0, r0, r1
 8009850:	4770      	bx	lr
 8009852:	425b      	negs	r3, r3
 8009854:	151b      	asrs	r3, r3, #20
 8009856:	2b13      	cmp	r3, #19
 8009858:	f04f 0000 	mov.w	r0, #0
 800985c:	f04f 0100 	mov.w	r1, #0
 8009860:	dc04      	bgt.n	800986c <__ulp+0x34>
 8009862:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009866:	fa42 f103 	asr.w	r1, r2, r3
 800986a:	e7ef      	b.n	800984c <__ulp+0x14>
 800986c:	3b14      	subs	r3, #20
 800986e:	2b1e      	cmp	r3, #30
 8009870:	f04f 0201 	mov.w	r2, #1
 8009874:	bfda      	itte	le
 8009876:	f1c3 031f 	rsble	r3, r3, #31
 800987a:	fa02 f303 	lslle.w	r3, r2, r3
 800987e:	4613      	movgt	r3, r2
 8009880:	4618      	mov	r0, r3
 8009882:	e7e3      	b.n	800984c <__ulp+0x14>
 8009884:	7ff00000 	.word	0x7ff00000

08009888 <__b2d>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	6905      	ldr	r5, [r0, #16]
 800988c:	f100 0714 	add.w	r7, r0, #20
 8009890:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009894:	1f2e      	subs	r6, r5, #4
 8009896:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800989a:	4620      	mov	r0, r4
 800989c:	f7ff fdc4 	bl	8009428 <__hi0bits>
 80098a0:	f1c0 0320 	rsb	r3, r0, #32
 80098a4:	280a      	cmp	r0, #10
 80098a6:	600b      	str	r3, [r1, #0]
 80098a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009920 <__b2d+0x98>
 80098ac:	dc14      	bgt.n	80098d8 <__b2d+0x50>
 80098ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80098b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80098b6:	42b7      	cmp	r7, r6
 80098b8:	ea41 030c 	orr.w	r3, r1, ip
 80098bc:	bf34      	ite	cc
 80098be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80098c2:	2100      	movcs	r1, #0
 80098c4:	3015      	adds	r0, #21
 80098c6:	fa04 f000 	lsl.w	r0, r4, r0
 80098ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80098ce:	ea40 0201 	orr.w	r2, r0, r1
 80098d2:	ec43 2b10 	vmov	d0, r2, r3
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	42b7      	cmp	r7, r6
 80098da:	bf3a      	itte	cc
 80098dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80098e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80098e4:	2100      	movcs	r1, #0
 80098e6:	380b      	subs	r0, #11
 80098e8:	d015      	beq.n	8009916 <__b2d+0x8e>
 80098ea:	4084      	lsls	r4, r0
 80098ec:	f1c0 0520 	rsb	r5, r0, #32
 80098f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80098f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80098f8:	42be      	cmp	r6, r7
 80098fa:	fa21 fc05 	lsr.w	ip, r1, r5
 80098fe:	ea44 030c 	orr.w	r3, r4, ip
 8009902:	bf8c      	ite	hi
 8009904:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009908:	2400      	movls	r4, #0
 800990a:	fa01 f000 	lsl.w	r0, r1, r0
 800990e:	40ec      	lsrs	r4, r5
 8009910:	ea40 0204 	orr.w	r2, r0, r4
 8009914:	e7dd      	b.n	80098d2 <__b2d+0x4a>
 8009916:	ea44 030c 	orr.w	r3, r4, ip
 800991a:	460a      	mov	r2, r1
 800991c:	e7d9      	b.n	80098d2 <__b2d+0x4a>
 800991e:	bf00      	nop
 8009920:	3ff00000 	.word	0x3ff00000

08009924 <__d2b>:
 8009924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009928:	460e      	mov	r6, r1
 800992a:	2101      	movs	r1, #1
 800992c:	ec59 8b10 	vmov	r8, r9, d0
 8009930:	4615      	mov	r5, r2
 8009932:	f7ff fcb5 	bl	80092a0 <_Balloc>
 8009936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800993a:	4607      	mov	r7, r0
 800993c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009940:	bb34      	cbnz	r4, 8009990 <__d2b+0x6c>
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f1b8 0300 	subs.w	r3, r8, #0
 8009948:	d027      	beq.n	800999a <__d2b+0x76>
 800994a:	a802      	add	r0, sp, #8
 800994c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009950:	f7ff fd89 	bl	8009466 <__lo0bits>
 8009954:	9900      	ldr	r1, [sp, #0]
 8009956:	b1f0      	cbz	r0, 8009996 <__d2b+0x72>
 8009958:	9a01      	ldr	r2, [sp, #4]
 800995a:	f1c0 0320 	rsb	r3, r0, #32
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	430b      	orrs	r3, r1
 8009964:	40c2      	lsrs	r2, r0
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	9201      	str	r2, [sp, #4]
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	bf14      	ite	ne
 8009972:	2102      	movne	r1, #2
 8009974:	2101      	moveq	r1, #1
 8009976:	6139      	str	r1, [r7, #16]
 8009978:	b1c4      	cbz	r4, 80099ac <__d2b+0x88>
 800997a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800997e:	4404      	add	r4, r0
 8009980:	6034      	str	r4, [r6, #0]
 8009982:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009986:	6028      	str	r0, [r5, #0]
 8009988:	4638      	mov	r0, r7
 800998a:	b003      	add	sp, #12
 800998c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009994:	e7d5      	b.n	8009942 <__d2b+0x1e>
 8009996:	6179      	str	r1, [r7, #20]
 8009998:	e7e7      	b.n	800996a <__d2b+0x46>
 800999a:	a801      	add	r0, sp, #4
 800999c:	f7ff fd63 	bl	8009466 <__lo0bits>
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	2101      	movs	r1, #1
 80099a6:	6139      	str	r1, [r7, #16]
 80099a8:	3020      	adds	r0, #32
 80099aa:	e7e5      	b.n	8009978 <__d2b+0x54>
 80099ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099b4:	6030      	str	r0, [r6, #0]
 80099b6:	6918      	ldr	r0, [r3, #16]
 80099b8:	f7ff fd36 	bl	8009428 <__hi0bits>
 80099bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099c0:	e7e1      	b.n	8009986 <__d2b+0x62>

080099c2 <__ratio>:
 80099c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c6:	4688      	mov	r8, r1
 80099c8:	4669      	mov	r1, sp
 80099ca:	4681      	mov	r9, r0
 80099cc:	f7ff ff5c 	bl	8009888 <__b2d>
 80099d0:	a901      	add	r1, sp, #4
 80099d2:	4640      	mov	r0, r8
 80099d4:	ec57 6b10 	vmov	r6, r7, d0
 80099d8:	f7ff ff56 	bl	8009888 <__b2d>
 80099dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80099e4:	eba3 0c02 	sub.w	ip, r3, r2
 80099e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80099f2:	ec5b ab10 	vmov	sl, fp, d0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfce      	itee	gt
 80099fa:	463a      	movgt	r2, r7
 80099fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a00:	465a      	movle	r2, fp
 8009a02:	4659      	mov	r1, fp
 8009a04:	463d      	mov	r5, r7
 8009a06:	bfd4      	ite	le
 8009a08:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009a0c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009a10:	4630      	mov	r0, r6
 8009a12:	ee10 2a10 	vmov	r2, s0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f6 ff37 	bl	800088c <__aeabi_ddiv>
 8009a1e:	ec41 0b10 	vmov	d0, r0, r1
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a28 <__copybits>:
 8009a28:	3901      	subs	r1, #1
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	1149      	asrs	r1, r1, #5
 8009a2e:	6914      	ldr	r4, [r2, #16]
 8009a30:	3101      	adds	r1, #1
 8009a32:	f102 0314 	add.w	r3, r2, #20
 8009a36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a3e:	42a3      	cmp	r3, r4
 8009a40:	4602      	mov	r2, r0
 8009a42:	d303      	bcc.n	8009a4c <__copybits+0x24>
 8009a44:	2300      	movs	r3, #0
 8009a46:	428a      	cmp	r2, r1
 8009a48:	d305      	bcc.n	8009a56 <__copybits+0x2e>
 8009a4a:	bd10      	pop	{r4, pc}
 8009a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a50:	f840 2b04 	str.w	r2, [r0], #4
 8009a54:	e7f3      	b.n	8009a3e <__copybits+0x16>
 8009a56:	f842 3b04 	str.w	r3, [r2], #4
 8009a5a:	e7f4      	b.n	8009a46 <__copybits+0x1e>

08009a5c <__any_on>:
 8009a5c:	f100 0214 	add.w	r2, r0, #20
 8009a60:	6900      	ldr	r0, [r0, #16]
 8009a62:	114b      	asrs	r3, r1, #5
 8009a64:	4298      	cmp	r0, r3
 8009a66:	b510      	push	{r4, lr}
 8009a68:	db11      	blt.n	8009a8e <__any_on+0x32>
 8009a6a:	dd0a      	ble.n	8009a82 <__any_on+0x26>
 8009a6c:	f011 011f 	ands.w	r1, r1, #31
 8009a70:	d007      	beq.n	8009a82 <__any_on+0x26>
 8009a72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a76:	fa24 f001 	lsr.w	r0, r4, r1
 8009a7a:	fa00 f101 	lsl.w	r1, r0, r1
 8009a7e:	428c      	cmp	r4, r1
 8009a80:	d10b      	bne.n	8009a9a <__any_on+0x3e>
 8009a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d803      	bhi.n	8009a92 <__any_on+0x36>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	4603      	mov	r3, r0
 8009a90:	e7f7      	b.n	8009a82 <__any_on+0x26>
 8009a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a96:	2900      	cmp	r1, #0
 8009a98:	d0f5      	beq.n	8009a86 <__any_on+0x2a>
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	e7f6      	b.n	8009a8c <__any_on+0x30>

08009a9e <_calloc_r>:
 8009a9e:	b538      	push	{r3, r4, r5, lr}
 8009aa0:	fb02 f401 	mul.w	r4, r2, r1
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f000 f857 	bl	8009b58 <_malloc_r>
 8009aaa:	4605      	mov	r5, r0
 8009aac:	b118      	cbz	r0, 8009ab6 <_calloc_r+0x18>
 8009aae:	4622      	mov	r2, r4
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f7fc fd40 	bl	8006536 <memset>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

08009abc <_free_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4605      	mov	r5, r0
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	d045      	beq.n	8009b50 <_free_r+0x94>
 8009ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac8:	1f0c      	subs	r4, r1, #4
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfb8      	it	lt
 8009ace:	18e4      	addlt	r4, r4, r3
 8009ad0:	f000 fa36 	bl	8009f40 <__malloc_lock>
 8009ad4:	4a1f      	ldr	r2, [pc, #124]	; (8009b54 <_free_r+0x98>)
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	4610      	mov	r0, r2
 8009ada:	b933      	cbnz	r3, 8009aea <_free_r+0x2e>
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	6014      	str	r4, [r2, #0]
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae6:	f000 ba2c 	b.w	8009f42 <__malloc_unlock>
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	d90c      	bls.n	8009b08 <_free_r+0x4c>
 8009aee:	6821      	ldr	r1, [r4, #0]
 8009af0:	1862      	adds	r2, r4, r1
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bf04      	itt	eq
 8009af6:	681a      	ldreq	r2, [r3, #0]
 8009af8:	685b      	ldreq	r3, [r3, #4]
 8009afa:	6063      	str	r3, [r4, #4]
 8009afc:	bf04      	itt	eq
 8009afe:	1852      	addeq	r2, r2, r1
 8009b00:	6022      	streq	r2, [r4, #0]
 8009b02:	6004      	str	r4, [r0, #0]
 8009b04:	e7ec      	b.n	8009ae0 <_free_r+0x24>
 8009b06:	4613      	mov	r3, r2
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	b10a      	cbz	r2, 8009b10 <_free_r+0x54>
 8009b0c:	42a2      	cmp	r2, r4
 8009b0e:	d9fa      	bls.n	8009b06 <_free_r+0x4a>
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	1858      	adds	r0, r3, r1
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d10b      	bne.n	8009b30 <_free_r+0x74>
 8009b18:	6820      	ldr	r0, [r4, #0]
 8009b1a:	4401      	add	r1, r0
 8009b1c:	1858      	adds	r0, r3, r1
 8009b1e:	4282      	cmp	r2, r0
 8009b20:	6019      	str	r1, [r3, #0]
 8009b22:	d1dd      	bne.n	8009ae0 <_free_r+0x24>
 8009b24:	6810      	ldr	r0, [r2, #0]
 8009b26:	6852      	ldr	r2, [r2, #4]
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	4401      	add	r1, r0
 8009b2c:	6019      	str	r1, [r3, #0]
 8009b2e:	e7d7      	b.n	8009ae0 <_free_r+0x24>
 8009b30:	d902      	bls.n	8009b38 <_free_r+0x7c>
 8009b32:	230c      	movs	r3, #12
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	e7d3      	b.n	8009ae0 <_free_r+0x24>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428a      	cmp	r2, r1
 8009b3e:	bf04      	itt	eq
 8009b40:	6811      	ldreq	r1, [r2, #0]
 8009b42:	6852      	ldreq	r2, [r2, #4]
 8009b44:	6062      	str	r2, [r4, #4]
 8009b46:	bf04      	itt	eq
 8009b48:	1809      	addeq	r1, r1, r0
 8009b4a:	6021      	streq	r1, [r4, #0]
 8009b4c:	605c      	str	r4, [r3, #4]
 8009b4e:	e7c7      	b.n	8009ae0 <_free_r+0x24>
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	200002bc 	.word	0x200002bc

08009b58 <_malloc_r>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	1ccd      	adds	r5, r1, #3
 8009b5c:	f025 0503 	bic.w	r5, r5, #3
 8009b60:	3508      	adds	r5, #8
 8009b62:	2d0c      	cmp	r5, #12
 8009b64:	bf38      	it	cc
 8009b66:	250c      	movcc	r5, #12
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	db01      	blt.n	8009b72 <_malloc_r+0x1a>
 8009b6e:	42a9      	cmp	r1, r5
 8009b70:	d903      	bls.n	8009b7a <_malloc_r+0x22>
 8009b72:	230c      	movs	r3, #12
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	2000      	movs	r0, #0
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	f000 f9e1 	bl	8009f40 <__malloc_lock>
 8009b7e:	4a21      	ldr	r2, [pc, #132]	; (8009c04 <_malloc_r+0xac>)
 8009b80:	6814      	ldr	r4, [r2, #0]
 8009b82:	4621      	mov	r1, r4
 8009b84:	b991      	cbnz	r1, 8009bac <_malloc_r+0x54>
 8009b86:	4c20      	ldr	r4, [pc, #128]	; (8009c08 <_malloc_r+0xb0>)
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	b91b      	cbnz	r3, 8009b94 <_malloc_r+0x3c>
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 f98f 	bl	8009eb0 <_sbrk_r>
 8009b92:	6020      	str	r0, [r4, #0]
 8009b94:	4629      	mov	r1, r5
 8009b96:	4630      	mov	r0, r6
 8009b98:	f000 f98a 	bl	8009eb0 <_sbrk_r>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d124      	bne.n	8009bea <_malloc_r+0x92>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	6033      	str	r3, [r6, #0]
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 f9cc 	bl	8009f42 <__malloc_unlock>
 8009baa:	e7e4      	b.n	8009b76 <_malloc_r+0x1e>
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	1b5b      	subs	r3, r3, r5
 8009bb0:	d418      	bmi.n	8009be4 <_malloc_r+0x8c>
 8009bb2:	2b0b      	cmp	r3, #11
 8009bb4:	d90f      	bls.n	8009bd6 <_malloc_r+0x7e>
 8009bb6:	600b      	str	r3, [r1, #0]
 8009bb8:	50cd      	str	r5, [r1, r3]
 8009bba:	18cc      	adds	r4, r1, r3
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 f9c0 	bl	8009f42 <__malloc_unlock>
 8009bc2:	f104 000b 	add.w	r0, r4, #11
 8009bc6:	1d23      	adds	r3, r4, #4
 8009bc8:	f020 0007 	bic.w	r0, r0, #7
 8009bcc:	1ac3      	subs	r3, r0, r3
 8009bce:	d0d3      	beq.n	8009b78 <_malloc_r+0x20>
 8009bd0:	425a      	negs	r2, r3
 8009bd2:	50e2      	str	r2, [r4, r3]
 8009bd4:	e7d0      	b.n	8009b78 <_malloc_r+0x20>
 8009bd6:	428c      	cmp	r4, r1
 8009bd8:	684b      	ldr	r3, [r1, #4]
 8009bda:	bf16      	itet	ne
 8009bdc:	6063      	strne	r3, [r4, #4]
 8009bde:	6013      	streq	r3, [r2, #0]
 8009be0:	460c      	movne	r4, r1
 8009be2:	e7eb      	b.n	8009bbc <_malloc_r+0x64>
 8009be4:	460c      	mov	r4, r1
 8009be6:	6849      	ldr	r1, [r1, #4]
 8009be8:	e7cc      	b.n	8009b84 <_malloc_r+0x2c>
 8009bea:	1cc4      	adds	r4, r0, #3
 8009bec:	f024 0403 	bic.w	r4, r4, #3
 8009bf0:	42a0      	cmp	r0, r4
 8009bf2:	d005      	beq.n	8009c00 <_malloc_r+0xa8>
 8009bf4:	1a21      	subs	r1, r4, r0
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f000 f95a 	bl	8009eb0 <_sbrk_r>
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d0cf      	beq.n	8009ba0 <_malloc_r+0x48>
 8009c00:	6025      	str	r5, [r4, #0]
 8009c02:	e7db      	b.n	8009bbc <_malloc_r+0x64>
 8009c04:	200002bc 	.word	0x200002bc
 8009c08:	200002c0 	.word	0x200002c0

08009c0c <__ssputs_r>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	688e      	ldr	r6, [r1, #8]
 8009c12:	429e      	cmp	r6, r3
 8009c14:	4682      	mov	sl, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	4690      	mov	r8, r2
 8009c1a:	4699      	mov	r9, r3
 8009c1c:	d837      	bhi.n	8009c8e <__ssputs_r+0x82>
 8009c1e:	898a      	ldrh	r2, [r1, #12]
 8009c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c24:	d031      	beq.n	8009c8a <__ssputs_r+0x7e>
 8009c26:	6825      	ldr	r5, [r4, #0]
 8009c28:	6909      	ldr	r1, [r1, #16]
 8009c2a:	1a6f      	subs	r7, r5, r1
 8009c2c:	6965      	ldr	r5, [r4, #20]
 8009c2e:	2302      	movs	r3, #2
 8009c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c38:	f109 0301 	add.w	r3, r9, #1
 8009c3c:	443b      	add	r3, r7
 8009c3e:	429d      	cmp	r5, r3
 8009c40:	bf38      	it	cc
 8009c42:	461d      	movcc	r5, r3
 8009c44:	0553      	lsls	r3, r2, #21
 8009c46:	d530      	bpl.n	8009caa <__ssputs_r+0x9e>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7ff ff85 	bl	8009b58 <_malloc_r>
 8009c4e:	4606      	mov	r6, r0
 8009c50:	b950      	cbnz	r0, 8009c68 <__ssputs_r+0x5c>
 8009c52:	230c      	movs	r3, #12
 8009c54:	f8ca 3000 	str.w	r3, [sl]
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c68:	463a      	mov	r2, r7
 8009c6a:	6921      	ldr	r1, [r4, #16]
 8009c6c:	f7fc fc58 	bl	8006520 <memcpy>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	6126      	str	r6, [r4, #16]
 8009c7e:	6165      	str	r5, [r4, #20]
 8009c80:	443e      	add	r6, r7
 8009c82:	1bed      	subs	r5, r5, r7
 8009c84:	6026      	str	r6, [r4, #0]
 8009c86:	60a5      	str	r5, [r4, #8]
 8009c88:	464e      	mov	r6, r9
 8009c8a:	454e      	cmp	r6, r9
 8009c8c:	d900      	bls.n	8009c90 <__ssputs_r+0x84>
 8009c8e:	464e      	mov	r6, r9
 8009c90:	4632      	mov	r2, r6
 8009c92:	4641      	mov	r1, r8
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	f000 f93a 	bl	8009f0e <memmove>
 8009c9a:	68a3      	ldr	r3, [r4, #8]
 8009c9c:	1b9b      	subs	r3, r3, r6
 8009c9e:	60a3      	str	r3, [r4, #8]
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	441e      	add	r6, r3
 8009ca4:	6026      	str	r6, [r4, #0]
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e7dc      	b.n	8009c64 <__ssputs_r+0x58>
 8009caa:	462a      	mov	r2, r5
 8009cac:	f000 f94a 	bl	8009f44 <_realloc_r>
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1e2      	bne.n	8009c7c <__ssputs_r+0x70>
 8009cb6:	6921      	ldr	r1, [r4, #16]
 8009cb8:	4650      	mov	r0, sl
 8009cba:	f7ff feff 	bl	8009abc <_free_r>
 8009cbe:	e7c8      	b.n	8009c52 <__ssputs_r+0x46>

08009cc0 <_svfiprintf_r>:
 8009cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	898b      	ldrh	r3, [r1, #12]
 8009cc8:	061f      	lsls	r7, r3, #24
 8009cca:	b09d      	sub	sp, #116	; 0x74
 8009ccc:	4680      	mov	r8, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4616      	mov	r6, r2
 8009cd2:	d50f      	bpl.n	8009cf4 <_svfiprintf_r+0x34>
 8009cd4:	690b      	ldr	r3, [r1, #16]
 8009cd6:	b96b      	cbnz	r3, 8009cf4 <_svfiprintf_r+0x34>
 8009cd8:	2140      	movs	r1, #64	; 0x40
 8009cda:	f7ff ff3d 	bl	8009b58 <_malloc_r>
 8009cde:	6020      	str	r0, [r4, #0]
 8009ce0:	6120      	str	r0, [r4, #16]
 8009ce2:	b928      	cbnz	r0, 8009cf0 <_svfiprintf_r+0x30>
 8009ce4:	230c      	movs	r3, #12
 8009ce6:	f8c8 3000 	str.w	r3, [r8]
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cee:	e0c8      	b.n	8009e82 <_svfiprintf_r+0x1c2>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	6163      	str	r3, [r4, #20]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cfe:	2330      	movs	r3, #48	; 0x30
 8009d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d04:	9503      	str	r5, [sp, #12]
 8009d06:	f04f 0b01 	mov.w	fp, #1
 8009d0a:	4637      	mov	r7, r6
 8009d0c:	463d      	mov	r5, r7
 8009d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d12:	b10b      	cbz	r3, 8009d18 <_svfiprintf_r+0x58>
 8009d14:	2b25      	cmp	r3, #37	; 0x25
 8009d16:	d13e      	bne.n	8009d96 <_svfiprintf_r+0xd6>
 8009d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d1c:	d00b      	beq.n	8009d36 <_svfiprintf_r+0x76>
 8009d1e:	4653      	mov	r3, sl
 8009d20:	4632      	mov	r2, r6
 8009d22:	4621      	mov	r1, r4
 8009d24:	4640      	mov	r0, r8
 8009d26:	f7ff ff71 	bl	8009c0c <__ssputs_r>
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f000 80a4 	beq.w	8009e78 <_svfiprintf_r+0x1b8>
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	4453      	add	r3, sl
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	783b      	ldrb	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 809d 	beq.w	8009e78 <_svfiprintf_r+0x1b8>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d50:	931a      	str	r3, [sp, #104]	; 0x68
 8009d52:	462f      	mov	r7, r5
 8009d54:	2205      	movs	r2, #5
 8009d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d5a:	4850      	ldr	r0, [pc, #320]	; (8009e9c <_svfiprintf_r+0x1dc>)
 8009d5c:	f7f6 fa60 	bl	8000220 <memchr>
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	b9d0      	cbnz	r0, 8009d9a <_svfiprintf_r+0xda>
 8009d64:	06d9      	lsls	r1, r3, #27
 8009d66:	bf44      	itt	mi
 8009d68:	2220      	movmi	r2, #32
 8009d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d6e:	071a      	lsls	r2, r3, #28
 8009d70:	bf44      	itt	mi
 8009d72:	222b      	movmi	r2, #43	; 0x2b
 8009d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d78:	782a      	ldrb	r2, [r5, #0]
 8009d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8009d7c:	d015      	beq.n	8009daa <_svfiprintf_r+0xea>
 8009d7e:	9a07      	ldr	r2, [sp, #28]
 8009d80:	462f      	mov	r7, r5
 8009d82:	2000      	movs	r0, #0
 8009d84:	250a      	movs	r5, #10
 8009d86:	4639      	mov	r1, r7
 8009d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8c:	3b30      	subs	r3, #48	; 0x30
 8009d8e:	2b09      	cmp	r3, #9
 8009d90:	d94d      	bls.n	8009e2e <_svfiprintf_r+0x16e>
 8009d92:	b1b8      	cbz	r0, 8009dc4 <_svfiprintf_r+0x104>
 8009d94:	e00f      	b.n	8009db6 <_svfiprintf_r+0xf6>
 8009d96:	462f      	mov	r7, r5
 8009d98:	e7b8      	b.n	8009d0c <_svfiprintf_r+0x4c>
 8009d9a:	4a40      	ldr	r2, [pc, #256]	; (8009e9c <_svfiprintf_r+0x1dc>)
 8009d9c:	1a80      	subs	r0, r0, r2
 8009d9e:	fa0b f000 	lsl.w	r0, fp, r0
 8009da2:	4318      	orrs	r0, r3
 8009da4:	9004      	str	r0, [sp, #16]
 8009da6:	463d      	mov	r5, r7
 8009da8:	e7d3      	b.n	8009d52 <_svfiprintf_r+0x92>
 8009daa:	9a03      	ldr	r2, [sp, #12]
 8009dac:	1d11      	adds	r1, r2, #4
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	9103      	str	r1, [sp, #12]
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	db01      	blt.n	8009dba <_svfiprintf_r+0xfa>
 8009db6:	9207      	str	r2, [sp, #28]
 8009db8:	e004      	b.n	8009dc4 <_svfiprintf_r+0x104>
 8009dba:	4252      	negs	r2, r2
 8009dbc:	f043 0302 	orr.w	r3, r3, #2
 8009dc0:	9207      	str	r2, [sp, #28]
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	783b      	ldrb	r3, [r7, #0]
 8009dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc8:	d10c      	bne.n	8009de4 <_svfiprintf_r+0x124>
 8009dca:	787b      	ldrb	r3, [r7, #1]
 8009dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dce:	d133      	bne.n	8009e38 <_svfiprintf_r+0x178>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9203      	str	r2, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfb8      	it	lt
 8009ddc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009de0:	3702      	adds	r7, #2
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	4d2e      	ldr	r5, [pc, #184]	; (8009ea0 <_svfiprintf_r+0x1e0>)
 8009de6:	7839      	ldrb	r1, [r7, #0]
 8009de8:	2203      	movs	r2, #3
 8009dea:	4628      	mov	r0, r5
 8009dec:	f7f6 fa18 	bl	8000220 <memchr>
 8009df0:	b138      	cbz	r0, 8009e02 <_svfiprintf_r+0x142>
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	1b40      	subs	r0, r0, r5
 8009df6:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfa:	9b04      	ldr	r3, [sp, #16]
 8009dfc:	4303      	orrs	r3, r0
 8009dfe:	3701      	adds	r7, #1
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	7839      	ldrb	r1, [r7, #0]
 8009e04:	4827      	ldr	r0, [pc, #156]	; (8009ea4 <_svfiprintf_r+0x1e4>)
 8009e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e0a:	2206      	movs	r2, #6
 8009e0c:	1c7e      	adds	r6, r7, #1
 8009e0e:	f7f6 fa07 	bl	8000220 <memchr>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d038      	beq.n	8009e88 <_svfiprintf_r+0x1c8>
 8009e16:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <_svfiprintf_r+0x1e8>)
 8009e18:	bb13      	cbnz	r3, 8009e60 <_svfiprintf_r+0x1a0>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	3307      	adds	r3, #7
 8009e1e:	f023 0307 	bic.w	r3, r3, #7
 8009e22:	3308      	adds	r3, #8
 8009e24:	9303      	str	r3, [sp, #12]
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	444b      	add	r3, r9
 8009e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2c:	e76d      	b.n	8009d0a <_svfiprintf_r+0x4a>
 8009e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e32:	2001      	movs	r0, #1
 8009e34:	460f      	mov	r7, r1
 8009e36:	e7a6      	b.n	8009d86 <_svfiprintf_r+0xc6>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	3701      	adds	r7, #1
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	250a      	movs	r5, #10
 8009e42:	4638      	mov	r0, r7
 8009e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e48:	3a30      	subs	r2, #48	; 0x30
 8009e4a:	2a09      	cmp	r2, #9
 8009e4c:	d903      	bls.n	8009e56 <_svfiprintf_r+0x196>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0c8      	beq.n	8009de4 <_svfiprintf_r+0x124>
 8009e52:	9105      	str	r1, [sp, #20]
 8009e54:	e7c6      	b.n	8009de4 <_svfiprintf_r+0x124>
 8009e56:	fb05 2101 	mla	r1, r5, r1, r2
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	e7f0      	b.n	8009e42 <_svfiprintf_r+0x182>
 8009e60:	ab03      	add	r3, sp, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4622      	mov	r2, r4
 8009e66:	4b11      	ldr	r3, [pc, #68]	; (8009eac <_svfiprintf_r+0x1ec>)
 8009e68:	a904      	add	r1, sp, #16
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7fc fc00 	bl	8006670 <_printf_float>
 8009e70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009e74:	4681      	mov	r9, r0
 8009e76:	d1d6      	bne.n	8009e26 <_svfiprintf_r+0x166>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	065b      	lsls	r3, r3, #25
 8009e7c:	f53f af35 	bmi.w	8009cea <_svfiprintf_r+0x2a>
 8009e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e82:	b01d      	add	sp, #116	; 0x74
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	4b07      	ldr	r3, [pc, #28]	; (8009eac <_svfiprintf_r+0x1ec>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4640      	mov	r0, r8
 8009e94:	f7fc fea2 	bl	8006bdc <_printf_i>
 8009e98:	e7ea      	b.n	8009e70 <_svfiprintf_r+0x1b0>
 8009e9a:	bf00      	nop
 8009e9c:	0800a6bc 	.word	0x0800a6bc
 8009ea0:	0800a6c2 	.word	0x0800a6c2
 8009ea4:	0800a6c6 	.word	0x0800a6c6
 8009ea8:	08006671 	.word	0x08006671
 8009eac:	08009c0d 	.word	0x08009c0d

08009eb0 <_sbrk_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4c06      	ldr	r4, [pc, #24]	; (8009ecc <_sbrk_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	f7fc fa96 	bl	80063ec <_sbrk>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_sbrk_r+0x1a>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_sbrk_r+0x1a>
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	200006a4 	.word	0x200006a4

08009ed0 <strncmp>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	b16a      	cbz	r2, 8009ef0 <strncmp+0x20>
 8009ed4:	3901      	subs	r1, #1
 8009ed6:	1884      	adds	r4, r0, r2
 8009ed8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009edc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d103      	bne.n	8009eec <strncmp+0x1c>
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d001      	beq.n	8009eec <strncmp+0x1c>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f5      	bne.n	8009ed8 <strncmp+0x8>
 8009eec:	1a98      	subs	r0, r3, r2
 8009eee:	bd10      	pop	{r4, pc}
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	e7fc      	b.n	8009eee <strncmp+0x1e>

08009ef4 <__ascii_wctomb>:
 8009ef4:	b149      	cbz	r1, 8009f0a <__ascii_wctomb+0x16>
 8009ef6:	2aff      	cmp	r2, #255	; 0xff
 8009ef8:	bf85      	ittet	hi
 8009efa:	238a      	movhi	r3, #138	; 0x8a
 8009efc:	6003      	strhi	r3, [r0, #0]
 8009efe:	700a      	strbls	r2, [r1, #0]
 8009f00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009f04:	bf98      	it	ls
 8009f06:	2001      	movls	r0, #1
 8009f08:	4770      	bx	lr
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4770      	bx	lr

08009f0e <memmove>:
 8009f0e:	4288      	cmp	r0, r1
 8009f10:	b510      	push	{r4, lr}
 8009f12:	eb01 0302 	add.w	r3, r1, r2
 8009f16:	d807      	bhi.n	8009f28 <memmove+0x1a>
 8009f18:	1e42      	subs	r2, r0, #1
 8009f1a:	4299      	cmp	r1, r3
 8009f1c:	d00a      	beq.n	8009f34 <memmove+0x26>
 8009f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f26:	e7f8      	b.n	8009f1a <memmove+0xc>
 8009f28:	4283      	cmp	r3, r0
 8009f2a:	d9f5      	bls.n	8009f18 <memmove+0xa>
 8009f2c:	1881      	adds	r1, r0, r2
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	42d3      	cmn	r3, r2
 8009f32:	d100      	bne.n	8009f36 <memmove+0x28>
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f3e:	e7f7      	b.n	8009f30 <memmove+0x22>

08009f40 <__malloc_lock>:
 8009f40:	4770      	bx	lr

08009f42 <__malloc_unlock>:
 8009f42:	4770      	bx	lr

08009f44 <_realloc_r>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4607      	mov	r7, r0
 8009f48:	4614      	mov	r4, r2
 8009f4a:	460e      	mov	r6, r1
 8009f4c:	b921      	cbnz	r1, 8009f58 <_realloc_r+0x14>
 8009f4e:	4611      	mov	r1, r2
 8009f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f54:	f7ff be00 	b.w	8009b58 <_malloc_r>
 8009f58:	b922      	cbnz	r2, 8009f64 <_realloc_r+0x20>
 8009f5a:	f7ff fdaf 	bl	8009abc <_free_r>
 8009f5e:	4625      	mov	r5, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f64:	f000 f814 	bl	8009f90 <_malloc_usable_size_r>
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d20f      	bcs.n	8009f8c <_realloc_r+0x48>
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff fdf2 	bl	8009b58 <_malloc_r>
 8009f74:	4605      	mov	r5, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0f2      	beq.n	8009f60 <_realloc_r+0x1c>
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	f7fc facf 	bl	8006520 <memcpy>
 8009f82:	4631      	mov	r1, r6
 8009f84:	4638      	mov	r0, r7
 8009f86:	f7ff fd99 	bl	8009abc <_free_r>
 8009f8a:	e7e9      	b.n	8009f60 <_realloc_r+0x1c>
 8009f8c:	4635      	mov	r5, r6
 8009f8e:	e7e7      	b.n	8009f60 <_realloc_r+0x1c>

08009f90 <_malloc_usable_size_r>:
 8009f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f94:	1f18      	subs	r0, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bfbc      	itt	lt
 8009f9a:	580b      	ldrlt	r3, [r1, r0]
 8009f9c:	18c0      	addlt	r0, r0, r3
 8009f9e:	4770      	bx	lr

08009fa0 <round>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	ec57 6b10 	vmov	r6, r7, d0
 8009fa6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009faa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009fae:	2c13      	cmp	r4, #19
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	463d      	mov	r5, r7
 8009fb4:	dc17      	bgt.n	8009fe6 <round+0x46>
 8009fb6:	2c00      	cmp	r4, #0
 8009fb8:	da09      	bge.n	8009fce <round+0x2e>
 8009fba:	3401      	adds	r4, #1
 8009fbc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009fc0:	d103      	bne.n	8009fca <round+0x2a>
 8009fc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fca:	2100      	movs	r1, #0
 8009fcc:	e02c      	b.n	800a028 <round+0x88>
 8009fce:	4a18      	ldr	r2, [pc, #96]	; (800a030 <round+0x90>)
 8009fd0:	4122      	asrs	r2, r4
 8009fd2:	4217      	tst	r7, r2
 8009fd4:	d100      	bne.n	8009fd8 <round+0x38>
 8009fd6:	b19e      	cbz	r6, 800a000 <round+0x60>
 8009fd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009fdc:	4123      	asrs	r3, r4
 8009fde:	442b      	add	r3, r5
 8009fe0:	ea23 0302 	bic.w	r3, r3, r2
 8009fe4:	e7f1      	b.n	8009fca <round+0x2a>
 8009fe6:	2c33      	cmp	r4, #51	; 0x33
 8009fe8:	dd0d      	ble.n	800a006 <round+0x66>
 8009fea:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009fee:	d107      	bne.n	800a000 <round+0x60>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	ee10 2a10 	vmov	r2, s0
 8009ff8:	f7f6 f968 	bl	80002cc <__adddf3>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	ec47 6b10 	vmov	d0, r6, r7
 800a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a006:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a00e:	40d0      	lsrs	r0, r2
 800a010:	4206      	tst	r6, r0
 800a012:	d0f5      	beq.n	800a000 <round+0x60>
 800a014:	2201      	movs	r2, #1
 800a016:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a01a:	fa02 f404 	lsl.w	r4, r2, r4
 800a01e:	1931      	adds	r1, r6, r4
 800a020:	bf28      	it	cs
 800a022:	189b      	addcs	r3, r3, r2
 800a024:	ea21 0100 	bic.w	r1, r1, r0
 800a028:	461f      	mov	r7, r3
 800a02a:	460e      	mov	r6, r1
 800a02c:	e7e8      	b.n	800a000 <round+0x60>
 800a02e:	bf00      	nop
 800a030:	000fffff 	.word	0x000fffff

0800a034 <_init>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr

0800a040 <_fini>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	bf00      	nop
 800a044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a046:	bc08      	pop	{r3}
 800a048:	469e      	mov	lr, r3
 800a04a:	4770      	bx	lr
