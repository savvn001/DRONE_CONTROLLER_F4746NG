
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003680  0800d680  0800d680  0001d680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d00  08010d00  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08010d00  08010d00  00020d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d08  08010d08  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d08  08010d08  00020d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d0c  08010d0c  00020d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08010d10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c8  2000022c  08010f3c  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048f4  08010f3c  000348f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d874  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007432  00000000  00000000  0006dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c1f0  00000000  00000000  00074f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002578  00000000  00000000  000910f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000023d8  00000000  00000000  00093670  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002f4d4  00000000  00000000  00095a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00025617  00000000  00000000  000c4f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00108c41  00000000  00000000  000ea533  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001f3174  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000786c  00000000  00000000  001f31f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d668 	.word	0x0800d668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	0800d668 	.word	0x0800d668

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d84:	f1a2 0201 	sub.w	r2, r2, #1
 8000d88:	d1ed      	bne.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f02:	f000 b9f3 	b.w	80012ec <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 b9a8 	b.w	80012ec <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2lz>:
 8000fb4:	ee07 0a90 	vmov	s15, r0
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d401      	bmi.n	8000fc6 <__aeabi_f2lz+0x12>
 8000fc2:	f000 b809 	b.w	8000fd8 <__aeabi_f2ulz>
 8000fc6:	b508      	push	{r3, lr}
 8000fc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f000 f804 	bl	8000fd8 <__aeabi_f2ulz>
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd6:	bd08      	pop	{r3, pc}

08000fd8 <__aeabi_f2ulz>:
 8000fd8:	b5d0      	push	{r4, r6, r7, lr}
 8000fda:	f7ff fad5 	bl	8000588 <__aeabi_f2d>
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <__aeabi_f2ulz+0x40>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fb27 	bl	8000638 <__aeabi_dmul>
 8000fea:	f7ff fdfd 	bl	8000be8 <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff faa8 	bl	8000544 <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <__aeabi_f2ulz+0x44>)
 8000ff8:	f7ff fb1e 	bl	8000638 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f960 	bl	80002c8 <__aeabi_dsub>
 8001008:	f7ff fdee 	bl	8000be8 <__aeabi_d2uiz>
 800100c:	2200      	movs	r2, #0
 800100e:	4623      	mov	r3, r4
 8001010:	4310      	orrs	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	bdd0      	pop	{r4, r6, r7, pc}
 8001016:	bf00      	nop
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9e08      	ldr	r6, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	4688      	mov	r8, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14b      	bne.n	80010c6 <__udivmoddi4+0xa6>
 800102e:	428a      	cmp	r2, r1
 8001030:	4615      	mov	r5, r2
 8001032:	d967      	bls.n	8001104 <__udivmoddi4+0xe4>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0720 	rsb	r7, r2, #32
 800103e:	fa01 f302 	lsl.w	r3, r1, r2
 8001042:	fa20 f707 	lsr.w	r7, r0, r7
 8001046:	4095      	lsls	r5, r2
 8001048:	ea47 0803 	orr.w	r8, r7, r3
 800104c:	4094      	lsls	r4, r2
 800104e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001052:	0c23      	lsrs	r3, r4, #16
 8001054:	fbb8 f7fe 	udiv	r7, r8, lr
 8001058:	fa1f fc85 	uxth.w	ip, r5
 800105c:	fb0e 8817 	mls	r8, lr, r7, r8
 8001060:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001064:	fb07 f10c 	mul.w	r1, r7, ip
 8001068:	4299      	cmp	r1, r3
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x60>
 800106c:	18eb      	adds	r3, r5, r3
 800106e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001072:	f080 811b 	bcs.w	80012ac <__udivmoddi4+0x28c>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 8118 	bls.w	80012ac <__udivmoddi4+0x28c>
 800107c:	3f02      	subs	r7, #2
 800107e:	442b      	add	r3, r5
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b2a4      	uxth	r4, r4
 8001084:	fbb3 f0fe 	udiv	r0, r3, lr
 8001088:	fb0e 3310 	mls	r3, lr, r0, r3
 800108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001090:	fb00 fc0c 	mul.w	ip, r0, ip
 8001094:	45a4      	cmp	ip, r4
 8001096:	d909      	bls.n	80010ac <__udivmoddi4+0x8c>
 8001098:	192c      	adds	r4, r5, r4
 800109a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800109e:	f080 8107 	bcs.w	80012b0 <__udivmoddi4+0x290>
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	f240 8104 	bls.w	80012b0 <__udivmoddi4+0x290>
 80010a8:	3802      	subs	r0, #2
 80010aa:	442c      	add	r4, r5
 80010ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010b0:	eba4 040c 	sub.w	r4, r4, ip
 80010b4:	2700      	movs	r7, #0
 80010b6:	b11e      	cbz	r6, 80010c0 <__udivmoddi4+0xa0>
 80010b8:	40d4      	lsrs	r4, r2
 80010ba:	2300      	movs	r3, #0
 80010bc:	e9c6 4300 	strd	r4, r3, [r6]
 80010c0:	4639      	mov	r1, r7
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d909      	bls.n	80010de <__udivmoddi4+0xbe>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	f000 80eb 	beq.w	80012a6 <__udivmoddi4+0x286>
 80010d0:	2700      	movs	r7, #0
 80010d2:	e9c6 0100 	strd	r0, r1, [r6]
 80010d6:	4638      	mov	r0, r7
 80010d8:	4639      	mov	r1, r7
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	fab3 f783 	clz	r7, r3
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d147      	bne.n	8001176 <__udivmoddi4+0x156>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d302      	bcc.n	80010f0 <__udivmoddi4+0xd0>
 80010ea:	4282      	cmp	r2, r0
 80010ec:	f200 80fa 	bhi.w	80012e4 <__udivmoddi4+0x2c4>
 80010f0:	1a84      	subs	r4, r0, r2
 80010f2:	eb61 0303 	sbc.w	r3, r1, r3
 80010f6:	2001      	movs	r0, #1
 80010f8:	4698      	mov	r8, r3
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d0e0      	beq.n	80010c0 <__udivmoddi4+0xa0>
 80010fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001102:	e7dd      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001104:	b902      	cbnz	r2, 8001108 <__udivmoddi4+0xe8>
 8001106:	deff      	udf	#255	; 0xff
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	2a00      	cmp	r2, #0
 800110e:	f040 808f 	bne.w	8001230 <__udivmoddi4+0x210>
 8001112:	1b49      	subs	r1, r1, r5
 8001114:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001118:	fa1f f885 	uxth.w	r8, r5
 800111c:	2701      	movs	r7, #1
 800111e:	fbb1 fcfe 	udiv	ip, r1, lr
 8001122:	0c23      	lsrs	r3, r4, #16
 8001124:	fb0e 111c 	mls	r1, lr, ip, r1
 8001128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800112c:	fb08 f10c 	mul.w	r1, r8, ip
 8001130:	4299      	cmp	r1, r3
 8001132:	d907      	bls.n	8001144 <__udivmoddi4+0x124>
 8001134:	18eb      	adds	r3, r5, r3
 8001136:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800113a:	d202      	bcs.n	8001142 <__udivmoddi4+0x122>
 800113c:	4299      	cmp	r1, r3
 800113e:	f200 80cd 	bhi.w	80012dc <__udivmoddi4+0x2bc>
 8001142:	4684      	mov	ip, r0
 8001144:	1a59      	subs	r1, r3, r1
 8001146:	b2a3      	uxth	r3, r4
 8001148:	fbb1 f0fe 	udiv	r0, r1, lr
 800114c:	fb0e 1410 	mls	r4, lr, r0, r1
 8001150:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001154:	fb08 f800 	mul.w	r8, r8, r0
 8001158:	45a0      	cmp	r8, r4
 800115a:	d907      	bls.n	800116c <__udivmoddi4+0x14c>
 800115c:	192c      	adds	r4, r5, r4
 800115e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x14a>
 8001164:	45a0      	cmp	r8, r4
 8001166:	f200 80b6 	bhi.w	80012d6 <__udivmoddi4+0x2b6>
 800116a:	4618      	mov	r0, r3
 800116c:	eba4 0408 	sub.w	r4, r4, r8
 8001170:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001174:	e79f      	b.n	80010b6 <__udivmoddi4+0x96>
 8001176:	f1c7 0c20 	rsb	ip, r7, #32
 800117a:	40bb      	lsls	r3, r7
 800117c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001180:	ea4e 0e03 	orr.w	lr, lr, r3
 8001184:	fa01 f407 	lsl.w	r4, r1, r7
 8001188:	fa20 f50c 	lsr.w	r5, r0, ip
 800118c:	fa21 f30c 	lsr.w	r3, r1, ip
 8001190:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001194:	4325      	orrs	r5, r4
 8001196:	fbb3 f9f8 	udiv	r9, r3, r8
 800119a:	0c2c      	lsrs	r4, r5, #16
 800119c:	fb08 3319 	mls	r3, r8, r9, r3
 80011a0:	fa1f fa8e 	uxth.w	sl, lr
 80011a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80011a8:	fb09 f40a 	mul.w	r4, r9, sl
 80011ac:	429c      	cmp	r4, r3
 80011ae:	fa02 f207 	lsl.w	r2, r2, r7
 80011b2:	fa00 f107 	lsl.w	r1, r0, r7
 80011b6:	d90b      	bls.n	80011d0 <__udivmoddi4+0x1b0>
 80011b8:	eb1e 0303 	adds.w	r3, lr, r3
 80011bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80011c0:	f080 8087 	bcs.w	80012d2 <__udivmoddi4+0x2b2>
 80011c4:	429c      	cmp	r4, r3
 80011c6:	f240 8084 	bls.w	80012d2 <__udivmoddi4+0x2b2>
 80011ca:	f1a9 0902 	sub.w	r9, r9, #2
 80011ce:	4473      	add	r3, lr
 80011d0:	1b1b      	subs	r3, r3, r4
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011d8:	fb08 3310 	mls	r3, r8, r0, r3
 80011dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80011e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80011e4:	45a2      	cmp	sl, r4
 80011e6:	d908      	bls.n	80011fa <__udivmoddi4+0x1da>
 80011e8:	eb1e 0404 	adds.w	r4, lr, r4
 80011ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011f0:	d26b      	bcs.n	80012ca <__udivmoddi4+0x2aa>
 80011f2:	45a2      	cmp	sl, r4
 80011f4:	d969      	bls.n	80012ca <__udivmoddi4+0x2aa>
 80011f6:	3802      	subs	r0, #2
 80011f8:	4474      	add	r4, lr
 80011fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011fe:	fba0 8902 	umull	r8, r9, r0, r2
 8001202:	eba4 040a 	sub.w	r4, r4, sl
 8001206:	454c      	cmp	r4, r9
 8001208:	46c2      	mov	sl, r8
 800120a:	464b      	mov	r3, r9
 800120c:	d354      	bcc.n	80012b8 <__udivmoddi4+0x298>
 800120e:	d051      	beq.n	80012b4 <__udivmoddi4+0x294>
 8001210:	2e00      	cmp	r6, #0
 8001212:	d069      	beq.n	80012e8 <__udivmoddi4+0x2c8>
 8001214:	ebb1 050a 	subs.w	r5, r1, sl
 8001218:	eb64 0403 	sbc.w	r4, r4, r3
 800121c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001220:	40fd      	lsrs	r5, r7
 8001222:	40fc      	lsrs	r4, r7
 8001224:	ea4c 0505 	orr.w	r5, ip, r5
 8001228:	e9c6 5400 	strd	r5, r4, [r6]
 800122c:	2700      	movs	r7, #0
 800122e:	e747      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001230:	f1c2 0320 	rsb	r3, r2, #32
 8001234:	fa20 f703 	lsr.w	r7, r0, r3
 8001238:	4095      	lsls	r5, r2
 800123a:	fa01 f002 	lsl.w	r0, r1, r2
 800123e:	fa21 f303 	lsr.w	r3, r1, r3
 8001242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001246:	4338      	orrs	r0, r7
 8001248:	0c01      	lsrs	r1, r0, #16
 800124a:	fbb3 f7fe 	udiv	r7, r3, lr
 800124e:	fa1f f885 	uxth.w	r8, r5
 8001252:	fb0e 3317 	mls	r3, lr, r7, r3
 8001256:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800125a:	fb07 f308 	mul.w	r3, r7, r8
 800125e:	428b      	cmp	r3, r1
 8001260:	fa04 f402 	lsl.w	r4, r4, r2
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0x256>
 8001266:	1869      	adds	r1, r5, r1
 8001268:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800126c:	d22f      	bcs.n	80012ce <__udivmoddi4+0x2ae>
 800126e:	428b      	cmp	r3, r1
 8001270:	d92d      	bls.n	80012ce <__udivmoddi4+0x2ae>
 8001272:	3f02      	subs	r7, #2
 8001274:	4429      	add	r1, r5
 8001276:	1acb      	subs	r3, r1, r3
 8001278:	b281      	uxth	r1, r0
 800127a:	fbb3 f0fe 	udiv	r0, r3, lr
 800127e:	fb0e 3310 	mls	r3, lr, r0, r3
 8001282:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001286:	fb00 f308 	mul.w	r3, r0, r8
 800128a:	428b      	cmp	r3, r1
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x27e>
 800128e:	1869      	adds	r1, r5, r1
 8001290:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001294:	d217      	bcs.n	80012c6 <__udivmoddi4+0x2a6>
 8001296:	428b      	cmp	r3, r1
 8001298:	d915      	bls.n	80012c6 <__udivmoddi4+0x2a6>
 800129a:	3802      	subs	r0, #2
 800129c:	4429      	add	r1, r5
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80012a4:	e73b      	b.n	800111e <__udivmoddi4+0xfe>
 80012a6:	4637      	mov	r7, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	e709      	b.n	80010c0 <__udivmoddi4+0xa0>
 80012ac:	4607      	mov	r7, r0
 80012ae:	e6e7      	b.n	8001080 <__udivmoddi4+0x60>
 80012b0:	4618      	mov	r0, r3
 80012b2:	e6fb      	b.n	80010ac <__udivmoddi4+0x8c>
 80012b4:	4541      	cmp	r1, r8
 80012b6:	d2ab      	bcs.n	8001210 <__udivmoddi4+0x1f0>
 80012b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80012bc:	eb69 020e 	sbc.w	r2, r9, lr
 80012c0:	3801      	subs	r0, #1
 80012c2:	4613      	mov	r3, r2
 80012c4:	e7a4      	b.n	8001210 <__udivmoddi4+0x1f0>
 80012c6:	4660      	mov	r0, ip
 80012c8:	e7e9      	b.n	800129e <__udivmoddi4+0x27e>
 80012ca:	4618      	mov	r0, r3
 80012cc:	e795      	b.n	80011fa <__udivmoddi4+0x1da>
 80012ce:	4667      	mov	r7, ip
 80012d0:	e7d1      	b.n	8001276 <__udivmoddi4+0x256>
 80012d2:	4681      	mov	r9, r0
 80012d4:	e77c      	b.n	80011d0 <__udivmoddi4+0x1b0>
 80012d6:	3802      	subs	r0, #2
 80012d8:	442c      	add	r4, r5
 80012da:	e747      	b.n	800116c <__udivmoddi4+0x14c>
 80012dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e0:	442b      	add	r3, r5
 80012e2:	e72f      	b.n	8001144 <__udivmoddi4+0x124>
 80012e4:	4638      	mov	r0, r7
 80012e6:	e708      	b.n	80010fa <__udivmoddi4+0xda>
 80012e8:	4637      	mov	r7, r6
 80012ea:	e6e9      	b.n	80010c0 <__udivmoddi4+0xa0>

080012ec <__aeabi_idiv0>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80012f0:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 80012f2:	f000 fe4f 	bl	8001f94 <DWT_Delay>

}
 80012f6:	bd08      	pop	{r3, pc}

080012f8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80012f8:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80012fa:	b938      	cbnz	r0, 800130c <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <NRF24_csn+0x24>)
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <NRF24_csn+0x28>)
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f001 fff8 	bl	80032fa <HAL_GPIO_WritePin>
}
 800130a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <NRF24_csn+0x24>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	4b03      	ldr	r3, [pc, #12]	; (8001320 <NRF24_csn+0x28>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f001 fff0 	bl	80032fa <HAL_GPIO_WritePin>
 800131a:	e7f6      	b.n	800130a <NRF24_csn+0x12>
 800131c:	2000024c 	.word	0x2000024c
 8001320:	20000250 	.word	0x20000250

08001324 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001324:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001326:	b938      	cbnz	r0, 8001338 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <NRF24_ce+0x24>)
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <NRF24_ce+0x28>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f001 ffe2 	bl	80032fa <HAL_GPIO_WritePin>
}
 8001336:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <NRF24_ce+0x24>)
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <NRF24_ce+0x28>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f001 ffda 	bl	80032fa <HAL_GPIO_WritePin>
 8001346:	e7f6      	b.n	8001336 <NRF24_ce+0x12>
 8001348:	2000024a 	.word	0x2000024a
 800134c:	20000250 	.word	0x20000250

08001350 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001350:	b510      	push	{r4, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffce 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800135c:	f004 041f 	and.w	r4, r4, #31
 8001360:	a902      	add	r1, sp, #8
 8001362:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001366:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <NRF24_read_register+0x40>)
 8001368:	2302      	movs	r3, #2
 800136a:	2201      	movs	r2, #1
 800136c:	4620      	mov	r0, r4
 800136e:	f003 fd51 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8001372:	2302      	movs	r3, #2
 8001374:	2201      	movs	r2, #1
 8001376:	f10d 0105 	add.w	r1, sp, #5
 800137a:	4620      	mov	r0, r4
 800137c:	f003 ffa1 	bl	80052c2 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8001380:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff ffb7 	bl	80012f8 <NRF24_csn>
	return retData;
}
 800138a:	4620      	mov	r0, r4
 800138c:	b002      	add	sp, #8
 800138e:	bd10      	pop	{r4, pc}
 8001390:	20000254 	.word	0x20000254

08001394 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	4604      	mov	r4, r0
 800139a:	460d      	mov	r5, r1
 800139c:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ffaa 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80013a4:	f004 041f 	and.w	r4, r4, #31
 80013a8:	a902      	add	r1, sp, #8
 80013aa:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80013ae:	4c08      	ldr	r4, [pc, #32]	; (80013d0 <NRF24_read_registerN+0x3c>)
 80013b0:	2302      	movs	r3, #2
 80013b2:	2201      	movs	r2, #1
 80013b4:	4620      	mov	r0, r4
 80013b6:	f003 fd2d 	bl	8004e14 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80013ba:	2302      	movs	r3, #2
 80013bc:	4632      	mov	r2, r6
 80013be:	4629      	mov	r1, r5
 80013c0:	4620      	mov	r0, r4
 80013c2:	f003 ff7e 	bl	80052c2 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff ff96 	bl	80012f8 <NRF24_csn>
}
 80013cc:	b002      	add	sp, #8
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	20000254 	.word	0x20000254

080013d4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80013d4:	b530      	push	{r4, r5, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff ff8b 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80013e2:	f044 0420 	orr.w	r4, r4, #32
 80013e6:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80013ea:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,2);
 80013ee:	2302      	movs	r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <NRF24_write_register+0x30>)
 80013f6:	f003 fd0d 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff7c 	bl	80012f8 <NRF24_csn>
}
 8001400:	b003      	add	sp, #12
 8001402:	bd30      	pop	{r4, r5, pc}
 8001404:	20000254 	.word	0x20000254

08001408 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff70 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001418:	f044 0420 	orr.w	r4, r4, #32
 800141c:	a902      	add	r1, sp, #8
 800141e:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001422:	4c08      	ldr	r4, [pc, #32]	; (8001444 <NRF24_write_registerN+0x3c>)
 8001424:	2302      	movs	r3, #2
 8001426:	2201      	movs	r2, #1
 8001428:	4620      	mov	r0, r4
 800142a:	f003 fcf3 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 800142e:	2302      	movs	r3, #2
 8001430:	4632      	mov	r2, r6
 8001432:	4629      	mov	r1, r5
 8001434:	4620      	mov	r0, r4
 8001436:	f003 fced 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff ff5c 	bl	80012f8 <NRF24_csn>
}
 8001440:	b002      	add	sp, #8
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	20000254 	.word	0x20000254

08001448 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	4605      	mov	r5, r0
 800144e:	460e      	mov	r6, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff51 	bl	80012f8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001456:	a902      	add	r1, sp, #8
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1,2);
 800145e:	4c08      	ldr	r4, [pc, #32]	; (8001480 <NRF24_write_payload+0x38>)
 8001460:	2302      	movs	r3, #2
 8001462:	2201      	movs	r2, #1
 8001464:	4620      	mov	r0, r4
 8001466:	f003 fcd5 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len,2);
 800146a:	2302      	movs	r3, #2
 800146c:	4632      	mov	r2, r6
 800146e:	4629      	mov	r1, r5
 8001470:	4620      	mov	r0, r4
 8001472:	f003 fccf 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff3e 	bl	80012f8 <NRF24_csn>
}
 800147c:	b002      	add	sp, #8
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	20000254 	.word	0x20000254

08001484 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001484:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	20e1      	movs	r0, #225	; 0xe1
 800148a:	f7ff ffa3 	bl	80013d4 <NRF24_write_register>
}
 800148e:	bd08      	pop	{r3, pc}

08001490 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001490:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	20e2      	movs	r0, #226	; 0xe2
 8001496:	f7ff ff9d 	bl	80013d4 <NRF24_write_register>
}
 800149a:	bd08      	pop	{r3, pc}

0800149c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800149c:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800149e:	2007      	movs	r0, #7
 80014a0:	f7ff ff56 	bl	8001350 <NRF24_read_register>
	return statReg;
}
 80014a4:	bd08      	pop	{r3, pc}

080014a6 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014a6:	b508      	push	{r3, lr}
	NRF24_ce(0);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff ff3b 	bl	8001324 <NRF24_ce>
	NRF24_flush_tx();
 80014ae:	f7ff ffe9 	bl	8001484 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014b2:	f7ff ffed 	bl	8001490 <NRF24_flush_rx>
}
 80014b6:	bd08      	pop	{r3, pc}

080014b8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80014b8:	b510      	push	{r4, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	ac02      	add	r4, sp, #8
 80014be:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80014c2:	2205      	movs	r2, #5
 80014c4:	4621      	mov	r1, r4
 80014c6:	200a      	movs	r0, #10
 80014c8:	f7ff ff9e 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80014cc:	2205      	movs	r2, #5
 80014ce:	4621      	mov	r1, r4
 80014d0:	2010      	movs	r0, #16
 80014d2:	f7ff ff99 	bl	8001408 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <NRF24_openWritingPipe+0x34>)
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	2920      	cmp	r1, #32
 80014dc:	bf28      	it	cs
 80014de:	2120      	movcs	r1, #32
 80014e0:	2011      	movs	r0, #17
 80014e2:	f7ff ff77 	bl	80013d4 <NRF24_write_register>
}
 80014e6:	b002      	add	sp, #8
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	20000338 	.word	0x20000338

080014f0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80014f0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80014f2:	f001 010f 	and.w	r1, r1, #15
 80014f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	2004      	movs	r0, #4
 80014fe:	f7ff ff69 	bl	80013d4 <NRF24_write_register>
}
 8001502:	bd08      	pop	{r3, pc}

08001504 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001504:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001506:	4601      	mov	r1, r0
 8001508:	287f      	cmp	r0, #127	; 0x7f
 800150a:	bf28      	it	cs
 800150c:	217f      	movcs	r1, #127	; 0x7f
 800150e:	2005      	movs	r0, #5
 8001510:	f7ff ff60 	bl	80013d4 <NRF24_write_register>
}
 8001514:	bd08      	pop	{r3, pc}
	...

08001518 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8001518:	2820      	cmp	r0, #32
 800151a:	bf28      	it	cs
 800151c:	2020      	movcs	r0, #32
 800151e:	4b01      	ldr	r3, [pc, #4]	; (8001524 <NRF24_setPayloadSize+0xc>)
 8001520:	7018      	strb	r0, [r3, #0]
}
 8001522:	4770      	bx	lr
 8001524:	20000338 	.word	0x20000338

08001528 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001528:	4b01      	ldr	r3, [pc, #4]	; (8001530 <NRF24_getPayloadSize+0x8>)
 800152a:	7818      	ldrb	r0, [r3, #0]
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000338 	.word	0x20000338

08001534 <NRF24_read_payload>:
{
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	4606      	mov	r6, r0
 800153a:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800153c:	f7ff fff4 	bl	8001528 <NRF24_getPayloadSize>
 8001540:	4604      	mov	r4, r0
 8001542:	42a8      	cmp	r0, r5
 8001544:	d817      	bhi.n	8001576 <NRF24_read_payload+0x42>
	NRF24_csn(0);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fed6 	bl	80012f8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800154c:	a902      	add	r1, sp, #8
 800154e:	2361      	movs	r3, #97	; 0x61
 8001550:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,2);
 8001554:	4d09      	ldr	r5, [pc, #36]	; (800157c <NRF24_read_payload+0x48>)
 8001556:	2302      	movs	r3, #2
 8001558:	2201      	movs	r2, #1
 800155a:	4628      	mov	r0, r5
 800155c:	f003 fc5a 	bl	8004e14 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,2);
 8001560:	2302      	movs	r3, #2
 8001562:	b2a2      	uxth	r2, r4
 8001564:	4631      	mov	r1, r6
 8001566:	4628      	mov	r0, r5
 8001568:	f003 feab 	bl	80052c2 <HAL_SPI_Receive>
	NRF24_csn(1);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fec3 	bl	80012f8 <NRF24_csn>
}
 8001572:	b002      	add	sp, #8
 8001574:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001576:	462c      	mov	r4, r5
 8001578:	e7e5      	b.n	8001546 <NRF24_read_payload+0x12>
 800157a:	bf00      	nop
 800157c:	20000254 	.word	0x20000254

08001580 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001580:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001582:	2060      	movs	r0, #96	; 0x60
 8001584:	f7ff fee4 	bl	8001350 <NRF24_read_register>
}
 8001588:	bd08      	pop	{r3, pc}

0800158a <NRF24_read>:
{
 800158a:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800158c:	f7ff ffd2 	bl	8001534 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001590:	2017      	movs	r0, #23
 8001592:	f7ff fedd 	bl	8001350 <NRF24_read_register>
 8001596:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 800159a:	f7ff ff79 	bl	8001490 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800159e:	f7ff ffef 	bl	8001580 <NRF24_getDynamicPayloadSize>
}
 80015a2:	4620      	mov	r0, r4
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80015a6:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015a8:	201d      	movs	r0, #29
 80015aa:	f7ff fed1 	bl	8001350 <NRF24_read_register>
 80015ae:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80015b2:	201d      	movs	r0, #29
 80015b4:	f7ff ff0e 	bl	80013d4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f7ff ff0a 	bl	80013d4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80015c0:	bd08      	pop	{r3, pc}

080015c2 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80015c2:	b508      	push	{r3, lr}
	if ( enable )
 80015c4:	b920      	cbnz	r0, 80015d0 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff ff03 	bl	80013d4 <NRF24_write_register>
}
 80015ce:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80015d0:	213f      	movs	r1, #63	; 0x3f
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fefe 	bl	80013d4 <NRF24_write_register>
 80015d8:	e7f9      	b.n	80015ce <NRF24_setAutoAck+0xc>

080015da <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80015da:	b510      	push	{r4, lr}
 80015dc:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80015de:	2006      	movs	r0, #6
 80015e0:	f7ff feb6 	bl	8001350 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015e4:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80015e8:	2c03      	cmp	r4, #3
 80015ea:	d009      	beq.n	8001600 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80015ec:	2c02      	cmp	r4, #2
 80015ee:	d00d      	beq.n	800160c <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80015f0:	2c01      	cmp	r4, #1
 80015f2:	d00e      	beq.n	8001612 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80015f4:	b134      	cbz	r4, 8001604 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80015f6:	2c04      	cmp	r4, #4
 80015f8:	d104      	bne.n	8001604 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015fa:	f041 0106 	orr.w	r1, r1, #6
 80015fe:	e001      	b.n	8001604 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001600:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001604:	2006      	movs	r0, #6
 8001606:	f7ff fee5 	bl	80013d4 <NRF24_write_register>
}
 800160a:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 800160c:	f041 0104 	orr.w	r1, r1, #4
 8001610:	e7f8      	b.n	8001604 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 8001612:	f041 0102 	orr.w	r1, r1, #2
 8001616:	e7f5      	b.n	8001604 <NRF24_setPALevel+0x2a>

08001618 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800161c:	2006      	movs	r0, #6
 800161e:	f7ff fe97 	bl	8001350 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001622:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 8001626:	2d02      	cmp	r5, #2
 8001628:	d00c      	beq.n	8001644 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 800162a:	2d01      	cmp	r5, #1
 800162c:	d00d      	beq.n	800164a <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 800162e:	4621      	mov	r1, r4
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fecf 	bl	80013d4 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001636:	2006      	movs	r0, #6
 8001638:	f7ff fe8a 	bl	8001350 <NRF24_read_register>
 800163c:	42a0      	cmp	r0, r4
 800163e:	d007      	beq.n	8001650 <NRF24_setDataRate+0x38>
	bool result = false;
 8001640:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 8001644:	f044 0420 	orr.w	r4, r4, #32
 8001648:	e7f1      	b.n	800162e <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 800164a:	f044 0408 	orr.w	r4, r4, #8
 800164e:	e7ee      	b.n	800162e <NRF24_setDataRate+0x16>
		result = true;
 8001650:	2001      	movs	r0, #1
 8001652:	e7f6      	b.n	8001642 <NRF24_setDataRate+0x2a>

08001654 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001654:	b510      	push	{r4, lr}
 8001656:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fe79 	bl	8001350 <NRF24_read_register>
 800165e:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001662:	b11c      	cbz	r4, 800166c <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8001664:	2c01      	cmp	r4, #1
 8001666:	d005      	beq.n	8001674 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8001668:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff feb1 	bl	80013d4 <NRF24_write_register>
}
 8001672:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 8001674:	f041 0108 	orr.w	r1, r1, #8
 8001678:	e7f8      	b.n	800166c <NRF24_setCRCLength+0x18>

0800167a <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800167a:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fe67 	bl	8001350 <NRF24_read_register>
 8001682:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fea4 	bl	80013d4 <NRF24_write_register>
}
 800168c:	bd08      	pop	{r3, pc}

0800168e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800168e:	b570      	push	{r4, r5, r6, lr}
 8001690:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 8001692:	f7ff ff03 	bl	800149c <NRF24_get_status>
 8001696:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2501      	movne	r5, #1
 80016a0:	2500      	moveq	r5, #0

	if (result)
 80016a2:	d00b      	beq.n	80016bc <NRF24_availablePipe+0x2e>
 80016a4:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80016a6:	b116      	cbz	r6, 80016ae <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80016a8:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80016ac:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	2007      	movs	r0, #7
 80016b2:	f7ff fe8f 	bl	80013d4 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80016b6:	f014 0f20 	tst.w	r4, #32
 80016ba:	d101      	bne.n	80016c0 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80016bc:	4628      	mov	r0, r5
 80016be:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80016c0:	2120      	movs	r1, #32
 80016c2:	2007      	movs	r0, #7
 80016c4:	f7ff fe86 	bl	80013d4 <NRF24_write_register>
 80016c8:	e7f8      	b.n	80016bc <NRF24_availablePipe+0x2e>

080016ca <NRF24_available>:
{
 80016ca:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff ffde 	bl	800168e <NRF24_availablePipe>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80016d4:	b538      	push	{r3, r4, r5, lr}
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fe38 	bl	8001350 <NRF24_read_register>
 80016e0:	f020 0101 	bic.w	r1, r0, #1
 80016e4:	f041 0102 	orr.w	r1, r1, #2
 80016e8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fe71 	bl	80013d4 <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 80016f2:	2096      	movs	r0, #150	; 0x96
 80016f4:	f7ff fdfc 	bl	80012f0 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 80016f8:	4629      	mov	r1, r5
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fea4 	bl	8001448 <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fe0f 	bl	8001324 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001706:	200f      	movs	r0, #15
 8001708:	f7ff fdf2 	bl	80012f0 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fe09 	bl	8001324 <NRF24_ce>
}
 8001712:	bd38      	pop	{r3, r4, r5, pc}

08001714 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	460f      	mov	r7, r1
 800171a:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 800171c:	f7ff febe 	bl	800149c <NRF24_get_status>
 8001720:	4604      	mov	r4, r0
	*tx_ok = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001726:	2170      	movs	r1, #112	; 0x70
 8001728:	2007      	movs	r0, #7
 800172a:	f7ff fe53 	bl	80013d4 <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 800172e:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8001732:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8001734:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8001738:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 800173a:	f3c4 1480 	ubfx	r4, r4, #6, #1
 800173e:	7034      	strb	r4, [r6, #0]
}
 8001740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001742 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001742:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001744:	2170      	movs	r1, #112	; 0x70
 8001746:	2007      	movs	r0, #7
 8001748:	f7ff fe44 	bl	80013d4 <NRF24_write_register>
}
 800174c:	bd08      	pop	{r3, pc}
	...

08001750 <NRF24_write>:
{
 8001750:	b530      	push	{r4, r5, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
	NRF24_resetStatus();
 8001758:	f7ff fff3 	bl	8001742 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800175c:	4629      	mov	r1, r5
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ffb8 	bl	80016d4 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 8001764:	f000 fc4a 	bl	8001ffc <HAL_GetTick>
 8001768:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800176a:	2201      	movs	r2, #1
 800176c:	f10d 0107 	add.w	r1, sp, #7
 8001770:	2008      	movs	r0, #8
 8001772:	f7ff fe0f 	bl	8001394 <NRF24_read_registerN>
		status = NRF24_get_status();
 8001776:	f7ff fe91 	bl	800149c <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800177a:	f010 0f30 	tst.w	r0, #48	; 0x30
 800177e:	d104      	bne.n	800178a <NRF24_write+0x3a>
 8001780:	f000 fc3c 	bl	8001ffc <HAL_GetTick>
 8001784:	1b00      	subs	r0, r0, r4
 8001786:	2809      	cmp	r0, #9
 8001788:	d9ef      	bls.n	800176a <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800178a:	4c0c      	ldr	r4, [pc, #48]	; (80017bc <NRF24_write+0x6c>)
 800178c:	4622      	mov	r2, r4
 800178e:	f10d 0105 	add.w	r1, sp, #5
 8001792:	f10d 0006 	add.w	r0, sp, #6
 8001796:	f7ff ffbd 	bl	8001714 <NRF24_whatHappened>
	retStatus = tx_ok;
 800179a:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 800179e:	7823      	ldrb	r3, [r4, #0]
 80017a0:	b933      	cbnz	r3, 80017b0 <NRF24_write+0x60>
	NRF24_available();
 80017a2:	f7ff ff92 	bl	80016ca <NRF24_available>
	NRF24_flush_tx();
 80017a6:	f7ff fe6d 	bl	8001484 <NRF24_flush_tx>
}
 80017aa:	4628      	mov	r0, r5
 80017ac:	b003      	add	sp, #12
 80017ae:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 80017b0:	f7ff fee6 	bl	8001580 <NRF24_getDynamicPayloadSize>
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <NRF24_write+0x70>)
 80017b6:	7018      	strb	r0, [r3, #0]
 80017b8:	e7f3      	b.n	80017a2 <NRF24_write+0x52>
 80017ba:	bf00      	nop
 80017bc:	20000248 	.word	0x20000248
 80017c0:	20000249 	.word	0x20000249

080017c4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80017c4:	b500      	push	{lr}
 80017c6:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fd95 	bl	80012f8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80017ce:	2350      	movs	r3, #80	; 0x50
 80017d0:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80017d4:	2373      	movs	r3, #115	; 0x73
 80017d6:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80017da:	2302      	movs	r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	a901      	add	r1, sp, #4
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <NRF24_ACTIVATE_cmd+0x30>)
 80017e2:	f003 fb17 	bl	8004e14 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fd86 	bl	80012f8 <NRF24_csn>
}
 80017ec:	b003      	add	sp, #12
 80017ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80017f2:	bf00      	nop
 80017f4:	20000254 	.word	0x20000254

080017f8 <NRF24_enableAckPayload>:
{
 80017f8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80017fa:	201d      	movs	r0, #29
 80017fc:	f7ff fda8 	bl	8001350 <NRF24_read_register>
 8001800:	f040 0106 	orr.w	r1, r0, #6
 8001804:	b2c9      	uxtb	r1, r1
 8001806:	201d      	movs	r0, #29
 8001808:	f7ff fde4 	bl	80013d4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800180c:	201d      	movs	r0, #29
 800180e:	f7ff fd9f 	bl	8001350 <NRF24_read_register>
 8001812:	b148      	cbz	r0, 8001828 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001814:	201c      	movs	r0, #28
 8001816:	f7ff fd9b 	bl	8001350 <NRF24_read_register>
 800181a:	f040 0103 	orr.w	r1, r0, #3
 800181e:	b2c9      	uxtb	r1, r1
 8001820:	201c      	movs	r0, #28
 8001822:	f7ff fdd7 	bl	80013d4 <NRF24_write_register>
}
 8001826:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8001828:	f7ff ffcc 	bl	80017c4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800182c:	201d      	movs	r0, #29
 800182e:	f7ff fd8f 	bl	8001350 <NRF24_read_register>
 8001832:	f040 0106 	orr.w	r1, r0, #6
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	201d      	movs	r0, #29
 800183a:	f7ff fdcb 	bl	80013d4 <NRF24_write_register>
 800183e:	e7e9      	b.n	8001814 <NRF24_enableAckPayload+0x1c>

08001840 <NRF24_begin>:
{
 8001840:	b082      	sub	sp, #8
 8001842:	b570      	push	{r4, r5, r6, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	4606      	mov	r6, r0
 8001848:	460d      	mov	r5, r1
 800184a:	4614      	mov	r4, r2
 800184c:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 800184e:	2264      	movs	r2, #100	; 0x64
 8001850:	4961      	ldr	r1, [pc, #388]	; (80019d8 <NRF24_begin+0x198>)
 8001852:	4862      	ldr	r0, [pc, #392]	; (80019dc <NRF24_begin+0x19c>)
 8001854:	f008 f98a 	bl	8009b6c <memcpy>
	nrf24_PORT = nrf24PORT;
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <NRF24_begin+0x1a0>)
 800185a:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <NRF24_begin+0x1a4>)
 800185e:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <NRF24_begin+0x1a8>)
 8001862:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fd47 	bl	80012f8 <NRF24_csn>
	NRF24_ce(0);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fd5a 	bl	8001324 <NRF24_ce>
	HAL_Delay(5);
 8001870:	2005      	movs	r0, #5
 8001872:	f000 fbc9 	bl	8002008 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001876:	2108      	movs	r1, #8
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fdab 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800187e:	213f      	movs	r1, #63	; 0x3f
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff fda7 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001886:	2103      	movs	r1, #3
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fda3 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800188e:	2103      	movs	r1, #3
 8001890:	4608      	mov	r0, r1
 8001892:	f7ff fd9f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001896:	2103      	movs	r1, #3
 8001898:	2004      	movs	r0, #4
 800189a:	f7ff fd9b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800189e:	2102      	movs	r1, #2
 80018a0:	2005      	movs	r0, #5
 80018a2:	f7ff fd97 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80018a6:	210f      	movs	r1, #15
 80018a8:	2006      	movs	r0, #6
 80018aa:	f7ff fd93 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80018ae:	210e      	movs	r1, #14
 80018b0:	2007      	movs	r0, #7
 80018b2:	f7ff fd8f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2008      	movs	r0, #8
 80018ba:	f7ff fd8b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80018be:	2100      	movs	r1, #0
 80018c0:	2009      	movs	r0, #9
 80018c2:	f7ff fd87 	bl	80013d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80018c6:	24e7      	movs	r4, #231	; 0xe7
 80018c8:	f88d 4004 	strb.w	r4, [sp, #4]
 80018cc:	f88d 4003 	strb.w	r4, [sp, #3]
 80018d0:	f88d 4002 	strb.w	r4, [sp, #2]
 80018d4:	f88d 4001 	strb.w	r4, [sp, #1]
 80018d8:	ad02      	add	r5, sp, #8
 80018da:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80018de:	2205      	movs	r2, #5
 80018e0:	4629      	mov	r1, r5
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff fd90 	bl	8001408 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80018e8:	23c2      	movs	r3, #194	; 0xc2
 80018ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80018ee:	f88d 3003 	strb.w	r3, [sp, #3]
 80018f2:	f88d 3002 	strb.w	r3, [sp, #2]
 80018f6:	f88d 3001 	strb.w	r3, [sp, #1]
 80018fa:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80018fe:	2205      	movs	r2, #5
 8001900:	4629      	mov	r1, r5
 8001902:	200b      	movs	r0, #11
 8001904:	f7ff fd80 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001908:	21c3      	movs	r1, #195	; 0xc3
 800190a:	200c      	movs	r0, #12
 800190c:	f7ff fd62 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001910:	21c4      	movs	r1, #196	; 0xc4
 8001912:	200d      	movs	r0, #13
 8001914:	f7ff fd5e 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001918:	21c5      	movs	r1, #197	; 0xc5
 800191a:	200e      	movs	r0, #14
 800191c:	f7ff fd5a 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001920:	21c6      	movs	r1, #198	; 0xc6
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fd56 	bl	80013d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001928:	f88d 4004 	strb.w	r4, [sp, #4]
 800192c:	f88d 4003 	strb.w	r4, [sp, #3]
 8001930:	f88d 4002 	strb.w	r4, [sp, #2]
 8001934:	f88d 4001 	strb.w	r4, [sp, #1]
 8001938:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800193c:	2205      	movs	r2, #5
 800193e:	4629      	mov	r1, r5
 8001940:	2010      	movs	r0, #16
 8001942:	f7ff fd61 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	2011      	movs	r0, #17
 800194a:	f7ff fd43 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800194e:	2100      	movs	r1, #0
 8001950:	2012      	movs	r0, #18
 8001952:	f7ff fd3f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	2013      	movs	r0, #19
 800195a:	f7ff fd3b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800195e:	2100      	movs	r1, #0
 8001960:	2014      	movs	r0, #20
 8001962:	f7ff fd37 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001966:	2100      	movs	r1, #0
 8001968:	2015      	movs	r0, #21
 800196a:	f7ff fd33 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	2016      	movs	r0, #22
 8001972:	f7ff fd2f 	bl	80013d4 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001976:	f7ff ff25 	bl	80017c4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	201c      	movs	r0, #28
 800197e:	f7ff fd29 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	201d      	movs	r0, #29
 8001986:	f7ff fd25 	bl	80013d4 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 800198a:	210f      	movs	r1, #15
 800198c:	4608      	mov	r0, r1
 800198e:	f7ff fdaf 	bl	80014f0 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8001992:	2002      	movs	r0, #2
 8001994:	f7ff fe21 	bl	80015da <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fe3d 	bl	8001618 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fe58 	bl	8001654 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80019a4:	f7ff fdff 	bl	80015a6 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80019a8:	2020      	movs	r0, #32
 80019aa:	f7ff fdb5 	bl	8001518 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fe07 	bl	80015c2 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80019b4:	f7ff ff20 	bl	80017f8 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80019b8:	f7ff fec3 	bl	8001742 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80019bc:	204c      	movs	r0, #76	; 0x4c
 80019be:	f7ff fda1 	bl	8001504 <NRF24_setChannel>
	NRF24_flush_tx();
 80019c2:	f7ff fd5f 	bl	8001484 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019c6:	f7ff fd63 	bl	8001490 <NRF24_flush_rx>
	NRF24_powerDown();
 80019ca:	f7ff fe56 	bl	800167a <NRF24_powerDown>
}
 80019ce:	b002      	add	sp, #8
 80019d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80019d4:	b002      	add	sp, #8
 80019d6:	4770      	bx	lr
 80019d8:	2000478c 	.word	0x2000478c
 80019dc:	20000254 	.word	0x20000254
 80019e0:	20000250 	.word	0x20000250
 80019e4:	2000024c 	.word	0x2000024c
 80019e8:	2000024a 	.word	0x2000024a

080019ec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019ec:	b084      	sub	sp, #16
 80019ee:	b508      	push	{r3, lr}
 80019f0:	f10d 0c08 	add.w	ip, sp, #8
 80019f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	4661      	mov	r1, ip
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <nrf24_DebugUART_Init+0x20>)
 80019fe:	f008 f8b5 	bl	8009b6c <memcpy>
}
 8001a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200002b8 	.word	0x200002b8

08001a10 <initLCD>:


//Touch screen variables
TS_StateTypeDef ts;
bool cleared = 0;
void initLCD() {
 8001a10:	b500      	push	{lr}
 8001a12:	b083      	sub	sp, #12

	BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8001a14:	f005 faea 	bl	8006fec <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <initLCD+0x64>)
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	9b01      	ldr	r3, [sp, #4]

	BSP_TS_Init(480, 272);
 8001a2c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a30:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a34:	f005 fb1a 	bl	800706c <BSP_TS_Init>

	BSP_LCD_Init();
 8001a38:	f005 f976 	bl	8006d28 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001a3c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001a40:	2000      	movs	r0, #0
 8001a42:	f004 fd71 	bl	8006528 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8001a46:	f005 f8a1 	bl	8006b8c <BSP_LCD_DisplayOn>

	BSP_LCD_SelectLayer(0);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f004 fdac 	bl	80065a8 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001a50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a54:	f004 fdd6 	bl	8006604 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001a58:	4807      	ldr	r0, [pc, #28]	; (8001a78 <initLCD+0x68>)
 8001a5a:	f004 fdab 	bl	80065b4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 40);
 8001a5e:	2328      	movs	r3, #40	; 0x28
 8001a60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a64:	2100      	movs	r1, #0
 8001a66:	4608      	mov	r0, r1
 8001a68:	f004 ffdc 	bl	8006a24 <BSP_LCD_FillRect>



}
 8001a6c:	b003      	add	sp, #12
 8001a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	ff000080 	.word	0xff000080

08001a7c <n_tu>:
}

/** Number on countu **/

int n_tu(int number, int count) {
	int result = 1;
 8001a7c:	2301      	movs	r3, #1
	while (count-- > 0)
 8001a7e:	e002      	b.n	8001a86 <n_tu+0xa>
		result *= number;
 8001a80:	fb00 f303 	mul.w	r3, r0, r3
	while (count-- > 0)
 8001a84:	4611      	mov	r1, r2
 8001a86:	1e4a      	subs	r2, r1, #1
 8001a88:	2900      	cmp	r1, #0
 8001a8a:	dcf9      	bgt.n	8001a80 <n_tu+0x4>

	return result;
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4770      	bx	lr

08001a90 <float_to_string>:
void float_to_string(float f, char r[]) {
 8001a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a94:	ed2d 8b02 	vpush	{d8}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	eef0 8a40 	vmov.f32	s17, s0
 8001a9e:	9003      	str	r0, [sp, #12]
	if (f < 0) {
 8001aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d40e      	bmi.n	8001ac8 <float_to_string+0x38>
	sign = -1;   // -1 == positive number
 8001aaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001aae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	number = f;
 8001ab2:	ee18 0a90 	vmov	r0, s17
 8001ab6:	f7ff fa7d 	bl	8000fb4 <__aeabi_f2lz>
	number2 = f;
 8001aba:	eeb0 8a68 	vmov.f32	s16, s17
	length2 = 0; // Size of tenth
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	4699      	mov	r9, r3
	while ((number2 - (float) number) != 0.0
 8001ac6:	e019      	b.n	8001afc <float_to_string+0x6c>
		f *= -1;
 8001ac8:	eef1 8a40 	vneg.f32	s17, s0
		sign = '-';
 8001acc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8001ad0:	f04f 0b00 	mov.w	fp, #0
 8001ad4:	e7ed      	b.n	8001ab2 <float_to_string+0x22>
		number2 = f * (n_tu(10.0, length2 + 1));
 8001ad6:	f108 0101 	add.w	r1, r8, #1
 8001ada:	200a      	movs	r0, #10
 8001adc:	f7ff ffce 	bl	8001a7c <n_tu>
 8001ae0:	ee07 0a90 	vmov	s15, r0
 8001ae4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ae8:	ee28 8a28 	vmul.f32	s16, s16, s17
		number = number2;
 8001aec:	ee18 0a10 	vmov	r0, s16
 8001af0:	f7ff fa60 	bl	8000fb4 <__aeabi_f2lz>
		length2++;
 8001af4:	f118 0801 	adds.w	r8, r8, #1
 8001af8:	f149 0900 	adc.w	r9, r9, #0
	while ((number2 - (float) number) != 0.0
 8001afc:	f7ff f9b4 	bl	8000e68 <__aeabi_l2f>
 8001b00:	ee07 0a90 	vmov	s15, r0
 8001b04:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d004      	beq.n	8001b1c <float_to_string+0x8c>
			&& !((number2 - (float) number) < 0.0)) {
 8001b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d5dc      	bpl.n	8001ad6 <float_to_string+0x46>
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b20:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	bfd4      	ite	le
 8001b2a:	2401      	movle	r4, #1
 8001b2c:	2400      	movgt	r4, #0
 8001b2e:	b2e4      	uxtb	r4, r4
 8001b30:	2500      	movs	r5, #0
 8001b32:	e006      	b.n	8001b42 <float_to_string+0xb2>
		f /= 10;
 8001b34:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001b38:	eec8 8aa7 	vdiv.f32	s17, s17, s15
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b3c:	3401      	adds	r4, #1
 8001b3e:	f145 0500 	adc.w	r5, r5, #0
 8001b42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b46:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dcf1      	bgt.n	8001b34 <float_to_string+0xa4>
	length = length + 1 + length2;
 8001b50:	1c66      	adds	r6, r4, #1
 8001b52:	f145 0700 	adc.w	r7, r5, #0
 8001b56:	eb18 0806 	adds.w	r8, r8, r6
 8001b5a:	eb49 0907 	adc.w	r9, r9, r7
	number = number2;
 8001b5e:	ee18 0a10 	vmov	r0, s16
 8001b62:	f7ff fa27 	bl	8000fb4 <__aeabi_f2lz>
 8001b66:	e9cd 0100 	strd	r0, r1, [sp]
	if (sign == '-') {
 8001b6a:	f1bb 0f00 	cmp.w	fp, #0
 8001b6e:	bf08      	it	eq
 8001b70:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001b74:	d002      	beq.n	8001b7c <float_to_string+0xec>
	for (i = length; i >= 0; i--) {
 8001b76:	4646      	mov	r6, r8
 8001b78:	464f      	mov	r7, r9
 8001b7a:	e026      	b.n	8001bca <float_to_string+0x13a>
		length++;
 8001b7c:	f118 0801 	adds.w	r8, r8, #1
 8001b80:	f149 0900 	adc.w	r9, r9, #0
		position++;
 8001b84:	4634      	mov	r4, r6
 8001b86:	463d      	mov	r5, r7
 8001b88:	e7f5      	b.n	8001b76 <float_to_string+0xe6>
			r[i] = '\0';
 8001b8a:	9b03      	ldr	r3, [sp, #12]
 8001b8c:	4433      	add	r3, r6
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e016      	b.n	8001bc2 <float_to_string+0x132>
			r[i] = '.';
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	4433      	add	r3, r6
 8001b98:	222e      	movs	r2, #46	; 0x2e
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e011      	b.n	8001bc2 <float_to_string+0x132>
			r[i] = (number % 10) + '0';
 8001b9e:	220a      	movs	r2, #10
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001ba6:	f7ff f99d 	bl	8000ee4 <__aeabi_ldivmod>
 8001baa:	9b03      	ldr	r3, [sp, #12]
 8001bac:	4433      	add	r3, r6
 8001bae:	3230      	adds	r2, #48	; 0x30
 8001bb0:	701a      	strb	r2, [r3, #0]
			number /= 10;
 8001bb2:	220a      	movs	r2, #10
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bba:	f7ff f993 	bl	8000ee4 <__aeabi_ldivmod>
 8001bbe:	e9cd 0100 	strd	r0, r1, [sp]
	for (i = length; i >= 0; i--) {
 8001bc2:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8001bc6:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	f177 0300 	sbcs.w	r3, r7, #0
 8001bd0:	db19      	blt.n	8001c06 <float_to_string+0x176>
		if (i == (length))
 8001bd2:	45b9      	cmp	r9, r7
 8001bd4:	bf08      	it	eq
 8001bd6:	45b0      	cmpeq	r8, r6
 8001bd8:	d0d7      	beq.n	8001b8a <float_to_string+0xfa>
		else if (i == (position))
 8001bda:	42af      	cmp	r7, r5
 8001bdc:	bf08      	it	eq
 8001bde:	42a6      	cmpeq	r6, r4
 8001be0:	d0d8      	beq.n	8001b94 <float_to_string+0x104>
		else if (sign == '-' && i == 0)
 8001be2:	f1bb 0f00 	cmp.w	fp, #0
 8001be6:	bf06      	itte	eq
 8001be8:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	ea56 0207 	orrs.w	r2, r6, r7
 8001bf4:	bf18      	it	ne
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0d0      	beq.n	8001b9e <float_to_string+0x10e>
			r[i] = '-';
 8001bfc:	9b03      	ldr	r3, [sp, #12]
 8001bfe:	4433      	add	r3, r6
 8001c00:	222d      	movs	r2, #45	; 0x2d
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e7dd      	b.n	8001bc2 <float_to_string+0x132>
}
 8001c06:	b005      	add	sp, #20
 8001c08:	ecbd 8b02 	vpop	{d8}
 8001c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c10 <drawMainScreen>:
void drawMainScreen(struct GPS_str GPS, struct IMU_str IMU, struct Misc_str Misc) {
 8001c10:	b084      	sub	sp, #16
 8001c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c14:	ac06      	add	r4, sp, #24
 8001c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001c1a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c1e:	f004 fcd5 	bl	80065cc <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c26:	f004 fcc5 	bl	80065b4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&FontAvenir12);
 8001c2a:	48ad      	ldr	r0, [pc, #692]	; (8001ee0 <drawMainScreen+0x2d0>)
 8001c2c:	f004 fcdc 	bl	80065e8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30, 50, (uint8_t *) "GPS", LEFT_MODE);
 8001c30:	2303      	movs	r3, #3
 8001c32:	4aac      	ldr	r2, [pc, #688]	; (8001ee4 <drawMainScreen+0x2d4>)
 8001c34:	2132      	movs	r1, #50	; 0x32
 8001c36:	201e      	movs	r0, #30
 8001c38:	f004 fdf8 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 80, (uint8_t *) "LONG.", LEFT_MODE);
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	4aaa      	ldr	r2, [pc, #680]	; (8001ee8 <drawMainScreen+0x2d8>)
 8001c40:	2150      	movs	r1, #80	; 0x50
 8001c42:	200e      	movs	r0, #14
 8001c44:	f004 fdf2 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 100, (uint8_t *) "LAT.", LEFT_MODE);
 8001c48:	2303      	movs	r3, #3
 8001c4a:	4aa8      	ldr	r2, [pc, #672]	; (8001eec <drawMainScreen+0x2dc>)
 8001c4c:	2164      	movs	r1, #100	; 0x64
 8001c4e:	200e      	movs	r0, #14
 8001c50:	f004 fdec 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 120, (uint8_t *) "SPEED.", LEFT_MODE);
 8001c54:	2303      	movs	r3, #3
 8001c56:	4aa6      	ldr	r2, [pc, #664]	; (8001ef0 <drawMainScreen+0x2e0>)
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	200e      	movs	r0, #14
 8001c5c:	f004 fde6 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 140, (uint8_t *) "ALT.", LEFT_MODE);
 8001c60:	2303      	movs	r3, #3
 8001c62:	4aa4      	ldr	r2, [pc, #656]	; (8001ef4 <drawMainScreen+0x2e4>)
 8001c64:	218c      	movs	r1, #140	; 0x8c
 8001c66:	200e      	movs	r0, #14
 8001c68:	f004 fde0 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 240, (uint8_t *) "THRT", LEFT_MODE);
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	4aa2      	ldr	r2, [pc, #648]	; (8001ef8 <drawMainScreen+0x2e8>)
 8001c70:	21f0      	movs	r1, #240	; 0xf0
 8001c72:	200e      	movs	r0, #14
 8001c74:	f004 fdda 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(100, 240, (uint8_t *) throttle_str, LEFT_MODE);
 8001c78:	2303      	movs	r3, #3
 8001c7a:	4aa0      	ldr	r2, [pc, #640]	; (8001efc <drawMainScreen+0x2ec>)
 8001c7c:	21f0      	movs	r1, #240	; 0xf0
 8001c7e:	2064      	movs	r0, #100	; 0x64
 8001c80:	f004 fdd4 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Longitude, long_str);
 8001c84:	4c9e      	ldr	r4, [pc, #632]	; (8001f00 <drawMainScreen+0x2f0>)
 8001c86:	4620      	mov	r0, r4
 8001c88:	ed9d 0a08 	vldr	s0, [sp, #32]
 8001c8c:	f7ff ff00 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 80, (uint8_t *) long_str, LEFT_MODE);
 8001c90:	2303      	movs	r3, #3
 8001c92:	4622      	mov	r2, r4
 8001c94:	2150      	movs	r1, #80	; 0x50
 8001c96:	2064      	movs	r0, #100	; 0x64
 8001c98:	f004 fdc8 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Latitude, latt_str);
 8001c9c:	4c99      	ldr	r4, [pc, #612]	; (8001f04 <drawMainScreen+0x2f4>)
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8001ca4:	f7ff fef4 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 100, (uint8_t *) latt_str, LEFT_MODE);
 8001ca8:	2303      	movs	r3, #3
 8001caa:	4622      	mov	r2, r4
 8001cac:	2164      	movs	r1, #100	; 0x64
 8001cae:	4608      	mov	r0, r1
 8001cb0:	f004 fdbc 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Speed, speed_str);
 8001cb4:	4c94      	ldr	r4, [pc, #592]	; (8001f08 <drawMainScreen+0x2f8>)
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8001cbc:	f7ff fee8 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 120, (uint8_t *) speed_str, LEFT_MODE);
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	2064      	movs	r0, #100	; 0x64
 8001cc8:	f004 fdb0 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Altitude, alt_str);
 8001ccc:	4c8f      	ldr	r4, [pc, #572]	; (8001f0c <drawMainScreen+0x2fc>)
 8001cce:	4620      	mov	r0, r4
 8001cd0:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8001cd4:	f7ff fedc 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(100, 140, (uint8_t *) alt_str, LEFT_MODE);
 8001cd8:	2303      	movs	r3, #3
 8001cda:	4622      	mov	r2, r4
 8001cdc:	218c      	movs	r1, #140	; 0x8c
 8001cde:	2064      	movs	r0, #100	; 0x64
 8001ce0:	f004 fda4 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8001ce4:	488a      	ldr	r0, [pc, #552]	; (8001f10 <drawMainScreen+0x300>)
 8001ce6:	f004 fc71 	bl	80065cc <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(80, 10, (uint8_t *) "QUAD", RIGHT_MODE);
 8001cea:	2302      	movs	r3, #2
 8001cec:	4a89      	ldr	r2, [pc, #548]	; (8001f14 <drawMainScreen+0x304>)
 8001cee:	210a      	movs	r1, #10
 8001cf0:	2050      	movs	r0, #80	; 0x50
 8001cf2:	f004 fd9b 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 10, (uint8_t *) "%", RIGHT_MODE);
 8001cf6:	4c88      	ldr	r4, [pc, #544]	; (8001f18 <drawMainScreen+0x308>)
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	201e      	movs	r0, #30
 8001d00:	f004 fd94 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 10, (uint8_t *) "TX", LEFT_MODE);
 8001d04:	2303      	movs	r3, #3
 8001d06:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <drawMainScreen+0x30c>)
 8001d08:	210a      	movs	r1, #10
 8001d0a:	200e      	movs	r0, #14
 8001d0c:	f004 fd8e 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(70, 10, (uint8_t *) "%", LEFT_MODE);
 8001d10:	2303      	movs	r3, #3
 8001d12:	4622      	mov	r2, r4
 8001d14:	210a      	movs	r1, #10
 8001d16:	2046      	movs	r0, #70	; 0x46
 8001d18:	f004 fd88 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.batteryLevel, quad_battery_str);
 8001d1c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001d20:	ee00 3a10 	vmov	s0, r3
 8001d24:	4c7e      	ldr	r4, [pc, #504]	; (8001f20 <drawMainScreen+0x310>)
 8001d26:	4620      	mov	r0, r4
 8001d28:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001d2c:	f7ff feb0 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(45, 10, (uint8_t *) quad_battery_str, RIGHT_MODE);
 8001d30:	2302      	movs	r3, #2
 8001d32:	4622      	mov	r2, r4
 8001d34:	210a      	movs	r1, #10
 8001d36:	202d      	movs	r0, #45	; 0x2d
 8001d38:	f004 fd78 	bl	800682c <BSP_LCD_DisplayStringAt>
	itoa(69, tx_battery_str, 10);
 8001d3c:	4c79      	ldr	r4, [pc, #484]	; (8001f24 <drawMainScreen+0x314>)
 8001d3e:	220a      	movs	r2, #10
 8001d40:	4621      	mov	r1, r4
 8001d42:	2045      	movs	r0, #69	; 0x45
 8001d44:	f007 ff10 	bl	8009b68 <itoa>
	BSP_LCD_DisplayStringAt(44, 10, (uint8_t *) tx_battery_str, LEFT_MODE);
 8001d48:	2303      	movs	r3, #3
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	210a      	movs	r1, #10
 8001d4e:	202c      	movs	r0, #44	; 0x2c
 8001d50:	f004 fd6c 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(140, 10, (uint8_t *) "10:43", LEFT_MODE);
 8001d54:	2303      	movs	r3, #3
 8001d56:	4a74      	ldr	r2, [pc, #464]	; (8001f28 <drawMainScreen+0x318>)
 8001d58:	210a      	movs	r1, #10
 8001d5a:	208c      	movs	r0, #140	; 0x8c
 8001d5c:	f004 fd66 	bl	800682c <BSP_LCD_DisplayStringAt>
	if (Misc.connection) {
 8001d60:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8088 	beq.w	8001e7a <drawMainScreen+0x26a>
		BSP_LCD_DisplayStringAt(220, 10, (uint8_t *) "CON", LEFT_MODE);
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	4a6f      	ldr	r2, [pc, #444]	; (8001f2c <drawMainScreen+0x31c>)
 8001d6e:	210a      	movs	r1, #10
 8001d70:	20dc      	movs	r0, #220	; 0xdc
 8001d72:	f004 fd5b 	bl	800682c <BSP_LCD_DisplayStringAt>
	if (Misc.airmode) {
 8001d76:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8084 	beq.w	8001e88 <drawMainScreen+0x278>
		BSP_LCD_DisplayStringAt(280, 10, (uint8_t *) "AIR", LEFT_MODE);
 8001d80:	2303      	movs	r3, #3
 8001d82:	4a6b      	ldr	r2, [pc, #428]	; (8001f30 <drawMainScreen+0x320>)
 8001d84:	210a      	movs	r1, #10
 8001d86:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001d8a:	f004 fd4f 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawCircle(400, 120, 40);
 8001d8e:	2228      	movs	r2, #40	; 0x28
 8001d90:	2178      	movs	r1, #120	; 0x78
 8001d92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d96:	f004 fdb1 	bl	80068fc <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8001d9a:	4866      	ldr	r0, [pc, #408]	; (8001f34 <drawMainScreen+0x324>)
 8001d9c:	f004 fc0a 	bl	80065b4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 39);
 8001da0:	2227      	movs	r2, #39	; 0x27
 8001da2:	2178      	movs	r1, #120	; 0x78
 8001da4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001da8:	f004 fe84 	bl	8006ab4 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db0:	f004 fc00 	bl	80065b4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 5);
 8001db4:	2205      	movs	r2, #5
 8001db6:	2178      	movs	r1, #120	; 0x78
 8001db8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001dbc:	f004 fe7a 	bl	8006ab4 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001dc0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001dc4:	f004 fc02 	bl	80065cc <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(330, 200, (uint8_t *) "ROLL", LEFT_MODE);
 8001dc8:	2303      	movs	r3, #3
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <drawMainScreen+0x328>)
 8001dcc:	21c8      	movs	r1, #200	; 0xc8
 8001dce:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001dd2:	f004 fd2b 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 220, (uint8_t *) "PITCH", LEFT_MODE);
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <drawMainScreen+0x32c>)
 8001dda:	21dc      	movs	r1, #220	; 0xdc
 8001ddc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001de0:	f004 fd24 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 240, (uint8_t *) "YAW", LEFT_MODE);
 8001de4:	2303      	movs	r3, #3
 8001de6:	4a56      	ldr	r2, [pc, #344]	; (8001f40 <drawMainScreen+0x330>)
 8001de8:	21f0      	movs	r1, #240	; 0xf0
 8001dea:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001dee:	f004 fd1d 	bl	800682c <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.roll, roll_str);
 8001df2:	4f54      	ldr	r7, [pc, #336]	; (8001f44 <drawMainScreen+0x334>)
 8001df4:	4638      	mov	r0, r7
 8001df6:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 8001dfa:	f7ff fe49 	bl	8001a90 <float_to_string>
	float_to_string(IMU.pitch, pitch_str);
 8001dfe:	4e52      	ldr	r6, [pc, #328]	; (8001f48 <drawMainScreen+0x338>)
 8001e00:	4630      	mov	r0, r6
 8001e02:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8001e06:	f7ff fe43 	bl	8001a90 <float_to_string>
	float_to_string(IMU.yaw, yaw_str);
 8001e0a:	4d50      	ldr	r5, [pc, #320]	; (8001f4c <drawMainScreen+0x33c>)
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8001e12:	f7ff fe3d 	bl	8001a90 <float_to_string>
	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) "      ", RIGHT_MODE);
 8001e16:	4c4e      	ldr	r4, [pc, #312]	; (8001f50 <drawMainScreen+0x340>)
 8001e18:	2302      	movs	r3, #2
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	21c8      	movs	r1, #200	; 0xc8
 8001e1e:	2014      	movs	r0, #20
 8001e20:	f004 fd04 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) "      ", RIGHT_MODE);
 8001e24:	2302      	movs	r3, #2
 8001e26:	4622      	mov	r2, r4
 8001e28:	21dc      	movs	r1, #220	; 0xdc
 8001e2a:	2014      	movs	r0, #20
 8001e2c:	f004 fcfe 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 240, (uint8_t *) "      ", RIGHT_MODE);
 8001e30:	2302      	movs	r3, #2
 8001e32:	4622      	mov	r2, r4
 8001e34:	21f0      	movs	r1, #240	; 0xf0
 8001e36:	2014      	movs	r0, #20
 8001e38:	f004 fcf8 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) roll_str, RIGHT_MODE);
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	463a      	mov	r2, r7
 8001e40:	21c8      	movs	r1, #200	; 0xc8
 8001e42:	2014      	movs	r0, #20
 8001e44:	f004 fcf2 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) pitch_str, RIGHT_MODE);
 8001e48:	2302      	movs	r3, #2
 8001e4a:	4632      	mov	r2, r6
 8001e4c:	21dc      	movs	r1, #220	; 0xdc
 8001e4e:	2014      	movs	r0, #20
 8001e50:	f004 fcec 	bl	800682c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 240, (uint8_t *) yaw_str, RIGHT_MODE);
 8001e54:	2302      	movs	r3, #2
 8001e56:	462a      	mov	r2, r5
 8001e58:	21f0      	movs	r1, #240	; 0xf0
 8001e5a:	2014      	movs	r0, #20
 8001e5c:	f004 fce6 	bl	800682c <BSP_LCD_DisplayStringAt>
	if (Misc.kill) {
 8001e60:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001e64:	b9c3      	cbnz	r3, 8001e98 <drawMainScreen+0x288>
		if (!cleared) {
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <drawMainScreen+0x344>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b34b      	cbz	r3, 8001ec0 <drawMainScreen+0x2b0>
		cleared = 1;
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <drawMainScreen+0x344>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
}
 8001e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e76:	b004      	add	sp, #16
 8001e78:	4770      	bx	lr
		BSP_LCD_DisplayStringAt(220, 10, (uint8_t *) "    ", LEFT_MODE);
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	4a36      	ldr	r2, [pc, #216]	; (8001f58 <drawMainScreen+0x348>)
 8001e7e:	210a      	movs	r1, #10
 8001e80:	20dc      	movs	r0, #220	; 0xdc
 8001e82:	f004 fcd3 	bl	800682c <BSP_LCD_DisplayStringAt>
 8001e86:	e776      	b.n	8001d76 <drawMainScreen+0x166>
		BSP_LCD_DisplayStringAt(280, 10, (uint8_t *) "    ", LEFT_MODE);
 8001e88:	2303      	movs	r3, #3
 8001e8a:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <drawMainScreen+0x348>)
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001e92:	f004 fccb 	bl	800682c <BSP_LCD_DisplayStringAt>
 8001e96:	e77a      	b.n	8001d8e <drawMainScreen+0x17e>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9c:	f004 fb96 	bl	80065cc <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ea0:	482e      	ldr	r0, [pc, #184]	; (8001f5c <drawMainScreen+0x34c>)
 8001ea2:	f004 fb87 	bl	80065b4 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font20);
 8001ea6:	482e      	ldr	r0, [pc, #184]	; (8001f60 <drawMainScreen+0x350>)
 8001ea8:	f004 fb9e 	bl	80065e8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 80,
 8001eac:	2301      	movs	r3, #1
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <drawMainScreen+0x354>)
 8001eb0:	2150      	movs	r1, #80	; 0x50
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f004 fcba 	bl	800682c <BSP_LCD_DisplayStringAt>
		cleared = 0;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <drawMainScreen+0x344>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e7d8      	b.n	8001e72 <drawMainScreen+0x262>
			BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001ec0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ec4:	f004 fb9e 	bl	8006604 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <drawMainScreen+0x300>)
 8001eca:	f004 fb73 	bl	80065b4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0, 480, 40);
 8001ece:	2328      	movs	r3, #40	; 0x28
 8001ed0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	f004 fda4 	bl	8006a24 <BSP_LCD_FillRect>
 8001edc:	e7c6      	b.n	8001e6c <drawMainScreen+0x25c>
 8001ede:	bf00      	nop
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	0800d6bc 	.word	0x0800d6bc
 8001ee8:	0800d6c0 	.word	0x0800d6c0
 8001eec:	0800d6c8 	.word	0x0800d6c8
 8001ef0:	0800d6d0 	.word	0x0800d6d0
 8001ef4:	0800d6d8 	.word	0x0800d6d8
 8001ef8:	0800d6e0 	.word	0x0800d6e0
 8001efc:	20004348 	.word	0x20004348
 8001f00:	200043e8 	.word	0x200043e8
 8001f04:	200042ac 	.word	0x200042ac
 8001f08:	20004358 	.word	0x20004358
 8001f0c:	200043b8 	.word	0x200043b8
 8001f10:	ff000080 	.word	0xff000080
 8001f14:	0800d6e8 	.word	0x0800d6e8
 8001f18:	0800d6f0 	.word	0x0800d6f0
 8001f1c:	0800d6f4 	.word	0x0800d6f4
 8001f20:	20004388 	.word	0x20004388
 8001f24:	2000427c 	.word	0x2000427c
 8001f28:	0800d6f8 	.word	0x0800d6f8
 8001f2c:	0800d700 	.word	0x0800d700
 8001f30:	0800d70c 	.word	0x0800d70c
 8001f34:	ff800000 	.word	0xff800000
 8001f38:	0800d710 	.word	0x0800d710
 8001f3c:	0800d718 	.word	0x0800d718
 8001f40:	0800d720 	.word	0x0800d720
 8001f44:	2000434c 	.word	0x2000434c
 8001f48:	2000431c 	.word	0x2000431c
 8001f4c:	20004340 	.word	0x20004340
 8001f50:	0800d724 	.word	0x0800d724
 8001f54:	20000339 	.word	0x20000339
 8001f58:	0800d704 	.word	0x0800d704
 8001f5c:	ffff0000 	.word	0xffff0000
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	0800d72c 	.word	0x0800d72c

08001f68 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <DWT_Init+0x20>)
 8001f6a:	68d3      	ldr	r3, [r2, #12]
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f70:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <DWT_Init+0x24>)
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <DWT_Init+0x28>)
 8001f76:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

}
 8001f86:	4770      	bx	lr
 8001f88:	e000edf0 	.word	0xe000edf0
 8001f8c:	e0001000 	.word	0xe0001000
 8001f90:	c5acce55 	.word	0xc5acce55

08001f94 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <DWT_Delay+0x20>)
 8001f96:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <DWT_Delay+0x24>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <DWT_Delay+0x28>)
 8001f9e:	fba1 1303 	umull	r1, r3, r1, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <DWT_Delay+0x20>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	4283      	cmp	r3, r0
 8001fb0:	d3fa      	bcc.n	8001fa8 <DWT_Delay+0x14>
}
 8001fb2:	4770      	bx	lr
 8001fb4:	e0001000 	.word	0xe0001000
 8001fb8:	20000058 	.word	0x20000058
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_Init+0x20>)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 fc07 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f007 fbd6 	bl	8009784 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f007 fbb4 	bl	8009744 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001fdc:	2000      	movs	r0, #0
 8001fde:	bd08      	pop	{r3, pc}
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_IncTick+0x10>)
 8001fe6:	6811      	ldr	r1, [r2, #0]
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_IncTick+0x14>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	440b      	add	r3, r1
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200043f4 	.word	0x200043f4
 8001ff8:	20000000 	.word	0x20000000

08001ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ffc:	4b01      	ldr	r3, [pc, #4]	; (8002004 <HAL_GetTick+0x8>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200043f4 	.word	0x200043f4

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fff6 	bl	8001ffc <HAL_GetTick>
 8002010:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002016:	d002      	beq.n	800201e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_Delay+0x24>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201e:	f7ff ffed 	bl	8001ffc <HAL_GetTick>
 8002022:	1b40      	subs	r0, r0, r5
 8002024:	42a0      	cmp	r0, r4
 8002026:	d3fa      	bcc.n	800201e <HAL_Delay+0x16>
  {
  }
}
 8002028:	bd38      	pop	{r3, r4, r5, pc}
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <ADC_Init+0x12c>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002038:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	6841      	ldr	r1, [r0, #4]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800204c:	6802      	ldr	r2, [r0, #0]
 800204e:	6853      	ldr	r3, [r2, #4]
 8002050:	6901      	ldr	r1, [r0, #16]
 8002052:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002056:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	6853      	ldr	r3, [r2, #4]
 800205c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002060:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	6853      	ldr	r3, [r2, #4]
 8002066:	6881      	ldr	r1, [r0, #8]
 8002068:	430b      	orrs	r3, r1
 800206a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	6893      	ldr	r3, [r2, #8]
 8002070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002074:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	6893      	ldr	r3, [r2, #8]
 800207a:	68c1      	ldr	r1, [r0, #12]
 800207c:	430b      	orrs	r3, r1
 800207e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002080:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <ADC_Init+0x130>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d04b      	beq.n	8002120 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	6893      	ldr	r3, [r2, #8]
 800208c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002090:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002092:	6802      	ldr	r2, [r0, #0]
 8002094:	6893      	ldr	r3, [r2, #8]
 8002096:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002098:	430b      	orrs	r3, r1
 800209a:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	6893      	ldr	r3, [r2, #8]
 80020a0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80020a4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020a6:	6802      	ldr	r2, [r0, #0]
 80020a8:	6893      	ldr	r3, [r2, #8]
 80020aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	6893      	ldr	r3, [r2, #8]
 80020b4:	f023 0302 	bic.w	r3, r3, #2
 80020b8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	6981      	ldr	r1, [r0, #24]
 80020c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80020c4:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d133      	bne.n	8002136 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ce:	6802      	ldr	r2, [r0, #0]
 80020d0:	6853      	ldr	r3, [r2, #4]
 80020d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80020e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e2:	6801      	ldr	r1, [r0, #0]
 80020e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80020e6:	69c2      	ldr	r2, [r0, #28]
 80020e8:	3a01      	subs	r2, #1
 80020ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80020ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020f0:	6802      	ldr	r2, [r0, #0]
 80020f2:	6893      	ldr	r3, [r2, #8]
 80020f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020f8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020fa:	6802      	ldr	r2, [r0, #0]
 80020fc:	6893      	ldr	r3, [r2, #8]
 80020fe:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8002102:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002106:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	6893      	ldr	r3, [r2, #8]
 800210c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002110:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002112:	6802      	ldr	r2, [r0, #0]
 8002114:	6893      	ldr	r3, [r2, #8]
 8002116:	6941      	ldr	r1, [r0, #20]
 8002118:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800211c:	6093      	str	r3, [r2, #8]
}
 800211e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002120:	6802      	ldr	r2, [r0, #0]
 8002122:	6893      	ldr	r3, [r2, #8]
 8002124:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002128:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212a:	6802      	ldr	r2, [r0, #0]
 800212c:	6893      	ldr	r3, [r2, #8]
 800212e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	e7bc      	b.n	80020b0 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	6853      	ldr	r3, [r2, #4]
 800213a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800213e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002140:	6802      	ldr	r2, [r0, #0]
 8002142:	6853      	ldr	r3, [r2, #4]
 8002144:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002148:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800214a:	6801      	ldr	r1, [r0, #0]
 800214c:	684b      	ldr	r3, [r1, #4]
 800214e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002150:	3a01      	subs	r2, #1
 8002152:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002156:	604b      	str	r3, [r1, #4]
 8002158:	e7be      	b.n	80020d8 <ADC_Init+0xa8>
 800215a:	bf00      	nop
 800215c:	40012300 	.word	0x40012300
 8002160:	0f000001 	.word	0x0f000001

08002164 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002164:	b328      	cbz	r0, 80021b2 <HAL_ADC_Init+0x4e>
{
 8002166:	b510      	push	{r4, lr}
 8002168:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800216a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800216c:	b143      	cbz	r3, 8002180 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002170:	f013 0f10 	tst.w	r3, #16
 8002174:	d00b      	beq.n	800218e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002176:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002178:	2300      	movs	r3, #0
 800217a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800217e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002180:	f006 fb36 	bl	80087f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002184:	2300      	movs	r3, #0
 8002186:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002188:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800218c:	e7ef      	b.n	800216e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_ADC_Init+0x54>)
 8002192:	4013      	ands	r3, r2
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff ff48 	bl	8002030 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	2000      	movs	r0, #0
 80021a2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6423      	str	r3, [r4, #64]	; 0x40
 80021b0:	e7e2      	b.n	8002178 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	ffffeefd 	.word	0xffffeefd

080021bc <HAL_ADC_Start>:
{
 80021bc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80021c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d073      	beq.n	80022b2 <HAL_ADC_Start+0xf6>
 80021ca:	2301      	movs	r3, #1
 80021cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021d0:	6803      	ldr	r3, [r0, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	f012 0f01 	tst.w	r2, #1
 80021d8:	d113      	bne.n	8002202 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_ADC_Start+0x10c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a39      	ldr	r2, [pc, #228]	; (80022cc <HAL_ADC_Start+0x110>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021f2:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Start+0x40>
      counter--;
 80021f6:	9b01      	ldr	r3, [sp, #4]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80021fc:	9b01      	ldr	r3, [sp, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002202:	6802      	ldr	r2, [r0, #0]
 8002204:	6893      	ldr	r3, [r2, #8]
 8002206:	f013 0f01 	tst.w	r3, #1
 800220a:	d054      	beq.n	80022b6 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_ADC_Start+0x114>)
 8002210:	400b      	ands	r3, r1
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002218:	6853      	ldr	r3, [r2, #4]
 800221a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800221e:	d005      	beq.n	800222c <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002220:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002222:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222a:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800222e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002232:	d019      	beq.n	8002268 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002234:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002236:	f023 0306 	bic.w	r3, r3, #6
 800223a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800223c:	2300      	movs	r3, #0
 800223e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002242:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8002246:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_ADC_Start+0x118>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f013 0f1f 	tst.w	r3, #31
 8002250:	d10d      	bne.n	800226e <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002252:	6803      	ldr	r3, [r0, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800225a:	d12f      	bne.n	80022bc <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002264:	2000      	movs	r0, #0
 8002266:	e027      	b.n	80022b8 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8002268:	2300      	movs	r3, #0
 800226a:	6443      	str	r3, [r0, #68]	; 0x44
 800226c:	e7e6      	b.n	800223c <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800226e:	6803      	ldr	r3, [r0, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_ADC_Start+0x11c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_ADC_Start+0x118>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f013 0f10 	tst.w	r3, #16
 800227e:	d11f      	bne.n	80022c0 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_ADC_Start+0x120>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00a      	beq.n	800229e <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8002288:	2000      	movs	r0, #0
 800228a:	e015      	b.n	80022b8 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002292:	d1f0      	bne.n	8002276 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e7eb      	b.n	8002276 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80022a4:	d10e      	bne.n	80022c4 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80022ae:	2000      	movs	r0, #0
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 80022b2:	2002      	movs	r0, #2
 80022b4:	e000      	b.n	80022b8 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
}
 80022b8:	b002      	add	sp, #8
 80022ba:	4770      	bx	lr
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
 80022be:	e7fb      	b.n	80022b8 <HAL_ADC_Start+0xfc>
 80022c0:	2000      	movs	r0, #0
 80022c2:	e7f9      	b.n	80022b8 <HAL_ADC_Start+0xfc>
 80022c4:	2000      	movs	r0, #0
 80022c6:	e7f7      	b.n	80022b8 <HAL_ADC_Start+0xfc>
 80022c8:	20000058 	.word	0x20000058
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	fffff8fe 	.word	0xfffff8fe
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000
 80022dc:	40012200 	.word	0x40012200

080022e0 <HAL_ADC_Start_DMA>:
{
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80022e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f000 8091 	beq.w	8002414 <HAL_ADC_Start_DMA+0x134>
 80022f2:	2301      	movs	r3, #1
 80022f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022f8:	6804      	ldr	r4, [r0, #0]
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	f013 0f01 	tst.w	r3, #1
 8002300:	d113      	bne.n	800232a <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8002302:	68a3      	ldr	r3, [r4, #8]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800230a:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_ADC_Start_DMA+0x14c>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_ADC_Start_DMA+0x150>)
 8002310:	fba3 3404 	umull	r3, r4, r3, r4
 8002314:	0ca4      	lsrs	r4, r4, #18
 8002316:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800231a:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 800231c:	e002      	b.n	8002324 <HAL_ADC_Start_DMA+0x44>
      counter--;
 800231e:	9c01      	ldr	r4, [sp, #4]
 8002320:	3c01      	subs	r4, #1
 8002322:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8002324:	9c01      	ldr	r4, [sp, #4]
 8002326:	2c00      	cmp	r4, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800232a:	6803      	ldr	r3, [r0, #0]
 800232c:	689c      	ldr	r4, [r3, #8]
 800232e:	f014 0f01 	tst.w	r4, #1
 8002332:	d071      	beq.n	8002418 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002336:	4c3f      	ldr	r4, [pc, #252]	; (8002434 <HAL_ADC_Start_DMA+0x154>)
 8002338:	402c      	ands	r4, r5
 800233a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800233e:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002346:	d005      	beq.n	8002354 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002348:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800234a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800234e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002352:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002356:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800235a:	d036      	beq.n	80023ca <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800235e:	f023 0306 	bic.w	r3, r3, #6
 8002362:	6443      	str	r3, [r0, #68]	; 0x44
 8002364:	4613      	mov	r3, r2
 8002366:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8002368:	2200      	movs	r2, #0
 800236a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002370:	4831      	ldr	r0, [pc, #196]	; (8002438 <HAL_ADC_Start_DMA+0x158>)
 8002372:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002374:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002376:	4831      	ldr	r0, [pc, #196]	; (800243c <HAL_ADC_Start_DMA+0x15c>)
 8002378:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800237c:	4830      	ldr	r0, [pc, #192]	; (8002440 <HAL_ADC_Start_DMA+0x160>)
 800237e:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002386:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002388:	6825      	ldr	r5, [r4, #0]
 800238a:	6868      	ldr	r0, [r5, #4]
 800238c:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002390:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	68a8      	ldr	r0, [r5, #8]
 8002396:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800239a:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	460a      	mov	r2, r1
 80023a0:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80023a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023a6:	f000 fbf6 	bl	8002b96 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_ADC_Start_DMA+0x164>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f013 0f1f 	tst.w	r3, #31
 80023b2:	d10d      	bne.n	80023d0 <HAL_ADC_Start_DMA+0xf0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023bc:	d12f      	bne.n	800241e <HAL_ADC_Start_DMA+0x13e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80023c6:	2000      	movs	r0, #0
 80023c8:	e027      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
      ADC_CLEAR_ERRORCODE(hadc);
 80023ca:	2300      	movs	r3, #0
 80023cc:	6443      	str	r3, [r0, #68]	; 0x44
 80023ce:	e7c9      	b.n	8002364 <HAL_ADC_Start_DMA+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_ADC_Start_DMA+0x168>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00a      	beq.n	80023ee <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_ADC_Start_DMA+0x164>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f013 0f10 	tst.w	r3, #16
 80023e0:	d11f      	bne.n	8002422 <HAL_ADC_Start_DMA+0x142>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_ADC_Start_DMA+0x16c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_ADC_Start_DMA+0x120>
  return HAL_OK;
 80023ea:	2000      	movs	r0, #0
 80023ec:	e015      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023f4:	d1f0      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	e7eb      	b.n	80023d8 <HAL_ADC_Start_DMA+0xf8>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002406:	d10e      	bne.n	8002426 <HAL_ADC_Start_DMA+0x146>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800240e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
 8002412:	e002      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
  __HAL_LOCK(hadc);
 8002414:	2002      	movs	r0, #2
 8002416:	e000      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
  return HAL_OK;
 8002418:	2000      	movs	r0, #0
}
 800241a:	b003      	add	sp, #12
 800241c:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 800241e:	2000      	movs	r0, #0
 8002420:	e7fb      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
 8002422:	2000      	movs	r0, #0
 8002424:	e7f9      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
 8002426:	2000      	movs	r0, #0
 8002428:	e7f7      	b.n	800241a <HAL_ADC_Start_DMA+0x13a>
 800242a:	bf00      	nop
 800242c:	20000058 	.word	0x20000058
 8002430:	431bde83 	.word	0x431bde83
 8002434:	fffff8fe 	.word	0xfffff8fe
 8002438:	080025bf 	.word	0x080025bf
 800243c:	08002453 	.word	0x08002453
 8002440:	080025a9 	.word	0x080025a9
 8002444:	40012300 	.word	0x40012300
 8002448:	40012000 	.word	0x40012000
 800244c:	40012200 	.word	0x40012200

08002450 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002450:	4770      	bx	lr

08002452 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002452:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002454:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002456:	f7ff fffb 	bl	8002450 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245a:	bd08      	pop	{r3, pc}

0800245c <HAL_ADC_LevelOutOfWindowCallback>:
}
 800245c:	4770      	bx	lr

0800245e <HAL_ADC_ErrorCallback>:
}
 800245e:	4770      	bx	lr

08002460 <HAL_ADC_IRQHandler>:
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002464:	6801      	ldr	r1, [r0, #0]
 8002466:	680a      	ldr	r2, [r1, #0]
 8002468:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800246c:	684b      	ldr	r3, [r1, #4]
 800246e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 8002472:	421a      	tst	r2, r3
 8002474:	d02c      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002476:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002478:	f013 0f10 	tst.w	r3, #16
 800247c:	d103      	bne.n	8002486 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800247e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002484:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002486:	688b      	ldr	r3, [r1, #8]
 8002488:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800248c:	d119      	bne.n	80024c2 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800248e:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002490:	b9bb      	cbnz	r3, 80024c2 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002492:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002494:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800249a:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800249c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024a0:	d10f      	bne.n	80024c2 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024a2:	684b      	ldr	r3, [r1, #4]
 80024a4:	f023 0320 	bic.w	r3, r3, #32
 80024a8:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80024b8:	d103      	bne.n	80024c2 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f007 f8be 	bl	8009644 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f06f 0212 	mvn.w	r2, #18
 80024ce:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 80024de:	4211      	tst	r1, r2
 80024e0:	d034      	beq.n	800254c <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024e4:	f012 0f10 	tst.w	r2, #16
 80024e8:	d103      	bne.n	80024f2 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f0:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80024f8:	d121      	bne.n	800253e <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024fc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002500:	d003      	beq.n	800250a <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002502:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002504:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002508:	d119      	bne.n	800253e <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800250a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800250c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002510:	d115      	bne.n	800253e <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002512:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002514:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002518:	d111      	bne.n	800253e <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800251a:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800251c:	b97a      	cbnz	r2, 800253e <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800252c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800252e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002530:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002534:	d103      	bne.n	800253e <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800253e:	4620      	mov	r0, r4
 8002540:	f000 f94c 	bl	80027dc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	f06f 020c 	mvn.w	r2, #12
 800254a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002550:	6853      	ldr	r3, [r2, #4]
 8002552:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8002556:	4219      	tst	r1, r3
 8002558:	d003      	beq.n	8002562 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f013 0f01 	tst.w	r3, #1
 8002560:	d109      	bne.n	8002576 <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002562:	6821      	ldr	r1, [r4, #0]
 8002564:	680a      	ldr	r2, [r1, #0]
 8002566:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800256a:	684b      	ldr	r3, [r1, #4]
 800256c:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 8002570:	421a      	tst	r2, r3
 8002572:	d10c      	bne.n	800258e <HAL_ADC_IRQHandler+0x12e>
}
 8002574:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff ff6c 	bl	800245c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f06f 0201 	mvn.w	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e7e9      	b.n	8002562 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800258e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002596:	f06f 0520 	mvn.w	r5, #32
 800259a:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ff5e 	bl	800245e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	601d      	str	r5, [r3, #0]
}
 80025a6:	e7e5      	b.n	8002574 <HAL_ADC_IRQHandler+0x114>

080025a8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b8:	f7ff ff51 	bl	800245e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025bc:	bd08      	pop	{r3, pc}

080025be <ADC_DMAConvCplt>:
{
 80025be:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80025c8:	d126      	bne.n	8002618 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	6891      	ldr	r1, [r2, #8]
 80025d6:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80025da:	d119      	bne.n	8002610 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025dc:	6999      	ldr	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025de:	b9b9      	cbnz	r1, 8002610 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80025e6:	d003      	beq.n	80025f0 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e8:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025ea:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80025ee:	d10f      	bne.n	8002610 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025f0:	6851      	ldr	r1, [r2, #4]
 80025f2:	f021 0120 	bic.w	r1, r1, #32
 80025f6:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002602:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002606:	d103      	bne.n	8002610 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002610:	4618      	mov	r0, r3
 8002612:	f007 f817 	bl	8009644 <HAL_ADC_ConvCpltCallback>
}
 8002616:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261a:	f012 0f10 	tst.w	r2, #16
 800261e:	d103      	bne.n	8002628 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4798      	blx	r3
}
 8002626:	e7f6      	b.n	8002616 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff18 	bl	800245e <HAL_ADC_ErrorCallback>
 800262e:	e7f2      	b.n	8002616 <ADC_DMAConvCplt+0x58>

08002630 <HAL_ADC_ConfigChannel>:
{
 8002630:	b430      	push	{r4, r5}
 8002632:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002638:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	f000 80c0 	beq.w	80027c2 <HAL_ADC_ConfigChannel+0x192>
 8002642:	2301      	movs	r3, #1
 8002644:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002648:	680b      	ldr	r3, [r1, #0]
 800264a:	2b09      	cmp	r3, #9
 800264c:	d922      	bls.n	8002694 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800264e:	6805      	ldr	r5, [r0, #0]
 8002650:	68ea      	ldr	r2, [r5, #12]
 8002652:	b29b      	uxth	r3, r3
 8002654:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002658:	3b1e      	subs	r3, #30
 800265a:	2407      	movs	r4, #7
 800265c:	fa04 f303 	lsl.w	r3, r4, r3
 8002660:	ea22 0303 	bic.w	r3, r2, r3
 8002664:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_ADC_ConfigChannel+0x198>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266e:	6805      	ldr	r5, [r0, #0]
 8002670:	68ea      	ldr	r2, [r5, #12]
 8002672:	688c      	ldr	r4, [r1, #8]
 8002674:	b29b      	uxth	r3, r3
 8002676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800267a:	3b1e      	subs	r3, #30
 800267c:	fa04 f303 	lsl.w	r3, r4, r3
 8002680:	4313      	orrs	r3, r2
 8002682:	60eb      	str	r3, [r5, #12]
 8002684:	e01b      	b.n	80026be <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002686:	6802      	ldr	r2, [r0, #0]
 8002688:	68d3      	ldr	r3, [r2, #12]
 800268a:	688c      	ldr	r4, [r1, #8]
 800268c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002690:	60d3      	str	r3, [r2, #12]
 8002692:	e014      	b.n	80026be <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002694:	6805      	ldr	r5, [r0, #0]
 8002696:	692a      	ldr	r2, [r5, #16]
 8002698:	b29b      	uxth	r3, r3
 800269a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800269e:	2407      	movs	r4, #7
 80026a0:	fa04 f303 	lsl.w	r3, r4, r3
 80026a4:	ea22 0303 	bic.w	r3, r2, r3
 80026a8:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026aa:	6805      	ldr	r5, [r0, #0]
 80026ac:	692a      	ldr	r2, [r5, #16]
 80026ae:	688c      	ldr	r4, [r1, #8]
 80026b0:	880b      	ldrh	r3, [r1, #0]
 80026b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026b6:	fa04 f303 	lsl.w	r3, r4, r3
 80026ba:	4313      	orrs	r3, r2
 80026bc:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80026be:	684b      	ldr	r3, [r1, #4]
 80026c0:	2b06      	cmp	r3, #6
 80026c2:	d824      	bhi.n	800270e <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026c4:	6805      	ldr	r5, [r0, #0]
 80026c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80026c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026cc:	3b05      	subs	r3, #5
 80026ce:	241f      	movs	r4, #31
 80026d0:	fa04 f303 	lsl.w	r3, r4, r3
 80026d4:	ea22 0303 	bic.w	r3, r2, r3
 80026d8:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026da:	6805      	ldr	r5, [r0, #0]
 80026dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80026de:	684b      	ldr	r3, [r1, #4]
 80026e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026e4:	3b05      	subs	r3, #5
 80026e6:	880c      	ldrh	r4, [r1, #0]
 80026e8:	fa04 f303 	lsl.w	r3, r4, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f0:	6802      	ldr	r2, [r0, #0]
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_ADC_ConfigChannel+0x19c>)
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d03a      	beq.n	800276e <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f8:	6802      	ldr	r2, [r0, #0]
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_ADC_ConfigChannel+0x19c>)
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d03f      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002700:	2300      	movs	r3, #0
 8002702:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002706:	4618      	mov	r0, r3
}
 8002708:	b002      	add	sp, #8
 800270a:	bc30      	pop	{r4, r5}
 800270c:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d816      	bhi.n	8002740 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002712:	6805      	ldr	r5, [r0, #0]
 8002714:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800271a:	3b23      	subs	r3, #35	; 0x23
 800271c:	241f      	movs	r4, #31
 800271e:	fa04 f303 	lsl.w	r3, r4, r3
 8002722:	ea22 0303 	bic.w	r3, r2, r3
 8002726:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002728:	6805      	ldr	r5, [r0, #0]
 800272a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800272c:	684b      	ldr	r3, [r1, #4]
 800272e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002732:	3b23      	subs	r3, #35	; 0x23
 8002734:	880c      	ldrh	r4, [r1, #0]
 8002736:	fa04 f303 	lsl.w	r3, r4, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	632b      	str	r3, [r5, #48]	; 0x30
 800273e:	e7d7      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002740:	6805      	ldr	r5, [r0, #0]
 8002742:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002744:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002748:	3b41      	subs	r3, #65	; 0x41
 800274a:	241f      	movs	r4, #31
 800274c:	fa04 f303 	lsl.w	r3, r4, r3
 8002750:	ea22 0303 	bic.w	r3, r2, r3
 8002754:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002756:	6805      	ldr	r5, [r0, #0]
 8002758:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800275a:	684b      	ldr	r3, [r1, #4]
 800275c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002760:	3b41      	subs	r3, #65	; 0x41
 8002762:	880c      	ldrh	r4, [r1, #0]
 8002764:	fa04 f303 	lsl.w	r3, r4, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800276c:	e7c0      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800276e:	680b      	ldr	r3, [r1, #0]
 8002770:	2b12      	cmp	r3, #18
 8002772:	d1c1      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_ADC_ConfigChannel+0x1a0>)
 8002776:	6853      	ldr	r3, [r2, #4]
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6053      	str	r3, [r2, #4]
 800277e:	e7bb      	b.n	80026f8 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002780:	680b      	ldr	r3, [r1, #0]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_ADC_ConfigChannel+0x198>)
 8002784:	2b11      	cmp	r3, #17
 8002786:	bf18      	it	ne
 8002788:	4293      	cmpne	r3, r2
 800278a:	d1b9      	bne.n	8002700 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800278c:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x1a0>)
 800278e:	6853      	ldr	r3, [r2, #4]
 8002790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002794:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002796:	680a      	ldr	r2, [r1, #0]
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_ADC_ConfigChannel+0x198>)
 800279a:	429a      	cmp	r2, r3
 800279c:	d1b0      	bne.n	8002700 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_ADC_ConfigChannel+0x1a4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_ADC_ConfigChannel+0x1a8>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ae:	005a      	lsls	r2, r3, #1
 80027b0:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80027b2:	e002      	b.n	80027ba <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x184>
 80027c0:	e79e      	b.n	8002700 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80027c2:	2002      	movs	r0, #2
 80027c4:	e7a0      	b.n	8002708 <HAL_ADC_ConfigChannel+0xd8>
 80027c6:	bf00      	nop
 80027c8:	10000012 	.word	0x10000012
 80027cc:	40012000 	.word	0x40012000
 80027d0:	40012300 	.word	0x40012300
 80027d4:	20000058 	.word	0x20000058
 80027d8:	431bde83 	.word	0x431bde83

080027dc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80027e2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	0200      	lsls	r0, r0, #8
 80027ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027f4:	4a02      	ldr	r2, [pc, #8]	; (8002800 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027f6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80027f8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00
 8002800:	05fa0000 	.word	0x05fa0000

08002804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002804:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_NVIC_SetPriority+0x58>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280e:	f1c3 0407 	rsb	r4, r3, #7
 8002812:	2c04      	cmp	r4, #4
 8002814:	bf28      	it	cs
 8002816:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002818:	1d1d      	adds	r5, r3, #4
 800281a:	2d06      	cmp	r5, #6
 800281c:	d914      	bls.n	8002848 <HAL_NVIC_SetPriority+0x44>
 800281e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002824:	fa05 f404 	lsl.w	r4, r5, r4
 8002828:	ea21 0104 	bic.w	r1, r1, r4
 800282c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282e:	fa05 f303 	lsl.w	r3, r5, r3
 8002832:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002836:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002838:	2800      	cmp	r0, #0
 800283a:	db07      	blt.n	800284c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	0109      	lsls	r1, r1, #4
 800283e:	b2c9      	uxtb	r1, r1
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_NVIC_SetPriority+0x5c>)
 8002842:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002844:	bc30      	pop	{r4, r5}
 8002846:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002848:	2300      	movs	r3, #0
 800284a:	e7e9      	b.n	8002820 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	f000 000f 	and.w	r0, r0, #15
 8002850:	0109      	lsls	r1, r1, #4
 8002852:	b2c9      	uxtb	r1, r1
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_NVIC_SetPriority+0x60>)
 8002856:	5419      	strb	r1, [r3, r0]
 8002858:	e7f4      	b.n	8002844 <HAL_NVIC_SetPriority+0x40>
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	e000e400 	.word	0xe000e400
 8002864:	e000ed14 	.word	0xe000ed14

08002868 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002868:	2800      	cmp	r0, #0
 800286a:	db07      	blt.n	800287c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286c:	f000 021f 	and.w	r2, r0, #31
 8002870:	0940      	lsrs	r0, r0, #5
 8002872:	2301      	movs	r3, #1
 8002874:	4093      	lsls	r3, r2
 8002876:	4a02      	ldr	r2, [pc, #8]	; (8002880 <HAL_NVIC_EnableIRQ+0x18>)
 8002878:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002884:	2800      	cmp	r0, #0
 8002886:	d038      	beq.n	80028fa <HAL_CRC_Init+0x76>
{
 8002888:	b510      	push	{r4, lr}
 800288a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800288c:	7f43      	ldrb	r3, [r0, #29]
 800288e:	b31b      	cbz	r3, 80028d8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002894:	7923      	ldrb	r3, [r4, #4]
 8002896:	bb1b      	cbnz	r3, 80028e0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_CRC_Init+0x7c>)
 800289c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800289e:	6822      	ldr	r2, [r4, #0]
 80028a0:	6893      	ldr	r3, [r2, #8]
 80028a2:	f023 0318 	bic.w	r3, r3, #24
 80028a6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028a8:	7963      	ldrb	r3, [r4, #5]
 80028aa:	bb13      	cbnz	r3, 80028f2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	6893      	ldr	r3, [r2, #8]
 80028b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80028bc:	6961      	ldr	r1, [r4, #20]
 80028be:	430b      	orrs	r3, r1
 80028c0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	6893      	ldr	r3, [r2, #8]
 80028c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ca:	69a1      	ldr	r1, [r4, #24]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028d0:	2301      	movs	r3, #1
 80028d2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80028d4:	2000      	movs	r0, #0
}
 80028d6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80028d8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80028da:	f006 f811 	bl	8008900 <HAL_CRC_MspInit>
 80028de:	e7d7      	b.n	8002890 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028e0:	68e2      	ldr	r2, [r4, #12]
 80028e2:	68a1      	ldr	r1, [r4, #8]
 80028e4:	4620      	mov	r0, r4
 80028e6:	f000 f80d 	bl	8002904 <HAL_CRCEx_Polynomial_Set>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d0dc      	beq.n	80028a8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e7f1      	b.n	80028d6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	6922      	ldr	r2, [r4, #16]
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	e7dc      	b.n	80028b4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	04c11db7 	.word	0x04c11db7

08002904 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002904:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002906:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002908:	1e65      	subs	r5, r4, #1
 800290a:	b13c      	cbz	r4, 800291c <HAL_CRCEx_Polynomial_Set+0x18>
 800290c:	f005 031f 	and.w	r3, r5, #31
 8002910:	fa21 f303 	lsr.w	r3, r1, r3
 8002914:	462c      	mov	r4, r5
 8002916:	f013 0f01 	tst.w	r3, #1
 800291a:	d0f5      	beq.n	8002908 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800291c:	2a18      	cmp	r2, #24
 800291e:	d823      	bhi.n	8002968 <HAL_CRCEx_Polynomial_Set+0x64>
 8002920:	e8df f002 	tbb	[pc, r2]
 8002924:	2222220f 	.word	0x2222220f
 8002928:	22222222 	.word	0x22222222
 800292c:	2222221e 	.word	0x2222221e
 8002930:	22222222 	.word	0x22222222
 8002934:	2222221a 	.word	0x2222221a
 8002938:	22222222 	.word	0x22222222
 800293c:	0d          	.byte	0x0d
 800293d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800293e:	2d06      	cmp	r5, #6
 8002940:	d814      	bhi.n	800296c <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002946:	6801      	ldr	r1, [r0, #0]
 8002948:	688b      	ldr	r3, [r1, #8]
 800294a:	f023 0318 	bic.w	r3, r3, #24
 800294e:	431a      	orrs	r2, r3
 8002950:	608a      	str	r2, [r1, #8]
 8002952:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8002954:	bc30      	pop	{r4, r5}
 8002956:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8002958:	2d07      	cmp	r5, #7
 800295a:	d9f2      	bls.n	8002942 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800295c:	2001      	movs	r0, #1
 800295e:	e7f9      	b.n	8002954 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002960:	2d0f      	cmp	r5, #15
 8002962:	d9ee      	bls.n	8002942 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002964:	2001      	movs	r0, #1
 8002966:	e7f5      	b.n	8002954 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	e7f3      	b.n	8002954 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 800296c:	2001      	movs	r0, #1
 800296e:	e7f1      	b.n	8002954 <HAL_CRCEx_Polynomial_Set+0x50>

08002970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002972:	6805      	ldr	r5, [r0, #0]
 8002974:	682c      	ldr	r4, [r5, #0]
 8002976:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800297a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800297c:	6804      	ldr	r4, [r0, #0]
 800297e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002980:	6883      	ldr	r3, [r0, #8]
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d005      	beq.n	8002992 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002986:	6803      	ldr	r3, [r0, #0]
 8002988:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800298a:	6803      	ldr	r3, [r0, #0]
 800298c:	60da      	str	r2, [r3, #12]
  }
}
 800298e:	bc30      	pop	{r4, r5}
 8002990:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002992:	6803      	ldr	r3, [r0, #0]
 8002994:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002996:	6803      	ldr	r3, [r0, #0]
 8002998:	60d9      	str	r1, [r3, #12]
 800299a:	e7f8      	b.n	800298e <DMA_SetConfig+0x1e>

0800299c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	6802      	ldr	r2, [r0, #0]
 800299e:	b2d3      	uxtb	r3, r2
 80029a0:	3b10      	subs	r3, #16
 80029a2:	4909      	ldr	r1, [pc, #36]	; (80029c8 <DMA_CalcBaseAndBitshift+0x2c>)
 80029a4:	fba1 1303 	umull	r1, r3, r1, r3
 80029a8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <DMA_CalcBaseAndBitshift+0x30>)
 80029ac:	5cc9      	ldrb	r1, [r1, r3]
 80029ae:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d804      	bhi.n	80029be <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <DMA_CalcBaseAndBitshift+0x34>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80029ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80029bc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <DMA_CalcBaseAndBitshift+0x34>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	6583      	str	r3, [r0, #88]	; 0x58
 80029c6:	e7f8      	b.n	80029ba <DMA_CalcBaseAndBitshift+0x1e>
 80029c8:	aaaaaaab 	.word	0xaaaaaaab
 80029cc:	0800d740 	.word	0x0800d740
 80029d0:	fffffc00 	.word	0xfffffc00

080029d4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029d6:	6982      	ldr	r2, [r0, #24]
 80029d8:	b992      	cbnz	r2, 8002a00 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d00a      	beq.n	80029f4 <DMA_CheckFifoParam+0x20>
 80029de:	b11b      	cbz	r3, 80029e8 <DMA_CheckFifoParam+0x14>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d001      	beq.n	80029e8 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2000      	movs	r0, #0
 80029e6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80029ee:	d12c      	bne.n	8002a4a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2000      	movs	r0, #0
 80029f2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fa:	d028      	beq.n	8002a4e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a04:	d005      	beq.n	8002a12 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d929      	bls.n	8002a5e <DMA_CheckFifoParam+0x8a>
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d015      	beq.n	8002a3a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2000      	movs	r0, #0
 8002a10:	4770      	bx	lr
    switch (tmp)
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d803      	bhi.n	8002a1e <DMA_CheckFifoParam+0x4a>
 8002a16:	e8df f003 	tbb	[pc, r3]
 8002a1a:	041c      	.short	0x041c
 8002a1c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2000      	movs	r0, #0
 8002a20:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a28:	d115      	bne.n	8002a56 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a34:	d011      	beq.n	8002a5a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a40:	d001      	beq.n	8002a46 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002a44:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2000      	movs	r0, #0
 8002a48:	4770      	bx	lr
        status = HAL_ERROR;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	4770      	bx	lr
        status = HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	4770      	bx	lr
      status = HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	4770      	bx	lr
        status = HAL_ERROR;
 8002a56:	2001      	movs	r0, #1
 8002a58:	4770      	bx	lr
        status = HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	4770      	bx	lr
      status = HAL_ERROR;
 8002a5e:	2001      	movs	r0, #1
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_DMA_Init>:
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7ff fac8 	bl	8001ffc <HAL_GetTick>
  if(hdma == NULL)
 8002a6c:	2c00      	cmp	r4, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_DMA_Init+0xc4>
 8002a70:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002a72:	2300      	movs	r3, #0
 8002a74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f012 0f01 	tst.w	r2, #1
 8002a90:	d00a      	beq.n	8002aa8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a92:	f7ff fab3 	bl	8001ffc <HAL_GetTick>
 8002a96:	1b40      	subs	r0, r0, r5
 8002a98:	2805      	cmp	r0, #5
 8002a9a:	d9f5      	bls.n	8002a88 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002aa8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aaa:	4820      	ldr	r0, [pc, #128]	; (8002b2c <HAL_DMA_Init+0xc8>)
 8002aac:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aae:	6861      	ldr	r1, [r4, #4]
 8002ab0:	68a2      	ldr	r2, [r4, #8]
 8002ab2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab8:	6921      	ldr	r1, [r4, #16]
 8002aba:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac0:	69a1      	ldr	r1, [r4, #24]
 8002ac2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac8:	6a21      	ldr	r1, [r4, #32]
 8002aca:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002acc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ace:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ad0:	2904      	cmp	r1, #4
 8002ad2:	d01e      	beq.n	8002b12 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002ad4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002ad6:	6826      	ldr	r6, [r4, #0]
 8002ad8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ada:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ae0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ae8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aec:	b11b      	cbz	r3, 8002af6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff ff70 	bl	80029d4 <DMA_CheckFifoParam>
 8002af4:	b990      	cbnz	r0, 8002b1c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002af6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff ff4f 	bl	800299c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b00:	233f      	movs	r3, #63	; 0x3f
 8002b02:	4093      	lsls	r3, r2
 8002b04:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	2000      	movs	r0, #0
 8002b08:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002b10:	e7c9      	b.n	8002aa6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b16:	4301      	orrs	r1, r0
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	e7db      	b.n	8002ad4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b20:	2001      	movs	r0, #1
 8002b22:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002b26:	e7be      	b.n	8002aa6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7bc      	b.n	8002aa6 <HAL_DMA_Init+0x42>
 8002b2c:	f010803f 	.word	0xf010803f

08002b30 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d02c      	beq.n	8002b8e <HAL_DMA_DeInit+0x5e>
{
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b38:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d027      	beq.n	8002b92 <HAL_DMA_DeInit+0x62>
  __HAL_DMA_DISABLE(hdma);
 8002b42:	6802      	ldr	r2, [r0, #0]
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002b4c:	6803      	ldr	r3, [r0, #0]
 8002b4e:	2500      	movs	r5, #0
 8002b50:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002b56:	6803      	ldr	r3, [r0, #0]
 8002b58:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002b5e:	6803      	ldr	r3, [r0, #0]
 8002b60:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002b62:	6803      	ldr	r3, [r0, #0]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b68:	f7ff ff18 	bl	800299c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b6e:	233f      	movs	r3, #63	; 0x3f
 8002b70:	4093      	lsls	r3, r2
 8002b72:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8002b74:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b76:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b78:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002b7a:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002b7c:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002b7e:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002b82:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002b86:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8002b8a:	4628      	mov	r0, r5
}
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
}
 8002b90:	4770      	bx	lr
    return HAL_BUSY;
 8002b92:	2002      	movs	r0, #2
 8002b94:	e7fa      	b.n	8002b8c <HAL_DMA_DeInit+0x5c>

08002b96 <HAL_DMA_Start_IT>:
{
 8002b96:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b98:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002b9a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002b9e:	2c01      	cmp	r4, #1
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_Start_IT+0x70>
 8002ba2:	2401      	movs	r4, #1
 8002ba4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ba8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002bac:	b2e4      	uxtb	r4, r4
 8002bae:	2c01      	cmp	r4, #1
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002bb8:	2002      	movs	r0, #2
}
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fed1 	bl	8002970 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002bd0:	233f      	movs	r3, #63	; 0x3f
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	f043 0316 	orr.w	r3, r3, #22
 8002bde:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	6953      	ldr	r3, [r2, #20]
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bec:	b123      	cbz	r3, 8002bf8 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bf8:	6822      	ldr	r2, [r4, #0]
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2000      	movs	r0, #0
 8002c04:	e7d9      	b.n	8002bba <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002c06:	2002      	movs	r0, #2
 8002c08:	e7d7      	b.n	8002bba <HAL_DMA_Start_IT+0x24>
	...

08002c0c <HAL_DMA_IRQHandler>:
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c18:	681d      	ldr	r5, [r3, #0]
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c1c:	fba3 3505 	umull	r3, r5, r3, r5
 8002c20:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c22:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002c24:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c26:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002c28:	2308      	movs	r3, #8
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	4233      	tst	r3, r6
 8002c2e:	d010      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f012 0f04 	tst.w	r2, #4
 8002c38:	d00b      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f022 0204 	bic.w	r2, r2, #4
 8002c40:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c42:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002c44:	2308      	movs	r3, #8
 8002c46:	4093      	lsls	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c54:	2301      	movs	r3, #1
 8002c56:	4093      	lsls	r3, r2
 8002c58:	4233      	tst	r3, r6
 8002c5a:	d009      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c5c:	6822      	ldr	r2, [r4, #0]
 8002c5e:	6952      	ldr	r2, [r2, #20]
 8002c60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c64:	d004      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c66:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c72:	2304      	movs	r3, #4
 8002c74:	4093      	lsls	r3, r2
 8002c76:	4233      	tst	r3, r6
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	f012 0f02 	tst.w	r2, #2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c84:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c90:	2310      	movs	r3, #16
 8002c92:	4093      	lsls	r3, r2
 8002c94:	4233      	tst	r3, r6
 8002c96:	d024      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f012 0f08 	tst.w	r2, #8
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ca2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002cac:	d00d      	beq.n	8002cca <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002cb4:	d104      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cb8:	b19b      	cbz	r3, 8002ce2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4798      	blx	r3
 8002cbe:	e010      	b.n	8002ce2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002cc2:	b173      	cbz	r3, 8002ce2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4798      	blx	r3
 8002cc8:	e00b      	b.n	8002ce2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002cd0:	d103      	bne.n	8002cda <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cdc:	b10b      	cbz	r3, 8002ce2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	4233      	tst	r3, r6
 8002cea:	d055      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cec:	6822      	ldr	r2, [r4, #0]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	f012 0f10 	tst.w	r2, #16
 8002cf4:	d050      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cf6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cf8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d00e      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d0a:	d033      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d12:	d12a      	bne.n	8002d6a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002d14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4798      	blx	r3
 8002d1e:	e03b      	b.n	8002d98 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	f023 0316 	bic.w	r3, r3, #22
 8002d28:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	6953      	ldr	r3, [r2, #20]
 8002d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d32:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d36:	b1a3      	cbz	r3, 8002d62 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f023 0308 	bic.w	r3, r3, #8
 8002d40:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d44:	233f      	movs	r3, #63	; 0x3f
 8002d46:	4093      	lsls	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002d56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d03f      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4798      	blx	r3
 8002d60:	e03c      	b.n	8002ddc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e7      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x12c>
 8002d68:	e7eb      	b.n	8002d42 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d6c:	b1a3      	cbz	r3, 8002d98 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002d6e:	4620      	mov	r0, r4
 8002d70:	4798      	blx	r3
 8002d72:	e011      	b.n	8002d98 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d7a:	d109      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f022 0210 	bic.w	r2, r2, #16
 8002d82:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002d84:	2300      	movs	r3, #0
 8002d86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d92:	b10b      	cbz	r3, 8002d98 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002d94:	4620      	mov	r0, r4
 8002d96:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d9a:	b1fb      	cbz	r3, 8002ddc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d9e:	f013 0f01 	tst.w	r3, #1
 8002da2:	d017      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	2305      	movs	r3, #5
 8002da6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002db4:	9b01      	ldr	r3, [sp, #4]
 8002db6:	3301      	adds	r3, #1
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	42ab      	cmp	r3, r5
 8002dbc:	d804      	bhi.n	8002dc8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f013 0f01 	tst.w	r3, #1
 8002dc6:	d1f5      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002dd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dd6:	b10b      	cbz	r3, 8002ddc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4798      	blx	r3
}
 8002ddc:	b003      	add	sp, #12
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de0:	20000058 	.word	0x20000058
 8002de4:	1b4e81b5 	.word	0x1b4e81b5

08002de8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002de8:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002dea:	6806      	ldr	r6, [r0, #0]
 8002dec:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002dee:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002df2:	9d03      	ldr	r5, [sp, #12]
 8002df4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002df8:	431c      	orrs	r4, r3
 8002dfa:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e00:	6843      	ldr	r3, [r0, #4]
 8002e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e06:	d003      	beq.n	8002e10 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e08:	6803      	ldr	r3, [r0, #0]
 8002e0a:	60d9      	str	r1, [r3, #12]
  }
}
 8002e0c:	bc70      	pop	{r4, r5, r6}
 8002e0e:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e10:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e14:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e18:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e1c:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e1e:	6884      	ldr	r4, [r0, #8]
 8002e20:	b194      	cbz	r4, 8002e48 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e22:	2c01      	cmp	r4, #1
 8002e24:	d00e      	beq.n	8002e44 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e26:	2c02      	cmp	r4, #2
 8002e28:	d011      	beq.n	8002e4e <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e2a:	2c03      	cmp	r4, #3
 8002e2c:	d017      	beq.n	8002e5e <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002e2e:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002e30:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002e32:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e34:	0219      	lsls	r1, r3, #8
 8002e36:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002e3a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002e3e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002e42:	e001      	b.n	8002e48 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002e44:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	6399      	str	r1, [r3, #56]	; 0x38
 8002e4c:	e7de      	b.n	8002e0c <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002e4e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002e50:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e52:	02d9      	lsls	r1, r3, #11
 8002e54:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002e58:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002e5c:	e7f4      	b.n	8002e48 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002e5e:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002e60:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002e62:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e64:	0299      	lsls	r1, r3, #10
 8002e66:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002e6a:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002e6e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002e72:	e7e9      	b.n	8002e48 <DMA2D_SetConfig+0x60>

08002e74 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8002e74:	b338      	cbz	r0, 8002ec6 <HAL_DMA2D_Init+0x52>
{
 8002e76:	b510      	push	{r4, lr}
 8002e78:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e7e:	b1eb      	cbz	r3, 8002ebc <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e80:	2302      	movs	r3, #2
 8002e82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6813      	ldr	r3, [r2, #0]
 8002e8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e8e:	6861      	ldr	r1, [r4, #4]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	68a1      	ldr	r1, [r4, #8]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_DMA2D_Init+0x58>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	68e1      	ldr	r1, [r4, #12]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002eba:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002ebc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002ec0:	f005 fd6e 	bl	80089a0 <HAL_DMA2D_MspInit>
 8002ec4:	e7dc      	b.n	8002e80 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	ffffc000 	.word	0xffffc000

08002ed0 <HAL_DMA2D_Start>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8002ed4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002ed8:	2c01      	cmp	r4, #1
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA2D_Start+0x34>
 8002edc:	4604      	mov	r4, r0
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002eea:	9804      	ldr	r0, [sp, #16]
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff ff7a 	bl	8002de8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002efe:	2000      	movs	r0, #0
}
 8002f00:	b002      	add	sp, #8
 8002f02:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8002f04:	2002      	movs	r0, #2
 8002f06:	e7fb      	b.n	8002f00 <HAL_DMA2D_Start+0x30>

08002f08 <HAL_DMA2D_PollForTransfer>:
{
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f14:	6803      	ldr	r3, [r0, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f013 0f01 	tst.w	r3, #1
 8002f1c:	d111      	bne.n	8002f42 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f24:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002f26:	f013 0f20 	tst.w	r3, #32
 8002f2a:	d147      	bne.n	8002fbc <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	2212      	movs	r2, #18
 8002f30:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002f3e:	b002      	add	sp, #8
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002f42:	f7ff f85b 	bl	8001ffc <HAL_GetTick>
 8002f46:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	f012 0f02 	tst.w	r2, #2
 8002f50:	d1e5      	bne.n	8002f1e <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002f56:	9a01      	ldr	r2, [sp, #4]
 8002f58:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002f5c:	d114      	bne.n	8002f88 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8002f5e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002f62:	d0f1      	beq.n	8002f48 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002f64:	f7ff f84a 	bl	8001ffc <HAL_GetTick>
 8002f68:	1b80      	subs	r0, r0, r6
 8002f6a:	42a8      	cmp	r0, r5
 8002f6c:	d801      	bhi.n	8002f72 <HAL_DMA2D_PollForTransfer+0x6a>
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	d1ea      	bne.n	8002f48 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f74:	f043 0320 	orr.w	r3, r3, #32
 8002f78:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002f86:	e7da      	b.n	8002f3e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f88:	9a01      	ldr	r2, [sp, #4]
 8002f8a:	f012 0f20 	tst.w	r2, #32
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f92:	f042 0202 	orr.w	r2, r2, #2
 8002f96:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f98:	9a01      	ldr	r2, [sp, #4]
 8002f9a:	f012 0f01 	tst.w	r2, #1
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fa0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fac:	2304      	movs	r3, #4
 8002fae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002fb8:	2001      	movs	r0, #1
 8002fba:	e7c0      	b.n	8002f3e <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8002fbc:	f7ff f81e 	bl	8001ffc <HAL_GetTick>
 8002fc0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	f012 0f10 	tst.w	r2, #16
 8002fca:	d1af      	bne.n	8002f2c <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002fd0:	9a01      	ldr	r2, [sp, #4]
 8002fd2:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002fd6:	d114      	bne.n	8003002 <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8002fd8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002fdc:	d0f1      	beq.n	8002fc2 <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002fde:	f7ff f80d 	bl	8001ffc <HAL_GetTick>
 8002fe2:	1b80      	subs	r0, r0, r6
 8002fe4:	42a8      	cmp	r0, r5
 8002fe6:	d801      	bhi.n	8002fec <HAL_DMA2D_PollForTransfer+0xe4>
 8002fe8:	2d00      	cmp	r5, #0
 8002fea:	d1ea      	bne.n	8002fc2 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003000:	e79d      	b.n	8002f3e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003002:	9a01      	ldr	r2, [sp, #4]
 8003004:	f012 0f08 	tst.w	r2, #8
 8003008:	d003      	beq.n	8003012 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800300a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800300c:	f042 0204 	orr.w	r2, r2, #4
 8003010:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003012:	9a01      	ldr	r2, [sp, #4]
 8003014:	f012 0f20 	tst.w	r2, #32
 8003018:	d003      	beq.n	8003022 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800301a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800301c:	f042 0202 	orr.w	r2, r2, #2
 8003020:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003022:	9a01      	ldr	r2, [sp, #4]
 8003024:	f012 0f01 	tst.w	r2, #1
 8003028:	d003      	beq.n	8003032 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003032:	2229      	movs	r2, #41	; 0x29
 8003034:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003036:	2304      	movs	r3, #4
 8003038:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800303c:	2300      	movs	r3, #0
 800303e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003042:	2001      	movs	r0, #1
 8003044:	e77b      	b.n	8002f3e <HAL_DMA2D_PollForTransfer+0x36>
	...

08003048 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003048:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800304c:	2b01      	cmp	r3, #1
 800304e:	d059      	beq.n	8003104 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8003050:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8003052:	2301      	movs	r3, #1
 8003054:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003058:	2302      	movs	r3, #2
 800305a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800305e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	1c8b      	adds	r3, r1, #2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	58c3      	ldr	r3, [r0, r3]
 800306a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800306e:	3a09      	subs	r2, #9
 8003070:	2a01      	cmp	r2, #1
 8003072:	d91e      	bls.n	80030b2 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003074:	1c8a      	adds	r2, r1, #2
 8003076:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800307a:	6852      	ldr	r2, [r2, #4]
 800307c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003080:	bb41      	cbnz	r1, 80030d4 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003082:	6804      	ldr	r4, [r0, #0]
 8003084:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003086:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_DMA2D_ConfigLayer+0xc0>)
 8003088:	402a      	ands	r2, r5
 800308a:	4313      	orrs	r3, r2
 800308c:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800308e:	6802      	ldr	r2, [r0, #0]
 8003090:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003094:	699c      	ldr	r4, [r3, #24]
 8003096:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	3b09      	subs	r3, #9
 800309c:	2b01      	cmp	r3, #1
 800309e:	d910      	bls.n	80030c2 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80030ac:	4618      	mov	r0, r3
}
 80030ae:	bc30      	pop	{r4, r5}
 80030b0:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030b2:	1c8a      	adds	r2, r1, #2
 80030b4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	e7de      	b.n	8003080 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80030c2:	3102      	adds	r1, #2
 80030c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80030c8:	684b      	ldr	r3, [r1, #4]
 80030ca:	6802      	ldr	r2, [r0, #0]
 80030cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030d0:	6293      	str	r3, [r2, #40]	; 0x28
 80030d2:	e7e5      	b.n	80030a0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030d4:	6804      	ldr	r4, [r0, #0]
 80030d6:	69e5      	ldr	r5, [r4, #28]
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <HAL_DMA2D_ConfigLayer+0xc0>)
 80030da:	402a      	ands	r2, r5
 80030dc:	4313      	orrs	r3, r2
 80030de:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030e0:	6802      	ldr	r2, [r0, #0]
 80030e2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80030e6:	699c      	ldr	r4, [r3, #24]
 80030e8:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	3b09      	subs	r3, #9
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d8d6      	bhi.n	80030a0 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80030f2:	3102      	adds	r1, #2
 80030f4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80030f8:	684b      	ldr	r3, [r1, #4]
 80030fa:	6802      	ldr	r2, [r0, #0]
 80030fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	e7cd      	b.n	80030a0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8003104:	2002      	movs	r0, #2
}
 8003106:	4770      	bx	lr
 8003108:	00fcfff0 	.word	0x00fcfff0

0800310c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800310c:	2300      	movs	r3, #0
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f200 80e2 	bhi.w	80032d8 <HAL_GPIO_Init+0x1cc>
{
 8003114:	b4f0      	push	{r4, r5, r6, r7}
 8003116:	b082      	sub	sp, #8
 8003118:	e039      	b.n	800318e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800311a:	2209      	movs	r2, #9
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x14>
 800311e:	2200      	movs	r2, #0
 8003120:	40b2      	lsls	r2, r6
 8003122:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003124:	3402      	adds	r4, #2
 8003126:	4e6d      	ldr	r6, [pc, #436]	; (80032dc <HAL_GPIO_Init+0x1d0>)
 8003128:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_GPIO_Init+0x1d4>)
 800312e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003130:	43ea      	mvns	r2, r5
 8003132:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003136:	684f      	ldr	r7, [r1, #4]
 8003138:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800313c:	d001      	beq.n	8003142 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800313e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003142:	4c67      	ldr	r4, [pc, #412]	; (80032e0 <HAL_GPIO_Init+0x1d4>)
 8003144:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003146:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003148:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800314c:	684f      	ldr	r7, [r1, #4]
 800314e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003152:	d001      	beq.n	8003158 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003154:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003158:	4c61      	ldr	r4, [pc, #388]	; (80032e0 <HAL_GPIO_Init+0x1d4>)
 800315a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800315e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003162:	684f      	ldr	r7, [r1, #4]
 8003164:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003168:	d001      	beq.n	800316e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800316a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800316e:	4c5c      	ldr	r4, [pc, #368]	; (80032e0 <HAL_GPIO_Init+0x1d4>)
 8003170:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003172:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003174:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003176:	684e      	ldr	r6, [r1, #4]
 8003178:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800317c:	d001      	beq.n	8003182 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800317e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003182:	4c57      	ldr	r4, [pc, #348]	; (80032e0 <HAL_GPIO_Init+0x1d4>)
 8003184:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003186:	3301      	adds	r3, #1
 8003188:	2b0f      	cmp	r3, #15
 800318a:	f200 80a2 	bhi.w	80032d2 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003192:	680c      	ldr	r4, [r1, #0]
 8003194:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003198:	42aa      	cmp	r2, r5
 800319a:	d1f4      	bne.n	8003186 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319c:	684c      	ldr	r4, [r1, #4]
 800319e:	2c12      	cmp	r4, #18
 80031a0:	bf18      	it	ne
 80031a2:	2c02      	cmpne	r4, #2
 80031a4:	d110      	bne.n	80031c8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80031a6:	08de      	lsrs	r6, r3, #3
 80031a8:	3608      	adds	r6, #8
 80031aa:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ae:	f003 0407 	and.w	r4, r3, #7
 80031b2:	00a7      	lsls	r7, r4, #2
 80031b4:	240f      	movs	r4, #15
 80031b6:	40bc      	lsls	r4, r7
 80031b8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031bc:	690c      	ldr	r4, [r1, #16]
 80031be:	40bc      	lsls	r4, r7
 80031c0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 80031c4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80031c8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ca:	005f      	lsls	r7, r3, #1
 80031cc:	2603      	movs	r6, #3
 80031ce:	40be      	lsls	r6, r7
 80031d0:	43f6      	mvns	r6, r6
 80031d2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031d6:	684c      	ldr	r4, [r1, #4]
 80031d8:	f004 0403 	and.w	r4, r4, #3
 80031dc:	40bc      	lsls	r4, r7
 80031de:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80031e2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e4:	684c      	ldr	r4, [r1, #4]
 80031e6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80031ea:	2c11      	cmp	r4, #17
 80031ec:	bf18      	it	ne
 80031ee:	f1bc 0f01 	cmpne.w	ip, #1
 80031f2:	d901      	bls.n	80031f8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f4:	2c12      	cmp	r4, #18
 80031f6:	d111      	bne.n	800321c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 80031f8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031fa:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fe:	68cc      	ldr	r4, [r1, #12]
 8003200:	40bc      	lsls	r4, r7
 8003202:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003206:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003208:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800320a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800320e:	684c      	ldr	r4, [r1, #4]
 8003210:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003214:	409a      	lsls	r2, r3
 8003216:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 800321a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800321c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800321e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003220:	688a      	ldr	r2, [r1, #8]
 8003222:	40ba      	lsls	r2, r7
 8003224:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003226:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003228:	684a      	ldr	r2, [r1, #4]
 800322a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800322e:	d0aa      	beq.n	8003186 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <HAL_GPIO_Init+0x1d8>)
 8003232:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003234:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003238:	6454      	str	r4, [r2, #68]	; 0x44
 800323a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800323c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003240:	9201      	str	r2, [sp, #4]
 8003242:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003244:	089c      	lsrs	r4, r3, #2
 8003246:	1ca6      	adds	r6, r4, #2
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_GPIO_Init+0x1d0>)
 800324a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800324e:	f003 0203 	and.w	r2, r3, #3
 8003252:	0096      	lsls	r6, r2, #2
 8003254:	220f      	movs	r2, #15
 8003256:	40b2      	lsls	r2, r6
 8003258:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_GPIO_Init+0x1dc>)
 800325e:	4290      	cmp	r0, r2
 8003260:	f43f af5d 	beq.w	800311e <HAL_GPIO_Init+0x12>
 8003264:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003268:	4290      	cmp	r0, r2
 800326a:	d022      	beq.n	80032b2 <HAL_GPIO_Init+0x1a6>
 800326c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003270:	4290      	cmp	r0, r2
 8003272:	d020      	beq.n	80032b6 <HAL_GPIO_Init+0x1aa>
 8003274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003278:	4290      	cmp	r0, r2
 800327a:	d01e      	beq.n	80032ba <HAL_GPIO_Init+0x1ae>
 800327c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003280:	4290      	cmp	r0, r2
 8003282:	d01c      	beq.n	80032be <HAL_GPIO_Init+0x1b2>
 8003284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003288:	4290      	cmp	r0, r2
 800328a:	d01a      	beq.n	80032c2 <HAL_GPIO_Init+0x1b6>
 800328c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003290:	4290      	cmp	r0, r2
 8003292:	d018      	beq.n	80032c6 <HAL_GPIO_Init+0x1ba>
 8003294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003298:	4290      	cmp	r0, r2
 800329a:	d016      	beq.n	80032ca <HAL_GPIO_Init+0x1be>
 800329c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032a0:	4290      	cmp	r0, r2
 80032a2:	d014      	beq.n	80032ce <HAL_GPIO_Init+0x1c2>
 80032a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032a8:	4290      	cmp	r0, r2
 80032aa:	f43f af36 	beq.w	800311a <HAL_GPIO_Init+0xe>
 80032ae:	220a      	movs	r2, #10
 80032b0:	e736      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032b2:	2201      	movs	r2, #1
 80032b4:	e734      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032b6:	2202      	movs	r2, #2
 80032b8:	e732      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032ba:	2203      	movs	r2, #3
 80032bc:	e730      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032be:	2204      	movs	r2, #4
 80032c0:	e72e      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032c2:	2205      	movs	r2, #5
 80032c4:	e72c      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032c6:	2206      	movs	r2, #6
 80032c8:	e72a      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032ca:	2207      	movs	r2, #7
 80032cc:	e728      	b.n	8003120 <HAL_GPIO_Init+0x14>
 80032ce:	2208      	movs	r2, #8
 80032d0:	e726      	b.n	8003120 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80032d2:	b002      	add	sp, #8
 80032d4:	bcf0      	pop	{r4, r5, r6, r7}
 80032d6:	4770      	bx	lr
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40013c00 	.word	0x40013c00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020000 	.word	0x40020000

080032ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032ec:	6903      	ldr	r3, [r0, #16]
 80032ee:	4219      	tst	r1, r3
 80032f0:	d101      	bne.n	80032f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80032f4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80032f6:	2001      	movs	r0, #1
 80032f8:	4770      	bx	lr

080032fa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032fa:	b912      	cbnz	r2, 8003302 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032fc:	0409      	lsls	r1, r1, #16
 80032fe:	6181      	str	r1, [r0, #24]
  }
}
 8003300:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003302:	6181      	str	r1, [r0, #24]
 8003304:	4770      	bx	lr
	...

08003308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003308:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4203      	tst	r3, r0
 8003310:	d100      	bne.n	8003314 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003312:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003314:	4b02      	ldr	r3, [pc, #8]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003316:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003318:	f006 f916 	bl	8009548 <HAL_GPIO_EXTI_Callback>
}
 800331c:	e7f9      	b.n	8003312 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800331e:	bf00      	nop
 8003320:	40013c00 	.word	0x40013c00

08003324 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003324:	6803      	ldr	r3, [r0, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	f012 0f02 	tst.w	r2, #2
 800332c:	d001      	beq.n	8003332 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	f012 0f01 	tst.w	r2, #1
 800333a:	d103      	bne.n	8003344 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	619a      	str	r2, [r3, #24]
  }
}
 8003344:	4770      	bx	lr

08003346 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003346:	b470      	push	{r4, r5, r6}
 8003348:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800334a:	6805      	ldr	r5, [r0, #0]
 800334c:	6868      	ldr	r0, [r5, #4]
 800334e:	0d74      	lsrs	r4, r6, #21
 8003350:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003354:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003358:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800335c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003360:	f044 0403 	orr.w	r4, r4, #3
 8003364:	ea20 0004 	bic.w	r0, r0, r4
 8003368:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800336c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003370:	4319      	orrs	r1, r3
 8003372:	4331      	orrs	r1, r6
 8003374:	4301      	orrs	r1, r0
 8003376:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003378:	bc70      	pop	{r4, r5, r6}
 800337a:	4770      	bx	lr

0800337c <I2C_IsAcknowledgeFailed>:
{
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003384:	6803      	ldr	r3, [r0, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f013 0f10 	tst.w	r3, #16
 800338c:	d01c      	beq.n	80033c8 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	f012 0f20 	tst.w	r2, #32
 8003396:	d119      	bne.n	80033cc <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003398:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800339c:	d0f7      	beq.n	800338e <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe fe2d 	bl	8001ffc <HAL_GetTick>
 80033a2:	1b80      	subs	r0, r0, r6
 80033a4:	42a8      	cmp	r0, r5
 80033a6:	d801      	bhi.n	80033ac <I2C_IsAcknowledgeFailed+0x30>
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d1f0      	bne.n	800338e <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033ae:	f043 0320 	orr.w	r3, r3, #32
 80033b2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	2320      	movs	r3, #32
 80033b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80033c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
 80033c6:	e020      	b.n	800340a <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80033c8:	2000      	movs	r0, #0
 80033ca:	e01e      	b.n	800340a <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	2210      	movs	r2, #16
 80033ce:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	2520      	movs	r5, #32
 80033d4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff ffa4 	bl	8003324 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80033dc:	6822      	ldr	r2, [r4, #0]
 80033de:	6853      	ldr	r3, [r2, #4]
 80033e0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80033e4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80033e8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	2300      	movs	r3, #0
 8003400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003404:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003408:	2001      	movs	r0, #1
}
 800340a:	bd70      	pop	{r4, r5, r6, pc}

0800340c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f013 0f02 	tst.w	r3, #2
 800341c:	d11d      	bne.n	800345a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	4632      	mov	r2, r6
 8003420:	4629      	mov	r1, r5
 8003422:	4620      	mov	r0, r4
 8003424:	f7ff ffaa 	bl	800337c <I2C_IsAcknowledgeFailed>
 8003428:	b9c8      	cbnz	r0, 800345e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800342a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800342e:	d0f1      	beq.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fe fde4 	bl	8001ffc <HAL_GetTick>
 8003434:	1b80      	subs	r0, r0, r6
 8003436:	42a8      	cmp	r0, r5
 8003438:	d801      	bhi.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800343a:	2d00      	cmp	r5, #0
 800343c:	d1ea      	bne.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003440:	f043 0320 	orr.w	r3, r3, #32
 8003444:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003446:	2320      	movs	r3, #32
 8003448:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	2300      	movs	r3, #0
 800344e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003452:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	e000      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800345a:	2000      	movs	r0, #0
}
 800345c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800345e:	2001      	movs	r0, #1
 8003460:	e7fc      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003462 <I2C_WaitOnFlagUntilTimeout>:
{
 8003462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003464:	4605      	mov	r5, r0
 8003466:	460f      	mov	r7, r1
 8003468:	4616      	mov	r6, r2
 800346a:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	ea37 0303 	bics.w	r3, r7, r3
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	42b3      	cmp	r3, r6
 800347c:	d118      	bne.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800347e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003482:	d0f3      	beq.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fe fdba 	bl	8001ffc <HAL_GetTick>
 8003488:	9b06      	ldr	r3, [sp, #24]
 800348a:	1ac0      	subs	r0, r0, r3
 800348c:	42a0      	cmp	r0, r4
 800348e:	d801      	bhi.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003490:	2c00      	cmp	r4, #0
 8003492:	d1eb      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003496:	f043 0320 	orr.w	r3, r3, #32
 800349a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800349c:	2320      	movs	r3, #32
 800349e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80034a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
 80034ae:	e000      	b.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80034b0:	2000      	movs	r0, #0
}
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034b4 <I2C_RequestMemoryWrite>:
{
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	4604      	mov	r4, r0
 80034ba:	4616      	mov	r6, r2
 80034bc:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <I2C_RequestMemoryWrite+0x6c>)
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c6:	b2ea      	uxtb	r2, r5
 80034c8:	f7ff ff3d 	bl	8003346 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	9a07      	ldr	r2, [sp, #28]
 80034ce:	9906      	ldr	r1, [sp, #24]
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff ff9b 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 80034d6:	b9e8      	cbnz	r0, 8003514 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d8:	2d01      	cmp	r5, #1
 80034da:	d10e      	bne.n	80034fa <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	b2f6      	uxtb	r6, r6
 80034e0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034e2:	9b07      	ldr	r3, [sp, #28]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	9b06      	ldr	r3, [sp, #24]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff ffb8 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b178      	cbz	r0, 8003516 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00d      	b.n	8003516 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	0a32      	lsrs	r2, r6, #8
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003500:	9a07      	ldr	r2, [sp, #28]
 8003502:	9906      	ldr	r1, [sp, #24]
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ff81 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 800350a:	b938      	cbnz	r0, 800351c <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	b2f6      	uxtb	r6, r6
 8003510:	629e      	str	r6, [r3, #40]	; 0x28
 8003512:	e7e6      	b.n	80034e2 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	b002      	add	sp, #8
 800351a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e7fa      	b.n	8003516 <I2C_RequestMemoryWrite+0x62>
 8003520:	80002000 	.word	0x80002000

08003524 <I2C_RequestMemoryRead>:
{
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	4604      	mov	r4, r0
 800352a:	4616      	mov	r6, r2
 800352c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <I2C_RequestMemoryRead+0x6c>)
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	b2ea      	uxtb	r2, r5
 8003536:	f7ff ff06 	bl	8003346 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	9a07      	ldr	r2, [sp, #28]
 800353c:	9906      	ldr	r1, [sp, #24]
 800353e:	4620      	mov	r0, r4
 8003540:	f7ff ff64 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 8003544:	b9e8      	cbnz	r0, 8003582 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003546:	2d01      	cmp	r5, #1
 8003548:	d10e      	bne.n	8003568 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	b2f6      	uxtb	r6, r6
 800354e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003550:	9b07      	ldr	r3, [sp, #28]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	9b06      	ldr	r3, [sp, #24]
 8003556:	2200      	movs	r2, #0
 8003558:	2140      	movs	r1, #64	; 0x40
 800355a:	4620      	mov	r0, r4
 800355c:	f7ff ff81 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	b178      	cbz	r0, 8003584 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e00d      	b.n	8003584 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	0a32      	lsrs	r2, r6, #8
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	9a07      	ldr	r2, [sp, #28]
 8003570:	9906      	ldr	r1, [sp, #24]
 8003572:	4620      	mov	r0, r4
 8003574:	f7ff ff4a 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 8003578:	b938      	cbnz	r0, 800358a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	b2f6      	uxtb	r6, r6
 800357e:	629e      	str	r6, [r3, #40]	; 0x28
 8003580:	e7e6      	b.n	8003550 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
}
 8003584:	4618      	mov	r0, r3
 8003586:	b002      	add	sp, #8
 8003588:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e7fa      	b.n	8003584 <I2C_RequestMemoryRead+0x60>
 800358e:	bf00      	nop
 8003590:	80002000 	.word	0x80002000

08003594 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4605      	mov	r5, r0
 8003598:	460c      	mov	r4, r1
 800359a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f013 0f20 	tst.w	r3, #32
 80035a4:	d11a      	bne.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	4632      	mov	r2, r6
 80035a8:	4621      	mov	r1, r4
 80035aa:	4628      	mov	r0, r5
 80035ac:	f7ff fee6 	bl	800337c <I2C_IsAcknowledgeFailed>
 80035b0:	b9b0      	cbnz	r0, 80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fd23 	bl	8001ffc <HAL_GetTick>
 80035b6:	1b80      	subs	r0, r0, r6
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d801      	bhi.n	80035c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80035bc:	2c00      	cmp	r4, #0
 80035be:	d1ed      	bne.n	800359c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80035c2:	f043 0320 	orr.w	r3, r3, #32
 80035c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	2320      	movs	r3, #32
 80035ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80035d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
}
 80035da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80035dc:	2000      	movs	r0, #0
 80035de:	e7fc      	b.n	80035da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7fa      	b.n	80035da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080035e4 <HAL_I2C_MspInit>:
}
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d057      	beq.n	800369c <HAL_I2C_Init+0xb4>
{
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d041      	beq.n	800367c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	2324      	movs	r3, #36	; 0x24
 80035fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	6813      	ldr	r3, [r2, #0]
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003610:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6893      	ldr	r3, [r2, #8]
 8003616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800361a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361c:	68e3      	ldr	r3, [r4, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d031      	beq.n	8003686 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003622:	68a3      	ldr	r3, [r4, #8]
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800362a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362c:	68e3      	ldr	r3, [r4, #12]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d02f      	beq.n	8003692 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	6851      	ldr	r1, [r2, #4]
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_I2C_Init+0xb8>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	68d3      	ldr	r3, [r2, #12]
 8003640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003644:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003646:	6923      	ldr	r3, [r4, #16]
 8003648:	6962      	ldr	r2, [r4, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	69a1      	ldr	r1, [r4, #24]
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003654:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003656:	69e3      	ldr	r3, [r4, #28]
 8003658:	6a21      	ldr	r1, [r4, #32]
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366a:	2000      	movs	r0, #0
 800366c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	2320      	movs	r3, #32
 8003670:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003674:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800367a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800367c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003680:	f7ff ffb0 	bl	80035e4 <HAL_I2C_MspInit>
 8003684:	e7b8      	b.n	80035f8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e7cc      	b.n	800362c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e7ca      	b.n	8003632 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800369c:	2001      	movs	r0, #1
}
 800369e:	4770      	bx	lr
 80036a0:	02008000 	.word	0x02008000

080036a4 <HAL_I2C_MspDeInit>:
}
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80036a6:	b1a8      	cbz	r0, 80036d4 <HAL_I2C_DeInit+0x2e>
{
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	2324      	movs	r3, #36	; 0x24
 80036ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80036bc:	f7ff fff2 	bl	80036a4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	2000      	movs	r0, #0
 80036c2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80036c4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80036ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80036d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036d4:	2001      	movs	r0, #1
}
 80036d6:	4770      	bx	lr

080036d8 <HAL_I2C_Mem_Write>:
{
 80036d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80036e6:	b2ed      	uxtb	r5, r5
 80036e8:	2d20      	cmp	r5, #32
 80036ea:	f040 80bf 	bne.w	800386c <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 80036ee:	fab6 f586 	clz	r5, r6
 80036f2:	096d      	lsrs	r5, r5, #5
 80036f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80036f6:	2c00      	cmp	r4, #0
 80036f8:	bf08      	it	eq
 80036fa:	2501      	moveq	r5, #1
 80036fc:	b9d5      	cbnz	r5, 8003734 <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 80036fe:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003702:	2c01      	cmp	r4, #1
 8003704:	f000 80b7 	beq.w	8003876 <HAL_I2C_Mem_Write+0x19e>
 8003708:	4698      	mov	r8, r3
 800370a:	4691      	mov	r9, r2
 800370c:	460d      	mov	r5, r1
 800370e:	4604      	mov	r4, r0
 8003710:	f04f 0a01 	mov.w	sl, #1
 8003714:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003718:	f7fe fc70 	bl	8001ffc <HAL_GetTick>
 800371c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800371e:	9000      	str	r0, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	4652      	mov	r2, sl
 8003724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff fe9a 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 800372e:	b130      	cbz	r0, 800373e <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e09c      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003738:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e097      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800373e:	2321      	movs	r3, #33	; 0x21
 8003740:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003744:	2340      	movs	r3, #64	; 0x40
 8003746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374a:	2300      	movs	r3, #0
 800374c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800374e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003750:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003752:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003754:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003756:	9701      	str	r7, [sp, #4]
 8003758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4643      	mov	r3, r8
 800375e:	464a      	mov	r2, r9
 8003760:	4629      	mov	r1, r5
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff fea6 	bl	80034b4 <I2C_RequestMemoryWrite>
 8003768:	b970      	cbnz	r0, 8003788 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d90f      	bls.n	8003792 <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	22ff      	movs	r2, #255	; 0xff
 8003774:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800377e:	4629      	mov	r1, r5
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff fde0 	bl	8003346 <I2C_TransferConfig>
 8003786:	e021      	b.n	80037cc <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800378e:	4653      	mov	r3, sl
 8003790:	e06d      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8003792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003794:	b292      	uxth	r2, r2
 8003796:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4629      	mov	r1, r5
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff fdce 	bl	8003346 <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 80037ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80037ae:	b292      	uxth	r2, r2
 80037b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	4629      	mov	r1, r5
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff fdc1 	bl	8003346 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80037c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d032      	beq.n	8003832 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	463a      	mov	r2, r7
 80037ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff fe1b 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d14f      	bne.n	800387a <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	7812      	ldrb	r2, [r2, #0]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80037e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e4:	3301      	adds	r3, #1
 80037e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80037fa:	b292      	uxth	r2, r2
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	d0e1      	beq.n	80037c4 <HAL_I2C_Mem_Write+0xec>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1df      	bne.n	80037c4 <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003804:	9700      	str	r7, [sp, #0]
 8003806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff fe28 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 8003812:	bba0      	cbnz	r0, 800387e <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2bff      	cmp	r3, #255	; 0xff
 800381a:	d9c7      	bls.n	80037ac <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003828:	4629      	mov	r1, r5
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fd8b 	bl	8003346 <I2C_TransferConfig>
 8003830:	e7c8      	b.n	80037c4 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003832:	463a      	mov	r2, r7
 8003834:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff feac 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	bb00      	cbnz	r0, 8003882 <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	6822      	ldr	r2, [r4, #0]
 8003842:	2120      	movs	r1, #32
 8003844:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	6842      	ldr	r2, [r0, #4]
 800384a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800384e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003852:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003860:	2200      	movs	r2, #0
 8003862:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003866:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800386a:	e000      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
}
 800386e:	4618      	mov	r0, r3
 8003870:	b002      	add	sp, #8
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003876:	2302      	movs	r3, #2
 8003878:	e7f9      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e7f7      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e7f5      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e7f3      	b.n	800386e <HAL_I2C_Mem_Write+0x196>
	...

08003888 <HAL_I2C_Mem_Read>:
{
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8003896:	b2ed      	uxtb	r5, r5
 8003898:	2d20      	cmp	r5, #32
 800389a:	f040 80c1 	bne.w	8003a20 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 800389e:	fab6 f586 	clz	r5, r6
 80038a2:	096d      	lsrs	r5, r5, #5
 80038a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80038a6:	2c00      	cmp	r4, #0
 80038a8:	bf08      	it	eq
 80038aa:	2501      	moveq	r5, #1
 80038ac:	b9d5      	cbnz	r5, 80038e4 <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 80038ae:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80038b2:	2c01      	cmp	r4, #1
 80038b4:	f000 80b9 	beq.w	8003a2a <HAL_I2C_Mem_Read+0x1a2>
 80038b8:	4698      	mov	r8, r3
 80038ba:	4691      	mov	r9, r2
 80038bc:	460d      	mov	r5, r1
 80038be:	4604      	mov	r4, r0
 80038c0:	f04f 0a01 	mov.w	sl, #1
 80038c4:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80038c8:	f7fe fb98 	bl	8001ffc <HAL_GetTick>
 80038cc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038ce:	9000      	str	r0, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	4652      	mov	r2, sl
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff fdc2 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80038de:	b130      	cbz	r0, 80038ee <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e09e      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e8:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e099      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038ee:	2322      	movs	r3, #34	; 0x22
 80038f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80038fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003900:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003902:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003904:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003906:	9701      	str	r7, [sp, #4]
 8003908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4643      	mov	r3, r8
 800390e:	464a      	mov	r2, r9
 8003910:	4629      	mov	r1, r5
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff fe06 	bl	8003524 <I2C_RequestMemoryRead>
 8003918:	b970      	cbnz	r0, 8003938 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2bff      	cmp	r3, #255	; 0xff
 8003920:	d90f      	bls.n	8003942 <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003926:	4b45      	ldr	r3, [pc, #276]	; (8003a3c <HAL_I2C_Mem_Read+0x1b4>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800392e:	4629      	mov	r1, r5
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff fd08 	bl	8003346 <I2C_TransferConfig>
 8003936:	e021      	b.n	800397c <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800393e:	4653      	mov	r3, sl
 8003940:	e06f      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8003942:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003944:	b292      	uxth	r2, r2
 8003946:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003948:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_I2C_Mem_Read+0x1b4>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4629      	mov	r1, r5
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fcf6 	bl	8003346 <I2C_TransferConfig>
 800395a:	e00f      	b.n	800397c <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 800395c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800395e:	b292      	uxth	r2, r2
 8003960:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4629      	mov	r1, r5
 800396e:	4620      	mov	r0, r4
 8003970:	f7ff fce9 	bl	8003346 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003974:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d034      	beq.n	80039e6 <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800397c:	9700      	str	r7, [sp, #0]
 800397e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003980:	2200      	movs	r2, #0
 8003982:	2104      	movs	r1, #4
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff fd6c 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 800398a:	2800      	cmp	r0, #0
 800398c:	d14f      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003994:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003998:	3301      	adds	r3, #1
 800399a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800399c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80039a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039a6:	3a01      	subs	r2, #1
 80039a8:	b292      	uxth	r2, r2
 80039aa:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039ae:	b292      	uxth	r2, r2
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	d0df      	beq.n	8003974 <HAL_I2C_Mem_Read+0xec>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1dd      	bne.n	8003974 <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039b8:	9700      	str	r7, [sp, #0]
 80039ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff fd4e 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	bba0      	cbnz	r0, 8003a32 <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2bff      	cmp	r3, #255	; 0xff
 80039ce:	d9c5      	bls.n	800395c <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039dc:	4629      	mov	r1, r5
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fcb1 	bl	8003346 <I2C_TransferConfig>
 80039e4:	e7c6      	b.n	8003974 <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e6:	463a      	mov	r2, r7
 80039e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7ff fdd2 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	bb00      	cbnz	r0, 8003a36 <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	2120      	movs	r1, #32
 80039f8:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	6842      	ldr	r2, [r0, #4]
 80039fe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003a02:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003a06:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a14:	2200      	movs	r2, #0
 8003a16:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003a1a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003a1e:	e000      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	b002      	add	sp, #8
 8003a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e7f9      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e7f7      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e7f5      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e7f3      	b.n	8003a22 <HAL_I2C_Mem_Read+0x19a>
 8003a3a:	bf00      	nop
 8003a3c:	80002400 	.word	0x80002400

08003a40 <HAL_I2C_GetState>:
  return hi2c->State;
 8003a40:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003a44:	4770      	bx	lr
	...

08003a48 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a48:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a4a:	684d      	ldr	r5, [r1, #4]
 8003a4c:	6804      	ldr	r4, [r0, #0]
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003a54:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a56:	01d2      	lsls	r2, r2, #7
 8003a58:	4414      	add	r4, r2
 8003a5a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a62:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a66:	680b      	ldr	r3, [r1, #0]
 8003a68:	6804      	ldr	r4, [r0, #0]
 8003a6a:	68e6      	ldr	r6, [r4, #12]
 8003a6c:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003a70:	4433      	add	r3, r6
 8003a72:	3301      	adds	r3, #1
 8003a74:	4414      	add	r4, r2
 8003a76:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003a7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a7e:	68cd      	ldr	r5, [r1, #12]
 8003a80:	6804      	ldr	r4, [r0, #0]
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a88:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a8a:	4414      	add	r4, r2
 8003a8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003a90:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a94:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003a98:	688b      	ldr	r3, [r1, #8]
 8003a9a:	6804      	ldr	r4, [r0, #0]
 8003a9c:	68e6      	ldr	r6, [r4, #12]
 8003a9e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003aa2:	4433      	add	r3, r6
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4414      	add	r4, r2
 8003aa8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003aac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003ab8:	f024 0407 	bic.w	r4, r4, #7
 8003abc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ac0:	6803      	ldr	r3, [r0, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	690c      	ldr	r4, [r1, #16]
 8003ac6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003aca:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ace:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ad2:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003ad4:	6805      	ldr	r5, [r0, #0]
 8003ad6:	4415      	add	r5, r2
 8003ad8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003adc:	2400      	movs	r4, #0
 8003ade:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003ae2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003ae6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003aea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003aee:	6805      	ldr	r5, [r0, #0]
 8003af0:	4415      	add	r5, r2
 8003af2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003af6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003afa:	6803      	ldr	r3, [r0, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8003b02:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003b06:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b0a:	6803      	ldr	r3, [r0, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	694d      	ldr	r5, [r1, #20]
 8003b10:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b14:	6803      	ldr	r3, [r0, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003b1c:	4d2d      	ldr	r5, [pc, #180]	; (8003bd4 <LTDC_SetConfig+0x18c>)
 8003b1e:	4035      	ands	r5, r6
 8003b20:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b24:	69cd      	ldr	r5, [r1, #28]
 8003b26:	6a0e      	ldr	r6, [r1, #32]
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4335      	orrs	r5, r6
 8003b2e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8003b3a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003b3e:	6803      	ldr	r3, [r0, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003b44:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	b16b      	cbz	r3, 8003b68 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d03a      	beq.n	8003bc6 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	bf18      	it	ne
 8003b54:	2b04      	cmpne	r3, #4
 8003b56:	d038      	beq.n	8003bca <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d038      	beq.n	8003bce <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b5c:	2b07      	cmp	r3, #7
 8003b5e:	d001      	beq.n	8003b64 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e002      	b.n	8003b6a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003b64:	2302      	movs	r3, #2
 8003b66:	e000      	b.n	8003b6a <LTDC_SetConfig+0x122>
    tmp = 4U;
 8003b68:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b6a:	6804      	ldr	r4, [r0, #0]
 8003b6c:	4414      	add	r4, r2
 8003b6e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8003b72:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003b76:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b7a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003b7c:	fb03 f504 	mul.w	r5, r3, r4
 8003b80:	684c      	ldr	r4, [r1, #4]
 8003b82:	680e      	ldr	r6, [r1, #0]
 8003b84:	1ba4      	subs	r4, r4, r6
 8003b86:	fb03 f304 	mul.w	r3, r3, r4
 8003b8a:	3303      	adds	r3, #3
 8003b8c:	6804      	ldr	r4, [r0, #0]
 8003b8e:	4414      	add	r4, r2
 8003b90:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003b94:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <LTDC_SetConfig+0x190>)
 8003ba2:	402c      	ands	r4, r5
 8003ba4:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003bae:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	441a      	add	r2, r3
 8003bb6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8003bc2:	bcf0      	pop	{r4, r5, r6, r7}
 8003bc4:	4770      	bx	lr
    tmp = 3U;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e7cf      	b.n	8003b6a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e7cd      	b.n	8003b6a <LTDC_SetConfig+0x122>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e7cb      	b.n	8003b6a <LTDC_SetConfig+0x122>
 8003bd2:	bf00      	nop
 8003bd4:	fffff8f8 	.word	0xfffff8f8
 8003bd8:	fffff800 	.word	0xfffff800

08003bdc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d072      	beq.n	8003cc6 <HAL_LTDC_Init+0xea>
{
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003be4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d067      	beq.n	8003cbc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	6993      	ldr	r3, [r2, #24]
 8003bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bfa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	698a      	ldr	r2, [r1, #24]
 8003c00:	6863      	ldr	r3, [r4, #4]
 8003c02:	68a0      	ldr	r0, [r4, #8]
 8003c04:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c06:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c08:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c0a:	6920      	ldr	r0, [r4, #16]
 8003c0c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c12:	6821      	ldr	r1, [r4, #0]
 8003c14:	688a      	ldr	r2, [r1, #8]
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_LTDC_Init+0xf0>)
 8003c18:	401a      	ands	r2, r3
 8003c1a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c1c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	6882      	ldr	r2, [r0, #8]
 8003c22:	69a1      	ldr	r1, [r4, #24]
 8003c24:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c2c:	6821      	ldr	r1, [r4, #0]
 8003c2e:	68ca      	ldr	r2, [r1, #12]
 8003c30:	401a      	ands	r2, r3
 8003c32:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c34:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	68c2      	ldr	r2, [r0, #12]
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003c40:	430a      	orrs	r2, r1
 8003c42:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	690a      	ldr	r2, [r1, #16]
 8003c48:	401a      	ands	r2, r3
 8003c4a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	6902      	ldr	r2, [r0, #16]
 8003c52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c54:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c5c:	6821      	ldr	r1, [r4, #0]
 8003c5e:	694a      	ldr	r2, [r1, #20]
 8003c60:	4013      	ands	r3, r2
 8003c62:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	694b      	ldr	r3, [r1, #20]
 8003c6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c6c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c70:	4313      	orrs	r3, r2
 8003c72:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c74:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c78:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003c7c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c7e:	6821      	ldr	r1, [r4, #0]
 8003c80:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003c82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003c86:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c88:	6821      	ldr	r1, [r4, #0]
 8003c8a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003c8c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c90:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003c94:	4303      	orrs	r3, r0
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003c9e:	f043 0306 	orr.w	r3, r3, #6
 8003ca2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	6993      	ldr	r3, [r2, #24]
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003cbc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003cc0:	f005 f9de 	bl	8009080 <HAL_LTDC_MspInit>
 8003cc4:	e792      	b.n	8003bec <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	f000f800 	.word	0xf000f800

08003cd0 <HAL_LTDC_ErrorCallback>:
}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_LTDC_LineEventCallback>:
}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_LTDC_ReloadEventCallback>:
}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_LTDC_IRQHandler>:
{
 8003cd6:	b570      	push	{r4, r5, r6, lr}
 8003cd8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003cda:	6803      	ldr	r3, [r0, #0]
 8003cdc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003cde:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ce0:	f015 0f04 	tst.w	r5, #4
 8003ce4:	d002      	beq.n	8003cec <HAL_LTDC_IRQHandler+0x16>
 8003ce6:	f016 0f04 	tst.w	r6, #4
 8003cea:	d112      	bne.n	8003d12 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003cec:	f015 0f02 	tst.w	r5, #2
 8003cf0:	d002      	beq.n	8003cf8 <HAL_LTDC_IRQHandler+0x22>
 8003cf2:	f016 0f02 	tst.w	r6, #2
 8003cf6:	d121      	bne.n	8003d3c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003cf8:	f015 0f01 	tst.w	r5, #1
 8003cfc:	d002      	beq.n	8003d04 <HAL_LTDC_IRQHandler+0x2e>
 8003cfe:	f016 0f01 	tst.w	r6, #1
 8003d02:	d132      	bne.n	8003d6a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003d04:	f015 0f08 	tst.w	r5, #8
 8003d08:	d002      	beq.n	8003d10 <HAL_LTDC_IRQHandler+0x3a>
 8003d0a:	f016 0f08 	tst.w	r6, #8
 8003d0e:	d13d      	bne.n	8003d8c <HAL_LTDC_IRQHandler+0xb6>
}
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d14:	f022 0204 	bic.w	r2, r2, #4
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d20:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d2c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003d30:	2300      	movs	r3, #0
 8003d32:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003d36:	f7ff ffcb 	bl	8003cd0 <HAL_LTDC_ErrorCallback>
 8003d3a:	e7d7      	b.n	8003cec <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003d4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d56:	2304      	movs	r3, #4
 8003d58:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7ff ffb4 	bl	8003cd0 <HAL_LTDC_ErrorCallback>
 8003d68:	e7c6      	b.n	8003cf8 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	2301      	movs	r3, #1
 8003d78:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d7a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff ffa4 	bl	8003cd2 <HAL_LTDC_LineEventCallback>
 8003d8a:	e7bb      	b.n	8003d04 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003d90:	f023 0308 	bic.w	r3, r3, #8
 8003d94:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003da2:	2300      	movs	r3, #0
 8003da4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff ff93 	bl	8003cd4 <HAL_LTDC_ReloadEventCallback>
}
 8003dae:	e7af      	b.n	8003d10 <HAL_LTDC_IRQHandler+0x3a>

08003db0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003db0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d027      	beq.n	8003e08 <HAL_LTDC_ConfigLayer+0x58>
{
 8003db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbc:	4694      	mov	ip, r2
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003dc2:	f04f 0801 	mov.w	r8, #1
 8003dc6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003dd0:	2434      	movs	r4, #52	; 0x34
 8003dd2:	fb04 0402 	mla	r4, r4, r2, r0
 8003dd6:	3438      	adds	r4, #56	; 0x38
 8003dd8:	460d      	mov	r5, r1
 8003dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003dea:	4662      	mov	r2, ip
 8003dec:	4639      	mov	r1, r7
 8003dee:	4630      	mov	r0, r6
 8003df0:	f7ff fe2a 	bl	8003a48 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003df4:	6833      	ldr	r3, [r6, #0]
 8003df6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003dfa:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003e08:	2002      	movs	r0, #2
}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_LTDC_GetState>:
  return hltdc->State;
 8003e0c:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e14:	b510      	push	{r4, lr}
 8003e16:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_PWREx_EnableOverDrive+0x74>)
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e2c:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_PWREx_EnableOverDrive+0x78>)
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e36:	f7fe f8e1 	bl	8001ffc <HAL_GetTick>
 8003e3a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_PWREx_EnableOverDrive+0x78>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e44:	d108      	bne.n	8003e58 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e46:	f7fe f8d9 	bl	8001ffc <HAL_GetTick>
 8003e4a:	1b00      	subs	r0, r0, r4
 8003e4c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e50:	d9f4      	bls.n	8003e3c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003e52:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003e54:	b002      	add	sp, #8
 8003e56:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_PWREx_EnableOverDrive+0x78>)
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e60:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003e62:	f7fe f8cb 	bl	8001ffc <HAL_GetTick>
 8003e66:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_PWREx_EnableOverDrive+0x78>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e70:	d107      	bne.n	8003e82 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e72:	f7fe f8c3 	bl	8001ffc <HAL_GetTick>
 8003e76:	1b00      	subs	r0, r0, r4
 8003e78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e7c:	d9f4      	bls.n	8003e68 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003e7e:	2003      	movs	r0, #3
 8003e80:	e7e8      	b.n	8003e54 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003e82:	2000      	movs	r0, #0
 8003e84:	e7e6      	b.n	8003e54 <HAL_PWREx_EnableOverDrive+0x40>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e90:	2800      	cmp	r0, #0
 8003e92:	f000 81db 	beq.w	800424c <HAL_RCC_OscConfig+0x3bc>
{
 8003e96:	b570      	push	{r4, r5, r6, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9c:	6803      	ldr	r3, [r0, #0]
 8003e9e:	f013 0f01 	tst.w	r3, #1
 8003ea2:	d029      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ea4:	4ba2      	ldr	r3, [pc, #648]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d01a      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb0:	4b9f      	ldr	r3, [pc, #636]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d00f      	beq.n	8003edc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d040      	beq.n	8003f46 <HAL_RCC_OscConfig+0xb6>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d154      	bne.n	8003f72 <HAL_RCC_OscConfig+0xe2>
 8003ec8:	4b99      	ldr	r3, [pc, #612]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e039      	b.n	8003f50 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003ee4:	d0ea      	beq.n	8003ebc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	4b92      	ldr	r3, [pc, #584]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003eee:	d003      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x68>
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 81ac 	beq.w	8004250 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	f013 0f02 	tst.w	r3, #2
 8003efe:	d075      	beq.n	8003fec <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f00:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f013 0f0c 	tst.w	r3, #12
 8003f08:	d05e      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d053      	beq.n	8003fbe <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f16:	68e3      	ldr	r3, [r4, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 808a 	beq.w	8004032 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1e:	4a84      	ldr	r2, [pc, #528]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f20:	6813      	ldr	r3, [r2, #0]
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe f868 	bl	8001ffc <HAL_GetTick>
 8003f2c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	4b80      	ldr	r3, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f013 0f02 	tst.w	r3, #2
 8003f36:	d173      	bne.n	8004020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f38:	f7fe f860 	bl	8001ffc <HAL_GetTick>
 8003f3c:	1b40      	subs	r0, r0, r5
 8003f3e:	2802      	cmp	r0, #2
 8003f40:	d9f5      	bls.n	8003f2e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8003f42:	2003      	movs	r0, #3
 8003f44:	e187      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f46:	4a7a      	ldr	r2, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f48:	6813      	ldr	r3, [r2, #0]
 8003f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f50:	6863      	ldr	r3, [r4, #4]
 8003f52:	b32b      	cbz	r3, 8003fa0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003f54:	f7fe f852 	bl	8001ffc <HAL_GetTick>
 8003f58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f62:	d1c9      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe f84a 	bl	8001ffc <HAL_GetTick>
 8003f68:	1b40      	subs	r0, r0, r5
 8003f6a:	2864      	cmp	r0, #100	; 0x64
 8003f6c:	d9f5      	bls.n	8003f5a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003f6e:	2003      	movs	r0, #3
 8003f70:	e171      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f76:	d009      	beq.n	8003f8c <HAL_RCC_OscConfig+0xfc>
 8003f78:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e7e1      	b.n	8003f50 <HAL_RCC_OscConfig+0xc0>
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e7d7      	b.n	8003f50 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f82c 	bl	8001ffc <HAL_GetTick>
 8003fa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fae:	d0a3      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f824 	bl	8001ffc <HAL_GetTick>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	2864      	cmp	r0, #100	; 0x64
 8003fb8:	d9f5      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
 8003fbc:	e14b      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fc6:	d1a6      	bne.n	8003f16 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc8:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f013 0f02 	tst.w	r3, #2
 8003fd0:	d004      	beq.n	8003fdc <HAL_RCC_OscConfig+0x14c>
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8003fd8:	2001      	movs	r0, #1
 8003fda:	e13c      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003fe4:	6921      	ldr	r1, [r4, #16]
 8003fe6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fea:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	f013 0f08 	tst.w	r3, #8
 8003ff2:	d046      	beq.n	8004082 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff4:	6963      	ldr	r3, [r4, #20]
 8003ff6:	b383      	cbz	r3, 800405a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff8:	4a4d      	ldr	r2, [pc, #308]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003ffa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd fffb 	bl	8001ffc <HAL_GetTick>
 8004006:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f013 0f02 	tst.w	r3, #2
 8004010:	d137      	bne.n	8004082 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd fff3 	bl	8001ffc <HAL_GetTick>
 8004016:	1b40      	subs	r0, r0, r5
 8004018:	2802      	cmp	r0, #2
 800401a:	d9f5      	bls.n	8004008 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800401c:	2003      	movs	r0, #3
 800401e:	e11a      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004028:	6921      	ldr	r1, [r4, #16]
 800402a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	e7dc      	b.n	8003fec <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800403c:	f7fd ffde 	bl	8001ffc <HAL_GetTick>
 8004040:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f013 0f02 	tst.w	r3, #2
 800404a:	d0cf      	beq.n	8003fec <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404c:	f7fd ffd6 	bl	8001ffc <HAL_GetTick>
 8004050:	1b40      	subs	r0, r0, r5
 8004052:	2802      	cmp	r0, #2
 8004054:	d9f5      	bls.n	8004042 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8004056:	2003      	movs	r0, #3
 8004058:	e0fd      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405a:	4a35      	ldr	r2, [pc, #212]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 800405c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd ffca 	bl	8001ffc <HAL_GetTick>
 8004068:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	f013 0f02 	tst.w	r3, #2
 8004072:	d006      	beq.n	8004082 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd ffc2 	bl	8001ffc <HAL_GetTick>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	2802      	cmp	r0, #2
 800407c:	d9f5      	bls.n	800406a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800407e:	2003      	movs	r0, #3
 8004080:	e0e9      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f013 0f04 	tst.w	r3, #4
 8004088:	d07e      	beq.n	8004188 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004092:	d11e      	bne.n	80040d2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004098:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040a8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_OscConfig+0x2a4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d021      	beq.n	80040fe <HAL_RCC_OscConfig+0x26e>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13c      	bne.n	8004138 <HAL_RCC_OscConfig+0x2a8>
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 80040c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
 80040c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ca:	f022 0204 	bic.w	r2, r2, #4
 80040ce:	671a      	str	r2, [r3, #112]	; 0x70
 80040d0:	e01a      	b.n	8004108 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80040d2:	2500      	movs	r5, #0
 80040d4:	e7e9      	b.n	80040aa <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x2a4>)
 80040d8:	6813      	ldr	r3, [r2, #0]
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80040e0:	f7fd ff8c 	bl	8001ffc <HAL_GetTick>
 80040e4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_RCC_OscConfig+0x2a4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040ee:	d1e1      	bne.n	80040b4 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040f0:	f7fd ff84 	bl	8001ffc <HAL_GetTick>
 80040f4:	1b80      	subs	r0, r0, r6
 80040f6:	2864      	cmp	r0, #100	; 0x64
 80040f8:	d9f5      	bls.n	80040e6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80040fa:	2003      	movs	r0, #3
 80040fc:	e0ab      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004100:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	b35b      	cbz	r3, 8004164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd ff76 	bl	8001ffc <HAL_GetTick>
 8004110:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f013 0f02 	tst.w	r3, #2
 800411a:	d134      	bne.n	8004186 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd ff6e 	bl	8001ffc <HAL_GetTick>
 8004120:	1b80      	subs	r0, r0, r6
 8004122:	f241 3388 	movw	r3, #5000	; 0x1388
 8004126:	4298      	cmp	r0, r3
 8004128:	d9f3      	bls.n	8004112 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800412a:	2003      	movs	r0, #3
 800412c:	e093      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	2b05      	cmp	r3, #5
 800413a:	d009      	beq.n	8004150 <HAL_RCC_OscConfig+0x2c0>
 800413c:	4b48      	ldr	r3, [pc, #288]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 800413e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	671a      	str	r2, [r3, #112]	; 0x70
 8004146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	671a      	str	r2, [r3, #112]	; 0x70
 800414e:	e7db      	b.n	8004108 <HAL_RCC_OscConfig+0x278>
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 8004152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004154:	f042 0204 	orr.w	r2, r2, #4
 8004158:	671a      	str	r2, [r3, #112]	; 0x70
 800415a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	671a      	str	r2, [r3, #112]	; 0x70
 8004162:	e7d1      	b.n	8004108 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd ff4a 	bl	8001ffc <HAL_GetTick>
 8004168:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f013 0f02 	tst.w	r3, #2
 8004172:	d008      	beq.n	8004186 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd ff42 	bl	8001ffc <HAL_GetTick>
 8004178:	1b80      	subs	r0, r0, r6
 800417a:	f241 3388 	movw	r3, #5000	; 0x1388
 800417e:	4298      	cmp	r0, r3
 8004180:	d9f3      	bls.n	800416a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8004182:	2003      	movs	r0, #3
 8004184:	e067      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	b9f5      	cbnz	r5, 80041c6 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004188:	69a3      	ldr	r3, [r4, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d062      	beq.n	8004254 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418e:	4a34      	ldr	r2, [pc, #208]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 8004190:	6892      	ldr	r2, [r2, #8]
 8004192:	f002 020c 	and.w	r2, r2, #12
 8004196:	2a08      	cmp	r2, #8
 8004198:	d05f      	beq.n	800425a <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419a:	2b02      	cmp	r3, #2
 800419c:	d019      	beq.n	80041d2 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4a30      	ldr	r2, [pc, #192]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 80041a0:	6813      	ldr	r3, [r2, #0]
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd ff28 	bl	8001ffc <HAL_GetTick>
 80041ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041b6:	d047      	beq.n	8004248 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd ff20 	bl	8001ffc <HAL_GetTick>
 80041bc:	1b00      	subs	r0, r0, r4
 80041be:	2802      	cmp	r0, #2
 80041c0:	d9f5      	bls.n	80041ae <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80041c2:	2003      	movs	r0, #3
 80041c4:	e047      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 80041c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
 80041d0:	e7da      	b.n	8004188 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 80041d4:	6813      	ldr	r3, [r2, #0]
 80041d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041dc:	f7fd ff0e 	bl	8001ffc <HAL_GetTick>
 80041e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041ea:	d006      	beq.n	80041fa <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd ff06 	bl	8001ffc <HAL_GetTick>
 80041f0:	1b40      	subs	r0, r0, r5
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d9f5      	bls.n	80041e2 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80041f6:	2003      	movs	r0, #3
 80041f8:	e02d      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041fa:	69e3      	ldr	r3, [r4, #28]
 80041fc:	6a22      	ldr	r2, [r4, #32]
 80041fe:	4313      	orrs	r3, r2
 8004200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004202:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004206:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004208:	0852      	lsrs	r2, r2, #1
 800420a:	3a01      	subs	r2, #1
 800420c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004210:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800421a:	4a11      	ldr	r2, [pc, #68]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 800421c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004224:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004226:	f7fd fee9 	bl	8001ffc <HAL_GetTick>
 800422a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_RCC_OscConfig+0x3d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd fee1 	bl	8001ffc <HAL_GetTick>
 800423a:	1b00      	subs	r0, r0, r4
 800423c:	2802      	cmp	r0, #2
 800423e:	d9f5      	bls.n	800422c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8004240:	2003      	movs	r0, #3
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004244:	2000      	movs	r0, #0
 8004246:	e006      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
 8004248:	2000      	movs	r0, #0
 800424a:	e004      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
}
 800424e:	4770      	bx	lr
        return HAL_ERROR;
 8004250:	2001      	movs	r0, #1
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8004254:	2000      	movs	r0, #0
}
 8004256:	b002      	add	sp, #8
 8004258:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800425a:	2001      	movs	r0, #1
 800425c:	e7fb      	b.n	8004256 <HAL_RCC_OscConfig+0x3c6>
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800

08004264 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b04      	cmp	r3, #4
 800426e:	d044      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x96>
 8004270:	2b08      	cmp	r3, #8
 8004272:	d001      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4823      	ldr	r0, [pc, #140]	; (8004304 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004276:	4770      	bx	lr
{
 8004278:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004294:	2300      	movs	r3, #0
 8004296:	481c      	ldr	r0, [pc, #112]	; (8004308 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004298:	fba1 0100 	umull	r0, r1, r1, r0
 800429c:	f7fc fe72 	bl	8000f84 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80042ac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80042b0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80042bc:	461e      	mov	r6, r3
 80042be:	2700      	movs	r7, #0
 80042c0:	015c      	lsls	r4, r3, #5
 80042c2:	2500      	movs	r5, #0
 80042c4:	1ae4      	subs	r4, r4, r3
 80042c6:	eb65 0507 	sbc.w	r5, r5, r7
 80042ca:	01a9      	lsls	r1, r5, #6
 80042cc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80042d0:	01a0      	lsls	r0, r4, #6
 80042d2:	1b00      	subs	r0, r0, r4
 80042d4:	eb61 0105 	sbc.w	r1, r1, r5
 80042d8:	00cb      	lsls	r3, r1, #3
 80042da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80042de:	00c4      	lsls	r4, r0, #3
 80042e0:	19a0      	adds	r0, r4, r6
 80042e2:	eb43 0107 	adc.w	r1, r3, r7
 80042e6:	028b      	lsls	r3, r1, #10
 80042e8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80042ec:	0284      	lsls	r4, r0, #10
 80042ee:	4620      	mov	r0, r4
 80042f0:	4619      	mov	r1, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	f7fc fe46 	bl	8000f84 <__aeabi_uldivmod>
 80042f8:	e7d2      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	017d7840 	.word	0x017d7840

0800430c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800430c:	2800      	cmp	r0, #0
 800430e:	f000 80a2 	beq.w	8004456 <HAL_RCC_ClockConfig+0x14a>
{
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004316:	4b52      	ldr	r3, [pc, #328]	; (8004460 <HAL_RCC_ClockConfig+0x154>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	428b      	cmp	r3, r1
 8004320:	d20c      	bcs.n	800433c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <HAL_RCC_ClockConfig+0x154>)
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	f023 030f 	bic.w	r3, r3, #15
 800432a:	430b      	orrs	r3, r1
 800432c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	428b      	cmp	r3, r1
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004338:	2001      	movs	r0, #1
}
 800433a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	f013 0f02 	tst.w	r3, #2
 8004342:	d017      	beq.n	8004374 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	f013 0f04 	tst.w	r3, #4
 8004348:	d004      	beq.n	8004354 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434a:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 800434c:	6893      	ldr	r3, [r2, #8]
 800434e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004352:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f013 0f08 	tst.w	r3, #8
 800435a:	d004      	beq.n	8004366 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4a41      	ldr	r2, [pc, #260]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 800435e:	6893      	ldr	r3, [r2, #8]
 8004360:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004364:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004366:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 8004368:	6893      	ldr	r3, [r2, #8]
 800436a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436e:	68a0      	ldr	r0, [r4, #8]
 8004370:	4303      	orrs	r3, r0
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	f013 0f01 	tst.w	r3, #1
 800437c:	d031      	beq.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004384:	2b02      	cmp	r3, #2
 8004386:	d025      	beq.n	80043d4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004388:	4a36      	ldr	r2, [pc, #216]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	f012 0f02 	tst.w	r2, #2
 8004390:	d063      	beq.n	800445a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004392:	4934      	ldr	r1, [pc, #208]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 8004394:	688a      	ldr	r2, [r1, #8]
 8004396:	f022 0203 	bic.w	r2, r2, #3
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800439e:	f7fd fe2d 	bl	8001ffc <HAL_GetTick>
 80043a2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	6862      	ldr	r2, [r4, #4]
 80043ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043b2:	d016      	beq.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b4:	f7fd fe22 	bl	8001ffc <HAL_GetTick>
 80043b8:	1b80      	subs	r0, r0, r6
 80043ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80043be:	4298      	cmp	r0, r3
 80043c0:	d9f0      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80043c2:	2003      	movs	r0, #3
 80043c4:	e7b9      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80043ce:	d1e0      	bne.n	8004392 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e7b2      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80043dc:	d1d9      	bne.n	8004392 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80043de:	2001      	movs	r0, #1
 80043e0:	e7ab      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e2:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <HAL_RCC_ClockConfig+0x154>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	42ab      	cmp	r3, r5
 80043ec:	d90c      	bls.n	8004408 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_RCC_ClockConfig+0x154>)
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	f023 030f 	bic.w	r3, r3, #15
 80043f6:	432b      	orrs	r3, r5
 80043f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	42ab      	cmp	r3, r5
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8004404:	2001      	movs	r0, #1
 8004406:	e798      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	f013 0f04 	tst.w	r3, #4
 800440e:	d006      	beq.n	800441e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 8004412:	6893      	ldr	r3, [r2, #8]
 8004414:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004418:	68e1      	ldr	r1, [r4, #12]
 800441a:	430b      	orrs	r3, r1
 800441c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f013 0f08 	tst.w	r3, #8
 8004424:	d007      	beq.n	8004436 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004426:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 8004428:	6893      	ldr	r3, [r2, #8]
 800442a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800442e:	6921      	ldr	r1, [r4, #16]
 8004430:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004434:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f7ff ff15 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x158>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x15c>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	40d8      	lsrs	r0, r3
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCC_ClockConfig+0x160>)
 800444a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800444c:	2000      	movs	r0, #0
 800444e:	f005 f999 	bl	8009784 <HAL_InitTick>
  return HAL_OK;
 8004452:	2000      	movs	r0, #0
 8004454:	e771      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004456:	2001      	movs	r0, #1
}
 8004458:	4770      	bx	lr
        return HAL_ERROR;
 800445a:	2001      	movs	r0, #1
 800445c:	e76d      	b.n	800433a <HAL_RCC_ClockConfig+0x2e>
 800445e:	bf00      	nop
 8004460:	40023c00 	.word	0x40023c00
 8004464:	40023800 	.word	0x40023800
 8004468:	08010a0c 	.word	0x08010a0c
 800446c:	20000058 	.word	0x20000058

08004470 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <HAL_RCC_GetHCLKFreq+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000058 	.word	0x20000058

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800447e:	f7ff fff7 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800448a:	4a03      	ldr	r2, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800448c:	5cd3      	ldrb	r3, [r2, r3]
}
 800448e:	40d8      	lsrs	r0, r3
 8004490:	bd08      	pop	{r3, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	08010a1c 	.word	0x08010a1c

0800449c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800449c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449e:	f7ff ffe7 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80044aa:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80044ae:	40d8      	lsrs	r0, r3
 80044b0:	bd08      	pop	{r3, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08010a1c 	.word	0x08010a1c

080044bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044bc:	230f      	movs	r3, #15
 80044be:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetClockConfig+0x34>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	f002 0203 	and.w	r2, r2, #3
 80044c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80044d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80044d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80044e2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_GetClockConfig+0x38>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	600b      	str	r3, [r1, #0]
}
 80044ee:	4770      	bx	lr
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40023c00 	.word	0x40023c00

080044f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044fe:	6803      	ldr	r3, [r0, #0]
 8004500:	f013 0f01 	tst.w	r3, #1
 8004504:	d00c      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004506:	4baf      	ldr	r3, [pc, #700]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004518:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800451a:	b1c3      	cbz	r3, 800454e <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800451c:	2600      	movs	r6, #0
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004520:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004528:	d015      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800452a:	4aa6      	ldr	r2, [pc, #664]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800452c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004536:	430b      	orrs	r3, r1
 8004538:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800453c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800453e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004542:	d006      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 811b 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 800454a:	2500      	movs	r5, #0
 800454c:	e004      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800454e:	2601      	movs	r6, #1
 8004550:	e7e7      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8004552:	2601      	movs	r6, #1
 8004554:	e7f6      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8004556:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800455e:	d00f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004560:	4a98      	ldr	r2, [pc, #608]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004562:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004566:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800456a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800456c:	430b      	orrs	r3, r1
 800456e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004578:	f000 8104 	beq.w	8004784 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800457c:	b903      	cbnz	r3, 8004580 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800457e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004586:	d000      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8004588:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800458a:	f013 0f20 	tst.w	r3, #32
 800458e:	f040 80fb 	bne.w	8004788 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	f013 0f10 	tst.w	r3, #16
 8004598:	d00c      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800459a:	4b8a      	ldr	r3, [pc, #552]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800459c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80045a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80045a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045ae:	430a      	orrs	r2, r1
 80045b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80045ba:	d008      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045bc:	4a81      	ldr	r2, [pc, #516]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80045c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80045c8:	430b      	orrs	r3, r1
 80045ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d6:	4a7b      	ldr	r2, [pc, #492]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80045e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80045e2:	430b      	orrs	r3, r1
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045ee:	d008      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f0:	4a74      	ldr	r2, [pc, #464]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004608:	d008      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800460a:	4a6e      	ldr	r2, [pc, #440]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800460c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004610:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004614:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004616:	430b      	orrs	r3, r1
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004622:	d008      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004624:	4a67      	ldr	r2, [pc, #412]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004626:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004630:	430b      	orrs	r3, r1
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f013 0f80 	tst.w	r3, #128	; 0x80
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463e:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004640:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004644:	f023 030c 	bic.w	r3, r3, #12
 8004648:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800464a:	430b      	orrs	r3, r1
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004656:	d008      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004658:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800465a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800465e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004662:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004664:	430b      	orrs	r3, r1
 8004666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004672:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004674:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800467c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800467e:	430b      	orrs	r3, r1
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800468a:	d008      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468c:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800468e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004698:	430b      	orrs	r3, r1
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046a4:	d008      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046a6:	4a47      	ldr	r2, [pc, #284]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80046b2:	430b      	orrs	r3, r1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80046be:	d008      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046c0:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80046cc:	430b      	orrs	r3, r1
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80046d8:	d008      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046da:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80046e6:	430b      	orrs	r3, r1
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80046f2:	d008      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046f4:	4a33      	ldr	r2, [pc, #204]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004700:	430b      	orrs	r3, r1
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800470c:	d00d      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800470e:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004710:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004714:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004718:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800471a:	430b      	orrs	r3, r1
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004720:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004726:	f000 8099 	beq.w	800485c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	f013 0f08 	tst.w	r3, #8
 8004730:	d000      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8004732:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004734:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800473a:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800473c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004740:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004744:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004746:	430b      	orrs	r3, r1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004756:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004762:	430b      	orrs	r3, r1
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004768:	2e00      	cmp	r6, #0
 800476a:	d179      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004772:	d075      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004774:	2d00      	cmp	r5, #0
 8004776:	f040 8106 	bne.w	8004986 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800477a:	2000      	movs	r0, #0
}
 800477c:	b003      	add	sp, #12
 800477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8004780:	2501      	movs	r5, #1
 8004782:	e6e9      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8004784:	2601      	movs	r6, #1
 8004786:	e6f9      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800478a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80047a6:	f7fd fc29 	bl	8001ffc <HAL_GetTick>
 80047aa:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047b4:	d10a      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fd fc21 	bl	8001ffc <HAL_GetTick>
 80047ba:	1bc0      	subs	r0, r0, r7
 80047bc:	2864      	cmp	r0, #100	; 0x64
 80047be:	d9f5      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 80047c0:	2003      	movs	r0, #3
 80047c2:	e7db      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047cc:	4bb3      	ldr	r3, [pc, #716]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047d4:	d015      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80047d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80047dc:	429a      	cmp	r2, r3
 80047de:	d010      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e0:	4bae      	ldr	r3, [pc, #696]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80047e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80047ea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80047ee:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80047f2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80047f6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80047f8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	f013 0f01 	tst.w	r3, #1
 8004800:	d112      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004804:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004808:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800480c:	d01d      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x352>
 800480e:	4aa3      	ldr	r2, [pc, #652]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004810:	6893      	ldr	r3, [r2, #8]
 8004812:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004816:	6093      	str	r3, [r2, #8]
 8004818:	49a0      	ldr	r1, [pc, #640]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800481a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800481c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800481e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004822:	4313      	orrs	r3, r2
 8004824:	670b      	str	r3, [r1, #112]	; 0x70
 8004826:	e6b4      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8004828:	f7fd fbe8 	bl	8001ffc <HAL_GetTick>
 800482c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	4b9b      	ldr	r3, [pc, #620]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f013 0f02 	tst.w	r3, #2
 8004836:	d1e4      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd fbe0 	bl	8001ffc <HAL_GetTick>
 800483c:	1bc0      	subs	r0, r0, r7
 800483e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004842:	4298      	cmp	r0, r3
 8004844:	d9f3      	bls.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8004846:	2003      	movs	r0, #3
 8004848:	e798      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484a:	4894      	ldr	r0, [pc, #592]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800484c:	6882      	ldr	r2, [r0, #8]
 800484e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004852:	4993      	ldr	r1, [pc, #588]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8004854:	4019      	ands	r1, r3
 8004856:	430a      	orrs	r2, r1
 8004858:	6082      	str	r2, [r0, #8]
 800485a:	e7dd      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 800485c:	2501      	movs	r5, #1
 800485e:	e764      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8004860:	4a8e      	ldr	r2, [pc, #568]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004868:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800486a:	f7fd fbc7 	bl	8001ffc <HAL_GetTick>
 800486e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004870:	4b8a      	ldr	r3, [pc, #552]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004878:	d006      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800487a:	f7fd fbbf 	bl	8001ffc <HAL_GetTick>
 800487e:	1b80      	subs	r0, r0, r6
 8004880:	2864      	cmp	r0, #100	; 0x64
 8004882:	d9f5      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8004884:	2003      	movs	r0, #3
 8004886:	e779      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f013 0f01 	tst.w	r3, #1
 800488e:	d013      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004892:	b98b      	cbnz	r3, 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004894:	4a81      	ldr	r2, [pc, #516]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004896:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800489a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800489e:	6860      	ldr	r0, [r4, #4]
 80048a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80048a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80048ac:	430b      	orrs	r3, r1
 80048ae:	68a1      	ldr	r1, [r4, #8]
 80048b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80048b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80048be:	d003      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80048c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80048c2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80048c6:	d006      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80048cc:	d01e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d11a      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048d6:	4a71      	ldr	r2, [pc, #452]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048d8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048dc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048e0:	6860      	ldr	r0, [r4, #4]
 80048e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80048f0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80048f4:	430b      	orrs	r3, r1
 80048f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80048fe:	f023 031f 	bic.w	r3, r3, #31
 8004902:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004904:	3901      	subs	r1, #1
 8004906:	430b      	orrs	r3, r1
 8004908:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004912:	d011      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004914:	4a61      	ldr	r2, [pc, #388]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004916:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800491e:	6866      	ldr	r6, [r4, #4]
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004928:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800492c:	4303      	orrs	r3, r0
 800492e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004932:	430b      	orrs	r3, r1
 8004934:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800493e:	d00d      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004940:	6862      	ldr	r2, [r4, #4]
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800494a:	68e2      	ldr	r2, [r4, #12]
 800494c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004950:	68a2      	ldr	r2, [r4, #8]
 8004952:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004956:	4a51      	ldr	r2, [pc, #324]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004958:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800495c:	4a4f      	ldr	r2, [pc, #316]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004964:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004966:	f7fd fb49 	bl	8001ffc <HAL_GetTick>
 800496a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800496c:	4b4b      	ldr	r3, [pc, #300]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004974:	f47f aefe 	bne.w	8004774 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004978:	f7fd fb40 	bl	8001ffc <HAL_GetTick>
 800497c:	1b80      	subs	r0, r0, r6
 800497e:	2864      	cmp	r0, #100	; 0x64
 8004980:	d9f4      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8004982:	2003      	movs	r0, #3
 8004984:	e6fa      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 8004986:	4a45      	ldr	r2, [pc, #276]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004990:	f7fd fb34 	bl	8001ffc <HAL_GetTick>
 8004994:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800499e:	d006      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a0:	f7fd fb2c 	bl	8001ffc <HAL_GetTick>
 80049a4:	1b40      	subs	r0, r0, r5
 80049a6:	2864      	cmp	r0, #100	; 0x64
 80049a8:	d9f5      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 80049aa:	2003      	movs	r0, #3
 80049ac:	e6e6      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80049b4:	d001      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80049b8:	b122      	cbz	r2, 80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80049ba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80049be:	d01d      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c2:	b9db      	cbnz	r3, 80049fc <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c4:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049ca:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ce:	6960      	ldr	r0, [r4, #20]
 80049d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80049d8:	69a0      	ldr	r0, [r4, #24]
 80049da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80049de:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80049e2:	430b      	orrs	r3, r1
 80049e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80049ec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80049f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80049f2:	3901      	subs	r1, #1
 80049f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80049f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004a02:	d003      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a04:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0a:	d031      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f013 0f08 	tst.w	r3, #8
 8004a12:	d019      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a14:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a16:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a1e:	6960      	ldr	r0, [r4, #20]
 8004a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004a28:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	69e1      	ldr	r1, [r4, #28]
 8004a30:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004a3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a52:	f7fd fad3 	bl	8001ffc <HAL_GetTick>
 8004a56:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a58:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004a60:	d119      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a62:	f7fd facb 	bl	8001ffc <HAL_GetTick>
 8004a66:	1b00      	subs	r0, r0, r4
 8004a68:	2864      	cmp	r0, #100	; 0x64
 8004a6a:	d9f5      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8004a6c:	2003      	movs	r0, #3
 8004a6e:	e685      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a72:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a76:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a7a:	6965      	ldr	r5, [r4, #20]
 8004a7c:	6a23      	ldr	r3, [r4, #32]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004a84:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004a88:	4303      	orrs	r3, r0
 8004a8a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004a94:	e7ba      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8004a96:	2000      	movs	r0, #0
 8004a98:	e670      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0ffffcff 	.word	0x0ffffcff

08004aa4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004aa4:	b1d8      	cbz	r0, 8004ade <HAL_SDRAM_Init+0x3a>
{   
 8004aa6:	b538      	push	{r3, r4, r5, lr}
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004aac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ab0:	b183      	cbz	r3, 8004ad4 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004ab8:	1d21      	adds	r1, r4, #4
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	f001 f9ec 	bl	8005e98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004ac0:	6862      	ldr	r2, [r4, #4]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	f001 fa21 	bl	8005f0c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004ad0:	2000      	movs	r0, #0
}
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004ad4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004ad8:	f004 f802 	bl	8008ae0 <HAL_SDRAM_MspInit>
 8004adc:	e7e9      	b.n	8004ab2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8004ade:	2001      	movs	r0, #1
}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004ae2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ae4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d014      	beq.n	8004b18 <HAL_SDRAM_SendCommand+0x36>
 8004aee:	460d      	mov	r5, r1
 8004af0:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004af8:	6800      	ldr	r0, [r0, #0]
 8004afa:	f001 fa53 	bl	8005fa4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d004      	beq.n	8004b0e <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004b0a:	2000      	movs	r0, #0
}
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004b0e:	2305      	movs	r3, #5
 8004b10:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004b14:	2000      	movs	r0, #0
 8004b16:	e7f9      	b.n	8004b0c <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8004b18:	2002      	movs	r0, #2
 8004b1a:	e7f7      	b.n	8004b0c <HAL_SDRAM_SendCommand+0x2a>

08004b1c <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b1c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d00c      	beq.n	8004b40 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004b26:	b510      	push	{r4, lr}
 8004b28:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004b30:	6800      	ldr	r0, [r0, #0]
 8004b32:	f001 fa4d 	bl	8005fd0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004b3c:	2000      	movs	r0, #0
}
 8004b3e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004b40:	2002      	movs	r0, #2
}
 8004b42:	4770      	bx	lr

08004b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	4605      	mov	r5, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	ea37 0303 	bics.w	r3, r7, r3
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	42b3      	cmp	r3, r6
 8004b5e:	d037      	beq.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004b64:	d0f3      	beq.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b66:	f7fd fa49 	bl	8001ffc <HAL_GetTick>
 8004b6a:	9b06      	ldr	r3, [sp, #24]
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	42a0      	cmp	r0, r4
 8004b70:	d201      	bcs.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	d1eb      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b76:	682a      	ldr	r2, [r5, #0]
 8004b78:	6853      	ldr	r3, [r2, #4]
 8004b7a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004b7e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b80:	686b      	ldr	r3, [r5, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d00b      	beq.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b88:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8e:	d014      	beq.n	8004bba <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b96:	2300      	movs	r3, #0
 8004b98:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b9c:	2003      	movs	r0, #3
 8004b9e:	e018      	b.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba0:	68ab      	ldr	r3, [r5, #8]
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	bf18      	it	ne
 8004ba8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004bac:	d1ec      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004bae:	682a      	ldr	r2, [r5, #0]
 8004bb0:	6813      	ldr	r3, [r2, #0]
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e7e6      	b.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004bba:	682a      	ldr	r2, [r5, #0]
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	682a      	ldr	r2, [r5, #0]
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e7df      	b.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004bd0:	2000      	movs	r0, #0
}
 8004bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	460d      	mov	r5, r1
 8004bda:	4614      	mov	r4, r2
 8004bdc:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004bde:	e002      	b.n	8004be6 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004be0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004be4:	d10b      	bne.n	8004bfe <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	6893      	ldr	r3, [r2, #8]
 8004bea:	402b      	ands	r3, r5
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d03b      	beq.n	8004c68 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bf0:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004bf4:	bf08      	it	eq
 8004bf6:	2c00      	cmpeq	r4, #0
 8004bf8:	d1f2      	bne.n	8004be0 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004bfa:	7b13      	ldrb	r3, [r2, #12]
 8004bfc:	e7f0      	b.n	8004be0 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bfe:	f7fd f9fd 	bl	8001ffc <HAL_GetTick>
 8004c02:	9b06      	ldr	r3, [sp, #24]
 8004c04:	1ac0      	subs	r0, r0, r3
 8004c06:	42b0      	cmp	r0, r6
 8004c08:	d201      	bcs.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d1eb      	bne.n	8004be6 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6853      	ldr	r3, [r2, #4]
 8004c12:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c16:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d00b      	beq.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c26:	d014      	beq.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c34:	2003      	movs	r0, #3
 8004c36:	e018      	b.n	8004c6a <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3e:	bf18      	it	ne
 8004c40:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004c44:	d1ec      	bne.n	8004c20 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e7e6      	b.n	8004c20 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e7df      	b.n	8004c28 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004c68:	2000      	movs	r0, #0
}
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c76:	9200      	str	r2, [sp, #0]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c80:	f7ff ffa8 	bl	8004bd4 <SPI_WaitFifoStateUntilTimeout>
 8004c84:	b9b8      	cbnz	r0, 8004cb6 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c86:	9600      	str	r6, [sp, #0]
 8004c88:	462b      	mov	r3, r5
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff ff58 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004c94:	b9b8      	cbnz	r0, 8004cc6 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c96:	9600      	str	r6, [sp, #0]
 8004c98:	462b      	mov	r3, r5
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f7ff ff97 	bl	8004bd4 <SPI_WaitFifoStateUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	b150      	cbz	r0, 8004cc0 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004caa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e004      	b.n	8004cc0 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e7f6      	b.n	8004cc0 <SPI_EndRxTxTransaction+0x54>

08004cd2 <SPI_EndRxTransaction>:
{
 8004cd2:	b570      	push	{r4, r5, r6, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	460d      	mov	r5, r1
 8004cda:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cdc:	6843      	ldr	r3, [r0, #4]
 8004cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce2:	d00f      	beq.n	8004d04 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	9600      	str	r6, [sp, #0]
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7ff ff29 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	b998      	cbnz	r0, 8004d1e <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf6:	6862      	ldr	r2, [r4, #4]
 8004cf8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004cfc:	d015      	beq.n	8004d2a <SPI_EndRxTransaction+0x58>
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	b002      	add	sp, #8
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	6883      	ldr	r3, [r0, #8]
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	bf18      	it	ne
 8004d0c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004d10:	d1e8      	bne.n	8004ce4 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004d12:	6802      	ldr	r2, [r0, #0]
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e7e2      	b.n	8004ce4 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d20:	f043 0320 	orr.w	r3, r3, #32
 8004d24:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e7e9      	b.n	8004cfe <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2a:	68a2      	ldr	r2, [r4, #8]
 8004d2c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004d30:	bf18      	it	ne
 8004d32:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 8004d36:	d1e2      	bne.n	8004cfe <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d38:	9600      	str	r6, [sp, #0]
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff ff46 	bl	8004bd4 <SPI_WaitFifoStateUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0d7      	beq.n	8004cfe <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d50:	f043 0320 	orr.w	r3, r3, #32
 8004d54:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e7d1      	b.n	8004cfe <SPI_EndRxTransaction+0x2c>

08004d5a <HAL_SPI_Init>:
  if (hspi == NULL)
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d058      	beq.n	8004e10 <HAL_SPI_Init+0xb6>
{
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d66:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d045      	beq.n	8004dfa <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d84:	d93e      	bls.n	8004e04 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d86:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d88:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d8c:	bf18      	it	ne
 8004d8e:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8004d92:	d001      	beq.n	8004d98 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d94:	2100      	movs	r1, #0
 8004d96:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d9a:	b921      	cbnz	r1, 8004da6 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da0:	d933      	bls.n	8004e0a <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004da2:	2302      	movs	r3, #2
 8004da4:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	68a1      	ldr	r1, [r4, #8]
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	430b      	orrs	r3, r1
 8004db4:	69a1      	ldr	r1, [r4, #24]
 8004db6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	69e1      	ldr	r1, [r4, #28]
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	6a21      	ldr	r1, [r4, #32]
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dc6:	6821      	ldr	r1, [r4, #0]
 8004dc8:	4303      	orrs	r3, r0
 8004dca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004dcc:	8b63      	ldrh	r3, [r4, #26]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	68e1      	ldr	r1, [r4, #12]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	69d3      	ldr	r3, [r2, #28]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dec:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dee:	2000      	movs	r0, #0
 8004df0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004df8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004dfe:	f004 fc57 	bl	80096b0 <HAL_SPI_MspInit>
 8004e02:	e7b4      	b.n	8004d6e <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e08:	e7be      	b.n	8004d88 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e0e:	e7ca      	b.n	8004da6 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004e10:	2001      	movs	r0, #1
}
 8004e12:	4770      	bx	lr

08004e14 <HAL_SPI_Transmit>:
{
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004e1a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004e1e:	2c01      	cmp	r4, #1
 8004e20:	f000 80e5 	beq.w	8004fee <HAL_SPI_Transmit+0x1da>
 8004e24:	461d      	mov	r5, r3
 8004e26:	4617      	mov	r7, r2
 8004e28:	4688      	mov	r8, r1
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004e32:	f7fd f8e3 	bl	8001ffc <HAL_GetTick>
 8004e36:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e38:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d009      	beq.n	8004e56 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004e42:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e50:	b002      	add	sp, #8
 8004e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004e56:	fab7 f387 	clz	r3, r7
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	bf08      	it	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80b6 	bne.w	8004fd6 <HAL_SPI_Transmit+0x1c2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e74:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e78:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e7a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e7c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e7e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e82:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e86:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e88:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d01c      	beq.n	8004ecc <HAL_SPI_Transmit+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e9a:	d103      	bne.n	8004ea4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eaa:	d933      	bls.n	8004f14 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	b10b      	cbz	r3, 8004eb4 <HAL_SPI_Transmit+0xa0>
 8004eb0:	2f01      	cmp	r7, #1
 8004eb2:	d11b      	bne.n	8004eec <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004ec2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004eca:	e00f      	b.n	8004eec <HAL_SPI_Transmit+0xd8>
    SPI_1LINE_TX(hspi);
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e7dc      	b.n	8004e92 <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed8:	f7fd f890 	bl	8001ffc <HAL_GetTick>
 8004edc:	1b80      	subs	r0, r0, r6
 8004ede:	42a8      	cmp	r0, r5
 8004ee0:	d302      	bcc.n	8004ee8 <HAL_SPI_Transmit+0xd4>
 8004ee2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004ee6:	d178      	bne.n	8004fda <HAL_SPI_Transmit+0x1c6>
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	d078      	beq.n	8004fde <HAL_SPI_Transmit+0x1ca>
    while (hspi->TxXferCount > 0U)
 8004eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05b      	beq.n	8004fac <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	f012 0f02 	tst.w	r2, #2
 8004efc:	d0ec      	beq.n	8004ed8 <HAL_SPI_Transmit+0xc4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f06:	3302      	adds	r3, #2
 8004f08:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f12:	e7eb      	b.n	8004eec <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <HAL_SPI_Transmit+0x108>
 8004f18:	2f01      	cmp	r7, #1
 8004f1a:	d130      	bne.n	8004f7e <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 8004f1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d90b      	bls.n	8004f3c <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	8812      	ldrh	r2, [r2, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f2e:	3302      	adds	r3, #2
 8004f30:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f34:	3b02      	subs	r3, #2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f3a:	e020      	b.n	8004f7e <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f46:	3301      	adds	r3, #1
 8004f48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f52:	e014      	b.n	8004f7e <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004f60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f68:	e009      	b.n	8004f7e <HAL_SPI_Transmit+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6a:	f7fd f847 	bl	8001ffc <HAL_GetTick>
 8004f6e:	1b80      	subs	r0, r0, r6
 8004f70:	42a8      	cmp	r0, r5
 8004f72:	d302      	bcc.n	8004f7a <HAL_SPI_Transmit+0x166>
 8004f74:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004f78:	d133      	bne.n	8004fe2 <HAL_SPI_Transmit+0x1ce>
 8004f7a:	2d00      	cmp	r5, #0
 8004f7c:	d033      	beq.n	8004fe6 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 8004f7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b19b      	cbz	r3, 8004fac <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	6893      	ldr	r3, [r2, #8]
 8004f88:	f013 0f02 	tst.w	r3, #2
 8004f8c:	d0ed      	beq.n	8004f6a <HAL_SPI_Transmit+0x156>
        if (hspi->TxXferCount > 1U)
 8004f8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d9de      	bls.n	8004f54 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fa2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fa4:	3b02      	subs	r3, #2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004faa:	e7e8      	b.n	8004f7e <HAL_SPI_Transmit+0x16a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fac:	4632      	mov	r2, r6
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff fe5b 	bl	8004c6c <SPI_EndRxTxTransaction>
 8004fb6:	b108      	cbz	r0, 8004fbc <HAL_SPI_Transmit+0x1a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	b933      	cbnz	r3, 8004fce <HAL_SPI_Transmit+0x1ba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004fd0:	b95b      	cbnz	r3, 8004fea <HAL_SPI_Transmit+0x1d6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e736      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e734      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004fda:	2003      	movs	r0, #3
 8004fdc:	e732      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
 8004fde:	2003      	movs	r0, #3
 8004fe0:	e730      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e72e      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
 8004fe6:	2003      	movs	r0, #3
 8004fe8:	e72c      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004fea:	2001      	movs	r0, #1
 8004fec:	e72a      	b.n	8004e44 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004fee:	2002      	movs	r0, #2
 8004ff0:	e72e      	b.n	8004e50 <HAL_SPI_Transmit+0x3c>

08004ff2 <HAL_SPI_TransmitReceive>:
{
 8004ff2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8004ffa:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004ffe:	2c01      	cmp	r4, #1
 8005000:	f000 815d 	beq.w	80052be <HAL_SPI_TransmitReceive+0x2cc>
 8005004:	461d      	mov	r5, r3
 8005006:	4617      	mov	r7, r2
 8005008:	460e      	mov	r6, r1
 800500a:	4604      	mov	r4, r0
 800500c:	2301      	movs	r3, #1
 800500e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005012:	f7fc fff3 	bl	8001ffc <HAL_GetTick>
 8005016:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005018:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800501c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800501e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005020:	2801      	cmp	r0, #1
 8005022:	d014      	beq.n	800504e <HAL_SPI_TransmitReceive+0x5c>
 8005024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005028:	d009      	beq.n	800503e <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 800502a:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800502c:	2201      	movs	r2, #1
 800502e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005032:	2200      	movs	r2, #0
 8005034:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005038:	4618      	mov	r0, r3
 800503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800503e:	68a3      	ldr	r3, [r4, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f040 8130 	bne.w	80052a6 <HAL_SPI_TransmitReceive+0x2b4>
 8005046:	2804      	cmp	r0, #4
 8005048:	d001      	beq.n	800504e <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	e7ee      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800504e:	fab7 f387 	clz	r3, r7
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2e00      	cmp	r6, #0
 8005056:	bf08      	it	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8125 	bne.w	80052aa <HAL_SPI_TransmitReceive+0x2b8>
 8005060:	2d00      	cmp	r5, #0
 8005062:	f000 8124 	beq.w	80052ae <HAL_SPI_TransmitReceive+0x2bc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005066:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b04      	cmp	r3, #4
 800506e:	d002      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x84>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005070:	2305      	movs	r3, #5
 8005072:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800507a:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800507c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005080:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005084:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005086:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005088:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800508a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800508c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005094:	d801      	bhi.n	800509a <HAL_SPI_TransmitReceive+0xa8>
 8005096:	2d01      	cmp	r5, #1
 8005098:	d922      	bls.n	80050e0 <HAL_SPI_TransmitReceive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	6853      	ldr	r3, [r2, #4]
 800509e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050ac:	d103      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b6:	68e3      	ldr	r3, [r4, #12]
 80050b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050bc:	d956      	bls.n	800516c <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	b10b      	cbz	r3, 80050c6 <HAL_SPI_TransmitReceive+0xd4>
 80050c2:	2d01      	cmp	r5, #1
 80050c4:	d10a      	bne.n	80050dc <HAL_SPI_TransmitReceive+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	8812      	ldrh	r2, [r2, #0]
 80050cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d0:	3302      	adds	r3, #2
 80050d2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80050d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80050dc:	2501      	movs	r5, #1
 80050de:	e025      	b.n	800512c <HAL_SPI_TransmitReceive+0x13a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	6853      	ldr	r3, [r2, #4]
 80050e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	e7db      	b.n	80050a4 <HAL_SPI_TransmitReceive+0xb2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	f012 0f01 	tst.w	r2, #1
 80050f4:	d010      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x126>
 80050f6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80050fa:	b292      	uxth	r2, r2
 80050fc:	b162      	cbz	r2, 8005118 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005106:	3302      	adds	r3, #2
 8005108:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800510a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800510e:	3b01      	subs	r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005116:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005118:	f7fc ff70 	bl	8001ffc <HAL_GetTick>
 800511c:	eba0 0009 	sub.w	r0, r0, r9
 8005120:	4540      	cmp	r0, r8
 8005122:	d303      	bcc.n	800512c <HAL_SPI_TransmitReceive+0x13a>
 8005124:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005128:	f040 80c3 	bne.w	80052b2 <HAL_SPI_TransmitReceive+0x2c0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	b92b      	cbnz	r3, 800513e <HAL_SPI_TransmitReceive+0x14c>
 8005132:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a7 	beq.w	800528c <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	f012 0f02 	tst.w	r2, #2
 8005146:	d0d1      	beq.n	80050ec <HAL_SPI_TransmitReceive+0xfa>
 8005148:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800514a:	b292      	uxth	r2, r2
 800514c:	2a00      	cmp	r2, #0
 800514e:	d0cd      	beq.n	80050ec <HAL_SPI_TransmitReceive+0xfa>
 8005150:	2d00      	cmp	r5, #0
 8005152:	d0cb      	beq.n	80050ec <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005154:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800515c:	3302      	adds	r3, #2
 800515e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005160:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005162:	3b01      	subs	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005168:	2500      	movs	r5, #0
 800516a:	e7bf      	b.n	80050ec <HAL_SPI_TransmitReceive+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	b10b      	cbz	r3, 8005174 <HAL_SPI_TransmitReceive+0x182>
 8005170:	2d01      	cmp	r5, #1
 8005172:	d10e      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 8005174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d90c      	bls.n	8005196 <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	8812      	ldrh	r2, [r2, #0]
 8005182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005186:	3302      	adds	r3, #2
 8005188:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800518a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800518c:	3b02      	subs	r3, #2
 800518e:	b29b      	uxth	r3, r3
 8005190:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005192:	2501      	movs	r5, #1
 8005194:	e047      	b.n	8005226 <HAL_SPI_TransmitReceive+0x234>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005196:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800519e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a0:	3301      	adds	r3, #1
 80051a2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80051a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80051ac:	e7f1      	b.n	8005192 <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 80051ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051b0:	b292      	uxth	r2, r2
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	d90b      	bls.n	80051ce <HAL_SPI_TransmitReceive+0x1dc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051b8:	8812      	ldrh	r2, [r2, #0]
 80051ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051be:	3302      	adds	r3, #2
 80051c0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051c4:	3b02      	subs	r3, #2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80051ca:	2500      	movs	r5, #0
 80051cc:	e03c      	b.n	8005248 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80051d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d6:	3301      	adds	r3, #1
 80051d8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80051da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29b      	uxth	r3, r3
 80051e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80051e2:	2500      	movs	r5, #0
 80051e4:	e030      	b.n	8005248 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	6853      	ldr	r3, [r2, #4]
 80051ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051ee:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80051f0:	2501      	movs	r5, #1
 80051f2:	e00c      	b.n	800520e <HAL_SPI_TransmitReceive+0x21c>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051f6:	7b1b      	ldrb	r3, [r3, #12]
 80051f8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80051fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051fc:	3301      	adds	r3, #1
 80051fe:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005200:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005204:	3b01      	subs	r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800520c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800520e:	f7fc fef5 	bl	8001ffc <HAL_GetTick>
 8005212:	eba0 0009 	sub.w	r0, r0, r9
 8005216:	4540      	cmp	r0, r8
 8005218:	d302      	bcc.n	8005220 <HAL_SPI_TransmitReceive+0x22e>
 800521a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800521e:	d14a      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x2c4>
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d049      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005226:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	b91b      	cbnz	r3, 8005234 <HAL_SPI_TransmitReceive+0x242>
 800522c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005230:	b29b      	uxth	r3, r3
 8005232:	b35b      	cbz	r3, 800528c <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	f012 0f02 	tst.w	r2, #2
 800523c:	d004      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x256>
 800523e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005240:	b292      	uxth	r2, r2
 8005242:	b10a      	cbz	r2, 8005248 <HAL_SPI_TransmitReceive+0x256>
 8005244:	2d00      	cmp	r5, #0
 8005246:	d1b2      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	f012 0f01 	tst.w	r2, #1
 8005250:	d0dd      	beq.n	800520e <HAL_SPI_TransmitReceive+0x21c>
 8005252:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005256:	b292      	uxth	r2, r2
 8005258:	2a00      	cmp	r2, #0
 800525a:	d0d8      	beq.n	800520e <HAL_SPI_TransmitReceive+0x21c>
        if (hspi->RxXferCount > 1U)
 800525c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005260:	b292      	uxth	r2, r2
 8005262:	2a01      	cmp	r2, #1
 8005264:	d9c6      	bls.n	80051f4 <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800526a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800526c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800526e:	3302      	adds	r3, #2
 8005270:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005272:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005276:	3b02      	subs	r3, #2
 8005278:	b29b      	uxth	r3, r3
 800527a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800527e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d9ae      	bls.n	80051e6 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8005288:	2501      	movs	r5, #1
 800528a:	e7c0      	b.n	800520e <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	464a      	mov	r2, r9
 800528e:	4641      	mov	r1, r8
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff fceb 	bl	8004c6c <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2800      	cmp	r0, #0
 800529a:	f43f aec7 	beq.w	800502c <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800529e:	2320      	movs	r3, #32
 80052a0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e6c2      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	e6c0      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e6be      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e6bc      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e6ba      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e6b8      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
 80052ba:	2303      	movs	r3, #3
 80052bc:	e6b6      	b.n	800502c <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80052be:	2302      	movs	r3, #2
 80052c0:	e6ba      	b.n	8005038 <HAL_SPI_TransmitReceive+0x46>

080052c2 <HAL_SPI_Receive>:
{
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	4604      	mov	r4, r0
 80052ca:	4688      	mov	r8, r1
 80052cc:	4617      	mov	r7, r2
 80052ce:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052d0:	6843      	ldr	r3, [r0, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d6:	d019      	beq.n	800530c <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80052d8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f000 80ba 	beq.w	8005456 <HAL_SPI_Receive+0x194>
 80052e2:	2301      	movs	r3, #1
 80052e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80052e8:	f7fc fe88 	bl	8001ffc <HAL_GetTick>
 80052ec:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80052ee:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d015      	beq.n	8005324 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 80052f8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005300:	2300      	movs	r3, #0
 8005302:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005306:	b002      	add	sp, #8
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800530c:	6883      	ldr	r3, [r0, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e2      	bne.n	80052d8 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005312:	2304      	movs	r3, #4
 8005314:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005318:	9500      	str	r5, [sp, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	460a      	mov	r2, r1
 800531e:	f7ff fe68 	bl	8004ff2 <HAL_SPI_TransmitReceive>
 8005322:	e7f0      	b.n	8005306 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8005324:	fab7 f387 	clz	r3, r7
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	f1b8 0f00 	cmp.w	r8, #0
 800532e:	bf08      	it	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8083 	bne.w	800543e <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005338:	2304      	movs	r3, #4
 800533a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800533e:	2300      	movs	r3, #0
 8005340:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005342:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005346:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800534a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800534e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005350:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005352:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005354:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005356:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005358:	68e3      	ldr	r3, [r4, #12]
 800535a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535e:	d916      	bls.n	800538e <HAL_SPI_Receive+0xcc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	6853      	ldr	r3, [r2, #4]
 8005364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005368:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005370:	d013      	beq.n	800539a <HAL_SPI_Receive+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f012 0f40 	tst.w	r2, #64	; 0x40
 800537a:	d103      	bne.n	8005384 <HAL_SPI_Receive+0xc2>
    __HAL_SPI_ENABLE(hspi);
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005382:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005384:	68e3      	ldr	r3, [r4, #12]
 8005386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800538a:	d916      	bls.n	80053ba <HAL_SPI_Receive+0xf8>
 800538c:	e035      	b.n	80053fa <HAL_SPI_Receive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	6853      	ldr	r3, [r2, #4]
 8005392:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e7e7      	b.n	800536a <HAL_SPI_Receive+0xa8>
    SPI_1LINE_RX(hspi);
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e7e5      	b.n	8005372 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a6:	f7fc fe29 	bl	8001ffc <HAL_GetTick>
 80053aa:	1b80      	subs	r0, r0, r6
 80053ac:	42a8      	cmp	r0, r5
 80053ae:	d302      	bcc.n	80053b6 <HAL_SPI_Receive+0xf4>
 80053b0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80053b4:	d145      	bne.n	8005442 <HAL_SPI_Receive+0x180>
 80053b6:	2d00      	cmp	r5, #0
 80053b8:	d045      	beq.n	8005446 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 80053ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d030      	beq.n	8005426 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	f012 0f01 	tst.w	r2, #1
 80053cc:	d0eb      	beq.n	80053a6 <HAL_SPI_Receive+0xe4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053d0:	7b1b      	ldrb	r3, [r3, #12]
 80053d2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053d6:	3301      	adds	r3, #1
 80053d8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80053da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80053e6:	e7e8      	b.n	80053ba <HAL_SPI_Receive+0xf8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e8:	f7fc fe08 	bl	8001ffc <HAL_GetTick>
 80053ec:	1b80      	subs	r0, r0, r6
 80053ee:	42a8      	cmp	r0, r5
 80053f0:	d302      	bcc.n	80053f8 <HAL_SPI_Receive+0x136>
 80053f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80053f6:	d128      	bne.n	800544a <HAL_SPI_Receive+0x188>
 80053f8:	b34d      	cbz	r5, 800544e <HAL_SPI_Receive+0x18c>
    while (hspi->RxXferCount > 0U)
 80053fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053fe:	b29b      	uxth	r3, r3
 8005400:	b18b      	cbz	r3, 8005426 <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	f012 0f01 	tst.w	r2, #1
 800540a:	d0ed      	beq.n	80053e8 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005410:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005414:	3302      	adds	r3, #2
 8005416:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005418:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800541c:	3b01      	subs	r3, #1
 800541e:	b29b      	uxth	r3, r3
 8005420:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005424:	e7e9      	b.n	80053fa <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005426:	4632      	mov	r2, r6
 8005428:	4629      	mov	r1, r5
 800542a:	4620      	mov	r0, r4
 800542c:	f7ff fc51 	bl	8004cd2 <SPI_EndRxTransaction>
 8005430:	b108      	cbz	r0, 8005436 <HAL_SPI_Receive+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005432:	2320      	movs	r3, #32
 8005434:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005436:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005438:	b95b      	cbnz	r3, 8005452 <HAL_SPI_Receive+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800543a:	2000      	movs	r0, #0
 800543c:	e75d      	b.n	80052fa <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800543e:	2001      	movs	r0, #1
 8005440:	e75b      	b.n	80052fa <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005442:	2003      	movs	r0, #3
 8005444:	e759      	b.n	80052fa <HAL_SPI_Receive+0x38>
 8005446:	2003      	movs	r0, #3
 8005448:	e757      	b.n	80052fa <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800544a:	2003      	movs	r0, #3
 800544c:	e755      	b.n	80052fa <HAL_SPI_Receive+0x38>
 800544e:	2003      	movs	r0, #3
 8005450:	e753      	b.n	80052fa <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8005452:	2001      	movs	r0, #1
 8005454:	e751      	b.n	80052fa <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8005456:	2002      	movs	r0, #2
 8005458:	e755      	b.n	8005306 <HAL_SPI_Receive+0x44>

0800545a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800545c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545e:	6a04      	ldr	r4, [r0, #32]
 8005460:	f024 0401 	bic.w	r4, r4, #1
 8005464:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005468:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005470:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005474:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005476:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005478:	6203      	str	r3, [r0, #32]
}
 800547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005480:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005482:	6a03      	ldr	r3, [r0, #32]
 8005484:	f023 0310 	bic.w	r3, r3, #16
 8005488:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800548c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005492:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800549a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80054a0:	6203      	str	r3, [r0, #32]
}
 80054a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ae:	4319      	orrs	r1, r3
 80054b0:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b4:	6081      	str	r1, [r0, #8]
}
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054be:	6802      	ldr	r2, [r0, #0]
 80054c0:	6891      	ldr	r1, [r2, #8]
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_TIM_Base_Start+0x2c>)
 80054c4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	bf18      	it	ne
 80054ca:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80054ce:	d003      	beq.n	80054d8 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	2301      	movs	r3, #1
 80054da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80054de:	2000      	movs	r0, #0
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	00010007 	.word	0x00010007

080054e8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	6802      	ldr	r2, [r0, #0]
 80054ea:	68d3      	ldr	r3, [r2, #12]
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f2:	6802      	ldr	r2, [r0, #0]
 80054f4:	6891      	ldr	r1, [r2, #8]
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_TIM_Base_Start_IT+0x28>)
 80054f8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	bf18      	it	ne
 80054fe:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8005502:	d003      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	2000      	movs	r0, #0
 800550e:	4770      	bx	lr
 8005510:	00010007 	.word	0x00010007

08005514 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_IC_CaptureCallback>:
}
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_TriggerCallback>:
}
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_IRQHandler>:
{
 800551c:	b510      	push	{r4, lr}
 800551e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	6803      	ldr	r3, [r0, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	f012 0f02 	tst.w	r2, #2
 8005528:	d011      	beq.n	800554e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	f012 0f02 	tst.w	r2, #2
 8005530:	d00d      	beq.n	800554e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005532:	f06f 0202 	mvn.w	r2, #2
 8005536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005538:	2301      	movs	r3, #1
 800553a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800553c:	6803      	ldr	r3, [r0, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f013 0f03 	tst.w	r3, #3
 8005544:	d079      	beq.n	800563a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005546:	f7ff ffe6 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	2300      	movs	r3, #0
 800554c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	f012 0f04 	tst.w	r2, #4
 8005556:	d012      	beq.n	800557e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	f012 0f04 	tst.w	r2, #4
 800555e:	d00e      	beq.n	800557e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005560:	f06f 0204 	mvn.w	r2, #4
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005566:	2302      	movs	r3, #2
 8005568:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005572:	d068      	beq.n	8005646 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff ffce 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	2300      	movs	r3, #0
 800557c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	f012 0f08 	tst.w	r2, #8
 8005586:	d012      	beq.n	80055ae <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	f012 0f08 	tst.w	r2, #8
 800558e:	d00e      	beq.n	80055ae <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005590:	f06f 0208 	mvn.w	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005596:	2304      	movs	r3, #4
 8005598:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f013 0f03 	tst.w	r3, #3
 80055a2:	d057      	beq.n	8005654 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff ffb6 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	2300      	movs	r3, #0
 80055ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	f012 0f10 	tst.w	r2, #16
 80055b6:	d012      	beq.n	80055de <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	f012 0f10 	tst.w	r2, #16
 80055be:	d00e      	beq.n	80055de <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	2308      	movs	r3, #8
 80055c8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80055d2:	d046      	beq.n	8005662 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80055d4:	4620      	mov	r0, r4
 80055d6:	f7ff ff9e 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	2300      	movs	r3, #0
 80055dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	f012 0f01 	tst.w	r2, #1
 80055e6:	d003      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	f012 0f01 	tst.w	r2, #1
 80055ee:	d13f      	bne.n	8005670 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005600:	d13d      	bne.n	800567e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	f412 7f80 	tst.w	r2, #256	; 0x100
 800560a:	d003      	beq.n	8005614 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005612:	d13b      	bne.n	800568c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	f012 0f40 	tst.w	r2, #64	; 0x40
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005624:	d139      	bne.n	800569a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	f012 0f20 	tst.w	r2, #32
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	f012 0f20 	tst.w	r2, #32
 8005636:	d137      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x18c>
}
 8005638:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	f7ff ff6b 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff ff6a 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 8005644:	e781      	b.n	800554a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	4620      	mov	r0, r4
 8005648:	f7ff ff64 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff ff63 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 8005652:	e792      	b.n	800557a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff ff5d 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565a:	4620      	mov	r0, r4
 800565c:	f7ff ff5c 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 8005660:	e7a3      	b.n	80055aa <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff ff56 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	4620      	mov	r0, r4
 800566a:	f7ff ff55 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
 800566e:	e7b4      	b.n	80055da <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005670:	f06f 0201 	mvn.w	r2, #1
 8005674:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005676:	4620      	mov	r0, r4
 8005678:	f003 ffe6 	bl	8009648 <HAL_TIM_PeriodElapsedCallback>
 800567c:	e7b8      	b.n	80055f0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800567e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005682:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005684:	4620      	mov	r0, r4
 8005686:	f000 f964 	bl	8005952 <HAL_TIMEx_BreakCallback>
 800568a:	e7ba      	b.n	8005602 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800568c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005690:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f95e 	bl	8005954 <HAL_TIMEx_Break2Callback>
 8005698:	e7bc      	b.n	8005614 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800569e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff ff3a 	bl	800551a <HAL_TIM_TriggerCallback>
 80056a6:	e7be      	b.n	8005626 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056a8:	f06f 0220 	mvn.w	r2, #32
 80056ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f94e 	bl	8005950 <HAL_TIMEx_CommutCallback>
}
 80056b4:	e7c0      	b.n	8005638 <HAL_TIM_IRQHandler+0x11c>
	...

080056b8 <TIM_Base_SetConfig>:
{
 80056b8:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80056ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	4c3a      	ldr	r4, [pc, #232]	; (80057a8 <TIM_Base_SetConfig+0xf0>)
 80056be:	42a0      	cmp	r0, r4
 80056c0:	bf14      	ite	ne
 80056c2:	2400      	movne	r4, #0
 80056c4:	2401      	moveq	r4, #1
 80056c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80056ca:	bf14      	ite	ne
 80056cc:	4622      	movne	r2, r4
 80056ce:	f044 0201 	orreq.w	r2, r4, #1
 80056d2:	b9aa      	cbnz	r2, 8005700 <TIM_Base_SetConfig+0x48>
 80056d4:	4d35      	ldr	r5, [pc, #212]	; (80057ac <TIM_Base_SetConfig+0xf4>)
 80056d6:	42a8      	cmp	r0, r5
 80056d8:	bf14      	ite	ne
 80056da:	2500      	movne	r5, #0
 80056dc:	2501      	moveq	r5, #1
 80056de:	4e34      	ldr	r6, [pc, #208]	; (80057b0 <TIM_Base_SetConfig+0xf8>)
 80056e0:	42b0      	cmp	r0, r6
 80056e2:	d00d      	beq.n	8005700 <TIM_Base_SetConfig+0x48>
 80056e4:	b965      	cbnz	r5, 8005700 <TIM_Base_SetConfig+0x48>
 80056e6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80056ea:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80056ee:	42a8      	cmp	r0, r5
 80056f0:	bf14      	ite	ne
 80056f2:	2500      	movne	r5, #0
 80056f4:	2501      	moveq	r5, #1
 80056f6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80056fa:	42b0      	cmp	r0, r6
 80056fc:	d000      	beq.n	8005700 <TIM_Base_SetConfig+0x48>
 80056fe:	b11d      	cbz	r5, 8005708 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005704:	684d      	ldr	r5, [r1, #4]
 8005706:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005708:	2a00      	cmp	r2, #0
 800570a:	d133      	bne.n	8005774 <TIM_Base_SetConfig+0xbc>
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_Base_SetConfig+0xf4>)
 800570e:	4290      	cmp	r0, r2
 8005710:	bf14      	ite	ne
 8005712:	2200      	movne	r2, #0
 8005714:	2201      	moveq	r2, #1
 8005716:	4d26      	ldr	r5, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0xf8>)
 8005718:	42a8      	cmp	r0, r5
 800571a:	d02b      	beq.n	8005774 <TIM_Base_SetConfig+0xbc>
 800571c:	bb52      	cbnz	r2, 8005774 <TIM_Base_SetConfig+0xbc>
 800571e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005722:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005726:	4290      	cmp	r0, r2
 8005728:	bf14      	ite	ne
 800572a:	2200      	movne	r2, #0
 800572c:	2201      	moveq	r2, #1
 800572e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005732:	42a8      	cmp	r0, r5
 8005734:	d01e      	beq.n	8005774 <TIM_Base_SetConfig+0xbc>
 8005736:	b9ea      	cbnz	r2, 8005774 <TIM_Base_SetConfig+0xbc>
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <TIM_Base_SetConfig+0xfc>)
 800573a:	4290      	cmp	r0, r2
 800573c:	bf14      	ite	ne
 800573e:	2200      	movne	r2, #0
 8005740:	2201      	moveq	r2, #1
 8005742:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8005746:	42a8      	cmp	r0, r5
 8005748:	d014      	beq.n	8005774 <TIM_Base_SetConfig+0xbc>
 800574a:	b99a      	cbnz	r2, 8005774 <TIM_Base_SetConfig+0xbc>
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <TIM_Base_SetConfig+0x100>)
 800574e:	4290      	cmp	r0, r2
 8005750:	bf14      	ite	ne
 8005752:	2200      	movne	r2, #0
 8005754:	2201      	moveq	r2, #1
 8005756:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800575a:	42a8      	cmp	r0, r5
 800575c:	d00a      	beq.n	8005774 <TIM_Base_SetConfig+0xbc>
 800575e:	b94a      	cbnz	r2, 8005774 <TIM_Base_SetConfig+0xbc>
 8005760:	4a16      	ldr	r2, [pc, #88]	; (80057bc <TIM_Base_SetConfig+0x104>)
 8005762:	4290      	cmp	r0, r2
 8005764:	bf14      	ite	ne
 8005766:	2200      	movne	r2, #0
 8005768:	2201      	moveq	r2, #1
 800576a:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800576e:	42a8      	cmp	r0, r5
 8005770:	d000      	beq.n	8005774 <TIM_Base_SetConfig+0xbc>
 8005772:	b11a      	cbz	r2, 800577c <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005778:	68ca      	ldr	r2, [r1, #12]
 800577a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005780:	694a      	ldr	r2, [r1, #20]
 8005782:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005784:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005786:	688a      	ldr	r2, [r1, #8]
 8005788:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800578a:	680a      	ldr	r2, [r1, #0]
 800578c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <TIM_Base_SetConfig+0x108>)
 8005790:	4298      	cmp	r0, r3
 8005792:	bf14      	ite	ne
 8005794:	4623      	movne	r3, r4
 8005796:	f044 0301 	orreq.w	r3, r4, #1
 800579a:	b10b      	cbz	r3, 80057a0 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	690b      	ldr	r3, [r1, #16]
 800579e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80057a0:	2301      	movs	r3, #1
 80057a2:	6143      	str	r3, [r0, #20]
}
 80057a4:	bc70      	pop	{r4, r5, r6}
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40001800 	.word	0x40001800
 80057bc:	40002000 	.word	0x40002000
 80057c0:	40010400 	.word	0x40010400

080057c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80057c4:	b1a8      	cbz	r0, 80057f2 <HAL_TIM_Base_Init+0x2e>
{
 80057c6:	b510      	push	{r4, lr}
 80057c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057ce:	b15b      	cbz	r3, 80057e8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	2302      	movs	r3, #2
 80057d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d6:	1d21      	adds	r1, r4, #4
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	f7ff ff6d 	bl	80056b8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80057de:	2301      	movs	r3, #1
 80057e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80057e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80057ec:	f004 f8c8 	bl	8009980 <HAL_TIM_Base_MspInit>
 80057f0:	e7ee      	b.n	80057d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80057f2:	2001      	movs	r0, #1
}
 80057f4:	4770      	bx	lr

080057f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005802:	430b      	orrs	r3, r1
 8005804:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	6083      	str	r3, [r0, #8]
}
 8005808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005810:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d064      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0xd2>
{
 8005818:	b510      	push	{r4, lr}
 800581a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800581c:	2301      	movs	r3, #1
 800581e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005828:	6802      	ldr	r2, [r0, #0]
 800582a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800582c:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <HAL_TIM_ConfigClockSource+0xd8>)
 800582e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005830:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005832:	680b      	ldr	r3, [r1, #0]
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d04a      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0xbe>
 8005838:	d913      	bls.n	8005862 <HAL_TIM_ConfigClockSource+0x52>
 800583a:	2b60      	cmp	r3, #96	; 0x60
 800583c:	d03d      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xaa>
 800583e:	d91e      	bls.n	800587e <HAL_TIM_ConfigClockSource+0x6e>
 8005840:	2b70      	cmp	r3, #112	; 0x70
 8005842:	d028      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x86>
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d130      	bne.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800584a:	68cb      	ldr	r3, [r1, #12]
 800584c:	684a      	ldr	r2, [r1, #4]
 800584e:	6889      	ldr	r1, [r1, #8]
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	f7ff ffd0 	bl	80057f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	6893      	ldr	r3, [r2, #8]
 800585a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800585e:	6093      	str	r3, [r2, #8]
      break;
 8005860:	e024      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005862:	2b10      	cmp	r3, #16
 8005864:	d006      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0x64>
 8005866:	d904      	bls.n	8005872 <HAL_TIM_ConfigClockSource+0x62>
 8005868:	2b20      	cmp	r3, #32
 800586a:	d003      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0x64>
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d001      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0x64>
 8005870:	e01c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
 8005872:	b9db      	cbnz	r3, 80058ac <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005874:	4619      	mov	r1, r3
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	f7ff fe16 	bl	80054a8 <TIM_ITRx_SetConfig>
      break;
 800587c:	e016      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800587e:	2b50      	cmp	r3, #80	; 0x50
 8005880:	d114      	bne.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	68ca      	ldr	r2, [r1, #12]
 8005884:	6849      	ldr	r1, [r1, #4]
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	f7ff fde7 	bl	800545a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	f7ff fe0a 	bl	80054a8 <TIM_ITRx_SetConfig>
      break;
 8005894:	e00a      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8005896:	68cb      	ldr	r3, [r1, #12]
 8005898:	684a      	ldr	r2, [r1, #4]
 800589a:	6889      	ldr	r1, [r1, #8]
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	f7ff ffaa 	bl	80057f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80058aa:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80058b2:	2000      	movs	r0, #0
 80058b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80058b8:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ba:	68ca      	ldr	r2, [r1, #12]
 80058bc:	6849      	ldr	r1, [r1, #4]
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	f7ff fdde 	bl	8005480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c4:	2160      	movs	r1, #96	; 0x60
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	f7ff fdee 	bl	80054a8 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e7ee      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	68ca      	ldr	r2, [r1, #12]
 80058d0:	6849      	ldr	r1, [r1, #4]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	f7ff fdc1 	bl	800545a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d8:	2140      	movs	r1, #64	; 0x40
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	f7ff fde4 	bl	80054a8 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e7e4      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80058e2:	2002      	movs	r0, #2
}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	fffe0088 	.word	0xfffe0088

080058ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d027      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 80058f4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80058f6:	2301      	movs	r3, #1
 80058f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	2302      	movs	r3, #2
 80058fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005906:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005908:	4e0f      	ldr	r6, [pc, #60]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 800590a:	4c10      	ldr	r4, [pc, #64]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800590c:	42a3      	cmp	r3, r4
 800590e:	bf18      	it	ne
 8005910:	42b3      	cmpne	r3, r6
 8005912:	d103      	bne.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005914:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005918:	684c      	ldr	r4, [r1, #4]
 800591a:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005920:	680c      	ldr	r4, [r1, #0]
 8005922:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005924:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005928:	6889      	ldr	r1, [r1, #8]
 800592a:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800592e:	6803      	ldr	r3, [r0, #0]
 8005930:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005932:	2301      	movs	r3, #1
 8005934:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005938:	2300      	movs	r3, #0
 800593a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800593e:	4618      	mov	r0, r3
}
 8005940:	bc70      	pop	{r4, r5, r6}
 8005942:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005944:	2002      	movs	r0, #2
}
 8005946:	4770      	bx	lr
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	4770      	bx	lr

08005952 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005952:	4770      	bx	lr

08005954 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005954:	4770      	bx	lr
	...

08005958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800595c:	6883      	ldr	r3, [r0, #8]
 800595e:	6902      	ldr	r2, [r0, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	6942      	ldr	r2, [r0, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	69c2      	ldr	r2, [r0, #28]
 8005968:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800596a:	6801      	ldr	r1, [r0, #0]
 800596c:	6808      	ldr	r0, [r1, #0]
 800596e:	4a99      	ldr	r2, [pc, #612]	; (8005bd4 <UART_SetConfig+0x27c>)
 8005970:	4002      	ands	r2, r0
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	6853      	ldr	r3, [r2, #4]
 800597a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800597e:	68e1      	ldr	r1, [r4, #12]
 8005980:	430b      	orrs	r3, r1
 8005982:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005984:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8005986:	6a23      	ldr	r3, [r4, #32]
 8005988:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	688b      	ldr	r3, [r1, #8]
 800598e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	4a8f      	ldr	r2, [pc, #572]	; (8005bd8 <UART_SetConfig+0x280>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d018      	beq.n	80059d0 <UART_SetConfig+0x78>
 800599e:	4a8f      	ldr	r2, [pc, #572]	; (8005bdc <UART_SetConfig+0x284>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d028      	beq.n	80059f6 <UART_SetConfig+0x9e>
 80059a4:	4a8e      	ldr	r2, [pc, #568]	; (8005be0 <UART_SetConfig+0x288>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03d      	beq.n	8005a26 <UART_SetConfig+0xce>
 80059aa:	4a8e      	ldr	r2, [pc, #568]	; (8005be4 <UART_SetConfig+0x28c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d050      	beq.n	8005a52 <UART_SetConfig+0xfa>
 80059b0:	4a8d      	ldr	r2, [pc, #564]	; (8005be8 <UART_SetConfig+0x290>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d062      	beq.n	8005a7c <UART_SetConfig+0x124>
 80059b6:	4a8d      	ldr	r2, [pc, #564]	; (8005bec <UART_SetConfig+0x294>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d077      	beq.n	8005aac <UART_SetConfig+0x154>
 80059bc:	4a8c      	ldr	r2, [pc, #560]	; (8005bf0 <UART_SetConfig+0x298>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	f000 808c 	beq.w	8005adc <UART_SetConfig+0x184>
 80059c4:	4a8b      	ldr	r2, [pc, #556]	; (8005bf4 <UART_SetConfig+0x29c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f000 80a0 	beq.w	8005b0c <UART_SetConfig+0x1b4>
 80059cc:	2310      	movs	r3, #16
 80059ce:	e0b6      	b.n	8005b3e <UART_SetConfig+0x1e6>
 80059d0:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <UART_SetConfig+0x2a0>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d809      	bhi.n	80059f2 <UART_SetConfig+0x9a>
 80059de:	e8df f003 	tbb	[pc, r3]
 80059e2:	0402      	.short	0x0402
 80059e4:	06ad      	.short	0x06ad
 80059e6:	2301      	movs	r3, #1
 80059e8:	e0a9      	b.n	8005b3e <UART_SetConfig+0x1e6>
 80059ea:	2304      	movs	r3, #4
 80059ec:	e0a7      	b.n	8005b3e <UART_SetConfig+0x1e6>
 80059ee:	2308      	movs	r3, #8
 80059f0:	e0a5      	b.n	8005b3e <UART_SetConfig+0x1e6>
 80059f2:	2310      	movs	r3, #16
 80059f4:	e0a3      	b.n	8005b3e <UART_SetConfig+0x1e6>
 80059f6:	4b80      	ldr	r3, [pc, #512]	; (8005bf8 <UART_SetConfig+0x2a0>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f003 030c 	and.w	r3, r3, #12
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	d80e      	bhi.n	8005a22 <UART_SetConfig+0xca>
 8005a04:	e8df f003 	tbb	[pc, r3]
 8005a08:	0d0d0d07 	.word	0x0d0d0d07
 8005a0c:	0d0d0d09 	.word	0x0d0d0d09
 8005a10:	0d0d0da9 	.word	0x0d0d0da9
 8005a14:	0b          	.byte	0x0b
 8005a15:	00          	.byte	0x00
 8005a16:	2300      	movs	r3, #0
 8005a18:	e091      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	e08f      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	e08d      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a22:	2310      	movs	r3, #16
 8005a24:	e08b      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a26:	4b74      	ldr	r3, [pc, #464]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d00a      	beq.n	8005a4a <UART_SetConfig+0xf2>
 8005a34:	d906      	bls.n	8005a44 <UART_SetConfig+0xec>
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	f000 8091 	beq.w	8005b5e <UART_SetConfig+0x206>
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d106      	bne.n	8005a4e <UART_SetConfig+0xf6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	e07c      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a44:	b91b      	cbnz	r3, 8005a4e <UART_SetConfig+0xf6>
 8005a46:	2300      	movs	r3, #0
 8005a48:	e079      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	e077      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a4e:	2310      	movs	r3, #16
 8005a50:	e075      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a52:	4b69      	ldr	r3, [pc, #420]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d009      	beq.n	8005a74 <UART_SetConfig+0x11c>
 8005a60:	d905      	bls.n	8005a6e <UART_SetConfig+0x116>
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d07d      	beq.n	8005b62 <UART_SetConfig+0x20a>
 8005a66:	2bc0      	cmp	r3, #192	; 0xc0
 8005a68:	d106      	bne.n	8005a78 <UART_SetConfig+0x120>
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	e067      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a6e:	b91b      	cbnz	r3, 8005a78 <UART_SetConfig+0x120>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e064      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a74:	2304      	movs	r3, #4
 8005a76:	e062      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	e060      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a7c:	4b5e      	ldr	r3, [pc, #376]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d00b      	beq.n	8005aa4 <UART_SetConfig+0x14c>
 8005a8c:	d907      	bls.n	8005a9e <UART_SetConfig+0x146>
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a92:	d068      	beq.n	8005b66 <UART_SetConfig+0x20e>
 8005a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a98:	d106      	bne.n	8005aa8 <UART_SetConfig+0x150>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	e04f      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005a9e:	b91b      	cbnz	r3, 8005aa8 <UART_SetConfig+0x150>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e04c      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	e04a      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	e048      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005aac:	4b52      	ldr	r3, [pc, #328]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aba:	d00b      	beq.n	8005ad4 <UART_SetConfig+0x17c>
 8005abc:	d907      	bls.n	8005ace <UART_SetConfig+0x176>
 8005abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac2:	d052      	beq.n	8005b6a <UART_SetConfig+0x212>
 8005ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac8:	d106      	bne.n	8005ad8 <UART_SetConfig+0x180>
 8005aca:	2308      	movs	r3, #8
 8005acc:	e037      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005ace:	b91b      	cbnz	r3, 8005ad8 <UART_SetConfig+0x180>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e034      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	e032      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	e030      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005adc:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d00b      	beq.n	8005b04 <UART_SetConfig+0x1ac>
 8005aec:	d907      	bls.n	8005afe <UART_SetConfig+0x1a6>
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	d03c      	beq.n	8005b6e <UART_SetConfig+0x216>
 8005af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005af8:	d106      	bne.n	8005b08 <UART_SetConfig+0x1b0>
 8005afa:	2308      	movs	r3, #8
 8005afc:	e01f      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005afe:	b91b      	cbnz	r3, 8005b08 <UART_SetConfig+0x1b0>
 8005b00:	2300      	movs	r3, #0
 8005b02:	e01c      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b04:	2304      	movs	r3, #4
 8005b06:	e01a      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	e018      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b0c:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <UART_SetConfig+0x2a0>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1a:	d00b      	beq.n	8005b34 <UART_SetConfig+0x1dc>
 8005b1c:	d907      	bls.n	8005b2e <UART_SetConfig+0x1d6>
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d026      	beq.n	8005b72 <UART_SetConfig+0x21a>
 8005b24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b28:	d106      	bne.n	8005b38 <UART_SetConfig+0x1e0>
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	e007      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b2e:	b91b      	cbnz	r3, 8005b38 <UART_SetConfig+0x1e0>
 8005b30:	2300      	movs	r3, #0
 8005b32:	e004      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b34:	2304      	movs	r3, #4
 8005b36:	e002      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	e000      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b3c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3e:	69e2      	ldr	r2, [r4, #28]
 8005b40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b44:	d017      	beq.n	8005b76 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	f200 80b3 	bhi.w	8005cb2 <UART_SetConfig+0x35a>
 8005b4c:	e8df f003 	tbb	[pc, r3]
 8005b50:	b1958b76 	.word	0xb1958b76
 8005b54:	b1b1b19e 	.word	0xb1b1b19e
 8005b58:	a8          	.byte	0xa8
 8005b59:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e7ef      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e7ed      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e7eb      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e7e9      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e7e7      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e7e5      	b.n	8005b3e <UART_SetConfig+0x1e6>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e7e3      	b.n	8005b3e <UART_SetConfig+0x1e6>
    switch (clocksource)
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d85d      	bhi.n	8005c36 <UART_SetConfig+0x2de>
 8005b7a:	e8df f003 	tbb	[pc, r3]
 8005b7e:	1f05      	.short	0x1f05
 8005b80:	5c485c3f 	.word	0x5c485c3f
 8005b84:	5c5c      	.short	0x5c5c
 8005b86:	53          	.byte	0x53
 8005b87:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b88:	f7fe fc78 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005b8c:	6862      	ldr	r2, [r4, #4]
 8005b8e:	0853      	lsrs	r3, r2, #1
 8005b90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b98:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b9c:	f1a3 0110 	sub.w	r1, r3, #16
 8005ba0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005ba4:	4291      	cmp	r1, r2
 8005ba6:	f200 8087 	bhi.w	8005cb8 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005bb4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	60d3      	str	r3, [r2, #12]
 8005bba:	e050      	b.n	8005c5e <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005bbc:	f7fe fc6e 	bl	800449c <HAL_RCC_GetPCLK2Freq>
 8005bc0:	6862      	ldr	r2, [r4, #4]
 8005bc2:	0853      	lsrs	r3, r2, #1
 8005bc4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2000      	movs	r0, #0
        break;
 8005bd0:	e7e4      	b.n	8005b9c <UART_SetConfig+0x244>
 8005bd2:	bf00      	nop
 8005bd4:	efff69f3 	.word	0xefff69f3
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40004400 	.word	0x40004400
 8005be0:	40004800 	.word	0x40004800
 8005be4:	40004c00 	.word	0x40004c00
 8005be8:	40005000 	.word	0x40005000
 8005bec:	40011400 	.word	0x40011400
 8005bf0:	40007800 	.word	0x40007800
 8005bf4:	40007c00 	.word	0x40007c00
 8005bf8:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005bfc:	6862      	ldr	r2, [r4, #4]
 8005bfe:	4b30      	ldr	r3, [pc, #192]	; (8005cc0 <UART_SetConfig+0x368>)
 8005c00:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c08:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0a:	2000      	movs	r0, #0
        break;
 8005c0c:	e7c6      	b.n	8005b9c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c0e:	f7fe fb29 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	0853      	lsrs	r3, r2, #1
 8005c16:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c1e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c20:	2000      	movs	r0, #0
        break;
 8005c22:	e7bb      	b.n	8005b9c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c24:	6862      	ldr	r2, [r4, #4]
 8005c26:	0853      	lsrs	r3, r2, #1
 8005c28:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c30:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c32:	2000      	movs	r0, #0
        break;
 8005c34:	e7b2      	b.n	8005b9c <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8005c36:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e7af      	b.n	8005b9c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c3c:	f7fe fc1e 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005c40:	6862      	ldr	r2, [r4, #4]
 8005c42:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4e:	f1a3 0110 	sub.w	r1, r3, #16
 8005c52:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005c56:	4291      	cmp	r1, r2
 8005c58:	d830      	bhi.n	8005cbc <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005c62:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005c64:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c66:	f7fe fc19 	bl	800449c <HAL_RCC_GetPCLK2Freq>
 8005c6a:	6862      	ldr	r2, [r4, #4]
 8005c6c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c74:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c76:	2000      	movs	r0, #0
        break;
 8005c78:	e7e9      	b.n	8005c4e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <UART_SetConfig+0x36c>)
 8005c7e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c86:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	2000      	movs	r0, #0
        break;
 8005c8a:	e7e0      	b.n	8005c4e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c8c:	f7fe faea 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c9c:	2000      	movs	r0, #0
        break;
 8005c9e:	e7d6      	b.n	8005c4e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ca0:	6862      	ldr	r2, [r4, #4]
 8005ca2:	0853      	lsrs	r3, r2, #1
 8005ca4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cae:	2000      	movs	r0, #0
        break;
 8005cb0:	e7cd      	b.n	8005c4e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8005cb2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e7ca      	b.n	8005c4e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e7d0      	b.n	8005c5e <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e7ce      	b.n	8005c5e <UART_SetConfig+0x306>
 8005cc0:	01e84800 	.word	0x01e84800
 8005cc4:	00f42400 	.word	0x00f42400

08005cc8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cca:	f013 0f01 	tst.w	r3, #1
 8005cce:	d006      	beq.n	8005cde <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd0:	6802      	ldr	r2, [r0, #0]
 8005cd2:	6853      	ldr	r3, [r2, #4]
 8005cd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cd8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ce0:	f013 0f02 	tst.w	r3, #2
 8005ce4:	d006      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce6:	6802      	ldr	r2, [r0, #0]
 8005ce8:	6853      	ldr	r3, [r2, #4]
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cf6:	f013 0f04 	tst.w	r3, #4
 8005cfa:	d006      	beq.n	8005d0a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cfc:	6802      	ldr	r2, [r0, #0]
 8005cfe:	6853      	ldr	r3, [r2, #4]
 8005d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d04:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d0c:	f013 0f08 	tst.w	r3, #8
 8005d10:	d006      	beq.n	8005d20 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d12:	6802      	ldr	r2, [r0, #0]
 8005d14:	6853      	ldr	r3, [r2, #4]
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d1a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d22:	f013 0f10 	tst.w	r3, #16
 8005d26:	d006      	beq.n	8005d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d28:	6802      	ldr	r2, [r0, #0]
 8005d2a:	6893      	ldr	r3, [r2, #8]
 8005d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d30:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d36:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d38:	f013 0f20 	tst.w	r3, #32
 8005d3c:	d006      	beq.n	8005d4c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3e:	6802      	ldr	r2, [r0, #0]
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d54:	6802      	ldr	r2, [r0, #0]
 8005d56:	6853      	ldr	r3, [r2, #4]
 8005d58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d68:	d00b      	beq.n	8005d82 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d70:	d006      	beq.n	8005d80 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d72:	6802      	ldr	r2, [r0, #0]
 8005d74:	6853      	ldr	r3, [r2, #4]
 8005d76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005d7a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6053      	str	r3, [r2, #4]
  }
}
 8005d80:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d82:	6802      	ldr	r2, [r0, #0]
 8005d84:	6853      	ldr	r3, [r2, #4]
 8005d86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d8a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6053      	str	r3, [r2, #4]
 8005d90:	e7eb      	b.n	8005d6a <UART_AdvFeatureConfig+0xa2>

08005d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	4605      	mov	r5, r0
 8005d98:	460f      	mov	r7, r1
 8005d9a:	4616      	mov	r6, r2
 8005d9c:	4698      	mov	r8, r3
 8005d9e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	ea37 0303 	bics.w	r3, r7, r3
 8005da8:	bf0c      	ite	eq
 8005daa:	2301      	moveq	r3, #1
 8005dac:	2300      	movne	r3, #0
 8005dae:	42b3      	cmp	r3, r6
 8005db0:	d11c      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005db6:	d0f3      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db8:	f7fc f920 	bl	8001ffc <HAL_GetTick>
 8005dbc:	eba0 0008 	sub.w	r0, r0, r8
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d801      	bhi.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x36>
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	d1eb      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc8:	682a      	ldr	r2, [r5, #0]
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	682a      	ldr	r2, [r5, #0]
 8005dd4:	6893      	ldr	r3, [r2, #8]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ddc:	2320      	movs	r3, #32
 8005dde:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005de0:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005de2:	2300      	movs	r3, #0
 8005de4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8005de8:	2003      	movs	r0, #3
 8005dea:	e000      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8005dec:	2000      	movs	r0, #0
}
 8005dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005df2 <UART_CheckIdleState>:
{
 8005df2:	b510      	push	{r4, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005dfc:	f7fc f8fe 	bl	8001ffc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	f012 0f08 	tst.w	r2, #8
 8005e08:	d107      	bne.n	8005e1a <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005e10:	2000      	movs	r0, #0
 8005e12:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005e16:	b002      	add	sp, #8
 8005e18:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4603      	mov	r3, r0
 8005e22:	2200      	movs	r2, #0
 8005e24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7ff ffb2 	bl	8005d92 <UART_WaitOnFlagUntilTimeout>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0eb      	beq.n	8005e0a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005e32:	2003      	movs	r0, #3
 8005e34:	e7ef      	b.n	8005e16 <UART_CheckIdleState+0x24>

08005e36 <HAL_UART_Init>:
  if (huart == NULL)
 8005e36:	b368      	cbz	r0, 8005e94 <HAL_UART_Init+0x5e>
{
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005e3e:	b303      	cbz	r3, 8005e82 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	2324      	movs	r3, #36	; 0x24
 8005e42:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	6813      	ldr	r3, [r2, #0]
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7ff fd82 	bl	8005958 <UART_SetConfig>
 8005e54:	2801      	cmp	r0, #1
 8005e56:	d013      	beq.n	8005e80 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e5a:	b9bb      	cbnz	r3, 8005e8c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	6853      	ldr	r3, [r2, #4]
 8005e60:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005e64:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	6893      	ldr	r3, [r2, #8]
 8005e6a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005e6e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff ffb9 	bl	8005df2 <UART_CheckIdleState>
}
 8005e80:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005e82:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005e86:	f003 fdb7 	bl	80099f8 <HAL_UART_MspInit>
 8005e8a:	e7d9      	b.n	8005e40 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7ff ff1b 	bl	8005cc8 <UART_AdvFeatureConfig>
 8005e92:	e7e3      	b.n	8005e5c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005e94:	2001      	movs	r0, #1
}
 8005e96:	4770      	bx	lr

08005e98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005e98:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005e9a:	680b      	ldr	r3, [r1, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d018      	beq.n	8005ed2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005ea0:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ea2:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <FMC_SDRAM_Init+0x70>)
 8005ea4:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ea6:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005ea8:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005eaa:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8005eac:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8005eae:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005eb0:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8005eb2:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005eb4:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005eb6:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005eb8:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005eba:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005ebc:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8005ebe:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005ec0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8005ec2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005ec4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005ec6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ec8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005eca:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005ecc:	2000      	movs	r0, #0
 8005ece:	bc30      	pop	{r4, r5}
 8005ed0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005ed2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005ed4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ed8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005eda:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005edc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005ede:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005ee0:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ee2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005ee4:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ee6:	4c08      	ldr	r4, [pc, #32]	; (8005f08 <FMC_SDRAM_Init+0x70>)
 8005ee8:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005eea:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8005eec:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005eee:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8005ef0:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8005ef2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8005ef4:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8005ef6:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8005ef8:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8005efa:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8005efc:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8005efe:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f00:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f02:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005f04:	6043      	str	r3, [r0, #4]
 8005f06:	e7e1      	b.n	8005ecc <FMC_SDRAM_Init+0x34>
 8005f08:	ffff8000 	.word	0xffff8000

08005f0c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f0c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005f0e:	2a01      	cmp	r2, #1
 8005f10:	d021      	beq.n	8005f56 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f12:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f14:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f18:	680b      	ldr	r3, [r1, #0]
 8005f1a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005f1c:	684c      	ldr	r4, [r1, #4]
 8005f1e:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f20:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005f24:	688c      	ldr	r4, [r1, #8]
 8005f26:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005f28:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005f2c:	68cc      	ldr	r4, [r1, #12]
 8005f2e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005f30:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005f34:	690c      	ldr	r4, [r1, #16]
 8005f36:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005f38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8005f3c:	694c      	ldr	r4, [r1, #20]
 8005f3e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005f40:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8005f44:	6989      	ldr	r1, [r1, #24]
 8005f46:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f48:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f4c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f4e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005f50:	2000      	movs	r0, #0
 8005f52:	bc30      	pop	{r4, r5}
 8005f54:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f56:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005f58:	4c11      	ldr	r4, [pc, #68]	; (8005fa0 <FMC_SDRAM_Timing_Init+0x94>)
 8005f5a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f5c:	68ca      	ldr	r2, [r1, #12]
 8005f5e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8005f60:	694b      	ldr	r3, [r1, #20]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f66:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8005f6a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f6c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f6e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f72:	680b      	ldr	r3, [r1, #0]
 8005f74:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f76:	684d      	ldr	r5, [r1, #4]
 8005f78:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f7e:	688d      	ldr	r5, [r1, #8]
 8005f80:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005f86:	690d      	ldr	r5, [r1, #16]
 8005f88:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f8a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8005f8e:	6989      	ldr	r1, [r1, #24]
 8005f90:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f96:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f98:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f9a:	60c3      	str	r3, [r0, #12]
 8005f9c:	e7d8      	b.n	8005f50 <FMC_SDRAM_Timing_Init+0x44>
 8005f9e:	bf00      	nop
 8005fa0:	ff0f0fff 	.word	0xff0f0fff

08005fa4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005fa4:	b410      	push	{r4}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8005faa:	2000      	movs	r0, #0
 8005fac:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fae:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8005fb0:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fb2:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005fb4:	688a      	ldr	r2, [r1, #8]
 8005fb6:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8005fb8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8005fbc:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fbe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8005fc2:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005fc4:	9b01      	ldr	r3, [sp, #4]
 8005fc6:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8005fc8:	b003      	add	sp, #12
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005fd0:	6943      	ldr	r3, [r0, #20]
 8005fd2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005fd6:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4770      	bx	lr

08005fdc <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8005fdc:	4770      	bx	lr

08005fde <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4770      	bx	lr

08005fe2 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8005fe2:	4770      	bx	lr

08005fe4 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <ft5336_Get_I2C_InitializedStatus+0x8>)
 8005fe6:	7818      	ldrb	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	2000033c 	.word	0x2000033c

08005ff0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8005ff0:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005ff2:	f7ff fff7 	bl	8005fe4 <ft5336_Get_I2C_InitializedStatus>
 8005ff6:	b100      	cbz	r0, 8005ffa <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8005ff8:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8005ffa:	f000 fa09 	bl	8006410 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005ffe:	4b02      	ldr	r3, [pc, #8]	; (8006008 <ft5336_I2C_InitializeIfRequired+0x18>)
 8006000:	2201      	movs	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]
}
 8006004:	e7f8      	b.n	8005ff8 <ft5336_I2C_InitializeIfRequired+0x8>
 8006006:	bf00      	nop
 8006008:	2000033c 	.word	0x2000033c

0800600c <ft5336_Init>:
{
 800600c:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 800600e:	20c8      	movs	r0, #200	; 0xc8
 8006010:	f000 fa2e 	bl	8006470 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8006014:	f7ff ffec 	bl	8005ff0 <ft5336_I2C_InitializeIfRequired>
}
 8006018:	bd08      	pop	{r3, pc}

0800601a <ft5336_ReadID>:
{
 800601a:	b570      	push	{r4, r5, r6, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8006020:	2400      	movs	r4, #0
 8006022:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8006026:	f7ff ffe3 	bl	8005ff0 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800602a:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800602c:	e001      	b.n	8006032 <ft5336_ReadID+0x18>
 800602e:	3401      	adds	r4, #1
 8006030:	b2e4      	uxtb	r4, r4
 8006032:	f085 0301 	eor.w	r3, r5, #1
 8006036:	2c02      	cmp	r4, #2
 8006038:	bf8c      	ite	hi
 800603a:	2300      	movhi	r3, #0
 800603c:	f003 0301 	andls.w	r3, r3, #1
 8006040:	b163      	cbz	r3, 800605c <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006042:	21a8      	movs	r1, #168	; 0xa8
 8006044:	b2f0      	uxtb	r0, r6
 8006046:	f000 f9fd 	bl	8006444 <TS_IO_Read>
 800604a:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800604e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b51      	cmp	r3, #81	; 0x51
 8006056:	d1ea      	bne.n	800602e <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 8006058:	2501      	movs	r5, #1
 800605a:	e7e8      	b.n	800602e <ft5336_ReadID+0x14>
  return (ucReadId);
 800605c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006060:	b002      	add	sp, #8
 8006062:	bd70      	pop	{r4, r5, r6, pc}

08006064 <ft5336_TS_DetectTouch>:
{
 8006064:	b500      	push	{lr}
 8006066:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800606e:	2102      	movs	r1, #2
 8006070:	b2c0      	uxtb	r0, r0
 8006072:	f000 f9e7 	bl	8006444 <TS_IO_Read>
 8006076:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800607a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8006086:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b05      	cmp	r3, #5
 800608e:	d902      	bls.n	8006096 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8006096:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800609a:	4b04      	ldr	r3, [pc, #16]	; (80060ac <ft5336_TS_DetectTouch+0x48>)
 800609c:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 800609e:	2200      	movs	r2, #0
 80060a0:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80060a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80060a6:	b003      	add	sp, #12
 80060a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ac:	2000033c 	.word	0x2000033c

080060b0 <ft5336_TS_GetXY>:
{
 80060b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80060bc:	4d4f      	ldr	r5, [pc, #316]	; (80061fc <ft5336_TS_GetXY+0x14c>)
 80060be:	78ab      	ldrb	r3, [r5, #2]
 80060c0:	786c      	ldrb	r4, [r5, #1]
 80060c2:	42a3      	cmp	r3, r4
 80060c4:	f080 8096 	bcs.w	80061f4 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 80060c8:	2b09      	cmp	r3, #9
 80060ca:	d806      	bhi.n	80060da <ft5336_TS_GetXY+0x2a>
 80060cc:	e8df f003 	tbb	[pc, r3]
 80060d0:	1b130b53 	.word	0x1b130b53
 80060d4:	3b332b23 	.word	0x3b332b23
 80060d8:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 80060da:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 80060de:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 80060e0:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 80060e2:	4643      	mov	r3, r8
 80060e4:	e04e      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 80060e6:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 80060ea:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 80060ee:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 80060f2:	230a      	movs	r3, #10
      break;
 80060f4:	e046      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 80060f6:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 80060fa:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 80060fe:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8006102:	2310      	movs	r3, #16
      break;
 8006104:	e03e      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 8006106:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 800610a:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 800610e:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8006112:	2316      	movs	r3, #22
      break;
 8006114:	e036      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 8006116:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 800611a:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 800611e:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8006122:	231c      	movs	r3, #28
      break;
 8006124:	e02e      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 8006126:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 800612a:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 800612e:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8006132:	2322      	movs	r3, #34	; 0x22
      break;
 8006134:	e026      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 8006136:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 800613a:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 800613e:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8006142:	2328      	movs	r3, #40	; 0x28
      break;
 8006144:	e01e      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 8006146:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 800614a:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 800614e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8006152:	232e      	movs	r3, #46	; 0x2e
      break;
 8006154:	e016      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 8006156:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 800615a:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 800615e:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8006162:	2334      	movs	r3, #52	; 0x34
      break;
 8006164:	e00e      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 8006166:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 800616a:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 800616e:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8006172:	233a      	movs	r3, #58	; 0x3a
      break;
 8006174:	e006      	b.n	8006184 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 8006176:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 800617a:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 800617e:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8006182:	2304      	movs	r3, #4
 8006184:	4616      	mov	r6, r2
 8006186:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006188:	b2c4      	uxtb	r4, r0
 800618a:	4619      	mov	r1, r3
 800618c:	4620      	mov	r0, r4
 800618e:	f000 f959 	bl	8006444 <TS_IO_Read>
 8006192:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006196:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800619a:	4d19      	ldr	r5, [pc, #100]	; (8006200 <ft5336_TS_GetXY+0x150>)
 800619c:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800619e:	4651      	mov	r1, sl
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 f94f 	bl	8006444 <TS_IO_Read>
 80061a6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80061aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061b4:	882a      	ldrh	r2, [r5, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	802b      	strh	r3, [r5, #0]
    *X = coord;
 80061ba:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80061bc:	4649      	mov	r1, r9
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 f940 	bl	8006444 <TS_IO_Read>
 80061c4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80061c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061cc:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80061ce:	4641      	mov	r1, r8
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f937 	bl	8006444 <TS_IO_Read>
 80061d6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80061da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061e4:	882a      	ldrh	r2, [r5, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 80061ea:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <ft5336_TS_GetXY+0x14c>)
 80061ee:	7893      	ldrb	r3, [r2, #2]
 80061f0:	3301      	adds	r3, #1
 80061f2:	7093      	strb	r3, [r2, #2]
}
 80061f4:	b002      	add	sp, #8
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	bf00      	nop
 80061fc:	2000033c 	.word	0x2000033c
 8006200:	2000033a 	.word	0x2000033a

08006204 <ft5336_TS_EnableIT>:
{
 8006204:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006206:	2201      	movs	r2, #1
 8006208:	21a4      	movs	r1, #164	; 0xa4
 800620a:	b2c0      	uxtb	r0, r0
 800620c:	f000 f908 	bl	8006420 <TS_IO_Write>
}
 8006210:	bd08      	pop	{r3, pc}

08006212 <ft5336_TS_DisableIT>:
{
 8006212:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006214:	2200      	movs	r2, #0
 8006216:	21a4      	movs	r1, #164	; 0xa4
 8006218:	b2c0      	uxtb	r0, r0
 800621a:	f000 f901 	bl	8006420 <TS_IO_Write>
}
 800621e:	bd08      	pop	{r3, pc}

08006220 <ft5336_TS_Start>:
{
 8006220:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8006222:	f7ff fff6 	bl	8006212 <ft5336_TS_DisableIT>
}
 8006226:	bd08      	pop	{r3, pc}

08006228 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <I2Cx_MspInit+0x118>)
 800622e:	4283      	cmp	r3, r0
 8006230:	d043      	beq.n	80062ba <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006232:	4c44      	ldr	r4, [pc, #272]	; (8006344 <I2Cx_MspInit+0x11c>)
 8006234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	6323      	str	r3, [r4, #48]	; 0x30
 800623c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8006246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624a:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800624c:	2312      	movs	r3, #18
 800624e:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006250:	2500      	movs	r5, #0
 8006252:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006254:	2302      	movs	r3, #2
 8006256:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8006258:	2304      	movs	r3, #4
 800625a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800625c:	4e3a      	ldr	r6, [pc, #232]	; (8006348 <I2Cx_MspInit+0x120>)
 800625e:	a905      	add	r1, sp, #20
 8006260:	4630      	mov	r0, r6
 8006262:	f7fc ff53 	bl	800310c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8006266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800626c:	a905      	add	r1, sp, #20
 800626e:	4630      	mov	r0, r6
 8006270:	f7fc ff4c 	bl	800310c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800627a:	6423      	str	r3, [r4, #64]	; 0x40
 800627c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800627e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006286:	6a23      	ldr	r3, [r4, #32]
 8006288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800628c:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800628e:	6a23      	ldr	r3, [r4, #32]
 8006290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006294:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8006296:	462a      	mov	r2, r5
 8006298:	210f      	movs	r1, #15
 800629a:	201f      	movs	r0, #31
 800629c:	f7fc fab2 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80062a0:	201f      	movs	r0, #31
 80062a2:	f7fc fae1 	bl	8002868 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80062a6:	462a      	mov	r2, r5
 80062a8:	210f      	movs	r1, #15
 80062aa:	2020      	movs	r0, #32
 80062ac:	f7fc faaa 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80062b0:	2020      	movs	r0, #32
 80062b2:	f7fc fad9 	bl	8002868 <HAL_NVIC_EnableIRQ>
  }
}
 80062b6:	b00a      	add	sp, #40	; 0x28
 80062b8:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80062ba:	4c22      	ldr	r4, [pc, #136]	; (8006344 <I2Cx_MspInit+0x11c>)
 80062bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	6323      	str	r3, [r4, #48]	; 0x30
 80062c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80062d2:	2312      	movs	r3, #18
 80062d4:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80062d6:	2500      	movs	r5, #0
 80062d8:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80062da:	2302      	movs	r3, #2
 80062dc:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80062de:	2304      	movs	r3, #4
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062e2:	4e1a      	ldr	r6, [pc, #104]	; (800634c <I2Cx_MspInit+0x124>)
 80062e4:	a905      	add	r1, sp, #20
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7fc ff10 	bl	800310c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80062ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062f2:	a905      	add	r1, sp, #20
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7fc ff09 	bl	800310c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80062fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006300:	6423      	str	r3, [r4, #64]	; 0x40
 8006302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006308:	9302      	str	r3, [sp, #8]
 800630a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800630c:	6a23      	ldr	r3, [r4, #32]
 800630e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006312:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006314:	6a23      	ldr	r3, [r4, #32]
 8006316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800631a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800631c:	462a      	mov	r2, r5
 800631e:	210f      	movs	r1, #15
 8006320:	2048      	movs	r0, #72	; 0x48
 8006322:	f7fc fa6f 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006326:	2048      	movs	r0, #72	; 0x48
 8006328:	f7fc fa9e 	bl	8002868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800632c:	462a      	mov	r2, r5
 800632e:	210f      	movs	r1, #15
 8006330:	2049      	movs	r0, #73	; 0x49
 8006332:	f7fc fa67 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8006336:	2049      	movs	r0, #73	; 0x49
 8006338:	f7fc fa96 	bl	8002868 <HAL_NVIC_EnableIRQ>
 800633c:	e7bb      	b.n	80062b6 <I2Cx_MspInit+0x8e>
 800633e:	bf00      	nop
 8006340:	20000340 	.word	0x20000340
 8006344:	40023800 	.word	0x40023800
 8006348:	40020400 	.word	0x40020400
 800634c:	40021c00 	.word	0x40021c00

08006350 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006350:	b510      	push	{r4, lr}
 8006352:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006354:	f7fd fb74 	bl	8003a40 <HAL_I2C_GetState>
 8006358:	b9a0      	cbnz	r0, 8006384 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <I2Cx_Init+0x3c>)
 800635c:	429c      	cmp	r4, r3
 800635e:	d012      	beq.n	8006386 <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <I2Cx_Init+0x40>)
 8006362:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <I2Cx_Init+0x44>)
 8006366:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800636c:	2201      	movs	r2, #1
 800636e:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006370:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006372:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006374:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006376:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff ff55 	bl	8006228 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800637e:	4620      	mov	r0, r4
 8006380:	f7fd f932 	bl	80035e8 <HAL_I2C_Init>
  }
}
 8006384:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006386:	4b04      	ldr	r3, [pc, #16]	; (8006398 <I2Cx_Init+0x48>)
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	e7eb      	b.n	8006364 <I2Cx_Init+0x14>
 800638c:	20000340 	.word	0x20000340
 8006390:	40005400 	.word	0x40005400
 8006394:	40912732 	.word	0x40912732
 8006398:	40005c00 	.word	0x40005c00

0800639c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800639c:	b510      	push	{r4, lr}
 800639e:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80063a0:	f7fd f981 	bl	80036a6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff ffd3 	bl	8006350 <I2Cx_Init>
}
 80063aa:	bd10      	pop	{r4, pc}

080063ac <I2Cx_WriteMultiple>:
{
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	4606      	mov	r6, r0
 80063b2:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80063b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063b8:	9102      	str	r1, [sp, #8]
 80063ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80063be:	9101      	str	r1, [sp, #4]
 80063c0:	9908      	ldr	r1, [sp, #32]
 80063c2:	9100      	str	r1, [sp, #0]
 80063c4:	4621      	mov	r1, r4
 80063c6:	f7fd f987 	bl	80036d8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80063ca:	4605      	mov	r5, r0
 80063cc:	b910      	cbnz	r0, 80063d4 <I2Cx_WriteMultiple+0x28>
}
 80063ce:	4628      	mov	r0, r5
 80063d0:	b004      	add	sp, #16
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80063d4:	4621      	mov	r1, r4
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff ffe0 	bl	800639c <I2Cx_Error>
 80063dc:	e7f7      	b.n	80063ce <I2Cx_WriteMultiple+0x22>

080063de <I2Cx_ReadMultiple>:
{
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	4606      	mov	r6, r0
 80063e4:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80063e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063ea:	9102      	str	r1, [sp, #8]
 80063ec:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80063f0:	9101      	str	r1, [sp, #4]
 80063f2:	9908      	ldr	r1, [sp, #32]
 80063f4:	9100      	str	r1, [sp, #0]
 80063f6:	4621      	mov	r1, r4
 80063f8:	f7fd fa46 	bl	8003888 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80063fc:	4605      	mov	r5, r0
 80063fe:	b910      	cbnz	r0, 8006406 <I2Cx_ReadMultiple+0x28>
}
 8006400:	4628      	mov	r0, r5
 8006402:	b004      	add	sp, #16
 8006404:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8006406:	4621      	mov	r1, r4
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff ffc7 	bl	800639c <I2Cx_Error>
 800640e:	e7f7      	b.n	8006400 <I2Cx_ReadMultiple+0x22>

08006410 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006410:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8006412:	4802      	ldr	r0, [pc, #8]	; (800641c <TS_IO_Init+0xc>)
 8006414:	f7ff ff9c 	bl	8006350 <I2Cx_Init>
}
 8006418:	bd08      	pop	{r3, pc}
 800641a:	bf00      	nop
 800641c:	20000340 	.word	0x20000340

08006420 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006420:	b510      	push	{r4, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	ac04      	add	r4, sp, #16
 8006426:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800642a:	2301      	movs	r3, #1
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	9400      	str	r4, [sp, #0]
 8006430:	460a      	mov	r2, r1
 8006432:	4601      	mov	r1, r0
 8006434:	4802      	ldr	r0, [pc, #8]	; (8006440 <TS_IO_Write+0x20>)
 8006436:	f7ff ffb9 	bl	80063ac <I2Cx_WriteMultiple>
}
 800643a:	b004      	add	sp, #16
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	20000340 	.word	0x20000340

08006444 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006444:	b500      	push	{lr}
 8006446:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 8006448:	aa04      	add	r2, sp, #16
 800644a:	2300      	movs	r3, #0
 800644c:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006450:	2301      	movs	r3, #1
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	460a      	mov	r2, r1
 8006458:	4601      	mov	r1, r0
 800645a:	4804      	ldr	r0, [pc, #16]	; (800646c <TS_IO_Read+0x28>)
 800645c:	f7ff ffbf 	bl	80063de <I2Cx_ReadMultiple>

  return read_value;
}
 8006460:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8006464:	b005      	add	sp, #20
 8006466:	f85d fb04 	ldr.w	pc, [sp], #4
 800646a:	bf00      	nop
 800646c:	20000340 	.word	0x20000340

08006470 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006470:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8006472:	f7fb fdc9 	bl	8002008 <HAL_Delay>
}
 8006476:	bd08      	pop	{r3, pc}

08006478 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b083      	sub	sp, #12
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	4616      	mov	r6, r2
 8006482:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <LL_FillBuffer+0x70>)
 8006486:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800648a:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <LL_FillBuffer+0x74>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <LL_FillBuffer+0x78>)
 8006492:	2134      	movs	r1, #52	; 0x34
 8006494:	fb01 2303 	mla	r3, r1, r3, r2
 8006498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649a:	2b02      	cmp	r3, #2
 800649c:	d00c      	beq.n	80064b8 <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <LL_FillBuffer+0x70>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80064a4:	4810      	ldr	r0, [pc, #64]	; (80064e8 <LL_FillBuffer+0x70>)
 80064a6:	9b08      	ldr	r3, [sp, #32]
 80064a8:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <LL_FillBuffer+0x7c>)
 80064ac:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80064ae:	f7fc fce1 	bl	8002e74 <HAL_DMA2D_Init>
 80064b2:	b128      	cbz	r0, 80064c0 <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 80064b4:	b003      	add	sp, #12
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <LL_FillBuffer+0x70>)
 80064ba:	2202      	movs	r2, #2
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	e7f1      	b.n	80064a4 <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80064c0:	4621      	mov	r1, r4
 80064c2:	4809      	ldr	r0, [pc, #36]	; (80064e8 <LL_FillBuffer+0x70>)
 80064c4:	f7fc fdc0 	bl	8003048 <HAL_DMA2D_ConfigLayer>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1f3      	bne.n	80064b4 <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80064cc:	9700      	str	r7, [sp, #0]
 80064ce:	4633      	mov	r3, r6
 80064d0:	462a      	mov	r2, r5
 80064d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d4:	4804      	ldr	r0, [pc, #16]	; (80064e8 <LL_FillBuffer+0x70>)
 80064d6:	f7fc fcfb 	bl	8002ed0 <HAL_DMA2D_Start>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1ea      	bne.n	80064b4 <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80064de:	210a      	movs	r1, #10
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <LL_FillBuffer+0x70>)
 80064e2:	f7fc fd11 	bl	8002f08 <HAL_DMA2D_PollForTransfer>
}
 80064e6:	e7e5      	b.n	80064b4 <LL_FillBuffer+0x3c>
 80064e8:	200003a8 	.word	0x200003a8
 80064ec:	2000038c 	.word	0x2000038c
 80064f0:	200043f8 	.word	0x200043f8
 80064f4:	4002b000 	.word	0x4002b000

080064f8 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80064f8:	4b03      	ldr	r3, [pc, #12]	; (8006508 <BSP_LCD_GetXSize+0x10>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a03      	ldr	r2, [pc, #12]	; (800650c <BSP_LCD_GetXSize+0x14>)
 80064fe:	2134      	movs	r1, #52	; 0x34
 8006500:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006504:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006506:	4770      	bx	lr
 8006508:	2000038c 	.word	0x2000038c
 800650c:	200043f8 	.word	0x200043f8

08006510 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <BSP_LCD_GetYSize+0x10>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a03      	ldr	r2, [pc, #12]	; (8006524 <BSP_LCD_GetYSize+0x14>)
 8006516:	2134      	movs	r1, #52	; 0x34
 8006518:	fb01 2303 	mla	r3, r1, r3, r2
}
 800651c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800651e:	4770      	bx	lr
 8006520:	2000038c 	.word	0x2000038c
 8006524:	200043f8 	.word	0x200043f8

08006528 <BSP_LCD_LayerDefaultInit>:
{     
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	4605      	mov	r5, r0
 800652e:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 8006530:	2400      	movs	r4, #0
 8006532:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006534:	f7ff ffe0 	bl	80064f8 <BSP_LCD_GetXSize>
 8006538:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 800653a:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800653c:	f7ff ffe8 	bl	8006510 <BSP_LCD_GetYSize>
 8006540:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006542:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8006544:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8006546:	23ff      	movs	r3, #255	; 0xff
 8006548:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 800654a:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 800654c:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8006550:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8006554:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006558:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800655c:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800655e:	2307      	movs	r3, #7
 8006560:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006562:	f7ff ffc9 	bl	80064f8 <BSP_LCD_GetXSize>
 8006566:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006568:	f7ff ffd2 	bl	8006510 <BSP_LCD_GetYSize>
 800656c:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800656e:	462a      	mov	r2, r5
 8006570:	a901      	add	r1, sp, #4
 8006572:	480a      	ldr	r0, [pc, #40]	; (800659c <BSP_LCD_LayerDefaultInit+0x74>)
 8006574:	f7fd fc1c 	bl	8003db0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <BSP_LCD_LayerDefaultInit+0x78>)
 800657a:	0068      	lsls	r0, r5, #1
 800657c:	1941      	adds	r1, r0, r5
 800657e:	008b      	lsls	r3, r1, #2
 8006580:	4413      	add	r3, r2
 8006582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006586:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006588:	4906      	ldr	r1, [pc, #24]	; (80065a4 <BSP_LCD_LayerDefaultInit+0x7c>)
 800658a:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800658c:	4428      	add	r0, r5
 800658e:	0083      	lsls	r3, r0, #2
 8006590:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8006594:	50d1      	str	r1, [r2, r3]
}
 8006596:	b00e      	add	sp, #56	; 0x38
 8006598:	bd70      	pop	{r4, r5, r6, pc}
 800659a:	bf00      	nop
 800659c:	200043f8 	.word	0x200043f8
 80065a0:	20000390 	.word	0x20000390
 80065a4:	20000014 	.word	0x20000014

080065a8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80065a8:	4b01      	ldr	r3, [pc, #4]	; (80065b0 <BSP_LCD_SelectLayer+0x8>)
 80065aa:	6018      	str	r0, [r3, #0]
} 
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	2000038c 	.word	0x2000038c

080065b4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80065b4:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <BSP_LCD_SetTextColor+0x10>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80065bc:	009a      	lsls	r2, r3, #2
 80065be:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <BSP_LCD_SetTextColor+0x14>)
 80065c0:	5098      	str	r0, [r3, r2]
}
 80065c2:	4770      	bx	lr
 80065c4:	2000038c 	.word	0x2000038c
 80065c8:	20000390 	.word	0x20000390

080065cc <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <BSP_LCD_SetBackColor+0x14>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80065d4:	009a      	lsls	r2, r3, #2
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <BSP_LCD_SetBackColor+0x18>)
 80065d8:	4413      	add	r3, r2
 80065da:	6058      	str	r0, [r3, #4]
}
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	2000038c 	.word	0x2000038c
 80065e4:	20000390 	.word	0x20000390

080065e8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <BSP_LCD_SetFont+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80065f0:	009a      	lsls	r2, r3, #2
 80065f2:	4b03      	ldr	r3, [pc, #12]	; (8006600 <BSP_LCD_SetFont+0x18>)
 80065f4:	4413      	add	r3, r2
 80065f6:	6098      	str	r0, [r3, #8]
}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000038c 	.word	0x2000038c
 8006600:	20000390 	.word	0x20000390

08006604 <BSP_LCD_Clear>:
{ 
 8006604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006606:	b083      	sub	sp, #12
 8006608:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <BSP_LCD_Clear+0x34>)
 800660c:	681c      	ldr	r4, [r3, #0]
 800660e:	4a0b      	ldr	r2, [pc, #44]	; (800663c <BSP_LCD_Clear+0x38>)
 8006610:	2334      	movs	r3, #52	; 0x34
 8006612:	fb03 2304 	mla	r3, r3, r4, r2
 8006616:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006618:	f7ff ff6e 	bl	80064f8 <BSP_LCD_GetXSize>
 800661c:	4606      	mov	r6, r0
 800661e:	f7ff ff77 	bl	8006510 <BSP_LCD_GetYSize>
 8006622:	9701      	str	r7, [sp, #4]
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	4603      	mov	r3, r0
 800662a:	4632      	mov	r2, r6
 800662c:	4629      	mov	r1, r5
 800662e:	4620      	mov	r0, r4
 8006630:	f7ff ff22 	bl	8006478 <LL_FillBuffer>
}
 8006634:	b003      	add	sp, #12
 8006636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006638:	2000038c 	.word	0x2000038c
 800663c:	200043f8 	.word	0x200043f8

08006640 <BSP_LCD_DrawHLine>:
{
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	4680      	mov	r8, r0
 8006648:	460e      	mov	r6, r1
 800664a:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <BSP_LCD_DrawHLine+0x6c>)
 800664e:	681c      	ldr	r4, [r3, #0]
 8006650:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <BSP_LCD_DrawHLine+0x70>)
 8006652:	2334      	movs	r3, #52	; 0x34
 8006654:	fb03 2304 	mla	r3, r3, r4, r2
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	2b02      	cmp	r3, #2
 800665c:	d01a      	beq.n	8006694 <BSP_LCD_DrawHLine+0x54>
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800665e:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <BSP_LCD_DrawHLine+0x70>)
 8006660:	2334      	movs	r3, #52	; 0x34
 8006662:	fb03 2304 	mla	r3, r3, r4, r2
 8006666:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006668:	f7ff ff46 	bl	80064f8 <BSP_LCD_GetXSize>
 800666c:	fb00 8006 	mla	r0, r0, r6, r8
 8006670:	eb05 0180 	add.w	r1, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006674:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006678:	0093      	lsls	r3, r2, #2
 800667a:	4a0e      	ldr	r2, [pc, #56]	; (80066b4 <BSP_LCD_DrawHLine+0x74>)
 800667c:	58d3      	ldr	r3, [r2, r3]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2301      	movs	r3, #1
 8006686:	463a      	mov	r2, r7
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff fef5 	bl	8006478 <LL_FillBuffer>
}
 800668e:	b002      	add	sp, #8
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006694:	2334      	movs	r3, #52	; 0x34
 8006696:	fb03 2304 	mla	r3, r3, r4, r2
 800669a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800669c:	f7ff ff2c 	bl	80064f8 <BSP_LCD_GetXSize>
 80066a0:	fb00 8006 	mla	r0, r0, r6, r8
 80066a4:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80066a8:	e7e4      	b.n	8006674 <BSP_LCD_DrawHLine+0x34>
 80066aa:	bf00      	nop
 80066ac:	2000038c 	.word	0x2000038c
 80066b0:	200043f8 	.word	0x200043f8
 80066b4:	20000390 	.word	0x20000390

080066b8 <BSP_LCD_DrawPixel>:
{
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	4606      	mov	r6, r0
 80066bc:	460c      	mov	r4, r1
 80066be:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80066c0:	4b10      	ldr	r3, [pc, #64]	; (8006704 <BSP_LCD_DrawPixel+0x4c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4910      	ldr	r1, [pc, #64]	; (8006708 <BSP_LCD_DrawPixel+0x50>)
 80066c6:	2234      	movs	r2, #52	; 0x34
 80066c8:	fb02 1203 	mla	r2, r2, r3, r1
 80066cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066ce:	2a02      	cmp	r2, #2
 80066d0:	d00b      	beq.n	80066ea <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80066d2:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <BSP_LCD_DrawPixel+0x50>)
 80066d4:	2134      	movs	r1, #52	; 0x34
 80066d6:	fb01 2303 	mla	r3, r1, r3, r2
 80066da:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80066dc:	f7ff ff0c 	bl	80064f8 <BSP_LCD_GetXSize>
 80066e0:	fb00 6004 	mla	r0, r0, r4, r6
 80066e4:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 80066e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80066ea:	460a      	mov	r2, r1
 80066ec:	2134      	movs	r1, #52	; 0x34
 80066ee:	fb01 2303 	mla	r3, r1, r3, r2
 80066f2:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80066f4:	f7ff ff00 	bl	80064f8 <BSP_LCD_GetXSize>
 80066f8:	fb00 6004 	mla	r0, r0, r4, r6
 80066fc:	b2ad      	uxth	r5, r5
 80066fe:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 8006702:	e7f1      	b.n	80066e8 <BSP_LCD_DrawPixel+0x30>
 8006704:	2000038c 	.word	0x2000038c
 8006708:	200043f8 	.word	0x200043f8

0800670c <DrawChar>:
{
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	b083      	sub	sp, #12
 8006712:	4681      	mov	r9, r0
 8006714:	460f      	mov	r7, r1
 8006716:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8006718:	4b34      	ldr	r3, [pc, #208]	; (80067ec <DrawChar+0xe0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006720:	009a      	lsls	r2, r3, #2
 8006722:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <DrawChar+0xe4>)
 8006724:	4413      	add	r3, r2
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	88da      	ldrh	r2, [r3, #6]
 800672a:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800672c:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 800672e:	f105 0b07 	add.w	fp, r5, #7
 8006732:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8006736:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 800673a:	fa5f f888 	uxtb.w	r8, r8
 800673e:	b2eb      	uxtb	r3, r5
 8006740:	eba8 0803 	sub.w	r8, r8, r3
 8006744:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8006748:	f04f 0a00 	mov.w	sl, #0
 800674c:	e034      	b.n	80067b8 <DrawChar+0xac>
      line =  pchar[0];      
 800674e:	9a00      	ldr	r2, [sp, #0]
 8006750:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 8006752:	2400      	movs	r4, #0
 8006754:	e014      	b.n	8006780 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 8006756:	9900      	ldr	r1, [sp, #0]
 8006758:	5ccb      	ldrb	r3, [r1, r3]
 800675a:	7856      	ldrb	r6, [r2, #1]
 800675c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 8006760:	e7f7      	b.n	8006752 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006762:	4b22      	ldr	r3, [pc, #136]	; (80067ec <DrawChar+0xe0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <DrawChar+0xe4>)
 800676e:	4413      	add	r3, r2
 8006770:	eb09 0004 	add.w	r0, r9, r4
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4639      	mov	r1, r7
 8006778:	b280      	uxth	r0, r0
 800677a:	f7ff ff9d 	bl	80066b8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800677e:	3401      	adds	r4, #1
 8006780:	42a5      	cmp	r5, r4
 8006782:	d915      	bls.n	80067b0 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8006784:	1b2b      	subs	r3, r5, r4
 8006786:	4443      	add	r3, r8
 8006788:	3b01      	subs	r3, #1
 800678a:	2201      	movs	r2, #1
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	4233      	tst	r3, r6
 8006792:	d0e6      	beq.n	8006762 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <DrawChar+0xe0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800679c:	009a      	lsls	r2, r3, #2
 800679e:	eb09 0004 	add.w	r0, r9, r4
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <DrawChar+0xe4>)
 80067a4:	589a      	ldr	r2, [r3, r2]
 80067a6:	4639      	mov	r1, r7
 80067a8:	b280      	uxth	r0, r0
 80067aa:	f7ff ff85 	bl	80066b8 <BSP_LCD_DrawPixel>
 80067ae:	e7e6      	b.n	800677e <DrawChar+0x72>
    Ypos++;
 80067b0:	3701      	adds	r7, #1
 80067b2:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 80067b4:	f10a 0a01 	add.w	sl, sl, #1
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	4553      	cmp	r3, sl
 80067bc:	d912      	bls.n	80067e4 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80067be:	fb0a f30b 	mul.w	r3, sl, fp
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	441a      	add	r2, r3
    switch(((width + 7)/8))
 80067c6:	f1bb 0f01 	cmp.w	fp, #1
 80067ca:	d0c0      	beq.n	800674e <DrawChar+0x42>
 80067cc:	f1bb 0f02 	cmp.w	fp, #2
 80067d0:	d0c1      	beq.n	8006756 <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80067d2:	9900      	ldr	r1, [sp, #0]
 80067d4:	5ccb      	ldrb	r3, [r1, r3]
 80067d6:	7856      	ldrb	r6, [r2, #1]
 80067d8:	0236      	lsls	r6, r6, #8
 80067da:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80067de:	7893      	ldrb	r3, [r2, #2]
 80067e0:	431e      	orrs	r6, r3
      break;
 80067e2:	e7b6      	b.n	8006752 <DrawChar+0x46>
}
 80067e4:	b003      	add	sp, #12
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	bf00      	nop
 80067ec:	2000038c 	.word	0x2000038c
 80067f0:	20000390 	.word	0x20000390

080067f4 <BSP_LCD_DisplayChar>:
{
 80067f4:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <BSP_LCD_DisplayChar+0x30>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067fe:	009c      	lsls	r4, r3, #2
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <BSP_LCD_DisplayChar+0x34>)
 8006802:	4423      	add	r3, r4
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	681c      	ldr	r4, [r3, #0]
 8006808:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800680c:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800680e:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006812:	889b      	ldrh	r3, [r3, #4]
 8006814:	3307      	adds	r3, #7
 8006816:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006818:	fb03 4202 	mla	r2, r3, r2, r4
 800681c:	f7ff ff76 	bl	800670c <DrawChar>
}
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	bf00      	nop
 8006824:	2000038c 	.word	0x2000038c
 8006828:	20000390 	.word	0x20000390

0800682c <BSP_LCD_DisplayStringAt>:
{
 800682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006830:	4605      	mov	r5, r0
 8006832:	4688      	mov	r8, r1
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
  uint8_t  *ptr = Text;
 8006838:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 800683a:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 800683c:	e001      	b.n	8006842 <BSP_LCD_DisplayStringAt+0x16>
 800683e:	3401      	adds	r4, #1
 8006840:	4613      	mov	r3, r2
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f9      	bne.n	800683e <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800684a:	f7ff fe55 	bl	80064f8 <BSP_LCD_GetXSize>
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <BSP_LCD_DisplayStringAt+0xc8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006856:	009a      	lsls	r2, r3, #2
 8006858:	4b27      	ldr	r3, [pc, #156]	; (80068f8 <BSP_LCD_DisplayStringAt+0xcc>)
 800685a:	4413      	add	r3, r2
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	889a      	ldrh	r2, [r3, #4]
 8006860:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8006864:	2f01      	cmp	r7, #1
 8006866:	d006      	beq.n	8006876 <BSP_LCD_DisplayStringAt+0x4a>
 8006868:	2f02      	cmp	r7, #2
 800686a:	d00c      	beq.n	8006886 <BSP_LCD_DisplayStringAt+0x5a>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800686c:	b22b      	sxth	r3, r5
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd3d      	ble.n	80068ee <BSP_LCD_DisplayStringAt+0xc2>
    ref_column = 1;
 8006872:	2400      	movs	r4, #0
 8006874:	e021      	b.n	80068ba <BSP_LCD_DisplayStringAt+0x8e>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006876:	1b04      	subs	r4, r0, r4
 8006878:	fb04 f302 	mul.w	r3, r4, r2
 800687c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8006880:	441d      	add	r5, r3
 8006882:	b2ad      	uxth	r5, r5
      break;
 8006884:	e7f2      	b.n	800686c <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006886:	1b03      	subs	r3, r0, r4
 8006888:	fb13 f302 	smulbb	r3, r3, r2
 800688c:	b29b      	uxth	r3, r3
 800688e:	1b5d      	subs	r5, r3, r5
 8006890:	b2ad      	uxth	r5, r5
      break;
 8006892:	e7eb      	b.n	800686c <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006894:	463a      	mov	r2, r7
 8006896:	4641      	mov	r1, r8
 8006898:	4628      	mov	r0, r5
 800689a:	f7ff ffab 	bl	80067f4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <BSP_LCD_DisplayStringAt+0xc8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <BSP_LCD_DisplayStringAt+0xcc>)
 80068aa:	4413      	add	r3, r2
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	889b      	ldrh	r3, [r3, #4]
 80068b0:	441d      	add	r5, r3
 80068b2:	b2ad      	uxth	r5, r5
    Text++;
 80068b4:	3601      	adds	r6, #1
    i++;
 80068b6:	3401      	adds	r4, #1
 80068b8:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80068ba:	7837      	ldrb	r7, [r6, #0]
 80068bc:	f7ff fe1c 	bl	80064f8 <BSP_LCD_GetXSize>
 80068c0:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <BSP_LCD_DisplayStringAt+0xc8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <BSP_LCD_DisplayStringAt+0xcc>)
 80068cc:	4413      	add	r3, r2
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	889b      	ldrh	r3, [r3, #4]
 80068d2:	fb03 0014 	mls	r0, r3, r4, r0
 80068d6:	b280      	uxth	r0, r0
 80068d8:	4298      	cmp	r0, r3
 80068da:	bf34      	ite	cc
 80068dc:	2000      	movcc	r0, #0
 80068de:	2001      	movcs	r0, #1
 80068e0:	2f00      	cmp	r7, #0
 80068e2:	bf08      	it	eq
 80068e4:	2000      	moveq	r0, #0
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d1d4      	bne.n	8006894 <BSP_LCD_DisplayStringAt+0x68>
}
 80068ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 80068ee:	2501      	movs	r5, #1
 80068f0:	e7bf      	b.n	8006872 <BSP_LCD_DisplayStringAt+0x46>
 80068f2:	bf00      	nop
 80068f4:	2000038c 	.word	0x2000038c
 80068f8:	20000390 	.word	0x20000390

080068fc <BSP_LCD_DrawCircle>:
{
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	b087      	sub	sp, #28
 8006902:	4682      	mov	sl, r0
 8006904:	468b      	mov	fp, r1
  decision = 3 - (Radius << 1);
 8006906:	0053      	lsls	r3, r2, #1
 8006908:	f1c3 0303 	rsb	r3, r3, #3
 800690c:	9302      	str	r3, [sp, #8]
  current_y = Radius;
 800690e:	9201      	str	r2, [sp, #4]
  current_x = 0;
 8006910:	f04f 0900 	mov.w	r9, #0
  while (current_x <= current_y)
 8006914:	e005      	b.n	8006922 <BSP_LCD_DrawCircle+0x26>
      decision += (current_x << 2) + 6;
 8006916:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800691a:	3306      	adds	r3, #6
 800691c:	9302      	str	r3, [sp, #8]
    current_x++;
 800691e:	f109 0901 	add.w	r9, r9, #1
  while (current_x <= current_y)
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	4599      	cmp	r9, r3
 8006926:	d876      	bhi.n	8006a16 <BSP_LCD_DrawCircle+0x11a>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006928:	fa1f f489 	uxth.w	r4, r9
 800692c:	eb04 030a 	add.w	r3, r4, sl
 8006930:	b298      	uxth	r0, r3
 8006932:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8006936:	ebab 0805 	sub.w	r8, fp, r5
 800693a:	fa1f f888 	uxth.w	r8, r8
 800693e:	4e37      	ldr	r6, [pc, #220]	; (8006a1c <BSP_LCD_DrawCircle+0x120>)
 8006940:	4f37      	ldr	r7, [pc, #220]	; (8006a20 <BSP_LCD_DrawCircle+0x124>)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006948:	009a      	lsls	r2, r3, #2
 800694a:	58b2      	ldr	r2, [r6, r2]
 800694c:	4641      	mov	r1, r8
 800694e:	9003      	str	r0, [sp, #12]
 8006950:	f7ff feb2 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006954:	ebaa 0304 	sub.w	r3, sl, r4
 8006958:	b29b      	uxth	r3, r3
 800695a:	4618      	mov	r0, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006962:	009a      	lsls	r2, r3, #2
 8006964:	58b2      	ldr	r2, [r6, r2]
 8006966:	4641      	mov	r1, r8
 8006968:	9004      	str	r0, [sp, #16]
 800696a:	f7ff fea5 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800696e:	eb05 030a 	add.w	r3, r5, sl
 8006972:	b29b      	uxth	r3, r3
 8006974:	4618      	mov	r0, r3
 8006976:	ebab 0804 	sub.w	r8, fp, r4
 800697a:	fa1f f888 	uxth.w	r8, r8
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006984:	009a      	lsls	r2, r3, #2
 8006986:	58b2      	ldr	r2, [r6, r2]
 8006988:	4641      	mov	r1, r8
 800698a:	9005      	str	r0, [sp, #20]
 800698c:	f7ff fe94 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006990:	ebaa 0305 	sub.w	r3, sl, r5
 8006994:	b29b      	uxth	r3, r3
 8006996:	4618      	mov	r0, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800699e:	009a      	lsls	r2, r3, #2
 80069a0:	58b2      	ldr	r2, [r6, r2]
 80069a2:	4641      	mov	r1, r8
 80069a4:	4680      	mov	r8, r0
 80069a6:	f7ff fe87 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80069aa:	445d      	add	r5, fp
 80069ac:	b2ad      	uxth	r5, r5
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069b4:	009a      	lsls	r2, r3, #2
 80069b6:	58b2      	ldr	r2, [r6, r2]
 80069b8:	4629      	mov	r1, r5
 80069ba:	9803      	ldr	r0, [sp, #12]
 80069bc:	f7ff fe7c 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069c6:	009a      	lsls	r2, r3, #2
 80069c8:	58b2      	ldr	r2, [r6, r2]
 80069ca:	4629      	mov	r1, r5
 80069cc:	9804      	ldr	r0, [sp, #16]
 80069ce:	f7ff fe73 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80069d2:	445c      	add	r4, fp
 80069d4:	b2a4      	uxth	r4, r4
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069dc:	009a      	lsls	r2, r3, #2
 80069de:	58b2      	ldr	r2, [r6, r2]
 80069e0:	4621      	mov	r1, r4
 80069e2:	9805      	ldr	r0, [sp, #20]
 80069e4:	f7ff fe68 	bl	80066b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069ee:	009a      	lsls	r2, r3, #2
 80069f0:	58b2      	ldr	r2, [r6, r2]
 80069f2:	4621      	mov	r1, r4
 80069f4:	4640      	mov	r0, r8
 80069f6:	f7ff fe5f 	bl	80066b8 <BSP_LCD_DrawPixel>
    if (decision < 0)
 80069fa:	9b02      	ldr	r3, [sp, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	db8a      	blt.n	8006916 <BSP_LCD_DrawCircle+0x1a>
      decision += ((current_x - current_y) << 2) + 10;
 8006a00:	9a01      	ldr	r2, [sp, #4]
 8006a02:	eba9 0302 	sub.w	r3, r9, r2
 8006a06:	9902      	ldr	r1, [sp, #8]
 8006a08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006a0c:	330a      	adds	r3, #10
 8006a0e:	9302      	str	r3, [sp, #8]
      current_y--;
 8006a10:	1e53      	subs	r3, r2, #1
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	e783      	b.n	800691e <BSP_LCD_DrawCircle+0x22>
}
 8006a16:	b007      	add	sp, #28
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	20000390 	.word	0x20000390
 8006a20:	2000038c 	.word	0x2000038c

08006a24 <BSP_LCD_FillRect>:
{
 8006a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	4617      	mov	r7, r2
 8006a30:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006a32:	4c1d      	ldr	r4, [pc, #116]	; (8006aa8 <BSP_LCD_FillRect+0x84>)
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a3a:	009a      	lsls	r2, r3, #2
 8006a3c:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <BSP_LCD_FillRect+0x88>)
 8006a3e:	5898      	ldr	r0, [r3, r2]
 8006a40:	f7ff fdb8 	bl	80065b4 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006a44:	6824      	ldr	r4, [r4, #0]
 8006a46:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <BSP_LCD_FillRect+0x8c>)
 8006a48:	2334      	movs	r3, #52	; 0x34
 8006a4a:	fb03 2304 	mla	r3, r3, r4, r2
 8006a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d01d      	beq.n	8006a90 <BSP_LCD_FillRect+0x6c>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <BSP_LCD_FillRect+0x8c>)
 8006a56:	2334      	movs	r3, #52	; 0x34
 8006a58:	fb03 2304 	mla	r3, r3, r4, r2
 8006a5c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006a5e:	f7ff fd4b 	bl	80064f8 <BSP_LCD_GetXSize>
 8006a62:	fb00 9006 	mla	r0, r0, r6, r9
 8006a66:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006a6a:	f7ff fd45 	bl	80064f8 <BSP_LCD_GetXSize>
 8006a6e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006a72:	0093      	lsls	r3, r2, #2
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <BSP_LCD_FillRect+0x88>)
 8006a76:	58d3      	ldr	r3, [r2, r3]
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	1bc0      	subs	r0, r0, r7
 8006a7c:	9000      	str	r0, [sp, #0]
 8006a7e:	4643      	mov	r3, r8
 8006a80:	463a      	mov	r2, r7
 8006a82:	4629      	mov	r1, r5
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7ff fcf7 	bl	8006478 <LL_FillBuffer>
}
 8006a8a:	b003      	add	sp, #12
 8006a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006a90:	2334      	movs	r3, #52	; 0x34
 8006a92:	fb03 2304 	mla	r3, r3, r4, r2
 8006a96:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006a98:	f7ff fd2e 	bl	80064f8 <BSP_LCD_GetXSize>
 8006a9c:	fb00 9006 	mla	r0, r0, r6, r9
 8006aa0:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8006aa4:	e7e1      	b.n	8006a6a <BSP_LCD_FillRect+0x46>
 8006aa6:	bf00      	nop
 8006aa8:	2000038c 	.word	0x2000038c
 8006aac:	20000390 	.word	0x20000390
 8006ab0:	200043f8 	.word	0x200043f8

08006ab4 <BSP_LCD_FillCircle>:
{
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	4682      	mov	sl, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	4615      	mov	r5, r2
 8006ac0:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 8006ac2:	0056      	lsls	r6, r2, #1
 8006ac4:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006ac8:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <BSP_LCD_FillCircle+0xd0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ad0:	009a      	lsls	r2, r3, #2
 8006ad2:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <BSP_LCD_FillCircle+0xd4>)
 8006ad4:	5898      	ldr	r0, [r3, r2]
 8006ad6:	f7ff fd6d 	bl	80065b4 <BSP_LCD_SetTextColor>
  current_x = 0;
 8006ada:	2400      	movs	r4, #0
  while (current_x <= current_y)
 8006adc:	e033      	b.n	8006b46 <BSP_LCD_FillCircle+0x92>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8006ade:	b2af      	uxth	r7, r5
 8006ae0:	ebaa 0b07 	sub.w	fp, sl, r7
 8006ae4:	fa1f fb8b 	uxth.w	fp, fp
 8006ae8:	fa1f f884 	uxth.w	r8, r4
 8006aec:	007f      	lsls	r7, r7, #1
 8006aee:	b2bf      	uxth	r7, r7
 8006af0:	eb08 0109 	add.w	r1, r8, r9
 8006af4:	463a      	mov	r2, r7
 8006af6:	b289      	uxth	r1, r1
 8006af8:	4658      	mov	r0, fp
 8006afa:	f7ff fda1 	bl	8006640 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006afe:	eba9 0108 	sub.w	r1, r9, r8
 8006b02:	463a      	mov	r2, r7
 8006b04:	b289      	uxth	r1, r1
 8006b06:	4658      	mov	r0, fp
 8006b08:	f7ff fd9a 	bl	8006640 <BSP_LCD_DrawHLine>
 8006b0c:	e01f      	b.n	8006b4e <BSP_LCD_FillCircle+0x9a>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006b0e:	b2a7      	uxth	r7, r4
 8006b10:	ebaa 0b07 	sub.w	fp, sl, r7
 8006b14:	fa1f fb8b 	uxth.w	fp, fp
 8006b18:	fa1f f885 	uxth.w	r8, r5
 8006b1c:	007f      	lsls	r7, r7, #1
 8006b1e:	b2bf      	uxth	r7, r7
 8006b20:	eba9 0108 	sub.w	r1, r9, r8
 8006b24:	463a      	mov	r2, r7
 8006b26:	b289      	uxth	r1, r1
 8006b28:	4658      	mov	r0, fp
 8006b2a:	f7ff fd89 	bl	8006640 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006b2e:	eb08 0109 	add.w	r1, r8, r9
 8006b32:	463a      	mov	r2, r7
 8006b34:	b289      	uxth	r1, r1
 8006b36:	4658      	mov	r0, fp
 8006b38:	f7ff fd82 	bl	8006640 <BSP_LCD_DrawHLine>
 8006b3c:	e009      	b.n	8006b52 <BSP_LCD_FillCircle+0x9e>
      decision += (current_x << 2) + 6;
 8006b3e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006b42:	3606      	adds	r6, #6
    current_x++;
 8006b44:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8006b46:	42ac      	cmp	r4, r5
 8006b48:	d80b      	bhi.n	8006b62 <BSP_LCD_FillCircle+0xae>
    if(current_y > 0) 
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	d1c7      	bne.n	8006ade <BSP_LCD_FillCircle+0x2a>
    if(current_x > 0) 
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d1dd      	bne.n	8006b0e <BSP_LCD_FillCircle+0x5a>
    if (decision < 0)
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	dbf3      	blt.n	8006b3e <BSP_LCD_FillCircle+0x8a>
      decision += ((current_x - current_y) << 2) + 10;
 8006b56:	1b63      	subs	r3, r4, r5
 8006b58:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006b5c:	360a      	adds	r6, #10
      current_y--;
 8006b5e:	3d01      	subs	r5, #1
 8006b60:	e7f0      	b.n	8006b44 <BSP_LCD_FillCircle+0x90>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <BSP_LCD_FillCircle+0xd0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b6a:	009a      	lsls	r2, r3, #2
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <BSP_LCD_FillCircle+0xd4>)
 8006b6e:	5898      	ldr	r0, [r3, r2]
 8006b70:	f7ff fd20 	bl	80065b4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006b74:	9a01      	ldr	r2, [sp, #4]
 8006b76:	4649      	mov	r1, r9
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f7ff febf 	bl	80068fc <BSP_LCD_DrawCircle>
}
 8006b7e:	b003      	add	sp, #12
 8006b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b84:	2000038c 	.word	0x2000038c
 8006b88:	20000390 	.word	0x20000390

08006b8c <BSP_LCD_DisplayOn>:
{
 8006b8c:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <BSP_LCD_DisplayOn+0x28>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	6993      	ldr	r3, [r2, #24]
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ba0:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <BSP_LCD_DisplayOn+0x2c>)
 8006ba2:	f7fc fbaa 	bl	80032fa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	2108      	movs	r1, #8
 8006baa:	4804      	ldr	r0, [pc, #16]	; (8006bbc <BSP_LCD_DisplayOn+0x30>)
 8006bac:	f7fc fba5 	bl	80032fa <HAL_GPIO_WritePin>
}
 8006bb0:	bd08      	pop	{r3, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200043f8 	.word	0x200043f8
 8006bb8:	40022000 	.word	0x40022000
 8006bbc:	40022800 	.word	0x40022800

08006bc0 <BSP_LCD_MspInit>:
{
 8006bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006bc4:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <BSP_LCD_MspInit+0x130>)
 8006bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8006bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006bd4:	9200      	str	r2, [sp, #0]
 8006bd6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bda:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
 8006be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006be6:	9201      	str	r2, [sp, #4]
 8006be8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bec:	f042 0210 	orr.w	r2, r2, #16
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf4:	f002 0210 	and.w	r2, r2, #16
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
 8006c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c06:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c18:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006c1c:	9204      	str	r2, [sp, #16]
 8006c1e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
 8006c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c2a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006c2e:	9205      	str	r2, [sp, #20]
 8006c30:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006c40:	9206      	str	r2, [sp, #24]
 8006c42:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006c52:	9207      	str	r2, [sp, #28]
 8006c54:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c64:	9308      	str	r3, [sp, #32]
 8006c66:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006c68:	2310      	movs	r3, #16
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c6c:	2402      	movs	r4, #2
 8006c6e:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006c74:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006c76:	250e      	movs	r5, #14
 8006c78:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006c7a:	a909      	add	r1, sp, #36	; 0x24
 8006c7c:	481d      	ldr	r0, [pc, #116]	; (8006cf4 <BSP_LCD_MspInit+0x134>)
 8006c7e:	f7fc fa45 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006c82:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8006c86:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c88:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006c8a:	2309      	movs	r3, #9
 8006c8c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006c8e:	a909      	add	r1, sp, #36	; 0x24
 8006c90:	4819      	ldr	r0, [pc, #100]	; (8006cf8 <BSP_LCD_MspInit+0x138>)
 8006c92:	f7fc fa3b 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006c96:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006c9a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c9c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006c9e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006ca0:	4e16      	ldr	r6, [pc, #88]	; (8006cfc <BSP_LCD_MspInit+0x13c>)
 8006ca2:	a909      	add	r1, sp, #36	; 0x24
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f7fc fa31 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006caa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006cae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006cb0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006cb2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006cb4:	a909      	add	r1, sp, #36	; 0x24
 8006cb6:	4812      	ldr	r0, [pc, #72]	; (8006d00 <BSP_LCD_MspInit+0x140>)
 8006cb8:	f7fc fa28 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006cbc:	23f7      	movs	r3, #247	; 0xf7
 8006cbe:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006cc0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006cc2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006cc4:	4c0f      	ldr	r4, [pc, #60]	; (8006d04 <BSP_LCD_MspInit+0x144>)
 8006cc6:	a909      	add	r1, sp, #36	; 0x24
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f7fc fa1f 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006cce:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006cd0:	2501      	movs	r5, #1
 8006cd2:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006cd4:	a909      	add	r1, sp, #36	; 0x24
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f7fc fa18 	bl	800310c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006cdc:	2308      	movs	r3, #8
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ce0:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006ce2:	a909      	add	r1, sp, #36	; 0x24
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7fc fa11 	bl	800310c <HAL_GPIO_Init>
}
 8006cea:	b00f      	add	sp, #60	; 0x3c
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	40021800 	.word	0x40021800
 8006cfc:	40022000 	.word	0x40022000
 8006d00:	40022400 	.word	0x40022400
 8006d04:	40022800 	.word	0x40022800

08006d08 <BSP_LCD_ClockConfig>:
{
 8006d08:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006d0a:	4806      	ldr	r0, [pc, #24]	; (8006d24 <BSP_LCD_ClockConfig+0x1c>)
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006d10:	23c0      	movs	r3, #192	; 0xc0
 8006d12:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006d14:	2305      	movs	r3, #5
 8006d16:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d1c:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006d1e:	f7fd fbeb 	bl	80044f8 <HAL_RCCEx_PeriphCLKConfig>
}
 8006d22:	bd08      	pop	{r3, pc}
 8006d24:	200003e8 	.word	0x200003e8

08006d28 <BSP_LCD_Init>:
{    
 8006d28:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006d2a:	4c25      	ldr	r4, [pc, #148]	; (8006dc0 <BSP_LCD_Init+0x98>)
 8006d2c:	2328      	movs	r3, #40	; 0x28
 8006d2e:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006d30:	2309      	movs	r3, #9
 8006d32:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006d34:	2335      	movs	r3, #53	; 0x35
 8006d36:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006d38:	230b      	movs	r3, #11
 8006d3a:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006d3c:	f240 131b 	movw	r3, #283	; 0x11b
 8006d40:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006d42:	f240 2315 	movw	r3, #533	; 0x215
 8006d46:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006d48:	f240 131d 	movw	r3, #285	; 0x11d
 8006d4c:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006d4e:	f240 2335 	movw	r3, #565	; 0x235
 8006d52:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006d54:	2100      	movs	r1, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff ffd6 	bl	8006d08 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006d5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006d60:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006d62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d66:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006d6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006d72:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006d76:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006d78:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006d7a:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006d7c:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <BSP_LCD_Init+0x9c>)
 8006d80:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7fd f842 	bl	8003e0c <HAL_LTDC_GetState>
 8006d88:	b1a0      	cbz	r0, 8006db4 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 8006d8a:	480d      	ldr	r0, [pc, #52]	; (8006dc0 <BSP_LCD_Init+0x98>)
 8006d8c:	f7fc ff26 	bl	8003bdc <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006d90:	2201      	movs	r2, #1
 8006d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d96:	480c      	ldr	r0, [pc, #48]	; (8006dc8 <BSP_LCD_Init+0xa0>)
 8006d98:	f7fc faaf 	bl	80032fa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	2108      	movs	r1, #8
 8006da0:	480a      	ldr	r0, [pc, #40]	; (8006dcc <BSP_LCD_Init+0xa4>)
 8006da2:	f7fc faaa 	bl	80032fa <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8006da6:	f000 f921 	bl	8006fec <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006daa:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <BSP_LCD_Init+0xa8>)
 8006dac:	f7ff fc1c 	bl	80065e8 <BSP_LCD_SetFont>
}
 8006db0:	2000      	movs	r0, #0
 8006db2:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006db4:	2100      	movs	r1, #0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff ff02 	bl	8006bc0 <BSP_LCD_MspInit>
 8006dbc:	e7e5      	b.n	8006d8a <BSP_LCD_Init+0x62>
 8006dbe:	bf00      	nop
 8006dc0:	200043f8 	.word	0x200043f8
 8006dc4:	40016800 	.word	0x40016800
 8006dc8:	40022000 	.word	0x40022000
 8006dcc:	40022800 	.word	0x40022800
 8006dd0:	20000014 	.word	0x20000014

08006dd4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8006ddc:	f04f 0800 	mov.w	r8, #0
 8006de0:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006de4:	4c20      	ldr	r4, [pc, #128]	; (8006e68 <BSP_SDRAM_Initialization_sequence+0x94>)
 8006de6:	2601      	movs	r6, #1
 8006de8:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006dea:	2710      	movs	r7, #16
 8006dec:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006dee:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006df0:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006df4:	4d1d      	ldr	r5, [pc, #116]	; (8006e6c <BSP_SDRAM_Initialization_sequence+0x98>)
 8006df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7fd fe70 	bl	8004ae2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7fb f900 	bl	8002008 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e0c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006e0e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006e10:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f7fd fe61 	bl	8004ae2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006e20:	2303      	movs	r3, #3
 8006e22:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e24:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8006e26:	2308      	movs	r3, #8
 8006e28:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006e2a:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7fd fe54 	bl	8004ae2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006e3a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006e3e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006e40:	2304      	movs	r3, #4
 8006e42:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e44:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006e46:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f7fd fe45 	bl	8004ae2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7fd fe5e 	bl	8004b1c <HAL_SDRAM_ProgramRefreshRate>
}
 8006e60:	b003      	add	sp, #12
 8006e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e66:	bf00      	nop
 8006e68:	2000046c 	.word	0x2000046c
 8006e6c:	200044a0 	.word	0x200044a0

08006e70 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	b08e      	sub	sp, #56	; 0x38
 8006e74:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006e76:	4b54      	ldr	r3, [pc, #336]	; (8006fc8 <BSP_SDRAM_MspInit+0x158>)
 8006e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e82:	f002 0201 	and.w	r2, r2, #1
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
 8006e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e94:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006e98:	9202      	str	r2, [sp, #8]
 8006e9a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9e:	f042 0204 	orr.w	r2, r2, #4
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea6:	f002 0204 	and.w	r2, r2, #4
 8006eaa:	9203      	str	r2, [sp, #12]
 8006eac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb0:	f042 0208 	orr.w	r2, r2, #8
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb8:	f002 0208 	and.w	r2, r2, #8
 8006ebc:	9204      	str	r2, [sp, #16]
 8006ebe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec2:	f042 0210 	orr.w	r2, r2, #16
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eca:	f002 0210 	and.w	r2, r2, #16
 8006ece:	9205      	str	r2, [sp, #20]
 8006ed0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed4:	f042 0220 	orr.w	r2, r2, #32
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8006eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006edc:	f002 0220 	and.w	r2, r2, #32
 8006ee0:	9206      	str	r2, [sp, #24]
 8006ee2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
 8006eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006ef2:	9207      	str	r2, [sp, #28]
 8006ef4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	9308      	str	r3, [sp, #32]
 8006f06:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	920b      	str	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006f10:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006f12:	230c      	movs	r3, #12
 8006f14:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006f16:	ac0e      	add	r4, sp, #56	; 0x38
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f1e:	4621      	mov	r1, r4
 8006f20:	482a      	ldr	r0, [pc, #168]	; (8006fcc <BSP_SDRAM_MspInit+0x15c>)
 8006f22:	f7fc f8f3 	bl	800310c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006f26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f2a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4828      	ldr	r0, [pc, #160]	; (8006fd0 <BSP_SDRAM_MspInit+0x160>)
 8006f30:	f7fc f8ec 	bl	800310c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006f34:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006f38:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4825      	ldr	r0, [pc, #148]	; (8006fd4 <BSP_SDRAM_MspInit+0x164>)
 8006f3e:	f7fc f8e5 	bl	800310c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006f42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4823      	ldr	r0, [pc, #140]	; (8006fd8 <BSP_SDRAM_MspInit+0x168>)
 8006f4c:	f7fc f8de 	bl	800310c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006f50:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f54:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006f56:	4621      	mov	r1, r4
 8006f58:	4820      	ldr	r0, [pc, #128]	; (8006fdc <BSP_SDRAM_MspInit+0x16c>)
 8006f5a:	f7fc f8d7 	bl	800310c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006f5e:	2328      	movs	r3, #40	; 0x28
 8006f60:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006f62:	4621      	mov	r1, r4
 8006f64:	481e      	ldr	r0, [pc, #120]	; (8006fe0 <BSP_SDRAM_MspInit+0x170>)
 8006f66:	f7fc f8d1 	bl	800310c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006f6a:	4c1e      	ldr	r4, [pc, #120]	; (8006fe4 <BSP_SDRAM_MspInit+0x174>)
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006f70:	2380      	movs	r3, #128	; 0x80
 8006f72:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f78:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7e:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f84:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006f86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f8a:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006f8c:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f92:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006f94:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006f9a:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006f9c:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <BSP_SDRAM_MspInit+0x178>)
 8006fa0:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006fa2:	6334      	str	r4, [r6, #48]	; 0x30
 8006fa4:	63a6      	str	r6, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f7fb fdc2 	bl	8002b30 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7fb fd59 	bl	8002a64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	210f      	movs	r1, #15
 8006fb6:	2038      	movs	r0, #56	; 0x38
 8006fb8:	f7fb fc24 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006fbc:	2038      	movs	r0, #56	; 0x38
 8006fbe:	f7fb fc53 	bl	8002868 <HAL_NVIC_EnableIRQ>
}
 8006fc2:	b00e      	add	sp, #56	; 0x38
 8006fc4:	bd70      	pop	{r4, r5, r6, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020c00 	.word	0x40020c00
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40021400 	.word	0x40021400
 8006fdc:	40021800 	.word	0x40021800
 8006fe0:	40021c00 	.word	0x40021c00
 8006fe4:	20000498 	.word	0x20000498
 8006fe8:	40026410 	.word	0x40026410

08006fec <BSP_SDRAM_Init>:
{ 
 8006fec:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006fee:	4c1b      	ldr	r4, [pc, #108]	; (800705c <BSP_SDRAM_Init+0x70>)
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <BSP_SDRAM_Init+0x74>)
 8006ff2:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8006ff4:	4d1b      	ldr	r5, [pc, #108]	; (8007064 <BSP_SDRAM_Init+0x78>)
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006ffa:	2107      	movs	r1, #7
 8006ffc:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 8006ffe:	2204      	movs	r2, #4
 8007000:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 8007002:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 8007004:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8007006:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8007008:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800700a:	2100      	movs	r1, #0
 800700c:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800700e:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007010:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007012:	2310      	movs	r3, #16
 8007014:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007016:	2340      	movs	r3, #64	; 0x40
 8007018:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800701a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800701e:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007020:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007026:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800702c:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800702e:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007030:	4620      	mov	r0, r4
 8007032:	f7ff ff1d 	bl	8006e70 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8007036:	4629      	mov	r1, r5
 8007038:	4620      	mov	r0, r4
 800703a:	f7fd fd33 	bl	8004aa4 <HAL_SDRAM_Init>
 800703e:	b948      	cbnz	r0, 8007054 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_OK;
 8007040:	4b09      	ldr	r3, [pc, #36]	; (8007068 <BSP_SDRAM_Init+0x7c>)
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007046:	f240 6003 	movw	r0, #1539	; 0x603
 800704a:	f7ff fec3 	bl	8006dd4 <BSP_SDRAM_Initialization_sequence>
}
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <BSP_SDRAM_Init+0x7c>)
 8007050:	7818      	ldrb	r0, [r3, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_ERROR;
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <BSP_SDRAM_Init+0x7c>)
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e7f4      	b.n	8007046 <BSP_SDRAM_Init+0x5a>
 800705c:	200044a0 	.word	0x200044a0
 8007060:	a0000140 	.word	0xa0000140
 8007064:	2000047c 	.word	0x2000047c
 8007068:	20000044 	.word	0x20000044

0800706c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800706c:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <BSP_TS_Init+0x38>)
 8007070:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <BSP_TS_Init+0x3c>)
 8007074:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007076:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <BSP_TS_Init+0x40>)
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	2070      	movs	r0, #112	; 0x70
 800707c:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	2070      	movs	r0, #112	; 0x70
 8007082:	4798      	blx	r3
 8007084:	2851      	cmp	r0, #81	; 0x51
 8007086:	d10b      	bne.n	80070a0 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <BSP_TS_Init+0x44>)
 800708a:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800708c:	2070      	movs	r0, #112	; 0x70
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <BSP_TS_Init+0x48>)
 8007090:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <BSP_TS_Init+0x4c>)
 8007094:	2108      	movs	r1, #8
 8007096:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007098:	68e3      	ldr	r3, [r4, #12]
 800709a:	4798      	blx	r3
  uint8_t status = TS_OK;
 800709c:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 800709e:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 80070a0:	2003      	movs	r0, #3
 80070a2:	e7fc      	b.n	800709e <BSP_TS_Init+0x32>
 80070a4:	20000502 	.word	0x20000502
 80070a8:	20000504 	.word	0x20000504
 80070ac:	2000001c 	.word	0x2000001c
 80070b0:	200004fc 	.word	0x200004fc
 80070b4:	200004f8 	.word	0x200004f8
 80070b8:	20000500 	.word	0x20000500

080070bc <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80070bc:	2884      	cmp	r0, #132	; 0x84
 80070be:	d001      	beq.n	80070c4 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80070c0:	3003      	adds	r0, #3
 80070c2:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070c4:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80070c6:	4770      	bx	lr

080070c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070c8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80070ca:	f000 fcd9 	bl	8007a80 <vTaskStartScheduler>
  
  return osOK;
}
 80070ce:	2000      	movs	r0, #0
 80070d0:	bd08      	pop	{r3, pc}

080070d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d4:	b085      	sub	sp, #20
 80070d6:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070d8:	6844      	ldr	r4, [r0, #4]
 80070da:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070dc:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070de:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80070e2:	f7ff ffeb 	bl	80070bc <makeFreeRtosPriority>
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	9000      	str	r0, [sp, #0]
 80070ec:	463b      	mov	r3, r7
 80070ee:	b2b2      	uxth	r2, r6
 80070f0:	4629      	mov	r1, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fc92 	bl	8007a1c <xTaskCreate>
 80070f8:	2801      	cmp	r0, #1
 80070fa:	d102      	bne.n	8007102 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070fc:	9803      	ldr	r0, [sp, #12]
}
 80070fe:	b005      	add	sp, #20
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8007102:	2000      	movs	r0, #0
 8007104:	e7fb      	b.n	80070fe <osThreadCreate+0x2c>

08007106 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007106:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007108:	4603      	mov	r3, r0
 800710a:	b900      	cbnz	r0, 800710e <osDelay+0x8>
 800710c:	2301      	movs	r3, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fe0a 	bl	8007d28 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007114:	2000      	movs	r0, #0
 8007116:	bd08      	pop	{r3, pc}

08007118 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007118:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800711a:	2001      	movs	r0, #1
 800711c:	f000 fa2a 	bl	8007574 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8007120:	bd08      	pop	{r3, pc}

08007122 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007122:	f100 0308 	add.w	r3, r0, #8
 8007126:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800712c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007130:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007136:	4770      	bx	lr

08007138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800713c:	4770      	bx	lr

0800713e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800713e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007140:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800714a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800714c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800714e:	6803      	ldr	r3, [r0, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	6003      	str	r3, [r0, #0]
}
 8007154:	4770      	bx	lr

08007156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007156:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007158:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800715a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800715e:	d002      	beq.n	8007166 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007160:	f100 0208 	add.w	r2, r0, #8
 8007164:	e002      	b.n	800716c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8007166:	6902      	ldr	r2, [r0, #16]
 8007168:	e004      	b.n	8007174 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800716a:	461a      	mov	r2, r3
 800716c:	6853      	ldr	r3, [r2, #4]
 800716e:	681c      	ldr	r4, [r3, #0]
 8007170:	42ac      	cmp	r4, r5
 8007172:	d9fa      	bls.n	800716a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007174:	6853      	ldr	r3, [r2, #4]
 8007176:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007178:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800717a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800717c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800717e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007180:	6803      	ldr	r3, [r0, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	6003      	str	r3, [r0, #0]
}
 8007186:	bc30      	pop	{r4, r5}
 8007188:	4770      	bx	lr

0800718a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800718a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800718c:	6842      	ldr	r2, [r0, #4]
 800718e:	6881      	ldr	r1, [r0, #8]
 8007190:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007192:	6882      	ldr	r2, [r0, #8]
 8007194:	6841      	ldr	r1, [r0, #4]
 8007196:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	4282      	cmp	r2, r0
 800719c:	d006      	beq.n	80071ac <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800719e:	2200      	movs	r2, #0
 80071a0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	3a01      	subs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071a8:	6818      	ldr	r0, [r3, #0]
}
 80071aa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071ac:	6882      	ldr	r2, [r0, #8]
 80071ae:	605a      	str	r2, [r3, #4]
 80071b0:	e7f5      	b.n	800719e <uxListRemove+0x14>

080071b2 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80071b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071b4:	b123      	cbz	r3, 80071c0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f1c0 0007 	rsb	r0, r0, #7
 80071be:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071c0:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80071c2:	4770      	bx	lr

080071c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c8:	f001 f884 	bl	80082d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80071ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d004      	beq.n	80071de <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80071d4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 f8a3 	bl	8008320 <vPortExitCritical>

	return xReturn;
}
 80071da:	4620      	mov	r0, r4
 80071dc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80071de:	2401      	movs	r4, #1
 80071e0:	e7f9      	b.n	80071d6 <prvIsQueueFull+0x12>

080071e2 <prvIsQueueEmpty>:
{
 80071e2:	b510      	push	{r4, lr}
 80071e4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80071e6:	f001 f875 	bl	80082d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071ec:	b123      	cbz	r3, 80071f8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80071ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80071f0:	f001 f896 	bl	8008320 <vPortExitCritical>
}
 80071f4:	4620      	mov	r0, r4
 80071f6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80071f8:	2401      	movs	r4, #1
 80071fa:	e7f9      	b.n	80071f0 <prvIsQueueEmpty+0xe>

080071fc <prvCopyDataToQueue>:
{
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007202:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007204:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007206:	b95a      	cbnz	r2, 8007220 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007208:	6803      	ldr	r3, [r0, #0]
 800720a:	b11b      	cbz	r3, 8007214 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800720c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720e:	3501      	adds	r5, #1
 8007210:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007212:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007214:	6840      	ldr	r0, [r0, #4]
 8007216:	f000 ff21 	bl	800805c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	e7f6      	b.n	800720e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007220:	b96e      	cbnz	r6, 800723e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007222:	6880      	ldr	r0, [r0, #8]
 8007224:	f002 fca2 	bl	8009b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007228:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	4413      	add	r3, r2
 800722e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007230:	6862      	ldr	r2, [r4, #4]
 8007232:	4293      	cmp	r3, r2
 8007234:	d319      	bcc.n	800726a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800723a:	2000      	movs	r0, #0
 800723c:	e7e7      	b.n	800720e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723e:	68c0      	ldr	r0, [r0, #12]
 8007240:	f002 fc94 	bl	8009b6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007246:	4252      	negs	r2, r2
 8007248:	68e3      	ldr	r3, [r4, #12]
 800724a:	4413      	add	r3, r2
 800724c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	428b      	cmp	r3, r1
 8007252:	d202      	bcs.n	800725a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	441a      	add	r2, r3
 8007258:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800725a:	2e02      	cmp	r6, #2
 800725c:	d001      	beq.n	8007262 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800725e:	2000      	movs	r0, #0
 8007260:	e7d5      	b.n	800720e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007262:	b125      	cbz	r5, 800726e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8007264:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8007266:	2000      	movs	r0, #0
 8007268:	e7d1      	b.n	800720e <prvCopyDataToQueue+0x12>
 800726a:	2000      	movs	r0, #0
 800726c:	e7cf      	b.n	800720e <prvCopyDataToQueue+0x12>
 800726e:	2000      	movs	r0, #0
 8007270:	e7cd      	b.n	800720e <prvCopyDataToQueue+0x12>

08007272 <prvUnlockQueue>:
{
 8007272:	b538      	push	{r3, r4, r5, lr}
 8007274:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007276:	f001 f82d 	bl	80082d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800727a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800727e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007280:	e003      	b.n	800728a <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007282:	f000 fe79 	bl	8007f78 <vTaskMissedYield>
			--cTxLock;
 8007286:	3c01      	subs	r4, #1
 8007288:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800728a:	2c00      	cmp	r4, #0
 800728c:	dd08      	ble.n	80072a0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800728e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007290:	b133      	cbz	r3, 80072a0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007292:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007296:	f000 fdd7 	bl	8007e48 <xTaskRemoveFromEventList>
 800729a:	2800      	cmp	r0, #0
 800729c:	d0f3      	beq.n	8007286 <prvUnlockQueue+0x14>
 800729e:	e7f0      	b.n	8007282 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80072a0:	23ff      	movs	r3, #255	; 0xff
 80072a2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80072a6:	f001 f83b 	bl	8008320 <vPortExitCritical>
	taskENTER_CRITICAL();
 80072aa:	f001 f813 	bl	80082d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80072ae:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80072b2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b4:	e003      	b.n	80072be <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80072b6:	f000 fe5f 	bl	8007f78 <vTaskMissedYield>
				--cRxLock;
 80072ba:	3c01      	subs	r4, #1
 80072bc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072be:	2c00      	cmp	r4, #0
 80072c0:	dd08      	ble.n	80072d4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c2:	692b      	ldr	r3, [r5, #16]
 80072c4:	b133      	cbz	r3, 80072d4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c6:	f105 0010 	add.w	r0, r5, #16
 80072ca:	f000 fdbd 	bl	8007e48 <xTaskRemoveFromEventList>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d0f3      	beq.n	80072ba <prvUnlockQueue+0x48>
 80072d2:	e7f0      	b.n	80072b6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80072d4:	23ff      	movs	r3, #255	; 0xff
 80072d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80072da:	f001 f821 	bl	8008320 <vPortExitCritical>
}
 80072de:	bd38      	pop	{r3, r4, r5, pc}

080072e0 <xQueueGenericReset>:
{
 80072e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80072e2:	b950      	cbnz	r0, 80072fa <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	b672      	cpsid	i
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	b662      	cpsie	i
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericReset+0x18>
 80072fa:	4604      	mov	r4, r0
 80072fc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80072fe:	f000 ffe9 	bl	80082d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007302:	6821      	ldr	r1, [r4, #0]
 8007304:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007308:	fb03 1002 	mla	r0, r3, r2, r1
 800730c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800730e:	2000      	movs	r0, #0
 8007310:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007312:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007314:	3a01      	subs	r2, #1
 8007316:	fb02 1303 	mla	r3, r2, r3, r1
 800731a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800731c:	23ff      	movs	r3, #255	; 0xff
 800731e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007326:	b9a5      	cbnz	r5, 8007352 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	b91b      	cbnz	r3, 8007334 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 800732c:	f000 fff8 	bl	8008320 <vPortExitCritical>
}
 8007330:	2001      	movs	r0, #1
 8007332:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007334:	f104 0010 	add.w	r0, r4, #16
 8007338:	f000 fd86 	bl	8007e48 <xTaskRemoveFromEventList>
 800733c:	2800      	cmp	r0, #0
 800733e:	d0f5      	beq.n	800732c <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
 8007340:	4b08      	ldr	r3, [pc, #32]	; (8007364 <xQueueGenericReset+0x84>)
 8007342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	e7ec      	b.n	800732c <xQueueGenericReset+0x4c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007352:	f104 0010 	add.w	r0, r4, #16
 8007356:	f7ff fee4 	bl	8007122 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800735a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800735e:	f7ff fee0 	bl	8007122 <vListInitialise>
 8007362:	e7e3      	b.n	800732c <xQueueGenericReset+0x4c>
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <prvInitialiseNewQueue>:
{
 8007368:	b510      	push	{r4, lr}
 800736a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800736c:	460c      	mov	r4, r1
 800736e:	b139      	cbz	r1, 8007380 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007370:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007372:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007374:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007376:	2101      	movs	r1, #1
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ffb1 	bl	80072e0 <xQueueGenericReset>
}
 800737e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007380:	601b      	str	r3, [r3, #0]
 8007382:	e7f6      	b.n	8007372 <prvInitialiseNewQueue+0xa>

08007384 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007384:	b950      	cbnz	r0, 800739c <xQueueGenericCreate+0x18>
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	b672      	cpsid	i
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	b662      	cpsie	i
 800739a:	e7fe      	b.n	800739a <xQueueGenericCreate+0x16>
	{
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	b083      	sub	sp, #12
 80073a0:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80073a2:	b111      	cbz	r1, 80073aa <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a4:	fb01 f000 	mul.w	r0, r1, r0
 80073a8:	e000      	b.n	80073ac <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 80073aa:	2000      	movs	r0, #0
 80073ac:	4617      	mov	r7, r2
 80073ae:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073b0:	3048      	adds	r0, #72	; 0x48
 80073b2:	f001 f8f9 	bl	80085a8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80073b6:	4606      	mov	r6, r0
 80073b8:	b138      	cbz	r0, 80073ca <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ba:	9000      	str	r0, [sp, #0]
 80073bc:	463b      	mov	r3, r7
 80073be:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f7ff ffcf 	bl	8007368 <prvInitialiseNewQueue>
	}
 80073ca:	4630      	mov	r0, r6
 80073cc:	b003      	add	sp, #12
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073d0 <xQueueGenericSend>:
{
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80073d6:	b170      	cbz	r0, 80073f6 <xQueueGenericSend+0x26>
 80073d8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073da:	b9b9      	cbnz	r1, 800740c <xQueueGenericSend+0x3c>
 80073dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80073de:	b1aa      	cbz	r2, 800740c <xQueueGenericSend+0x3c>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	b672      	cpsid	i
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	b662      	cpsie	i
 80073f4:	e7fe      	b.n	80073f4 <xQueueGenericSend+0x24>
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	b672      	cpsid	i
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	b662      	cpsie	i
 800740a:	e7fe      	b.n	800740a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800740c:	2b02      	cmp	r3, #2
 800740e:	d10d      	bne.n	800742c <xQueueGenericSend+0x5c>
 8007410:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007412:	2a01      	cmp	r2, #1
 8007414:	d00a      	beq.n	800742c <xQueueGenericSend+0x5c>
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	b672      	cpsid	i
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	b662      	cpsie	i
 800742a:	e7fe      	b.n	800742a <xQueueGenericSend+0x5a>
 800742c:	461e      	mov	r6, r3
 800742e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007430:	f000 fda8 	bl	8007f84 <xTaskGetSchedulerState>
 8007434:	b960      	cbnz	r0, 8007450 <xQueueGenericSend+0x80>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	b163      	cbz	r3, 8007454 <xQueueGenericSend+0x84>
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	b672      	cpsid	i
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	b662      	cpsie	i
 800744e:	e7fe      	b.n	800744e <xQueueGenericSend+0x7e>
 8007450:	2500      	movs	r5, #0
 8007452:	e03a      	b.n	80074ca <xQueueGenericSend+0xfa>
 8007454:	2500      	movs	r5, #0
 8007456:	e038      	b.n	80074ca <xQueueGenericSend+0xfa>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007458:	4632      	mov	r2, r6
 800745a:	4639      	mov	r1, r7
 800745c:	4620      	mov	r0, r4
 800745e:	f7ff fecd 	bl	80071fc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007464:	b94b      	cbnz	r3, 800747a <xQueueGenericSend+0xaa>
					else if( xYieldRequired != pdFALSE )
 8007466:	b1a8      	cbz	r0, 8007494 <xQueueGenericSend+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b3b      	ldr	r3, [pc, #236]	; (8007558 <xQueueGenericSend+0x188>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e00c      	b.n	8007494 <xQueueGenericSend+0xc4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800747a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800747e:	f000 fce3 	bl	8007e48 <xTaskRemoveFromEventList>
 8007482:	b138      	cbz	r0, 8007494 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
 8007484:	4b34      	ldr	r3, [pc, #208]	; (8007558 <xQueueGenericSend+0x188>)
 8007486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007494:	f000 ff44 	bl	8008320 <vPortExitCritical>
				return pdPASS;
 8007498:	2001      	movs	r0, #1
}
 800749a:	b005      	add	sp, #20
 800749c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800749e:	f000 ff3f 	bl	8008320 <vPortExitCritical>
					return errQUEUE_FULL;
 80074a2:	2000      	movs	r0, #0
 80074a4:	e7f9      	b.n	800749a <xQueueGenericSend+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a6:	a802      	add	r0, sp, #8
 80074a8:	f000 fd16 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ac:	2501      	movs	r5, #1
 80074ae:	e019      	b.n	80074e4 <xQueueGenericSend+0x114>
		prvLockQueue( pxQueue );
 80074b0:	2300      	movs	r3, #0
 80074b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80074b6:	e021      	b.n	80074fc <xQueueGenericSend+0x12c>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074be:	e023      	b.n	8007508 <xQueueGenericSend+0x138>
				prvUnlockQueue( pxQueue );
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff fed6 	bl	8007272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c6:	f000 fbb3 	bl	8007c30 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80074ca:	f000 ff03 	bl	80082d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d3c0      	bcc.n	8007458 <xQueueGenericSend+0x88>
 80074d6:	2e02      	cmp	r6, #2
 80074d8:	d0be      	beq.n	8007458 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0de      	beq.n	800749e <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	d0e0      	beq.n	80074a6 <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 80074e4:	f000 ff1c 	bl	8008320 <vPortExitCritical>
		vTaskSuspendAll();
 80074e8:	f000 fb0c 	bl	8007b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ec:	f000 fef2 	bl	80082d4 <vPortEnterCritical>
 80074f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80074f4:	b25b      	sxtb	r3, r3
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074fa:	d0d9      	beq.n	80074b0 <xQueueGenericSend+0xe0>
 80074fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007500:	b25b      	sxtb	r3, r3
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007506:	d0d7      	beq.n	80074b8 <xQueueGenericSend+0xe8>
 8007508:	f000 ff0a 	bl	8008320 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750c:	a901      	add	r1, sp, #4
 800750e:	a802      	add	r0, sp, #8
 8007510:	f000 fcee 	bl	8007ef0 <xTaskCheckForTimeOut>
 8007514:	b9c8      	cbnz	r0, 800754a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007516:	4620      	mov	r0, r4
 8007518:	f7ff fe54 	bl	80071c4 <prvIsQueueFull>
 800751c:	2800      	cmp	r0, #0
 800751e:	d0cf      	beq.n	80074c0 <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007520:	9901      	ldr	r1, [sp, #4]
 8007522:	f104 0010 	add.w	r0, r4, #16
 8007526:	f000 fc75 	bl	8007e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800752a:	4620      	mov	r0, r4
 800752c:	f7ff fea1 	bl	8007272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007530:	f000 fb7e 	bl	8007c30 <xTaskResumeAll>
 8007534:	2800      	cmp	r0, #0
 8007536:	d1c8      	bne.n	80074ca <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <xQueueGenericSend+0x188>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	e7bf      	b.n	80074ca <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fe91 	bl	8007272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007550:	f000 fb6e 	bl	8007c30 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007554:	2000      	movs	r0, #0
 8007556:	e7a0      	b.n	800749a <xQueueGenericSend+0xca>
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800755c:	b148      	cbz	r0, 8007572 <prvInitialiseMutex+0x16>
	{
 800755e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8007560:	2100      	movs	r1, #0
 8007562:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007564:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007566:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007568:	460b      	mov	r3, r1
 800756a:	460a      	mov	r2, r1
 800756c:	f7ff ff30 	bl	80073d0 <xQueueGenericSend>
	}
 8007570:	bd08      	pop	{r3, pc}
 8007572:	4770      	bx	lr

08007574 <xQueueCreateMutex>:
	{
 8007574:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007576:	4602      	mov	r2, r0
 8007578:	2100      	movs	r1, #0
 800757a:	2001      	movs	r0, #1
 800757c:	f7ff ff02 	bl	8007384 <xQueueGenericCreate>
 8007580:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8007582:	f7ff ffeb 	bl	800755c <prvInitialiseMutex>
	}
 8007586:	4620      	mov	r0, r4
 8007588:	bd10      	pop	{r4, pc}
	...

0800758c <xQueueSemaphoreTake>:
{
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007592:	b950      	cbnz	r0, 80075aa <xQueueSemaphoreTake+0x1e>
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	b672      	cpsid	i
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	b662      	cpsie	i
 80075a8:	e7fe      	b.n	80075a8 <xQueueSemaphoreTake+0x1c>
 80075aa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80075ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80075ae:	b153      	cbz	r3, 80075c6 <xQueueSemaphoreTake+0x3a>
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	e7fe      	b.n	80075c4 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075c6:	f000 fcdd 	bl	8007f84 <xTaskGetSchedulerState>
 80075ca:	b960      	cbnz	r0, 80075e6 <xQueueSemaphoreTake+0x5a>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	b16b      	cbz	r3, 80075ec <xQueueSemaphoreTake+0x60>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	b672      	cpsid	i
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	b662      	cpsie	i
 80075e4:	e7fe      	b.n	80075e4 <xQueueSemaphoreTake+0x58>
 80075e6:	2500      	movs	r5, #0
 80075e8:	462e      	mov	r6, r5
 80075ea:	e053      	b.n	8007694 <xQueueSemaphoreTake+0x108>
 80075ec:	2500      	movs	r5, #0
 80075ee:	462e      	mov	r6, r5
 80075f0:	e050      	b.n	8007694 <xQueueSemaphoreTake+0x108>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075f2:	3b01      	subs	r3, #1
 80075f4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	b913      	cbnz	r3, 8007600 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80075fa:	f000 fdef 	bl	80081dc <pvTaskIncrementMutexHeldCount>
 80075fe:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	b163      	cbz	r3, 800761e <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007604:	f104 0010 	add.w	r0, r4, #16
 8007608:	f000 fc1e 	bl	8007e48 <xTaskRemoveFromEventList>
 800760c:	b138      	cbz	r0, 800761e <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 800760e:	4b49      	ldr	r3, [pc, #292]	; (8007734 <xQueueSemaphoreTake+0x1a8>)
 8007610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800761e:	f000 fe7f 	bl	8008320 <vPortExitCritical>
				return pdPASS;
 8007622:	2501      	movs	r5, #1
}
 8007624:	4628      	mov	r0, r5
 8007626:	b004      	add	sp, #16
 8007628:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800762a:	b155      	cbz	r5, 8007642 <xQueueSemaphoreTake+0xb6>
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	b672      	cpsid	i
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	b662      	cpsie	i
 8007640:	e7fe      	b.n	8007640 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 8007642:	f000 fe6d 	bl	8008320 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007646:	e7ed      	b.n	8007624 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007648:	a802      	add	r0, sp, #8
 800764a:	f000 fc45 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800764e:	2601      	movs	r6, #1
 8007650:	e02a      	b.n	80076a8 <xQueueSemaphoreTake+0x11c>
		prvLockQueue( pxQueue );
 8007652:	2300      	movs	r3, #0
 8007654:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007658:	e032      	b.n	80076c0 <xQueueSemaphoreTake+0x134>
 800765a:	2300      	movs	r3, #0
 800765c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007660:	e034      	b.n	80076cc <xQueueSemaphoreTake+0x140>
						taskENTER_CRITICAL();
 8007662:	f000 fe37 	bl	80082d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007666:	6860      	ldr	r0, [r4, #4]
 8007668:	f000 fc9c 	bl	8007fa4 <xTaskPriorityInherit>
 800766c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800766e:	f000 fe57 	bl	8008320 <vPortExitCritical>
 8007672:	e03b      	b.n	80076ec <xQueueSemaphoreTake+0x160>
				prvUnlockQueue( pxQueue );
 8007674:	4620      	mov	r0, r4
 8007676:	f7ff fdfc 	bl	8007272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800767a:	f000 fad9 	bl	8007c30 <xTaskResumeAll>
 800767e:	e009      	b.n	8007694 <xQueueSemaphoreTake+0x108>
			prvUnlockQueue( pxQueue );
 8007680:	4620      	mov	r0, r4
 8007682:	f7ff fdf6 	bl	8007272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007686:	f000 fad3 	bl	8007c30 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff fda9 	bl	80071e2 <prvIsQueueEmpty>
 8007690:	2800      	cmp	r0, #0
 8007692:	d140      	bne.n	8007716 <xQueueSemaphoreTake+0x18a>
		taskENTER_CRITICAL();
 8007694:	f000 fe1e 	bl	80082d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1a9      	bne.n	80075f2 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0c2      	beq.n	800762a <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	d0cf      	beq.n	8007648 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 80076a8:	f000 fe3a 	bl	8008320 <vPortExitCritical>
		vTaskSuspendAll();
 80076ac:	f000 fa2a 	bl	8007b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b0:	f000 fe10 	bl	80082d4 <vPortEnterCritical>
 80076b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076b8:	b25b      	sxtb	r3, r3
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076be:	d0c8      	beq.n	8007652 <xQueueSemaphoreTake+0xc6>
 80076c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80076c4:	b25b      	sxtb	r3, r3
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ca:	d0c6      	beq.n	800765a <xQueueSemaphoreTake+0xce>
 80076cc:	f000 fe28 	bl	8008320 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d0:	a901      	add	r1, sp, #4
 80076d2:	a802      	add	r0, sp, #8
 80076d4:	f000 fc0c 	bl	8007ef0 <xTaskCheckForTimeOut>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1d1      	bne.n	8007680 <xQueueSemaphoreTake+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff fd80 	bl	80071e2 <prvIsQueueEmpty>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0c6      	beq.n	8007674 <xQueueSemaphoreTake+0xe8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0ba      	beq.n	8007662 <xQueueSemaphoreTake+0xd6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076ec:	9901      	ldr	r1, [sp, #4]
 80076ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076f2:	f000 fb8f 	bl	8007e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff fdbb 	bl	8007272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076fc:	f000 fa98 	bl	8007c30 <xTaskResumeAll>
 8007700:	2800      	cmp	r0, #0
 8007702:	d1c7      	bne.n	8007694 <xQueueSemaphoreTake+0x108>
					portYIELD_WITHIN_API();
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <xQueueSemaphoreTake+0x1a8>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	e7be      	b.n	8007694 <xQueueSemaphoreTake+0x108>
					if( xInheritanceOccurred != pdFALSE )
 8007716:	2d00      	cmp	r5, #0
 8007718:	d084      	beq.n	8007624 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
 800771a:	f000 fddb 	bl	80082d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800771e:	4620      	mov	r0, r4
 8007720:	f7ff fd47 	bl	80071b2 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007724:	4601      	mov	r1, r0
 8007726:	6860      	ldr	r0, [r4, #4]
 8007728:	f000 fcf4 	bl	8008114 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800772c:	f000 fdf8 	bl	8008320 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007730:	2500      	movs	r5, #0
 8007732:	e777      	b.n	8007624 <xQueueSemaphoreTake+0x98>
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007738:	4b08      	ldr	r3, [pc, #32]	; (800775c <prvResetNextTaskUnblockTime+0x24>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	b13b      	cbz	r3, 8007750 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <prvResetNextTaskUnblockTime+0x24>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <prvResetNextTaskUnblockTime+0x28>)
 800774c:	601a      	str	r2, [r3, #0]
	}
}
 800774e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8007750:	4b03      	ldr	r3, [pc, #12]	; (8007760 <prvResetNextTaskUnblockTime+0x28>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	2000050c 	.word	0x2000050c
 8007760:	200005e4 	.word	0x200005e4

08007764 <prvDeleteTCB>:
	{
 8007764:	b510      	push	{r4, lr}
 8007766:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8007768:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800776a:	f000 ffa7 	bl	80086bc <vPortFree>
			vPortFree( pxTCB );
 800776e:	4620      	mov	r0, r4
 8007770:	f000 ffa4 	bl	80086bc <vPortFree>
	}
 8007774:	bd10      	pop	{r4, pc}

08007776 <prvInitialiseNewTask>:
{
 8007776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777a:	4680      	mov	r8, r0
 800777c:	4699      	mov	r9, r3
 800777e:	9d08      	ldr	r5, [sp, #32]
 8007780:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007782:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007784:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007786:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800778a:	4413      	add	r3, r2
 800778c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007790:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007794:	2300      	movs	r3, #0
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d807      	bhi.n	80077aa <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800779a:	5cc8      	ldrb	r0, [r1, r3]
 800779c:	18e2      	adds	r2, r4, r3
 800779e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80077a2:	5cca      	ldrb	r2, [r1, r3]
 80077a4:	b10a      	cbz	r2, 80077aa <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077a6:	3301      	adds	r3, #1
 80077a8:	e7f5      	b.n	8007796 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077aa:	2300      	movs	r3, #0
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077b0:	2d06      	cmp	r5, #6
 80077b2:	d900      	bls.n	80077b6 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077b4:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80077b6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80077b8:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077ba:	f04f 0a00 	mov.w	sl, #0
 80077be:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077c2:	1d20      	adds	r0, r4, #4
 80077c4:	f7ff fcb8 	bl	8007138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077c8:	f104 0018 	add.w	r0, r4, #24
 80077cc:	f7ff fcb4 	bl	8007138 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d2:	f1c5 0507 	rsb	r5, r5, #7
 80077d6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077d8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80077da:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077de:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077e2:	464a      	mov	r2, r9
 80077e4:	4641      	mov	r1, r8
 80077e6:	4630      	mov	r0, r6
 80077e8:	f000 fd48 	bl	800827c <pxPortInitialiseStack>
 80077ec:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80077ee:	b107      	cbz	r7, 80077f2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077f0:	603c      	str	r4, [r7, #0]
}
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080077f8 <prvInitialiseTaskLists>:
{
 80077f8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fa:	2400      	movs	r4, #0
 80077fc:	e007      	b.n	800780e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077fe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007802:	0093      	lsls	r3, r2, #2
 8007804:	480e      	ldr	r0, [pc, #56]	; (8007840 <prvInitialiseTaskLists+0x48>)
 8007806:	4418      	add	r0, r3
 8007808:	f7ff fc8b 	bl	8007122 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800780c:	3401      	adds	r4, #1
 800780e:	2c06      	cmp	r4, #6
 8007810:	d9f5      	bls.n	80077fe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007812:	4d0c      	ldr	r5, [pc, #48]	; (8007844 <prvInitialiseTaskLists+0x4c>)
 8007814:	4628      	mov	r0, r5
 8007816:	f7ff fc84 	bl	8007122 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800781a:	4c0b      	ldr	r4, [pc, #44]	; (8007848 <prvInitialiseTaskLists+0x50>)
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff fc80 	bl	8007122 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007822:	480a      	ldr	r0, [pc, #40]	; (800784c <prvInitialiseTaskLists+0x54>)
 8007824:	f7ff fc7d 	bl	8007122 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007828:	4809      	ldr	r0, [pc, #36]	; (8007850 <prvInitialiseTaskLists+0x58>)
 800782a:	f7ff fc7a 	bl	8007122 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800782e:	4809      	ldr	r0, [pc, #36]	; (8007854 <prvInitialiseTaskLists+0x5c>)
 8007830:	f7ff fc77 	bl	8007122 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007834:	4b08      	ldr	r3, [pc, #32]	; (8007858 <prvInitialiseTaskLists+0x60>)
 8007836:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007838:	4b08      	ldr	r3, [pc, #32]	; (800785c <prvInitialiseTaskLists+0x64>)
 800783a:	601c      	str	r4, [r3, #0]
}
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	20000514 	.word	0x20000514
 8007844:	200005b8 	.word	0x200005b8
 8007848:	200005cc 	.word	0x200005cc
 800784c:	200005ec 	.word	0x200005ec
 8007850:	20000618 	.word	0x20000618
 8007854:	20000604 	.word	0x20000604
 8007858:	2000050c 	.word	0x2000050c
 800785c:	20000510 	.word	0x20000510

08007860 <prvAddNewTaskToReadyList>:
{
 8007860:	b510      	push	{r4, lr}
 8007862:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007864:	f000 fd36 	bl	80082d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007868:	4a20      	ldr	r2, [pc, #128]	; (80078ec <prvAddNewTaskToReadyList+0x8c>)
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007870:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <prvAddNewTaskToReadyList+0x90>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b15b      	cbz	r3, 800788e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <prvAddNewTaskToReadyList+0x94>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	b96b      	cbnz	r3, 8007898 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800787c:	4b1c      	ldr	r3, [pc, #112]	; (80078f0 <prvAddNewTaskToReadyList+0x90>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007884:	429a      	cmp	r2, r3
 8007886:	d807      	bhi.n	8007898 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007888:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <prvAddNewTaskToReadyList+0x90>)
 800788a:	601c      	str	r4, [r3, #0]
 800788c:	e004      	b.n	8007898 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800788e:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <prvAddNewTaskToReadyList+0x90>)
 8007890:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d026      	beq.n	80078e6 <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8007898:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <prvAddNewTaskToReadyList+0x98>)
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80078a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078a2:	2201      	movs	r2, #1
 80078a4:	409a      	lsls	r2, r3
 80078a6:	4915      	ldr	r1, [pc, #84]	; (80078fc <prvAddNewTaskToReadyList+0x9c>)
 80078a8:	6808      	ldr	r0, [r1, #0]
 80078aa:	4302      	orrs	r2, r0
 80078ac:	600a      	str	r2, [r1, #0]
 80078ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078b2:	009a      	lsls	r2, r3, #2
 80078b4:	1d21      	adds	r1, r4, #4
 80078b6:	4812      	ldr	r0, [pc, #72]	; (8007900 <prvAddNewTaskToReadyList+0xa0>)
 80078b8:	4410      	add	r0, r2
 80078ba:	f7ff fc40 	bl	800713e <vListInsertEnd>
	taskEXIT_CRITICAL();
 80078be:	f000 fd2f 	bl	8008320 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <prvAddNewTaskToReadyList+0x94>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	b16b      	cbz	r3, 80078e4 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <prvAddNewTaskToReadyList+0x90>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d207      	bcs.n	80078e4 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <prvAddNewTaskToReadyList+0xa4>)
 80078d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	f3bf 8f6f 	isb	sy
}
 80078e4:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80078e6:	f7ff ff87 	bl	80077f8 <prvInitialiseTaskLists>
 80078ea:	e7d5      	b.n	8007898 <prvAddNewTaskToReadyList+0x38>
 80078ec:	200005a0 	.word	0x200005a0
 80078f0:	20000508 	.word	0x20000508
 80078f4:	20000600 	.word	0x20000600
 80078f8:	200005b0 	.word	0x200005b0
 80078fc:	200005b4 	.word	0x200005b4
 8007900:	20000514 	.word	0x20000514
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <prvCheckTasksWaitingTermination+0x40>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	b1d3      	cbz	r3, 8007944 <prvCheckTasksWaitingTermination+0x3c>
{
 800790e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007910:	f000 fce0 	bl	80082d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <prvCheckTasksWaitingTermination+0x44>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791a:	1d20      	adds	r0, r4, #4
 800791c:	f7ff fc35 	bl	800718a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007920:	4a0b      	ldr	r2, [pc, #44]	; (8007950 <prvCheckTasksWaitingTermination+0x48>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007928:	4a07      	ldr	r2, [pc, #28]	; (8007948 <prvCheckTasksWaitingTermination+0x40>)
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8007930:	f000 fcf6 	bl	8008320 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff ff15 	bl	8007764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800793a:	4b03      	ldr	r3, [pc, #12]	; (8007948 <prvCheckTasksWaitingTermination+0x40>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <prvCheckTasksWaitingTermination+0x8>
}
 8007942:	bd10      	pop	{r4, pc}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	200005a4 	.word	0x200005a4
 800794c:	20000618 	.word	0x20000618
 8007950:	200005a0 	.word	0x200005a0

08007954 <prvIdleTask>:
{
 8007954:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007956:	f7ff ffd7 	bl	8007908 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <prvIdleTask+0x20>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d9f9      	bls.n	8007956 <prvIdleTask+0x2>
				taskYIELD();
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <prvIdleTask+0x24>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	e7f0      	b.n	8007956 <prvIdleTask+0x2>
 8007974:	20000514 	.word	0x20000514
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007982:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <prvAddCurrentTaskToDelayedList+0x84>)
 8007984:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007986:	4b1f      	ldr	r3, [pc, #124]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	3004      	adds	r0, #4
 800798c:	f7ff fbfd 	bl	800718a <uxListRemove>
 8007990:	b950      	cbnz	r0, 80079a8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007992:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	2301      	movs	r3, #1
 800799a:	fa03 f202 	lsl.w	r2, r3, r2
 800799e:	491a      	ldr	r1, [pc, #104]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x8c>)
 80079a0:	680b      	ldr	r3, [r1, #0]
 80079a2:	ea23 0302 	bic.w	r3, r3, r2
 80079a6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80079ac:	bf14      	ite	ne
 80079ae:	2300      	movne	r3, #0
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	bf08      	it	eq
 80079b6:	2300      	moveq	r3, #0
 80079b8:	b99b      	cbnz	r3, 80079e2 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079ba:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80079c2:	42a5      	cmp	r5, r4
 80079c4:	d814      	bhi.n	80079f0 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <prvAddCurrentTaskToDelayedList+0x90>)
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	3104      	adds	r1, #4
 80079d0:	f7ff fbc1 	bl	8007156 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80079d4:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d910      	bls.n	80079fe <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80079de:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079e0:	e00d      	b.n	80079fe <prvAddCurrentTaskToDelayedList+0x82>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 80079e4:	6819      	ldr	r1, [r3, #0]
 80079e6:	3104      	adds	r1, #4
 80079e8:	480a      	ldr	r0, [pc, #40]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80079ea:	f7ff fba8 	bl	800713e <vListInsertEnd>
 80079ee:	e006      	b.n	80079fe <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x88>)
 80079f6:	6819      	ldr	r1, [r3, #0]
 80079f8:	3104      	adds	r1, #4
 80079fa:	f7ff fbac 	bl	8007156 <vListInsert>
}
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	2000062c 	.word	0x2000062c
 8007a04:	20000508 	.word	0x20000508
 8007a08:	200005b4 	.word	0x200005b4
 8007a0c:	2000050c 	.word	0x2000050c
 8007a10:	200005e4 	.word	0x200005e4
 8007a14:	20000604 	.word	0x20000604
 8007a18:	20000510 	.word	0x20000510

08007a1c <xTaskCreate>:
	{
 8007a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a20:	b085      	sub	sp, #20
 8007a22:	4607      	mov	r7, r0
 8007a24:	4688      	mov	r8, r1
 8007a26:	4615      	mov	r5, r2
 8007a28:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2a:	0090      	lsls	r0, r2, #2
 8007a2c:	f000 fdbc 	bl	80085a8 <pvPortMalloc>
			if( pxStack != NULL )
 8007a30:	b1f8      	cbz	r0, 8007a72 <xTaskCreate+0x56>
 8007a32:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007a34:	2054      	movs	r0, #84	; 0x54
 8007a36:	f000 fdb7 	bl	80085a8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	b1a8      	cbz	r0, 8007a6a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007a3e:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8007a40:	b1d4      	cbz	r4, 8007a78 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a42:	2300      	movs	r3, #0
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	9402      	str	r4, [sp, #8]
 8007a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	464b      	mov	r3, r9
 8007a52:	462a      	mov	r2, r5
 8007a54:	4641      	mov	r1, r8
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff fe8d 	bl	8007776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7ff feff 	bl	8007860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a62:	2001      	movs	r0, #1
	}
 8007a64:	b005      	add	sp, #20
 8007a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 fe26 	bl	80086bc <vPortFree>
 8007a70:	e7e6      	b.n	8007a40 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a76:	e7f5      	b.n	8007a64 <xTaskCreate+0x48>
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007a7c:	e7f2      	b.n	8007a64 <xTaskCreate+0x48>
	...

08007a80 <vTaskStartScheduler>:
{
 8007a80:	b500      	push	{lr}
 8007a82:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8007a84:	4b19      	ldr	r3, [pc, #100]	; (8007aec <vTaskStartScheduler+0x6c>)
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2280      	movs	r2, #128	; 0x80
 8007a8e:	4918      	ldr	r1, [pc, #96]	; (8007af0 <vTaskStartScheduler+0x70>)
 8007a90:	4818      	ldr	r0, [pc, #96]	; (8007af4 <vTaskStartScheduler+0x74>)
 8007a92:	f7ff ffc3 	bl	8007a1c <xTaskCreate>
	if( xReturn == pdPASS )
 8007a96:	2801      	cmp	r0, #1
 8007a98:	d005      	beq.n	8007aa6 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a9e:	d019      	beq.n	8007ad4 <vTaskStartScheduler+0x54>
}
 8007aa0:	b003      	add	sp, #12
 8007aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	b672      	cpsid	i
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <vTaskStartScheduler+0x78>)
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <vTaskStartScheduler+0x7c>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <vTaskStartScheduler+0x80>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007ace:	f000 fca5 	bl	800841c <xPortStartScheduler>
 8007ad2:	e7e5      	b.n	8007aa0 <vTaskStartScheduler+0x20>
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	b672      	cpsid	i
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	b662      	cpsie	i
 8007ae8:	e7fe      	b.n	8007ae8 <vTaskStartScheduler+0x68>
 8007aea:	bf00      	nop
 8007aec:	200005e0 	.word	0x200005e0
 8007af0:	080109c0 	.word	0x080109c0
 8007af4:	08007955 	.word	0x08007955
 8007af8:	200005e4 	.word	0x200005e4
 8007afc:	20000600 	.word	0x20000600
 8007b00:	2000062c 	.word	0x2000062c

08007b04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007b04:	4a02      	ldr	r2, [pc, #8]	; (8007b10 <vTaskSuspendAll+0xc>)
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	200005ac 	.word	0x200005ac

08007b14 <xTaskIncrementTick>:
{
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <xTaskIncrementTick+0xf0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d166      	bne.n	8007bec <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b1e:	4b3a      	ldr	r3, [pc, #232]	; (8007c08 <xTaskIncrementTick+0xf4>)
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007b24:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b26:	b9d5      	cbnz	r5, 8007b5e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007b28:	4b38      	ldr	r3, [pc, #224]	; (8007c0c <xTaskIncrementTick+0xf8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	b153      	cbz	r3, 8007b46 <xTaskIncrementTick+0x32>
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	b672      	cpsid	i
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	b662      	cpsie	i
 8007b44:	e7fe      	b.n	8007b44 <xTaskIncrementTick+0x30>
 8007b46:	4a31      	ldr	r2, [pc, #196]	; (8007c0c <xTaskIncrementTick+0xf8>)
 8007b48:	6811      	ldr	r1, [r2, #0]
 8007b4a:	4b31      	ldr	r3, [pc, #196]	; (8007c10 <xTaskIncrementTick+0xfc>)
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	6010      	str	r0, [r2, #0]
 8007b50:	6019      	str	r1, [r3, #0]
 8007b52:	4a30      	ldr	r2, [pc, #192]	; (8007c14 <xTaskIncrementTick+0x100>)
 8007b54:	6813      	ldr	r3, [r2, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	f7ff fded 	bl	8007738 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <xTaskIncrementTick+0x104>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	42ab      	cmp	r3, r5
 8007b64:	d938      	bls.n	8007bd8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007b66:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b68:	4b2c      	ldr	r3, [pc, #176]	; (8007c1c <xTaskIncrementTick+0x108>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b72:	009a      	lsls	r2, r3, #2
 8007b74:	4b2a      	ldr	r3, [pc, #168]	; (8007c20 <xTaskIncrementTick+0x10c>)
 8007b76:	589b      	ldr	r3, [r3, r2]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d93c      	bls.n	8007bf6 <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8007b7c:	2401      	movs	r4, #1
 8007b7e:	e03a      	b.n	8007bf6 <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8007b80:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <xTaskIncrementTick+0xf8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	b343      	cbz	r3, 8007bdc <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <xTaskIncrementTick+0xf8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b92:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007b94:	429d      	cmp	r5, r3
 8007b96:	d326      	bcc.n	8007be6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b98:	1d37      	adds	r7, r6, #4
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7ff faf5 	bl	800718a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ba0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007ba2:	b11b      	cbz	r3, 8007bac <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ba4:	f106 0018 	add.w	r0, r6, #24
 8007ba8:	f7ff faef 	bl	800718a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007bae:	2201      	movs	r2, #1
 8007bb0:	409a      	lsls	r2, r3
 8007bb2:	491c      	ldr	r1, [pc, #112]	; (8007c24 <xTaskIncrementTick+0x110>)
 8007bb4:	6808      	ldr	r0, [r1, #0]
 8007bb6:	4302      	orrs	r2, r0
 8007bb8:	600a      	str	r2, [r1, #0]
 8007bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007bbe:	009a      	lsls	r2, r3, #2
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	4817      	ldr	r0, [pc, #92]	; (8007c20 <xTaskIncrementTick+0x10c>)
 8007bc4:	4410      	add	r0, r2
 8007bc6:	f7ff faba 	bl	800713e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bca:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <xTaskIncrementTick+0x108>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d2d4      	bcs.n	8007b80 <xTaskIncrementTick+0x6c>
 8007bd6:	e7d4      	b.n	8007b82 <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 8007bd8:	2400      	movs	r4, #0
 8007bda:	e7d2      	b.n	8007b82 <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <xTaskIncrementTick+0x104>)
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be2:	601a      	str	r2, [r3, #0]
					break;
 8007be4:	e7c0      	b.n	8007b68 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8007be6:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <xTaskIncrementTick+0x104>)
 8007be8:	6013      	str	r3, [r2, #0]
						break;
 8007bea:	e7bd      	b.n	8007b68 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007bec:	4a0e      	ldr	r2, [pc, #56]	; (8007c28 <xTaskIncrementTick+0x114>)
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007bf4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <xTaskIncrementTick+0x118>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 8007bfc:	2401      	movs	r4, #1
}
 8007bfe:	4620      	mov	r0, r4
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c02:	bf00      	nop
 8007c04:	200005ac 	.word	0x200005ac
 8007c08:	2000062c 	.word	0x2000062c
 8007c0c:	2000050c 	.word	0x2000050c
 8007c10:	20000510 	.word	0x20000510
 8007c14:	200005e8 	.word	0x200005e8
 8007c18:	200005e4 	.word	0x200005e4
 8007c1c:	20000508 	.word	0x20000508
 8007c20:	20000514 	.word	0x20000514
 8007c24:	200005b4 	.word	0x200005b4
 8007c28:	200005a8 	.word	0x200005a8
 8007c2c:	20000630 	.word	0x20000630

08007c30 <xTaskResumeAll>:
{
 8007c30:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007c32:	4b34      	ldr	r3, [pc, #208]	; (8007d04 <xTaskResumeAll+0xd4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	b953      	cbnz	r3, 8007c4e <xTaskResumeAll+0x1e>
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	b672      	cpsid	i
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	b662      	cpsie	i
 8007c4c:	e7fe      	b.n	8007c4c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007c4e:	f000 fb41 	bl	80082d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007c52:	4b2c      	ldr	r3, [pc, #176]	; (8007d04 <xTaskResumeAll+0xd4>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	3a01      	subs	r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d14d      	bne.n	8007cfc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c60:	4b29      	ldr	r3, [pc, #164]	; (8007d08 <xTaskResumeAll+0xd8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b923      	cbnz	r3, 8007c70 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007c68:	f000 fb5a 	bl	8008320 <vPortExitCritical>
}
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8007c70:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c72:	4b26      	ldr	r3, [pc, #152]	; (8007d0c <xTaskResumeAll+0xdc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	b31b      	cbz	r3, 8007cc0 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c78:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <xTaskResumeAll+0xdc>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c7e:	f104 0018 	add.w	r0, r4, #24
 8007c82:	f7ff fa82 	bl	800718a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c86:	1d25      	adds	r5, r4, #4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fa7e 	bl	800718a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c90:	2201      	movs	r2, #1
 8007c92:	409a      	lsls	r2, r3
 8007c94:	491e      	ldr	r1, [pc, #120]	; (8007d10 <xTaskResumeAll+0xe0>)
 8007c96:	6808      	ldr	r0, [r1, #0]
 8007c98:	4302      	orrs	r2, r0
 8007c9a:	600a      	str	r2, [r1, #0]
 8007c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ca0:	009a      	lsls	r2, r3, #2
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	481b      	ldr	r0, [pc, #108]	; (8007d14 <xTaskResumeAll+0xe4>)
 8007ca6:	4410      	add	r0, r2
 8007ca8:	f7ff fa49 	bl	800713e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007cae:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <xTaskResumeAll+0xe8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d3dc      	bcc.n	8007c72 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8007cb8:	4b18      	ldr	r3, [pc, #96]	; (8007d1c <xTaskResumeAll+0xec>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e7d8      	b.n	8007c72 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8007cc0:	b10c      	cbz	r4, 8007cc6 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8007cc2:	f7ff fd39 	bl	8007738 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <xTaskResumeAll+0xf0>)
 8007cc8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cca:	b154      	cbz	r4, 8007ce2 <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
 8007ccc:	f7ff ff22 	bl	8007b14 <xTaskIncrementTick>
 8007cd0:	b110      	cbz	r0, 8007cd8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <xTaskResumeAll+0xec>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cd8:	3c01      	subs	r4, #1
 8007cda:	d1f7      	bne.n	8007ccc <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <xTaskResumeAll+0xf0>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <xTaskResumeAll+0xec>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	b15b      	cbz	r3, 8007d00 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <xTaskResumeAll+0xf4>)
 8007cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007cf8:	2401      	movs	r4, #1
 8007cfa:	e7b5      	b.n	8007c68 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8007cfc:	2400      	movs	r4, #0
 8007cfe:	e7b3      	b.n	8007c68 <xTaskResumeAll+0x38>
 8007d00:	2400      	movs	r4, #0
 8007d02:	e7b1      	b.n	8007c68 <xTaskResumeAll+0x38>
 8007d04:	200005ac 	.word	0x200005ac
 8007d08:	200005a0 	.word	0x200005a0
 8007d0c:	200005ec 	.word	0x200005ec
 8007d10:	200005b4 	.word	0x200005b4
 8007d14:	20000514 	.word	0x20000514
 8007d18:	20000508 	.word	0x20000508
 8007d1c:	20000630 	.word	0x20000630
 8007d20:	200005a8 	.word	0x200005a8
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <vTaskDelay>:
	{
 8007d28:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d2a:	b1b8      	cbz	r0, 8007d5c <vTaskDelay+0x34>
 8007d2c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <vTaskDelay+0x48>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	b153      	cbz	r3, 8007d4a <vTaskDelay+0x22>
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	b672      	cpsid	i
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	b662      	cpsie	i
 8007d48:	e7fe      	b.n	8007d48 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007d4a:	f7ff fedb 	bl	8007b04 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7ff fe13 	bl	800797c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007d56:	f7ff ff6b 	bl	8007c30 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007d5a:	b938      	cbnz	r0, 8007d6c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <vTaskDelay+0x4c>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
	}
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	bf00      	nop
 8007d70:	200005ac 	.word	0x200005ac
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d78:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <vTaskSwitchContext+0x88>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	b11b      	cbz	r3, 8007d86 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007d7e:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <vTaskSwitchContext+0x8c>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007d86:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <vTaskSwitchContext+0x8c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007d8c:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <vTaskSwitchContext+0x90>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d90:	fab3 f383 	clz	r3, r3
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f1c3 031f 	rsb	r3, r3, #31
 8007d9a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007d9e:	008a      	lsls	r2, r1, #2
 8007da0:	491a      	ldr	r1, [pc, #104]	; (8007e0c <vTaskSwitchContext+0x94>)
 8007da2:	588a      	ldr	r2, [r1, r2]
 8007da4:	b952      	cbnz	r2, 8007dbc <vTaskSwitchContext+0x44>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	e7fe      	b.n	8007dba <vTaskSwitchContext+0x42>
{
 8007dbc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007dbe:	4813      	ldr	r0, [pc, #76]	; (8007e0c <vTaskSwitchContext+0x94>)
 8007dc0:	009a      	lsls	r2, r3, #2
 8007dc2:	18d4      	adds	r4, r2, r3
 8007dc4:	00a1      	lsls	r1, r4, #2
 8007dc6:	4401      	add	r1, r0
 8007dc8:	684c      	ldr	r4, [r1, #4]
 8007dca:	6864      	ldr	r4, [r4, #4]
 8007dcc:	604c      	str	r4, [r1, #4]
 8007dce:	441a      	add	r2, r3
 8007dd0:	0091      	lsls	r1, r2, #2
 8007dd2:	3108      	adds	r1, #8
 8007dd4:	4408      	add	r0, r1
 8007dd6:	4284      	cmp	r4, r0
 8007dd8:	d00b      	beq.n	8007df2 <vTaskSwitchContext+0x7a>
 8007dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007dde:	009a      	lsls	r2, r3, #2
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <vTaskSwitchContext+0x94>)
 8007de2:	4413      	add	r3, r2
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <vTaskSwitchContext+0x98>)
 8007dea:	601a      	str	r2, [r3, #0]
}
 8007dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007df2:	6861      	ldr	r1, [r4, #4]
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <vTaskSwitchContext+0x94>)
 8007df6:	2214      	movs	r2, #20
 8007df8:	fb02 0203 	mla	r2, r2, r3, r0
 8007dfc:	6051      	str	r1, [r2, #4]
 8007dfe:	e7ec      	b.n	8007dda <vTaskSwitchContext+0x62>
 8007e00:	200005ac 	.word	0x200005ac
 8007e04:	20000630 	.word	0x20000630
 8007e08:	200005b4 	.word	0x200005b4
 8007e0c:	20000514 	.word	0x20000514
 8007e10:	20000508 	.word	0x20000508

08007e14 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007e14:	b950      	cbnz	r0, 8007e2c <vTaskPlaceOnEventList+0x18>
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	b672      	cpsid	i
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	b662      	cpsie	i
 8007e2a:	e7fe      	b.n	8007e2a <vTaskPlaceOnEventList+0x16>
{
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <vTaskPlaceOnEventList+0x30>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	3118      	adds	r1, #24
 8007e36:	f7ff f98e 	bl	8007156 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f7ff fd9d 	bl	800797c <prvAddCurrentTaskToDelayedList>
}
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	20000508 	.word	0x20000508

08007e48 <xTaskRemoveFromEventList>:
{
 8007e48:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e4a:	68c3      	ldr	r3, [r0, #12]
 8007e4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e4e:	b954      	cbnz	r4, 8007e66 <xTaskRemoveFromEventList+0x1e>
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	b672      	cpsid	i
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	b662      	cpsie	i
 8007e64:	e7fe      	b.n	8007e64 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e66:	f104 0518 	add.w	r5, r4, #24
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7ff f98d 	bl	800718a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e70:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <xTaskRemoveFromEventList+0x78>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	b9e3      	cbnz	r3, 8007eb0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e76:	1d25      	adds	r5, r4, #4
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff f986 	bl	800718a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e80:	2201      	movs	r2, #1
 8007e82:	409a      	lsls	r2, r3
 8007e84:	490f      	ldr	r1, [pc, #60]	; (8007ec4 <xTaskRemoveFromEventList+0x7c>)
 8007e86:	6808      	ldr	r0, [r1, #0]
 8007e88:	4302      	orrs	r2, r0
 8007e8a:	600a      	str	r2, [r1, #0]
 8007e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e90:	009a      	lsls	r2, r3, #2
 8007e92:	4629      	mov	r1, r5
 8007e94:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <xTaskRemoveFromEventList+0x80>)
 8007e96:	4410      	add	r0, r2
 8007e98:	f7ff f951 	bl	800713e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <xTaskRemoveFromEventList+0x84>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d908      	bls.n	8007eba <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <xTaskRemoveFromEventList+0x88>)
 8007eac:	6018      	str	r0, [r3, #0]
}
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <xTaskRemoveFromEventList+0x8c>)
 8007eb4:	f7ff f943 	bl	800713e <vListInsertEnd>
 8007eb8:	e7f0      	b.n	8007e9c <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 8007eba:	2000      	movs	r0, #0
	return xReturn;
 8007ebc:	e7f7      	b.n	8007eae <xTaskRemoveFromEventList+0x66>
 8007ebe:	bf00      	nop
 8007ec0:	200005ac 	.word	0x200005ac
 8007ec4:	200005b4 	.word	0x200005b4
 8007ec8:	20000514 	.word	0x20000514
 8007ecc:	20000508 	.word	0x20000508
 8007ed0:	20000630 	.word	0x20000630
 8007ed4:	200005ec 	.word	0x200005ec

08007ed8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <vTaskInternalSetTimeOutState+0x10>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <vTaskInternalSetTimeOutState+0x14>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6043      	str	r3, [r0, #4]
}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	200005e8 	.word	0x200005e8
 8007eec:	2000062c 	.word	0x2000062c

08007ef0 <xTaskCheckForTimeOut>:
{
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007ef2:	b160      	cbz	r0, 8007f0e <xTaskCheckForTimeOut+0x1e>
 8007ef4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007ef6:	b9a9      	cbnz	r1, 8007f24 <xTaskCheckForTimeOut+0x34>
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	b672      	cpsid	i
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	b662      	cpsie	i
 8007f0c:	e7fe      	b.n	8007f0c <xTaskCheckForTimeOut+0x1c>
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
 8007f22:	e7fe      	b.n	8007f22 <xTaskCheckForTimeOut+0x32>
 8007f24:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8007f26:	f000 f9d5 	bl	80082d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <xTaskCheckForTimeOut+0x80>)
 8007f2c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f2e:	6868      	ldr	r0, [r5, #4]
 8007f30:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f38:	d016      	beq.n	8007f68 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f3a:	682f      	ldr	r7, [r5, #0]
 8007f3c:	4e0d      	ldr	r6, [pc, #52]	; (8007f74 <xTaskCheckForTimeOut+0x84>)
 8007f3e:	6836      	ldr	r6, [r6, #0]
 8007f40:	42b7      	cmp	r7, r6
 8007f42:	d001      	beq.n	8007f48 <xTaskCheckForTimeOut+0x58>
 8007f44:	4288      	cmp	r0, r1
 8007f46:	d911      	bls.n	8007f6c <xTaskCheckForTimeOut+0x7c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d803      	bhi.n	8007f54 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007f50:	2401      	movs	r4, #1
 8007f52:	e005      	b.n	8007f60 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f7ff ffbd 	bl	8007ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007f60:	f000 f9de 	bl	8008320 <vPortExitCritical>
}
 8007f64:	4620      	mov	r0, r4
 8007f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8007f68:	2400      	movs	r4, #0
 8007f6a:	e7f9      	b.n	8007f60 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8007f6c:	2401      	movs	r4, #1
 8007f6e:	e7f7      	b.n	8007f60 <xTaskCheckForTimeOut+0x70>
 8007f70:	2000062c 	.word	0x2000062c
 8007f74:	200005e8 	.word	0x200005e8

08007f78 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007f78:	4b01      	ldr	r3, [pc, #4]	; (8007f80 <vTaskMissedYield+0x8>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
}
 8007f7e:	4770      	bx	lr
 8007f80:	20000630 	.word	0x20000630

08007f84 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <xTaskGetSchedulerState+0x18>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	b133      	cbz	r3, 8007f98 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <xTaskGetSchedulerState+0x1c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b10b      	cbz	r3, 8007f94 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f90:	2000      	movs	r0, #0
	}
 8007f92:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007f94:	2002      	movs	r0, #2
 8007f96:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f98:	2001      	movs	r0, #1
 8007f9a:	4770      	bx	lr
 8007f9c:	20000600 	.word	0x20000600
 8007fa0:	200005ac 	.word	0x200005ac

08007fa4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d050      	beq.n	800804a <xTaskPriorityInherit+0xa6>
	{
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007fae:	4928      	ldr	r1, [pc, #160]	; (8008050 <xTaskPriorityInherit+0xac>)
 8007fb0:	6809      	ldr	r1, [r1, #0]
 8007fb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007fb4:	428a      	cmp	r2, r1
 8007fb6:	d23e      	bcs.n	8008036 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fb8:	6981      	ldr	r1, [r0, #24]
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	db05      	blt.n	8007fca <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbe:	4924      	ldr	r1, [pc, #144]	; (8008050 <xTaskPriorityInherit+0xac>)
 8007fc0:	6809      	ldr	r1, [r1, #0]
 8007fc2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007fc4:	f1c1 0107 	rsb	r1, r1, #7
 8007fc8:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fca:	6960      	ldr	r0, [r4, #20]
 8007fcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007fd0:	0091      	lsls	r1, r2, #2
 8007fd2:	4a20      	ldr	r2, [pc, #128]	; (8008054 <xTaskPriorityInherit+0xb0>)
 8007fd4:	440a      	add	r2, r1
 8007fd6:	4290      	cmp	r0, r2
 8007fd8:	d005      	beq.n	8007fe6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fda:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <xTaskPriorityInherit+0xac>)
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fe0:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8007fe2:	2001      	movs	r0, #1
	}
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fe6:	1d25      	adds	r5, r4, #4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7ff f8ce 	bl	800718a <uxListRemove>
 8007fee:	b968      	cbnz	r0, 800800c <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ff2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007ff6:	008a      	lsls	r2, r1, #2
 8007ff8:	4916      	ldr	r1, [pc, #88]	; (8008054 <xTaskPriorityInherit+0xb0>)
 8007ffa:	588a      	ldr	r2, [r1, r2]
 8007ffc:	b932      	cbnz	r2, 800800c <xTaskPriorityInherit+0x68>
 8007ffe:	2201      	movs	r2, #1
 8008000:	409a      	lsls	r2, r3
 8008002:	4915      	ldr	r1, [pc, #84]	; (8008058 <xTaskPriorityInherit+0xb4>)
 8008004:	680b      	ldr	r3, [r1, #0]
 8008006:	ea23 0302 	bic.w	r3, r3, r2
 800800a:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800800c:	4b10      	ldr	r3, [pc, #64]	; (8008050 <xTaskPriorityInherit+0xac>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008014:	2401      	movs	r4, #1
 8008016:	fa04 f203 	lsl.w	r2, r4, r3
 800801a:	490f      	ldr	r1, [pc, #60]	; (8008058 <xTaskPriorityInherit+0xb4>)
 800801c:	6808      	ldr	r0, [r1, #0]
 800801e:	4302      	orrs	r2, r0
 8008020:	600a      	str	r2, [r1, #0]
 8008022:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008026:	009a      	lsls	r2, r3, #2
 8008028:	4629      	mov	r1, r5
 800802a:	480a      	ldr	r0, [pc, #40]	; (8008054 <xTaskPriorityInherit+0xb0>)
 800802c:	4410      	add	r0, r2
 800802e:	f7ff f886 	bl	800713e <vListInsertEnd>
				xReturn = pdTRUE;
 8008032:	4620      	mov	r0, r4
 8008034:	e7d6      	b.n	8007fe4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008036:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <xTaskPriorityInherit+0xac>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	429a      	cmp	r2, r3
 8008040:	d201      	bcs.n	8008046 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8008042:	2001      	movs	r0, #1
		return xReturn;
 8008044:	e7ce      	b.n	8007fe4 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8008046:	2000      	movs	r0, #0
 8008048:	e7cc      	b.n	8007fe4 <xTaskPriorityInherit+0x40>
 800804a:	2000      	movs	r0, #0
	}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000508 	.word	0x20000508
 8008054:	20000514 	.word	0x20000514
 8008058:	200005b4 	.word	0x200005b4

0800805c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800805c:	2800      	cmp	r0, #0
 800805e:	d04d      	beq.n	80080fc <xTaskPriorityDisinherit+0xa0>
	{
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008064:	4a28      	ldr	r2, [pc, #160]	; (8008108 <xTaskPriorityDisinherit+0xac>)
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	4282      	cmp	r2, r0
 800806a:	d00a      	beq.n	8008082 <xTaskPriorityDisinherit+0x26>
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	b672      	cpsid	i
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	b662      	cpsie	i
 8008080:	e7fe      	b.n	8008080 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8008082:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008084:	b952      	cbnz	r2, 800809c <xTaskPriorityDisinherit+0x40>
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	e7fe      	b.n	800809a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 800809c:	3a01      	subs	r2, #1
 800809e:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80080a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080a4:	4288      	cmp	r0, r1
 80080a6:	d02b      	beq.n	8008100 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080a8:	bb62      	cbnz	r2, 8008104 <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080aa:	1d25      	adds	r5, r4, #4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f7ff f86c 	bl	800718a <uxListRemove>
 80080b2:	b970      	cbnz	r0, 80080d2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80080b6:	2314      	movs	r3, #20
 80080b8:	fb03 f302 	mul.w	r3, r3, r2
 80080bc:	4913      	ldr	r1, [pc, #76]	; (800810c <xTaskPriorityDisinherit+0xb0>)
 80080be:	58cb      	ldr	r3, [r1, r3]
 80080c0:	b93b      	cbnz	r3, 80080d2 <xTaskPriorityDisinherit+0x76>
 80080c2:	2301      	movs	r3, #1
 80080c4:	fa03 f202 	lsl.w	r2, r3, r2
 80080c8:	4911      	ldr	r1, [pc, #68]	; (8008110 <xTaskPriorityDisinherit+0xb4>)
 80080ca:	680b      	ldr	r3, [r1, #0]
 80080cc:	ea23 0302 	bic.w	r3, r3, r2
 80080d0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80080d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d6:	f1c3 0207 	rsb	r2, r3, #7
 80080da:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80080dc:	2401      	movs	r4, #1
 80080de:	fa04 f203 	lsl.w	r2, r4, r3
 80080e2:	490b      	ldr	r1, [pc, #44]	; (8008110 <xTaskPriorityDisinherit+0xb4>)
 80080e4:	6808      	ldr	r0, [r1, #0]
 80080e6:	4302      	orrs	r2, r0
 80080e8:	600a      	str	r2, [r1, #0]
 80080ea:	4629      	mov	r1, r5
 80080ec:	4a07      	ldr	r2, [pc, #28]	; (800810c <xTaskPriorityDisinherit+0xb0>)
 80080ee:	2014      	movs	r0, #20
 80080f0:	fb00 2003 	mla	r0, r0, r3, r2
 80080f4:	f7ff f823 	bl	800713e <vListInsertEnd>
					xReturn = pdTRUE;
 80080f8:	4620      	mov	r0, r4
	}
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80080fc:	2000      	movs	r0, #0
	}
 80080fe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008100:	2000      	movs	r0, #0
 8008102:	e7fa      	b.n	80080fa <xTaskPriorityDisinherit+0x9e>
 8008104:	2000      	movs	r0, #0
		return xReturn;
 8008106:	e7f8      	b.n	80080fa <xTaskPriorityDisinherit+0x9e>
 8008108:	20000508 	.word	0x20000508
 800810c:	20000514 	.word	0x20000514
 8008110:	200005b4 	.word	0x200005b4

08008114 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008114:	2800      	cmp	r0, #0
 8008116:	d059      	beq.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800811c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800811e:	b950      	cbnz	r0, 8008136 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	b672      	cpsid	i
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	b662      	cpsie	i
 8008134:	e7fe      	b.n	8008134 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008138:	428a      	cmp	r2, r1
 800813a:	d200      	bcs.n	800813e <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800813c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800813e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008140:	4291      	cmp	r1, r2
 8008142:	d001      	beq.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008144:	2801      	cmp	r0, #1
 8008146:	d000      	beq.n	800814a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8008148:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800814a:	4821      	ldr	r0, [pc, #132]	; (80081d0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	4298      	cmp	r0, r3
 8008150:	d10a      	bne.n	8008168 <vTaskPriorityDisinheritAfterTimeout+0x54>
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	e7fe      	b.n	8008166 <vTaskPriorityDisinheritAfterTimeout+0x52>
					pxTCB->uxPriority = uxPriorityToUse;
 8008168:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800816a:	6998      	ldr	r0, [r3, #24]
 800816c:	2800      	cmp	r0, #0
 800816e:	db02      	blt.n	8008176 <vTaskPriorityDisinheritAfterTimeout+0x62>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	f1c2 0207 	rsb	r2, r2, #7
 8008174:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008176:	695a      	ldr	r2, [r3, #20]
 8008178:	4816      	ldr	r0, [pc, #88]	; (80081d4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800817a:	2414      	movs	r4, #20
 800817c:	fb04 0101 	mla	r1, r4, r1, r0
 8008180:	428a      	cmp	r2, r1
 8008182:	d1e1      	bne.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008184:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008186:	1d1d      	adds	r5, r3, #4
 8008188:	4628      	mov	r0, r5
 800818a:	f7fe fffe 	bl	800718a <uxListRemove>
 800818e:	b970      	cbnz	r0, 80081ae <vTaskPriorityDisinheritAfterTimeout+0x9a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008190:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008192:	2314      	movs	r3, #20
 8008194:	fb03 f302 	mul.w	r3, r3, r2
 8008198:	490e      	ldr	r1, [pc, #56]	; (80081d4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800819a:	58cb      	ldr	r3, [r1, r3]
 800819c:	b93b      	cbnz	r3, 80081ae <vTaskPriorityDisinheritAfterTimeout+0x9a>
 800819e:	2301      	movs	r3, #1
 80081a0:	fa03 f202 	lsl.w	r2, r3, r2
 80081a4:	490c      	ldr	r1, [pc, #48]	; (80081d8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80081a6:	680b      	ldr	r3, [r1, #0]
 80081a8:	ea23 0302 	bic.w	r3, r3, r2
 80081ac:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 80081ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80081b0:	2301      	movs	r3, #1
 80081b2:	4093      	lsls	r3, r2
 80081b4:	4908      	ldr	r1, [pc, #32]	; (80081d8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80081b6:	6808      	ldr	r0, [r1, #0]
 80081b8:	4303      	orrs	r3, r0
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	4629      	mov	r1, r5
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80081c0:	2014      	movs	r0, #20
 80081c2:	fb00 3002 	mla	r0, r0, r2, r3
 80081c6:	f7fe ffba 	bl	800713e <vListInsertEnd>
	}
 80081ca:	e7bd      	b.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000508 	.word	0x20000508
 80081d4:	20000514 	.word	0x20000514
 80081d8:	200005b4 	.word	0x200005b4

080081dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <pvTaskIncrementMutexHeldCount+0x18>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	b123      	cbz	r3, 80081ec <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80081e2:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <pvTaskIncrementMutexHeldCount+0x18>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80081e8:	3301      	adds	r3, #1
 80081ea:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 80081ec:	4b01      	ldr	r3, [pc, #4]	; (80081f4 <pvTaskIncrementMutexHeldCount+0x18>)
 80081ee:	6818      	ldr	r0, [r3, #0]
	}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000508 	.word	0x20000508

080081f8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081f8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <prvTaskExitError+0x44>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008206:	d00a      	beq.n	800821e <prvTaskExitError+0x26>
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	b672      	cpsid	i
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	b662      	cpsie	i
 800821c:	e7fe      	b.n	800821c <prvTaskExitError+0x24>
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	b672      	cpsid	i
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0fc      	beq.n	8008232 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008238:	b002      	add	sp, #8
 800823a:	4770      	bx	lr
 800823c:	20000048 	.word	0x20000048

08008240 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008240:	4808      	ldr	r0, [pc, #32]	; (8008264 <prvPortStartFirstTask+0x24>)
 8008242:	6800      	ldr	r0, [r0, #0]
 8008244:	6800      	ldr	r0, [r0, #0]
 8008246:	f380 8808 	msr	MSP, r0
 800824a:	f04f 0000 	mov.w	r0, #0
 800824e:	f380 8814 	msr	CONTROL, r0
 8008252:	b662      	cpsie	i
 8008254:	b661      	cpsie	f
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	df00      	svc	0
 8008260:	bf00      	nop
 8008262:	0000      	.short	0x0000
 8008264:	e000ed08 	.word	0xe000ed08

08008268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008278 <vPortEnableVFP+0x10>
 800826c:	6801      	ldr	r1, [r0, #0]
 800826e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008272:	6001      	str	r1, [r0, #0]
 8008274:	4770      	bx	lr
 8008276:	0000      	.short	0x0000
 8008278:	e000ed88 	.word	0xe000ed88

0800827c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800827c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008280:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008284:	f021 0101 	bic.w	r1, r1, #1
 8008288:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <pxPortInitialiseStack+0x28>)
 800828e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008292:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008296:	f06f 0302 	mvn.w	r3, #2
 800829a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800829e:	3844      	subs	r0, #68	; 0x44
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	080081f9 	.word	0x080081f9
	...

080082b0 <SVC_Handler>:
	__asm volatile (
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <pxCurrentTCBConst2>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6808      	ldr	r0, [r1, #0]
 80082b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	f380 8809 	msr	PSP, r0
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8811 	msr	BASEPRI, r0
 80082ca:	4770      	bx	lr
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst2>:
 80082d0:	20000508 	.word	0x20000508

080082d4 <vPortEnterCritical>:
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
	uxCriticalNesting++;
 80082e8:	4a0b      	ldr	r2, [pc, #44]	; (8008318 <vPortEnterCritical+0x44>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d000      	beq.n	80082f6 <vPortEnterCritical+0x22>
}
 80082f4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <vPortEnterCritical+0x48>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082fe:	d0f9      	beq.n	80082f4 <vPortEnterCritical+0x20>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	b672      	cpsid	i
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	b662      	cpsie	i
 8008314:	e7fe      	b.n	8008314 <vPortEnterCritical+0x40>
 8008316:	bf00      	nop
 8008318:	20000048 	.word	0x20000048
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <vPortExitCritical+0x2c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	b953      	cbnz	r3, 800833c <vPortExitCritical+0x1c>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	e7fe      	b.n	800833a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800833c:	3b01      	subs	r3, #1
 800833e:	4a03      	ldr	r2, [pc, #12]	; (800834c <vPortExitCritical+0x2c>)
 8008340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008342:	b90b      	cbnz	r3, 8008348 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008344:	f383 8811 	msr	BASEPRI, r3
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20000048 	.word	0x20000048

08008350 <PendSV_Handler>:
	__asm volatile
 8008350:	f3ef 8009 	mrs	r0, PSP
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <pxCurrentTCBConst>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f01e 0f10 	tst.w	lr, #16
 8008360:	bf08      	it	eq
 8008362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008374:	b672      	cpsid	i
 8008376:	f380 8811 	msr	BASEPRI, r0
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	b662      	cpsie	i
 8008384:	f7ff fcf8 	bl	8007d78 <vTaskSwitchContext>
 8008388:	f04f 0000 	mov.w	r0, #0
 800838c:	f380 8811 	msr	BASEPRI, r0
 8008390:	bc09      	pop	{r0, r3}
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6808      	ldr	r0, [r1, #0]
 8008396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	f01e 0f10 	tst.w	lr, #16
 800839e:	bf08      	it	eq
 80083a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083a4:	f380 8809 	msr	PSP, r0
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <pxCurrentTCBConst>:
 80083b0:	20000508 	.word	0x20000508

080083b4 <SysTick_Handler>:
{
 80083b4:	b508      	push	{r3, lr}
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	b672      	cpsid	i
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80083ca:	f7ff fba3 	bl	8007b14 <xTaskIncrementTick>
 80083ce:	b118      	cbz	r0, 80083d8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083d0:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <SysTick_Handler+0x2c>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80083d8:	2300      	movs	r3, #0
 80083da:	f383 8811 	msr	BASEPRI, r3
}
 80083de:	bd08      	pop	{r3, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <vPortSetupTimerInterrupt+0x24>)
 80083e6:	2300      	movs	r3, #0
 80083e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083ea:	4908      	ldr	r1, [pc, #32]	; (800840c <vPortSetupTimerInterrupt+0x28>)
 80083ec:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ee:	4b08      	ldr	r3, [pc, #32]	; (8008410 <vPortSetupTimerInterrupt+0x2c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4908      	ldr	r1, [pc, #32]	; (8008414 <vPortSetupTimerInterrupt+0x30>)
 80083f4:	fba1 1303 	umull	r1, r3, r1, r3
 80083f8:	099b      	lsrs	r3, r3, #6
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4906      	ldr	r1, [pc, #24]	; (8008418 <vPortSetupTimerInterrupt+0x34>)
 80083fe:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008400:	2307      	movs	r3, #7
 8008402:	6013      	str	r3, [r2, #0]
}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	e000e010 	.word	0xe000e010
 800840c:	e000e018 	.word	0xe000e018
 8008410:	20000058 	.word	0x20000058
 8008414:	10624dd3 	.word	0x10624dd3
 8008418:	e000e014 	.word	0xe000e014

0800841c <xPortStartScheduler>:
{
 800841c:	b510      	push	{r4, lr}
 800841e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008420:	4b2c      	ldr	r3, [pc, #176]	; (80084d4 <xPortStartScheduler+0xb8>)
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	b2d2      	uxtb	r2, r2
 8008426:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008434:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800843c:	4a26      	ldr	r2, [pc, #152]	; (80084d8 <xPortStartScheduler+0xbc>)
 800843e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008440:	4b26      	ldr	r3, [pc, #152]	; (80084dc <xPortStartScheduler+0xc0>)
 8008442:	2207      	movs	r2, #7
 8008444:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008446:	e009      	b.n	800845c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8008448:	4a24      	ldr	r2, [pc, #144]	; (80084dc <xPortStartScheduler+0xc0>)
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	3b01      	subs	r3, #1
 800844e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008450:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800845c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008460:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008464:	d1f0      	bne.n	8008448 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008466:	4b1d      	ldr	r3, [pc, #116]	; (80084dc <xPortStartScheduler+0xc0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d00a      	beq.n	8008484 <xPortStartScheduler+0x68>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	e7fe      	b.n	8008482 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008484:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800848a:	4a14      	ldr	r2, [pc, #80]	; (80084dc <xPortStartScheduler+0xc0>)
 800848c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4a10      	ldr	r2, [pc, #64]	; (80084d4 <xPortStartScheduler+0xb8>)
 8008494:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008496:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <xPortStartScheduler+0xc4>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800849e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80084a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80084a8:	f7ff ff9c 	bl	80083e4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80084ac:	2400      	movs	r4, #0
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <xPortStartScheduler+0xc8>)
 80084b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80084b2:	f7ff fed9 	bl	8008268 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084b6:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <xPortStartScheduler+0xcc>)
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80084c0:	f7ff febe 	bl	8008240 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80084c4:	f7ff fc58 	bl	8007d78 <vTaskSwitchContext>
	prvTaskExitError();
 80084c8:	f7ff fe96 	bl	80081f8 <prvTaskExitError>
}
 80084cc:	4620      	mov	r0, r4
 80084ce:	b002      	add	sp, #8
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop
 80084d4:	e000e400 	.word	0xe000e400
 80084d8:	20000634 	.word	0x20000634
 80084dc:	20000638 	.word	0x20000638
 80084e0:	e000ed20 	.word	0xe000ed20
 80084e4:	20000048 	.word	0x20000048
 80084e8:	e000ef34 	.word	0xe000ef34

080084ec <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084ec:	4a12      	ldr	r2, [pc, #72]	; (8008538 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084ee:	f012 0f07 	tst.w	r2, #7
 80084f2:	d01e      	beq.n	8008532 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084f4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084fa:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80084fe:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008500:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008502:	480e      	ldr	r0, [pc, #56]	; (800853c <prvHeapInit+0x50>)
 8008504:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008506:	2100      	movs	r1, #0
 8008508:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800850a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800850c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800850e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8008512:	480b      	ldr	r0, [pc, #44]	; (8008540 <prvHeapInit+0x54>)
 8008514:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8008516:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008518:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800851a:	1a99      	subs	r1, r3, r2
 800851c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800851e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008520:	4b08      	ldr	r3, [pc, #32]	; (8008544 <prvHeapInit+0x58>)
 8008522:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008524:	4b08      	ldr	r3, [pc, #32]	; (8008548 <prvHeapInit+0x5c>)
 8008526:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008528:	4b08      	ldr	r3, [pc, #32]	; (800854c <prvHeapInit+0x60>)
 800852a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800852e:	601a      	str	r2, [r3, #0]
}
 8008530:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008532:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008536:	e7e4      	b.n	8008502 <prvHeapInit+0x16>
 8008538:	20000640 	.word	0x20000640
 800853c:	2000424c 	.word	0x2000424c
 8008540:	2000063c 	.word	0x2000063c
 8008544:	20004248 	.word	0x20004248
 8008548:	20004244 	.word	0x20004244
 800854c:	20004240 	.word	0x20004240

08008550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008550:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008552:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <prvInsertBlockIntoFreeList+0x50>)
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	4282      	cmp	r2, r0
 8008558:	d31b      	bcc.n	8008592 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800855a:	6859      	ldr	r1, [r3, #4]
 800855c:	185c      	adds	r4, r3, r1
 800855e:	4284      	cmp	r4, r0
 8008560:	d103      	bne.n	800856a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008562:	6840      	ldr	r0, [r0, #4]
 8008564:	4401      	add	r1, r0
 8008566:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008568:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800856a:	6841      	ldr	r1, [r0, #4]
 800856c:	1844      	adds	r4, r0, r1
 800856e:	42a2      	cmp	r2, r4
 8008570:	d113      	bne.n	800859a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008572:	4c0c      	ldr	r4, [pc, #48]	; (80085a4 <prvInsertBlockIntoFreeList+0x54>)
 8008574:	6824      	ldr	r4, [r4, #0]
 8008576:	42a2      	cmp	r2, r4
 8008578:	d00d      	beq.n	8008596 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800857a:	6852      	ldr	r2, [r2, #4]
 800857c:	4411      	add	r1, r2
 800857e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008586:	4298      	cmp	r0, r3
 8008588:	d000      	beq.n	800858c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800858a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800858c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008590:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008592:	4613      	mov	r3, r2
 8008594:	e7de      	b.n	8008554 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008596:	6004      	str	r4, [r0, #0]
 8008598:	e7f5      	b.n	8008586 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800859a:	6002      	str	r2, [r0, #0]
 800859c:	e7f3      	b.n	8008586 <prvInsertBlockIntoFreeList+0x36>
 800859e:	bf00      	nop
 80085a0:	2000424c 	.word	0x2000424c
 80085a4:	2000063c 	.word	0x2000063c

080085a8 <pvPortMalloc>:
{
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80085ac:	f7ff faaa 	bl	8007b04 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80085b0:	4b3d      	ldr	r3, [pc, #244]	; (80086a8 <pvPortMalloc+0x100>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	b1cb      	cbz	r3, 80085ea <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b6:	4b3d      	ldr	r3, [pc, #244]	; (80086ac <pvPortMalloc+0x104>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	421c      	tst	r4, r3
 80085bc:	d169      	bne.n	8008692 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 80085be:	b1bc      	cbz	r4, 80085f0 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 80085c0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c2:	f014 0f07 	tst.w	r4, #7
 80085c6:	d013      	beq.n	80085f0 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085c8:	f024 0407 	bic.w	r4, r4, #7
 80085cc:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ce:	f004 0307 	and.w	r3, r4, #7
 80085d2:	b16b      	cbz	r3, 80085f0 <pvPortMalloc+0x48>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	e7fe      	b.n	80085e8 <pvPortMalloc+0x40>
			prvHeapInit();
 80085ea:	f7ff ff7f 	bl	80084ec <prvHeapInit>
 80085ee:	e7e2      	b.n	80085b6 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	d050      	beq.n	8008696 <pvPortMalloc+0xee>
 80085f4:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <pvPortMalloc+0x108>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d34e      	bcc.n	800869a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 80085fc:	4b2d      	ldr	r3, [pc, #180]	; (80086b4 <pvPortMalloc+0x10c>)
 80085fe:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008600:	e001      	b.n	8008606 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8008602:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8008604:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008606:	686a      	ldr	r2, [r5, #4]
 8008608:	42a2      	cmp	r2, r4
 800860a:	d202      	bcs.n	8008612 <pvPortMalloc+0x6a>
 800860c:	682a      	ldr	r2, [r5, #0]
 800860e:	2a00      	cmp	r2, #0
 8008610:	d1f7      	bne.n	8008602 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8008612:	4a25      	ldr	r2, [pc, #148]	; (80086a8 <pvPortMalloc+0x100>)
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	42aa      	cmp	r2, r5
 8008618:	d041      	beq.n	800869e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861a:	681e      	ldr	r6, [r3, #0]
 800861c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800861e:	682a      	ldr	r2, [r5, #0]
 8008620:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008622:	686b      	ldr	r3, [r5, #4]
 8008624:	1b1b      	subs	r3, r3, r4
 8008626:	2b10      	cmp	r3, #16
 8008628:	d912      	bls.n	8008650 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800862a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800862c:	f010 0f07 	tst.w	r0, #7
 8008630:	d00a      	beq.n	8008648 <pvPortMalloc+0xa0>
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	b672      	cpsid	i
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	b662      	cpsie	i
 8008646:	e7fe      	b.n	8008646 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008648:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800864a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800864c:	f7ff ff80 	bl	8008550 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008650:	686a      	ldr	r2, [r5, #4]
 8008652:	4917      	ldr	r1, [pc, #92]	; (80086b0 <pvPortMalloc+0x108>)
 8008654:	680b      	ldr	r3, [r1, #0]
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800865a:	4917      	ldr	r1, [pc, #92]	; (80086b8 <pvPortMalloc+0x110>)
 800865c:	6809      	ldr	r1, [r1, #0]
 800865e:	428b      	cmp	r3, r1
 8008660:	d201      	bcs.n	8008666 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008662:	4915      	ldr	r1, [pc, #84]	; (80086b8 <pvPortMalloc+0x110>)
 8008664:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008666:	4b11      	ldr	r3, [pc, #68]	; (80086ac <pvPortMalloc+0x104>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4313      	orrs	r3, r2
 800866c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008672:	f7ff fadd 	bl	8007c30 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008676:	f016 0f07 	tst.w	r6, #7
 800867a:	d012      	beq.n	80086a2 <pvPortMalloc+0xfa>
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	b672      	cpsid	i
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	b662      	cpsie	i
 8008690:	e7fe      	b.n	8008690 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8008692:	2600      	movs	r6, #0
 8008694:	e7ed      	b.n	8008672 <pvPortMalloc+0xca>
 8008696:	2600      	movs	r6, #0
 8008698:	e7eb      	b.n	8008672 <pvPortMalloc+0xca>
 800869a:	2600      	movs	r6, #0
 800869c:	e7e9      	b.n	8008672 <pvPortMalloc+0xca>
 800869e:	2600      	movs	r6, #0
 80086a0:	e7e7      	b.n	8008672 <pvPortMalloc+0xca>
}
 80086a2:	4630      	mov	r0, r6
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	bf00      	nop
 80086a8:	2000063c 	.word	0x2000063c
 80086ac:	20004240 	.word	0x20004240
 80086b0:	20004244 	.word	0x20004244
 80086b4:	2000424c 	.word	0x2000424c
 80086b8:	20004248 	.word	0x20004248

080086bc <vPortFree>:
	if( pv != NULL )
 80086bc:	2800      	cmp	r0, #0
 80086be:	d034      	beq.n	800872a <vPortFree+0x6e>
{
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80086c4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80086cc:	4917      	ldr	r1, [pc, #92]	; (800872c <vPortFree+0x70>)
 80086ce:	6809      	ldr	r1, [r1, #0]
 80086d0:	420a      	tst	r2, r1
 80086d2:	d10a      	bne.n	80086ea <vPortFree+0x2e>
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	b672      	cpsid	i
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	b662      	cpsie	i
 80086e8:	e7fe      	b.n	80086e8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086ea:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80086ee:	b150      	cbz	r0, 8008706 <vPortFree+0x4a>
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	e7fe      	b.n	8008704 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008706:	ea22 0201 	bic.w	r2, r2, r1
 800870a:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800870e:	f7ff f9f9 	bl	8007b04 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008712:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008716:	4a06      	ldr	r2, [pc, #24]	; (8008730 <vPortFree+0x74>)
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	440b      	add	r3, r1
 800871c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800871e:	4628      	mov	r0, r5
 8008720:	f7ff ff16 	bl	8008550 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008724:	f7ff fa84 	bl	8007c30 <xTaskResumeAll>
}
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	4770      	bx	lr
 800872c:	20004240 	.word	0x20004240
 8008730:	20004244 	.word	0x20004244

08008734 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008734:	b500      	push	{lr}
 8008736:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8008738:	2300      	movs	r3, #0
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8008742:	4829      	ldr	r0, [pc, #164]	; (80087e8 <MX_ADC3_Init+0xb4>)
 8008744:	4a29      	ldr	r2, [pc, #164]	; (80087ec <MX_ADC3_Init+0xb8>)
 8008746:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800874c:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800874e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8008750:	2201      	movs	r2, #1
 8008752:	6102      	str	r2, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008754:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008756:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800875a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 800875e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8008760:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
 8008764:	6281      	str	r1, [r0, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008766:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 4;
 8008768:	2104      	movs	r1, #4
 800876a:	61c1      	str	r1, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800876c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008770:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008772:	f7f9 fcf7 	bl	8002164 <HAL_ADC_Init>
 8008776:	bb40      	cbnz	r0, 80087ca <MX_ADC3_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008778:	2300      	movs	r3, #0
 800877a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800877c:	2301      	movs	r3, #1
 800877e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8008780:	2306      	movs	r3, #6
 8008782:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008784:	4669      	mov	r1, sp
 8008786:	4818      	ldr	r0, [pc, #96]	; (80087e8 <MX_ADC3_Init+0xb4>)
 8008788:	f7f9 ff52 	bl	8002630 <HAL_ADC_ConfigChannel>
 800878c:	bb00      	cbnz	r0, 80087d0 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800878e:	2306      	movs	r3, #6
 8008790:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008792:	2302      	movs	r3, #2
 8008794:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008796:	4669      	mov	r1, sp
 8008798:	4813      	ldr	r0, [pc, #76]	; (80087e8 <MX_ADC3_Init+0xb4>)
 800879a:	f7f9 ff49 	bl	8002630 <HAL_ADC_ConfigChannel>
 800879e:	b9d0      	cbnz	r0, 80087d6 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80087a0:	2307      	movs	r3, #7
 80087a2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80087a4:	2303      	movs	r3, #3
 80087a6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80087a8:	4669      	mov	r1, sp
 80087aa:	480f      	ldr	r0, [pc, #60]	; (80087e8 <MX_ADC3_Init+0xb4>)
 80087ac:	f7f9 ff40 	bl	8002630 <HAL_ADC_ConfigChannel>
 80087b0:	b9a0      	cbnz	r0, 80087dc <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80087b2:	2308      	movs	r3, #8
 80087b4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80087b6:	2304      	movs	r3, #4
 80087b8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80087ba:	4669      	mov	r1, sp
 80087bc:	480a      	ldr	r0, [pc, #40]	; (80087e8 <MX_ADC3_Init+0xb4>)
 80087be:	f7f9 ff37 	bl	8002630 <HAL_ADC_ConfigChannel>
 80087c2:	b970      	cbnz	r0, 80087e2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
  }

}
 80087c4:	b005      	add	sp, #20
 80087c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80087ca:	f000 ff49 	bl	8009660 <Error_Handler>
 80087ce:	e7d3      	b.n	8008778 <MX_ADC3_Init+0x44>
    Error_Handler();
 80087d0:	f000 ff46 	bl	8009660 <Error_Handler>
 80087d4:	e7db      	b.n	800878e <MX_ADC3_Init+0x5a>
    Error_Handler();
 80087d6:	f000 ff43 	bl	8009660 <Error_Handler>
 80087da:	e7e1      	b.n	80087a0 <MX_ADC3_Init+0x6c>
    Error_Handler();
 80087dc:	f000 ff40 	bl	8009660 <Error_Handler>
 80087e0:	e7e7      	b.n	80087b2 <MX_ADC3_Init+0x7e>
    Error_Handler();
 80087e2:	f000 ff3d 	bl	8009660 <Error_Handler>
}
 80087e6:	e7ed      	b.n	80087c4 <MX_ADC3_Init+0x90>
 80087e8:	20004534 	.word	0x20004534
 80087ec:	40012200 	.word	0x40012200

080087f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80087f0:	b530      	push	{r4, r5, lr}
 80087f2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f4:	2300      	movs	r3, #0
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	9306      	str	r3, [sp, #24]
 80087fe:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC3)
 8008800:	6802      	ldr	r2, [r0, #0]
 8008802:	4b2f      	ldr	r3, [pc, #188]	; (80088c0 <HAL_ADC_MspInit+0xd0>)
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8008808:	b009      	add	sp, #36	; 0x24
 800880a:	bd30      	pop	{r4, r5, pc}
 800880c:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 800880e:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8008812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
 800881a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008820:	9200      	str	r2, [sp, #0]
 8008822:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008826:	f042 0220 	orr.w	r2, r2, #32
 800882a:	631a      	str	r2, [r3, #48]	; 0x30
 800882c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800882e:	f002 0220 	and.w	r2, r2, #32
 8008832:	9201      	str	r2, [sp, #4]
 8008834:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008838:	f042 0201 	orr.w	r2, r2, #1
 800883c:	631a      	str	r2, [r3, #48]	; 0x30
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	9302      	str	r3, [sp, #8]
 8008846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 8008848:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800884c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800884e:	2503      	movs	r5, #3
 8008850:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008852:	a903      	add	r1, sp, #12
 8008854:	481b      	ldr	r0, [pc, #108]	; (80088c4 <HAL_ADC_MspInit+0xd4>)
 8008856:	f7fa fc59 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 800885a:	2301      	movs	r3, #1
 800885c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800885e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008860:	2500      	movs	r5, #0
 8008862:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8008864:	a903      	add	r1, sp, #12
 8008866:	4818      	ldr	r0, [pc, #96]	; (80088c8 <HAL_ADC_MspInit+0xd8>)
 8008868:	f7fa fc50 	bl	800310c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800886c:	4817      	ldr	r0, [pc, #92]	; (80088cc <HAL_ADC_MspInit+0xdc>)
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <HAL_ADC_MspInit+0xe0>)
 8008870:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008872:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008876:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008878:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800887a:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800887c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008880:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008886:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800888c:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800888e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008892:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8008894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008898:	6203      	str	r3, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800889a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800889c:	f7fa f8e2 	bl	8002a64 <HAL_DMA_Init>
 80088a0:	b958      	cbnz	r0, 80088ba <HAL_ADC_MspInit+0xca>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <HAL_ADC_MspInit+0xdc>)
 80088a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80088a6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80088a8:	2200      	movs	r2, #0
 80088aa:	2105      	movs	r1, #5
 80088ac:	2012      	movs	r0, #18
 80088ae:	f7f9 ffa9 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80088b2:	2012      	movs	r0, #18
 80088b4:	f7f9 ffd8 	bl	8002868 <HAL_NVIC_EnableIRQ>
}
 80088b8:	e7a6      	b.n	8008808 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80088ba:	f000 fed1 	bl	8009660 <Error_Handler>
 80088be:	e7f0      	b.n	80088a2 <HAL_ADC_MspInit+0xb2>
 80088c0:	40012200 	.word	0x40012200
 80088c4:	40021400 	.word	0x40021400
 80088c8:	40020000 	.word	0x40020000
 80088cc:	200044d4 	.word	0x200044d4
 80088d0:	40026428 	.word	0x40026428

080088d4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80088d4:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 80088d6:	4808      	ldr	r0, [pc, #32]	; (80088f8 <MX_CRC_Init+0x24>)
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <MX_CRC_Init+0x28>)
 80088da:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80088dc:	2300      	movs	r3, #0
 80088de:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80088e0:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80088e2:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80088e4:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80088e6:	2301      	movs	r3, #1
 80088e8:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80088ea:	f7f9 ffcb 	bl	8002884 <HAL_CRC_Init>
 80088ee:	b900      	cbnz	r0, 80088f2 <MX_CRC_Init+0x1e>
  {
    Error_Handler();
  }

}
 80088f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80088f2:	f000 feb5 	bl	8009660 <Error_Handler>
}
 80088f6:	e7fb      	b.n	80088f0 <MX_CRC_Init+0x1c>
 80088f8:	2000457c 	.word	0x2000457c
 80088fc:	40023000 	.word	0x40023000

08008900 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8008900:	6802      	ldr	r2, [r0, #0]
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <HAL_CRC_MspInit+0x28>)
 8008904:	429a      	cmp	r2, r3
 8008906:	d000      	beq.n	800890a <HAL_CRC_MspInit+0xa>
 8008908:	4770      	bx	lr
{
 800890a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008912:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008916:	631a      	str	r2, [r3, #48]	; 0x30
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008922:	b002      	add	sp, #8
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40023000 	.word	0x40023000

0800892c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800892c:	b500      	push	{lr}
 800892e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <MX_DMA_Init+0x30>)
 8008932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008934:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008938:	631a      	str	r2, [r3, #48]	; 0x30
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008944:	2200      	movs	r2, #0
 8008946:	2105      	movs	r1, #5
 8008948:	2039      	movs	r0, #57	; 0x39
 800894a:	f7f9 ff5b 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800894e:	2039      	movs	r0, #57	; 0x39
 8008950:	f7f9 ff8a 	bl	8002868 <HAL_NVIC_EnableIRQ>

}
 8008954:	b003      	add	sp, #12
 8008956:	f85d fb04 	ldr.w	pc, [sp], #4
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800

08008960 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8008960:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 8008962:	480d      	ldr	r0, [pc, #52]	; (8008998 <MX_DMA2D_Init+0x38>)
 8008964:	4b0d      	ldr	r3, [pc, #52]	; (800899c <MX_DMA2D_Init+0x3c>)
 8008966:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8008968:	2300      	movs	r3, #0
 800896a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800896c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 800896e:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8008970:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008972:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008974:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8008976:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008978:	f7fa fa7c 	bl	8002e74 <HAL_DMA2D_Init>
 800897c:	b928      	cbnz	r0, 800898a <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800897e:	2101      	movs	r1, #1
 8008980:	4805      	ldr	r0, [pc, #20]	; (8008998 <MX_DMA2D_Init+0x38>)
 8008982:	f7fa fb61 	bl	8003048 <HAL_DMA2D_ConfigLayer>
 8008986:	b918      	cbnz	r0, 8008990 <MX_DMA2D_Init+0x30>
  {
    Error_Handler();
  }

}
 8008988:	bd08      	pop	{r3, pc}
    Error_Handler();
 800898a:	f000 fe69 	bl	8009660 <Error_Handler>
 800898e:	e7f6      	b.n	800897e <MX_DMA2D_Init+0x1e>
    Error_Handler();
 8008990:	f000 fe66 	bl	8009660 <Error_Handler>
}
 8008994:	e7f8      	b.n	8008988 <MX_DMA2D_Init+0x28>
 8008996:	bf00      	nop
 8008998:	200045a0 	.word	0x200045a0
 800899c:	4002b000 	.word	0x4002b000

080089a0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <HAL_DMA2D_MspInit+0x28>)
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d000      	beq.n	80089aa <HAL_DMA2D_MspInit+0xa>
 80089a8:	4770      	bx	lr
{
 80089aa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80089ac:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 80089b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80089c2:	b002      	add	sp, #8
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	4002b000 	.word	0x4002b000

080089cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80089cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ce:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d0:	2300      	movs	r3, #0
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	9302      	str	r3, [sp, #8]
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <HAL_FMC_MspInit+0xa8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	b10b      	cbz	r3, 80089e6 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80089e2:	b007      	add	sp, #28
 80089e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80089e6:	4b23      	ldr	r3, [pc, #140]	; (8008a74 <HAL_FMC_MspInit+0xa8>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80089ec:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <HAL_FMC_MspInit+0xac>)
 80089ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f0:	f042 0201 	orr.w	r2, r2, #1
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8008a00:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008a04:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a06:	2602      	movs	r6, #2
 8008a08:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a0a:	2503      	movs	r5, #3
 8008a0c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a0e:	240c      	movs	r4, #12
 8008a10:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a12:	a901      	add	r1, sp, #4
 8008a14:	4819      	ldr	r0, [pc, #100]	; (8008a7c <HAL_FMC_MspInit+0xb0>)
 8008a16:	f7fa fb79 	bl	800310c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8008a1a:	f248 1311 	movw	r3, #33041	; 0x8111
 8008a1e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a20:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a22:	2700      	movs	r7, #0
 8008a24:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a26:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a28:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a2a:	a901      	add	r1, sp, #4
 8008a2c:	4814      	ldr	r0, [pc, #80]	; (8008a80 <HAL_FMC_MspInit+0xb4>)
 8008a2e:	f7fa fb6d 	bl	800310c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8008a32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008a36:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a38:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a3c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a3e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a40:	a901      	add	r1, sp, #4
 8008a42:	4810      	ldr	r0, [pc, #64]	; (8008a84 <HAL_FMC_MspInit+0xb8>)
 8008a44:	f7fa fb62 	bl	800310c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008a48:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008a4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a4e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a50:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a52:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a54:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008a56:	a901      	add	r1, sp, #4
 8008a58:	480b      	ldr	r0, [pc, #44]	; (8008a88 <HAL_FMC_MspInit+0xbc>)
 8008a5a:	f7fa fb57 	bl	800310c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8008a5e:	232c      	movs	r3, #44	; 0x2c
 8008a60:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a62:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a64:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a66:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a68:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a6a:	a901      	add	r1, sp, #4
 8008a6c:	4807      	ldr	r0, [pc, #28]	; (8008a8c <HAL_FMC_MspInit+0xc0>)
 8008a6e:	f7fa fb4d 	bl	800310c <HAL_GPIO_Init>
 8008a72:	e7b6      	b.n	80089e2 <HAL_FMC_MspInit+0x16>
 8008a74:	20004254 	.word	0x20004254
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	40021000 	.word	0x40021000
 8008a80:	40021800 	.word	0x40021800
 8008a84:	40020c00 	.word	0x40020c00
 8008a88:	40021400 	.word	0x40021400
 8008a8c:	40021c00 	.word	0x40021c00

08008a90 <MX_FMC_Init>:
{
 8008a90:	b500      	push	{lr}
 8008a92:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008a94:	4810      	ldr	r0, [pc, #64]	; (8008ad8 <MX_FMC_Init+0x48>)
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <MX_FMC_Init+0x4c>)
 8008a98:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008a9e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8008aa0:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8008aa6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008aa8:	2180      	movs	r1, #128	; 0x80
 8008aaa:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008aac:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008aae:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008ab0:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008ab2:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8008ab4:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008ab6:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008ab8:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8008aba:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008abc:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 8008abe:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 8008ac0:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008ac2:	a901      	add	r1, sp, #4
 8008ac4:	f7fb ffee 	bl	8004aa4 <HAL_SDRAM_Init>
 8008ac8:	b910      	cbnz	r0, 8008ad0 <MX_FMC_Init+0x40>
}
 8008aca:	b009      	add	sp, #36	; 0x24
 8008acc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8008ad0:	f000 fdc6 	bl	8009660 <Error_Handler>
}
 8008ad4:	e7f9      	b.n	8008aca <MX_FMC_Init+0x3a>
 8008ad6:	bf00      	nop
 8008ad8:	200045e0 	.word	0x200045e0
 8008adc:	a0000140 	.word	0xa0000140

08008ae0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008ae2:	f7ff ff73 	bl	80089cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008ae6:	bd08      	pop	{r3, pc}

08008ae8 <StartDrawUI>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDrawUI */
void StartDrawUI(void const * argument)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32

  /* USER CODE BEGIN StartDrawUI */

	initLCD();
 8008aec:	f7f8 ff90 	bl	8001a10 <initLCD>

	/* Infinite loop */
	for (;;) {
		xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008af0:	4f19      	ldr	r7, [pc, #100]	; (8008b58 <StartDrawUI+0x70>)
 8008af2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008af6:	6838      	ldr	r0, [r7, #0]
 8008af8:	f7fe fd48 	bl	800758c <xQueueSemaphoreTake>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008afc:	4e17      	ldr	r6, [pc, #92]	; (8008b5c <StartDrawUI+0x74>)
 8008afe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b02:	6830      	ldr	r0, [r6, #0]
 8008b04:	f7fe fd42 	bl	800758c <xQueueSemaphoreTake>
		drawMainScreen(GPS, IMU, Misc);
 8008b08:	4c15      	ldr	r4, [pc, #84]	; (8008b60 <StartDrawUI+0x78>)
 8008b0a:	4b16      	ldr	r3, [pc, #88]	; (8008b64 <StartDrawUI+0x7c>)
 8008b0c:	881a      	ldrh	r2, [r3, #0]
 8008b0e:	789b      	ldrb	r3, [r3, #2]
 8008b10:	f8ad 201c 	strh.w	r2, [sp, #28]
 8008b14:	f88d 301e 	strb.w	r3, [sp, #30]
 8008b18:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <StartDrawUI+0x80>)
 8008b1a:	ad03      	add	r5, sp, #12
 8008b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008b22:	f104 0310 	add.w	r3, r4, #16
 8008b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008b2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b32:	f7f9 f86d 	bl	8001c10 <drawMainScreen>
		xSemaphoreGive(RxDataMutexHandle);
 8008b36:	2300      	movs	r3, #0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6838      	ldr	r0, [r7, #0]
 8008b3e:	f7fe fc47 	bl	80073d0 <xQueueGenericSend>
		xSemaphoreGive(SwDataMutexHandle);
 8008b42:	2300      	movs	r3, #0
 8008b44:	461a      	mov	r2, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	6830      	ldr	r0, [r6, #0]
 8008b4a:	f7fe fc41 	bl	80073d0 <xQueueGenericSend>
		osDelay(20);
 8008b4e:	2014      	movs	r0, #20
 8008b50:	f7fe fad9 	bl	8007106 <osDelay>
 8008b54:	e7cc      	b.n	8008af0 <StartDrawUI+0x8>
 8008b56:	bf00      	nop
 8008b58:	200046b4 	.word	0x200046b4
 8008b5c:	200046e0 	.word	0x200046e0
 8008b60:	20004324 	.word	0x20004324
 8008b64:	20004354 	.word	0x20004354
 8008b68:	200042dc 	.word	0x200042dc

08008b6c <StartADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADC */
void StartADC(void const * argument)
{
 8008b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartADC */

	//	//Init ADC for DMA
	if (HAL_ADC_Start(&hadc3) == HAL_OK) {
 8008b6e:	481b      	ldr	r0, [pc, #108]	; (8008bdc <StartADC+0x70>)
 8008b70:	f7f9 fb24 	bl	80021bc <HAL_ADC_Start>
 8008b74:	b9c8      	cbnz	r0, 8008baa <StartADC+0x3e>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t *) adcArray, 4);
 8008b76:	2204      	movs	r2, #4
 8008b78:	4919      	ldr	r1, [pc, #100]	; (8008be0 <StartADC+0x74>)
 8008b7a:	4818      	ldr	r0, [pc, #96]	; (8008bdc <StartADC+0x70>)
 8008b7c:	f7f9 fbb0 	bl	80022e0 <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim1);
 8008b80:	4818      	ldr	r0, [pc, #96]	; (8008be4 <StartADC+0x78>)
 8008b82:	f7fc fc99 	bl	80054b8 <HAL_TIM_Base_Start>
 8008b86:	e010      	b.n	8008baa <StartADC+0x3e>
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
			Misc.airmode = 1;
 8008b88:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <StartADC+0x7c>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	709a      	strb	r2, [r3, #2]
 8008b8e:	e01b      	b.n	8008bc8 <StartADC+0x5c>

		//SW2 - Kill switch
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
			Misc.kill = 1;
		} else {
			Misc.kill = 0;
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <StartADC+0x7c>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	705a      	strb	r2, [r3, #1]
		}
		xSemaphoreGive(SwDataMutexHandle);
 8008b96:	2300      	movs	r3, #0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4813      	ldr	r0, [pc, #76]	; (8008bec <StartADC+0x80>)
 8008b9e:	6800      	ldr	r0, [r0, #0]
 8008ba0:	f7fe fc16 	bl	80073d0 <xQueueGenericSend>
		osDelay(50);
 8008ba4:	2032      	movs	r0, #50	; 0x32
 8008ba6:	f7fe faae 	bl	8007106 <osDelay>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008baa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <StartADC+0x80>)
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f7fe fceb 	bl	800758c <xQueueSemaphoreTake>
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	480d      	ldr	r0, [pc, #52]	; (8008bf0 <StartADC+0x84>)
 8008bba:	f7fa fb97 	bl	80032ec <HAL_GPIO_ReadPin>
 8008bbe:	2801      	cmp	r0, #1
 8008bc0:	d0e2      	beq.n	8008b88 <StartADC+0x1c>
			Misc.airmode = 0;
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <StartADC+0x7c>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	709a      	strb	r2, [r3, #2]
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
 8008bc8:	2101      	movs	r1, #1
 8008bca:	4809      	ldr	r0, [pc, #36]	; (8008bf0 <StartADC+0x84>)
 8008bcc:	f7fa fb8e 	bl	80032ec <HAL_GPIO_ReadPin>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d1dd      	bne.n	8008b90 <StartADC+0x24>
			Misc.kill = 1;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <StartADC+0x7c>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	705a      	strb	r2, [r3, #1]
 8008bda:	e7dc      	b.n	8008b96 <StartADC+0x2a>
 8008bdc:	20004534 	.word	0x20004534
 8008be0:	20004698 	.word	0x20004698
 8008be4:	20004830 	.word	0x20004830
 8008be8:	20004354 	.word	0x20004354
 8008bec:	200046e0 	.word	0x200046e0
 8008bf0:	40022000 	.word	0x40022000

08008bf4 <NRF24_init>:
char AckPayload[32];

void packData(uint32_t * array, bool airmode, bool kill);
void unpackAckPayload(struct GPS_str GPS, struct IMU_str IMU);

void NRF24_init() {
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	b09c      	sub	sp, #112	; 0x70

	DWT_Init(); //For uS delays
 8008bf8:	f7f9 f9b6 	bl	8001f68 <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, none);
 8008bfc:	4c14      	ldr	r4, [pc, #80]	; (8008c50 <NRF24_init+0x5c>)
 8008bfe:	2260      	movs	r2, #96	; 0x60
 8008c00:	1d21      	adds	r1, r4, #4
 8008c02:	4668      	mov	r0, sp
 8008c04:	f000 ffb2 	bl	8009b6c <memcpy>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c12:	4810      	ldr	r0, [pc, #64]	; (8008c54 <NRF24_init+0x60>)
 8008c14:	f7f8 fe14 	bl	8001840 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 8008c18:	4c0f      	ldr	r4, [pc, #60]	; (8008c58 <NRF24_init+0x64>)
 8008c1a:	2270      	movs	r2, #112	; 0x70
 8008c1c:	f104 0110 	add.w	r1, r4, #16
 8008c20:	4668      	mov	r0, sp
 8008c22:	f000 ffa3 	bl	8009b6c <memcpy>
 8008c26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c2a:	f7f8 fedf 	bl	80019ec <nrf24_DebugUART_Init>

	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 8008c2e:	f7f8 fc3a 	bl	80014a6 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <NRF24_init+0x68>)
 8008c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c38:	f7f8 fc3e 	bl	80014b8 <NRF24_openWritingPipe>

	//printRadioSettings();

	for (int i = 0; i < 31; ++i) {
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e003      	b.n	8008c48 <NRF24_init+0x54>
		TxData[i] = 0;
 8008c40:	4a07      	ldr	r2, [pc, #28]	; (8008c60 <NRF24_init+0x6c>)
 8008c42:	2100      	movs	r1, #0
 8008c44:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 31; ++i) {
 8008c46:	3301      	adds	r3, #1
 8008c48:	2b1e      	cmp	r3, #30
 8008c4a:	ddf9      	ble.n	8008c40 <NRF24_init+0x4c>
	}
}
 8008c4c:	b01c      	add	sp, #112	; 0x70
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	20004634 	.word	0x20004634
 8008c54:	40020000 	.word	0x40020000
 8008c58:	20004870 	.word	0x20004870
 8008c5c:	20000050 	.word	0x20000050
 8008c60:	200046bc 	.word	0x200046bc

08008c64 <sendPayload>:

bool sendPayload() {
 8008c64:	b510      	push	{r4, lr}

	//Transmit payload to drone
	if (NRF24_write(TxData, 32)) {
 8008c66:	2120      	movs	r1, #32
 8008c68:	4805      	ldr	r0, [pc, #20]	; (8008c80 <sendPayload+0x1c>)
 8008c6a:	f7f8 fd71 	bl	8001750 <NRF24_write>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	b908      	cbnz	r0, 8008c76 <sendPayload+0x12>
		return 1;
	} else {
		return 0;
	}

}
 8008c72:	4620      	mov	r0, r4
 8008c74:	bd10      	pop	{r4, pc}
		NRF24_read(AckPayload, 32);
 8008c76:	2120      	movs	r1, #32
 8008c78:	4802      	ldr	r0, [pc, #8]	; (8008c84 <sendPayload+0x20>)
 8008c7a:	f7f8 fc86 	bl	800158a <NRF24_read>
		return 1;
 8008c7e:	e7f8      	b.n	8008c72 <sendPayload+0xe>
 8008c80:	200046bc 	.word	0x200046bc
 8008c84:	20004614 	.word	0x20004614

08008c88 <packData>:

void packData(uint32_t * array, bool airmode, bool kill) {
 8008c88:	b410      	push	{r4}

	//L Joystick X
	//First byte = first byte of A0
	TxData[0] = *array;
 8008c8a:	6804      	ldr	r4, [r0, #0]
 8008c8c:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <packData+0x5c>)
 8008c8e:	701c      	strb	r4, [r3, #0]
	//Second bytes = last byte of A0
	TxData[1] = *array >> 8;
 8008c90:	6804      	ldr	r4, [r0, #0]
 8008c92:	0a24      	lsrs	r4, r4, #8
 8008c94:	705c      	strb	r4, [r3, #1]

	array++;

	TxData[2] = *array;
 8008c96:	6844      	ldr	r4, [r0, #4]
 8008c98:	709c      	strb	r4, [r3, #2]
	TxData[3] = *array >> 8;
 8008c9a:	0a24      	lsrs	r4, r4, #8
 8008c9c:	70dc      	strb	r4, [r3, #3]

	array++;

	TxData[4] = *array;
 8008c9e:	6884      	ldr	r4, [r0, #8]
 8008ca0:	711c      	strb	r4, [r3, #4]
	TxData[5] = *array >> 8;
 8008ca2:	0a24      	lsrs	r4, r4, #8
 8008ca4:	715c      	strb	r4, [r3, #5]

	array++;

	TxData[6] = *array;
 8008ca6:	68c0      	ldr	r0, [r0, #12]
 8008ca8:	7198      	strb	r0, [r3, #6]
	TxData[7] = *array >> 8;
 8008caa:	0a00      	lsrs	r0, r0, #8
 8008cac:	71d8      	strb	r0, [r3, #7]

	//Air mode bit
	if (airmode) {
 8008cae:	b169      	cbz	r1, 8008ccc <packData+0x44>
		TxData[8] |= 1 << 0;
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	7a1b      	ldrb	r3, [r3, #8]
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	720b      	strb	r3, [r1, #8]
	} else {
		TxData[8] &= ~(1 << 0);
	}

	//Kill switch
	if (kill) {
 8008cba:	b96a      	cbnz	r2, 8008cd8 <packData+0x50>

		TxData[8] |= 1 << 1;
	} else {
		TxData[8] &= ~(1 << 1);
 8008cbc:	4a09      	ldr	r2, [pc, #36]	; (8008ce4 <packData+0x5c>)
 8008cbe:	7a13      	ldrb	r3, [r2, #8]
 8008cc0:	f023 0302 	bic.w	r3, r3, #2
 8008cc4:	7213      	strb	r3, [r2, #8]
//	TxData[12] = roll_i_tx >> 8;
//
//	TxData[13] = roll_d_tx;
//	TxData[14] = roll_d_tx >> 8;

}
 8008cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cca:	4770      	bx	lr
		TxData[8] &= ~(1 << 0);
 8008ccc:	4905      	ldr	r1, [pc, #20]	; (8008ce4 <packData+0x5c>)
 8008cce:	7a0b      	ldrb	r3, [r1, #8]
 8008cd0:	f023 0301 	bic.w	r3, r3, #1
 8008cd4:	720b      	strb	r3, [r1, #8]
 8008cd6:	e7f0      	b.n	8008cba <packData+0x32>
		TxData[8] |= 1 << 1;
 8008cd8:	4a02      	ldr	r2, [pc, #8]	; (8008ce4 <packData+0x5c>)
 8008cda:	7a13      	ldrb	r3, [r2, #8]
 8008cdc:	f043 0302 	orr.w	r3, r3, #2
 8008ce0:	7213      	strb	r3, [r2, #8]
 8008ce2:	e7f0      	b.n	8008cc6 <packData+0x3e>
 8008ce4:	200046bc 	.word	0x200046bc

08008ce8 <startNRFTX>:
{
 8008ce8:	b508      	push	{r3, lr}
	NRF24_init();
 8008cea:	f7ff ff83 	bl	8008bf4 <NRF24_init>
 8008cee:	e002      	b.n	8008cf6 <startNRFTX+0xe>
		osDelay(1);
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f7fe fa08 	bl	8007106 <osDelay>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008cf6:	4d12      	ldr	r5, [pc, #72]	; (8008d40 <startNRFTX+0x58>)
 8008cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cfc:	6828      	ldr	r0, [r5, #0]
 8008cfe:	f7fe fc45 	bl	800758c <xQueueSemaphoreTake>
		packData(adcArray, Misc.airmode, Misc.kill);
 8008d02:	4c10      	ldr	r4, [pc, #64]	; (8008d44 <startNRFTX+0x5c>)
 8008d04:	7862      	ldrb	r2, [r4, #1]
 8008d06:	78a1      	ldrb	r1, [r4, #2]
 8008d08:	480f      	ldr	r0, [pc, #60]	; (8008d48 <startNRFTX+0x60>)
 8008d0a:	f7ff ffbd 	bl	8008c88 <packData>
		xSemaphoreGive(SwDataMutexHandle);
 8008d0e:	2300      	movs	r3, #0
 8008d10:	461a      	mov	r2, r3
 8008d12:	4619      	mov	r1, r3
 8008d14:	6828      	ldr	r0, [r5, #0]
 8008d16:	f7fe fb5b 	bl	80073d0 <xQueueGenericSend>
		Misc.connection = sendPayload();
 8008d1a:	f7ff ffa3 	bl	8008c64 <sendPayload>
 8008d1e:	7020      	strb	r0, [r4, #0]
		if (Misc.connection) {
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0e5      	beq.n	8008cf0 <startNRFTX+0x8>
			xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008d24:	4c09      	ldr	r4, [pc, #36]	; (8008d4c <startNRFTX+0x64>)
 8008d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d2a:	6820      	ldr	r0, [r4, #0]
 8008d2c:	f7fe fc2e 	bl	800758c <xQueueSemaphoreTake>
			xSemaphoreGive(RxDataMutexHandle);
 8008d30:	2300      	movs	r3, #0
 8008d32:	461a      	mov	r2, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	6820      	ldr	r0, [r4, #0]
 8008d38:	f7fe fb4a 	bl	80073d0 <xQueueGenericSend>
 8008d3c:	e7d8      	b.n	8008cf0 <startNRFTX+0x8>
 8008d3e:	bf00      	nop
 8008d40:	200046e0 	.word	0x200046e0
 8008d44:	20004354 	.word	0x20004354
 8008d48:	20004698 	.word	0x20004698
 8008d4c:	200046b4 	.word	0x200046b4

08008d50 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	b093      	sub	sp, #76	; 0x4c
  osMutexDef(RxDataMutex);
 8008d54:	2700      	movs	r7, #0
 8008d56:	a812      	add	r0, sp, #72	; 0x48
 8008d58:	f840 7d04 	str.w	r7, [r0, #-4]!
  RxDataMutexHandle = osMutexCreate(osMutex(RxDataMutex));
 8008d5c:	f7fe f9dc 	bl	8007118 <osMutexCreate>
 8008d60:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <MX_FREERTOS_Init+0x74>)
 8008d62:	6018      	str	r0, [r3, #0]
  osMutexDef(SwDataMutex);
 8008d64:	a812      	add	r0, sp, #72	; 0x48
 8008d66:	f840 7d08 	str.w	r7, [r0, #-8]!
  SwDataMutexHandle = osMutexCreate(osMutex(SwDataMutex));
 8008d6a:	f7fe f9d5 	bl	8007118 <osMutexCreate>
 8008d6e:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <MX_FREERTOS_Init+0x78>)
 8008d70:	6018      	str	r0, [r3, #0]
  osThreadDef(DrawUI, StartDrawUI, osPriorityNormal, 0, 128);
 8008d72:	4c16      	ldr	r4, [pc, #88]	; (8008dcc <MX_FREERTOS_Init+0x7c>)
 8008d74:	ad0b      	add	r5, sp, #44	; 0x2c
 8008d76:	4626      	mov	r6, r4
 8008d78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	602b      	str	r3, [r5, #0]
  DrawUIHandle = osThreadCreate(osThread(DrawUI), NULL);
 8008d80:	4639      	mov	r1, r7
 8008d82:	a80b      	add	r0, sp, #44	; 0x2c
 8008d84:	f7fe f9a5 	bl	80070d2 <osThreadCreate>
 8008d88:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <MX_FREERTOS_Init+0x80>)
 8008d8a:	6018      	str	r0, [r3, #0]
  osThreadDef(NRFTX, startNRFTX, osPriorityNormal, 0, 128);
 8008d8c:	ad06      	add	r5, sp, #24
 8008d8e:	f104 0614 	add.w	r6, r4, #20
 8008d92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d96:	6833      	ldr	r3, [r6, #0]
 8008d98:	602b      	str	r3, [r5, #0]
  NRFTXHandle = osThreadCreate(osThread(NRFTX), NULL);
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	a806      	add	r0, sp, #24
 8008d9e:	f7fe f998 	bl	80070d2 <osThreadCreate>
 8008da2:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <MX_FREERTOS_Init+0x84>)
 8008da4:	6018      	str	r0, [r3, #0]
  osThreadDef(ADC, StartADC, osPriorityLow, 0, 128);
 8008da6:	ad01      	add	r5, sp, #4
 8008da8:	3428      	adds	r4, #40	; 0x28
 8008daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	602b      	str	r3, [r5, #0]
  ADCHandle = osThreadCreate(osThread(ADC), NULL);
 8008db2:	4639      	mov	r1, r7
 8008db4:	a801      	add	r0, sp, #4
 8008db6:	f7fe f98c 	bl	80070d2 <osThreadCreate>
 8008dba:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <MX_FREERTOS_Init+0x88>)
 8008dbc:	6018      	str	r0, [r3, #0]
}
 8008dbe:	b013      	add	sp, #76	; 0x4c
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	200046b4 	.word	0x200046b4
 8008dc8:	200046e0 	.word	0x200046e0
 8008dcc:	0800d680 	.word	0x0800d680
 8008dd0:	200046a8 	.word	0x200046a8
 8008dd4:	200046b0 	.word	0x200046b0
 8008dd8:	200046dc 	.word	0x200046dc

08008ddc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de0:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de2:	2400      	movs	r4, #0
 8008de4:	940b      	str	r4, [sp, #44]	; 0x2c
 8008de6:	940c      	str	r4, [sp, #48]	; 0x30
 8008de8:	940d      	str	r4, [sp, #52]	; 0x34
 8008dea:	940e      	str	r4, [sp, #56]	; 0x38
 8008dec:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008dee:	4b5e      	ldr	r3, [pc, #376]	; (8008f68 <MX_GPIO_Init+0x18c>)
 8008df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df2:	f042 0210 	orr.w	r2, r2, #16
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30
 8008df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfa:	f002 0210 	and.w	r2, r2, #16
 8008dfe:	9200      	str	r2, [sp, #0]
 8008e00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e04:	f042 0202 	orr.w	r2, r2, #2
 8008e08:	631a      	str	r2, [r3, #48]	; 0x30
 8008e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0c:	f002 0202 	and.w	r2, r2, #2
 8008e10:	9201      	str	r2, [sp, #4]
 8008e12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e16:	f042 0201 	orr.w	r2, r2, #1
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1e:	f002 0201 	and.w	r2, r2, #1
 8008e22:	9202      	str	r2, [sp, #8]
 8008e24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e30:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008e34:	9203      	str	r2, [sp, #12]
 8008e36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e3a:	f042 0208 	orr.w	r2, r2, #8
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e42:	f002 0208 	and.w	r2, r2, #8
 8008e46:	9204      	str	r2, [sp, #16]
 8008e48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30
 8008e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e54:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008e58:	9205      	str	r2, [sp, #20]
 8008e5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
 8008e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e66:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008e6a:	9206      	str	r2, [sp, #24]
 8008e6c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e70:	f042 0220 	orr.w	r2, r2, #32
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
 8008e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e78:	f002 0220 	and.w	r2, r2, #32
 8008e7c:	9207      	str	r2, [sp, #28]
 8008e7e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e86:	631a      	str	r2, [r3, #48]	; 0x30
 8008e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e8a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008e8e:	9208      	str	r2, [sp, #32]
 8008e90:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e94:	f042 0204 	orr.w	r2, r2, #4
 8008e98:	631a      	str	r2, [r3, #48]	; 0x30
 8008e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e9c:	f002 0204 	and.w	r2, r2, #4
 8008ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8008eb6:	4f2d      	ldr	r7, [pc, #180]	; (8008f6c <MX_GPIO_Init+0x190>)
 8008eb8:	4622      	mov	r2, r4
 8008eba:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7fa fa1b 	bl	80032fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ec8:	4e29      	ldr	r6, [pc, #164]	; (8008f70 <MX_GPIO_Init+0x194>)
 8008eca:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ecc:	2501      	movs	r5, #1
 8008ece:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 8008ed0:	a90b      	add	r1, sp, #44	; 0x2c
 8008ed2:	4828      	ldr	r0, [pc, #160]	; (8008f74 <MX_GPIO_Init+0x198>)
 8008ed4:	f7fa f91a 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8008ed8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8008edc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ede:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee6:	a90b      	add	r1, sp, #44	; 0x2c
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7fa f90f 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 8008eee:	230d      	movs	r3, #13
 8008ef0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ef2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ef4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008ef6:	a90b      	add	r1, sp, #44	; 0x2c
 8008ef8:	481f      	ldr	r0, [pc, #124]	; (8008f78 <MX_GPIO_Init+0x19c>)
 8008efa:	f7fa f907 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 8008efe:	2740      	movs	r7, #64	; 0x40
 8008f00:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f02:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f04:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 8008f06:	a90b      	add	r1, sp, #44	; 0x2c
 8008f08:	481c      	ldr	r0, [pc, #112]	; (8008f7c <MX_GPIO_Init+0x1a0>)
 8008f0a:	f7fa f8ff 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8008f0e:	f04f 0880 	mov.w	r8, #128	; 0x80
 8008f12:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f16:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f18:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8008f1a:	a90b      	add	r1, sp, #44	; 0x2c
 8008f1c:	4818      	ldr	r0, [pc, #96]	; (8008f80 <MX_GPIO_Init+0x1a4>)
 8008f1e:	f7fa f8f5 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 8008f22:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f26:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f28:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 8008f2a:	a90b      	add	r1, sp, #44	; 0x2c
 8008f2c:	4815      	ldr	r0, [pc, #84]	; (8008f84 <MX_GPIO_Init+0x1a8>)
 8008f2e:	f7fa f8ed 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 8008f32:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f34:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f36:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8008f38:	a90b      	add	r1, sp, #44	; 0x2c
 8008f3a:	4813      	ldr	r0, [pc, #76]	; (8008f88 <MX_GPIO_Init+0x1ac>)
 8008f3c:	f7fa f8e6 	bl	800310c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008f40:	4622      	mov	r2, r4
 8008f42:	2105      	movs	r1, #5
 8008f44:	200a      	movs	r0, #10
 8008f46:	f7f9 fc5d 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008f4a:	200a      	movs	r0, #10
 8008f4c:	f7f9 fc8c 	bl	8002868 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8008f50:	4622      	mov	r2, r4
 8008f52:	2105      	movs	r1, #5
 8008f54:	2017      	movs	r0, #23
 8008f56:	f7f9 fc55 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f5a:	2017      	movs	r0, #23
 8008f5c:	f7f9 fc84 	bl	8002868 <HAL_NVIC_EnableIRQ>

}
 8008f60:	b010      	add	sp, #64	; 0x40
 8008f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f66:	bf00      	nop
 8008f68:	40023800 	.word	0x40023800
 8008f6c:	40020000 	.word	0x40020000
 8008f70:	10110000 	.word	0x10110000
 8008f74:	40020400 	.word	0x40020400
 8008f78:	40022000 	.word	0x40022000
 8008f7c:	40020800 	.word	0x40020800
 8008f80:	40021800 	.word	0x40021800
 8008f84:	40021400 	.word	0x40021400
 8008f88:	40021c00 	.word	0x40021c00

08008f8c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8008f90:	2434      	movs	r4, #52	; 0x34
 8008f92:	4622      	mov	r2, r4
 8008f94:	2100      	movs	r1, #0
 8008f96:	eb0d 0004 	add.w	r0, sp, r4
 8008f9a:	f000 fdf2 	bl	8009b82 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4668      	mov	r0, sp
 8008fa4:	f000 fded 	bl	8009b82 <memset>

  hltdc.Instance = LTDC;
 8008fa8:	4833      	ldr	r0, [pc, #204]	; (8009078 <MX_LTDC_Init+0xec>)
 8008faa:	4b34      	ldr	r3, [pc, #208]	; (800907c <MX_LTDC_Init+0xf0>)
 8008fac:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008fb2:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008fb4:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008fb6:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8008fb8:	2207      	movs	r2, #7
 8008fba:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008fc0:	220e      	movs	r2, #14
 8008fc2:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8008fc4:	2205      	movs	r2, #5
 8008fc6:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8008fc8:	f240 228e 	movw	r2, #654	; 0x28e
 8008fcc:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8008fce:	f240 12e5 	movw	r2, #485	; 0x1e5
 8008fd2:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8008fd4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8008fd8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8008fda:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008fde:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008fe0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8008fe4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008fe8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8008fec:	f7fa fdf6 	bl	8003bdc <HAL_LTDC_Init>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d138      	bne.n	8009066 <MX_LTDC_Init+0xda>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8008ff8:	920e      	str	r2, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008ffa:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008ffc:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008ffe:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8009000:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8009002:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009008:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800900a:	2305      	movs	r3, #5
 800900c:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800900e:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8009010:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8009012:	9218      	str	r2, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009014:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8009018:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800901c:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009020:	a90d      	add	r1, sp, #52	; 0x34
 8009022:	4815      	ldr	r0, [pc, #84]	; (8009078 <MX_LTDC_Init+0xec>)
 8009024:	f7fa fec4 	bl	8003db0 <HAL_LTDC_ConfigLayer>
 8009028:	bb00      	cbnz	r0, 800906c <MX_LTDC_Init+0xe0>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800902e:	9301      	str	r3, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8009030:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 8009032:	9303      	str	r3, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009034:	9304      	str	r3, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8009036:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8009038:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800903a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800903e:	9207      	str	r2, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009040:	2205      	movs	r2, #5
 8009042:	9208      	str	r2, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009046:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009048:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800904a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800904e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8009052:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009056:	2201      	movs	r2, #1
 8009058:	4669      	mov	r1, sp
 800905a:	4807      	ldr	r0, [pc, #28]	; (8009078 <MX_LTDC_Init+0xec>)
 800905c:	f7fa fea8 	bl	8003db0 <HAL_LTDC_ConfigLayer>
 8009060:	b938      	cbnz	r0, 8009072 <MX_LTDC_Init+0xe6>
  {
    Error_Handler();
  }

}
 8009062:	b01a      	add	sp, #104	; 0x68
 8009064:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009066:	f000 fafb 	bl	8009660 <Error_Handler>
 800906a:	e7c3      	b.n	8008ff4 <MX_LTDC_Init+0x68>
    Error_Handler();
 800906c:	f000 faf8 	bl	8009660 <Error_Handler>
 8009070:	e7db      	b.n	800902a <MX_LTDC_Init+0x9e>
    Error_Handler();
 8009072:	f000 faf5 	bl	8009660 <Error_Handler>
}
 8009076:	e7f4      	b.n	8009062 <MX_LTDC_Init+0xd6>
 8009078:	200046e4 	.word	0x200046e4
 800907c:	40016800 	.word	0x40016800

08009080 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009084:	2300      	movs	r3, #0
 8009086:	9309      	str	r3, [sp, #36]	; 0x24
 8009088:	930a      	str	r3, [sp, #40]	; 0x28
 800908a:	930b      	str	r3, [sp, #44]	; 0x2c
 800908c:	930c      	str	r3, [sp, #48]	; 0x30
 800908e:	930d      	str	r3, [sp, #52]	; 0x34
  if(ltdcHandle->Instance==LTDC)
 8009090:	6802      	ldr	r2, [r0, #0]
 8009092:	4b62      	ldr	r3, [pc, #392]	; (800921c <HAL_LTDC_MspInit+0x19c>)
 8009094:	429a      	cmp	r2, r3
 8009096:	d001      	beq.n	800909c <HAL_LTDC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8009098:	b00f      	add	sp, #60	; 0x3c
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 800909c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80090a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80090a6:	645a      	str	r2, [r3, #68]	; 0x44
 80090a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090aa:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80090ae:	9200      	str	r2, [sp, #0]
 80090b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b4:	f042 0202 	orr.w	r2, r2, #2
 80090b8:	631a      	str	r2, [r3, #48]	; 0x30
 80090ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090bc:	f002 0202 	and.w	r2, r2, #2
 80090c0:	9201      	str	r2, [sp, #4]
 80090c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80090c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30
 80090cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ce:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80090d2:	9202      	str	r2, [sp, #8]
 80090d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d8:	f042 0201 	orr.w	r2, r2, #1
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
 80090de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e0:	f002 0201 	and.w	r2, r2, #1
 80090e4:	9203      	str	r2, [sp, #12]
 80090e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80090e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
 80090f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80090f6:	9204      	str	r2, [sp, #16]
 80090f8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80090fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009100:	631a      	str	r2, [r3, #48]	; 0x30
 8009102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009104:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009108:	9205      	str	r2, [sp, #20]
 800910a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800910c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800910e:	f042 0208 	orr.w	r2, r2, #8
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
 8009114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009116:	f002 0208 	and.w	r2, r2, #8
 800911a:	9206      	str	r2, [sp, #24]
 800911c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800911e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009124:	631a      	str	r2, [r3, #48]	; 0x30
 8009126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009128:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800912c:	9207      	str	r2, [sp, #28]
 800912e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009136:	631a      	str	r2, [r3, #48]	; 0x30
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800913e:	9308      	str	r3, [sp, #32]
 8009140:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009146:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009148:	2502      	movs	r5, #2
 800914a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800914c:	260e      	movs	r6, #14
 800914e:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009150:	a909      	add	r1, sp, #36	; 0x24
 8009152:	4833      	ldr	r0, [pc, #204]	; (8009220 <HAL_LTDC_MspInit+0x1a0>)
 8009154:	f7f9 ffda 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8009158:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800915c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009160:	2400      	movs	r4, #0
 8009162:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009164:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009166:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009168:	4f2e      	ldr	r7, [pc, #184]	; (8009224 <HAL_LTDC_MspInit+0x1a4>)
 800916a:	a909      	add	r1, sp, #36	; 0x24
 800916c:	4638      	mov	r0, r7
 800916e:	f7f9 ffcd 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009172:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009176:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009178:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800917c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800917e:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009180:	a909      	add	r1, sp, #36	; 0x24
 8009182:	4829      	ldr	r0, [pc, #164]	; (8009228 <HAL_LTDC_MspInit+0x1a8>)
 8009184:	f7f9 ffc2 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 8009188:	f244 6330 	movw	r3, #17968	; 0x4630
 800918c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800918e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009190:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009192:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009194:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009196:	a909      	add	r1, sp, #36	; 0x24
 8009198:	4824      	ldr	r0, [pc, #144]	; (800922c <HAL_LTDC_MspInit+0x1ac>)
 800919a:	f7f9 ffb7 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 800919e:	2383      	movs	r3, #131	; 0x83
 80091a0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a4:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a6:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091a8:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80091aa:	a909      	add	r1, sp, #36	; 0x24
 80091ac:	4820      	ldr	r0, [pc, #128]	; (8009230 <HAL_LTDC_MspInit+0x1b0>)
 80091ae:	f7f9 ffad 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80091b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091b8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ba:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091bc:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80091be:	2309      	movs	r3, #9
 80091c0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091c2:	a909      	add	r1, sp, #36	; 0x24
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7f9 ffa1 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80091ca:	2308      	movs	r3, #8
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091d2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091d4:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80091d6:	a909      	add	r1, sp, #36	; 0x24
 80091d8:	4816      	ldr	r0, [pc, #88]	; (8009234 <HAL_LTDC_MspInit+0x1b4>)
 80091da:	f7f9 ff97 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80091de:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091e8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091ea:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80091ec:	a909      	add	r1, sp, #36	; 0x24
 80091ee:	4812      	ldr	r0, [pc, #72]	; (8009238 <HAL_LTDC_MspInit+0x1b8>)
 80091f0:	f7f9 ff8c 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80091f4:	2320      	movs	r3, #32
 80091f6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fa:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091fc:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091fe:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009200:	a909      	add	r1, sp, #36	; 0x24
 8009202:	480e      	ldr	r0, [pc, #56]	; (800923c <HAL_LTDC_MspInit+0x1bc>)
 8009204:	f7f9 ff82 	bl	800310c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 12, 0);
 8009208:	4622      	mov	r2, r4
 800920a:	210c      	movs	r1, #12
 800920c:	2058      	movs	r0, #88	; 0x58
 800920e:	f7f9 faf9 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009212:	2058      	movs	r0, #88	; 0x58
 8009214:	f7f9 fb28 	bl	8002868 <HAL_NVIC_EnableIRQ>
}
 8009218:	e73e      	b.n	8009098 <HAL_LTDC_MspInit+0x18>
 800921a:	bf00      	nop
 800921c:	40016800 	.word	0x40016800
 8009220:	40020400 	.word	0x40020400
 8009224:	40021800 	.word	0x40021800
 8009228:	40020000 	.word	0x40020000
 800922c:	40022000 	.word	0x40022000
 8009230:	40022800 	.word	0x40022800
 8009234:	40020c00 	.word	0x40020c00
 8009238:	40021c00 	.word	0x40021c00
 800923c:	40022400 	.word	0x40022400

08009240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009244:	2230      	movs	r2, #48	; 0x30
 8009246:	2100      	movs	r1, #0
 8009248:	a828      	add	r0, sp, #160	; 0xa0
 800924a:	f000 fc9a 	bl	8009b82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800924e:	2400      	movs	r4, #0
 8009250:	9423      	str	r4, [sp, #140]	; 0x8c
 8009252:	9424      	str	r4, [sp, #144]	; 0x90
 8009254:	9425      	str	r4, [sp, #148]	; 0x94
 8009256:	9426      	str	r4, [sp, #152]	; 0x98
 8009258:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800925a:	2284      	movs	r2, #132	; 0x84
 800925c:	4621      	mov	r1, r4
 800925e:	a802      	add	r0, sp, #8
 8009260:	f000 fc8f 	bl	8009b82 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009264:	4b26      	ldr	r3, [pc, #152]	; (8009300 <SystemClock_Config+0xc0>)
 8009266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009268:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800926c:	641a      	str	r2, [r3, #64]	; 0x40
 800926e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009278:	4b22      	ldr	r3, [pc, #136]	; (8009304 <SystemClock_Config+0xc4>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800928c:	2601      	movs	r6, #1
 800928e:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009294:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009296:	2502      	movs	r5, #2
 8009298:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800929a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800929e:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80092a0:	2319      	movs	r3, #25
 80092a2:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80092a4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80092a8:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80092aa:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80092ac:	2309      	movs	r3, #9
 80092ae:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80092b0:	a828      	add	r0, sp, #160	; 0xa0
 80092b2:	f7fa fded 	bl	8003e90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80092b6:	f7fa fdad 	bl	8003e14 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80092ba:	230f      	movs	r3, #15
 80092bc:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80092be:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80092c0:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80092c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80092c6:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80092c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092cc:	9327      	str	r3, [sp, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80092ce:	2107      	movs	r1, #7
 80092d0:	a823      	add	r0, sp, #140	; 0x8c
 80092d2:	f7fb f81b 	bl	800430c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 80092d6:	2348      	movs	r3, #72	; 0x48
 80092d8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80092da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80092de:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80092e0:	2305      	movs	r3, #5
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80092e4:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80092e6:	2303      	movs	r3, #3
 80092e8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80092ea:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80092ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092f0:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80092f2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092f4:	a802      	add	r0, sp, #8
 80092f6:	f7fb f8ff 	bl	80044f8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80092fa:	b034      	add	sp, #208	; 0xd0
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	bf00      	nop
 8009300:	40023800 	.word	0x40023800
 8009304:	40007000 	.word	0x40007000

08009308 <main>:
{
 8009308:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800930a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800930e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009312:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <main+0xb0>)
 8009314:	2100      	movs	r1, #0
 8009316:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800931a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800931e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009328:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800932a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800932e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009332:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009336:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800933a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800933e:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8009342:	e00f      	b.n	8009364 <main+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8009344:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009346:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800934a:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 800934e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8009352:	4819      	ldr	r0, [pc, #100]	; (80093b8 <main+0xb0>)
 8009354:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8009358:	1e53      	subs	r3, r2, #1
 800935a:	2a00      	cmp	r2, #0
 800935c:	d1f2      	bne.n	8009344 <main+0x3c>
    } while(sets-- != 0U);
 800935e:	1e4b      	subs	r3, r1, #1
 8009360:	b119      	cbz	r1, 800936a <main+0x62>
 8009362:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009364:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8009368:	e7ed      	b.n	8009346 <main+0x3e>
 800936a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800936e:	6943      	ldr	r3, [r0, #20]
 8009370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009374:	6143      	str	r3, [r0, #20]
 8009376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800937a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800937e:	f7f8 fe1f 	bl	8001fc0 <HAL_Init>
  SystemClock_Config();
 8009382:	f7ff ff5d 	bl	8009240 <SystemClock_Config>
  MX_GPIO_Init();
 8009386:	f7ff fd29 	bl	8008ddc <MX_GPIO_Init>
  MX_DMA_Init();
 800938a:	f7ff facf 	bl	800892c <MX_DMA_Init>
  MX_SPI2_Init();
 800938e:	f000 f969 	bl	8009664 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8009392:	f000 fb15 	bl	80099c0 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8009396:	f7ff f9cd 	bl	8008734 <MX_ADC3_Init>
  MX_CRC_Init();
 800939a:	f7ff fa9b 	bl	80088d4 <MX_CRC_Init>
  MX_DMA2D_Init();
 800939e:	f7ff fadf 	bl	8008960 <MX_DMA2D_Init>
  MX_FMC_Init();
 80093a2:	f7ff fb75 	bl	8008a90 <MX_FMC_Init>
  MX_LTDC_Init();
 80093a6:	f7ff fdf1 	bl	8008f8c <MX_LTDC_Init>
  MX_TIM1_Init();
 80093aa:	f000 faab 	bl	8009904 <MX_TIM1_Init>
  MX_FREERTOS_Init();
 80093ae:	f7ff fccf 	bl	8008d50 <MX_FREERTOS_Init>
  osKernelStart();
 80093b2:	f7fd fe89 	bl	80070c8 <osKernelStart>
 80093b6:	e7fe      	b.n	80093b6 <main+0xae>
 80093b8:	e000ed00 	.word	0xe000ed00

080093bc <read_rotary_1>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 80093bc:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_1 <<= 2;
 80093be:	4a1b      	ldr	r2, [pc, #108]	; (800942c <read_rotary_1+0x70>)
 80093c0:	7813      	ldrb	r3, [r2, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 80093c6:	2180      	movs	r1, #128	; 0x80
 80093c8:	4819      	ldr	r0, [pc, #100]	; (8009430 <read_rotary_1+0x74>)
 80093ca:	f7f9 ff8f 	bl	80032ec <HAL_GPIO_ReadPin>
 80093ce:	2801      	cmp	r0, #1
 80093d0:	d01a      	beq.n	8009408 <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 80093d2:	2140      	movs	r1, #64	; 0x40
 80093d4:	4817      	ldr	r0, [pc, #92]	; (8009434 <read_rotary_1+0x78>)
 80093d6:	f7f9 ff89 	bl	80032ec <HAL_GPIO_ReadPin>
 80093da:	2801      	cmp	r0, #1
 80093dc:	d01a      	beq.n	8009414 <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 80093de:	4913      	ldr	r1, [pc, #76]	; (800942c <read_rotary_1+0x70>)
 80093e0:	780b      	ldrb	r3, [r1, #0]
 80093e2:	f003 020f 	and.w	r2, r3, #15
 80093e6:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_1] ) {
 80093e8:	4b13      	ldr	r3, [pc, #76]	; (8009438 <read_rotary_1+0x7c>)
 80093ea:	5698      	ldrsb	r0, [r3, r2]
 80093ec:	b158      	cbz	r0, 8009406 <read_rotary_1+0x4a>
		store_1 <<= 4;
 80093ee:	4913      	ldr	r1, [pc, #76]	; (800943c <read_rotary_1+0x80>)
 80093f0:	880b      	ldrh	r3, [r1, #0]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 80093f6:	4313      	orrs	r3, r2
 80093f8:	800b      	strh	r3, [r1, #0]
 80093fa:	b2db      	uxtb	r3, r3

		if ((store_1&0xff)==0x2b) return -1;
 80093fc:	2b2b      	cmp	r3, #43	; 0x2b
 80093fe:	d011      	beq.n	8009424 <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 8009400:	2b17      	cmp	r3, #23
 8009402:	d00d      	beq.n	8009420 <read_rotary_1+0x64>
	}
	return 0;
 8009404:	2000      	movs	r0, #0
}
 8009406:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <read_rotary_1+0x70>)
 800940a:	7813      	ldrb	r3, [r2, #0]
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	7013      	strb	r3, [r2, #0]
 8009412:	e7de      	b.n	80093d2 <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8009414:	4a05      	ldr	r2, [pc, #20]	; (800942c <read_rotary_1+0x70>)
 8009416:	7813      	ldrb	r3, [r2, #0]
 8009418:	f043 0301 	orr.w	r3, r3, #1
 800941c:	7013      	strb	r3, [r2, #0]
 800941e:	e7de      	b.n	80093de <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 8009420:	2001      	movs	r0, #1
 8009422:	e7f0      	b.n	8009406 <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8009424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009428:	e7ed      	b.n	8009406 <read_rotary_1+0x4a>
 800942a:	bf00      	nop
 800942c:	20004258 	.word	0x20004258
 8009430:	40021400 	.word	0x40021400
 8009434:	40020800 	.word	0x40020800
 8009438:	080109dc 	.word	0x080109dc
 800943c:	20004268 	.word	0x20004268

08009440 <read_rotary_2>:


// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 8009440:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_2 <<= 2;
 8009442:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <read_rotary_2+0x70>)
 8009444:	7813      	ldrb	r3, [r2, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 800944a:	2110      	movs	r1, #16
 800944c:	4819      	ldr	r0, [pc, #100]	; (80094b4 <read_rotary_2+0x74>)
 800944e:	f7f9 ff4d 	bl	80032ec <HAL_GPIO_ReadPin>
 8009452:	2801      	cmp	r0, #1
 8009454:	d01a      	beq.n	800948c <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	4817      	ldr	r0, [pc, #92]	; (80094b8 <read_rotary_2+0x78>)
 800945a:	f7f9 ff47 	bl	80032ec <HAL_GPIO_ReadPin>
 800945e:	2801      	cmp	r0, #1
 8009460:	d01a      	beq.n	8009498 <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 8009462:	4913      	ldr	r1, [pc, #76]	; (80094b0 <read_rotary_2+0x70>)
 8009464:	780b      	ldrb	r3, [r1, #0]
 8009466:	f003 020f 	and.w	r2, r3, #15
 800946a:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if  (rot_enc_table[prevNextCode_2] ) {
 800946c:	4b13      	ldr	r3, [pc, #76]	; (80094bc <read_rotary_2+0x7c>)
 800946e:	5698      	ldrsb	r0, [r3, r2]
 8009470:	b158      	cbz	r0, 800948a <read_rotary_2+0x4a>
		store_2 <<= 4;
 8009472:	4913      	ldr	r1, [pc, #76]	; (80094c0 <read_rotary_2+0x80>)
 8009474:	880b      	ldrh	r3, [r1, #0]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 800947a:	4313      	orrs	r3, r2
 800947c:	800b      	strh	r3, [r1, #0]
 800947e:	b2db      	uxtb	r3, r3

		if ((store_2&0xff)==0x2b) return -1;
 8009480:	2b2b      	cmp	r3, #43	; 0x2b
 8009482:	d011      	beq.n	80094a8 <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 8009484:	2b17      	cmp	r3, #23
 8009486:	d00d      	beq.n	80094a4 <read_rotary_2+0x64>
	}
	return 0;
 8009488:	2000      	movs	r0, #0
}
 800948a:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 800948c:	4a08      	ldr	r2, [pc, #32]	; (80094b0 <read_rotary_2+0x70>)
 800948e:	7813      	ldrb	r3, [r2, #0]
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	7013      	strb	r3, [r2, #0]
 8009496:	e7de      	b.n	8009456 <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8009498:	4a05      	ldr	r2, [pc, #20]	; (80094b0 <read_rotary_2+0x70>)
 800949a:	7813      	ldrb	r3, [r2, #0]
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	7013      	strb	r3, [r2, #0]
 80094a2:	e7de      	b.n	8009462 <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 80094a4:	2001      	movs	r0, #1
 80094a6:	e7f0      	b.n	800948a <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ac:	e7ed      	b.n	800948a <read_rotary_2+0x4a>
 80094ae:	bf00      	nop
 80094b0:	20004259 	.word	0x20004259
 80094b4:	40020400 	.word	0x40020400
 80094b8:	40021800 	.word	0x40021800
 80094bc:	080109ec 	.word	0x080109ec
 80094c0:	2000426a 	.word	0x2000426a

080094c4 <read_rotary_3>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 80094c4:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_3 <<= 2;
 80094c6:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <read_rotary_3+0x70>)
 80094c8:	7813      	ldrb	r3, [r2, #0]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 80094ce:	2140      	movs	r1, #64	; 0x40
 80094d0:	4819      	ldr	r0, [pc, #100]	; (8009538 <read_rotary_3+0x74>)
 80094d2:	f7f9 ff0b 	bl	80032ec <HAL_GPIO_ReadPin>
 80094d6:	2801      	cmp	r0, #1
 80094d8:	d01a      	beq.n	8009510 <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 80094da:	2108      	movs	r1, #8
 80094dc:	4817      	ldr	r0, [pc, #92]	; (800953c <read_rotary_3+0x78>)
 80094de:	f7f9 ff05 	bl	80032ec <HAL_GPIO_ReadPin>
 80094e2:	2801      	cmp	r0, #1
 80094e4:	d01a      	beq.n	800951c <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 80094e6:	4913      	ldr	r1, [pc, #76]	; (8009534 <read_rotary_3+0x70>)
 80094e8:	780b      	ldrb	r3, [r1, #0]
 80094ea:	f003 020f 	and.w	r2, r3, #15
 80094ee:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_3] ) {
 80094f0:	4b13      	ldr	r3, [pc, #76]	; (8009540 <read_rotary_3+0x7c>)
 80094f2:	5698      	ldrsb	r0, [r3, r2]
 80094f4:	b158      	cbz	r0, 800950e <read_rotary_3+0x4a>
		store_3 <<= 4;
 80094f6:	4913      	ldr	r1, [pc, #76]	; (8009544 <read_rotary_3+0x80>)
 80094f8:	880b      	ldrh	r3, [r1, #0]
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 80094fe:	4313      	orrs	r3, r2
 8009500:	800b      	strh	r3, [r1, #0]
 8009502:	b2db      	uxtb	r3, r3

		if ((store_3&0xff)==0x2b) return -1;
 8009504:	2b2b      	cmp	r3, #43	; 0x2b
 8009506:	d011      	beq.n	800952c <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 8009508:	2b17      	cmp	r3, #23
 800950a:	d00d      	beq.n	8009528 <read_rotary_3+0x64>
	}
	return 0;
 800950c:	2000      	movs	r0, #0
}
 800950e:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <read_rotary_3+0x70>)
 8009512:	7813      	ldrb	r3, [r2, #0]
 8009514:	f043 0302 	orr.w	r3, r3, #2
 8009518:	7013      	strb	r3, [r2, #0]
 800951a:	e7de      	b.n	80094da <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 800951c:	4a05      	ldr	r2, [pc, #20]	; (8009534 <read_rotary_3+0x70>)
 800951e:	7813      	ldrb	r3, [r2, #0]
 8009520:	f043 0301 	orr.w	r3, r3, #1
 8009524:	7013      	strb	r3, [r2, #0]
 8009526:	e7de      	b.n	80094e6 <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 8009528:	2001      	movs	r0, #1
 800952a:	e7f0      	b.n	800950e <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 800952c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009530:	e7ed      	b.n	800950e <read_rotary_3+0x4a>
 8009532:	bf00      	nop
 8009534:	2000425a 	.word	0x2000425a
 8009538:	40021c00 	.word	0x40021c00
 800953c:	40022000 	.word	0x40022000
 8009540:	080109fc 	.word	0x080109fc
 8009544:	2000426c 	.word	0x2000426c

08009548 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 800954c:	2880      	cmp	r0, #128	; 0x80
 800954e:	d004      	beq.n	800955a <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 8009550:	2c10      	cmp	r4, #16
 8009552:	d025      	beq.n	80095a0 <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8009554:	2c40      	cmp	r4, #64	; 0x40
 8009556:	d046      	beq.n	80095e6 <HAL_GPIO_EXTI_Callback+0x9e>
}
 8009558:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 800955a:	f7ff ff2f 	bl	80093bc <read_rotary_1>
 800955e:	2800      	cmp	r0, #0
 8009560:	d0f6      	beq.n	8009550 <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 8009562:	4b32      	ldr	r3, [pc, #200]	; (800962c <HAL_GPIO_EXTI_Callback+0xe4>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b0b      	cmp	r3, #11
 8009568:	d00b      	beq.n	8009582 <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 800956a:	2b07      	cmp	r3, #7
 800956c:	d1f0      	bne.n	8009550 <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 800956e:	4b30      	ldr	r3, [pc, #192]	; (8009630 <HAL_GPIO_EXTI_Callback+0xe8>)
 8009570:	edd3 7a00 	vldr	s15, [r3]
 8009574:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800957c:	edc3 7a00 	vstr	s15, [r3]
 8009580:	e7e6      	b.n	8009550 <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 8009582:	4a2b      	ldr	r2, [pc, #172]	; (8009630 <HAL_GPIO_EXTI_Callback+0xe8>)
 8009584:	edd2 7a00 	vldr	s15, [r2]
 8009588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800958c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009590:	ddeb      	ble.n	800956a <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 8009592:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800959a:	edc2 7a00 	vstr	s15, [r2]
 800959e:	e7e4      	b.n	800956a <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 80095a0:	f7ff ff4e 	bl	8009440 <read_rotary_2>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d0d5      	beq.n	8009554 <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 80095a8:	4b22      	ldr	r3, [pc, #136]	; (8009634 <HAL_GPIO_EXTI_Callback+0xec>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b0b      	cmp	r3, #11
 80095ae:	d00b      	beq.n	80095c8 <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	d1cf      	bne.n	8009554 <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 80095b4:	4b20      	ldr	r3, [pc, #128]	; (8009638 <HAL_GPIO_EXTI_Callback+0xf0>)
 80095b6:	edd3 7a00 	vldr	s15, [r3]
 80095ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095c2:	edc3 7a00 	vstr	s15, [r3]
 80095c6:	e7c5      	b.n	8009554 <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 80095c8:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <HAL_GPIO_EXTI_Callback+0xf0>)
 80095ca:	edd2 7a00 	vldr	s15, [r2]
 80095ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	ddeb      	ble.n	80095b0 <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 80095d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095e0:	edc2 7a00 	vstr	s15, [r2]
 80095e4:	e7e4      	b.n	80095b0 <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 80095e6:	f7ff ff6d 	bl	80094c4 <read_rotary_3>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0b4      	beq.n	8009558 <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <HAL_GPIO_EXTI_Callback+0xf4>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b0b      	cmp	r3, #11
 80095f4:	d00b      	beq.n	800960e <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 80095f6:	2b07      	cmp	r3, #7
 80095f8:	d1ae      	bne.n	8009558 <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 80095fa:	4b11      	ldr	r3, [pc, #68]	; (8009640 <HAL_GPIO_EXTI_Callback+0xf8>)
 80095fc:	edd3 7a00 	vldr	s15, [r3]
 8009600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009608:	edc3 7a00 	vstr	s15, [r3]
}
 800960c:	e7a4      	b.n	8009558 <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 800960e:	4a0c      	ldr	r2, [pc, #48]	; (8009640 <HAL_GPIO_EXTI_Callback+0xf8>)
 8009610:	edd2 7a00 	vldr	s15, [r2]
 8009614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	ddeb      	ble.n	80095f6 <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 800961e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009626:	edc2 7a00 	vstr	s15, [r2]
 800962a:	e7e4      	b.n	80095f6 <HAL_GPIO_EXTI_Callback+0xae>
 800962c:	20004258 	.word	0x20004258
 8009630:	2000425c 	.word	0x2000425c
 8009634:	20004259 	.word	0x20004259
 8009638:	20004260 	.word	0x20004260
 800963c:	2000425a 	.word	0x2000425a
 8009640:	20004264 	.word	0x20004264

08009644 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{


}
 8009644:	4770      	bx	lr
	...

08009648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800964a:	6802      	ldr	r2, [r0, #0]
 800964c:	4b03      	ldr	r3, [pc, #12]	; (800965c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800964e:	429a      	cmp	r2, r3
 8009650:	d000      	beq.n	8009654 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009652:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8009654:	f7f8 fcc6 	bl	8001fe4 <HAL_IncTick>
}
 8009658:	e7fb      	b.n	8009652 <HAL_TIM_PeriodElapsedCallback+0xa>
 800965a:	bf00      	nop
 800965c:	40002000 	.word	0x40002000

08009660 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009660:	4770      	bx	lr
	...

08009664 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009664:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8009666:	4810      	ldr	r0, [pc, #64]	; (80096a8 <MX_SPI2_Init+0x44>)
 8009668:	4b10      	ldr	r3, [pc, #64]	; (80096ac <MX_SPI2_Init+0x48>)
 800966a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800966c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009670:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009672:	2300      	movs	r3, #0
 8009674:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009676:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800967a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800967c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800967e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009684:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009686:	2220      	movs	r2, #32
 8009688:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800968a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800968c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800968e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009690:	2207      	movs	r2, #7
 8009692:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009694:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009696:	2308      	movs	r3, #8
 8009698:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800969a:	f7fb fb5e 	bl	8004d5a <HAL_SPI_Init>
 800969e:	b900      	cbnz	r0, 80096a2 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 80096a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80096a2:	f7ff ffdd 	bl	8009660 <Error_Handler>
}
 80096a6:	e7fb      	b.n	80096a0 <MX_SPI2_Init+0x3c>
 80096a8:	2000478c 	.word	0x2000478c
 80096ac:	40003800 	.word	0x40003800

080096b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b4:	2300      	movs	r3, #0
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	4b1d      	ldr	r3, [pc, #116]	; (8009738 <HAL_SPI_MspInit+0x88>)
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d001      	beq.n	80096cc <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80096c8:	b008      	add	sp, #32
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80096cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80096d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
 80096d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80096de:	9200      	str	r2, [sp, #0]
 80096e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80096e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e8:	631a      	str	r2, [r3, #48]	; 0x30
 80096ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80096f0:	9201      	str	r2, [sp, #4]
 80096f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f6:	f042 0202 	orr.w	r2, r2, #2
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009706:	2402      	movs	r4, #2
 8009708:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800970c:	2603      	movs	r6, #3
 800970e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009710:	2505      	movs	r5, #5
 8009712:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009714:	a903      	add	r1, sp, #12
 8009716:	4809      	ldr	r0, [pc, #36]	; (800973c <HAL_SPI_MspInit+0x8c>)
 8009718:	f7f9 fcf8 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800971c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009720:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009722:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009724:	2300      	movs	r3, #0
 8009726:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009728:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800972a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800972c:	a903      	add	r1, sp, #12
 800972e:	4804      	ldr	r0, [pc, #16]	; (8009740 <HAL_SPI_MspInit+0x90>)
 8009730:	f7f9 fcec 	bl	800310c <HAL_GPIO_Init>
}
 8009734:	e7c8      	b.n	80096c8 <HAL_SPI_MspInit+0x18>
 8009736:	bf00      	nop
 8009738:	40003800 	.word	0x40003800
 800973c:	40022000 	.word	0x40022000
 8009740:	40020400 	.word	0x40020400

08009744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009744:	b500      	push	{lr}
 8009746:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <HAL_MspInit+0x3c>)
 800974a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800974c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009750:	641a      	str	r2, [r3, #64]	; 0x40
 8009752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009754:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009758:	9200      	str	r2, [sp, #0]
 800975a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800975c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009762:	645a      	str	r2, [r3, #68]	; 0x44
 8009764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800976e:	2200      	movs	r2, #0
 8009770:	210f      	movs	r1, #15
 8009772:	f06f 0001 	mvn.w	r0, #1
 8009776:	f7f9 f845 	bl	8002804 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800977a:	b003      	add	sp, #12
 800977c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009780:	40023800 	.word	0x40023800

08009784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009784:	b500      	push	{lr}
 8009786:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8009788:	2200      	movs	r2, #0
 800978a:	4601      	mov	r1, r0
 800978c:	202d      	movs	r0, #45	; 0x2d
 800978e:	f7f9 f839 	bl	8002804 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8009792:	202d      	movs	r0, #45	; 0x2d
 8009794:	f7f9 f868 	bl	8002868 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <HAL_InitTick+0x6c>)
 800979a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800979c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80097ac:	a902      	add	r1, sp, #8
 80097ae:	a803      	add	r0, sp, #12
 80097b0:	f7fa fe84 	bl	80044bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80097b4:	f7fa fe62 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 80097b8:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80097ba:	480e      	ldr	r0, [pc, #56]	; (80097f4 <HAL_InitTick+0x70>)
 80097bc:	fba0 2303 	umull	r2, r3, r0, r3
 80097c0:	0c9b      	lsrs	r3, r3, #18
 80097c2:	3b01      	subs	r3, #1
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80097c4:	480c      	ldr	r0, [pc, #48]	; (80097f8 <HAL_InitTick+0x74>)
 80097c6:	4a0d      	ldr	r2, [pc, #52]	; (80097fc <HAL_InitTick+0x78>)
 80097c8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80097ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097ce:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80097d0:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097d6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80097d8:	f7fb fff4 	bl	80057c4 <HAL_TIM_Base_Init>
 80097dc:	b118      	cbz	r0, 80097e6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80097de:	2001      	movs	r0, #1
}
 80097e0:	b009      	add	sp, #36	; 0x24
 80097e2:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim14);
 80097e6:	4804      	ldr	r0, [pc, #16]	; (80097f8 <HAL_InitTick+0x74>)
 80097e8:	f7fb fe7e 	bl	80054e8 <HAL_TIM_Base_Start_IT>
 80097ec:	e7f8      	b.n	80097e0 <HAL_InitTick+0x5c>
 80097ee:	bf00      	nop
 80097f0:	40023800 	.word	0x40023800
 80097f4:	431bde83 	.word	0x431bde83
 80097f8:	200047f0 	.word	0x200047f0
 80097fc:	40002000 	.word	0x40002000

08009800 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009800:	4770      	bx	lr

08009802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009802:	e7fe      	b.n	8009802 <HardFault_Handler>

08009804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009804:	e7fe      	b.n	8009804 <MemManage_Handler>

08009806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009806:	e7fe      	b.n	8009806 <BusFault_Handler>

08009808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009808:	e7fe      	b.n	8009808 <UsageFault_Handler>

0800980a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800980a:	4770      	bx	lr

0800980c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800980c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800980e:	2010      	movs	r0, #16
 8009810:	f7f9 fd7a 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009814:	bd08      	pop	{r3, pc}
	...

08009818 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800981a:	4802      	ldr	r0, [pc, #8]	; (8009824 <ADC_IRQHandler+0xc>)
 800981c:	f7f8 fe20 	bl	8002460 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009820:	bd08      	pop	{r3, pc}
 8009822:	bf00      	nop
 8009824:	20004534 	.word	0x20004534

08009828 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800982a:	2040      	movs	r0, #64	; 0x40
 800982c:	f7f9 fd6c 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009830:	2080      	movs	r0, #128	; 0x80
 8009832:	f7f9 fd69 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009836:	bd08      	pop	{r3, pc}

08009838 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800983a:	4802      	ldr	r0, [pc, #8]	; (8009844 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800983c:	f7fb fe6e 	bl	800551c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009840:	bd08      	pop	{r3, pc}
 8009842:	bf00      	nop
 8009844:	20004830 	.word	0x20004830

08009848 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8009848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800984a:	4802      	ldr	r0, [pc, #8]	; (8009854 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 800984c:	f7fb fe66 	bl	800551c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8009850:	bd08      	pop	{r3, pc}
 8009852:	bf00      	nop
 8009854:	200047f0 	.word	0x200047f0

08009858 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800985a:	4802      	ldr	r0, [pc, #8]	; (8009864 <DMA2_Stream1_IRQHandler+0xc>)
 800985c:	f7f9 f9d6 	bl	8002c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009860:	bd08      	pop	{r3, pc}
 8009862:	bf00      	nop
 8009864:	200044d4 	.word	0x200044d4

08009868 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800986a:	4802      	ldr	r0, [pc, #8]	; (8009874 <LTDC_IRQHandler+0xc>)
 800986c:	f7fa fa33 	bl	8003cd6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009870:	bd08      	pop	{r3, pc}
 8009872:	bf00      	nop
 8009874:	200046e4 	.word	0x200046e4

08009878 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009878:	b508      	push	{r3, lr}
 800987a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800987c:	4a0b      	ldr	r2, [pc, #44]	; (80098ac <_sbrk+0x34>)
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	b142      	cbz	r2, 8009894 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <_sbrk+0x34>)
 8009884:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009886:	4403      	add	r3, r0
 8009888:	466a      	mov	r2, sp
 800988a:	4293      	cmp	r3, r2
 800988c:	d806      	bhi.n	800989c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800988e:	4a07      	ldr	r2, [pc, #28]	; (80098ac <_sbrk+0x34>)
 8009890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8009892:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8009894:	4a05      	ldr	r2, [pc, #20]	; (80098ac <_sbrk+0x34>)
 8009896:	4906      	ldr	r1, [pc, #24]	; (80098b0 <_sbrk+0x38>)
 8009898:	6011      	str	r1, [r2, #0]
 800989a:	e7f2      	b.n	8009882 <_sbrk+0xa>
		errno = ENOMEM;
 800989c:	f000 f922 	bl	8009ae4 <__errno>
 80098a0:	230c      	movs	r3, #12
 80098a2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098a8:	e7f3      	b.n	8009892 <_sbrk+0x1a>
 80098aa:	bf00      	nop
 80098ac:	20004270 	.word	0x20004270
 80098b0:	200048f8 	.word	0x200048f8

080098b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80098b4:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80098b6:	4a0f      	ldr	r2, [pc, #60]	; (80098f4 <SystemInit+0x40>)
 80098b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80098bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80098c4:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <SystemInit+0x44>)
 80098c6:	6819      	ldr	r1, [r3, #0]
 80098c8:	f041 0101 	orr.w	r1, r1, #1
 80098cc:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80098ce:	2000      	movs	r0, #0
 80098d0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80098d2:	681c      	ldr	r4, [r3, #0]
 80098d4:	4909      	ldr	r1, [pc, #36]	; (80098fc <SystemInit+0x48>)
 80098d6:	4021      	ands	r1, r4
 80098d8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80098da:	4909      	ldr	r1, [pc, #36]	; (8009900 <SystemInit+0x4c>)
 80098dc:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80098e4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80098e6:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80098e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098ec:	6093      	str	r3, [r2, #8]
#endif
}
 80098ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	e000ed00 	.word	0xe000ed00
 80098f8:	40023800 	.word	0x40023800
 80098fc:	fef6ffff 	.word	0xfef6ffff
 8009900:	24003010 	.word	0x24003010

08009904 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009904:	b500      	push	{lr}
 8009906:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009908:	2300      	movs	r3, #0
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	9306      	str	r3, [sp, #24]
 8009910:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	9302      	str	r3, [sp, #8]
 8009916:	9303      	str	r3, [sp, #12]

  htim1.Instance = TIM1;
 8009918:	4817      	ldr	r0, [pc, #92]	; (8009978 <MX_TIM1_Init+0x74>)
 800991a:	4a18      	ldr	r2, [pc, #96]	; (800997c <MX_TIM1_Init+0x78>)
 800991c:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 10000-1;
 800991e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009922:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009924:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 216-1;
 8009926:	22d7      	movs	r2, #215	; 0xd7
 8009928:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800992a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800992c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800992e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009930:	f7fb ff48 	bl	80057c4 <HAL_TIM_Base_Init>
 8009934:	b9b8      	cbnz	r0, 8009966 <MX_TIM1_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009936:	a908      	add	r1, sp, #32
 8009938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800993c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009940:	480d      	ldr	r0, [pc, #52]	; (8009978 <MX_TIM1_Init+0x74>)
 8009942:	f7fb ff65 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8009946:	b988      	cbnz	r0, 800996c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009948:	2320      	movs	r3, #32
 800994a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800994c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009950:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009952:	2300      	movs	r3, #0
 8009954:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009956:	a901      	add	r1, sp, #4
 8009958:	4807      	ldr	r0, [pc, #28]	; (8009978 <MX_TIM1_Init+0x74>)
 800995a:	f7fb ffc7 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 800995e:	b940      	cbnz	r0, 8009972 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
  }

}
 8009960:	b009      	add	sp, #36	; 0x24
 8009962:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009966:	f7ff fe7b 	bl	8009660 <Error_Handler>
 800996a:	e7e4      	b.n	8009936 <MX_TIM1_Init+0x32>
    Error_Handler();
 800996c:	f7ff fe78 	bl	8009660 <Error_Handler>
 8009970:	e7ea      	b.n	8009948 <MX_TIM1_Init+0x44>
    Error_Handler();
 8009972:	f7ff fe75 	bl	8009660 <Error_Handler>
}
 8009976:	e7f3      	b.n	8009960 <MX_TIM1_Init+0x5c>
 8009978:	20004830 	.word	0x20004830
 800997c:	40010000 	.word	0x40010000

08009980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8009980:	6802      	ldr	r2, [r0, #0]
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <HAL_TIM_Base_MspInit+0x3c>)
 8009984:	429a      	cmp	r2, r3
 8009986:	d000      	beq.n	800998a <HAL_TIM_Base_MspInit+0xa>
 8009988:	4770      	bx	lr
{
 800998a:	b500      	push	{lr}
 800998c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800998e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8009992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009994:	f042 0201 	orr.w	r2, r2, #1
 8009998:	645a      	str	r2, [r3, #68]	; 0x44
 800999a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80099a4:	2200      	movs	r2, #0
 80099a6:	4611      	mov	r1, r2
 80099a8:	2019      	movs	r0, #25
 80099aa:	f7f8 ff2b 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80099ae:	2019      	movs	r0, #25
 80099b0:	f7f8 ff5a 	bl	8002868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80099b4:	b003      	add	sp, #12
 80099b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80099ba:	bf00      	nop
 80099bc:	40010000 	.word	0x40010000

080099c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80099c0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80099c2:	480b      	ldr	r0, [pc, #44]	; (80099f0 <MX_USART1_UART_Init+0x30>)
 80099c4:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <MX_USART1_UART_Init+0x34>)
 80099c6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80099c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80099cc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099ce:	2300      	movs	r3, #0
 80099d0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099d2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099d4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099d6:	220c      	movs	r2, #12
 80099d8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099da:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099dc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099de:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099e0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099e2:	f7fc fa28 	bl	8005e36 <HAL_UART_Init>
 80099e6:	b900      	cbnz	r0, 80099ea <MX_USART1_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 80099e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80099ea:	f7ff fe39 	bl	8009660 <Error_Handler>
}
 80099ee:	e7fb      	b.n	80099e8 <MX_USART1_UART_Init+0x28>
 80099f0:	20004870 	.word	0x20004870
 80099f4:	40011000 	.word	0x40011000

080099f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099fc:	2300      	movs	r3, #0
 80099fe:	9303      	str	r3, [sp, #12]
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	9305      	str	r3, [sp, #20]
 8009a04:	9306      	str	r3, [sp, #24]
 8009a06:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8009a08:	6802      	ldr	r2, [r0, #0]
 8009a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a0e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d001      	beq.n	8009a1a <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009a16:	b008      	add	sp, #32
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a1a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8009a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a20:	f042 0210 	orr.w	r2, r2, #16
 8009a24:	645a      	str	r2, [r3, #68]	; 0x44
 8009a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a28:	f002 0210 	and.w	r2, r2, #16
 8009a2c:	9200      	str	r2, [sp, #0]
 8009a2e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a32:	f042 0202 	orr.w	r2, r2, #2
 8009a36:	631a      	str	r2, [r3, #48]	; 0x30
 8009a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a3a:	f002 0202 	and.w	r2, r2, #2
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a44:	f042 0201 	orr.w	r2, r2, #1
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	9302      	str	r3, [sp, #8]
 8009a52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a58:	2602      	movs	r6, #2
 8009a5a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a5c:	2503      	movs	r5, #3
 8009a5e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009a60:	2407      	movs	r4, #7
 8009a62:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a64:	a903      	add	r1, sp, #12
 8009a66:	4808      	ldr	r0, [pc, #32]	; (8009a88 <HAL_UART_MspInit+0x90>)
 8009a68:	f7f9 fb50 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a72:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a78:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009a7a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a7c:	a903      	add	r1, sp, #12
 8009a7e:	4803      	ldr	r0, [pc, #12]	; (8009a8c <HAL_UART_MspInit+0x94>)
 8009a80:	f7f9 fb44 	bl	800310c <HAL_GPIO_Init>
}
 8009a84:	e7c7      	b.n	8009a16 <HAL_UART_MspInit+0x1e>
 8009a86:	bf00      	nop
 8009a88:	40020400 	.word	0x40020400
 8009a8c:	40020000 	.word	0x40020000

08009a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009a96:	e003      	b.n	8009aa0 <LoopCopyDataInit>

08009a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009a9e:	3104      	adds	r1, #4

08009aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009aa0:	480b      	ldr	r0, [pc, #44]	; (8009ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009aa2:	4b0c      	ldr	r3, [pc, #48]	; (8009ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009aa8:	d3f6      	bcc.n	8009a98 <CopyDataInit>
  ldr  r2, =_sbss
 8009aaa:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009aac:	e002      	b.n	8009ab4 <LoopFillZerobss>

08009aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ab0:	f842 3b04 	str.w	r3, [r2], #4

08009ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ab4:	4b09      	ldr	r3, [pc, #36]	; (8009adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ab8:	d3f9      	bcc.n	8009aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009aba:	f7ff fefb 	bl	80098b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009abe:	f000 f817 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ac2:	f7ff fc21 	bl	8009308 <main>
  bx  lr    
 8009ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009ac8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009acc:	08010d10 	.word	0x08010d10
  ldr  r0, =_sdata
 8009ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ad4:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 8009ad8:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 8009adc:	200048f4 	.word	0x200048f4

08009ae0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ae0:	e7fe      	b.n	8009ae0 <CAN1_RX0_IRQHandler>
	...

08009ae4 <__errno>:
 8009ae4:	4b01      	ldr	r3, [pc, #4]	; (8009aec <__errno+0x8>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	2000005c 	.word	0x2000005c

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4e0d      	ldr	r6, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1ba4      	subs	r4, r4, r6
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2500      	movs	r5, #0
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4e0b      	ldr	r6, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f003 fdb0 	bl	800d668 <_init>
 8009b08:	1ba4      	subs	r4, r4, r6
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2500      	movs	r5, #0
 8009b0e:	42a5      	cmp	r5, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b18:	4798      	blx	r3
 8009b1a:	3501      	adds	r5, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b22:	4798      	blx	r3
 8009b24:	3501      	adds	r5, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	08010d08 	.word	0x08010d08
 8009b2c:	08010d08 	.word	0x08010d08
 8009b30:	08010d08 	.word	0x08010d08
 8009b34:	08010d0c 	.word	0x08010d0c

08009b38 <__itoa>:
 8009b38:	1e93      	subs	r3, r2, #2
 8009b3a:	2b22      	cmp	r3, #34	; 0x22
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	460c      	mov	r4, r1
 8009b40:	d904      	bls.n	8009b4c <__itoa+0x14>
 8009b42:	2300      	movs	r3, #0
 8009b44:	700b      	strb	r3, [r1, #0]
 8009b46:	461c      	mov	r4, r3
 8009b48:	4620      	mov	r0, r4
 8009b4a:	bd10      	pop	{r4, pc}
 8009b4c:	2a0a      	cmp	r2, #10
 8009b4e:	d109      	bne.n	8009b64 <__itoa+0x2c>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	da07      	bge.n	8009b64 <__itoa+0x2c>
 8009b54:	232d      	movs	r3, #45	; 0x2d
 8009b56:	700b      	strb	r3, [r1, #0]
 8009b58:	4240      	negs	r0, r0
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4421      	add	r1, r4
 8009b5e:	f001 fd2d 	bl	800b5bc <__utoa>
 8009b62:	e7f1      	b.n	8009b48 <__itoa+0x10>
 8009b64:	2100      	movs	r1, #0
 8009b66:	e7f9      	b.n	8009b5c <__itoa+0x24>

08009b68 <itoa>:
 8009b68:	f7ff bfe6 	b.w	8009b38 <__itoa>

08009b6c <memcpy>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	1e43      	subs	r3, r0, #1
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	d100      	bne.n	8009b78 <memcpy+0xc>
 8009b76:	bd10      	pop	{r4, pc}
 8009b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b80:	e7f7      	b.n	8009b72 <memcpy+0x6>

08009b82 <memset>:
 8009b82:	4402      	add	r2, r0
 8009b84:	4603      	mov	r3, r0
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d100      	bne.n	8009b8c <memset+0xa>
 8009b8a:	4770      	bx	lr
 8009b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b90:	e7f9      	b.n	8009b86 <memset+0x4>

08009b92 <__cvt>:
 8009b92:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b96:	ec55 4b10 	vmov	r4, r5, d0
 8009b9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ba0:	2d00      	cmp	r5, #0
 8009ba2:	460e      	mov	r6, r1
 8009ba4:	4691      	mov	r9, r2
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	bfb8      	it	lt
 8009baa:	4622      	movlt	r2, r4
 8009bac:	462b      	mov	r3, r5
 8009bae:	f027 0720 	bic.w	r7, r7, #32
 8009bb2:	bfbb      	ittet	lt
 8009bb4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bb8:	461d      	movlt	r5, r3
 8009bba:	2300      	movge	r3, #0
 8009bbc:	232d      	movlt	r3, #45	; 0x2d
 8009bbe:	bfb8      	it	lt
 8009bc0:	4614      	movlt	r4, r2
 8009bc2:	2f46      	cmp	r7, #70	; 0x46
 8009bc4:	700b      	strb	r3, [r1, #0]
 8009bc6:	d004      	beq.n	8009bd2 <__cvt+0x40>
 8009bc8:	2f45      	cmp	r7, #69	; 0x45
 8009bca:	d100      	bne.n	8009bce <__cvt+0x3c>
 8009bcc:	3601      	adds	r6, #1
 8009bce:	2102      	movs	r1, #2
 8009bd0:	e000      	b.n	8009bd4 <__cvt+0x42>
 8009bd2:	2103      	movs	r1, #3
 8009bd4:	ab03      	add	r3, sp, #12
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	ab02      	add	r3, sp, #8
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4632      	mov	r2, r6
 8009bde:	4653      	mov	r3, sl
 8009be0:	ec45 4b10 	vmov	d0, r4, r5
 8009be4:	f001 fdb4 	bl	800b750 <_dtoa_r>
 8009be8:	2f47      	cmp	r7, #71	; 0x47
 8009bea:	4680      	mov	r8, r0
 8009bec:	d102      	bne.n	8009bf4 <__cvt+0x62>
 8009bee:	f019 0f01 	tst.w	r9, #1
 8009bf2:	d026      	beq.n	8009c42 <__cvt+0xb0>
 8009bf4:	2f46      	cmp	r7, #70	; 0x46
 8009bf6:	eb08 0906 	add.w	r9, r8, r6
 8009bfa:	d111      	bne.n	8009c20 <__cvt+0x8e>
 8009bfc:	f898 3000 	ldrb.w	r3, [r8]
 8009c00:	2b30      	cmp	r3, #48	; 0x30
 8009c02:	d10a      	bne.n	8009c1a <__cvt+0x88>
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4620      	mov	r0, r4
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 8009c10:	b918      	cbnz	r0, 8009c1a <__cvt+0x88>
 8009c12:	f1c6 0601 	rsb	r6, r6, #1
 8009c16:	f8ca 6000 	str.w	r6, [sl]
 8009c1a:	f8da 3000 	ldr.w	r3, [sl]
 8009c1e:	4499      	add	r9, r3
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7f6 ff6e 	bl	8000b08 <__aeabi_dcmpeq>
 8009c2c:	b938      	cbnz	r0, 8009c3e <__cvt+0xac>
 8009c2e:	2230      	movs	r2, #48	; 0x30
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	454b      	cmp	r3, r9
 8009c34:	d205      	bcs.n	8009c42 <__cvt+0xb0>
 8009c36:	1c59      	adds	r1, r3, #1
 8009c38:	9103      	str	r1, [sp, #12]
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	e7f8      	b.n	8009c30 <__cvt+0x9e>
 8009c3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c46:	eba3 0308 	sub.w	r3, r3, r8
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	b004      	add	sp, #16
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009c54 <__exponent>:
 8009c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c56:	2900      	cmp	r1, #0
 8009c58:	4604      	mov	r4, r0
 8009c5a:	bfba      	itte	lt
 8009c5c:	4249      	neglt	r1, r1
 8009c5e:	232d      	movlt	r3, #45	; 0x2d
 8009c60:	232b      	movge	r3, #43	; 0x2b
 8009c62:	2909      	cmp	r1, #9
 8009c64:	f804 2b02 	strb.w	r2, [r4], #2
 8009c68:	7043      	strb	r3, [r0, #1]
 8009c6a:	dd20      	ble.n	8009cae <__exponent+0x5a>
 8009c6c:	f10d 0307 	add.w	r3, sp, #7
 8009c70:	461f      	mov	r7, r3
 8009c72:	260a      	movs	r6, #10
 8009c74:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c78:	fb06 1115 	mls	r1, r6, r5, r1
 8009c7c:	3130      	adds	r1, #48	; 0x30
 8009c7e:	2d09      	cmp	r5, #9
 8009c80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c84:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009c88:	4629      	mov	r1, r5
 8009c8a:	dc09      	bgt.n	8009ca0 <__exponent+0x4c>
 8009c8c:	3130      	adds	r1, #48	; 0x30
 8009c8e:	3b02      	subs	r3, #2
 8009c90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c94:	42bb      	cmp	r3, r7
 8009c96:	4622      	mov	r2, r4
 8009c98:	d304      	bcc.n	8009ca4 <__exponent+0x50>
 8009c9a:	1a10      	subs	r0, r2, r0
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	e7e7      	b.n	8009c74 <__exponent+0x20>
 8009ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca8:	f804 2b01 	strb.w	r2, [r4], #1
 8009cac:	e7f2      	b.n	8009c94 <__exponent+0x40>
 8009cae:	2330      	movs	r3, #48	; 0x30
 8009cb0:	4419      	add	r1, r3
 8009cb2:	7083      	strb	r3, [r0, #2]
 8009cb4:	1d02      	adds	r2, r0, #4
 8009cb6:	70c1      	strb	r1, [r0, #3]
 8009cb8:	e7ef      	b.n	8009c9a <__exponent+0x46>
	...

08009cbc <_printf_float>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	b08d      	sub	sp, #52	; 0x34
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009cc8:	4616      	mov	r6, r2
 8009cca:	461f      	mov	r7, r3
 8009ccc:	4605      	mov	r5, r0
 8009cce:	f002 fe23 	bl	800c918 <_localeconv_r>
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f6 fa9a 	bl	8000210 <strlen>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce4:	9005      	str	r0, [sp, #20]
 8009ce6:	3307      	adds	r3, #7
 8009ce8:	f023 0307 	bic.w	r3, r3, #7
 8009cec:	f103 0208 	add.w	r2, r3, #8
 8009cf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cf4:	f8d4 b000 	ldr.w	fp, [r4]
 8009cf8:	f8c8 2000 	str.w	r2, [r8]
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d16:	4ba7      	ldr	r3, [pc, #668]	; (8009fb4 <_printf_float+0x2f8>)
 8009d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1c:	f7f6 ff26 	bl	8000b6c <__aeabi_dcmpun>
 8009d20:	bb70      	cbnz	r0, 8009d80 <_printf_float+0xc4>
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d26:	4ba3      	ldr	r3, [pc, #652]	; (8009fb4 <_printf_float+0x2f8>)
 8009d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d2c:	f7f6 ff00 	bl	8000b30 <__aeabi_dcmple>
 8009d30:	bb30      	cbnz	r0, 8009d80 <_printf_float+0xc4>
 8009d32:	2200      	movs	r2, #0
 8009d34:	2300      	movs	r3, #0
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f7f6 feef 	bl	8000b1c <__aeabi_dcmplt>
 8009d3e:	b110      	cbz	r0, 8009d46 <_printf_float+0x8a>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d46:	4a9c      	ldr	r2, [pc, #624]	; (8009fb8 <_printf_float+0x2fc>)
 8009d48:	4b9c      	ldr	r3, [pc, #624]	; (8009fbc <_printf_float+0x300>)
 8009d4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009d4e:	bf8c      	ite	hi
 8009d50:	4690      	movhi	r8, r2
 8009d52:	4698      	movls	r8, r3
 8009d54:	2303      	movs	r3, #3
 8009d56:	f02b 0204 	bic.w	r2, fp, #4
 8009d5a:	6123      	str	r3, [r4, #16]
 8009d5c:	6022      	str	r2, [r4, #0]
 8009d5e:	f04f 0900 	mov.w	r9, #0
 8009d62:	9700      	str	r7, [sp, #0]
 8009d64:	4633      	mov	r3, r6
 8009d66:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f9e6 	bl	800a13c <_printf_common>
 8009d70:	3001      	adds	r0, #1
 8009d72:	f040 808d 	bne.w	8009e90 <_printf_float+0x1d4>
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7a:	b00d      	add	sp, #52	; 0x34
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	4642      	mov	r2, r8
 8009d82:	464b      	mov	r3, r9
 8009d84:	4640      	mov	r0, r8
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7f6 fef0 	bl	8000b6c <__aeabi_dcmpun>
 8009d8c:	b110      	cbz	r0, 8009d94 <_printf_float+0xd8>
 8009d8e:	4a8c      	ldr	r2, [pc, #560]	; (8009fc0 <_printf_float+0x304>)
 8009d90:	4b8c      	ldr	r3, [pc, #560]	; (8009fc4 <_printf_float+0x308>)
 8009d92:	e7da      	b.n	8009d4a <_printf_float+0x8e>
 8009d94:	6861      	ldr	r1, [r4, #4]
 8009d96:	1c4b      	adds	r3, r1, #1
 8009d98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009d9c:	a80a      	add	r0, sp, #40	; 0x28
 8009d9e:	d13e      	bne.n	8009e1e <_printf_float+0x162>
 8009da0:	2306      	movs	r3, #6
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	2300      	movs	r3, #0
 8009da6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009daa:	ab09      	add	r3, sp, #36	; 0x24
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	ec49 8b10 	vmov	d0, r8, r9
 8009db2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009db6:	6022      	str	r2, [r4, #0]
 8009db8:	f8cd a004 	str.w	sl, [sp, #4]
 8009dbc:	6861      	ldr	r1, [r4, #4]
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f7ff fee7 	bl	8009b92 <__cvt>
 8009dc4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009dc8:	2b47      	cmp	r3, #71	; 0x47
 8009dca:	4680      	mov	r8, r0
 8009dcc:	d109      	bne.n	8009de2 <_printf_float+0x126>
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	1cd8      	adds	r0, r3, #3
 8009dd2:	db02      	blt.n	8009dda <_printf_float+0x11e>
 8009dd4:	6862      	ldr	r2, [r4, #4]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	dd47      	ble.n	8009e6a <_printf_float+0x1ae>
 8009dda:	f1aa 0a02 	sub.w	sl, sl, #2
 8009dde:	fa5f fa8a 	uxtb.w	sl, sl
 8009de2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de8:	d824      	bhi.n	8009e34 <_printf_float+0x178>
 8009dea:	3901      	subs	r1, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009df2:	9109      	str	r1, [sp, #36]	; 0x24
 8009df4:	f7ff ff2e 	bl	8009c54 <__exponent>
 8009df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dfa:	1813      	adds	r3, r2, r0
 8009dfc:	2a01      	cmp	r2, #1
 8009dfe:	4681      	mov	r9, r0
 8009e00:	6123      	str	r3, [r4, #16]
 8009e02:	dc02      	bgt.n	8009e0a <_printf_float+0x14e>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	07d1      	lsls	r1, r2, #31
 8009e08:	d501      	bpl.n	8009e0e <_printf_float+0x152>
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0a5      	beq.n	8009d62 <_printf_float+0xa6>
 8009e16:	232d      	movs	r3, #45	; 0x2d
 8009e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e1c:	e7a1      	b.n	8009d62 <_printf_float+0xa6>
 8009e1e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009e22:	f000 8177 	beq.w	800a114 <_printf_float+0x458>
 8009e26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009e2a:	d1bb      	bne.n	8009da4 <_printf_float+0xe8>
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d1b9      	bne.n	8009da4 <_printf_float+0xe8>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e7b6      	b.n	8009da2 <_printf_float+0xe6>
 8009e34:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009e38:	d119      	bne.n	8009e6e <_printf_float+0x1b2>
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	dd0c      	ble.n	8009e5a <_printf_float+0x19e>
 8009e40:	6121      	str	r1, [r4, #16]
 8009e42:	b913      	cbnz	r3, 8009e4a <_printf_float+0x18e>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	07d2      	lsls	r2, r2, #31
 8009e48:	d502      	bpl.n	8009e50 <_printf_float+0x194>
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	440b      	add	r3, r1
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e54:	f04f 0900 	mov.w	r9, #0
 8009e58:	e7d9      	b.n	8009e0e <_printf_float+0x152>
 8009e5a:	b913      	cbnz	r3, 8009e62 <_printf_float+0x1a6>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	07d0      	lsls	r0, r2, #31
 8009e60:	d501      	bpl.n	8009e66 <_printf_float+0x1aa>
 8009e62:	3302      	adds	r3, #2
 8009e64:	e7f3      	b.n	8009e4e <_printf_float+0x192>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e7f1      	b.n	8009e4e <_printf_float+0x192>
 8009e6a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009e6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e72:	4293      	cmp	r3, r2
 8009e74:	db05      	blt.n	8009e82 <_printf_float+0x1c6>
 8009e76:	6822      	ldr	r2, [r4, #0]
 8009e78:	6123      	str	r3, [r4, #16]
 8009e7a:	07d1      	lsls	r1, r2, #31
 8009e7c:	d5e8      	bpl.n	8009e50 <_printf_float+0x194>
 8009e7e:	3301      	adds	r3, #1
 8009e80:	e7e5      	b.n	8009e4e <_printf_float+0x192>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfd4      	ite	le
 8009e86:	f1c3 0302 	rsble	r3, r3, #2
 8009e8a:	2301      	movgt	r3, #1
 8009e8c:	4413      	add	r3, r2
 8009e8e:	e7de      	b.n	8009e4e <_printf_float+0x192>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	055a      	lsls	r2, r3, #21
 8009e94:	d407      	bmi.n	8009ea6 <_printf_float+0x1ea>
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	4642      	mov	r2, r8
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	47b8      	blx	r7
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d12b      	bne.n	8009efc <_printf_float+0x240>
 8009ea4:	e767      	b.n	8009d76 <_printf_float+0xba>
 8009ea6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009eaa:	f240 80dc 	bls.w	800a066 <_printf_float+0x3aa>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eb6:	f7f6 fe27 	bl	8000b08 <__aeabi_dcmpeq>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d033      	beq.n	8009f26 <_printf_float+0x26a>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4a41      	ldr	r2, [pc, #260]	; (8009fc8 <_printf_float+0x30c>)
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f af54 	beq.w	8009d76 <_printf_float+0xba>
 8009ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	db02      	blt.n	8009edc <_printf_float+0x220>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	07d8      	lsls	r0, r3, #31
 8009eda:	d50f      	bpl.n	8009efc <_printf_float+0x240>
 8009edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f af45 	beq.w	8009d76 <_printf_float+0xba>
 8009eec:	f04f 0800 	mov.w	r8, #0
 8009ef0:	f104 091a 	add.w	r9, r4, #26
 8009ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4543      	cmp	r3, r8
 8009efa:	dc09      	bgt.n	8009f10 <_printf_float+0x254>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	079b      	lsls	r3, r3, #30
 8009f00:	f100 8103 	bmi.w	800a10a <_printf_float+0x44e>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f08:	4298      	cmp	r0, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4618      	movlt	r0, r3
 8009f0e:	e734      	b.n	8009d7a <_printf_float+0xbe>
 8009f10:	2301      	movs	r3, #1
 8009f12:	464a      	mov	r2, r9
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af2b 	beq.w	8009d76 <_printf_float+0xba>
 8009f20:	f108 0801 	add.w	r8, r8, #1
 8009f24:	e7e6      	b.n	8009ef4 <_printf_float+0x238>
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dc2b      	bgt.n	8009f84 <_printf_float+0x2c8>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4a26      	ldr	r2, [pc, #152]	; (8009fc8 <_printf_float+0x30c>)
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f af1d 	beq.w	8009d76 <_printf_float+0xba>
 8009f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3e:	b923      	cbnz	r3, 8009f4a <_printf_float+0x28e>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	b913      	cbnz	r3, 8009f4a <_printf_float+0x28e>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d5d8      	bpl.n	8009efc <_printf_float+0x240>
 8009f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f4e:	4631      	mov	r1, r6
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b8      	blx	r7
 8009f54:	3001      	adds	r0, #1
 8009f56:	f43f af0e 	beq.w	8009d76 <_printf_float+0xba>
 8009f5a:	f04f 0900 	mov.w	r9, #0
 8009f5e:	f104 0a1a 	add.w	sl, r4, #26
 8009f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f64:	425b      	negs	r3, r3
 8009f66:	454b      	cmp	r3, r9
 8009f68:	dc01      	bgt.n	8009f6e <_printf_float+0x2b2>
 8009f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6c:	e794      	b.n	8009e98 <_printf_float+0x1dc>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4652      	mov	r2, sl
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f aefc 	beq.w	8009d76 <_printf_float+0xba>
 8009f7e:	f109 0901 	add.w	r9, r9, #1
 8009f82:	e7ee      	b.n	8009f62 <_printf_float+0x2a6>
 8009f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	bfa8      	it	ge
 8009f8c:	461a      	movge	r2, r3
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	4691      	mov	r9, r2
 8009f92:	dd07      	ble.n	8009fa4 <_printf_float+0x2e8>
 8009f94:	4613      	mov	r3, r2
 8009f96:	4631      	mov	r1, r6
 8009f98:	4642      	mov	r2, r8
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f aee9 	beq.w	8009d76 <_printf_float+0xba>
 8009fa4:	f104 031a 	add.w	r3, r4, #26
 8009fa8:	f04f 0b00 	mov.w	fp, #0
 8009fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb0:	9306      	str	r3, [sp, #24]
 8009fb2:	e015      	b.n	8009fe0 <_printf_float+0x324>
 8009fb4:	7fefffff 	.word	0x7fefffff
 8009fb8:	08010a28 	.word	0x08010a28
 8009fbc:	08010a24 	.word	0x08010a24
 8009fc0:	08010a30 	.word	0x08010a30
 8009fc4:	08010a2c 	.word	0x08010a2c
 8009fc8:	08010a34 	.word	0x08010a34
 8009fcc:	2301      	movs	r3, #1
 8009fce:	9a06      	ldr	r2, [sp, #24]
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f aecd 	beq.w	8009d76 <_printf_float+0xba>
 8009fdc:	f10b 0b01 	add.w	fp, fp, #1
 8009fe0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009fe4:	ebaa 0309 	sub.w	r3, sl, r9
 8009fe8:	455b      	cmp	r3, fp
 8009fea:	dcef      	bgt.n	8009fcc <_printf_float+0x310>
 8009fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	44d0      	add	r8, sl
 8009ff4:	db15      	blt.n	800a022 <_printf_float+0x366>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	07da      	lsls	r2, r3, #31
 8009ffa:	d412      	bmi.n	800a022 <_printf_float+0x366>
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a000:	eba3 020a 	sub.w	r2, r3, sl
 800a004:	eba3 0a01 	sub.w	sl, r3, r1
 800a008:	4592      	cmp	sl, r2
 800a00a:	bfa8      	it	ge
 800a00c:	4692      	movge	sl, r2
 800a00e:	f1ba 0f00 	cmp.w	sl, #0
 800a012:	dc0e      	bgt.n	800a032 <_printf_float+0x376>
 800a014:	f04f 0800 	mov.w	r8, #0
 800a018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a01c:	f104 091a 	add.w	r9, r4, #26
 800a020:	e019      	b.n	800a056 <_printf_float+0x39a>
 800a022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a026:	4631      	mov	r1, r6
 800a028:	4628      	mov	r0, r5
 800a02a:	47b8      	blx	r7
 800a02c:	3001      	adds	r0, #1
 800a02e:	d1e5      	bne.n	8009ffc <_printf_float+0x340>
 800a030:	e6a1      	b.n	8009d76 <_printf_float+0xba>
 800a032:	4653      	mov	r3, sl
 800a034:	4642      	mov	r2, r8
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	d1e9      	bne.n	800a014 <_printf_float+0x358>
 800a040:	e699      	b.n	8009d76 <_printf_float+0xba>
 800a042:	2301      	movs	r3, #1
 800a044:	464a      	mov	r2, r9
 800a046:	4631      	mov	r1, r6
 800a048:	4628      	mov	r0, r5
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f ae92 	beq.w	8009d76 <_printf_float+0xba>
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	eba3 030a 	sub.w	r3, r3, sl
 800a060:	4543      	cmp	r3, r8
 800a062:	dcee      	bgt.n	800a042 <_printf_float+0x386>
 800a064:	e74a      	b.n	8009efc <_printf_float+0x240>
 800a066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a068:	2a01      	cmp	r2, #1
 800a06a:	dc01      	bgt.n	800a070 <_printf_float+0x3b4>
 800a06c:	07db      	lsls	r3, r3, #31
 800a06e:	d53a      	bpl.n	800a0e6 <_printf_float+0x42a>
 800a070:	2301      	movs	r3, #1
 800a072:	4642      	mov	r2, r8
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	47b8      	blx	r7
 800a07a:	3001      	adds	r0, #1
 800a07c:	f43f ae7b 	beq.w	8009d76 <_printf_float+0xba>
 800a080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a084:	4631      	mov	r1, r6
 800a086:	4628      	mov	r0, r5
 800a088:	47b8      	blx	r7
 800a08a:	3001      	adds	r0, #1
 800a08c:	f108 0801 	add.w	r8, r8, #1
 800a090:	f43f ae71 	beq.w	8009d76 <_printf_float+0xba>
 800a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a096:	2200      	movs	r2, #0
 800a098:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f7f6 fd31 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a6:	b9c8      	cbnz	r0, 800a0dc <_printf_float+0x420>
 800a0a8:	4653      	mov	r3, sl
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d10e      	bne.n	800a0d4 <_printf_float+0x418>
 800a0b6:	e65e      	b.n	8009d76 <_printf_float+0xba>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f ae57 	beq.w	8009d76 <_printf_float+0xba>
 800a0c8:	f108 0801 	add.w	r8, r8, #1
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	dcf1      	bgt.n	800a0b8 <_printf_float+0x3fc>
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0da:	e6de      	b.n	8009e9a <_printf_float+0x1de>
 800a0dc:	f04f 0800 	mov.w	r8, #0
 800a0e0:	f104 0a1a 	add.w	sl, r4, #26
 800a0e4:	e7f2      	b.n	800a0cc <_printf_float+0x410>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e7df      	b.n	800a0aa <_printf_float+0x3ee>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	464a      	mov	r2, r9
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f ae3e 	beq.w	8009d76 <_printf_float+0xba>
 800a0fa:	f108 0801 	add.w	r8, r8, #1
 800a0fe:	68e3      	ldr	r3, [r4, #12]
 800a100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	4543      	cmp	r3, r8
 800a106:	dcf0      	bgt.n	800a0ea <_printf_float+0x42e>
 800a108:	e6fc      	b.n	8009f04 <_printf_float+0x248>
 800a10a:	f04f 0800 	mov.w	r8, #0
 800a10e:	f104 0919 	add.w	r9, r4, #25
 800a112:	e7f4      	b.n	800a0fe <_printf_float+0x442>
 800a114:	2900      	cmp	r1, #0
 800a116:	f43f ae8b 	beq.w	8009e30 <_printf_float+0x174>
 800a11a:	2300      	movs	r3, #0
 800a11c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a120:	ab09      	add	r3, sp, #36	; 0x24
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	ec49 8b10 	vmov	d0, r8, r9
 800a128:	6022      	str	r2, [r4, #0]
 800a12a:	f8cd a004 	str.w	sl, [sp, #4]
 800a12e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a132:	4628      	mov	r0, r5
 800a134:	f7ff fd2d 	bl	8009b92 <__cvt>
 800a138:	4680      	mov	r8, r0
 800a13a:	e648      	b.n	8009dce <_printf_float+0x112>

0800a13c <_printf_common>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	4691      	mov	r9, r2
 800a142:	461f      	mov	r7, r3
 800a144:	688a      	ldr	r2, [r1, #8]
 800a146:	690b      	ldr	r3, [r1, #16]
 800a148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a14c:	4293      	cmp	r3, r2
 800a14e:	bfb8      	it	lt
 800a150:	4613      	movlt	r3, r2
 800a152:	f8c9 3000 	str.w	r3, [r9]
 800a156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a15a:	4606      	mov	r6, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	b112      	cbz	r2, 800a166 <_printf_common+0x2a>
 800a160:	3301      	adds	r3, #1
 800a162:	f8c9 3000 	str.w	r3, [r9]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	0699      	lsls	r1, r3, #26
 800a16a:	bf42      	ittt	mi
 800a16c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a170:	3302      	addmi	r3, #2
 800a172:	f8c9 3000 	strmi.w	r3, [r9]
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	f015 0506 	ands.w	r5, r5, #6
 800a17c:	d107      	bne.n	800a18e <_printf_common+0x52>
 800a17e:	f104 0a19 	add.w	sl, r4, #25
 800a182:	68e3      	ldr	r3, [r4, #12]
 800a184:	f8d9 2000 	ldr.w	r2, [r9]
 800a188:	1a9b      	subs	r3, r3, r2
 800a18a:	42ab      	cmp	r3, r5
 800a18c:	dc28      	bgt.n	800a1e0 <_printf_common+0xa4>
 800a18e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	3300      	adds	r3, #0
 800a196:	bf18      	it	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	0692      	lsls	r2, r2, #26
 800a19c:	d42d      	bmi.n	800a1fa <_printf_common+0xbe>
 800a19e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	47c0      	blx	r8
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d020      	beq.n	800a1ee <_printf_common+0xb2>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	68e5      	ldr	r5, [r4, #12]
 800a1b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1b4:	f003 0306 	and.w	r3, r3, #6
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	bf08      	it	eq
 800a1bc:	1aad      	subeq	r5, r5, r2
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	bf0c      	ite	eq
 800a1c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c8:	2500      	movne	r5, #0
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	bfc4      	itt	gt
 800a1ce:	1a9b      	subgt	r3, r3, r2
 800a1d0:	18ed      	addgt	r5, r5, r3
 800a1d2:	f04f 0900 	mov.w	r9, #0
 800a1d6:	341a      	adds	r4, #26
 800a1d8:	454d      	cmp	r5, r9
 800a1da:	d11a      	bne.n	800a212 <_printf_common+0xd6>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	e008      	b.n	800a1f2 <_printf_common+0xb6>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	47c0      	blx	r8
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d103      	bne.n	800a1f6 <_printf_common+0xba>
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	e7c3      	b.n	800a182 <_printf_common+0x46>
 800a1fa:	18e1      	adds	r1, r4, r3
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	2030      	movs	r0, #48	; 0x30
 800a200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a204:	4422      	add	r2, r4
 800a206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a20a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a20e:	3302      	adds	r3, #2
 800a210:	e7c5      	b.n	800a19e <_printf_common+0x62>
 800a212:	2301      	movs	r3, #1
 800a214:	4622      	mov	r2, r4
 800a216:	4639      	mov	r1, r7
 800a218:	4630      	mov	r0, r6
 800a21a:	47c0      	blx	r8
 800a21c:	3001      	adds	r0, #1
 800a21e:	d0e6      	beq.n	800a1ee <_printf_common+0xb2>
 800a220:	f109 0901 	add.w	r9, r9, #1
 800a224:	e7d8      	b.n	800a1d8 <_printf_common+0x9c>
	...

0800a228 <_printf_i>:
 800a228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a22c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a230:	460c      	mov	r4, r1
 800a232:	7e09      	ldrb	r1, [r1, #24]
 800a234:	b085      	sub	sp, #20
 800a236:	296e      	cmp	r1, #110	; 0x6e
 800a238:	4617      	mov	r7, r2
 800a23a:	4606      	mov	r6, r0
 800a23c:	4698      	mov	r8, r3
 800a23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a240:	f000 80b3 	beq.w	800a3aa <_printf_i+0x182>
 800a244:	d822      	bhi.n	800a28c <_printf_i+0x64>
 800a246:	2963      	cmp	r1, #99	; 0x63
 800a248:	d036      	beq.n	800a2b8 <_printf_i+0x90>
 800a24a:	d80a      	bhi.n	800a262 <_printf_i+0x3a>
 800a24c:	2900      	cmp	r1, #0
 800a24e:	f000 80b9 	beq.w	800a3c4 <_printf_i+0x19c>
 800a252:	2958      	cmp	r1, #88	; 0x58
 800a254:	f000 8083 	beq.w	800a35e <_printf_i+0x136>
 800a258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a25c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a260:	e032      	b.n	800a2c8 <_printf_i+0xa0>
 800a262:	2964      	cmp	r1, #100	; 0x64
 800a264:	d001      	beq.n	800a26a <_printf_i+0x42>
 800a266:	2969      	cmp	r1, #105	; 0x69
 800a268:	d1f6      	bne.n	800a258 <_printf_i+0x30>
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	6813      	ldr	r3, [r2, #0]
 800a26e:	0605      	lsls	r5, r0, #24
 800a270:	f103 0104 	add.w	r1, r3, #4
 800a274:	d52a      	bpl.n	800a2cc <_printf_i+0xa4>
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da03      	bge.n	800a286 <_printf_i+0x5e>
 800a27e:	222d      	movs	r2, #45	; 0x2d
 800a280:	425b      	negs	r3, r3
 800a282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a286:	486f      	ldr	r0, [pc, #444]	; (800a444 <_printf_i+0x21c>)
 800a288:	220a      	movs	r2, #10
 800a28a:	e039      	b.n	800a300 <_printf_i+0xd8>
 800a28c:	2973      	cmp	r1, #115	; 0x73
 800a28e:	f000 809d 	beq.w	800a3cc <_printf_i+0x1a4>
 800a292:	d808      	bhi.n	800a2a6 <_printf_i+0x7e>
 800a294:	296f      	cmp	r1, #111	; 0x6f
 800a296:	d020      	beq.n	800a2da <_printf_i+0xb2>
 800a298:	2970      	cmp	r1, #112	; 0x70
 800a29a:	d1dd      	bne.n	800a258 <_printf_i+0x30>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	f043 0320 	orr.w	r3, r3, #32
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	e003      	b.n	800a2ae <_printf_i+0x86>
 800a2a6:	2975      	cmp	r1, #117	; 0x75
 800a2a8:	d017      	beq.n	800a2da <_printf_i+0xb2>
 800a2aa:	2978      	cmp	r1, #120	; 0x78
 800a2ac:	d1d4      	bne.n	800a258 <_printf_i+0x30>
 800a2ae:	2378      	movs	r3, #120	; 0x78
 800a2b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2b4:	4864      	ldr	r0, [pc, #400]	; (800a448 <_printf_i+0x220>)
 800a2b6:	e055      	b.n	800a364 <_printf_i+0x13c>
 800a2b8:	6813      	ldr	r3, [r2, #0]
 800a2ba:	1d19      	adds	r1, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6011      	str	r1, [r2, #0]
 800a2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e08c      	b.n	800a3e6 <_printf_i+0x1be>
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6011      	str	r1, [r2, #0]
 800a2d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2d4:	bf18      	it	ne
 800a2d6:	b21b      	sxthne	r3, r3
 800a2d8:	e7cf      	b.n	800a27a <_printf_i+0x52>
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	6825      	ldr	r5, [r4, #0]
 800a2de:	1d18      	adds	r0, r3, #4
 800a2e0:	6010      	str	r0, [r2, #0]
 800a2e2:	0628      	lsls	r0, r5, #24
 800a2e4:	d501      	bpl.n	800a2ea <_printf_i+0xc2>
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	e002      	b.n	800a2f0 <_printf_i+0xc8>
 800a2ea:	0668      	lsls	r0, r5, #25
 800a2ec:	d5fb      	bpl.n	800a2e6 <_printf_i+0xbe>
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	4854      	ldr	r0, [pc, #336]	; (800a444 <_printf_i+0x21c>)
 800a2f2:	296f      	cmp	r1, #111	; 0x6f
 800a2f4:	bf14      	ite	ne
 800a2f6:	220a      	movne	r2, #10
 800a2f8:	2208      	moveq	r2, #8
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a300:	6865      	ldr	r5, [r4, #4]
 800a302:	60a5      	str	r5, [r4, #8]
 800a304:	2d00      	cmp	r5, #0
 800a306:	f2c0 8095 	blt.w	800a434 <_printf_i+0x20c>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	f021 0104 	bic.w	r1, r1, #4
 800a310:	6021      	str	r1, [r4, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d13d      	bne.n	800a392 <_printf_i+0x16a>
 800a316:	2d00      	cmp	r5, #0
 800a318:	f040 808e 	bne.w	800a438 <_printf_i+0x210>
 800a31c:	4665      	mov	r5, ip
 800a31e:	2a08      	cmp	r2, #8
 800a320:	d10b      	bne.n	800a33a <_printf_i+0x112>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	07db      	lsls	r3, r3, #31
 800a326:	d508      	bpl.n	800a33a <_printf_i+0x112>
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	6862      	ldr	r2, [r4, #4]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	bfde      	ittt	le
 800a330:	2330      	movle	r3, #48	; 0x30
 800a332:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a336:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a33a:	ebac 0305 	sub.w	r3, ip, r5
 800a33e:	6123      	str	r3, [r4, #16]
 800a340:	f8cd 8000 	str.w	r8, [sp]
 800a344:	463b      	mov	r3, r7
 800a346:	aa03      	add	r2, sp, #12
 800a348:	4621      	mov	r1, r4
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff fef6 	bl	800a13c <_printf_common>
 800a350:	3001      	adds	r0, #1
 800a352:	d14d      	bne.n	800a3f0 <_printf_i+0x1c8>
 800a354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a358:	b005      	add	sp, #20
 800a35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a35e:	4839      	ldr	r0, [pc, #228]	; (800a444 <_printf_i+0x21c>)
 800a360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a364:	6813      	ldr	r3, [r2, #0]
 800a366:	6821      	ldr	r1, [r4, #0]
 800a368:	1d1d      	adds	r5, r3, #4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6015      	str	r5, [r2, #0]
 800a36e:	060a      	lsls	r2, r1, #24
 800a370:	d50b      	bpl.n	800a38a <_printf_i+0x162>
 800a372:	07ca      	lsls	r2, r1, #31
 800a374:	bf44      	itt	mi
 800a376:	f041 0120 	orrmi.w	r1, r1, #32
 800a37a:	6021      	strmi	r1, [r4, #0]
 800a37c:	b91b      	cbnz	r3, 800a386 <_printf_i+0x15e>
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	f022 0220 	bic.w	r2, r2, #32
 800a384:	6022      	str	r2, [r4, #0]
 800a386:	2210      	movs	r2, #16
 800a388:	e7b7      	b.n	800a2fa <_printf_i+0xd2>
 800a38a:	064d      	lsls	r5, r1, #25
 800a38c:	bf48      	it	mi
 800a38e:	b29b      	uxthmi	r3, r3
 800a390:	e7ef      	b.n	800a372 <_printf_i+0x14a>
 800a392:	4665      	mov	r5, ip
 800a394:	fbb3 f1f2 	udiv	r1, r3, r2
 800a398:	fb02 3311 	mls	r3, r2, r1, r3
 800a39c:	5cc3      	ldrb	r3, [r0, r3]
 800a39e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	d1f5      	bne.n	800a394 <_printf_i+0x16c>
 800a3a8:	e7b9      	b.n	800a31e <_printf_i+0xf6>
 800a3aa:	6813      	ldr	r3, [r2, #0]
 800a3ac:	6825      	ldr	r5, [r4, #0]
 800a3ae:	6961      	ldr	r1, [r4, #20]
 800a3b0:	1d18      	adds	r0, r3, #4
 800a3b2:	6010      	str	r0, [r2, #0]
 800a3b4:	0628      	lsls	r0, r5, #24
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	d501      	bpl.n	800a3be <_printf_i+0x196>
 800a3ba:	6019      	str	r1, [r3, #0]
 800a3bc:	e002      	b.n	800a3c4 <_printf_i+0x19c>
 800a3be:	066a      	lsls	r2, r5, #25
 800a3c0:	d5fb      	bpl.n	800a3ba <_printf_i+0x192>
 800a3c2:	8019      	strh	r1, [r3, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6123      	str	r3, [r4, #16]
 800a3c8:	4665      	mov	r5, ip
 800a3ca:	e7b9      	b.n	800a340 <_printf_i+0x118>
 800a3cc:	6813      	ldr	r3, [r2, #0]
 800a3ce:	1d19      	adds	r1, r3, #4
 800a3d0:	6011      	str	r1, [r2, #0]
 800a3d2:	681d      	ldr	r5, [r3, #0]
 800a3d4:	6862      	ldr	r2, [r4, #4]
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7f5 ff21 	bl	8000220 <memchr>
 800a3de:	b108      	cbz	r0, 800a3e4 <_printf_i+0x1bc>
 800a3e0:	1b40      	subs	r0, r0, r5
 800a3e2:	6060      	str	r0, [r4, #4]
 800a3e4:	6863      	ldr	r3, [r4, #4]
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ee:	e7a7      	b.n	800a340 <_printf_i+0x118>
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	47c0      	blx	r8
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d0aa      	beq.n	800a354 <_printf_i+0x12c>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	079b      	lsls	r3, r3, #30
 800a402:	d413      	bmi.n	800a42c <_printf_i+0x204>
 800a404:	68e0      	ldr	r0, [r4, #12]
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	4298      	cmp	r0, r3
 800a40a:	bfb8      	it	lt
 800a40c:	4618      	movlt	r0, r3
 800a40e:	e7a3      	b.n	800a358 <_printf_i+0x130>
 800a410:	2301      	movs	r3, #1
 800a412:	464a      	mov	r2, r9
 800a414:	4639      	mov	r1, r7
 800a416:	4630      	mov	r0, r6
 800a418:	47c0      	blx	r8
 800a41a:	3001      	adds	r0, #1
 800a41c:	d09a      	beq.n	800a354 <_printf_i+0x12c>
 800a41e:	3501      	adds	r5, #1
 800a420:	68e3      	ldr	r3, [r4, #12]
 800a422:	9a03      	ldr	r2, [sp, #12]
 800a424:	1a9b      	subs	r3, r3, r2
 800a426:	42ab      	cmp	r3, r5
 800a428:	dcf2      	bgt.n	800a410 <_printf_i+0x1e8>
 800a42a:	e7eb      	b.n	800a404 <_printf_i+0x1dc>
 800a42c:	2500      	movs	r5, #0
 800a42e:	f104 0919 	add.w	r9, r4, #25
 800a432:	e7f5      	b.n	800a420 <_printf_i+0x1f8>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1ac      	bne.n	800a392 <_printf_i+0x16a>
 800a438:	7803      	ldrb	r3, [r0, #0]
 800a43a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a43e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a442:	e76c      	b.n	800a31e <_printf_i+0xf6>
 800a444:	08010a36 	.word	0x08010a36
 800a448:	08010a47 	.word	0x08010a47

0800a44c <_scanf_float>:
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	469a      	mov	sl, r3
 800a452:	688b      	ldr	r3, [r1, #8]
 800a454:	4616      	mov	r6, r2
 800a456:	1e5a      	subs	r2, r3, #1
 800a458:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a45c:	b087      	sub	sp, #28
 800a45e:	bf83      	ittte	hi
 800a460:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a464:	189b      	addhi	r3, r3, r2
 800a466:	9301      	strhi	r3, [sp, #4]
 800a468:	2300      	movls	r3, #0
 800a46a:	bf86      	itte	hi
 800a46c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a470:	608b      	strhi	r3, [r1, #8]
 800a472:	9301      	strls	r3, [sp, #4]
 800a474:	680b      	ldr	r3, [r1, #0]
 800a476:	4688      	mov	r8, r1
 800a478:	f04f 0b00 	mov.w	fp, #0
 800a47c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a480:	f848 3b1c 	str.w	r3, [r8], #28
 800a484:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a488:	4607      	mov	r7, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	4645      	mov	r5, r8
 800a48e:	465a      	mov	r2, fp
 800a490:	46d9      	mov	r9, fp
 800a492:	f8cd b008 	str.w	fp, [sp, #8]
 800a496:	68a1      	ldr	r1, [r4, #8]
 800a498:	b181      	cbz	r1, 800a4bc <_scanf_float+0x70>
 800a49a:	6833      	ldr	r3, [r6, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b49      	cmp	r3, #73	; 0x49
 800a4a0:	d071      	beq.n	800a586 <_scanf_float+0x13a>
 800a4a2:	d84d      	bhi.n	800a540 <_scanf_float+0xf4>
 800a4a4:	2b39      	cmp	r3, #57	; 0x39
 800a4a6:	d840      	bhi.n	800a52a <_scanf_float+0xde>
 800a4a8:	2b31      	cmp	r3, #49	; 0x31
 800a4aa:	f080 8088 	bcs.w	800a5be <_scanf_float+0x172>
 800a4ae:	2b2d      	cmp	r3, #45	; 0x2d
 800a4b0:	f000 8090 	beq.w	800a5d4 <_scanf_float+0x188>
 800a4b4:	d815      	bhi.n	800a4e2 <_scanf_float+0x96>
 800a4b6:	2b2b      	cmp	r3, #43	; 0x2b
 800a4b8:	f000 808c 	beq.w	800a5d4 <_scanf_float+0x188>
 800a4bc:	f1b9 0f00 	cmp.w	r9, #0
 800a4c0:	d003      	beq.n	800a4ca <_scanf_float+0x7e>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	3a01      	subs	r2, #1
 800a4cc:	2a01      	cmp	r2, #1
 800a4ce:	f200 80ea 	bhi.w	800a6a6 <_scanf_float+0x25a>
 800a4d2:	4545      	cmp	r5, r8
 800a4d4:	f200 80dc 	bhi.w	800a690 <_scanf_float+0x244>
 800a4d8:	2601      	movs	r6, #1
 800a4da:	4630      	mov	r0, r6
 800a4dc:	b007      	add	sp, #28
 800a4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4e4:	f000 809f 	beq.w	800a626 <_scanf_float+0x1da>
 800a4e8:	2b30      	cmp	r3, #48	; 0x30
 800a4ea:	d1e7      	bne.n	800a4bc <_scanf_float+0x70>
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a4f2:	d064      	beq.n	800a5be <_scanf_float+0x172>
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a4fa:	6020      	str	r0, [r4, #0]
 800a4fc:	f109 0901 	add.w	r9, r9, #1
 800a500:	b11b      	cbz	r3, 800a50a <_scanf_float+0xbe>
 800a502:	3b01      	subs	r3, #1
 800a504:	3101      	adds	r1, #1
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	60a1      	str	r1, [r4, #8]
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	3301      	adds	r3, #1
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	6873      	ldr	r3, [r6, #4]
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	6073      	str	r3, [r6, #4]
 800a51e:	f340 80ac 	ble.w	800a67a <_scanf_float+0x22e>
 800a522:	6833      	ldr	r3, [r6, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	6033      	str	r3, [r6, #0]
 800a528:	e7b5      	b.n	800a496 <_scanf_float+0x4a>
 800a52a:	2b45      	cmp	r3, #69	; 0x45
 800a52c:	f000 8085 	beq.w	800a63a <_scanf_float+0x1ee>
 800a530:	2b46      	cmp	r3, #70	; 0x46
 800a532:	d06a      	beq.n	800a60a <_scanf_float+0x1be>
 800a534:	2b41      	cmp	r3, #65	; 0x41
 800a536:	d1c1      	bne.n	800a4bc <_scanf_float+0x70>
 800a538:	2a01      	cmp	r2, #1
 800a53a:	d1bf      	bne.n	800a4bc <_scanf_float+0x70>
 800a53c:	2202      	movs	r2, #2
 800a53e:	e046      	b.n	800a5ce <_scanf_float+0x182>
 800a540:	2b65      	cmp	r3, #101	; 0x65
 800a542:	d07a      	beq.n	800a63a <_scanf_float+0x1ee>
 800a544:	d818      	bhi.n	800a578 <_scanf_float+0x12c>
 800a546:	2b54      	cmp	r3, #84	; 0x54
 800a548:	d066      	beq.n	800a618 <_scanf_float+0x1cc>
 800a54a:	d811      	bhi.n	800a570 <_scanf_float+0x124>
 800a54c:	2b4e      	cmp	r3, #78	; 0x4e
 800a54e:	d1b5      	bne.n	800a4bc <_scanf_float+0x70>
 800a550:	2a00      	cmp	r2, #0
 800a552:	d146      	bne.n	800a5e2 <_scanf_float+0x196>
 800a554:	f1b9 0f00 	cmp.w	r9, #0
 800a558:	d145      	bne.n	800a5e6 <_scanf_float+0x19a>
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a560:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a564:	d13f      	bne.n	800a5e6 <_scanf_float+0x19a>
 800a566:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a56a:	6021      	str	r1, [r4, #0]
 800a56c:	2201      	movs	r2, #1
 800a56e:	e02e      	b.n	800a5ce <_scanf_float+0x182>
 800a570:	2b59      	cmp	r3, #89	; 0x59
 800a572:	d01e      	beq.n	800a5b2 <_scanf_float+0x166>
 800a574:	2b61      	cmp	r3, #97	; 0x61
 800a576:	e7de      	b.n	800a536 <_scanf_float+0xea>
 800a578:	2b6e      	cmp	r3, #110	; 0x6e
 800a57a:	d0e9      	beq.n	800a550 <_scanf_float+0x104>
 800a57c:	d815      	bhi.n	800a5aa <_scanf_float+0x15e>
 800a57e:	2b66      	cmp	r3, #102	; 0x66
 800a580:	d043      	beq.n	800a60a <_scanf_float+0x1be>
 800a582:	2b69      	cmp	r3, #105	; 0x69
 800a584:	d19a      	bne.n	800a4bc <_scanf_float+0x70>
 800a586:	f1bb 0f00 	cmp.w	fp, #0
 800a58a:	d138      	bne.n	800a5fe <_scanf_float+0x1b2>
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	d197      	bne.n	800a4c2 <_scanf_float+0x76>
 800a592:	6821      	ldr	r1, [r4, #0]
 800a594:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a598:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a59c:	d195      	bne.n	800a4ca <_scanf_float+0x7e>
 800a59e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a5a2:	6021      	str	r1, [r4, #0]
 800a5a4:	f04f 0b01 	mov.w	fp, #1
 800a5a8:	e011      	b.n	800a5ce <_scanf_float+0x182>
 800a5aa:	2b74      	cmp	r3, #116	; 0x74
 800a5ac:	d034      	beq.n	800a618 <_scanf_float+0x1cc>
 800a5ae:	2b79      	cmp	r3, #121	; 0x79
 800a5b0:	d184      	bne.n	800a4bc <_scanf_float+0x70>
 800a5b2:	f1bb 0f07 	cmp.w	fp, #7
 800a5b6:	d181      	bne.n	800a4bc <_scanf_float+0x70>
 800a5b8:	f04f 0b08 	mov.w	fp, #8
 800a5bc:	e007      	b.n	800a5ce <_scanf_float+0x182>
 800a5be:	eb12 0f0b 	cmn.w	r2, fp
 800a5c2:	f47f af7b 	bne.w	800a4bc <_scanf_float+0x70>
 800a5c6:	6821      	ldr	r1, [r4, #0]
 800a5c8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a5cc:	6021      	str	r1, [r4, #0]
 800a5ce:	702b      	strb	r3, [r5, #0]
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	e79a      	b.n	800a50a <_scanf_float+0xbe>
 800a5d4:	6821      	ldr	r1, [r4, #0]
 800a5d6:	0608      	lsls	r0, r1, #24
 800a5d8:	f57f af70 	bpl.w	800a4bc <_scanf_float+0x70>
 800a5dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5e0:	e7f4      	b.n	800a5cc <_scanf_float+0x180>
 800a5e2:	2a02      	cmp	r2, #2
 800a5e4:	d047      	beq.n	800a676 <_scanf_float+0x22a>
 800a5e6:	f1bb 0f01 	cmp.w	fp, #1
 800a5ea:	d003      	beq.n	800a5f4 <_scanf_float+0x1a8>
 800a5ec:	f1bb 0f04 	cmp.w	fp, #4
 800a5f0:	f47f af64 	bne.w	800a4bc <_scanf_float+0x70>
 800a5f4:	f10b 0b01 	add.w	fp, fp, #1
 800a5f8:	fa5f fb8b 	uxtb.w	fp, fp
 800a5fc:	e7e7      	b.n	800a5ce <_scanf_float+0x182>
 800a5fe:	f1bb 0f03 	cmp.w	fp, #3
 800a602:	d0f7      	beq.n	800a5f4 <_scanf_float+0x1a8>
 800a604:	f1bb 0f05 	cmp.w	fp, #5
 800a608:	e7f2      	b.n	800a5f0 <_scanf_float+0x1a4>
 800a60a:	f1bb 0f02 	cmp.w	fp, #2
 800a60e:	f47f af55 	bne.w	800a4bc <_scanf_float+0x70>
 800a612:	f04f 0b03 	mov.w	fp, #3
 800a616:	e7da      	b.n	800a5ce <_scanf_float+0x182>
 800a618:	f1bb 0f06 	cmp.w	fp, #6
 800a61c:	f47f af4e 	bne.w	800a4bc <_scanf_float+0x70>
 800a620:	f04f 0b07 	mov.w	fp, #7
 800a624:	e7d3      	b.n	800a5ce <_scanf_float+0x182>
 800a626:	6821      	ldr	r1, [r4, #0]
 800a628:	0588      	lsls	r0, r1, #22
 800a62a:	f57f af47 	bpl.w	800a4bc <_scanf_float+0x70>
 800a62e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a632:	6021      	str	r1, [r4, #0]
 800a634:	f8cd 9008 	str.w	r9, [sp, #8]
 800a638:	e7c9      	b.n	800a5ce <_scanf_float+0x182>
 800a63a:	6821      	ldr	r1, [r4, #0]
 800a63c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a640:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a644:	d006      	beq.n	800a654 <_scanf_float+0x208>
 800a646:	0548      	lsls	r0, r1, #21
 800a648:	f57f af38 	bpl.w	800a4bc <_scanf_float+0x70>
 800a64c:	f1b9 0f00 	cmp.w	r9, #0
 800a650:	f43f af3b 	beq.w	800a4ca <_scanf_float+0x7e>
 800a654:	0588      	lsls	r0, r1, #22
 800a656:	bf58      	it	pl
 800a658:	9802      	ldrpl	r0, [sp, #8]
 800a65a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a65e:	bf58      	it	pl
 800a660:	eba9 0000 	subpl.w	r0, r9, r0
 800a664:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a668:	bf58      	it	pl
 800a66a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a66e:	6021      	str	r1, [r4, #0]
 800a670:	f04f 0900 	mov.w	r9, #0
 800a674:	e7ab      	b.n	800a5ce <_scanf_float+0x182>
 800a676:	2203      	movs	r2, #3
 800a678:	e7a9      	b.n	800a5ce <_scanf_float+0x182>
 800a67a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a67e:	9205      	str	r2, [sp, #20]
 800a680:	4631      	mov	r1, r6
 800a682:	4638      	mov	r0, r7
 800a684:	4798      	blx	r3
 800a686:	9a05      	ldr	r2, [sp, #20]
 800a688:	2800      	cmp	r0, #0
 800a68a:	f43f af04 	beq.w	800a496 <_scanf_float+0x4a>
 800a68e:	e715      	b.n	800a4bc <_scanf_float+0x70>
 800a690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a694:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a698:	4632      	mov	r2, r6
 800a69a:	4638      	mov	r0, r7
 800a69c:	4798      	blx	r3
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	e715      	b.n	800a4d2 <_scanf_float+0x86>
 800a6a6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a6aa:	2b06      	cmp	r3, #6
 800a6ac:	d80a      	bhi.n	800a6c4 <_scanf_float+0x278>
 800a6ae:	f1bb 0f02 	cmp.w	fp, #2
 800a6b2:	d968      	bls.n	800a786 <_scanf_float+0x33a>
 800a6b4:	f1ab 0b03 	sub.w	fp, fp, #3
 800a6b8:	fa5f fb8b 	uxtb.w	fp, fp
 800a6bc:	eba5 0b0b 	sub.w	fp, r5, fp
 800a6c0:	455d      	cmp	r5, fp
 800a6c2:	d14b      	bne.n	800a75c <_scanf_float+0x310>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	05da      	lsls	r2, r3, #23
 800a6c8:	d51f      	bpl.n	800a70a <_scanf_float+0x2be>
 800a6ca:	055b      	lsls	r3, r3, #21
 800a6cc:	d468      	bmi.n	800a7a0 <_scanf_float+0x354>
 800a6ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	2965      	cmp	r1, #101	; 0x65
 800a6d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a6da:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a6de:	6123      	str	r3, [r4, #16]
 800a6e0:	d00d      	beq.n	800a6fe <_scanf_float+0x2b2>
 800a6e2:	2945      	cmp	r1, #69	; 0x45
 800a6e4:	d00b      	beq.n	800a6fe <_scanf_float+0x2b2>
 800a6e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ea:	4632      	mov	r2, r6
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	4798      	blx	r3
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	f1a5 0b02 	sub.w	fp, r5, #2
 800a6fc:	6123      	str	r3, [r4, #16]
 800a6fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a702:	4632      	mov	r2, r6
 800a704:	4638      	mov	r0, r7
 800a706:	4798      	blx	r3
 800a708:	465d      	mov	r5, fp
 800a70a:	6826      	ldr	r6, [r4, #0]
 800a70c:	f016 0610 	ands.w	r6, r6, #16
 800a710:	d17a      	bne.n	800a808 <_scanf_float+0x3bc>
 800a712:	702e      	strb	r6, [r5, #0]
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a71e:	d142      	bne.n	800a7a6 <_scanf_float+0x35a>
 800a720:	9b02      	ldr	r3, [sp, #8]
 800a722:	eba9 0303 	sub.w	r3, r9, r3
 800a726:	425a      	negs	r2, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d149      	bne.n	800a7c0 <_scanf_float+0x374>
 800a72c:	2200      	movs	r2, #0
 800a72e:	4641      	mov	r1, r8
 800a730:	4638      	mov	r0, r7
 800a732:	f000 fea5 	bl	800b480 <_strtod_r>
 800a736:	6825      	ldr	r5, [r4, #0]
 800a738:	f8da 3000 	ldr.w	r3, [sl]
 800a73c:	f015 0f02 	tst.w	r5, #2
 800a740:	f103 0204 	add.w	r2, r3, #4
 800a744:	ec59 8b10 	vmov	r8, r9, d0
 800a748:	f8ca 2000 	str.w	r2, [sl]
 800a74c:	d043      	beq.n	800a7d6 <_scanf_float+0x38a>
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	e9c3 8900 	strd	r8, r9, [r3]
 800a754:	68e3      	ldr	r3, [r4, #12]
 800a756:	3301      	adds	r3, #1
 800a758:	60e3      	str	r3, [r4, #12]
 800a75a:	e6be      	b.n	800a4da <_scanf_float+0x8e>
 800a75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a760:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a764:	4632      	mov	r2, r6
 800a766:	4638      	mov	r0, r7
 800a768:	4798      	blx	r3
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	e7a6      	b.n	800a6c0 <_scanf_float+0x274>
 800a772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a776:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a77a:	4632      	mov	r2, r6
 800a77c:	4638      	mov	r0, r7
 800a77e:	4798      	blx	r3
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	3b01      	subs	r3, #1
 800a784:	6123      	str	r3, [r4, #16]
 800a786:	4545      	cmp	r5, r8
 800a788:	d8f3      	bhi.n	800a772 <_scanf_float+0x326>
 800a78a:	e6a5      	b.n	800a4d8 <_scanf_float+0x8c>
 800a78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a790:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a794:	4632      	mov	r2, r6
 800a796:	4638      	mov	r0, r7
 800a798:	4798      	blx	r3
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	4545      	cmp	r5, r8
 800a7a2:	d8f3      	bhi.n	800a78c <_scanf_float+0x340>
 800a7a4:	e698      	b.n	800a4d8 <_scanf_float+0x8c>
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0bf      	beq.n	800a72c <_scanf_float+0x2e0>
 800a7ac:	9904      	ldr	r1, [sp, #16]
 800a7ae:	230a      	movs	r3, #10
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	3101      	adds	r1, #1
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f000 feef 	bl	800b598 <_strtol_r>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	9d04      	ldr	r5, [sp, #16]
 800a7be:	1ac2      	subs	r2, r0, r3
 800a7c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	bf28      	it	cs
 800a7c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a7cc:	490f      	ldr	r1, [pc, #60]	; (800a80c <_scanf_float+0x3c0>)
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f000 f824 	bl	800a81c <siprintf>
 800a7d4:	e7aa      	b.n	800a72c <_scanf_float+0x2e0>
 800a7d6:	f015 0504 	ands.w	r5, r5, #4
 800a7da:	d1b8      	bne.n	800a74e <_scanf_float+0x302>
 800a7dc:	681f      	ldr	r7, [r3, #0]
 800a7de:	ee10 2a10 	vmov	r2, s0
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	ee10 0a10 	vmov	r0, s0
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f6 f9bf 	bl	8000b6c <__aeabi_dcmpun>
 800a7ee:	b128      	cbz	r0, 800a7fc <_scanf_float+0x3b0>
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 f80d 	bl	800a810 <nanf>
 800a7f6:	ed87 0a00 	vstr	s0, [r7]
 800a7fa:	e7ab      	b.n	800a754 <_scanf_float+0x308>
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	4649      	mov	r1, r9
 800a800:	f7f6 fa12 	bl	8000c28 <__aeabi_d2f>
 800a804:	6038      	str	r0, [r7, #0]
 800a806:	e7a5      	b.n	800a754 <_scanf_float+0x308>
 800a808:	2600      	movs	r6, #0
 800a80a:	e666      	b.n	800a4da <_scanf_float+0x8e>
 800a80c:	08010a58 	.word	0x08010a58

0800a810 <nanf>:
 800a810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a818 <nanf+0x8>
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	7fc00000 	.word	0x7fc00000

0800a81c <siprintf>:
 800a81c:	b40e      	push	{r1, r2, r3}
 800a81e:	b500      	push	{lr}
 800a820:	b09c      	sub	sp, #112	; 0x70
 800a822:	ab1d      	add	r3, sp, #116	; 0x74
 800a824:	9002      	str	r0, [sp, #8]
 800a826:	9006      	str	r0, [sp, #24]
 800a828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a82c:	4809      	ldr	r0, [pc, #36]	; (800a854 <siprintf+0x38>)
 800a82e:	9107      	str	r1, [sp, #28]
 800a830:	9104      	str	r1, [sp, #16]
 800a832:	4909      	ldr	r1, [pc, #36]	; (800a858 <siprintf+0x3c>)
 800a834:	f853 2b04 	ldr.w	r2, [r3], #4
 800a838:	9105      	str	r1, [sp, #20]
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	a902      	add	r1, sp, #8
 800a840:	f002 fda2 	bl	800d388 <_svfiprintf_r>
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	2200      	movs	r2, #0
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	b01c      	add	sp, #112	; 0x70
 800a84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a850:	b003      	add	sp, #12
 800a852:	4770      	bx	lr
 800a854:	2000005c 	.word	0x2000005c
 800a858:	ffff0208 	.word	0xffff0208

0800a85c <sulp>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4604      	mov	r4, r0
 800a860:	460d      	mov	r5, r1
 800a862:	ec45 4b10 	vmov	d0, r4, r5
 800a866:	4616      	mov	r6, r2
 800a868:	f002 fb4a 	bl	800cf00 <__ulp>
 800a86c:	ec51 0b10 	vmov	r0, r1, d0
 800a870:	b17e      	cbz	r6, 800a892 <sulp+0x36>
 800a872:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a876:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd09      	ble.n	800a892 <sulp+0x36>
 800a87e:	051b      	lsls	r3, r3, #20
 800a880:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a884:	2400      	movs	r4, #0
 800a886:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a88a:	4622      	mov	r2, r4
 800a88c:	462b      	mov	r3, r5
 800a88e:	f7f5 fed3 	bl	8000638 <__aeabi_dmul>
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	0000      	movs	r0, r0
	...

0800a898 <_strtod_l>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	461f      	mov	r7, r3
 800a89e:	b0a1      	sub	sp, #132	; 0x84
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4681      	mov	r9, r0
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	460e      	mov	r6, r1
 800a8a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8aa:	931c      	str	r3, [sp, #112]	; 0x70
 800a8ac:	f002 f831 	bl	800c912 <__localeconv_l>
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	6800      	ldr	r0, [r0, #0]
 800a8b4:	f7f5 fcac 	bl	8000210 <strlen>
 800a8b8:	f04f 0a00 	mov.w	sl, #0
 800a8bc:	4604      	mov	r4, r0
 800a8be:	f04f 0b00 	mov.w	fp, #0
 800a8c2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a8c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8c6:	781a      	ldrb	r2, [r3, #0]
 800a8c8:	2a0d      	cmp	r2, #13
 800a8ca:	d832      	bhi.n	800a932 <_strtod_l+0x9a>
 800a8cc:	2a09      	cmp	r2, #9
 800a8ce:	d236      	bcs.n	800a93e <_strtod_l+0xa6>
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d03e      	beq.n	800a952 <_strtod_l+0xba>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a8da:	782b      	ldrb	r3, [r5, #0]
 800a8dc:	2b30      	cmp	r3, #48	; 0x30
 800a8de:	f040 80ac 	bne.w	800aa3a <_strtod_l+0x1a2>
 800a8e2:	786b      	ldrb	r3, [r5, #1]
 800a8e4:	2b58      	cmp	r3, #88	; 0x58
 800a8e6:	d001      	beq.n	800a8ec <_strtod_l+0x54>
 800a8e8:	2b78      	cmp	r3, #120	; 0x78
 800a8ea:	d167      	bne.n	800a9bc <_strtod_l+0x124>
 800a8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	ab1c      	add	r3, sp, #112	; 0x70
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	9702      	str	r7, [sp, #8]
 800a8f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a8f8:	4a88      	ldr	r2, [pc, #544]	; (800ab1c <_strtod_l+0x284>)
 800a8fa:	a91b      	add	r1, sp, #108	; 0x6c
 800a8fc:	4648      	mov	r0, r9
 800a8fe:	f001 fd2e 	bl	800c35e <__gethex>
 800a902:	f010 0407 	ands.w	r4, r0, #7
 800a906:	4606      	mov	r6, r0
 800a908:	d005      	beq.n	800a916 <_strtod_l+0x7e>
 800a90a:	2c06      	cmp	r4, #6
 800a90c:	d12b      	bne.n	800a966 <_strtod_l+0xce>
 800a90e:	3501      	adds	r5, #1
 800a910:	2300      	movs	r3, #0
 800a912:	951b      	str	r5, [sp, #108]	; 0x6c
 800a914:	930d      	str	r3, [sp, #52]	; 0x34
 800a916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 859a 	bne.w	800b452 <_strtod_l+0xbba>
 800a91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a920:	b1e3      	cbz	r3, 800a95c <_strtod_l+0xc4>
 800a922:	4652      	mov	r2, sl
 800a924:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a928:	ec43 2b10 	vmov	d0, r2, r3
 800a92c:	b021      	add	sp, #132	; 0x84
 800a92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a932:	2a2b      	cmp	r2, #43	; 0x2b
 800a934:	d015      	beq.n	800a962 <_strtod_l+0xca>
 800a936:	2a2d      	cmp	r2, #45	; 0x2d
 800a938:	d004      	beq.n	800a944 <_strtod_l+0xac>
 800a93a:	2a20      	cmp	r2, #32
 800a93c:	d1ca      	bne.n	800a8d4 <_strtod_l+0x3c>
 800a93e:	3301      	adds	r3, #1
 800a940:	931b      	str	r3, [sp, #108]	; 0x6c
 800a942:	e7bf      	b.n	800a8c4 <_strtod_l+0x2c>
 800a944:	2201      	movs	r2, #1
 800a946:	920d      	str	r2, [sp, #52]	; 0x34
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a94c:	785b      	ldrb	r3, [r3, #1]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1c2      	bne.n	800a8d8 <_strtod_l+0x40>
 800a952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a954:	961b      	str	r6, [sp, #108]	; 0x6c
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 8579 	bne.w	800b44e <_strtod_l+0xbb6>
 800a95c:	4652      	mov	r2, sl
 800a95e:	465b      	mov	r3, fp
 800a960:	e7e2      	b.n	800a928 <_strtod_l+0x90>
 800a962:	2200      	movs	r2, #0
 800a964:	e7ef      	b.n	800a946 <_strtod_l+0xae>
 800a966:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a968:	b13a      	cbz	r2, 800a97a <_strtod_l+0xe2>
 800a96a:	2135      	movs	r1, #53	; 0x35
 800a96c:	a81e      	add	r0, sp, #120	; 0x78
 800a96e:	f002 fbbf 	bl	800d0f0 <__copybits>
 800a972:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a974:	4648      	mov	r0, r9
 800a976:	f002 f82b 	bl	800c9d0 <_Bfree>
 800a97a:	3c01      	subs	r4, #1
 800a97c:	2c04      	cmp	r4, #4
 800a97e:	d806      	bhi.n	800a98e <_strtod_l+0xf6>
 800a980:	e8df f004 	tbb	[pc, r4]
 800a984:	1714030a 	.word	0x1714030a
 800a988:	0a          	.byte	0x0a
 800a989:	00          	.byte	0x00
 800a98a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a98e:	0730      	lsls	r0, r6, #28
 800a990:	d5c1      	bpl.n	800a916 <_strtod_l+0x7e>
 800a992:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a996:	e7be      	b.n	800a916 <_strtod_l+0x7e>
 800a998:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a99c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a99e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9aa:	e7f0      	b.n	800a98e <_strtod_l+0xf6>
 800a9ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ab20 <_strtod_l+0x288>
 800a9b0:	e7ed      	b.n	800a98e <_strtod_l+0xf6>
 800a9b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a9b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9ba:	e7e8      	b.n	800a98e <_strtod_l+0xf6>
 800a9bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b30      	cmp	r3, #48	; 0x30
 800a9c6:	d0f9      	beq.n	800a9bc <_strtod_l+0x124>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0a4      	beq.n	800a916 <_strtod_l+0x7e>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	9306      	str	r3, [sp, #24]
 800a9d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9d4:	9308      	str	r3, [sp, #32]
 800a9d6:	9507      	str	r5, [sp, #28]
 800a9d8:	9505      	str	r5, [sp, #20]
 800a9da:	220a      	movs	r2, #10
 800a9dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a9de:	7807      	ldrb	r7, [r0, #0]
 800a9e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a9e4:	b2d9      	uxtb	r1, r3
 800a9e6:	2909      	cmp	r1, #9
 800a9e8:	d929      	bls.n	800aa3e <_strtod_l+0x1a6>
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	f8d8 1000 	ldr.w	r1, [r8]
 800a9f0:	f002 fdd2 	bl	800d598 <strncmp>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d031      	beq.n	800aa5c <_strtod_l+0x1c4>
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	9c05      	ldr	r4, [sp, #20]
 800a9fc:	9004      	str	r0, [sp, #16]
 800a9fe:	463b      	mov	r3, r7
 800aa00:	4602      	mov	r2, r0
 800aa02:	2b65      	cmp	r3, #101	; 0x65
 800aa04:	d001      	beq.n	800aa0a <_strtod_l+0x172>
 800aa06:	2b45      	cmp	r3, #69	; 0x45
 800aa08:	d114      	bne.n	800aa34 <_strtod_l+0x19c>
 800aa0a:	b924      	cbnz	r4, 800aa16 <_strtod_l+0x17e>
 800aa0c:	b910      	cbnz	r0, 800aa14 <_strtod_l+0x17c>
 800aa0e:	9b06      	ldr	r3, [sp, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d09e      	beq.n	800a952 <_strtod_l+0xba>
 800aa14:	2400      	movs	r4, #0
 800aa16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aa18:	1c73      	adds	r3, r6, #1
 800aa1a:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa1c:	7873      	ldrb	r3, [r6, #1]
 800aa1e:	2b2b      	cmp	r3, #43	; 0x2b
 800aa20:	d078      	beq.n	800ab14 <_strtod_l+0x27c>
 800aa22:	2b2d      	cmp	r3, #45	; 0x2d
 800aa24:	d070      	beq.n	800ab08 <_strtod_l+0x270>
 800aa26:	f04f 0c00 	mov.w	ip, #0
 800aa2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800aa2e:	2f09      	cmp	r7, #9
 800aa30:	d97c      	bls.n	800ab2c <_strtod_l+0x294>
 800aa32:	961b      	str	r6, [sp, #108]	; 0x6c
 800aa34:	f04f 0e00 	mov.w	lr, #0
 800aa38:	e09a      	b.n	800ab70 <_strtod_l+0x2d8>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e7c7      	b.n	800a9ce <_strtod_l+0x136>
 800aa3e:	9905      	ldr	r1, [sp, #20]
 800aa40:	2908      	cmp	r1, #8
 800aa42:	bfdd      	ittte	le
 800aa44:	9907      	ldrle	r1, [sp, #28]
 800aa46:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa4a:	9307      	strle	r3, [sp, #28]
 800aa4c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	3001      	adds	r0, #1
 800aa54:	3301      	adds	r3, #1
 800aa56:	9305      	str	r3, [sp, #20]
 800aa58:	901b      	str	r0, [sp, #108]	; 0x6c
 800aa5a:	e7bf      	b.n	800a9dc <_strtod_l+0x144>
 800aa5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5e:	191a      	adds	r2, r3, r4
 800aa60:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa62:	9a05      	ldr	r2, [sp, #20]
 800aa64:	5d1b      	ldrb	r3, [r3, r4]
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	d037      	beq.n	800aada <_strtod_l+0x242>
 800aa6a:	9c05      	ldr	r4, [sp, #20]
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aa72:	2909      	cmp	r1, #9
 800aa74:	d913      	bls.n	800aa9e <_strtod_l+0x206>
 800aa76:	2101      	movs	r1, #1
 800aa78:	9104      	str	r1, [sp, #16]
 800aa7a:	e7c2      	b.n	800aa02 <_strtod_l+0x16a>
 800aa7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa82:	785b      	ldrb	r3, [r3, #1]
 800aa84:	3001      	adds	r0, #1
 800aa86:	2b30      	cmp	r3, #48	; 0x30
 800aa88:	d0f8      	beq.n	800aa7c <_strtod_l+0x1e4>
 800aa8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aa8e:	2a08      	cmp	r2, #8
 800aa90:	f200 84e4 	bhi.w	800b45c <_strtod_l+0xbc4>
 800aa94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aa96:	9208      	str	r2, [sp, #32]
 800aa98:	4602      	mov	r2, r0
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800aaa2:	f100 0101 	add.w	r1, r0, #1
 800aaa6:	d012      	beq.n	800aace <_strtod_l+0x236>
 800aaa8:	440a      	add	r2, r1
 800aaaa:	eb00 0c04 	add.w	ip, r0, r4
 800aaae:	4621      	mov	r1, r4
 800aab0:	270a      	movs	r7, #10
 800aab2:	458c      	cmp	ip, r1
 800aab4:	d113      	bne.n	800aade <_strtod_l+0x246>
 800aab6:	1821      	adds	r1, r4, r0
 800aab8:	2908      	cmp	r1, #8
 800aaba:	f104 0401 	add.w	r4, r4, #1
 800aabe:	4404      	add	r4, r0
 800aac0:	dc19      	bgt.n	800aaf6 <_strtod_l+0x25e>
 800aac2:	9b07      	ldr	r3, [sp, #28]
 800aac4:	210a      	movs	r1, #10
 800aac6:	fb01 e303 	mla	r3, r1, r3, lr
 800aaca:	9307      	str	r3, [sp, #28]
 800aacc:	2100      	movs	r1, #0
 800aace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad0:	1c58      	adds	r0, r3, #1
 800aad2:	901b      	str	r0, [sp, #108]	; 0x6c
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	4608      	mov	r0, r1
 800aad8:	e7c9      	b.n	800aa6e <_strtod_l+0x1d6>
 800aada:	9805      	ldr	r0, [sp, #20]
 800aadc:	e7d3      	b.n	800aa86 <_strtod_l+0x1ee>
 800aade:	2908      	cmp	r1, #8
 800aae0:	f101 0101 	add.w	r1, r1, #1
 800aae4:	dc03      	bgt.n	800aaee <_strtod_l+0x256>
 800aae6:	9b07      	ldr	r3, [sp, #28]
 800aae8:	437b      	muls	r3, r7
 800aaea:	9307      	str	r3, [sp, #28]
 800aaec:	e7e1      	b.n	800aab2 <_strtod_l+0x21a>
 800aaee:	2910      	cmp	r1, #16
 800aaf0:	bfd8      	it	le
 800aaf2:	437d      	mulle	r5, r7
 800aaf4:	e7dd      	b.n	800aab2 <_strtod_l+0x21a>
 800aaf6:	2c10      	cmp	r4, #16
 800aaf8:	bfdc      	itt	le
 800aafa:	210a      	movle	r1, #10
 800aafc:	fb01 e505 	mlale	r5, r1, r5, lr
 800ab00:	e7e4      	b.n	800aacc <_strtod_l+0x234>
 800ab02:	2301      	movs	r3, #1
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	e781      	b.n	800aa0c <_strtod_l+0x174>
 800ab08:	f04f 0c01 	mov.w	ip, #1
 800ab0c:	1cb3      	adds	r3, r6, #2
 800ab0e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab10:	78b3      	ldrb	r3, [r6, #2]
 800ab12:	e78a      	b.n	800aa2a <_strtod_l+0x192>
 800ab14:	f04f 0c00 	mov.w	ip, #0
 800ab18:	e7f8      	b.n	800ab0c <_strtod_l+0x274>
 800ab1a:	bf00      	nop
 800ab1c:	08010a60 	.word	0x08010a60
 800ab20:	7ff00000 	.word	0x7ff00000
 800ab24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab26:	1c5f      	adds	r7, r3, #1
 800ab28:	971b      	str	r7, [sp, #108]	; 0x6c
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b30      	cmp	r3, #48	; 0x30
 800ab2e:	d0f9      	beq.n	800ab24 <_strtod_l+0x28c>
 800ab30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ab34:	2f08      	cmp	r7, #8
 800ab36:	f63f af7d 	bhi.w	800aa34 <_strtod_l+0x19c>
 800ab3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ab3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab40:	930a      	str	r3, [sp, #40]	; 0x28
 800ab42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab44:	1c5f      	adds	r7, r3, #1
 800ab46:	971b      	str	r7, [sp, #108]	; 0x6c
 800ab48:	785b      	ldrb	r3, [r3, #1]
 800ab4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ab4e:	f1b8 0f09 	cmp.w	r8, #9
 800ab52:	d937      	bls.n	800abc4 <_strtod_l+0x32c>
 800ab54:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab56:	1a7f      	subs	r7, r7, r1
 800ab58:	2f08      	cmp	r7, #8
 800ab5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab5e:	dc37      	bgt.n	800abd0 <_strtod_l+0x338>
 800ab60:	45be      	cmp	lr, r7
 800ab62:	bfa8      	it	ge
 800ab64:	46be      	movge	lr, r7
 800ab66:	f1bc 0f00 	cmp.w	ip, #0
 800ab6a:	d001      	beq.n	800ab70 <_strtod_l+0x2d8>
 800ab6c:	f1ce 0e00 	rsb	lr, lr, #0
 800ab70:	2c00      	cmp	r4, #0
 800ab72:	d151      	bne.n	800ac18 <_strtod_l+0x380>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f47f aece 	bne.w	800a916 <_strtod_l+0x7e>
 800ab7a:	9a06      	ldr	r2, [sp, #24]
 800ab7c:	2a00      	cmp	r2, #0
 800ab7e:	f47f aeca 	bne.w	800a916 <_strtod_l+0x7e>
 800ab82:	9a04      	ldr	r2, [sp, #16]
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	f47f aee4 	bne.w	800a952 <_strtod_l+0xba>
 800ab8a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab8c:	d027      	beq.n	800abde <_strtod_l+0x346>
 800ab8e:	dc21      	bgt.n	800abd4 <_strtod_l+0x33c>
 800ab90:	2b49      	cmp	r3, #73	; 0x49
 800ab92:	f47f aede 	bne.w	800a952 <_strtod_l+0xba>
 800ab96:	49a0      	ldr	r1, [pc, #640]	; (800ae18 <_strtod_l+0x580>)
 800ab98:	a81b      	add	r0, sp, #108	; 0x6c
 800ab9a:	f001 fe13 	bl	800c7c4 <__match>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f43f aed7 	beq.w	800a952 <_strtod_l+0xba>
 800aba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aba6:	499d      	ldr	r1, [pc, #628]	; (800ae1c <_strtod_l+0x584>)
 800aba8:	3b01      	subs	r3, #1
 800abaa:	a81b      	add	r0, sp, #108	; 0x6c
 800abac:	931b      	str	r3, [sp, #108]	; 0x6c
 800abae:	f001 fe09 	bl	800c7c4 <__match>
 800abb2:	b910      	cbnz	r0, 800abba <_strtod_l+0x322>
 800abb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abb6:	3301      	adds	r3, #1
 800abb8:	931b      	str	r3, [sp, #108]	; 0x6c
 800abba:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ae30 <_strtod_l+0x598>
 800abbe:	f04f 0a00 	mov.w	sl, #0
 800abc2:	e6a8      	b.n	800a916 <_strtod_l+0x7e>
 800abc4:	210a      	movs	r1, #10
 800abc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800abca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800abce:	e7b8      	b.n	800ab42 <_strtod_l+0x2aa>
 800abd0:	46be      	mov	lr, r7
 800abd2:	e7c8      	b.n	800ab66 <_strtod_l+0x2ce>
 800abd4:	2b69      	cmp	r3, #105	; 0x69
 800abd6:	d0de      	beq.n	800ab96 <_strtod_l+0x2fe>
 800abd8:	2b6e      	cmp	r3, #110	; 0x6e
 800abda:	f47f aeba 	bne.w	800a952 <_strtod_l+0xba>
 800abde:	4990      	ldr	r1, [pc, #576]	; (800ae20 <_strtod_l+0x588>)
 800abe0:	a81b      	add	r0, sp, #108	; 0x6c
 800abe2:	f001 fdef 	bl	800c7c4 <__match>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f43f aeb3 	beq.w	800a952 <_strtod_l+0xba>
 800abec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b28      	cmp	r3, #40	; 0x28
 800abf2:	d10e      	bne.n	800ac12 <_strtod_l+0x37a>
 800abf4:	aa1e      	add	r2, sp, #120	; 0x78
 800abf6:	498b      	ldr	r1, [pc, #556]	; (800ae24 <_strtod_l+0x58c>)
 800abf8:	a81b      	add	r0, sp, #108	; 0x6c
 800abfa:	f001 fdf7 	bl	800c7ec <__hexnan>
 800abfe:	2805      	cmp	r0, #5
 800ac00:	d107      	bne.n	800ac12 <_strtod_l+0x37a>
 800ac02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac04:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ac08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac10:	e681      	b.n	800a916 <_strtod_l+0x7e>
 800ac12:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ae38 <_strtod_l+0x5a0>
 800ac16:	e7d2      	b.n	800abbe <_strtod_l+0x326>
 800ac18:	ebae 0302 	sub.w	r3, lr, r2
 800ac1c:	9306      	str	r3, [sp, #24]
 800ac1e:	9b05      	ldr	r3, [sp, #20]
 800ac20:	9807      	ldr	r0, [sp, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bf08      	it	eq
 800ac26:	4623      	moveq	r3, r4
 800ac28:	2c10      	cmp	r4, #16
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	46a0      	mov	r8, r4
 800ac2e:	bfa8      	it	ge
 800ac30:	f04f 0810 	movge.w	r8, #16
 800ac34:	f7f5 fc86 	bl	8000544 <__aeabi_ui2d>
 800ac38:	2c09      	cmp	r4, #9
 800ac3a:	4682      	mov	sl, r0
 800ac3c:	468b      	mov	fp, r1
 800ac3e:	dc13      	bgt.n	800ac68 <_strtod_l+0x3d0>
 800ac40:	9b06      	ldr	r3, [sp, #24]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f43f ae67 	beq.w	800a916 <_strtod_l+0x7e>
 800ac48:	9b06      	ldr	r3, [sp, #24]
 800ac4a:	dd7a      	ble.n	800ad42 <_strtod_l+0x4aa>
 800ac4c:	2b16      	cmp	r3, #22
 800ac4e:	dc61      	bgt.n	800ad14 <_strtod_l+0x47c>
 800ac50:	4a75      	ldr	r2, [pc, #468]	; (800ae28 <_strtod_l+0x590>)
 800ac52:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ac56:	e9de 0100 	ldrd	r0, r1, [lr]
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	465b      	mov	r3, fp
 800ac5e:	f7f5 fceb 	bl	8000638 <__aeabi_dmul>
 800ac62:	4682      	mov	sl, r0
 800ac64:	468b      	mov	fp, r1
 800ac66:	e656      	b.n	800a916 <_strtod_l+0x7e>
 800ac68:	4b6f      	ldr	r3, [pc, #444]	; (800ae28 <_strtod_l+0x590>)
 800ac6a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac72:	f7f5 fce1 	bl	8000638 <__aeabi_dmul>
 800ac76:	4606      	mov	r6, r0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	f7f5 fc62 	bl	8000544 <__aeabi_ui2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fb20 	bl	80002cc <__adddf3>
 800ac8c:	2c0f      	cmp	r4, #15
 800ac8e:	4682      	mov	sl, r0
 800ac90:	468b      	mov	fp, r1
 800ac92:	ddd5      	ble.n	800ac40 <_strtod_l+0x3a8>
 800ac94:	9b06      	ldr	r3, [sp, #24]
 800ac96:	eba4 0808 	sub.w	r8, r4, r8
 800ac9a:	4498      	add	r8, r3
 800ac9c:	f1b8 0f00 	cmp.w	r8, #0
 800aca0:	f340 8096 	ble.w	800add0 <_strtod_l+0x538>
 800aca4:	f018 030f 	ands.w	r3, r8, #15
 800aca8:	d00a      	beq.n	800acc0 <_strtod_l+0x428>
 800acaa:	495f      	ldr	r1, [pc, #380]	; (800ae28 <_strtod_l+0x590>)
 800acac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acb0:	4652      	mov	r2, sl
 800acb2:	465b      	mov	r3, fp
 800acb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb8:	f7f5 fcbe 	bl	8000638 <__aeabi_dmul>
 800acbc:	4682      	mov	sl, r0
 800acbe:	468b      	mov	fp, r1
 800acc0:	f038 080f 	bics.w	r8, r8, #15
 800acc4:	d073      	beq.n	800adae <_strtod_l+0x516>
 800acc6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800acca:	dd47      	ble.n	800ad5c <_strtod_l+0x4c4>
 800accc:	2400      	movs	r4, #0
 800acce:	46a0      	mov	r8, r4
 800acd0:	9407      	str	r4, [sp, #28]
 800acd2:	9405      	str	r4, [sp, #20]
 800acd4:	2322      	movs	r3, #34	; 0x22
 800acd6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ae30 <_strtod_l+0x598>
 800acda:	f8c9 3000 	str.w	r3, [r9]
 800acde:	f04f 0a00 	mov.w	sl, #0
 800ace2:	9b07      	ldr	r3, [sp, #28]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f43f ae16 	beq.w	800a916 <_strtod_l+0x7e>
 800acea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acec:	4648      	mov	r0, r9
 800acee:	f001 fe6f 	bl	800c9d0 <_Bfree>
 800acf2:	9905      	ldr	r1, [sp, #20]
 800acf4:	4648      	mov	r0, r9
 800acf6:	f001 fe6b 	bl	800c9d0 <_Bfree>
 800acfa:	4641      	mov	r1, r8
 800acfc:	4648      	mov	r0, r9
 800acfe:	f001 fe67 	bl	800c9d0 <_Bfree>
 800ad02:	9907      	ldr	r1, [sp, #28]
 800ad04:	4648      	mov	r0, r9
 800ad06:	f001 fe63 	bl	800c9d0 <_Bfree>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4648      	mov	r0, r9
 800ad0e:	f001 fe5f 	bl	800c9d0 <_Bfree>
 800ad12:	e600      	b.n	800a916 <_strtod_l+0x7e>
 800ad14:	9a06      	ldr	r2, [sp, #24]
 800ad16:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	dbba      	blt.n	800ac94 <_strtod_l+0x3fc>
 800ad1e:	4d42      	ldr	r5, [pc, #264]	; (800ae28 <_strtod_l+0x590>)
 800ad20:	f1c4 040f 	rsb	r4, r4, #15
 800ad24:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ad28:	4652      	mov	r2, sl
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad30:	f7f5 fc82 	bl	8000638 <__aeabi_dmul>
 800ad34:	9b06      	ldr	r3, [sp, #24]
 800ad36:	1b1c      	subs	r4, r3, r4
 800ad38:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ad3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad40:	e78d      	b.n	800ac5e <_strtod_l+0x3c6>
 800ad42:	f113 0f16 	cmn.w	r3, #22
 800ad46:	dba5      	blt.n	800ac94 <_strtod_l+0x3fc>
 800ad48:	4a37      	ldr	r2, [pc, #220]	; (800ae28 <_strtod_l+0x590>)
 800ad4a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ad4e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ad52:	4650      	mov	r0, sl
 800ad54:	4659      	mov	r1, fp
 800ad56:	f7f5 fd99 	bl	800088c <__aeabi_ddiv>
 800ad5a:	e782      	b.n	800ac62 <_strtod_l+0x3ca>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4e33      	ldr	r6, [pc, #204]	; (800ae2c <_strtod_l+0x594>)
 800ad60:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ad64:	4650      	mov	r0, sl
 800ad66:	4659      	mov	r1, fp
 800ad68:	461d      	mov	r5, r3
 800ad6a:	f1b8 0f01 	cmp.w	r8, #1
 800ad6e:	dc21      	bgt.n	800adb4 <_strtod_l+0x51c>
 800ad70:	b10b      	cbz	r3, 800ad76 <_strtod_l+0x4de>
 800ad72:	4682      	mov	sl, r0
 800ad74:	468b      	mov	fp, r1
 800ad76:	4b2d      	ldr	r3, [pc, #180]	; (800ae2c <_strtod_l+0x594>)
 800ad78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad80:	4652      	mov	r2, sl
 800ad82:	465b      	mov	r3, fp
 800ad84:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ad88:	f7f5 fc56 	bl	8000638 <__aeabi_dmul>
 800ad8c:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <_strtod_l+0x598>)
 800ad8e:	460a      	mov	r2, r1
 800ad90:	400b      	ands	r3, r1
 800ad92:	4928      	ldr	r1, [pc, #160]	; (800ae34 <_strtod_l+0x59c>)
 800ad94:	428b      	cmp	r3, r1
 800ad96:	4682      	mov	sl, r0
 800ad98:	d898      	bhi.n	800accc <_strtod_l+0x434>
 800ad9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad9e:	428b      	cmp	r3, r1
 800ada0:	bf86      	itte	hi
 800ada2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ae3c <_strtod_l+0x5a4>
 800ada6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800adaa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800adae:	2300      	movs	r3, #0
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	e077      	b.n	800aea4 <_strtod_l+0x60c>
 800adb4:	f018 0f01 	tst.w	r8, #1
 800adb8:	d006      	beq.n	800adc8 <_strtod_l+0x530>
 800adba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fc39 	bl	8000638 <__aeabi_dmul>
 800adc6:	2301      	movs	r3, #1
 800adc8:	3501      	adds	r5, #1
 800adca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800adce:	e7cc      	b.n	800ad6a <_strtod_l+0x4d2>
 800add0:	d0ed      	beq.n	800adae <_strtod_l+0x516>
 800add2:	f1c8 0800 	rsb	r8, r8, #0
 800add6:	f018 020f 	ands.w	r2, r8, #15
 800adda:	d00a      	beq.n	800adf2 <_strtod_l+0x55a>
 800addc:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <_strtod_l+0x590>)
 800adde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade2:	4650      	mov	r0, sl
 800ade4:	4659      	mov	r1, fp
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fd4f 	bl	800088c <__aeabi_ddiv>
 800adee:	4682      	mov	sl, r0
 800adf0:	468b      	mov	fp, r1
 800adf2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800adf6:	d0da      	beq.n	800adae <_strtod_l+0x516>
 800adf8:	f1b8 0f1f 	cmp.w	r8, #31
 800adfc:	dd20      	ble.n	800ae40 <_strtod_l+0x5a8>
 800adfe:	2400      	movs	r4, #0
 800ae00:	46a0      	mov	r8, r4
 800ae02:	9407      	str	r4, [sp, #28]
 800ae04:	9405      	str	r4, [sp, #20]
 800ae06:	2322      	movs	r3, #34	; 0x22
 800ae08:	f04f 0a00 	mov.w	sl, #0
 800ae0c:	f04f 0b00 	mov.w	fp, #0
 800ae10:	f8c9 3000 	str.w	r3, [r9]
 800ae14:	e765      	b.n	800ace2 <_strtod_l+0x44a>
 800ae16:	bf00      	nop
 800ae18:	08010a29 	.word	0x08010a29
 800ae1c:	08010ad8 	.word	0x08010ad8
 800ae20:	08010a31 	.word	0x08010a31
 800ae24:	08010a74 	.word	0x08010a74
 800ae28:	08010b18 	.word	0x08010b18
 800ae2c:	08010af0 	.word	0x08010af0
 800ae30:	7ff00000 	.word	0x7ff00000
 800ae34:	7ca00000 	.word	0x7ca00000
 800ae38:	fff80000 	.word	0xfff80000
 800ae3c:	7fefffff 	.word	0x7fefffff
 800ae40:	f018 0310 	ands.w	r3, r8, #16
 800ae44:	bf18      	it	ne
 800ae46:	236a      	movne	r3, #106	; 0x6a
 800ae48:	4da0      	ldr	r5, [pc, #640]	; (800b0cc <_strtod_l+0x834>)
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	4659      	mov	r1, fp
 800ae50:	2300      	movs	r3, #0
 800ae52:	f1b8 0f00 	cmp.w	r8, #0
 800ae56:	f300 810a 	bgt.w	800b06e <_strtod_l+0x7d6>
 800ae5a:	b10b      	cbz	r3, 800ae60 <_strtod_l+0x5c8>
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	468b      	mov	fp, r1
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	b1bb      	cbz	r3, 800ae94 <_strtod_l+0x5fc>
 800ae64:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ae68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	4659      	mov	r1, fp
 800ae70:	dd10      	ble.n	800ae94 <_strtod_l+0x5fc>
 800ae72:	2b1f      	cmp	r3, #31
 800ae74:	f340 8107 	ble.w	800b086 <_strtod_l+0x7ee>
 800ae78:	2b34      	cmp	r3, #52	; 0x34
 800ae7a:	bfde      	ittt	le
 800ae7c:	3b20      	suble	r3, #32
 800ae7e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ae82:	fa02 f303 	lslle.w	r3, r2, r3
 800ae86:	f04f 0a00 	mov.w	sl, #0
 800ae8a:	bfcc      	ite	gt
 800ae8c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae90:	ea03 0b01 	andle.w	fp, r3, r1
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	4650      	mov	r0, sl
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	f7f5 fe34 	bl	8000b08 <__aeabi_dcmpeq>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d1ac      	bne.n	800adfe <_strtod_l+0x566>
 800aea4:	9b07      	ldr	r3, [sp, #28]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	9a05      	ldr	r2, [sp, #20]
 800aeaa:	9908      	ldr	r1, [sp, #32]
 800aeac:	4623      	mov	r3, r4
 800aeae:	4648      	mov	r0, r9
 800aeb0:	f001 fde0 	bl	800ca74 <__s2b>
 800aeb4:	9007      	str	r0, [sp, #28]
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f43f af08 	beq.w	800accc <_strtod_l+0x434>
 800aebc:	9a06      	ldr	r2, [sp, #24]
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	f1c3 0300 	rsb	r3, r3, #0
 800aec6:	bfa8      	it	ge
 800aec8:	2300      	movge	r3, #0
 800aeca:	930e      	str	r3, [sp, #56]	; 0x38
 800aecc:	2400      	movs	r4, #0
 800aece:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aed2:	9316      	str	r3, [sp, #88]	; 0x58
 800aed4:	46a0      	mov	r8, r4
 800aed6:	9b07      	ldr	r3, [sp, #28]
 800aed8:	4648      	mov	r0, r9
 800aeda:	6859      	ldr	r1, [r3, #4]
 800aedc:	f001 fd44 	bl	800c968 <_Balloc>
 800aee0:	9005      	str	r0, [sp, #20]
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f43f aef6 	beq.w	800acd4 <_strtod_l+0x43c>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	691a      	ldr	r2, [r3, #16]
 800aeec:	3202      	adds	r2, #2
 800aeee:	f103 010c 	add.w	r1, r3, #12
 800aef2:	0092      	lsls	r2, r2, #2
 800aef4:	300c      	adds	r0, #12
 800aef6:	f7fe fe39 	bl	8009b6c <memcpy>
 800aefa:	aa1e      	add	r2, sp, #120	; 0x78
 800aefc:	a91d      	add	r1, sp, #116	; 0x74
 800aefe:	ec4b ab10 	vmov	d0, sl, fp
 800af02:	4648      	mov	r0, r9
 800af04:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800af08:	f002 f870 	bl	800cfec <__d2b>
 800af0c:	901c      	str	r0, [sp, #112]	; 0x70
 800af0e:	2800      	cmp	r0, #0
 800af10:	f43f aee0 	beq.w	800acd4 <_strtod_l+0x43c>
 800af14:	2101      	movs	r1, #1
 800af16:	4648      	mov	r0, r9
 800af18:	f001 fe38 	bl	800cb8c <__i2b>
 800af1c:	4680      	mov	r8, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f aed8 	beq.w	800acd4 <_strtod_l+0x43c>
 800af24:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800af26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af28:	2e00      	cmp	r6, #0
 800af2a:	bfab      	itete	ge
 800af2c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800af2e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800af30:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800af32:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800af34:	bfac      	ite	ge
 800af36:	18f7      	addge	r7, r6, r3
 800af38:	1b9d      	sublt	r5, r3, r6
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	1af6      	subs	r6, r6, r3
 800af3e:	4416      	add	r6, r2
 800af40:	4b63      	ldr	r3, [pc, #396]	; (800b0d0 <_strtod_l+0x838>)
 800af42:	3e01      	subs	r6, #1
 800af44:	429e      	cmp	r6, r3
 800af46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af4a:	f280 80af 	bge.w	800b0ac <_strtod_l+0x814>
 800af4e:	1b9b      	subs	r3, r3, r6
 800af50:	2b1f      	cmp	r3, #31
 800af52:	eba2 0203 	sub.w	r2, r2, r3
 800af56:	f04f 0101 	mov.w	r1, #1
 800af5a:	f300 809b 	bgt.w	800b094 <_strtod_l+0x7fc>
 800af5e:	fa01 f303 	lsl.w	r3, r1, r3
 800af62:	930f      	str	r3, [sp, #60]	; 0x3c
 800af64:	2300      	movs	r3, #0
 800af66:	930a      	str	r3, [sp, #40]	; 0x28
 800af68:	18be      	adds	r6, r7, r2
 800af6a:	9b04      	ldr	r3, [sp, #16]
 800af6c:	42b7      	cmp	r7, r6
 800af6e:	4415      	add	r5, r2
 800af70:	441d      	add	r5, r3
 800af72:	463b      	mov	r3, r7
 800af74:	bfa8      	it	ge
 800af76:	4633      	movge	r3, r6
 800af78:	42ab      	cmp	r3, r5
 800af7a:	bfa8      	it	ge
 800af7c:	462b      	movge	r3, r5
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfc2      	ittt	gt
 800af82:	1af6      	subgt	r6, r6, r3
 800af84:	1aed      	subgt	r5, r5, r3
 800af86:	1aff      	subgt	r7, r7, r3
 800af88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8a:	b1bb      	cbz	r3, 800afbc <_strtod_l+0x724>
 800af8c:	4641      	mov	r1, r8
 800af8e:	461a      	mov	r2, r3
 800af90:	4648      	mov	r0, r9
 800af92:	f001 fe9b 	bl	800cccc <__pow5mult>
 800af96:	4680      	mov	r8, r0
 800af98:	2800      	cmp	r0, #0
 800af9a:	f43f ae9b 	beq.w	800acd4 <_strtod_l+0x43c>
 800af9e:	4601      	mov	r1, r0
 800afa0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afa2:	4648      	mov	r0, r9
 800afa4:	f001 fdfb 	bl	800cb9e <__multiply>
 800afa8:	900c      	str	r0, [sp, #48]	; 0x30
 800afaa:	2800      	cmp	r0, #0
 800afac:	f43f ae92 	beq.w	800acd4 <_strtod_l+0x43c>
 800afb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afb2:	4648      	mov	r0, r9
 800afb4:	f001 fd0c 	bl	800c9d0 <_Bfree>
 800afb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afba:	931c      	str	r3, [sp, #112]	; 0x70
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	dc7a      	bgt.n	800b0b6 <_strtod_l+0x81e>
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd08      	ble.n	800afd8 <_strtod_l+0x740>
 800afc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800afc8:	9905      	ldr	r1, [sp, #20]
 800afca:	4648      	mov	r0, r9
 800afcc:	f001 fe7e 	bl	800cccc <__pow5mult>
 800afd0:	9005      	str	r0, [sp, #20]
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f ae7e 	beq.w	800acd4 <_strtod_l+0x43c>
 800afd8:	2d00      	cmp	r5, #0
 800afda:	dd08      	ble.n	800afee <_strtod_l+0x756>
 800afdc:	462a      	mov	r2, r5
 800afde:	9905      	ldr	r1, [sp, #20]
 800afe0:	4648      	mov	r0, r9
 800afe2:	f001 fec1 	bl	800cd68 <__lshift>
 800afe6:	9005      	str	r0, [sp, #20]
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f ae73 	beq.w	800acd4 <_strtod_l+0x43c>
 800afee:	2f00      	cmp	r7, #0
 800aff0:	dd08      	ble.n	800b004 <_strtod_l+0x76c>
 800aff2:	4641      	mov	r1, r8
 800aff4:	463a      	mov	r2, r7
 800aff6:	4648      	mov	r0, r9
 800aff8:	f001 feb6 	bl	800cd68 <__lshift>
 800affc:	4680      	mov	r8, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	f43f ae68 	beq.w	800acd4 <_strtod_l+0x43c>
 800b004:	9a05      	ldr	r2, [sp, #20]
 800b006:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b008:	4648      	mov	r0, r9
 800b00a:	f001 ff1b 	bl	800ce44 <__mdiff>
 800b00e:	4604      	mov	r4, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	f43f ae5f 	beq.w	800acd4 <_strtod_l+0x43c>
 800b016:	68c3      	ldr	r3, [r0, #12]
 800b018:	930c      	str	r3, [sp, #48]	; 0x30
 800b01a:	2300      	movs	r3, #0
 800b01c:	60c3      	str	r3, [r0, #12]
 800b01e:	4641      	mov	r1, r8
 800b020:	f001 fef6 	bl	800ce10 <__mcmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	da55      	bge.n	800b0d4 <_strtod_l+0x83c>
 800b028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b02a:	b9e3      	cbnz	r3, 800b066 <_strtod_l+0x7ce>
 800b02c:	f1ba 0f00 	cmp.w	sl, #0
 800b030:	d119      	bne.n	800b066 <_strtod_l+0x7ce>
 800b032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b036:	b9b3      	cbnz	r3, 800b066 <_strtod_l+0x7ce>
 800b038:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b03c:	0d1b      	lsrs	r3, r3, #20
 800b03e:	051b      	lsls	r3, r3, #20
 800b040:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b044:	d90f      	bls.n	800b066 <_strtod_l+0x7ce>
 800b046:	6963      	ldr	r3, [r4, #20]
 800b048:	b913      	cbnz	r3, 800b050 <_strtod_l+0x7b8>
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	dd0a      	ble.n	800b066 <_strtod_l+0x7ce>
 800b050:	4621      	mov	r1, r4
 800b052:	2201      	movs	r2, #1
 800b054:	4648      	mov	r0, r9
 800b056:	f001 fe87 	bl	800cd68 <__lshift>
 800b05a:	4641      	mov	r1, r8
 800b05c:	4604      	mov	r4, r0
 800b05e:	f001 fed7 	bl	800ce10 <__mcmp>
 800b062:	2800      	cmp	r0, #0
 800b064:	dc67      	bgt.n	800b136 <_strtod_l+0x89e>
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d171      	bne.n	800b150 <_strtod_l+0x8b8>
 800b06c:	e63d      	b.n	800acea <_strtod_l+0x452>
 800b06e:	f018 0f01 	tst.w	r8, #1
 800b072:	d004      	beq.n	800b07e <_strtod_l+0x7e6>
 800b074:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b078:	f7f5 fade 	bl	8000638 <__aeabi_dmul>
 800b07c:	2301      	movs	r3, #1
 800b07e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b082:	3508      	adds	r5, #8
 800b084:	e6e5      	b.n	800ae52 <_strtod_l+0x5ba>
 800b086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b08a:	fa02 f303 	lsl.w	r3, r2, r3
 800b08e:	ea03 0a0a 	and.w	sl, r3, sl
 800b092:	e6ff      	b.n	800ae94 <_strtod_l+0x5fc>
 800b094:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b098:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b09c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b0a0:	36e2      	adds	r6, #226	; 0xe2
 800b0a2:	fa01 f306 	lsl.w	r3, r1, r6
 800b0a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b0aa:	e75d      	b.n	800af68 <_strtod_l+0x6d0>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0b4:	e758      	b.n	800af68 <_strtod_l+0x6d0>
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0ba:	4648      	mov	r0, r9
 800b0bc:	f001 fe54 	bl	800cd68 <__lshift>
 800b0c0:	901c      	str	r0, [sp, #112]	; 0x70
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f47f af7c 	bne.w	800afc0 <_strtod_l+0x728>
 800b0c8:	e604      	b.n	800acd4 <_strtod_l+0x43c>
 800b0ca:	bf00      	nop
 800b0cc:	08010a88 	.word	0x08010a88
 800b0d0:	fffffc02 	.word	0xfffffc02
 800b0d4:	465d      	mov	r5, fp
 800b0d6:	f040 8086 	bne.w	800b1e6 <_strtod_l+0x94e>
 800b0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0e0:	b32a      	cbz	r2, 800b12e <_strtod_l+0x896>
 800b0e2:	4aaf      	ldr	r2, [pc, #700]	; (800b3a0 <_strtod_l+0xb08>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d153      	bne.n	800b190 <_strtod_l+0x8f8>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	b1d3      	cbz	r3, 800b124 <_strtod_l+0x88c>
 800b0ee:	4aad      	ldr	r2, [pc, #692]	; (800b3a4 <_strtod_l+0xb0c>)
 800b0f0:	402a      	ands	r2, r5
 800b0f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b0f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b0fa:	d816      	bhi.n	800b12a <_strtod_l+0x892>
 800b0fc:	0d12      	lsrs	r2, r2, #20
 800b0fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b102:	fa01 f303 	lsl.w	r3, r1, r3
 800b106:	4298      	cmp	r0, r3
 800b108:	d142      	bne.n	800b190 <_strtod_l+0x8f8>
 800b10a:	4ba7      	ldr	r3, [pc, #668]	; (800b3a8 <_strtod_l+0xb10>)
 800b10c:	429d      	cmp	r5, r3
 800b10e:	d102      	bne.n	800b116 <_strtod_l+0x87e>
 800b110:	3001      	adds	r0, #1
 800b112:	f43f addf 	beq.w	800acd4 <_strtod_l+0x43c>
 800b116:	4ba3      	ldr	r3, [pc, #652]	; (800b3a4 <_strtod_l+0xb0c>)
 800b118:	402b      	ands	r3, r5
 800b11a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b11e:	f04f 0a00 	mov.w	sl, #0
 800b122:	e7a0      	b.n	800b066 <_strtod_l+0x7ce>
 800b124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b128:	e7ed      	b.n	800b106 <_strtod_l+0x86e>
 800b12a:	460b      	mov	r3, r1
 800b12c:	e7eb      	b.n	800b106 <_strtod_l+0x86e>
 800b12e:	bb7b      	cbnz	r3, 800b190 <_strtod_l+0x8f8>
 800b130:	f1ba 0f00 	cmp.w	sl, #0
 800b134:	d12c      	bne.n	800b190 <_strtod_l+0x8f8>
 800b136:	9904      	ldr	r1, [sp, #16]
 800b138:	4a9a      	ldr	r2, [pc, #616]	; (800b3a4 <_strtod_l+0xb0c>)
 800b13a:	465b      	mov	r3, fp
 800b13c:	b1f1      	cbz	r1, 800b17c <_strtod_l+0x8e4>
 800b13e:	ea02 010b 	and.w	r1, r2, fp
 800b142:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b146:	dc19      	bgt.n	800b17c <_strtod_l+0x8e4>
 800b148:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b14c:	f77f ae5b 	ble.w	800ae06 <_strtod_l+0x56e>
 800b150:	4a96      	ldr	r2, [pc, #600]	; (800b3ac <_strtod_l+0xb14>)
 800b152:	2300      	movs	r3, #0
 800b154:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b160:	f7f5 fa6a 	bl	8000638 <__aeabi_dmul>
 800b164:	4682      	mov	sl, r0
 800b166:	468b      	mov	fp, r1
 800b168:	2900      	cmp	r1, #0
 800b16a:	f47f adbe 	bne.w	800acea <_strtod_l+0x452>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f47f adbb 	bne.w	800acea <_strtod_l+0x452>
 800b174:	2322      	movs	r3, #34	; 0x22
 800b176:	f8c9 3000 	str.w	r3, [r9]
 800b17a:	e5b6      	b.n	800acea <_strtod_l+0x452>
 800b17c:	4013      	ands	r3, r2
 800b17e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b182:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b186:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b18a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b18e:	e76a      	b.n	800b066 <_strtod_l+0x7ce>
 800b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b192:	b193      	cbz	r3, 800b1ba <_strtod_l+0x922>
 800b194:	422b      	tst	r3, r5
 800b196:	f43f af66 	beq.w	800b066 <_strtod_l+0x7ce>
 800b19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19c:	9a04      	ldr	r2, [sp, #16]
 800b19e:	4650      	mov	r0, sl
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	b173      	cbz	r3, 800b1c2 <_strtod_l+0x92a>
 800b1a4:	f7ff fb5a 	bl	800a85c <sulp>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1b0:	f7f5 f88c 	bl	80002cc <__adddf3>
 800b1b4:	4682      	mov	sl, r0
 800b1b6:	468b      	mov	fp, r1
 800b1b8:	e755      	b.n	800b066 <_strtod_l+0x7ce>
 800b1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1bc:	ea13 0f0a 	tst.w	r3, sl
 800b1c0:	e7e9      	b.n	800b196 <_strtod_l+0x8fe>
 800b1c2:	f7ff fb4b 	bl	800a85c <sulp>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1ce:	f7f5 f87b 	bl	80002c8 <__aeabi_dsub>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4682      	mov	sl, r0
 800b1d8:	468b      	mov	fp, r1
 800b1da:	f7f5 fc95 	bl	8000b08 <__aeabi_dcmpeq>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f47f ae11 	bne.w	800ae06 <_strtod_l+0x56e>
 800b1e4:	e73f      	b.n	800b066 <_strtod_l+0x7ce>
 800b1e6:	4641      	mov	r1, r8
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f001 ff4e 	bl	800d08a <__ratio>
 800b1ee:	ec57 6b10 	vmov	r6, r7, d0
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1f8:	ee10 0a10 	vmov	r0, s0
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f7f5 fc97 	bl	8000b30 <__aeabi_dcmple>
 800b202:	2800      	cmp	r0, #0
 800b204:	d077      	beq.n	800b2f6 <_strtod_l+0xa5e>
 800b206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d04a      	beq.n	800b2a2 <_strtod_l+0xa0a>
 800b20c:	4b68      	ldr	r3, [pc, #416]	; (800b3b0 <_strtod_l+0xb18>)
 800b20e:	2200      	movs	r2, #0
 800b210:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b214:	4f66      	ldr	r7, [pc, #408]	; (800b3b0 <_strtod_l+0xb18>)
 800b216:	2600      	movs	r6, #0
 800b218:	4b62      	ldr	r3, [pc, #392]	; (800b3a4 <_strtod_l+0xb0c>)
 800b21a:	402b      	ands	r3, r5
 800b21c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b21e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b220:	4b64      	ldr	r3, [pc, #400]	; (800b3b4 <_strtod_l+0xb1c>)
 800b222:	429a      	cmp	r2, r3
 800b224:	f040 80ce 	bne.w	800b3c4 <_strtod_l+0xb2c>
 800b228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b22c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b230:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b234:	ec4b ab10 	vmov	d0, sl, fp
 800b238:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b23c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b240:	f001 fe5e 	bl	800cf00 <__ulp>
 800b244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b248:	ec53 2b10 	vmov	r2, r3, d0
 800b24c:	f7f5 f9f4 	bl	8000638 <__aeabi_dmul>
 800b250:	4652      	mov	r2, sl
 800b252:	465b      	mov	r3, fp
 800b254:	f7f5 f83a 	bl	80002cc <__adddf3>
 800b258:	460b      	mov	r3, r1
 800b25a:	4952      	ldr	r1, [pc, #328]	; (800b3a4 <_strtod_l+0xb0c>)
 800b25c:	4a56      	ldr	r2, [pc, #344]	; (800b3b8 <_strtod_l+0xb20>)
 800b25e:	4019      	ands	r1, r3
 800b260:	4291      	cmp	r1, r2
 800b262:	4682      	mov	sl, r0
 800b264:	d95b      	bls.n	800b31e <_strtod_l+0xa86>
 800b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b268:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d103      	bne.n	800b278 <_strtod_l+0x9e0>
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	3301      	adds	r3, #1
 800b274:	f43f ad2e 	beq.w	800acd4 <_strtod_l+0x43c>
 800b278:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b3a8 <_strtod_l+0xb10>
 800b27c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b280:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b282:	4648      	mov	r0, r9
 800b284:	f001 fba4 	bl	800c9d0 <_Bfree>
 800b288:	9905      	ldr	r1, [sp, #20]
 800b28a:	4648      	mov	r0, r9
 800b28c:	f001 fba0 	bl	800c9d0 <_Bfree>
 800b290:	4641      	mov	r1, r8
 800b292:	4648      	mov	r0, r9
 800b294:	f001 fb9c 	bl	800c9d0 <_Bfree>
 800b298:	4621      	mov	r1, r4
 800b29a:	4648      	mov	r0, r9
 800b29c:	f001 fb98 	bl	800c9d0 <_Bfree>
 800b2a0:	e619      	b.n	800aed6 <_strtod_l+0x63e>
 800b2a2:	f1ba 0f00 	cmp.w	sl, #0
 800b2a6:	d11a      	bne.n	800b2de <_strtod_l+0xa46>
 800b2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2ac:	b9eb      	cbnz	r3, 800b2ea <_strtod_l+0xa52>
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	4b3f      	ldr	r3, [pc, #252]	; (800b3b0 <_strtod_l+0xb18>)
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f5 fc31 	bl	8000b1c <__aeabi_dcmplt>
 800b2ba:	b9c8      	cbnz	r0, 800b2f0 <_strtod_l+0xa58>
 800b2bc:	4630      	mov	r0, r6
 800b2be:	4639      	mov	r1, r7
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4b3e      	ldr	r3, [pc, #248]	; (800b3bc <_strtod_l+0xb24>)
 800b2c4:	f7f5 f9b8 	bl	8000638 <__aeabi_dmul>
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	460f      	mov	r7, r1
 800b2cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b2d0:	9618      	str	r6, [sp, #96]	; 0x60
 800b2d2:	9319      	str	r3, [sp, #100]	; 0x64
 800b2d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b2d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2dc:	e79c      	b.n	800b218 <_strtod_l+0x980>
 800b2de:	f1ba 0f01 	cmp.w	sl, #1
 800b2e2:	d102      	bne.n	800b2ea <_strtod_l+0xa52>
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	f43f ad8e 	beq.w	800ae06 <_strtod_l+0x56e>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4b34      	ldr	r3, [pc, #208]	; (800b3c0 <_strtod_l+0xb28>)
 800b2ee:	e78f      	b.n	800b210 <_strtod_l+0x978>
 800b2f0:	2600      	movs	r6, #0
 800b2f2:	4f32      	ldr	r7, [pc, #200]	; (800b3bc <_strtod_l+0xb24>)
 800b2f4:	e7ea      	b.n	800b2cc <_strtod_l+0xa34>
 800b2f6:	4b31      	ldr	r3, [pc, #196]	; (800b3bc <_strtod_l+0xb24>)
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f7f5 f99b 	bl	8000638 <__aeabi_dmul>
 800b302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	b933      	cbnz	r3, 800b318 <_strtod_l+0xa80>
 800b30a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b30e:	9010      	str	r0, [sp, #64]	; 0x40
 800b310:	9311      	str	r3, [sp, #68]	; 0x44
 800b312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b316:	e7df      	b.n	800b2d8 <_strtod_l+0xa40>
 800b318:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b31c:	e7f9      	b.n	800b312 <_strtod_l+0xa7a>
 800b31e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b322:	9b04      	ldr	r3, [sp, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1ab      	bne.n	800b280 <_strtod_l+0x9e8>
 800b328:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b32c:	0d1b      	lsrs	r3, r3, #20
 800b32e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b330:	051b      	lsls	r3, r3, #20
 800b332:	429a      	cmp	r2, r3
 800b334:	465d      	mov	r5, fp
 800b336:	d1a3      	bne.n	800b280 <_strtod_l+0x9e8>
 800b338:	4639      	mov	r1, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7f5 fc2c 	bl	8000b98 <__aeabi_d2iz>
 800b340:	f7f5 f910 	bl	8000564 <__aeabi_i2d>
 800b344:	460b      	mov	r3, r1
 800b346:	4602      	mov	r2, r0
 800b348:	4639      	mov	r1, r7
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7f4 ffbc 	bl	80002c8 <__aeabi_dsub>
 800b350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	b933      	cbnz	r3, 800b366 <_strtod_l+0xace>
 800b358:	f1ba 0f00 	cmp.w	sl, #0
 800b35c:	d103      	bne.n	800b366 <_strtod_l+0xace>
 800b35e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b362:	2d00      	cmp	r5, #0
 800b364:	d06d      	beq.n	800b442 <_strtod_l+0xbaa>
 800b366:	a30a      	add	r3, pc, #40	; (adr r3, 800b390 <_strtod_l+0xaf8>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f5 fbd4 	bl	8000b1c <__aeabi_dcmplt>
 800b374:	2800      	cmp	r0, #0
 800b376:	f47f acb8 	bne.w	800acea <_strtod_l+0x452>
 800b37a:	a307      	add	r3, pc, #28	; (adr r3, 800b398 <_strtod_l+0xb00>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	4630      	mov	r0, r6
 800b382:	4639      	mov	r1, r7
 800b384:	f7f5 fbe8 	bl	8000b58 <__aeabi_dcmpgt>
 800b388:	2800      	cmp	r0, #0
 800b38a:	f43f af79 	beq.w	800b280 <_strtod_l+0x9e8>
 800b38e:	e4ac      	b.n	800acea <_strtod_l+0x452>
 800b390:	94a03595 	.word	0x94a03595
 800b394:	3fdfffff 	.word	0x3fdfffff
 800b398:	35afe535 	.word	0x35afe535
 800b39c:	3fe00000 	.word	0x3fe00000
 800b3a0:	000fffff 	.word	0x000fffff
 800b3a4:	7ff00000 	.word	0x7ff00000
 800b3a8:	7fefffff 	.word	0x7fefffff
 800b3ac:	39500000 	.word	0x39500000
 800b3b0:	3ff00000 	.word	0x3ff00000
 800b3b4:	7fe00000 	.word	0x7fe00000
 800b3b8:	7c9fffff 	.word	0x7c9fffff
 800b3bc:	3fe00000 	.word	0x3fe00000
 800b3c0:	bff00000 	.word	0xbff00000
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	b333      	cbz	r3, 800b416 <_strtod_l+0xb7e>
 800b3c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3ce:	d822      	bhi.n	800b416 <_strtod_l+0xb7e>
 800b3d0:	a327      	add	r3, pc, #156	; (adr r3, 800b470 <_strtod_l+0xbd8>)
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	4639      	mov	r1, r7
 800b3da:	f7f5 fba9 	bl	8000b30 <__aeabi_dcmple>
 800b3de:	b1a0      	cbz	r0, 800b40a <_strtod_l+0xb72>
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7f5 fc00 	bl	8000be8 <__aeabi_d2uiz>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	bf08      	it	eq
 800b3ec:	2001      	moveq	r0, #1
 800b3ee:	f7f5 f8a9 	bl	8000544 <__aeabi_ui2d>
 800b3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	460f      	mov	r7, r1
 800b3f8:	bb03      	cbnz	r3, 800b43c <_strtod_l+0xba4>
 800b3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3fe:	9012      	str	r0, [sp, #72]	; 0x48
 800b400:	9313      	str	r3, [sp, #76]	; 0x4c
 800b402:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b406:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b40e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	930b      	str	r3, [sp, #44]	; 0x2c
 800b416:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b41a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b41e:	f001 fd6f 	bl	800cf00 <__ulp>
 800b422:	4650      	mov	r0, sl
 800b424:	ec53 2b10 	vmov	r2, r3, d0
 800b428:	4659      	mov	r1, fp
 800b42a:	f7f5 f905 	bl	8000638 <__aeabi_dmul>
 800b42e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b432:	f7f4 ff4b 	bl	80002cc <__adddf3>
 800b436:	4682      	mov	sl, r0
 800b438:	468b      	mov	fp, r1
 800b43a:	e772      	b.n	800b322 <_strtod_l+0xa8a>
 800b43c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b440:	e7df      	b.n	800b402 <_strtod_l+0xb6a>
 800b442:	a30d      	add	r3, pc, #52	; (adr r3, 800b478 <_strtod_l+0xbe0>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f5 fb68 	bl	8000b1c <__aeabi_dcmplt>
 800b44c:	e79c      	b.n	800b388 <_strtod_l+0xaf0>
 800b44e:	2300      	movs	r3, #0
 800b450:	930d      	str	r3, [sp, #52]	; 0x34
 800b452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	f7ff ba61 	b.w	800a91e <_strtod_l+0x86>
 800b45c:	2b65      	cmp	r3, #101	; 0x65
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f43f ab4e 	beq.w	800ab02 <_strtod_l+0x26a>
 800b466:	2101      	movs	r1, #1
 800b468:	4614      	mov	r4, r2
 800b46a:	9104      	str	r1, [sp, #16]
 800b46c:	f7ff bacb 	b.w	800aa06 <_strtod_l+0x16e>
 800b470:	ffc00000 	.word	0xffc00000
 800b474:	41dfffff 	.word	0x41dfffff
 800b478:	94a03595 	.word	0x94a03595
 800b47c:	3fcfffff 	.word	0x3fcfffff

0800b480 <_strtod_r>:
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <_strtod_r+0x18>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	b410      	push	{r4}
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	4c04      	ldr	r4, [pc, #16]	; (800b49c <_strtod_r+0x1c>)
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bf08      	it	eq
 800b48e:	4623      	moveq	r3, r4
 800b490:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b494:	f7ff ba00 	b.w	800a898 <_strtod_l>
 800b498:	2000005c 	.word	0x2000005c
 800b49c:	200000c0 	.word	0x200000c0

0800b4a0 <_strtol_l.isra.0>:
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	4692      	mov	sl, r2
 800b4aa:	461e      	mov	r6, r3
 800b4ac:	460f      	mov	r7, r1
 800b4ae:	463d      	mov	r5, r7
 800b4b0:	9808      	ldr	r0, [sp, #32]
 800b4b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b6:	f001 fa29 	bl	800c90c <__locale_ctype_ptr_l>
 800b4ba:	4420      	add	r0, r4
 800b4bc:	7843      	ldrb	r3, [r0, #1]
 800b4be:	f013 0308 	ands.w	r3, r3, #8
 800b4c2:	d132      	bne.n	800b52a <_strtol_l.isra.0+0x8a>
 800b4c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b4c6:	d132      	bne.n	800b52e <_strtol_l.isra.0+0x8e>
 800b4c8:	787c      	ldrb	r4, [r7, #1]
 800b4ca:	1cbd      	adds	r5, r7, #2
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	d05d      	beq.n	800b58e <_strtol_l.isra.0+0xee>
 800b4d2:	2e10      	cmp	r6, #16
 800b4d4:	d109      	bne.n	800b4ea <_strtol_l.isra.0+0x4a>
 800b4d6:	2c30      	cmp	r4, #48	; 0x30
 800b4d8:	d107      	bne.n	800b4ea <_strtol_l.isra.0+0x4a>
 800b4da:	782b      	ldrb	r3, [r5, #0]
 800b4dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4e0:	2b58      	cmp	r3, #88	; 0x58
 800b4e2:	d14f      	bne.n	800b584 <_strtol_l.isra.0+0xe4>
 800b4e4:	786c      	ldrb	r4, [r5, #1]
 800b4e6:	2610      	movs	r6, #16
 800b4e8:	3502      	adds	r5, #2
 800b4ea:	2a00      	cmp	r2, #0
 800b4ec:	bf14      	ite	ne
 800b4ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b4f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b4f6:	2700      	movs	r7, #0
 800b4f8:	fbb1 fcf6 	udiv	ip, r1, r6
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b502:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b506:	2b09      	cmp	r3, #9
 800b508:	d817      	bhi.n	800b53a <_strtol_l.isra.0+0x9a>
 800b50a:	461c      	mov	r4, r3
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	dd23      	ble.n	800b558 <_strtol_l.isra.0+0xb8>
 800b510:	1c7b      	adds	r3, r7, #1
 800b512:	d007      	beq.n	800b524 <_strtol_l.isra.0+0x84>
 800b514:	4584      	cmp	ip, r0
 800b516:	d31c      	bcc.n	800b552 <_strtol_l.isra.0+0xb2>
 800b518:	d101      	bne.n	800b51e <_strtol_l.isra.0+0x7e>
 800b51a:	45a6      	cmp	lr, r4
 800b51c:	db19      	blt.n	800b552 <_strtol_l.isra.0+0xb2>
 800b51e:	fb00 4006 	mla	r0, r0, r6, r4
 800b522:	2701      	movs	r7, #1
 800b524:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b528:	e7eb      	b.n	800b502 <_strtol_l.isra.0+0x62>
 800b52a:	462f      	mov	r7, r5
 800b52c:	e7bf      	b.n	800b4ae <_strtol_l.isra.0+0xe>
 800b52e:	2c2b      	cmp	r4, #43	; 0x2b
 800b530:	bf04      	itt	eq
 800b532:	1cbd      	addeq	r5, r7, #2
 800b534:	787c      	ldrbeq	r4, [r7, #1]
 800b536:	461a      	mov	r2, r3
 800b538:	e7c9      	b.n	800b4ce <_strtol_l.isra.0+0x2e>
 800b53a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b53e:	2b19      	cmp	r3, #25
 800b540:	d801      	bhi.n	800b546 <_strtol_l.isra.0+0xa6>
 800b542:	3c37      	subs	r4, #55	; 0x37
 800b544:	e7e2      	b.n	800b50c <_strtol_l.isra.0+0x6c>
 800b546:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b54a:	2b19      	cmp	r3, #25
 800b54c:	d804      	bhi.n	800b558 <_strtol_l.isra.0+0xb8>
 800b54e:	3c57      	subs	r4, #87	; 0x57
 800b550:	e7dc      	b.n	800b50c <_strtol_l.isra.0+0x6c>
 800b552:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b556:	e7e5      	b.n	800b524 <_strtol_l.isra.0+0x84>
 800b558:	1c7b      	adds	r3, r7, #1
 800b55a:	d108      	bne.n	800b56e <_strtol_l.isra.0+0xce>
 800b55c:	2322      	movs	r3, #34	; 0x22
 800b55e:	f8c8 3000 	str.w	r3, [r8]
 800b562:	4608      	mov	r0, r1
 800b564:	f1ba 0f00 	cmp.w	sl, #0
 800b568:	d107      	bne.n	800b57a <_strtol_l.isra.0+0xda>
 800b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56e:	b102      	cbz	r2, 800b572 <_strtol_l.isra.0+0xd2>
 800b570:	4240      	negs	r0, r0
 800b572:	f1ba 0f00 	cmp.w	sl, #0
 800b576:	d0f8      	beq.n	800b56a <_strtol_l.isra.0+0xca>
 800b578:	b10f      	cbz	r7, 800b57e <_strtol_l.isra.0+0xde>
 800b57a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b57e:	f8ca 9000 	str.w	r9, [sl]
 800b582:	e7f2      	b.n	800b56a <_strtol_l.isra.0+0xca>
 800b584:	2430      	movs	r4, #48	; 0x30
 800b586:	2e00      	cmp	r6, #0
 800b588:	d1af      	bne.n	800b4ea <_strtol_l.isra.0+0x4a>
 800b58a:	2608      	movs	r6, #8
 800b58c:	e7ad      	b.n	800b4ea <_strtol_l.isra.0+0x4a>
 800b58e:	2c30      	cmp	r4, #48	; 0x30
 800b590:	d0a3      	beq.n	800b4da <_strtol_l.isra.0+0x3a>
 800b592:	260a      	movs	r6, #10
 800b594:	e7a9      	b.n	800b4ea <_strtol_l.isra.0+0x4a>
	...

0800b598 <_strtol_r>:
 800b598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b59a:	4c06      	ldr	r4, [pc, #24]	; (800b5b4 <_strtol_r+0x1c>)
 800b59c:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_strtol_r+0x20>)
 800b59e:	6824      	ldr	r4, [r4, #0]
 800b5a0:	6a24      	ldr	r4, [r4, #32]
 800b5a2:	2c00      	cmp	r4, #0
 800b5a4:	bf08      	it	eq
 800b5a6:	462c      	moveq	r4, r5
 800b5a8:	9400      	str	r4, [sp, #0]
 800b5aa:	f7ff ff79 	bl	800b4a0 <_strtol_l.isra.0>
 800b5ae:	b003      	add	sp, #12
 800b5b0:	bd30      	pop	{r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2000005c 	.word	0x2000005c
 800b5b8:	200000c0 	.word	0x200000c0

0800b5bc <__utoa>:
 800b5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5be:	4b1d      	ldr	r3, [pc, #116]	; (800b634 <__utoa+0x78>)
 800b5c0:	b08b      	sub	sp, #44	; 0x2c
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	466e      	mov	r6, sp
 800b5c8:	f103 0c20 	add.w	ip, r3, #32
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	6859      	ldr	r1, [r3, #4]
 800b5d0:	4637      	mov	r7, r6
 800b5d2:	c703      	stmia	r7!, {r0, r1}
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	4563      	cmp	r3, ip
 800b5d8:	463e      	mov	r6, r7
 800b5da:	d1f7      	bne.n	800b5cc <__utoa+0x10>
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	791b      	ldrb	r3, [r3, #4]
 800b5e0:	713b      	strb	r3, [r7, #4]
 800b5e2:	1e93      	subs	r3, r2, #2
 800b5e4:	2b22      	cmp	r3, #34	; 0x22
 800b5e6:	6038      	str	r0, [r7, #0]
 800b5e8:	f04f 0300 	mov.w	r3, #0
 800b5ec:	d904      	bls.n	800b5f8 <__utoa+0x3c>
 800b5ee:	7023      	strb	r3, [r4, #0]
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	b00b      	add	sp, #44	; 0x2c
 800b5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f8:	1e66      	subs	r6, r4, #1
 800b5fa:	fbb5 f0f2 	udiv	r0, r5, r2
 800b5fe:	af0a      	add	r7, sp, #40	; 0x28
 800b600:	fb02 5510 	mls	r5, r2, r0, r5
 800b604:	443d      	add	r5, r7
 800b606:	1c59      	adds	r1, r3, #1
 800b608:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b60c:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b610:	4605      	mov	r5, r0
 800b612:	b968      	cbnz	r0, 800b630 <__utoa+0x74>
 800b614:	5460      	strb	r0, [r4, r1]
 800b616:	4423      	add	r3, r4
 800b618:	4622      	mov	r2, r4
 800b61a:	1b19      	subs	r1, r3, r4
 800b61c:	1b10      	subs	r0, r2, r4
 800b61e:	4281      	cmp	r1, r0
 800b620:	dde7      	ble.n	800b5f2 <__utoa+0x36>
 800b622:	7811      	ldrb	r1, [r2, #0]
 800b624:	7818      	ldrb	r0, [r3, #0]
 800b626:	f802 0b01 	strb.w	r0, [r2], #1
 800b62a:	f803 1901 	strb.w	r1, [r3], #-1
 800b62e:	e7f4      	b.n	800b61a <__utoa+0x5e>
 800b630:	460b      	mov	r3, r1
 800b632:	e7e2      	b.n	800b5fa <__utoa+0x3e>
 800b634:	08010ab0 	.word	0x08010ab0

0800b638 <quorem>:
 800b638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	6903      	ldr	r3, [r0, #16]
 800b63e:	690c      	ldr	r4, [r1, #16]
 800b640:	42a3      	cmp	r3, r4
 800b642:	4680      	mov	r8, r0
 800b644:	f2c0 8082 	blt.w	800b74c <quorem+0x114>
 800b648:	3c01      	subs	r4, #1
 800b64a:	f101 0714 	add.w	r7, r1, #20
 800b64e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b652:	f100 0614 	add.w	r6, r0, #20
 800b656:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b65a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b65e:	eb06 030c 	add.w	r3, r6, ip
 800b662:	3501      	adds	r5, #1
 800b664:	eb07 090c 	add.w	r9, r7, ip
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b66e:	b395      	cbz	r5, 800b6d6 <quorem+0x9e>
 800b670:	f04f 0a00 	mov.w	sl, #0
 800b674:	4638      	mov	r0, r7
 800b676:	46b6      	mov	lr, r6
 800b678:	46d3      	mov	fp, sl
 800b67a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b67e:	b293      	uxth	r3, r2
 800b680:	fb05 a303 	mla	r3, r5, r3, sl
 800b684:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b688:	b29b      	uxth	r3, r3
 800b68a:	ebab 0303 	sub.w	r3, fp, r3
 800b68e:	0c12      	lsrs	r2, r2, #16
 800b690:	f8de b000 	ldr.w	fp, [lr]
 800b694:	fb05 a202 	mla	r2, r5, r2, sl
 800b698:	fa13 f38b 	uxtah	r3, r3, fp
 800b69c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b6a0:	fa1f fb82 	uxth.w	fp, r2
 800b6a4:	f8de 2000 	ldr.w	r2, [lr]
 800b6a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b6ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6b6:	4581      	cmp	r9, r0
 800b6b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b6bc:	f84e 3b04 	str.w	r3, [lr], #4
 800b6c0:	d2db      	bcs.n	800b67a <quorem+0x42>
 800b6c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800b6c6:	b933      	cbnz	r3, 800b6d6 <quorem+0x9e>
 800b6c8:	9b01      	ldr	r3, [sp, #4]
 800b6ca:	3b04      	subs	r3, #4
 800b6cc:	429e      	cmp	r6, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	d330      	bcc.n	800b734 <quorem+0xfc>
 800b6d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	f001 fb9a 	bl	800ce10 <__mcmp>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	db25      	blt.n	800b72c <quorem+0xf4>
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f04f 0c00 	mov.w	ip, #0
 800b6e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b6f0:	b293      	uxth	r3, r2
 800b6f2:	ebac 0303 	sub.w	r3, ip, r3
 800b6f6:	0c12      	lsrs	r2, r2, #16
 800b6f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b6fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b704:	b29b      	uxth	r3, r3
 800b706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b70a:	45b9      	cmp	r9, r7
 800b70c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b710:	f840 3b04 	str.w	r3, [r0], #4
 800b714:	d2e8      	bcs.n	800b6e8 <quorem+0xb0>
 800b716:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b71a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b71e:	b92a      	cbnz	r2, 800b72c <quorem+0xf4>
 800b720:	3b04      	subs	r3, #4
 800b722:	429e      	cmp	r6, r3
 800b724:	461a      	mov	r2, r3
 800b726:	d30b      	bcc.n	800b740 <quorem+0x108>
 800b728:	f8c8 4010 	str.w	r4, [r8, #16]
 800b72c:	4628      	mov	r0, r5
 800b72e:	b003      	add	sp, #12
 800b730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b734:	6812      	ldr	r2, [r2, #0]
 800b736:	3b04      	subs	r3, #4
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d1ca      	bne.n	800b6d2 <quorem+0x9a>
 800b73c:	3c01      	subs	r4, #1
 800b73e:	e7c5      	b.n	800b6cc <quorem+0x94>
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	3b04      	subs	r3, #4
 800b744:	2a00      	cmp	r2, #0
 800b746:	d1ef      	bne.n	800b728 <quorem+0xf0>
 800b748:	3c01      	subs	r4, #1
 800b74a:	e7ea      	b.n	800b722 <quorem+0xea>
 800b74c:	2000      	movs	r0, #0
 800b74e:	e7ee      	b.n	800b72e <quorem+0xf6>

0800b750 <_dtoa_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	ec57 6b10 	vmov	r6, r7, d0
 800b758:	b097      	sub	sp, #92	; 0x5c
 800b75a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b75c:	9106      	str	r1, [sp, #24]
 800b75e:	4604      	mov	r4, r0
 800b760:	920b      	str	r2, [sp, #44]	; 0x2c
 800b762:	9312      	str	r3, [sp, #72]	; 0x48
 800b764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b768:	e9cd 6700 	strd	r6, r7, [sp]
 800b76c:	b93d      	cbnz	r5, 800b77e <_dtoa_r+0x2e>
 800b76e:	2010      	movs	r0, #16
 800b770:	f001 f8e0 	bl	800c934 <malloc>
 800b774:	6260      	str	r0, [r4, #36]	; 0x24
 800b776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b77a:	6005      	str	r5, [r0, #0]
 800b77c:	60c5      	str	r5, [r0, #12]
 800b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	b151      	cbz	r1, 800b79a <_dtoa_r+0x4a>
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	604a      	str	r2, [r1, #4]
 800b788:	2301      	movs	r3, #1
 800b78a:	4093      	lsls	r3, r2
 800b78c:	608b      	str	r3, [r1, #8]
 800b78e:	4620      	mov	r0, r4
 800b790:	f001 f91e 	bl	800c9d0 <_Bfree>
 800b794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	1e3b      	subs	r3, r7, #0
 800b79c:	bfbb      	ittet	lt
 800b79e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b7a2:	9301      	strlt	r3, [sp, #4]
 800b7a4:	2300      	movge	r3, #0
 800b7a6:	2201      	movlt	r2, #1
 800b7a8:	bfac      	ite	ge
 800b7aa:	f8c8 3000 	strge.w	r3, [r8]
 800b7ae:	f8c8 2000 	strlt.w	r2, [r8]
 800b7b2:	4baf      	ldr	r3, [pc, #700]	; (800ba70 <_dtoa_r+0x320>)
 800b7b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b7b8:	ea33 0308 	bics.w	r3, r3, r8
 800b7bc:	d114      	bne.n	800b7e8 <_dtoa_r+0x98>
 800b7be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	9b00      	ldr	r3, [sp, #0]
 800b7c8:	b923      	cbnz	r3, 800b7d4 <_dtoa_r+0x84>
 800b7ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f000 8542 	beq.w	800c258 <_dtoa_r+0xb08>
 800b7d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ba84 <_dtoa_r+0x334>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 8544 	beq.w	800c268 <_dtoa_r+0xb18>
 800b7e0:	f10b 0303 	add.w	r3, fp, #3
 800b7e4:	f000 bd3e 	b.w	800c264 <_dtoa_r+0xb14>
 800b7e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	f7f5 f988 	bl	8000b08 <__aeabi_dcmpeq>
 800b7f8:	4681      	mov	r9, r0
 800b7fa:	b168      	cbz	r0, 800b818 <_dtoa_r+0xc8>
 800b7fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7fe:	2301      	movs	r3, #1
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 8524 	beq.w	800c252 <_dtoa_r+0xb02>
 800b80a:	4b9a      	ldr	r3, [pc, #616]	; (800ba74 <_dtoa_r+0x324>)
 800b80c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b80e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	f000 bd28 	b.w	800c268 <_dtoa_r+0xb18>
 800b818:	aa14      	add	r2, sp, #80	; 0x50
 800b81a:	a915      	add	r1, sp, #84	; 0x54
 800b81c:	ec47 6b10 	vmov	d0, r6, r7
 800b820:	4620      	mov	r0, r4
 800b822:	f001 fbe3 	bl	800cfec <__d2b>
 800b826:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b82a:	9004      	str	r0, [sp, #16]
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	d07c      	beq.n	800b92a <_dtoa_r+0x1da>
 800b830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b834:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b838:	46b2      	mov	sl, r6
 800b83a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b842:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b846:	2200      	movs	r2, #0
 800b848:	4b8b      	ldr	r3, [pc, #556]	; (800ba78 <_dtoa_r+0x328>)
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f4 fd3b 	bl	80002c8 <__aeabi_dsub>
 800b852:	a381      	add	r3, pc, #516	; (adr r3, 800ba58 <_dtoa_r+0x308>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 feee 	bl	8000638 <__aeabi_dmul>
 800b85c:	a380      	add	r3, pc, #512	; (adr r3, 800ba60 <_dtoa_r+0x310>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f7f4 fd33 	bl	80002cc <__adddf3>
 800b866:	4606      	mov	r6, r0
 800b868:	4628      	mov	r0, r5
 800b86a:	460f      	mov	r7, r1
 800b86c:	f7f4 fe7a 	bl	8000564 <__aeabi_i2d>
 800b870:	a37d      	add	r3, pc, #500	; (adr r3, 800ba68 <_dtoa_r+0x318>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fedf 	bl	8000638 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	f7f4 fd23 	bl	80002cc <__adddf3>
 800b886:	4606      	mov	r6, r0
 800b888:	460f      	mov	r7, r1
 800b88a:	f7f5 f985 	bl	8000b98 <__aeabi_d2iz>
 800b88e:	2200      	movs	r2, #0
 800b890:	4682      	mov	sl, r0
 800b892:	2300      	movs	r3, #0
 800b894:	4630      	mov	r0, r6
 800b896:	4639      	mov	r1, r7
 800b898:	f7f5 f940 	bl	8000b1c <__aeabi_dcmplt>
 800b89c:	b148      	cbz	r0, 800b8b2 <_dtoa_r+0x162>
 800b89e:	4650      	mov	r0, sl
 800b8a0:	f7f4 fe60 	bl	8000564 <__aeabi_i2d>
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	463b      	mov	r3, r7
 800b8a8:	f7f5 f92e 	bl	8000b08 <__aeabi_dcmpeq>
 800b8ac:	b908      	cbnz	r0, 800b8b2 <_dtoa_r+0x162>
 800b8ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b8b2:	f1ba 0f16 	cmp.w	sl, #22
 800b8b6:	d859      	bhi.n	800b96c <_dtoa_r+0x21c>
 800b8b8:	4970      	ldr	r1, [pc, #448]	; (800ba7c <_dtoa_r+0x32c>)
 800b8ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b8be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c6:	f7f5 f947 	bl	8000b58 <__aeabi_dcmpgt>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d050      	beq.n	800b970 <_dtoa_r+0x220>
 800b8ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8d8:	1b5d      	subs	r5, r3, r5
 800b8da:	f1b5 0801 	subs.w	r8, r5, #1
 800b8de:	bf49      	itett	mi
 800b8e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8e4:	2300      	movpl	r3, #0
 800b8e6:	9305      	strmi	r3, [sp, #20]
 800b8e8:	f04f 0800 	movmi.w	r8, #0
 800b8ec:	bf58      	it	pl
 800b8ee:	9305      	strpl	r3, [sp, #20]
 800b8f0:	f1ba 0f00 	cmp.w	sl, #0
 800b8f4:	db3e      	blt.n	800b974 <_dtoa_r+0x224>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	44d0      	add	r8, sl
 800b8fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	9b06      	ldr	r3, [sp, #24]
 800b902:	2b09      	cmp	r3, #9
 800b904:	f200 8090 	bhi.w	800ba28 <_dtoa_r+0x2d8>
 800b908:	2b05      	cmp	r3, #5
 800b90a:	bfc4      	itt	gt
 800b90c:	3b04      	subgt	r3, #4
 800b90e:	9306      	strgt	r3, [sp, #24]
 800b910:	9b06      	ldr	r3, [sp, #24]
 800b912:	f1a3 0302 	sub.w	r3, r3, #2
 800b916:	bfcc      	ite	gt
 800b918:	2500      	movgt	r5, #0
 800b91a:	2501      	movle	r5, #1
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	f200 808f 	bhi.w	800ba40 <_dtoa_r+0x2f0>
 800b922:	e8df f003 	tbb	[pc, r3]
 800b926:	7f7d      	.short	0x7f7d
 800b928:	7131      	.short	0x7131
 800b92a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b92e:	441d      	add	r5, r3
 800b930:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b934:	2820      	cmp	r0, #32
 800b936:	dd13      	ble.n	800b960 <_dtoa_r+0x210>
 800b938:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b93c:	9b00      	ldr	r3, [sp, #0]
 800b93e:	fa08 f800 	lsl.w	r8, r8, r0
 800b942:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b946:	fa23 f000 	lsr.w	r0, r3, r0
 800b94a:	ea48 0000 	orr.w	r0, r8, r0
 800b94e:	f7f4 fdf9 	bl	8000544 <__aeabi_ui2d>
 800b952:	2301      	movs	r3, #1
 800b954:	4682      	mov	sl, r0
 800b956:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b95a:	3d01      	subs	r5, #1
 800b95c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b95e:	e772      	b.n	800b846 <_dtoa_r+0xf6>
 800b960:	9b00      	ldr	r3, [sp, #0]
 800b962:	f1c0 0020 	rsb	r0, r0, #32
 800b966:	fa03 f000 	lsl.w	r0, r3, r0
 800b96a:	e7f0      	b.n	800b94e <_dtoa_r+0x1fe>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e7b1      	b.n	800b8d4 <_dtoa_r+0x184>
 800b970:	900f      	str	r0, [sp, #60]	; 0x3c
 800b972:	e7b0      	b.n	800b8d6 <_dtoa_r+0x186>
 800b974:	9b05      	ldr	r3, [sp, #20]
 800b976:	eba3 030a 	sub.w	r3, r3, sl
 800b97a:	9305      	str	r3, [sp, #20]
 800b97c:	f1ca 0300 	rsb	r3, sl, #0
 800b980:	9307      	str	r3, [sp, #28]
 800b982:	2300      	movs	r3, #0
 800b984:	930e      	str	r3, [sp, #56]	; 0x38
 800b986:	e7bb      	b.n	800b900 <_dtoa_r+0x1b0>
 800b988:	2301      	movs	r3, #1
 800b98a:	930a      	str	r3, [sp, #40]	; 0x28
 800b98c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	dd59      	ble.n	800ba46 <_dtoa_r+0x2f6>
 800b992:	9302      	str	r3, [sp, #8]
 800b994:	4699      	mov	r9, r3
 800b996:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b998:	2200      	movs	r2, #0
 800b99a:	6072      	str	r2, [r6, #4]
 800b99c:	2204      	movs	r2, #4
 800b99e:	f102 0014 	add.w	r0, r2, #20
 800b9a2:	4298      	cmp	r0, r3
 800b9a4:	6871      	ldr	r1, [r6, #4]
 800b9a6:	d953      	bls.n	800ba50 <_dtoa_r+0x300>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 ffdd 	bl	800c968 <_Balloc>
 800b9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9b0:	6030      	str	r0, [r6, #0]
 800b9b2:	f1b9 0f0e 	cmp.w	r9, #14
 800b9b6:	f8d3 b000 	ldr.w	fp, [r3]
 800b9ba:	f200 80e6 	bhi.w	800bb8a <_dtoa_r+0x43a>
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	f000 80e3 	beq.w	800bb8a <_dtoa_r+0x43a>
 800b9c4:	ed9d 7b00 	vldr	d7, [sp]
 800b9c8:	f1ba 0f00 	cmp.w	sl, #0
 800b9cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b9d0:	dd74      	ble.n	800babc <_dtoa_r+0x36c>
 800b9d2:	4a2a      	ldr	r2, [pc, #168]	; (800ba7c <_dtoa_r+0x32c>)
 800b9d4:	f00a 030f 	and.w	r3, sl, #15
 800b9d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9dc:	ed93 7b00 	vldr	d7, [r3]
 800b9e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b9e4:	06f0      	lsls	r0, r6, #27
 800b9e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9ea:	d565      	bpl.n	800bab8 <_dtoa_r+0x368>
 800b9ec:	4b24      	ldr	r3, [pc, #144]	; (800ba80 <_dtoa_r+0x330>)
 800b9ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9f6:	f7f4 ff49 	bl	800088c <__aeabi_ddiv>
 800b9fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b9fe:	f006 060f 	and.w	r6, r6, #15
 800ba02:	2503      	movs	r5, #3
 800ba04:	4f1e      	ldr	r7, [pc, #120]	; (800ba80 <_dtoa_r+0x330>)
 800ba06:	e04c      	b.n	800baa2 <_dtoa_r+0x352>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba0e:	4453      	add	r3, sl
 800ba10:	f103 0901 	add.w	r9, r3, #1
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	464b      	mov	r3, r9
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	bfb8      	it	lt
 800ba1c:	2301      	movlt	r3, #1
 800ba1e:	e7ba      	b.n	800b996 <_dtoa_r+0x246>
 800ba20:	2300      	movs	r3, #0
 800ba22:	e7b2      	b.n	800b98a <_dtoa_r+0x23a>
 800ba24:	2300      	movs	r3, #0
 800ba26:	e7f0      	b.n	800ba0a <_dtoa_r+0x2ba>
 800ba28:	2501      	movs	r5, #1
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	950a      	str	r5, [sp, #40]	; 0x28
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba34:	9302      	str	r3, [sp, #8]
 800ba36:	4699      	mov	r9, r3
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2312      	movs	r3, #18
 800ba3c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba3e:	e7aa      	b.n	800b996 <_dtoa_r+0x246>
 800ba40:	2301      	movs	r3, #1
 800ba42:	930a      	str	r3, [sp, #40]	; 0x28
 800ba44:	e7f4      	b.n	800ba30 <_dtoa_r+0x2e0>
 800ba46:	2301      	movs	r3, #1
 800ba48:	9302      	str	r3, [sp, #8]
 800ba4a:	4699      	mov	r9, r3
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	e7f5      	b.n	800ba3c <_dtoa_r+0x2ec>
 800ba50:	3101      	adds	r1, #1
 800ba52:	6071      	str	r1, [r6, #4]
 800ba54:	0052      	lsls	r2, r2, #1
 800ba56:	e7a2      	b.n	800b99e <_dtoa_r+0x24e>
 800ba58:	636f4361 	.word	0x636f4361
 800ba5c:	3fd287a7 	.word	0x3fd287a7
 800ba60:	8b60c8b3 	.word	0x8b60c8b3
 800ba64:	3fc68a28 	.word	0x3fc68a28
 800ba68:	509f79fb 	.word	0x509f79fb
 800ba6c:	3fd34413 	.word	0x3fd34413
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	08010a35 	.word	0x08010a35
 800ba78:	3ff80000 	.word	0x3ff80000
 800ba7c:	08010b18 	.word	0x08010b18
 800ba80:	08010af0 	.word	0x08010af0
 800ba84:	08010ade 	.word	0x08010ade
 800ba88:	07f1      	lsls	r1, r6, #31
 800ba8a:	d508      	bpl.n	800ba9e <_dtoa_r+0x34e>
 800ba8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f7f4 fdd0 	bl	8000638 <__aeabi_dmul>
 800ba98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	1076      	asrs	r6, r6, #1
 800baa0:	3708      	adds	r7, #8
 800baa2:	2e00      	cmp	r6, #0
 800baa4:	d1f0      	bne.n	800ba88 <_dtoa_r+0x338>
 800baa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800baaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baae:	f7f4 feed 	bl	800088c <__aeabi_ddiv>
 800bab2:	e9cd 0100 	strd	r0, r1, [sp]
 800bab6:	e01a      	b.n	800baee <_dtoa_r+0x39e>
 800bab8:	2502      	movs	r5, #2
 800baba:	e7a3      	b.n	800ba04 <_dtoa_r+0x2b4>
 800babc:	f000 80a0 	beq.w	800bc00 <_dtoa_r+0x4b0>
 800bac0:	f1ca 0600 	rsb	r6, sl, #0
 800bac4:	4b9f      	ldr	r3, [pc, #636]	; (800bd44 <_dtoa_r+0x5f4>)
 800bac6:	4fa0      	ldr	r7, [pc, #640]	; (800bd48 <_dtoa_r+0x5f8>)
 800bac8:	f006 020f 	and.w	r2, r6, #15
 800bacc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bad8:	f7f4 fdae 	bl	8000638 <__aeabi_dmul>
 800badc:	e9cd 0100 	strd	r0, r1, [sp]
 800bae0:	1136      	asrs	r6, r6, #4
 800bae2:	2300      	movs	r3, #0
 800bae4:	2502      	movs	r5, #2
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	d17f      	bne.n	800bbea <_dtoa_r+0x49a>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1e1      	bne.n	800bab2 <_dtoa_r+0x362>
 800baee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 8087 	beq.w	800bc04 <_dtoa_r+0x4b4>
 800baf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bafa:	2200      	movs	r2, #0
 800bafc:	4b93      	ldr	r3, [pc, #588]	; (800bd4c <_dtoa_r+0x5fc>)
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f5 f80b 	bl	8000b1c <__aeabi_dcmplt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d07c      	beq.n	800bc04 <_dtoa_r+0x4b4>
 800bb0a:	f1b9 0f00 	cmp.w	r9, #0
 800bb0e:	d079      	beq.n	800bc04 <_dtoa_r+0x4b4>
 800bb10:	9b02      	ldr	r3, [sp, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dd35      	ble.n	800bb82 <_dtoa_r+0x432>
 800bb16:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4b8b      	ldr	r3, [pc, #556]	; (800bd50 <_dtoa_r+0x600>)
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7f4 fd88 	bl	8000638 <__aeabi_dmul>
 800bb28:	e9cd 0100 	strd	r0, r1, [sp]
 800bb2c:	9f02      	ldr	r7, [sp, #8]
 800bb2e:	3501      	adds	r5, #1
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7f4 fd17 	bl	8000564 <__aeabi_i2d>
 800bb36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb3a:	f7f4 fd7d 	bl	8000638 <__aeabi_dmul>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4b84      	ldr	r3, [pc, #528]	; (800bd54 <_dtoa_r+0x604>)
 800bb42:	f7f4 fbc3 	bl	80002cc <__adddf3>
 800bb46:	4605      	mov	r5, r0
 800bb48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bb4c:	2f00      	cmp	r7, #0
 800bb4e:	d15d      	bne.n	800bc0c <_dtoa_r+0x4bc>
 800bb50:	2200      	movs	r2, #0
 800bb52:	4b81      	ldr	r3, [pc, #516]	; (800bd58 <_dtoa_r+0x608>)
 800bb54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb58:	f7f4 fbb6 	bl	80002c8 <__aeabi_dsub>
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4633      	mov	r3, r6
 800bb60:	e9cd 0100 	strd	r0, r1, [sp]
 800bb64:	f7f4 fff8 	bl	8000b58 <__aeabi_dcmpgt>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f040 8288 	bne.w	800c07e <_dtoa_r+0x92e>
 800bb6e:	462a      	mov	r2, r5
 800bb70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb78:	f7f4 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	f040 827c 	bne.w	800c07a <_dtoa_r+0x92a>
 800bb82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb86:	e9cd 2300 	strd	r2, r3, [sp]
 800bb8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f2c0 8150 	blt.w	800be32 <_dtoa_r+0x6e2>
 800bb92:	f1ba 0f0e 	cmp.w	sl, #14
 800bb96:	f300 814c 	bgt.w	800be32 <_dtoa_r+0x6e2>
 800bb9a:	4b6a      	ldr	r3, [pc, #424]	; (800bd44 <_dtoa_r+0x5f4>)
 800bb9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bba0:	ed93 7b00 	vldr	d7, [r3]
 800bba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbac:	f280 80d8 	bge.w	800bd60 <_dtoa_r+0x610>
 800bbb0:	f1b9 0f00 	cmp.w	r9, #0
 800bbb4:	f300 80d4 	bgt.w	800bd60 <_dtoa_r+0x610>
 800bbb8:	f040 825e 	bne.w	800c078 <_dtoa_r+0x928>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	4b66      	ldr	r3, [pc, #408]	; (800bd58 <_dtoa_r+0x608>)
 800bbc0:	ec51 0b17 	vmov	r0, r1, d7
 800bbc4:	f7f4 fd38 	bl	8000638 <__aeabi_dmul>
 800bbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbcc:	f7f4 ffba 	bl	8000b44 <__aeabi_dcmpge>
 800bbd0:	464f      	mov	r7, r9
 800bbd2:	464e      	mov	r6, r9
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f040 8234 	bne.w	800c042 <_dtoa_r+0x8f2>
 800bbda:	2331      	movs	r3, #49	; 0x31
 800bbdc:	f10b 0501 	add.w	r5, fp, #1
 800bbe0:	f88b 3000 	strb.w	r3, [fp]
 800bbe4:	f10a 0a01 	add.w	sl, sl, #1
 800bbe8:	e22f      	b.n	800c04a <_dtoa_r+0x8fa>
 800bbea:	07f2      	lsls	r2, r6, #31
 800bbec:	d505      	bpl.n	800bbfa <_dtoa_r+0x4aa>
 800bbee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	3501      	adds	r5, #1
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	1076      	asrs	r6, r6, #1
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	e772      	b.n	800bae6 <_dtoa_r+0x396>
 800bc00:	2502      	movs	r5, #2
 800bc02:	e774      	b.n	800baee <_dtoa_r+0x39e>
 800bc04:	f8cd a020 	str.w	sl, [sp, #32]
 800bc08:	464f      	mov	r7, r9
 800bc0a:	e791      	b.n	800bb30 <_dtoa_r+0x3e0>
 800bc0c:	4b4d      	ldr	r3, [pc, #308]	; (800bd44 <_dtoa_r+0x5f4>)
 800bc0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d047      	beq.n	800bcac <_dtoa_r+0x55c>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	2000      	movs	r0, #0
 800bc22:	494e      	ldr	r1, [pc, #312]	; (800bd5c <_dtoa_r+0x60c>)
 800bc24:	f7f4 fe32 	bl	800088c <__aeabi_ddiv>
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4633      	mov	r3, r6
 800bc2c:	f7f4 fb4c 	bl	80002c8 <__aeabi_dsub>
 800bc30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc34:	465d      	mov	r5, fp
 800bc36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc3a:	f7f4 ffad 	bl	8000b98 <__aeabi_d2iz>
 800bc3e:	4606      	mov	r6, r0
 800bc40:	f7f4 fc90 	bl	8000564 <__aeabi_i2d>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc4c:	f7f4 fb3c 	bl	80002c8 <__aeabi_dsub>
 800bc50:	3630      	adds	r6, #48	; 0x30
 800bc52:	f805 6b01 	strb.w	r6, [r5], #1
 800bc56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc5a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc5e:	f7f4 ff5d 	bl	8000b1c <__aeabi_dcmplt>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d163      	bne.n	800bd2e <_dtoa_r+0x5de>
 800bc66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	4937      	ldr	r1, [pc, #220]	; (800bd4c <_dtoa_r+0x5fc>)
 800bc6e:	f7f4 fb2b 	bl	80002c8 <__aeabi_dsub>
 800bc72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc76:	f7f4 ff51 	bl	8000b1c <__aeabi_dcmplt>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f040 80b7 	bne.w	800bdee <_dtoa_r+0x69e>
 800bc80:	eba5 030b 	sub.w	r3, r5, fp
 800bc84:	429f      	cmp	r7, r3
 800bc86:	f77f af7c 	ble.w	800bb82 <_dtoa_r+0x432>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4b30      	ldr	r3, [pc, #192]	; (800bd50 <_dtoa_r+0x600>)
 800bc8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc92:	f7f4 fcd1 	bl	8000638 <__aeabi_dmul>
 800bc96:	2200      	movs	r2, #0
 800bc98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc9c:	4b2c      	ldr	r3, [pc, #176]	; (800bd50 <_dtoa_r+0x600>)
 800bc9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bca2:	f7f4 fcc9 	bl	8000638 <__aeabi_dmul>
 800bca6:	e9cd 0100 	strd	r0, r1, [sp]
 800bcaa:	e7c4      	b.n	800bc36 <_dtoa_r+0x4e6>
 800bcac:	462a      	mov	r2, r5
 800bcae:	4633      	mov	r3, r6
 800bcb0:	f7f4 fcc2 	bl	8000638 <__aeabi_dmul>
 800bcb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bcb8:	eb0b 0507 	add.w	r5, fp, r7
 800bcbc:	465e      	mov	r6, fp
 800bcbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc2:	f7f4 ff69 	bl	8000b98 <__aeabi_d2iz>
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	f7f4 fc4c 	bl	8000564 <__aeabi_i2d>
 800bccc:	3730      	adds	r7, #48	; 0x30
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	f806 7b01 	strb.w	r7, [r6], #1
 800bcde:	42ae      	cmp	r6, r5
 800bce0:	e9cd 0100 	strd	r0, r1, [sp]
 800bce4:	f04f 0200 	mov.w	r2, #0
 800bce8:	d126      	bne.n	800bd38 <_dtoa_r+0x5e8>
 800bcea:	4b1c      	ldr	r3, [pc, #112]	; (800bd5c <_dtoa_r+0x60c>)
 800bcec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcf0:	f7f4 faec 	bl	80002cc <__adddf3>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfc:	f7f4 ff2c 	bl	8000b58 <__aeabi_dcmpgt>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d174      	bne.n	800bdee <_dtoa_r+0x69e>
 800bd04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd08:	2000      	movs	r0, #0
 800bd0a:	4914      	ldr	r1, [pc, #80]	; (800bd5c <_dtoa_r+0x60c>)
 800bd0c:	f7f4 fadc 	bl	80002c8 <__aeabi_dsub>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd18:	f7f4 ff00 	bl	8000b1c <__aeabi_dcmplt>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f43f af30 	beq.w	800bb82 <_dtoa_r+0x432>
 800bd22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd26:	2b30      	cmp	r3, #48	; 0x30
 800bd28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bd2c:	d002      	beq.n	800bd34 <_dtoa_r+0x5e4>
 800bd2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd32:	e04a      	b.n	800bdca <_dtoa_r+0x67a>
 800bd34:	4615      	mov	r5, r2
 800bd36:	e7f4      	b.n	800bd22 <_dtoa_r+0x5d2>
 800bd38:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <_dtoa_r+0x600>)
 800bd3a:	f7f4 fc7d 	bl	8000638 <__aeabi_dmul>
 800bd3e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd42:	e7bc      	b.n	800bcbe <_dtoa_r+0x56e>
 800bd44:	08010b18 	.word	0x08010b18
 800bd48:	08010af0 	.word	0x08010af0
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	40240000 	.word	0x40240000
 800bd54:	401c0000 	.word	0x401c0000
 800bd58:	40140000 	.word	0x40140000
 800bd5c:	3fe00000 	.word	0x3fe00000
 800bd60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd64:	465d      	mov	r5, fp
 800bd66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	f7f4 fd8d 	bl	800088c <__aeabi_ddiv>
 800bd72:	f7f4 ff11 	bl	8000b98 <__aeabi_d2iz>
 800bd76:	4680      	mov	r8, r0
 800bd78:	f7f4 fbf4 	bl	8000564 <__aeabi_i2d>
 800bd7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd80:	f7f4 fc5a 	bl	8000638 <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bd90:	f7f4 fa9a 	bl	80002c8 <__aeabi_dsub>
 800bd94:	f805 6b01 	strb.w	r6, [r5], #1
 800bd98:	eba5 060b 	sub.w	r6, r5, fp
 800bd9c:	45b1      	cmp	r9, r6
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	d139      	bne.n	800be18 <_dtoa_r+0x6c8>
 800bda4:	f7f4 fa92 	bl	80002cc <__adddf3>
 800bda8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdac:	4606      	mov	r6, r0
 800bdae:	460f      	mov	r7, r1
 800bdb0:	f7f4 fed2 	bl	8000b58 <__aeabi_dcmpgt>
 800bdb4:	b9c8      	cbnz	r0, 800bdea <_dtoa_r+0x69a>
 800bdb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 fea3 	bl	8000b08 <__aeabi_dcmpeq>
 800bdc2:	b110      	cbz	r0, 800bdca <_dtoa_r+0x67a>
 800bdc4:	f018 0f01 	tst.w	r8, #1
 800bdc8:	d10f      	bne.n	800bdea <_dtoa_r+0x69a>
 800bdca:	9904      	ldr	r1, [sp, #16]
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fdff 	bl	800c9d0 <_Bfree>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdd6:	702b      	strb	r3, [r5, #0]
 800bdd8:	f10a 0301 	add.w	r3, sl, #1
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 8241 	beq.w	800c268 <_dtoa_r+0xb18>
 800bde6:	601d      	str	r5, [r3, #0]
 800bde8:	e23e      	b.n	800c268 <_dtoa_r+0xb18>
 800bdea:	f8cd a020 	str.w	sl, [sp, #32]
 800bdee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdf2:	2a39      	cmp	r2, #57	; 0x39
 800bdf4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bdf8:	d108      	bne.n	800be0c <_dtoa_r+0x6bc>
 800bdfa:	459b      	cmp	fp, r3
 800bdfc:	d10a      	bne.n	800be14 <_dtoa_r+0x6c4>
 800bdfe:	9b08      	ldr	r3, [sp, #32]
 800be00:	3301      	adds	r3, #1
 800be02:	9308      	str	r3, [sp, #32]
 800be04:	2330      	movs	r3, #48	; 0x30
 800be06:	f88b 3000 	strb.w	r3, [fp]
 800be0a:	465b      	mov	r3, fp
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	3201      	adds	r2, #1
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	e78c      	b.n	800bd2e <_dtoa_r+0x5de>
 800be14:	461d      	mov	r5, r3
 800be16:	e7ea      	b.n	800bdee <_dtoa_r+0x69e>
 800be18:	2200      	movs	r2, #0
 800be1a:	4b9b      	ldr	r3, [pc, #620]	; (800c088 <_dtoa_r+0x938>)
 800be1c:	f7f4 fc0c 	bl	8000638 <__aeabi_dmul>
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	f7f4 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d09a      	beq.n	800bd66 <_dtoa_r+0x616>
 800be30:	e7cb      	b.n	800bdca <_dtoa_r+0x67a>
 800be32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be34:	2a00      	cmp	r2, #0
 800be36:	f000 808b 	beq.w	800bf50 <_dtoa_r+0x800>
 800be3a:	9a06      	ldr	r2, [sp, #24]
 800be3c:	2a01      	cmp	r2, #1
 800be3e:	dc6e      	bgt.n	800bf1e <_dtoa_r+0x7ce>
 800be40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be42:	2a00      	cmp	r2, #0
 800be44:	d067      	beq.n	800bf16 <_dtoa_r+0x7c6>
 800be46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be4a:	9f07      	ldr	r7, [sp, #28]
 800be4c:	9d05      	ldr	r5, [sp, #20]
 800be4e:	9a05      	ldr	r2, [sp, #20]
 800be50:	2101      	movs	r1, #1
 800be52:	441a      	add	r2, r3
 800be54:	4620      	mov	r0, r4
 800be56:	9205      	str	r2, [sp, #20]
 800be58:	4498      	add	r8, r3
 800be5a:	f000 fe97 	bl	800cb8c <__i2b>
 800be5e:	4606      	mov	r6, r0
 800be60:	2d00      	cmp	r5, #0
 800be62:	dd0c      	ble.n	800be7e <_dtoa_r+0x72e>
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	dd09      	ble.n	800be7e <_dtoa_r+0x72e>
 800be6a:	4545      	cmp	r5, r8
 800be6c:	9a05      	ldr	r2, [sp, #20]
 800be6e:	462b      	mov	r3, r5
 800be70:	bfa8      	it	ge
 800be72:	4643      	movge	r3, r8
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	9205      	str	r2, [sp, #20]
 800be78:	1aed      	subs	r5, r5, r3
 800be7a:	eba8 0803 	sub.w	r8, r8, r3
 800be7e:	9b07      	ldr	r3, [sp, #28]
 800be80:	b1eb      	cbz	r3, 800bebe <_dtoa_r+0x76e>
 800be82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be84:	2b00      	cmp	r3, #0
 800be86:	d067      	beq.n	800bf58 <_dtoa_r+0x808>
 800be88:	b18f      	cbz	r7, 800beae <_dtoa_r+0x75e>
 800be8a:	4631      	mov	r1, r6
 800be8c:	463a      	mov	r2, r7
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 ff1c 	bl	800cccc <__pow5mult>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	4601      	mov	r1, r0
 800be98:	4606      	mov	r6, r0
 800be9a:	4620      	mov	r0, r4
 800be9c:	f000 fe7f 	bl	800cb9e <__multiply>
 800bea0:	9904      	ldr	r1, [sp, #16]
 800bea2:	9008      	str	r0, [sp, #32]
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 fd93 	bl	800c9d0 <_Bfree>
 800beaa:	9b08      	ldr	r3, [sp, #32]
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	9b07      	ldr	r3, [sp, #28]
 800beb0:	1bda      	subs	r2, r3, r7
 800beb2:	d004      	beq.n	800bebe <_dtoa_r+0x76e>
 800beb4:	9904      	ldr	r1, [sp, #16]
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 ff08 	bl	800cccc <__pow5mult>
 800bebc:	9004      	str	r0, [sp, #16]
 800bebe:	2101      	movs	r1, #1
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 fe63 	bl	800cb8c <__i2b>
 800bec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bec8:	4607      	mov	r7, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 81d0 	beq.w	800c270 <_dtoa_r+0xb20>
 800bed0:	461a      	mov	r2, r3
 800bed2:	4601      	mov	r1, r0
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 fef9 	bl	800cccc <__pow5mult>
 800beda:	9b06      	ldr	r3, [sp, #24]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	4607      	mov	r7, r0
 800bee0:	dc40      	bgt.n	800bf64 <_dtoa_r+0x814>
 800bee2:	9b00      	ldr	r3, [sp, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d139      	bne.n	800bf5c <_dtoa_r+0x80c>
 800bee8:	9b01      	ldr	r3, [sp, #4]
 800beea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d136      	bne.n	800bf60 <_dtoa_r+0x810>
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bef8:	0d1b      	lsrs	r3, r3, #20
 800befa:	051b      	lsls	r3, r3, #20
 800befc:	b12b      	cbz	r3, 800bf0a <_dtoa_r+0x7ba>
 800befe:	9b05      	ldr	r3, [sp, #20]
 800bf00:	3301      	adds	r3, #1
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	f108 0801 	add.w	r8, r8, #1
 800bf08:	2301      	movs	r3, #1
 800bf0a:	9307      	str	r3, [sp, #28]
 800bf0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d12a      	bne.n	800bf68 <_dtoa_r+0x818>
 800bf12:	2001      	movs	r0, #1
 800bf14:	e030      	b.n	800bf78 <_dtoa_r+0x828>
 800bf16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf1c:	e795      	b.n	800be4a <_dtoa_r+0x6fa>
 800bf1e:	9b07      	ldr	r3, [sp, #28]
 800bf20:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800bf24:	42bb      	cmp	r3, r7
 800bf26:	bfbf      	itttt	lt
 800bf28:	9b07      	ldrlt	r3, [sp, #28]
 800bf2a:	9707      	strlt	r7, [sp, #28]
 800bf2c:	1afa      	sublt	r2, r7, r3
 800bf2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bf30:	bfbb      	ittet	lt
 800bf32:	189b      	addlt	r3, r3, r2
 800bf34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bf36:	1bdf      	subge	r7, r3, r7
 800bf38:	2700      	movlt	r7, #0
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	bfb5      	itete	lt
 800bf40:	9b05      	ldrlt	r3, [sp, #20]
 800bf42:	9d05      	ldrge	r5, [sp, #20]
 800bf44:	eba3 0509 	sublt.w	r5, r3, r9
 800bf48:	464b      	movge	r3, r9
 800bf4a:	bfb8      	it	lt
 800bf4c:	2300      	movlt	r3, #0
 800bf4e:	e77e      	b.n	800be4e <_dtoa_r+0x6fe>
 800bf50:	9f07      	ldr	r7, [sp, #28]
 800bf52:	9d05      	ldr	r5, [sp, #20]
 800bf54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bf56:	e783      	b.n	800be60 <_dtoa_r+0x710>
 800bf58:	9a07      	ldr	r2, [sp, #28]
 800bf5a:	e7ab      	b.n	800beb4 <_dtoa_r+0x764>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e7d4      	b.n	800bf0a <_dtoa_r+0x7ba>
 800bf60:	9b00      	ldr	r3, [sp, #0]
 800bf62:	e7d2      	b.n	800bf0a <_dtoa_r+0x7ba>
 800bf64:	2300      	movs	r3, #0
 800bf66:	9307      	str	r3, [sp, #28]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bf6e:	6918      	ldr	r0, [r3, #16]
 800bf70:	f000 fdbe 	bl	800caf0 <__hi0bits>
 800bf74:	f1c0 0020 	rsb	r0, r0, #32
 800bf78:	4440      	add	r0, r8
 800bf7a:	f010 001f 	ands.w	r0, r0, #31
 800bf7e:	d047      	beq.n	800c010 <_dtoa_r+0x8c0>
 800bf80:	f1c0 0320 	rsb	r3, r0, #32
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	dd3b      	ble.n	800c000 <_dtoa_r+0x8b0>
 800bf88:	9b05      	ldr	r3, [sp, #20]
 800bf8a:	f1c0 001c 	rsb	r0, r0, #28
 800bf8e:	4403      	add	r3, r0
 800bf90:	9305      	str	r3, [sp, #20]
 800bf92:	4405      	add	r5, r0
 800bf94:	4480      	add	r8, r0
 800bf96:	9b05      	ldr	r3, [sp, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	dd05      	ble.n	800bfa8 <_dtoa_r+0x858>
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	9904      	ldr	r1, [sp, #16]
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f000 fee1 	bl	800cd68 <__lshift>
 800bfa6:	9004      	str	r0, [sp, #16]
 800bfa8:	f1b8 0f00 	cmp.w	r8, #0
 800bfac:	dd05      	ble.n	800bfba <_dtoa_r+0x86a>
 800bfae:	4639      	mov	r1, r7
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 fed8 	bl	800cd68 <__lshift>
 800bfb8:	4607      	mov	r7, r0
 800bfba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfbc:	b353      	cbz	r3, 800c014 <_dtoa_r+0x8c4>
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	9804      	ldr	r0, [sp, #16]
 800bfc2:	f000 ff25 	bl	800ce10 <__mcmp>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	da24      	bge.n	800c014 <_dtoa_r+0x8c4>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	220a      	movs	r2, #10
 800bfce:	9904      	ldr	r1, [sp, #16]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 fd14 	bl	800c9fe <__multadd>
 800bfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd8:	9004      	str	r0, [sp, #16]
 800bfda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 814d 	beq.w	800c27e <_dtoa_r+0xb2e>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fd07 	bl	800c9fe <__multadd>
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	4606      	mov	r6, r0
 800bff6:	dc4f      	bgt.n	800c098 <_dtoa_r+0x948>
 800bff8:	9b06      	ldr	r3, [sp, #24]
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	dd4c      	ble.n	800c098 <_dtoa_r+0x948>
 800bffe:	e011      	b.n	800c024 <_dtoa_r+0x8d4>
 800c000:	d0c9      	beq.n	800bf96 <_dtoa_r+0x846>
 800c002:	9a05      	ldr	r2, [sp, #20]
 800c004:	331c      	adds	r3, #28
 800c006:	441a      	add	r2, r3
 800c008:	9205      	str	r2, [sp, #20]
 800c00a:	441d      	add	r5, r3
 800c00c:	4498      	add	r8, r3
 800c00e:	e7c2      	b.n	800bf96 <_dtoa_r+0x846>
 800c010:	4603      	mov	r3, r0
 800c012:	e7f6      	b.n	800c002 <_dtoa_r+0x8b2>
 800c014:	f1b9 0f00 	cmp.w	r9, #0
 800c018:	dc38      	bgt.n	800c08c <_dtoa_r+0x93c>
 800c01a:	9b06      	ldr	r3, [sp, #24]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	dd35      	ble.n	800c08c <_dtoa_r+0x93c>
 800c020:	f8cd 9008 	str.w	r9, [sp, #8]
 800c024:	9b02      	ldr	r3, [sp, #8]
 800c026:	b963      	cbnz	r3, 800c042 <_dtoa_r+0x8f2>
 800c028:	4639      	mov	r1, r7
 800c02a:	2205      	movs	r2, #5
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 fce6 	bl	800c9fe <__multadd>
 800c032:	4601      	mov	r1, r0
 800c034:	4607      	mov	r7, r0
 800c036:	9804      	ldr	r0, [sp, #16]
 800c038:	f000 feea 	bl	800ce10 <__mcmp>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	f73f adcc 	bgt.w	800bbda <_dtoa_r+0x48a>
 800c042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c044:	465d      	mov	r5, fp
 800c046:	ea6f 0a03 	mvn.w	sl, r3
 800c04a:	f04f 0900 	mov.w	r9, #0
 800c04e:	4639      	mov	r1, r7
 800c050:	4620      	mov	r0, r4
 800c052:	f000 fcbd 	bl	800c9d0 <_Bfree>
 800c056:	2e00      	cmp	r6, #0
 800c058:	f43f aeb7 	beq.w	800bdca <_dtoa_r+0x67a>
 800c05c:	f1b9 0f00 	cmp.w	r9, #0
 800c060:	d005      	beq.n	800c06e <_dtoa_r+0x91e>
 800c062:	45b1      	cmp	r9, r6
 800c064:	d003      	beq.n	800c06e <_dtoa_r+0x91e>
 800c066:	4649      	mov	r1, r9
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fcb1 	bl	800c9d0 <_Bfree>
 800c06e:	4631      	mov	r1, r6
 800c070:	4620      	mov	r0, r4
 800c072:	f000 fcad 	bl	800c9d0 <_Bfree>
 800c076:	e6a8      	b.n	800bdca <_dtoa_r+0x67a>
 800c078:	2700      	movs	r7, #0
 800c07a:	463e      	mov	r6, r7
 800c07c:	e7e1      	b.n	800c042 <_dtoa_r+0x8f2>
 800c07e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c082:	463e      	mov	r6, r7
 800c084:	e5a9      	b.n	800bbda <_dtoa_r+0x48a>
 800c086:	bf00      	nop
 800c088:	40240000 	.word	0x40240000
 800c08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 80fa 	beq.w	800c28c <_dtoa_r+0xb3c>
 800c098:	2d00      	cmp	r5, #0
 800c09a:	dd05      	ble.n	800c0a8 <_dtoa_r+0x958>
 800c09c:	4631      	mov	r1, r6
 800c09e:	462a      	mov	r2, r5
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fe61 	bl	800cd68 <__lshift>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	9b07      	ldr	r3, [sp, #28]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d04c      	beq.n	800c148 <_dtoa_r+0x9f8>
 800c0ae:	6871      	ldr	r1, [r6, #4]
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f000 fc59 	bl	800c968 <_Balloc>
 800c0b6:	6932      	ldr	r2, [r6, #16]
 800c0b8:	3202      	adds	r2, #2
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	0092      	lsls	r2, r2, #2
 800c0be:	f106 010c 	add.w	r1, r6, #12
 800c0c2:	300c      	adds	r0, #12
 800c0c4:	f7fd fd52 	bl	8009b6c <memcpy>
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fe4b 	bl	800cd68 <__lshift>
 800c0d2:	9b00      	ldr	r3, [sp, #0]
 800c0d4:	f8cd b014 	str.w	fp, [sp, #20]
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	46b1      	mov	r9, r6
 800c0de:	9307      	str	r3, [sp, #28]
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	9804      	ldr	r0, [sp, #16]
 800c0e6:	f7ff faa7 	bl	800b638 <quorem>
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0f2:	9804      	ldr	r0, [sp, #16]
 800c0f4:	f000 fe8c 	bl	800ce10 <__mcmp>
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	9000      	str	r0, [sp, #0]
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 fea0 	bl	800ce44 <__mdiff>
 800c104:	68c3      	ldr	r3, [r0, #12]
 800c106:	4602      	mov	r2, r0
 800c108:	bb03      	cbnz	r3, 800c14c <_dtoa_r+0x9fc>
 800c10a:	4601      	mov	r1, r0
 800c10c:	9008      	str	r0, [sp, #32]
 800c10e:	9804      	ldr	r0, [sp, #16]
 800c110:	f000 fe7e 	bl	800ce10 <__mcmp>
 800c114:	9a08      	ldr	r2, [sp, #32]
 800c116:	4603      	mov	r3, r0
 800c118:	4611      	mov	r1, r2
 800c11a:	4620      	mov	r0, r4
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	f000 fc57 	bl	800c9d0 <_Bfree>
 800c122:	9b08      	ldr	r3, [sp, #32]
 800c124:	b9a3      	cbnz	r3, 800c150 <_dtoa_r+0xa00>
 800c126:	9a06      	ldr	r2, [sp, #24]
 800c128:	b992      	cbnz	r2, 800c150 <_dtoa_r+0xa00>
 800c12a:	9a07      	ldr	r2, [sp, #28]
 800c12c:	b982      	cbnz	r2, 800c150 <_dtoa_r+0xa00>
 800c12e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c132:	d029      	beq.n	800c188 <_dtoa_r+0xa38>
 800c134:	9b00      	ldr	r3, [sp, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dd01      	ble.n	800c13e <_dtoa_r+0x9ee>
 800c13a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c13e:	9b05      	ldr	r3, [sp, #20]
 800c140:	1c5d      	adds	r5, r3, #1
 800c142:	f883 8000 	strb.w	r8, [r3]
 800c146:	e782      	b.n	800c04e <_dtoa_r+0x8fe>
 800c148:	4630      	mov	r0, r6
 800c14a:	e7c2      	b.n	800c0d2 <_dtoa_r+0x982>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e7e3      	b.n	800c118 <_dtoa_r+0x9c8>
 800c150:	9a00      	ldr	r2, [sp, #0]
 800c152:	2a00      	cmp	r2, #0
 800c154:	db04      	blt.n	800c160 <_dtoa_r+0xa10>
 800c156:	d125      	bne.n	800c1a4 <_dtoa_r+0xa54>
 800c158:	9a06      	ldr	r2, [sp, #24]
 800c15a:	bb1a      	cbnz	r2, 800c1a4 <_dtoa_r+0xa54>
 800c15c:	9a07      	ldr	r2, [sp, #28]
 800c15e:	bb0a      	cbnz	r2, 800c1a4 <_dtoa_r+0xa54>
 800c160:	2b00      	cmp	r3, #0
 800c162:	ddec      	ble.n	800c13e <_dtoa_r+0x9ee>
 800c164:	2201      	movs	r2, #1
 800c166:	9904      	ldr	r1, [sp, #16]
 800c168:	4620      	mov	r0, r4
 800c16a:	f000 fdfd 	bl	800cd68 <__lshift>
 800c16e:	4639      	mov	r1, r7
 800c170:	9004      	str	r0, [sp, #16]
 800c172:	f000 fe4d 	bl	800ce10 <__mcmp>
 800c176:	2800      	cmp	r0, #0
 800c178:	dc03      	bgt.n	800c182 <_dtoa_r+0xa32>
 800c17a:	d1e0      	bne.n	800c13e <_dtoa_r+0x9ee>
 800c17c:	f018 0f01 	tst.w	r8, #1
 800c180:	d0dd      	beq.n	800c13e <_dtoa_r+0x9ee>
 800c182:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c186:	d1d8      	bne.n	800c13a <_dtoa_r+0x9ea>
 800c188:	9b05      	ldr	r3, [sp, #20]
 800c18a:	9a05      	ldr	r2, [sp, #20]
 800c18c:	1c5d      	adds	r5, r3, #1
 800c18e:	2339      	movs	r3, #57	; 0x39
 800c190:	7013      	strb	r3, [r2, #0]
 800c192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c196:	2b39      	cmp	r3, #57	; 0x39
 800c198:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c19c:	d04f      	beq.n	800c23e <_dtoa_r+0xaee>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	7013      	strb	r3, [r2, #0]
 800c1a2:	e754      	b.n	800c04e <_dtoa_r+0x8fe>
 800c1a4:	9a05      	ldr	r2, [sp, #20]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f102 0501 	add.w	r5, r2, #1
 800c1ac:	dd06      	ble.n	800c1bc <_dtoa_r+0xa6c>
 800c1ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1b2:	d0e9      	beq.n	800c188 <_dtoa_r+0xa38>
 800c1b4:	f108 0801 	add.w	r8, r8, #1
 800c1b8:	9b05      	ldr	r3, [sp, #20]
 800c1ba:	e7c2      	b.n	800c142 <_dtoa_r+0x9f2>
 800c1bc:	9a02      	ldr	r2, [sp, #8]
 800c1be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c1c2:	eba5 030b 	sub.w	r3, r5, fp
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d021      	beq.n	800c20e <_dtoa_r+0xabe>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	220a      	movs	r2, #10
 800c1ce:	9904      	ldr	r1, [sp, #16]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 fc14 	bl	800c9fe <__multadd>
 800c1d6:	45b1      	cmp	r9, r6
 800c1d8:	9004      	str	r0, [sp, #16]
 800c1da:	f04f 0300 	mov.w	r3, #0
 800c1de:	f04f 020a 	mov.w	r2, #10
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	d105      	bne.n	800c1f4 <_dtoa_r+0xaa4>
 800c1e8:	f000 fc09 	bl	800c9fe <__multadd>
 800c1ec:	4681      	mov	r9, r0
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	9505      	str	r5, [sp, #20]
 800c1f2:	e776      	b.n	800c0e2 <_dtoa_r+0x992>
 800c1f4:	f000 fc03 	bl	800c9fe <__multadd>
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	220a      	movs	r2, #10
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fbfc 	bl	800c9fe <__multadd>
 800c206:	4606      	mov	r6, r0
 800c208:	e7f2      	b.n	800c1f0 <_dtoa_r+0xaa0>
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	2201      	movs	r2, #1
 800c210:	9904      	ldr	r1, [sp, #16]
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fda8 	bl	800cd68 <__lshift>
 800c218:	4639      	mov	r1, r7
 800c21a:	9004      	str	r0, [sp, #16]
 800c21c:	f000 fdf8 	bl	800ce10 <__mcmp>
 800c220:	2800      	cmp	r0, #0
 800c222:	dcb6      	bgt.n	800c192 <_dtoa_r+0xa42>
 800c224:	d102      	bne.n	800c22c <_dtoa_r+0xadc>
 800c226:	f018 0f01 	tst.w	r8, #1
 800c22a:	d1b2      	bne.n	800c192 <_dtoa_r+0xa42>
 800c22c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c230:	2b30      	cmp	r3, #48	; 0x30
 800c232:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c236:	f47f af0a 	bne.w	800c04e <_dtoa_r+0x8fe>
 800c23a:	4615      	mov	r5, r2
 800c23c:	e7f6      	b.n	800c22c <_dtoa_r+0xadc>
 800c23e:	4593      	cmp	fp, r2
 800c240:	d105      	bne.n	800c24e <_dtoa_r+0xafe>
 800c242:	2331      	movs	r3, #49	; 0x31
 800c244:	f10a 0a01 	add.w	sl, sl, #1
 800c248:	f88b 3000 	strb.w	r3, [fp]
 800c24c:	e6ff      	b.n	800c04e <_dtoa_r+0x8fe>
 800c24e:	4615      	mov	r5, r2
 800c250:	e79f      	b.n	800c192 <_dtoa_r+0xa42>
 800c252:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c2b8 <_dtoa_r+0xb68>
 800c256:	e007      	b.n	800c268 <_dtoa_r+0xb18>
 800c258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c25a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c2bc <_dtoa_r+0xb6c>
 800c25e:	b11b      	cbz	r3, 800c268 <_dtoa_r+0xb18>
 800c260:	f10b 0308 	add.w	r3, fp, #8
 800c264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	4658      	mov	r0, fp
 800c26a:	b017      	add	sp, #92	; 0x5c
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c270:	9b06      	ldr	r3, [sp, #24]
 800c272:	2b01      	cmp	r3, #1
 800c274:	f77f ae35 	ble.w	800bee2 <_dtoa_r+0x792>
 800c278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c27a:	9307      	str	r3, [sp, #28]
 800c27c:	e649      	b.n	800bf12 <_dtoa_r+0x7c2>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	dc03      	bgt.n	800c28c <_dtoa_r+0xb3c>
 800c284:	9b06      	ldr	r3, [sp, #24]
 800c286:	2b02      	cmp	r3, #2
 800c288:	f73f aecc 	bgt.w	800c024 <_dtoa_r+0x8d4>
 800c28c:	465d      	mov	r5, fp
 800c28e:	4639      	mov	r1, r7
 800c290:	9804      	ldr	r0, [sp, #16]
 800c292:	f7ff f9d1 	bl	800b638 <quorem>
 800c296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c29a:	f805 8b01 	strb.w	r8, [r5], #1
 800c29e:	9a02      	ldr	r2, [sp, #8]
 800c2a0:	eba5 030b 	sub.w	r3, r5, fp
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	ddb0      	ble.n	800c20a <_dtoa_r+0xaba>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	220a      	movs	r2, #10
 800c2ac:	9904      	ldr	r1, [sp, #16]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 fba5 	bl	800c9fe <__multadd>
 800c2b4:	9004      	str	r0, [sp, #16]
 800c2b6:	e7ea      	b.n	800c28e <_dtoa_r+0xb3e>
 800c2b8:	08010a34 	.word	0x08010a34
 800c2bc:	08010ad5 	.word	0x08010ad5

0800c2c0 <rshift>:
 800c2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2c2:	6906      	ldr	r6, [r0, #16]
 800c2c4:	114b      	asrs	r3, r1, #5
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	f100 0414 	add.w	r4, r0, #20
 800c2cc:	dd30      	ble.n	800c330 <rshift+0x70>
 800c2ce:	f011 011f 	ands.w	r1, r1, #31
 800c2d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c2d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c2da:	d108      	bne.n	800c2ee <rshift+0x2e>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	42b2      	cmp	r2, r6
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	d211      	bcs.n	800c308 <rshift+0x48>
 800c2e4:	f852 3b04 	ldr.w	r3, [r2], #4
 800c2e8:	f841 3b04 	str.w	r3, [r1], #4
 800c2ec:	e7f7      	b.n	800c2de <rshift+0x1e>
 800c2ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c2f2:	f1c1 0c20 	rsb	ip, r1, #32
 800c2f6:	40cd      	lsrs	r5, r1
 800c2f8:	3204      	adds	r2, #4
 800c2fa:	4623      	mov	r3, r4
 800c2fc:	42b2      	cmp	r2, r6
 800c2fe:	4617      	mov	r7, r2
 800c300:	d30c      	bcc.n	800c31c <rshift+0x5c>
 800c302:	601d      	str	r5, [r3, #0]
 800c304:	b105      	cbz	r5, 800c308 <rshift+0x48>
 800c306:	3304      	adds	r3, #4
 800c308:	1b1a      	subs	r2, r3, r4
 800c30a:	42a3      	cmp	r3, r4
 800c30c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c310:	bf08      	it	eq
 800c312:	2300      	moveq	r3, #0
 800c314:	6102      	str	r2, [r0, #16]
 800c316:	bf08      	it	eq
 800c318:	6143      	streq	r3, [r0, #20]
 800c31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31c:	683f      	ldr	r7, [r7, #0]
 800c31e:	fa07 f70c 	lsl.w	r7, r7, ip
 800c322:	433d      	orrs	r5, r7
 800c324:	f843 5b04 	str.w	r5, [r3], #4
 800c328:	f852 5b04 	ldr.w	r5, [r2], #4
 800c32c:	40cd      	lsrs	r5, r1
 800c32e:	e7e5      	b.n	800c2fc <rshift+0x3c>
 800c330:	4623      	mov	r3, r4
 800c332:	e7e9      	b.n	800c308 <rshift+0x48>

0800c334 <__hexdig_fun>:
 800c334:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c338:	2b09      	cmp	r3, #9
 800c33a:	d802      	bhi.n	800c342 <__hexdig_fun+0xe>
 800c33c:	3820      	subs	r0, #32
 800c33e:	b2c0      	uxtb	r0, r0
 800c340:	4770      	bx	lr
 800c342:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c346:	2b05      	cmp	r3, #5
 800c348:	d801      	bhi.n	800c34e <__hexdig_fun+0x1a>
 800c34a:	3847      	subs	r0, #71	; 0x47
 800c34c:	e7f7      	b.n	800c33e <__hexdig_fun+0xa>
 800c34e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c352:	2b05      	cmp	r3, #5
 800c354:	d801      	bhi.n	800c35a <__hexdig_fun+0x26>
 800c356:	3827      	subs	r0, #39	; 0x27
 800c358:	e7f1      	b.n	800c33e <__hexdig_fun+0xa>
 800c35a:	2000      	movs	r0, #0
 800c35c:	4770      	bx	lr

0800c35e <__gethex>:
 800c35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c362:	b08b      	sub	sp, #44	; 0x2c
 800c364:	468a      	mov	sl, r1
 800c366:	9002      	str	r0, [sp, #8]
 800c368:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c36a:	9306      	str	r3, [sp, #24]
 800c36c:	4690      	mov	r8, r2
 800c36e:	f000 fad0 	bl	800c912 <__localeconv_l>
 800c372:	6803      	ldr	r3, [r0, #0]
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	4618      	mov	r0, r3
 800c378:	f7f3 ff4a 	bl	8000210 <strlen>
 800c37c:	9b03      	ldr	r3, [sp, #12]
 800c37e:	9001      	str	r0, [sp, #4]
 800c380:	4403      	add	r3, r0
 800c382:	f04f 0b00 	mov.w	fp, #0
 800c386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	f8da 3000 	ldr.w	r3, [sl]
 800c390:	3302      	adds	r3, #2
 800c392:	461f      	mov	r7, r3
 800c394:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c398:	2830      	cmp	r0, #48	; 0x30
 800c39a:	d06c      	beq.n	800c476 <__gethex+0x118>
 800c39c:	f7ff ffca 	bl	800c334 <__hexdig_fun>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d16a      	bne.n	800c47c <__gethex+0x11e>
 800c3a6:	9a01      	ldr	r2, [sp, #4]
 800c3a8:	9903      	ldr	r1, [sp, #12]
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f001 f8f4 	bl	800d598 <strncmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d166      	bne.n	800c482 <__gethex+0x124>
 800c3b4:	9b01      	ldr	r3, [sp, #4]
 800c3b6:	5cf8      	ldrb	r0, [r7, r3]
 800c3b8:	18fe      	adds	r6, r7, r3
 800c3ba:	f7ff ffbb 	bl	800c334 <__hexdig_fun>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d062      	beq.n	800c488 <__gethex+0x12a>
 800c3c2:	4633      	mov	r3, r6
 800c3c4:	7818      	ldrb	r0, [r3, #0]
 800c3c6:	2830      	cmp	r0, #48	; 0x30
 800c3c8:	461f      	mov	r7, r3
 800c3ca:	f103 0301 	add.w	r3, r3, #1
 800c3ce:	d0f9      	beq.n	800c3c4 <__gethex+0x66>
 800c3d0:	f7ff ffb0 	bl	800c334 <__hexdig_fun>
 800c3d4:	fab0 f580 	clz	r5, r0
 800c3d8:	096d      	lsrs	r5, r5, #5
 800c3da:	4634      	mov	r4, r6
 800c3dc:	f04f 0b01 	mov.w	fp, #1
 800c3e0:	463a      	mov	r2, r7
 800c3e2:	4616      	mov	r6, r2
 800c3e4:	3201      	adds	r2, #1
 800c3e6:	7830      	ldrb	r0, [r6, #0]
 800c3e8:	f7ff ffa4 	bl	800c334 <__hexdig_fun>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d1f8      	bne.n	800c3e2 <__gethex+0x84>
 800c3f0:	9a01      	ldr	r2, [sp, #4]
 800c3f2:	9903      	ldr	r1, [sp, #12]
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f001 f8cf 	bl	800d598 <strncmp>
 800c3fa:	b950      	cbnz	r0, 800c412 <__gethex+0xb4>
 800c3fc:	b954      	cbnz	r4, 800c414 <__gethex+0xb6>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	18f4      	adds	r4, r6, r3
 800c402:	4622      	mov	r2, r4
 800c404:	4616      	mov	r6, r2
 800c406:	3201      	adds	r2, #1
 800c408:	7830      	ldrb	r0, [r6, #0]
 800c40a:	f7ff ff93 	bl	800c334 <__hexdig_fun>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d1f8      	bne.n	800c404 <__gethex+0xa6>
 800c412:	b10c      	cbz	r4, 800c418 <__gethex+0xba>
 800c414:	1ba4      	subs	r4, r4, r6
 800c416:	00a4      	lsls	r4, r4, #2
 800c418:	7833      	ldrb	r3, [r6, #0]
 800c41a:	2b50      	cmp	r3, #80	; 0x50
 800c41c:	d001      	beq.n	800c422 <__gethex+0xc4>
 800c41e:	2b70      	cmp	r3, #112	; 0x70
 800c420:	d140      	bne.n	800c4a4 <__gethex+0x146>
 800c422:	7873      	ldrb	r3, [r6, #1]
 800c424:	2b2b      	cmp	r3, #43	; 0x2b
 800c426:	d031      	beq.n	800c48c <__gethex+0x12e>
 800c428:	2b2d      	cmp	r3, #45	; 0x2d
 800c42a:	d033      	beq.n	800c494 <__gethex+0x136>
 800c42c:	1c71      	adds	r1, r6, #1
 800c42e:	f04f 0900 	mov.w	r9, #0
 800c432:	7808      	ldrb	r0, [r1, #0]
 800c434:	f7ff ff7e 	bl	800c334 <__hexdig_fun>
 800c438:	1e43      	subs	r3, r0, #1
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b18      	cmp	r3, #24
 800c43e:	d831      	bhi.n	800c4a4 <__gethex+0x146>
 800c440:	f1a0 0210 	sub.w	r2, r0, #16
 800c444:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c448:	f7ff ff74 	bl	800c334 <__hexdig_fun>
 800c44c:	1e43      	subs	r3, r0, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b18      	cmp	r3, #24
 800c452:	d922      	bls.n	800c49a <__gethex+0x13c>
 800c454:	f1b9 0f00 	cmp.w	r9, #0
 800c458:	d000      	beq.n	800c45c <__gethex+0xfe>
 800c45a:	4252      	negs	r2, r2
 800c45c:	4414      	add	r4, r2
 800c45e:	f8ca 1000 	str.w	r1, [sl]
 800c462:	b30d      	cbz	r5, 800c4a8 <__gethex+0x14a>
 800c464:	f1bb 0f00 	cmp.w	fp, #0
 800c468:	bf0c      	ite	eq
 800c46a:	2706      	moveq	r7, #6
 800c46c:	2700      	movne	r7, #0
 800c46e:	4638      	mov	r0, r7
 800c470:	b00b      	add	sp, #44	; 0x2c
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	f10b 0b01 	add.w	fp, fp, #1
 800c47a:	e78a      	b.n	800c392 <__gethex+0x34>
 800c47c:	2500      	movs	r5, #0
 800c47e:	462c      	mov	r4, r5
 800c480:	e7ae      	b.n	800c3e0 <__gethex+0x82>
 800c482:	463e      	mov	r6, r7
 800c484:	2501      	movs	r5, #1
 800c486:	e7c7      	b.n	800c418 <__gethex+0xba>
 800c488:	4604      	mov	r4, r0
 800c48a:	e7fb      	b.n	800c484 <__gethex+0x126>
 800c48c:	f04f 0900 	mov.w	r9, #0
 800c490:	1cb1      	adds	r1, r6, #2
 800c492:	e7ce      	b.n	800c432 <__gethex+0xd4>
 800c494:	f04f 0901 	mov.w	r9, #1
 800c498:	e7fa      	b.n	800c490 <__gethex+0x132>
 800c49a:	230a      	movs	r3, #10
 800c49c:	fb03 0202 	mla	r2, r3, r2, r0
 800c4a0:	3a10      	subs	r2, #16
 800c4a2:	e7cf      	b.n	800c444 <__gethex+0xe6>
 800c4a4:	4631      	mov	r1, r6
 800c4a6:	e7da      	b.n	800c45e <__gethex+0x100>
 800c4a8:	1bf3      	subs	r3, r6, r7
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	2b07      	cmp	r3, #7
 800c4b0:	dc49      	bgt.n	800c546 <__gethex+0x1e8>
 800c4b2:	9802      	ldr	r0, [sp, #8]
 800c4b4:	f000 fa58 	bl	800c968 <_Balloc>
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	f100 0914 	add.w	r9, r0, #20
 800c4be:	f04f 0b00 	mov.w	fp, #0
 800c4c2:	f1c3 0301 	rsb	r3, r3, #1
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	f8cd 9010 	str.w	r9, [sp, #16]
 800c4cc:	46da      	mov	sl, fp
 800c4ce:	9308      	str	r3, [sp, #32]
 800c4d0:	42b7      	cmp	r7, r6
 800c4d2:	d33b      	bcc.n	800c54c <__gethex+0x1ee>
 800c4d4:	9804      	ldr	r0, [sp, #16]
 800c4d6:	f840 ab04 	str.w	sl, [r0], #4
 800c4da:	eba0 0009 	sub.w	r0, r0, r9
 800c4de:	1080      	asrs	r0, r0, #2
 800c4e0:	6128      	str	r0, [r5, #16]
 800c4e2:	0147      	lsls	r7, r0, #5
 800c4e4:	4650      	mov	r0, sl
 800c4e6:	f000 fb03 	bl	800caf0 <__hi0bits>
 800c4ea:	f8d8 6000 	ldr.w	r6, [r8]
 800c4ee:	1a3f      	subs	r7, r7, r0
 800c4f0:	42b7      	cmp	r7, r6
 800c4f2:	dd64      	ble.n	800c5be <__gethex+0x260>
 800c4f4:	1bbf      	subs	r7, r7, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f000 fe13 	bl	800d124 <__any_on>
 800c4fe:	4682      	mov	sl, r0
 800c500:	b178      	cbz	r0, 800c522 <__gethex+0x1c4>
 800c502:	1e7b      	subs	r3, r7, #1
 800c504:	1159      	asrs	r1, r3, #5
 800c506:	f003 021f 	and.w	r2, r3, #31
 800c50a:	f04f 0a01 	mov.w	sl, #1
 800c50e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c512:	fa0a f202 	lsl.w	r2, sl, r2
 800c516:	420a      	tst	r2, r1
 800c518:	d003      	beq.n	800c522 <__gethex+0x1c4>
 800c51a:	4553      	cmp	r3, sl
 800c51c:	dc46      	bgt.n	800c5ac <__gethex+0x24e>
 800c51e:	f04f 0a02 	mov.w	sl, #2
 800c522:	4639      	mov	r1, r7
 800c524:	4628      	mov	r0, r5
 800c526:	f7ff fecb 	bl	800c2c0 <rshift>
 800c52a:	443c      	add	r4, r7
 800c52c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c530:	42a3      	cmp	r3, r4
 800c532:	da52      	bge.n	800c5da <__gethex+0x27c>
 800c534:	4629      	mov	r1, r5
 800c536:	9802      	ldr	r0, [sp, #8]
 800c538:	f000 fa4a 	bl	800c9d0 <_Bfree>
 800c53c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c53e:	2300      	movs	r3, #0
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	27a3      	movs	r7, #163	; 0xa3
 800c544:	e793      	b.n	800c46e <__gethex+0x110>
 800c546:	3101      	adds	r1, #1
 800c548:	105b      	asrs	r3, r3, #1
 800c54a:	e7b0      	b.n	800c4ae <__gethex+0x150>
 800c54c:	1e73      	subs	r3, r6, #1
 800c54e:	9305      	str	r3, [sp, #20]
 800c550:	9a07      	ldr	r2, [sp, #28]
 800c552:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c556:	4293      	cmp	r3, r2
 800c558:	d018      	beq.n	800c58c <__gethex+0x22e>
 800c55a:	f1bb 0f20 	cmp.w	fp, #32
 800c55e:	d107      	bne.n	800c570 <__gethex+0x212>
 800c560:	9b04      	ldr	r3, [sp, #16]
 800c562:	f8c3 a000 	str.w	sl, [r3]
 800c566:	3304      	adds	r3, #4
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	46d3      	mov	fp, sl
 800c570:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c574:	f7ff fede 	bl	800c334 <__hexdig_fun>
 800c578:	f000 000f 	and.w	r0, r0, #15
 800c57c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c580:	ea4a 0a00 	orr.w	sl, sl, r0
 800c584:	f10b 0b04 	add.w	fp, fp, #4
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	e00d      	b.n	800c5a8 <__gethex+0x24a>
 800c58c:	9b05      	ldr	r3, [sp, #20]
 800c58e:	9a08      	ldr	r2, [sp, #32]
 800c590:	4413      	add	r3, r2
 800c592:	42bb      	cmp	r3, r7
 800c594:	d3e1      	bcc.n	800c55a <__gethex+0x1fc>
 800c596:	4618      	mov	r0, r3
 800c598:	9a01      	ldr	r2, [sp, #4]
 800c59a:	9903      	ldr	r1, [sp, #12]
 800c59c:	9309      	str	r3, [sp, #36]	; 0x24
 800c59e:	f000 fffb 	bl	800d598 <strncmp>
 800c5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d1d8      	bne.n	800c55a <__gethex+0x1fc>
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	e791      	b.n	800c4d0 <__gethex+0x172>
 800c5ac:	1eb9      	subs	r1, r7, #2
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f000 fdb8 	bl	800d124 <__any_on>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d0b2      	beq.n	800c51e <__gethex+0x1c0>
 800c5b8:	f04f 0a03 	mov.w	sl, #3
 800c5bc:	e7b1      	b.n	800c522 <__gethex+0x1c4>
 800c5be:	da09      	bge.n	800c5d4 <__gethex+0x276>
 800c5c0:	1bf7      	subs	r7, r6, r7
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	463a      	mov	r2, r7
 800c5c6:	9802      	ldr	r0, [sp, #8]
 800c5c8:	f000 fbce 	bl	800cd68 <__lshift>
 800c5cc:	1be4      	subs	r4, r4, r7
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	f100 0914 	add.w	r9, r0, #20
 800c5d4:	f04f 0a00 	mov.w	sl, #0
 800c5d8:	e7a8      	b.n	800c52c <__gethex+0x1ce>
 800c5da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5de:	42a0      	cmp	r0, r4
 800c5e0:	dd6a      	ble.n	800c6b8 <__gethex+0x35a>
 800c5e2:	1b04      	subs	r4, r0, r4
 800c5e4:	42a6      	cmp	r6, r4
 800c5e6:	dc2e      	bgt.n	800c646 <__gethex+0x2e8>
 800c5e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d022      	beq.n	800c636 <__gethex+0x2d8>
 800c5f0:	2b03      	cmp	r3, #3
 800c5f2:	d024      	beq.n	800c63e <__gethex+0x2e0>
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d115      	bne.n	800c624 <__gethex+0x2c6>
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	d113      	bne.n	800c624 <__gethex+0x2c6>
 800c5fc:	2e01      	cmp	r6, #1
 800c5fe:	dc0b      	bgt.n	800c618 <__gethex+0x2ba>
 800c600:	9a06      	ldr	r2, [sp, #24]
 800c602:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	2301      	movs	r3, #1
 800c60a:	612b      	str	r3, [r5, #16]
 800c60c:	f8c9 3000 	str.w	r3, [r9]
 800c610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c612:	2762      	movs	r7, #98	; 0x62
 800c614:	601d      	str	r5, [r3, #0]
 800c616:	e72a      	b.n	800c46e <__gethex+0x110>
 800c618:	1e71      	subs	r1, r6, #1
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 fd82 	bl	800d124 <__any_on>
 800c620:	2800      	cmp	r0, #0
 800c622:	d1ed      	bne.n	800c600 <__gethex+0x2a2>
 800c624:	4629      	mov	r1, r5
 800c626:	9802      	ldr	r0, [sp, #8]
 800c628:	f000 f9d2 	bl	800c9d0 <_Bfree>
 800c62c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c62e:	2300      	movs	r3, #0
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	2750      	movs	r7, #80	; 0x50
 800c634:	e71b      	b.n	800c46e <__gethex+0x110>
 800c636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d0e1      	beq.n	800c600 <__gethex+0x2a2>
 800c63c:	e7f2      	b.n	800c624 <__gethex+0x2c6>
 800c63e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1dd      	bne.n	800c600 <__gethex+0x2a2>
 800c644:	e7ee      	b.n	800c624 <__gethex+0x2c6>
 800c646:	1e67      	subs	r7, r4, #1
 800c648:	f1ba 0f00 	cmp.w	sl, #0
 800c64c:	d131      	bne.n	800c6b2 <__gethex+0x354>
 800c64e:	b127      	cbz	r7, 800c65a <__gethex+0x2fc>
 800c650:	4639      	mov	r1, r7
 800c652:	4628      	mov	r0, r5
 800c654:	f000 fd66 	bl	800d124 <__any_on>
 800c658:	4682      	mov	sl, r0
 800c65a:	117a      	asrs	r2, r7, #5
 800c65c:	2301      	movs	r3, #1
 800c65e:	f007 071f 	and.w	r7, r7, #31
 800c662:	fa03 f707 	lsl.w	r7, r3, r7
 800c666:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c66a:	4621      	mov	r1, r4
 800c66c:	421f      	tst	r7, r3
 800c66e:	4628      	mov	r0, r5
 800c670:	bf18      	it	ne
 800c672:	f04a 0a02 	orrne.w	sl, sl, #2
 800c676:	1b36      	subs	r6, r6, r4
 800c678:	f7ff fe22 	bl	800c2c0 <rshift>
 800c67c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c680:	2702      	movs	r7, #2
 800c682:	f1ba 0f00 	cmp.w	sl, #0
 800c686:	d048      	beq.n	800c71a <__gethex+0x3bc>
 800c688:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d015      	beq.n	800c6bc <__gethex+0x35e>
 800c690:	2b03      	cmp	r3, #3
 800c692:	d017      	beq.n	800c6c4 <__gethex+0x366>
 800c694:	2b01      	cmp	r3, #1
 800c696:	d109      	bne.n	800c6ac <__gethex+0x34e>
 800c698:	f01a 0f02 	tst.w	sl, #2
 800c69c:	d006      	beq.n	800c6ac <__gethex+0x34e>
 800c69e:	f8d9 3000 	ldr.w	r3, [r9]
 800c6a2:	ea4a 0a03 	orr.w	sl, sl, r3
 800c6a6:	f01a 0f01 	tst.w	sl, #1
 800c6aa:	d10e      	bne.n	800c6ca <__gethex+0x36c>
 800c6ac:	f047 0710 	orr.w	r7, r7, #16
 800c6b0:	e033      	b.n	800c71a <__gethex+0x3bc>
 800c6b2:	f04f 0a01 	mov.w	sl, #1
 800c6b6:	e7d0      	b.n	800c65a <__gethex+0x2fc>
 800c6b8:	2701      	movs	r7, #1
 800c6ba:	e7e2      	b.n	800c682 <__gethex+0x324>
 800c6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6be:	f1c3 0301 	rsb	r3, r3, #1
 800c6c2:	9315      	str	r3, [sp, #84]	; 0x54
 800c6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d0f0      	beq.n	800c6ac <__gethex+0x34e>
 800c6ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c6ce:	f105 0314 	add.w	r3, r5, #20
 800c6d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c6d6:	eb03 010a 	add.w	r1, r3, sl
 800c6da:	f04f 0c00 	mov.w	ip, #0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c6e8:	d01c      	beq.n	800c724 <__gethex+0x3c6>
 800c6ea:	3201      	adds	r2, #1
 800c6ec:	6002      	str	r2, [r0, #0]
 800c6ee:	2f02      	cmp	r7, #2
 800c6f0:	f105 0314 	add.w	r3, r5, #20
 800c6f4:	d138      	bne.n	800c768 <__gethex+0x40a>
 800c6f6:	f8d8 2000 	ldr.w	r2, [r8]
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	42b2      	cmp	r2, r6
 800c6fe:	d10a      	bne.n	800c716 <__gethex+0x3b8>
 800c700:	1171      	asrs	r1, r6, #5
 800c702:	2201      	movs	r2, #1
 800c704:	f006 061f 	and.w	r6, r6, #31
 800c708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c70c:	fa02 f606 	lsl.w	r6, r2, r6
 800c710:	421e      	tst	r6, r3
 800c712:	bf18      	it	ne
 800c714:	4617      	movne	r7, r2
 800c716:	f047 0720 	orr.w	r7, r7, #32
 800c71a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c71c:	601d      	str	r5, [r3, #0]
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	601c      	str	r4, [r3, #0]
 800c722:	e6a4      	b.n	800c46e <__gethex+0x110>
 800c724:	4299      	cmp	r1, r3
 800c726:	f843 cc04 	str.w	ip, [r3, #-4]
 800c72a:	d8d8      	bhi.n	800c6de <__gethex+0x380>
 800c72c:	68ab      	ldr	r3, [r5, #8]
 800c72e:	4599      	cmp	r9, r3
 800c730:	db12      	blt.n	800c758 <__gethex+0x3fa>
 800c732:	6869      	ldr	r1, [r5, #4]
 800c734:	9802      	ldr	r0, [sp, #8]
 800c736:	3101      	adds	r1, #1
 800c738:	f000 f916 	bl	800c968 <_Balloc>
 800c73c:	692a      	ldr	r2, [r5, #16]
 800c73e:	3202      	adds	r2, #2
 800c740:	f105 010c 	add.w	r1, r5, #12
 800c744:	4683      	mov	fp, r0
 800c746:	0092      	lsls	r2, r2, #2
 800c748:	300c      	adds	r0, #12
 800c74a:	f7fd fa0f 	bl	8009b6c <memcpy>
 800c74e:	4629      	mov	r1, r5
 800c750:	9802      	ldr	r0, [sp, #8]
 800c752:	f000 f93d 	bl	800c9d0 <_Bfree>
 800c756:	465d      	mov	r5, fp
 800c758:	692b      	ldr	r3, [r5, #16]
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c760:	612a      	str	r2, [r5, #16]
 800c762:	2201      	movs	r2, #1
 800c764:	615a      	str	r2, [r3, #20]
 800c766:	e7c2      	b.n	800c6ee <__gethex+0x390>
 800c768:	692a      	ldr	r2, [r5, #16]
 800c76a:	454a      	cmp	r2, r9
 800c76c:	dd0b      	ble.n	800c786 <__gethex+0x428>
 800c76e:	2101      	movs	r1, #1
 800c770:	4628      	mov	r0, r5
 800c772:	f7ff fda5 	bl	800c2c0 <rshift>
 800c776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c77a:	3401      	adds	r4, #1
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	f6ff aed9 	blt.w	800c534 <__gethex+0x1d6>
 800c782:	2701      	movs	r7, #1
 800c784:	e7c7      	b.n	800c716 <__gethex+0x3b8>
 800c786:	f016 061f 	ands.w	r6, r6, #31
 800c78a:	d0fa      	beq.n	800c782 <__gethex+0x424>
 800c78c:	449a      	add	sl, r3
 800c78e:	f1c6 0620 	rsb	r6, r6, #32
 800c792:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c796:	f000 f9ab 	bl	800caf0 <__hi0bits>
 800c79a:	42b0      	cmp	r0, r6
 800c79c:	dbe7      	blt.n	800c76e <__gethex+0x410>
 800c79e:	e7f0      	b.n	800c782 <__gethex+0x424>

0800c7a0 <L_shift>:
 800c7a0:	f1c2 0208 	rsb	r2, r2, #8
 800c7a4:	0092      	lsls	r2, r2, #2
 800c7a6:	b570      	push	{r4, r5, r6, lr}
 800c7a8:	f1c2 0620 	rsb	r6, r2, #32
 800c7ac:	6843      	ldr	r3, [r0, #4]
 800c7ae:	6804      	ldr	r4, [r0, #0]
 800c7b0:	fa03 f506 	lsl.w	r5, r3, r6
 800c7b4:	432c      	orrs	r4, r5
 800c7b6:	40d3      	lsrs	r3, r2
 800c7b8:	6004      	str	r4, [r0, #0]
 800c7ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7be:	4288      	cmp	r0, r1
 800c7c0:	d3f4      	bcc.n	800c7ac <L_shift+0xc>
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}

0800c7c4 <__match>:
 800c7c4:	b530      	push	{r4, r5, lr}
 800c7c6:	6803      	ldr	r3, [r0, #0]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ce:	b914      	cbnz	r4, 800c7d6 <__match+0x12>
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	2001      	movs	r0, #1
 800c7d4:	bd30      	pop	{r4, r5, pc}
 800c7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7de:	2d19      	cmp	r5, #25
 800c7e0:	bf98      	it	ls
 800c7e2:	3220      	addls	r2, #32
 800c7e4:	42a2      	cmp	r2, r4
 800c7e6:	d0f0      	beq.n	800c7ca <__match+0x6>
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	e7f3      	b.n	800c7d4 <__match+0x10>

0800c7ec <__hexnan>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	680b      	ldr	r3, [r1, #0]
 800c7f2:	6801      	ldr	r1, [r0, #0]
 800c7f4:	115f      	asrs	r7, r3, #5
 800c7f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c7fa:	f013 031f 	ands.w	r3, r3, #31
 800c7fe:	b087      	sub	sp, #28
 800c800:	bf18      	it	ne
 800c802:	3704      	addne	r7, #4
 800c804:	2500      	movs	r5, #0
 800c806:	1f3e      	subs	r6, r7, #4
 800c808:	4682      	mov	sl, r0
 800c80a:	4690      	mov	r8, r2
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	f847 5c04 	str.w	r5, [r7, #-4]
 800c812:	46b1      	mov	r9, r6
 800c814:	4634      	mov	r4, r6
 800c816:	9502      	str	r5, [sp, #8]
 800c818:	46ab      	mov	fp, r5
 800c81a:	784a      	ldrb	r2, [r1, #1]
 800c81c:	1c4b      	adds	r3, r1, #1
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	b342      	cbz	r2, 800c874 <__hexnan+0x88>
 800c822:	4610      	mov	r0, r2
 800c824:	9105      	str	r1, [sp, #20]
 800c826:	9204      	str	r2, [sp, #16]
 800c828:	f7ff fd84 	bl	800c334 <__hexdig_fun>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d143      	bne.n	800c8b8 <__hexnan+0xcc>
 800c830:	9a04      	ldr	r2, [sp, #16]
 800c832:	9905      	ldr	r1, [sp, #20]
 800c834:	2a20      	cmp	r2, #32
 800c836:	d818      	bhi.n	800c86a <__hexnan+0x7e>
 800c838:	9b02      	ldr	r3, [sp, #8]
 800c83a:	459b      	cmp	fp, r3
 800c83c:	dd13      	ble.n	800c866 <__hexnan+0x7a>
 800c83e:	454c      	cmp	r4, r9
 800c840:	d206      	bcs.n	800c850 <__hexnan+0x64>
 800c842:	2d07      	cmp	r5, #7
 800c844:	dc04      	bgt.n	800c850 <__hexnan+0x64>
 800c846:	462a      	mov	r2, r5
 800c848:	4649      	mov	r1, r9
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff ffa8 	bl	800c7a0 <L_shift>
 800c850:	4544      	cmp	r4, r8
 800c852:	d944      	bls.n	800c8de <__hexnan+0xf2>
 800c854:	2300      	movs	r3, #0
 800c856:	f1a4 0904 	sub.w	r9, r4, #4
 800c85a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c85e:	f8cd b008 	str.w	fp, [sp, #8]
 800c862:	464c      	mov	r4, r9
 800c864:	461d      	mov	r5, r3
 800c866:	9903      	ldr	r1, [sp, #12]
 800c868:	e7d7      	b.n	800c81a <__hexnan+0x2e>
 800c86a:	2a29      	cmp	r2, #41	; 0x29
 800c86c:	d14a      	bne.n	800c904 <__hexnan+0x118>
 800c86e:	3102      	adds	r1, #2
 800c870:	f8ca 1000 	str.w	r1, [sl]
 800c874:	f1bb 0f00 	cmp.w	fp, #0
 800c878:	d044      	beq.n	800c904 <__hexnan+0x118>
 800c87a:	454c      	cmp	r4, r9
 800c87c:	d206      	bcs.n	800c88c <__hexnan+0xa0>
 800c87e:	2d07      	cmp	r5, #7
 800c880:	dc04      	bgt.n	800c88c <__hexnan+0xa0>
 800c882:	462a      	mov	r2, r5
 800c884:	4649      	mov	r1, r9
 800c886:	4620      	mov	r0, r4
 800c888:	f7ff ff8a 	bl	800c7a0 <L_shift>
 800c88c:	4544      	cmp	r4, r8
 800c88e:	d928      	bls.n	800c8e2 <__hexnan+0xf6>
 800c890:	4643      	mov	r3, r8
 800c892:	f854 2b04 	ldr.w	r2, [r4], #4
 800c896:	f843 2b04 	str.w	r2, [r3], #4
 800c89a:	42a6      	cmp	r6, r4
 800c89c:	d2f9      	bcs.n	800c892 <__hexnan+0xa6>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f843 2b04 	str.w	r2, [r3], #4
 800c8a4:	429e      	cmp	r6, r3
 800c8a6:	d2fb      	bcs.n	800c8a0 <__hexnan+0xb4>
 800c8a8:	6833      	ldr	r3, [r6, #0]
 800c8aa:	b91b      	cbnz	r3, 800c8b4 <__hexnan+0xc8>
 800c8ac:	4546      	cmp	r6, r8
 800c8ae:	d127      	bne.n	800c900 <__hexnan+0x114>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	6033      	str	r3, [r6, #0]
 800c8b4:	2005      	movs	r0, #5
 800c8b6:	e026      	b.n	800c906 <__hexnan+0x11a>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	2d08      	cmp	r5, #8
 800c8bc:	f10b 0b01 	add.w	fp, fp, #1
 800c8c0:	dd06      	ble.n	800c8d0 <__hexnan+0xe4>
 800c8c2:	4544      	cmp	r4, r8
 800c8c4:	d9cf      	bls.n	800c866 <__hexnan+0x7a>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8cc:	2501      	movs	r5, #1
 800c8ce:	3c04      	subs	r4, #4
 800c8d0:	6822      	ldr	r2, [r4, #0]
 800c8d2:	f000 000f 	and.w	r0, r0, #15
 800c8d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8da:	6020      	str	r0, [r4, #0]
 800c8dc:	e7c3      	b.n	800c866 <__hexnan+0x7a>
 800c8de:	2508      	movs	r5, #8
 800c8e0:	e7c1      	b.n	800c866 <__hexnan+0x7a>
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0df      	beq.n	800c8a8 <__hexnan+0xbc>
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8ec:	f1c3 0320 	rsb	r3, r3, #32
 800c8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c8f8:	401a      	ands	r2, r3
 800c8fa:	f847 2c04 	str.w	r2, [r7, #-4]
 800c8fe:	e7d3      	b.n	800c8a8 <__hexnan+0xbc>
 800c900:	3e04      	subs	r6, #4
 800c902:	e7d1      	b.n	800c8a8 <__hexnan+0xbc>
 800c904:	2004      	movs	r0, #4
 800c906:	b007      	add	sp, #28
 800c908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c90c <__locale_ctype_ptr_l>:
 800c90c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c910:	4770      	bx	lr

0800c912 <__localeconv_l>:
 800c912:	30f0      	adds	r0, #240	; 0xf0
 800c914:	4770      	bx	lr
	...

0800c918 <_localeconv_r>:
 800c918:	4b04      	ldr	r3, [pc, #16]	; (800c92c <_localeconv_r+0x14>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6a18      	ldr	r0, [r3, #32]
 800c91e:	4b04      	ldr	r3, [pc, #16]	; (800c930 <_localeconv_r+0x18>)
 800c920:	2800      	cmp	r0, #0
 800c922:	bf08      	it	eq
 800c924:	4618      	moveq	r0, r3
 800c926:	30f0      	adds	r0, #240	; 0xf0
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	2000005c 	.word	0x2000005c
 800c930:	200000c0 	.word	0x200000c0

0800c934 <malloc>:
 800c934:	4b02      	ldr	r3, [pc, #8]	; (800c940 <malloc+0xc>)
 800c936:	4601      	mov	r1, r0
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	f000 bc71 	b.w	800d220 <_malloc_r>
 800c93e:	bf00      	nop
 800c940:	2000005c 	.word	0x2000005c

0800c944 <__ascii_mbtowc>:
 800c944:	b082      	sub	sp, #8
 800c946:	b901      	cbnz	r1, 800c94a <__ascii_mbtowc+0x6>
 800c948:	a901      	add	r1, sp, #4
 800c94a:	b142      	cbz	r2, 800c95e <__ascii_mbtowc+0x1a>
 800c94c:	b14b      	cbz	r3, 800c962 <__ascii_mbtowc+0x1e>
 800c94e:	7813      	ldrb	r3, [r2, #0]
 800c950:	600b      	str	r3, [r1, #0]
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	1c10      	adds	r0, r2, #0
 800c956:	bf18      	it	ne
 800c958:	2001      	movne	r0, #1
 800c95a:	b002      	add	sp, #8
 800c95c:	4770      	bx	lr
 800c95e:	4610      	mov	r0, r2
 800c960:	e7fb      	b.n	800c95a <__ascii_mbtowc+0x16>
 800c962:	f06f 0001 	mvn.w	r0, #1
 800c966:	e7f8      	b.n	800c95a <__ascii_mbtowc+0x16>

0800c968 <_Balloc>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c96c:	4604      	mov	r4, r0
 800c96e:	460e      	mov	r6, r1
 800c970:	b93d      	cbnz	r5, 800c982 <_Balloc+0x1a>
 800c972:	2010      	movs	r0, #16
 800c974:	f7ff ffde 	bl	800c934 <malloc>
 800c978:	6260      	str	r0, [r4, #36]	; 0x24
 800c97a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c97e:	6005      	str	r5, [r0, #0]
 800c980:	60c5      	str	r5, [r0, #12]
 800c982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c984:	68eb      	ldr	r3, [r5, #12]
 800c986:	b183      	cbz	r3, 800c9aa <_Balloc+0x42>
 800c988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c990:	b9b8      	cbnz	r0, 800c9c2 <_Balloc+0x5a>
 800c992:	2101      	movs	r1, #1
 800c994:	fa01 f506 	lsl.w	r5, r1, r6
 800c998:	1d6a      	adds	r2, r5, #5
 800c99a:	0092      	lsls	r2, r2, #2
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fbe2 	bl	800d166 <_calloc_r>
 800c9a2:	b160      	cbz	r0, 800c9be <_Balloc+0x56>
 800c9a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c9a8:	e00e      	b.n	800c9c8 <_Balloc+0x60>
 800c9aa:	2221      	movs	r2, #33	; 0x21
 800c9ac:	2104      	movs	r1, #4
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f000 fbd9 	bl	800d166 <_calloc_r>
 800c9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b6:	60e8      	str	r0, [r5, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1e4      	bne.n	800c988 <_Balloc+0x20>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	bd70      	pop	{r4, r5, r6, pc}
 800c9c2:	6802      	ldr	r2, [r0, #0]
 800c9c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9ce:	e7f7      	b.n	800c9c0 <_Balloc+0x58>

0800c9d0 <_Bfree>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	460d      	mov	r5, r1
 800c9d8:	b93c      	cbnz	r4, 800c9ea <_Bfree+0x1a>
 800c9da:	2010      	movs	r0, #16
 800c9dc:	f7ff ffaa 	bl	800c934 <malloc>
 800c9e0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9e6:	6004      	str	r4, [r0, #0]
 800c9e8:	60c4      	str	r4, [r0, #12]
 800c9ea:	b13d      	cbz	r5, 800c9fc <_Bfree+0x2c>
 800c9ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9ee:	686a      	ldr	r2, [r5, #4]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9f6:	6029      	str	r1, [r5, #0]
 800c9f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c9fc:	bd70      	pop	{r4, r5, r6, pc}

0800c9fe <__multadd>:
 800c9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca02:	690d      	ldr	r5, [r1, #16]
 800ca04:	461f      	mov	r7, r3
 800ca06:	4606      	mov	r6, r0
 800ca08:	460c      	mov	r4, r1
 800ca0a:	f101 0c14 	add.w	ip, r1, #20
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f8dc 0000 	ldr.w	r0, [ip]
 800ca14:	b281      	uxth	r1, r0
 800ca16:	fb02 7101 	mla	r1, r2, r1, r7
 800ca1a:	0c0f      	lsrs	r7, r1, #16
 800ca1c:	0c00      	lsrs	r0, r0, #16
 800ca1e:	fb02 7000 	mla	r0, r2, r0, r7
 800ca22:	b289      	uxth	r1, r1
 800ca24:	3301      	adds	r3, #1
 800ca26:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ca2a:	429d      	cmp	r5, r3
 800ca2c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ca30:	f84c 1b04 	str.w	r1, [ip], #4
 800ca34:	dcec      	bgt.n	800ca10 <__multadd+0x12>
 800ca36:	b1d7      	cbz	r7, 800ca6e <__multadd+0x70>
 800ca38:	68a3      	ldr	r3, [r4, #8]
 800ca3a:	42ab      	cmp	r3, r5
 800ca3c:	dc12      	bgt.n	800ca64 <__multadd+0x66>
 800ca3e:	6861      	ldr	r1, [r4, #4]
 800ca40:	4630      	mov	r0, r6
 800ca42:	3101      	adds	r1, #1
 800ca44:	f7ff ff90 	bl	800c968 <_Balloc>
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	3202      	adds	r2, #2
 800ca4c:	f104 010c 	add.w	r1, r4, #12
 800ca50:	4680      	mov	r8, r0
 800ca52:	0092      	lsls	r2, r2, #2
 800ca54:	300c      	adds	r0, #12
 800ca56:	f7fd f889 	bl	8009b6c <memcpy>
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7ff ffb7 	bl	800c9d0 <_Bfree>
 800ca62:	4644      	mov	r4, r8
 800ca64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca68:	3501      	adds	r5, #1
 800ca6a:	615f      	str	r7, [r3, #20]
 800ca6c:	6125      	str	r5, [r4, #16]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca74 <__s2b>:
 800ca74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	4615      	mov	r5, r2
 800ca7c:	461f      	mov	r7, r3
 800ca7e:	2209      	movs	r2, #9
 800ca80:	3308      	adds	r3, #8
 800ca82:	4606      	mov	r6, r0
 800ca84:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca88:	2100      	movs	r1, #0
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	db20      	blt.n	800cad2 <__s2b+0x5e>
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff ff69 	bl	800c968 <_Balloc>
 800ca96:	9b08      	ldr	r3, [sp, #32]
 800ca98:	6143      	str	r3, [r0, #20]
 800ca9a:	2d09      	cmp	r5, #9
 800ca9c:	f04f 0301 	mov.w	r3, #1
 800caa0:	6103      	str	r3, [r0, #16]
 800caa2:	dd19      	ble.n	800cad8 <__s2b+0x64>
 800caa4:	f104 0809 	add.w	r8, r4, #9
 800caa8:	46c1      	mov	r9, r8
 800caaa:	442c      	add	r4, r5
 800caac:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cab0:	4601      	mov	r1, r0
 800cab2:	3b30      	subs	r3, #48	; 0x30
 800cab4:	220a      	movs	r2, #10
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ffa1 	bl	800c9fe <__multadd>
 800cabc:	45a1      	cmp	r9, r4
 800cabe:	d1f5      	bne.n	800caac <__s2b+0x38>
 800cac0:	eb08 0405 	add.w	r4, r8, r5
 800cac4:	3c08      	subs	r4, #8
 800cac6:	1b2d      	subs	r5, r5, r4
 800cac8:	1963      	adds	r3, r4, r5
 800caca:	42bb      	cmp	r3, r7
 800cacc:	db07      	blt.n	800cade <__s2b+0x6a>
 800cace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cad2:	0052      	lsls	r2, r2, #1
 800cad4:	3101      	adds	r1, #1
 800cad6:	e7d9      	b.n	800ca8c <__s2b+0x18>
 800cad8:	340a      	adds	r4, #10
 800cada:	2509      	movs	r5, #9
 800cadc:	e7f3      	b.n	800cac6 <__s2b+0x52>
 800cade:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cae2:	4601      	mov	r1, r0
 800cae4:	3b30      	subs	r3, #48	; 0x30
 800cae6:	220a      	movs	r2, #10
 800cae8:	4630      	mov	r0, r6
 800caea:	f7ff ff88 	bl	800c9fe <__multadd>
 800caee:	e7eb      	b.n	800cac8 <__s2b+0x54>

0800caf0 <__hi0bits>:
 800caf0:	0c02      	lsrs	r2, r0, #16
 800caf2:	0412      	lsls	r2, r2, #16
 800caf4:	4603      	mov	r3, r0
 800caf6:	b9b2      	cbnz	r2, 800cb26 <__hi0bits+0x36>
 800caf8:	0403      	lsls	r3, r0, #16
 800cafa:	2010      	movs	r0, #16
 800cafc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cb00:	bf04      	itt	eq
 800cb02:	021b      	lsleq	r3, r3, #8
 800cb04:	3008      	addeq	r0, #8
 800cb06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cb0a:	bf04      	itt	eq
 800cb0c:	011b      	lsleq	r3, r3, #4
 800cb0e:	3004      	addeq	r0, #4
 800cb10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cb14:	bf04      	itt	eq
 800cb16:	009b      	lsleq	r3, r3, #2
 800cb18:	3002      	addeq	r0, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	db06      	blt.n	800cb2c <__hi0bits+0x3c>
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	d503      	bpl.n	800cb2a <__hi0bits+0x3a>
 800cb22:	3001      	adds	r0, #1
 800cb24:	4770      	bx	lr
 800cb26:	2000      	movs	r0, #0
 800cb28:	e7e8      	b.n	800cafc <__hi0bits+0xc>
 800cb2a:	2020      	movs	r0, #32
 800cb2c:	4770      	bx	lr

0800cb2e <__lo0bits>:
 800cb2e:	6803      	ldr	r3, [r0, #0]
 800cb30:	f013 0207 	ands.w	r2, r3, #7
 800cb34:	4601      	mov	r1, r0
 800cb36:	d00b      	beq.n	800cb50 <__lo0bits+0x22>
 800cb38:	07da      	lsls	r2, r3, #31
 800cb3a:	d423      	bmi.n	800cb84 <__lo0bits+0x56>
 800cb3c:	0798      	lsls	r0, r3, #30
 800cb3e:	bf49      	itett	mi
 800cb40:	085b      	lsrmi	r3, r3, #1
 800cb42:	089b      	lsrpl	r3, r3, #2
 800cb44:	2001      	movmi	r0, #1
 800cb46:	600b      	strmi	r3, [r1, #0]
 800cb48:	bf5c      	itt	pl
 800cb4a:	600b      	strpl	r3, [r1, #0]
 800cb4c:	2002      	movpl	r0, #2
 800cb4e:	4770      	bx	lr
 800cb50:	b298      	uxth	r0, r3
 800cb52:	b9a8      	cbnz	r0, 800cb80 <__lo0bits+0x52>
 800cb54:	0c1b      	lsrs	r3, r3, #16
 800cb56:	2010      	movs	r0, #16
 800cb58:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb5c:	bf04      	itt	eq
 800cb5e:	0a1b      	lsreq	r3, r3, #8
 800cb60:	3008      	addeq	r0, #8
 800cb62:	071a      	lsls	r2, r3, #28
 800cb64:	bf04      	itt	eq
 800cb66:	091b      	lsreq	r3, r3, #4
 800cb68:	3004      	addeq	r0, #4
 800cb6a:	079a      	lsls	r2, r3, #30
 800cb6c:	bf04      	itt	eq
 800cb6e:	089b      	lsreq	r3, r3, #2
 800cb70:	3002      	addeq	r0, #2
 800cb72:	07da      	lsls	r2, r3, #31
 800cb74:	d402      	bmi.n	800cb7c <__lo0bits+0x4e>
 800cb76:	085b      	lsrs	r3, r3, #1
 800cb78:	d006      	beq.n	800cb88 <__lo0bits+0x5a>
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	600b      	str	r3, [r1, #0]
 800cb7e:	4770      	bx	lr
 800cb80:	4610      	mov	r0, r2
 800cb82:	e7e9      	b.n	800cb58 <__lo0bits+0x2a>
 800cb84:	2000      	movs	r0, #0
 800cb86:	4770      	bx	lr
 800cb88:	2020      	movs	r0, #32
 800cb8a:	4770      	bx	lr

0800cb8c <__i2b>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	460c      	mov	r4, r1
 800cb90:	2101      	movs	r1, #1
 800cb92:	f7ff fee9 	bl	800c968 <_Balloc>
 800cb96:	2201      	movs	r2, #1
 800cb98:	6144      	str	r4, [r0, #20]
 800cb9a:	6102      	str	r2, [r0, #16]
 800cb9c:	bd10      	pop	{r4, pc}

0800cb9e <__multiply>:
 800cb9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba2:	4614      	mov	r4, r2
 800cba4:	690a      	ldr	r2, [r1, #16]
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	bfb8      	it	lt
 800cbac:	460b      	movlt	r3, r1
 800cbae:	4688      	mov	r8, r1
 800cbb0:	bfbc      	itt	lt
 800cbb2:	46a0      	movlt	r8, r4
 800cbb4:	461c      	movlt	r4, r3
 800cbb6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbc2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbc6:	eb07 0609 	add.w	r6, r7, r9
 800cbca:	42b3      	cmp	r3, r6
 800cbcc:	bfb8      	it	lt
 800cbce:	3101      	addlt	r1, #1
 800cbd0:	f7ff feca 	bl	800c968 <_Balloc>
 800cbd4:	f100 0514 	add.w	r5, r0, #20
 800cbd8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cbdc:	462b      	mov	r3, r5
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4573      	cmp	r3, lr
 800cbe2:	d316      	bcc.n	800cc12 <__multiply+0x74>
 800cbe4:	f104 0214 	add.w	r2, r4, #20
 800cbe8:	f108 0114 	add.w	r1, r8, #20
 800cbec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cbf0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	9201      	str	r2, [sp, #4]
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d80c      	bhi.n	800cc18 <__multiply+0x7a>
 800cbfe:	2e00      	cmp	r6, #0
 800cc00:	dd03      	ble.n	800cc0a <__multiply+0x6c>
 800cc02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d05d      	beq.n	800ccc6 <__multiply+0x128>
 800cc0a:	6106      	str	r6, [r0, #16]
 800cc0c:	b003      	add	sp, #12
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	f843 2b04 	str.w	r2, [r3], #4
 800cc16:	e7e3      	b.n	800cbe0 <__multiply+0x42>
 800cc18:	f8b2 b000 	ldrh.w	fp, [r2]
 800cc1c:	f1bb 0f00 	cmp.w	fp, #0
 800cc20:	d023      	beq.n	800cc6a <__multiply+0xcc>
 800cc22:	4689      	mov	r9, r1
 800cc24:	46ac      	mov	ip, r5
 800cc26:	f04f 0800 	mov.w	r8, #0
 800cc2a:	f859 4b04 	ldr.w	r4, [r9], #4
 800cc2e:	f8dc a000 	ldr.w	sl, [ip]
 800cc32:	b2a3      	uxth	r3, r4
 800cc34:	fa1f fa8a 	uxth.w	sl, sl
 800cc38:	fb0b a303 	mla	r3, fp, r3, sl
 800cc3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cc40:	f8dc 4000 	ldr.w	r4, [ip]
 800cc44:	4443      	add	r3, r8
 800cc46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cc4a:	fb0b 840a 	mla	r4, fp, sl, r8
 800cc4e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cc52:	46e2      	mov	sl, ip
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cc5a:	454f      	cmp	r7, r9
 800cc5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cc60:	f84a 3b04 	str.w	r3, [sl], #4
 800cc64:	d82b      	bhi.n	800ccbe <__multiply+0x120>
 800cc66:	f8cc 8004 	str.w	r8, [ip, #4]
 800cc6a:	9b01      	ldr	r3, [sp, #4]
 800cc6c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cc70:	3204      	adds	r2, #4
 800cc72:	f1ba 0f00 	cmp.w	sl, #0
 800cc76:	d020      	beq.n	800ccba <__multiply+0x11c>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	4689      	mov	r9, r1
 800cc7c:	46a8      	mov	r8, r5
 800cc7e:	f04f 0b00 	mov.w	fp, #0
 800cc82:	f8b9 c000 	ldrh.w	ip, [r9]
 800cc86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cc8a:	fb0a 440c 	mla	r4, sl, ip, r4
 800cc8e:	445c      	add	r4, fp
 800cc90:	46c4      	mov	ip, r8
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cc98:	f84c 3b04 	str.w	r3, [ip], #4
 800cc9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cca0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cca4:	0c1b      	lsrs	r3, r3, #16
 800cca6:	fb0a b303 	mla	r3, sl, r3, fp
 800ccaa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ccae:	454f      	cmp	r7, r9
 800ccb0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ccb4:	d805      	bhi.n	800ccc2 <__multiply+0x124>
 800ccb6:	f8c8 3004 	str.w	r3, [r8, #4]
 800ccba:	3504      	adds	r5, #4
 800ccbc:	e79b      	b.n	800cbf6 <__multiply+0x58>
 800ccbe:	46d4      	mov	ip, sl
 800ccc0:	e7b3      	b.n	800cc2a <__multiply+0x8c>
 800ccc2:	46e0      	mov	r8, ip
 800ccc4:	e7dd      	b.n	800cc82 <__multiply+0xe4>
 800ccc6:	3e01      	subs	r6, #1
 800ccc8:	e799      	b.n	800cbfe <__multiply+0x60>
	...

0800cccc <__pow5mult>:
 800cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	4615      	mov	r5, r2
 800ccd2:	f012 0203 	ands.w	r2, r2, #3
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	460f      	mov	r7, r1
 800ccda:	d007      	beq.n	800ccec <__pow5mult+0x20>
 800ccdc:	3a01      	subs	r2, #1
 800ccde:	4c21      	ldr	r4, [pc, #132]	; (800cd64 <__pow5mult+0x98>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cce6:	f7ff fe8a 	bl	800c9fe <__multadd>
 800ccea:	4607      	mov	r7, r0
 800ccec:	10ad      	asrs	r5, r5, #2
 800ccee:	d035      	beq.n	800cd5c <__pow5mult+0x90>
 800ccf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ccf2:	b93c      	cbnz	r4, 800cd04 <__pow5mult+0x38>
 800ccf4:	2010      	movs	r0, #16
 800ccf6:	f7ff fe1d 	bl	800c934 <malloc>
 800ccfa:	6270      	str	r0, [r6, #36]	; 0x24
 800ccfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd00:	6004      	str	r4, [r0, #0]
 800cd02:	60c4      	str	r4, [r0, #12]
 800cd04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd0c:	b94c      	cbnz	r4, 800cd22 <__pow5mult+0x56>
 800cd0e:	f240 2171 	movw	r1, #625	; 0x271
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff ff3a 	bl	800cb8c <__i2b>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd1e:	4604      	mov	r4, r0
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 0800 	mov.w	r8, #0
 800cd26:	07eb      	lsls	r3, r5, #31
 800cd28:	d50a      	bpl.n	800cd40 <__pow5mult+0x74>
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ff35 	bl	800cb9e <__multiply>
 800cd34:	4639      	mov	r1, r7
 800cd36:	4681      	mov	r9, r0
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f7ff fe49 	bl	800c9d0 <_Bfree>
 800cd3e:	464f      	mov	r7, r9
 800cd40:	106d      	asrs	r5, r5, #1
 800cd42:	d00b      	beq.n	800cd5c <__pow5mult+0x90>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	b938      	cbnz	r0, 800cd58 <__pow5mult+0x8c>
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	f7ff ff26 	bl	800cb9e <__multiply>
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	f8c0 8000 	str.w	r8, [r0]
 800cd58:	4604      	mov	r4, r0
 800cd5a:	e7e4      	b.n	800cd26 <__pow5mult+0x5a>
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd62:	bf00      	nop
 800cd64:	08010be0 	.word	0x08010be0

0800cd68 <__lshift>:
 800cd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	6849      	ldr	r1, [r1, #4]
 800cd76:	eb0a 0903 	add.w	r9, sl, r3
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	4616      	mov	r6, r2
 800cd80:	f109 0501 	add.w	r5, r9, #1
 800cd84:	42ab      	cmp	r3, r5
 800cd86:	db32      	blt.n	800cdee <__lshift+0x86>
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7ff fded 	bl	800c968 <_Balloc>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	4680      	mov	r8, r0
 800cd92:	f100 0114 	add.w	r1, r0, #20
 800cd96:	461a      	mov	r2, r3
 800cd98:	4553      	cmp	r3, sl
 800cd9a:	db2b      	blt.n	800cdf4 <__lshift+0x8c>
 800cd9c:	6920      	ldr	r0, [r4, #16]
 800cd9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cda2:	f104 0314 	add.w	r3, r4, #20
 800cda6:	f016 021f 	ands.w	r2, r6, #31
 800cdaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdb2:	d025      	beq.n	800ce00 <__lshift+0x98>
 800cdb4:	f1c2 0e20 	rsb	lr, r2, #32
 800cdb8:	2000      	movs	r0, #0
 800cdba:	681e      	ldr	r6, [r3, #0]
 800cdbc:	468a      	mov	sl, r1
 800cdbe:	4096      	lsls	r6, r2
 800cdc0:	4330      	orrs	r0, r6
 800cdc2:	f84a 0b04 	str.w	r0, [sl], #4
 800cdc6:	f853 0b04 	ldr.w	r0, [r3], #4
 800cdca:	459c      	cmp	ip, r3
 800cdcc:	fa20 f00e 	lsr.w	r0, r0, lr
 800cdd0:	d814      	bhi.n	800cdfc <__lshift+0x94>
 800cdd2:	6048      	str	r0, [r1, #4]
 800cdd4:	b108      	cbz	r0, 800cdda <__lshift+0x72>
 800cdd6:	f109 0502 	add.w	r5, r9, #2
 800cdda:	3d01      	subs	r5, #1
 800cddc:	4638      	mov	r0, r7
 800cdde:	f8c8 5010 	str.w	r5, [r8, #16]
 800cde2:	4621      	mov	r1, r4
 800cde4:	f7ff fdf4 	bl	800c9d0 <_Bfree>
 800cde8:	4640      	mov	r0, r8
 800cdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdee:	3101      	adds	r1, #1
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	e7c7      	b.n	800cd84 <__lshift+0x1c>
 800cdf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	e7cd      	b.n	800cd98 <__lshift+0x30>
 800cdfc:	4651      	mov	r1, sl
 800cdfe:	e7dc      	b.n	800cdba <__lshift+0x52>
 800ce00:	3904      	subs	r1, #4
 800ce02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce06:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce0a:	459c      	cmp	ip, r3
 800ce0c:	d8f9      	bhi.n	800ce02 <__lshift+0x9a>
 800ce0e:	e7e4      	b.n	800cdda <__lshift+0x72>

0800ce10 <__mcmp>:
 800ce10:	6903      	ldr	r3, [r0, #16]
 800ce12:	690a      	ldr	r2, [r1, #16]
 800ce14:	1a9b      	subs	r3, r3, r2
 800ce16:	b530      	push	{r4, r5, lr}
 800ce18:	d10c      	bne.n	800ce34 <__mcmp+0x24>
 800ce1a:	0092      	lsls	r2, r2, #2
 800ce1c:	3014      	adds	r0, #20
 800ce1e:	3114      	adds	r1, #20
 800ce20:	1884      	adds	r4, r0, r2
 800ce22:	4411      	add	r1, r2
 800ce24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce2c:	4295      	cmp	r5, r2
 800ce2e:	d003      	beq.n	800ce38 <__mcmp+0x28>
 800ce30:	d305      	bcc.n	800ce3e <__mcmp+0x2e>
 800ce32:	2301      	movs	r3, #1
 800ce34:	4618      	mov	r0, r3
 800ce36:	bd30      	pop	{r4, r5, pc}
 800ce38:	42a0      	cmp	r0, r4
 800ce3a:	d3f3      	bcc.n	800ce24 <__mcmp+0x14>
 800ce3c:	e7fa      	b.n	800ce34 <__mcmp+0x24>
 800ce3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce42:	e7f7      	b.n	800ce34 <__mcmp+0x24>

0800ce44 <__mdiff>:
 800ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce48:	460d      	mov	r5, r1
 800ce4a:	4607      	mov	r7, r0
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4628      	mov	r0, r5
 800ce50:	4614      	mov	r4, r2
 800ce52:	f7ff ffdd 	bl	800ce10 <__mcmp>
 800ce56:	1e06      	subs	r6, r0, #0
 800ce58:	d108      	bne.n	800ce6c <__mdiff+0x28>
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	f7ff fd83 	bl	800c968 <_Balloc>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ce68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6c:	bfa4      	itt	ge
 800ce6e:	4623      	movge	r3, r4
 800ce70:	462c      	movge	r4, r5
 800ce72:	4638      	mov	r0, r7
 800ce74:	6861      	ldr	r1, [r4, #4]
 800ce76:	bfa6      	itte	ge
 800ce78:	461d      	movge	r5, r3
 800ce7a:	2600      	movge	r6, #0
 800ce7c:	2601      	movlt	r6, #1
 800ce7e:	f7ff fd73 	bl	800c968 <_Balloc>
 800ce82:	692b      	ldr	r3, [r5, #16]
 800ce84:	60c6      	str	r6, [r0, #12]
 800ce86:	6926      	ldr	r6, [r4, #16]
 800ce88:	f105 0914 	add.w	r9, r5, #20
 800ce8c:	f104 0214 	add.w	r2, r4, #20
 800ce90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ce94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ce98:	f100 0514 	add.w	r5, r0, #20
 800ce9c:	f04f 0e00 	mov.w	lr, #0
 800cea0:	f852 ab04 	ldr.w	sl, [r2], #4
 800cea4:	f859 4b04 	ldr.w	r4, [r9], #4
 800cea8:	fa1e f18a 	uxtah	r1, lr, sl
 800ceac:	b2a3      	uxth	r3, r4
 800ceae:	1ac9      	subs	r1, r1, r3
 800ceb0:	0c23      	lsrs	r3, r4, #16
 800ceb2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ceb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ceba:	b289      	uxth	r1, r1
 800cebc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cec0:	45c8      	cmp	r8, r9
 800cec2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cec6:	4694      	mov	ip, r2
 800cec8:	f845 3b04 	str.w	r3, [r5], #4
 800cecc:	d8e8      	bhi.n	800cea0 <__mdiff+0x5c>
 800cece:	45bc      	cmp	ip, r7
 800ced0:	d304      	bcc.n	800cedc <__mdiff+0x98>
 800ced2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ced6:	b183      	cbz	r3, 800cefa <__mdiff+0xb6>
 800ced8:	6106      	str	r6, [r0, #16]
 800ceda:	e7c5      	b.n	800ce68 <__mdiff+0x24>
 800cedc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cee0:	fa1e f381 	uxtah	r3, lr, r1
 800cee4:	141a      	asrs	r2, r3, #16
 800cee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cef0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cef4:	f845 3b04 	str.w	r3, [r5], #4
 800cef8:	e7e9      	b.n	800cece <__mdiff+0x8a>
 800cefa:	3e01      	subs	r6, #1
 800cefc:	e7e9      	b.n	800ced2 <__mdiff+0x8e>
	...

0800cf00 <__ulp>:
 800cf00:	4b12      	ldr	r3, [pc, #72]	; (800cf4c <__ulp+0x4c>)
 800cf02:	ee10 2a90 	vmov	r2, s1
 800cf06:	401a      	ands	r2, r3
 800cf08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd04      	ble.n	800cf1a <__ulp+0x1a>
 800cf10:	2000      	movs	r0, #0
 800cf12:	4619      	mov	r1, r3
 800cf14:	ec41 0b10 	vmov	d0, r0, r1
 800cf18:	4770      	bx	lr
 800cf1a:	425b      	negs	r3, r3
 800cf1c:	151b      	asrs	r3, r3, #20
 800cf1e:	2b13      	cmp	r3, #19
 800cf20:	f04f 0000 	mov.w	r0, #0
 800cf24:	f04f 0100 	mov.w	r1, #0
 800cf28:	dc04      	bgt.n	800cf34 <__ulp+0x34>
 800cf2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cf2e:	fa42 f103 	asr.w	r1, r2, r3
 800cf32:	e7ef      	b.n	800cf14 <__ulp+0x14>
 800cf34:	3b14      	subs	r3, #20
 800cf36:	2b1e      	cmp	r3, #30
 800cf38:	f04f 0201 	mov.w	r2, #1
 800cf3c:	bfda      	itte	le
 800cf3e:	f1c3 031f 	rsble	r3, r3, #31
 800cf42:	fa02 f303 	lslle.w	r3, r2, r3
 800cf46:	4613      	movgt	r3, r2
 800cf48:	4618      	mov	r0, r3
 800cf4a:	e7e3      	b.n	800cf14 <__ulp+0x14>
 800cf4c:	7ff00000 	.word	0x7ff00000

0800cf50 <__b2d>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	6905      	ldr	r5, [r0, #16]
 800cf54:	f100 0714 	add.w	r7, r0, #20
 800cf58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf5c:	1f2e      	subs	r6, r5, #4
 800cf5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf62:	4620      	mov	r0, r4
 800cf64:	f7ff fdc4 	bl	800caf0 <__hi0bits>
 800cf68:	f1c0 0320 	rsb	r3, r0, #32
 800cf6c:	280a      	cmp	r0, #10
 800cf6e:	600b      	str	r3, [r1, #0]
 800cf70:	f8df c074 	ldr.w	ip, [pc, #116]	; 800cfe8 <__b2d+0x98>
 800cf74:	dc14      	bgt.n	800cfa0 <__b2d+0x50>
 800cf76:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf7a:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf7e:	42b7      	cmp	r7, r6
 800cf80:	ea41 030c 	orr.w	r3, r1, ip
 800cf84:	bf34      	ite	cc
 800cf86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf8a:	2100      	movcs	r1, #0
 800cf8c:	3015      	adds	r0, #21
 800cf8e:	fa04 f000 	lsl.w	r0, r4, r0
 800cf92:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf96:	ea40 0201 	orr.w	r2, r0, r1
 800cf9a:	ec43 2b10 	vmov	d0, r2, r3
 800cf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa0:	42b7      	cmp	r7, r6
 800cfa2:	bf3a      	itte	cc
 800cfa4:	f1a5 0608 	subcc.w	r6, r5, #8
 800cfa8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfac:	2100      	movcs	r1, #0
 800cfae:	380b      	subs	r0, #11
 800cfb0:	d015      	beq.n	800cfde <__b2d+0x8e>
 800cfb2:	4084      	lsls	r4, r0
 800cfb4:	f1c0 0520 	rsb	r5, r0, #32
 800cfb8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800cfbc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800cfc0:	42be      	cmp	r6, r7
 800cfc2:	fa21 fc05 	lsr.w	ip, r1, r5
 800cfc6:	ea44 030c 	orr.w	r3, r4, ip
 800cfca:	bf8c      	ite	hi
 800cfcc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cfd0:	2400      	movls	r4, #0
 800cfd2:	fa01 f000 	lsl.w	r0, r1, r0
 800cfd6:	40ec      	lsrs	r4, r5
 800cfd8:	ea40 0204 	orr.w	r2, r0, r4
 800cfdc:	e7dd      	b.n	800cf9a <__b2d+0x4a>
 800cfde:	ea44 030c 	orr.w	r3, r4, ip
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	e7d9      	b.n	800cf9a <__b2d+0x4a>
 800cfe6:	bf00      	nop
 800cfe8:	3ff00000 	.word	0x3ff00000

0800cfec <__d2b>:
 800cfec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cff0:	460e      	mov	r6, r1
 800cff2:	2101      	movs	r1, #1
 800cff4:	ec59 8b10 	vmov	r8, r9, d0
 800cff8:	4615      	mov	r5, r2
 800cffa:	f7ff fcb5 	bl	800c968 <_Balloc>
 800cffe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d002:	4607      	mov	r7, r0
 800d004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d008:	bb34      	cbnz	r4, 800d058 <__d2b+0x6c>
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	f1b8 0300 	subs.w	r3, r8, #0
 800d010:	d027      	beq.n	800d062 <__d2b+0x76>
 800d012:	a802      	add	r0, sp, #8
 800d014:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d018:	f7ff fd89 	bl	800cb2e <__lo0bits>
 800d01c:	9900      	ldr	r1, [sp, #0]
 800d01e:	b1f0      	cbz	r0, 800d05e <__d2b+0x72>
 800d020:	9a01      	ldr	r2, [sp, #4]
 800d022:	f1c0 0320 	rsb	r3, r0, #32
 800d026:	fa02 f303 	lsl.w	r3, r2, r3
 800d02a:	430b      	orrs	r3, r1
 800d02c:	40c2      	lsrs	r2, r0
 800d02e:	617b      	str	r3, [r7, #20]
 800d030:	9201      	str	r2, [sp, #4]
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	61bb      	str	r3, [r7, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	bf14      	ite	ne
 800d03a:	2102      	movne	r1, #2
 800d03c:	2101      	moveq	r1, #1
 800d03e:	6139      	str	r1, [r7, #16]
 800d040:	b1c4      	cbz	r4, 800d074 <__d2b+0x88>
 800d042:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d046:	4404      	add	r4, r0
 800d048:	6034      	str	r4, [r6, #0]
 800d04a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d04e:	6028      	str	r0, [r5, #0]
 800d050:	4638      	mov	r0, r7
 800d052:	b003      	add	sp, #12
 800d054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d05c:	e7d5      	b.n	800d00a <__d2b+0x1e>
 800d05e:	6179      	str	r1, [r7, #20]
 800d060:	e7e7      	b.n	800d032 <__d2b+0x46>
 800d062:	a801      	add	r0, sp, #4
 800d064:	f7ff fd63 	bl	800cb2e <__lo0bits>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	2101      	movs	r1, #1
 800d06e:	6139      	str	r1, [r7, #16]
 800d070:	3020      	adds	r0, #32
 800d072:	e7e5      	b.n	800d040 <__d2b+0x54>
 800d074:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d078:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d07c:	6030      	str	r0, [r6, #0]
 800d07e:	6918      	ldr	r0, [r3, #16]
 800d080:	f7ff fd36 	bl	800caf0 <__hi0bits>
 800d084:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d088:	e7e1      	b.n	800d04e <__d2b+0x62>

0800d08a <__ratio>:
 800d08a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08e:	4688      	mov	r8, r1
 800d090:	4669      	mov	r1, sp
 800d092:	4681      	mov	r9, r0
 800d094:	f7ff ff5c 	bl	800cf50 <__b2d>
 800d098:	a901      	add	r1, sp, #4
 800d09a:	4640      	mov	r0, r8
 800d09c:	ec57 6b10 	vmov	r6, r7, d0
 800d0a0:	f7ff ff56 	bl	800cf50 <__b2d>
 800d0a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0ac:	eba3 0c02 	sub.w	ip, r3, r2
 800d0b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0ba:	ec5b ab10 	vmov	sl, fp, d0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	bfce      	itee	gt
 800d0c2:	463a      	movgt	r2, r7
 800d0c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0c8:	465a      	movle	r2, fp
 800d0ca:	4659      	mov	r1, fp
 800d0cc:	463d      	mov	r5, r7
 800d0ce:	bfd4      	ite	le
 800d0d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d0d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d0d8:	4630      	mov	r0, r6
 800d0da:	ee10 2a10 	vmov	r2, s0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	f7f3 fbd3 	bl	800088c <__aeabi_ddiv>
 800d0e6:	ec41 0b10 	vmov	d0, r0, r1
 800d0ea:	b003      	add	sp, #12
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0f0 <__copybits>:
 800d0f0:	3901      	subs	r1, #1
 800d0f2:	b510      	push	{r4, lr}
 800d0f4:	1149      	asrs	r1, r1, #5
 800d0f6:	6914      	ldr	r4, [r2, #16]
 800d0f8:	3101      	adds	r1, #1
 800d0fa:	f102 0314 	add.w	r3, r2, #20
 800d0fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d102:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d106:	42a3      	cmp	r3, r4
 800d108:	4602      	mov	r2, r0
 800d10a:	d303      	bcc.n	800d114 <__copybits+0x24>
 800d10c:	2300      	movs	r3, #0
 800d10e:	428a      	cmp	r2, r1
 800d110:	d305      	bcc.n	800d11e <__copybits+0x2e>
 800d112:	bd10      	pop	{r4, pc}
 800d114:	f853 2b04 	ldr.w	r2, [r3], #4
 800d118:	f840 2b04 	str.w	r2, [r0], #4
 800d11c:	e7f3      	b.n	800d106 <__copybits+0x16>
 800d11e:	f842 3b04 	str.w	r3, [r2], #4
 800d122:	e7f4      	b.n	800d10e <__copybits+0x1e>

0800d124 <__any_on>:
 800d124:	f100 0214 	add.w	r2, r0, #20
 800d128:	6900      	ldr	r0, [r0, #16]
 800d12a:	114b      	asrs	r3, r1, #5
 800d12c:	4298      	cmp	r0, r3
 800d12e:	b510      	push	{r4, lr}
 800d130:	db11      	blt.n	800d156 <__any_on+0x32>
 800d132:	dd0a      	ble.n	800d14a <__any_on+0x26>
 800d134:	f011 011f 	ands.w	r1, r1, #31
 800d138:	d007      	beq.n	800d14a <__any_on+0x26>
 800d13a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d13e:	fa24 f001 	lsr.w	r0, r4, r1
 800d142:	fa00 f101 	lsl.w	r1, r0, r1
 800d146:	428c      	cmp	r4, r1
 800d148:	d10b      	bne.n	800d162 <__any_on+0x3e>
 800d14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d14e:	4293      	cmp	r3, r2
 800d150:	d803      	bhi.n	800d15a <__any_on+0x36>
 800d152:	2000      	movs	r0, #0
 800d154:	bd10      	pop	{r4, pc}
 800d156:	4603      	mov	r3, r0
 800d158:	e7f7      	b.n	800d14a <__any_on+0x26>
 800d15a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d15e:	2900      	cmp	r1, #0
 800d160:	d0f5      	beq.n	800d14e <__any_on+0x2a>
 800d162:	2001      	movs	r0, #1
 800d164:	e7f6      	b.n	800d154 <__any_on+0x30>

0800d166 <_calloc_r>:
 800d166:	b538      	push	{r3, r4, r5, lr}
 800d168:	fb02 f401 	mul.w	r4, r2, r1
 800d16c:	4621      	mov	r1, r4
 800d16e:	f000 f857 	bl	800d220 <_malloc_r>
 800d172:	4605      	mov	r5, r0
 800d174:	b118      	cbz	r0, 800d17e <_calloc_r+0x18>
 800d176:	4622      	mov	r2, r4
 800d178:	2100      	movs	r1, #0
 800d17a:	f7fc fd02 	bl	8009b82 <memset>
 800d17e:	4628      	mov	r0, r5
 800d180:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d184 <_free_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4605      	mov	r5, r0
 800d188:	2900      	cmp	r1, #0
 800d18a:	d045      	beq.n	800d218 <_free_r+0x94>
 800d18c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d190:	1f0c      	subs	r4, r1, #4
 800d192:	2b00      	cmp	r3, #0
 800d194:	bfb8      	it	lt
 800d196:	18e4      	addlt	r4, r4, r3
 800d198:	f000 fa36 	bl	800d608 <__malloc_lock>
 800d19c:	4a1f      	ldr	r2, [pc, #124]	; (800d21c <_free_r+0x98>)
 800d19e:	6813      	ldr	r3, [r2, #0]
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	b933      	cbnz	r3, 800d1b2 <_free_r+0x2e>
 800d1a4:	6063      	str	r3, [r4, #4]
 800d1a6:	6014      	str	r4, [r2, #0]
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ae:	f000 ba2c 	b.w	800d60a <__malloc_unlock>
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	d90c      	bls.n	800d1d0 <_free_r+0x4c>
 800d1b6:	6821      	ldr	r1, [r4, #0]
 800d1b8:	1862      	adds	r2, r4, r1
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	bf04      	itt	eq
 800d1be:	681a      	ldreq	r2, [r3, #0]
 800d1c0:	685b      	ldreq	r3, [r3, #4]
 800d1c2:	6063      	str	r3, [r4, #4]
 800d1c4:	bf04      	itt	eq
 800d1c6:	1852      	addeq	r2, r2, r1
 800d1c8:	6022      	streq	r2, [r4, #0]
 800d1ca:	6004      	str	r4, [r0, #0]
 800d1cc:	e7ec      	b.n	800d1a8 <_free_r+0x24>
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	b10a      	cbz	r2, 800d1d8 <_free_r+0x54>
 800d1d4:	42a2      	cmp	r2, r4
 800d1d6:	d9fa      	bls.n	800d1ce <_free_r+0x4a>
 800d1d8:	6819      	ldr	r1, [r3, #0]
 800d1da:	1858      	adds	r0, r3, r1
 800d1dc:	42a0      	cmp	r0, r4
 800d1de:	d10b      	bne.n	800d1f8 <_free_r+0x74>
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	4401      	add	r1, r0
 800d1e4:	1858      	adds	r0, r3, r1
 800d1e6:	4282      	cmp	r2, r0
 800d1e8:	6019      	str	r1, [r3, #0]
 800d1ea:	d1dd      	bne.n	800d1a8 <_free_r+0x24>
 800d1ec:	6810      	ldr	r0, [r2, #0]
 800d1ee:	6852      	ldr	r2, [r2, #4]
 800d1f0:	605a      	str	r2, [r3, #4]
 800d1f2:	4401      	add	r1, r0
 800d1f4:	6019      	str	r1, [r3, #0]
 800d1f6:	e7d7      	b.n	800d1a8 <_free_r+0x24>
 800d1f8:	d902      	bls.n	800d200 <_free_r+0x7c>
 800d1fa:	230c      	movs	r3, #12
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	e7d3      	b.n	800d1a8 <_free_r+0x24>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428a      	cmp	r2, r1
 800d206:	bf04      	itt	eq
 800d208:	6811      	ldreq	r1, [r2, #0]
 800d20a:	6852      	ldreq	r2, [r2, #4]
 800d20c:	6062      	str	r2, [r4, #4]
 800d20e:	bf04      	itt	eq
 800d210:	1809      	addeq	r1, r1, r0
 800d212:	6021      	streq	r1, [r4, #0]
 800d214:	605c      	str	r4, [r3, #4]
 800d216:	e7c7      	b.n	800d1a8 <_free_r+0x24>
 800d218:	bd38      	pop	{r3, r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	20004274 	.word	0x20004274

0800d220 <_malloc_r>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	1ccd      	adds	r5, r1, #3
 800d224:	f025 0503 	bic.w	r5, r5, #3
 800d228:	3508      	adds	r5, #8
 800d22a:	2d0c      	cmp	r5, #12
 800d22c:	bf38      	it	cc
 800d22e:	250c      	movcc	r5, #12
 800d230:	2d00      	cmp	r5, #0
 800d232:	4606      	mov	r6, r0
 800d234:	db01      	blt.n	800d23a <_malloc_r+0x1a>
 800d236:	42a9      	cmp	r1, r5
 800d238:	d903      	bls.n	800d242 <_malloc_r+0x22>
 800d23a:	230c      	movs	r3, #12
 800d23c:	6033      	str	r3, [r6, #0]
 800d23e:	2000      	movs	r0, #0
 800d240:	bd70      	pop	{r4, r5, r6, pc}
 800d242:	f000 f9e1 	bl	800d608 <__malloc_lock>
 800d246:	4a21      	ldr	r2, [pc, #132]	; (800d2cc <_malloc_r+0xac>)
 800d248:	6814      	ldr	r4, [r2, #0]
 800d24a:	4621      	mov	r1, r4
 800d24c:	b991      	cbnz	r1, 800d274 <_malloc_r+0x54>
 800d24e:	4c20      	ldr	r4, [pc, #128]	; (800d2d0 <_malloc_r+0xb0>)
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	b91b      	cbnz	r3, 800d25c <_malloc_r+0x3c>
 800d254:	4630      	mov	r0, r6
 800d256:	f000 f98f 	bl	800d578 <_sbrk_r>
 800d25a:	6020      	str	r0, [r4, #0]
 800d25c:	4629      	mov	r1, r5
 800d25e:	4630      	mov	r0, r6
 800d260:	f000 f98a 	bl	800d578 <_sbrk_r>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d124      	bne.n	800d2b2 <_malloc_r+0x92>
 800d268:	230c      	movs	r3, #12
 800d26a:	6033      	str	r3, [r6, #0]
 800d26c:	4630      	mov	r0, r6
 800d26e:	f000 f9cc 	bl	800d60a <__malloc_unlock>
 800d272:	e7e4      	b.n	800d23e <_malloc_r+0x1e>
 800d274:	680b      	ldr	r3, [r1, #0]
 800d276:	1b5b      	subs	r3, r3, r5
 800d278:	d418      	bmi.n	800d2ac <_malloc_r+0x8c>
 800d27a:	2b0b      	cmp	r3, #11
 800d27c:	d90f      	bls.n	800d29e <_malloc_r+0x7e>
 800d27e:	600b      	str	r3, [r1, #0]
 800d280:	50cd      	str	r5, [r1, r3]
 800d282:	18cc      	adds	r4, r1, r3
 800d284:	4630      	mov	r0, r6
 800d286:	f000 f9c0 	bl	800d60a <__malloc_unlock>
 800d28a:	f104 000b 	add.w	r0, r4, #11
 800d28e:	1d23      	adds	r3, r4, #4
 800d290:	f020 0007 	bic.w	r0, r0, #7
 800d294:	1ac3      	subs	r3, r0, r3
 800d296:	d0d3      	beq.n	800d240 <_malloc_r+0x20>
 800d298:	425a      	negs	r2, r3
 800d29a:	50e2      	str	r2, [r4, r3]
 800d29c:	e7d0      	b.n	800d240 <_malloc_r+0x20>
 800d29e:	428c      	cmp	r4, r1
 800d2a0:	684b      	ldr	r3, [r1, #4]
 800d2a2:	bf16      	itet	ne
 800d2a4:	6063      	strne	r3, [r4, #4]
 800d2a6:	6013      	streq	r3, [r2, #0]
 800d2a8:	460c      	movne	r4, r1
 800d2aa:	e7eb      	b.n	800d284 <_malloc_r+0x64>
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	6849      	ldr	r1, [r1, #4]
 800d2b0:	e7cc      	b.n	800d24c <_malloc_r+0x2c>
 800d2b2:	1cc4      	adds	r4, r0, #3
 800d2b4:	f024 0403 	bic.w	r4, r4, #3
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d005      	beq.n	800d2c8 <_malloc_r+0xa8>
 800d2bc:	1a21      	subs	r1, r4, r0
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f000 f95a 	bl	800d578 <_sbrk_r>
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d0cf      	beq.n	800d268 <_malloc_r+0x48>
 800d2c8:	6025      	str	r5, [r4, #0]
 800d2ca:	e7db      	b.n	800d284 <_malloc_r+0x64>
 800d2cc:	20004274 	.word	0x20004274
 800d2d0:	20004278 	.word	0x20004278

0800d2d4 <__ssputs_r>:
 800d2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d8:	688e      	ldr	r6, [r1, #8]
 800d2da:	429e      	cmp	r6, r3
 800d2dc:	4682      	mov	sl, r0
 800d2de:	460c      	mov	r4, r1
 800d2e0:	4690      	mov	r8, r2
 800d2e2:	4699      	mov	r9, r3
 800d2e4:	d837      	bhi.n	800d356 <__ssputs_r+0x82>
 800d2e6:	898a      	ldrh	r2, [r1, #12]
 800d2e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2ec:	d031      	beq.n	800d352 <__ssputs_r+0x7e>
 800d2ee:	6825      	ldr	r5, [r4, #0]
 800d2f0:	6909      	ldr	r1, [r1, #16]
 800d2f2:	1a6f      	subs	r7, r5, r1
 800d2f4:	6965      	ldr	r5, [r4, #20]
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2fc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d300:	f109 0301 	add.w	r3, r9, #1
 800d304:	443b      	add	r3, r7
 800d306:	429d      	cmp	r5, r3
 800d308:	bf38      	it	cc
 800d30a:	461d      	movcc	r5, r3
 800d30c:	0553      	lsls	r3, r2, #21
 800d30e:	d530      	bpl.n	800d372 <__ssputs_r+0x9e>
 800d310:	4629      	mov	r1, r5
 800d312:	f7ff ff85 	bl	800d220 <_malloc_r>
 800d316:	4606      	mov	r6, r0
 800d318:	b950      	cbnz	r0, 800d330 <__ssputs_r+0x5c>
 800d31a:	230c      	movs	r3, #12
 800d31c:	f8ca 3000 	str.w	r3, [sl]
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d330:	463a      	mov	r2, r7
 800d332:	6921      	ldr	r1, [r4, #16]
 800d334:	f7fc fc1a 	bl	8009b6c <memcpy>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	6126      	str	r6, [r4, #16]
 800d346:	6165      	str	r5, [r4, #20]
 800d348:	443e      	add	r6, r7
 800d34a:	1bed      	subs	r5, r5, r7
 800d34c:	6026      	str	r6, [r4, #0]
 800d34e:	60a5      	str	r5, [r4, #8]
 800d350:	464e      	mov	r6, r9
 800d352:	454e      	cmp	r6, r9
 800d354:	d900      	bls.n	800d358 <__ssputs_r+0x84>
 800d356:	464e      	mov	r6, r9
 800d358:	4632      	mov	r2, r6
 800d35a:	4641      	mov	r1, r8
 800d35c:	6820      	ldr	r0, [r4, #0]
 800d35e:	f000 f93a 	bl	800d5d6 <memmove>
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	1b9b      	subs	r3, r3, r6
 800d366:	60a3      	str	r3, [r4, #8]
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	441e      	add	r6, r3
 800d36c:	6026      	str	r6, [r4, #0]
 800d36e:	2000      	movs	r0, #0
 800d370:	e7dc      	b.n	800d32c <__ssputs_r+0x58>
 800d372:	462a      	mov	r2, r5
 800d374:	f000 f94a 	bl	800d60c <_realloc_r>
 800d378:	4606      	mov	r6, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d1e2      	bne.n	800d344 <__ssputs_r+0x70>
 800d37e:	6921      	ldr	r1, [r4, #16]
 800d380:	4650      	mov	r0, sl
 800d382:	f7ff feff 	bl	800d184 <_free_r>
 800d386:	e7c8      	b.n	800d31a <__ssputs_r+0x46>

0800d388 <_svfiprintf_r>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	461d      	mov	r5, r3
 800d38e:	898b      	ldrh	r3, [r1, #12]
 800d390:	061f      	lsls	r7, r3, #24
 800d392:	b09d      	sub	sp, #116	; 0x74
 800d394:	4680      	mov	r8, r0
 800d396:	460c      	mov	r4, r1
 800d398:	4616      	mov	r6, r2
 800d39a:	d50f      	bpl.n	800d3bc <_svfiprintf_r+0x34>
 800d39c:	690b      	ldr	r3, [r1, #16]
 800d39e:	b96b      	cbnz	r3, 800d3bc <_svfiprintf_r+0x34>
 800d3a0:	2140      	movs	r1, #64	; 0x40
 800d3a2:	f7ff ff3d 	bl	800d220 <_malloc_r>
 800d3a6:	6020      	str	r0, [r4, #0]
 800d3a8:	6120      	str	r0, [r4, #16]
 800d3aa:	b928      	cbnz	r0, 800d3b8 <_svfiprintf_r+0x30>
 800d3ac:	230c      	movs	r3, #12
 800d3ae:	f8c8 3000 	str.w	r3, [r8]
 800d3b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3b6:	e0c8      	b.n	800d54a <_svfiprintf_r+0x1c2>
 800d3b8:	2340      	movs	r3, #64	; 0x40
 800d3ba:	6163      	str	r3, [r4, #20]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9309      	str	r3, [sp, #36]	; 0x24
 800d3c0:	2320      	movs	r3, #32
 800d3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3c6:	2330      	movs	r3, #48	; 0x30
 800d3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3cc:	9503      	str	r5, [sp, #12]
 800d3ce:	f04f 0b01 	mov.w	fp, #1
 800d3d2:	4637      	mov	r7, r6
 800d3d4:	463d      	mov	r5, r7
 800d3d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3da:	b10b      	cbz	r3, 800d3e0 <_svfiprintf_r+0x58>
 800d3dc:	2b25      	cmp	r3, #37	; 0x25
 800d3de:	d13e      	bne.n	800d45e <_svfiprintf_r+0xd6>
 800d3e0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d3e4:	d00b      	beq.n	800d3fe <_svfiprintf_r+0x76>
 800d3e6:	4653      	mov	r3, sl
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4621      	mov	r1, r4
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	f7ff ff71 	bl	800d2d4 <__ssputs_r>
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	f000 80a4 	beq.w	800d540 <_svfiprintf_r+0x1b8>
 800d3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fa:	4453      	add	r3, sl
 800d3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d3fe:	783b      	ldrb	r3, [r7, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 809d 	beq.w	800d540 <_svfiprintf_r+0x1b8>
 800d406:	2300      	movs	r3, #0
 800d408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	9307      	str	r3, [sp, #28]
 800d414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d418:	931a      	str	r3, [sp, #104]	; 0x68
 800d41a:	462f      	mov	r7, r5
 800d41c:	2205      	movs	r2, #5
 800d41e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d422:	4850      	ldr	r0, [pc, #320]	; (800d564 <_svfiprintf_r+0x1dc>)
 800d424:	f7f2 fefc 	bl	8000220 <memchr>
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	b9d0      	cbnz	r0, 800d462 <_svfiprintf_r+0xda>
 800d42c:	06d9      	lsls	r1, r3, #27
 800d42e:	bf44      	itt	mi
 800d430:	2220      	movmi	r2, #32
 800d432:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d436:	071a      	lsls	r2, r3, #28
 800d438:	bf44      	itt	mi
 800d43a:	222b      	movmi	r2, #43	; 0x2b
 800d43c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d440:	782a      	ldrb	r2, [r5, #0]
 800d442:	2a2a      	cmp	r2, #42	; 0x2a
 800d444:	d015      	beq.n	800d472 <_svfiprintf_r+0xea>
 800d446:	9a07      	ldr	r2, [sp, #28]
 800d448:	462f      	mov	r7, r5
 800d44a:	2000      	movs	r0, #0
 800d44c:	250a      	movs	r5, #10
 800d44e:	4639      	mov	r1, r7
 800d450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d454:	3b30      	subs	r3, #48	; 0x30
 800d456:	2b09      	cmp	r3, #9
 800d458:	d94d      	bls.n	800d4f6 <_svfiprintf_r+0x16e>
 800d45a:	b1b8      	cbz	r0, 800d48c <_svfiprintf_r+0x104>
 800d45c:	e00f      	b.n	800d47e <_svfiprintf_r+0xf6>
 800d45e:	462f      	mov	r7, r5
 800d460:	e7b8      	b.n	800d3d4 <_svfiprintf_r+0x4c>
 800d462:	4a40      	ldr	r2, [pc, #256]	; (800d564 <_svfiprintf_r+0x1dc>)
 800d464:	1a80      	subs	r0, r0, r2
 800d466:	fa0b f000 	lsl.w	r0, fp, r0
 800d46a:	4318      	orrs	r0, r3
 800d46c:	9004      	str	r0, [sp, #16]
 800d46e:	463d      	mov	r5, r7
 800d470:	e7d3      	b.n	800d41a <_svfiprintf_r+0x92>
 800d472:	9a03      	ldr	r2, [sp, #12]
 800d474:	1d11      	adds	r1, r2, #4
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	9103      	str	r1, [sp, #12]
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	db01      	blt.n	800d482 <_svfiprintf_r+0xfa>
 800d47e:	9207      	str	r2, [sp, #28]
 800d480:	e004      	b.n	800d48c <_svfiprintf_r+0x104>
 800d482:	4252      	negs	r2, r2
 800d484:	f043 0302 	orr.w	r3, r3, #2
 800d488:	9207      	str	r2, [sp, #28]
 800d48a:	9304      	str	r3, [sp, #16]
 800d48c:	783b      	ldrb	r3, [r7, #0]
 800d48e:	2b2e      	cmp	r3, #46	; 0x2e
 800d490:	d10c      	bne.n	800d4ac <_svfiprintf_r+0x124>
 800d492:	787b      	ldrb	r3, [r7, #1]
 800d494:	2b2a      	cmp	r3, #42	; 0x2a
 800d496:	d133      	bne.n	800d500 <_svfiprintf_r+0x178>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	1d1a      	adds	r2, r3, #4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	9203      	str	r2, [sp, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	bfb8      	it	lt
 800d4a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4a8:	3702      	adds	r7, #2
 800d4aa:	9305      	str	r3, [sp, #20]
 800d4ac:	4d2e      	ldr	r5, [pc, #184]	; (800d568 <_svfiprintf_r+0x1e0>)
 800d4ae:	7839      	ldrb	r1, [r7, #0]
 800d4b0:	2203      	movs	r2, #3
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7f2 feb4 	bl	8000220 <memchr>
 800d4b8:	b138      	cbz	r0, 800d4ca <_svfiprintf_r+0x142>
 800d4ba:	2340      	movs	r3, #64	; 0x40
 800d4bc:	1b40      	subs	r0, r0, r5
 800d4be:	fa03 f000 	lsl.w	r0, r3, r0
 800d4c2:	9b04      	ldr	r3, [sp, #16]
 800d4c4:	4303      	orrs	r3, r0
 800d4c6:	3701      	adds	r7, #1
 800d4c8:	9304      	str	r3, [sp, #16]
 800d4ca:	7839      	ldrb	r1, [r7, #0]
 800d4cc:	4827      	ldr	r0, [pc, #156]	; (800d56c <_svfiprintf_r+0x1e4>)
 800d4ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d2:	2206      	movs	r2, #6
 800d4d4:	1c7e      	adds	r6, r7, #1
 800d4d6:	f7f2 fea3 	bl	8000220 <memchr>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d038      	beq.n	800d550 <_svfiprintf_r+0x1c8>
 800d4de:	4b24      	ldr	r3, [pc, #144]	; (800d570 <_svfiprintf_r+0x1e8>)
 800d4e0:	bb13      	cbnz	r3, 800d528 <_svfiprintf_r+0x1a0>
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	3307      	adds	r3, #7
 800d4e6:	f023 0307 	bic.w	r3, r3, #7
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9303      	str	r3, [sp, #12]
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	444b      	add	r3, r9
 800d4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f4:	e76d      	b.n	800d3d2 <_svfiprintf_r+0x4a>
 800d4f6:	fb05 3202 	mla	r2, r5, r2, r3
 800d4fa:	2001      	movs	r0, #1
 800d4fc:	460f      	mov	r7, r1
 800d4fe:	e7a6      	b.n	800d44e <_svfiprintf_r+0xc6>
 800d500:	2300      	movs	r3, #0
 800d502:	3701      	adds	r7, #1
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	4619      	mov	r1, r3
 800d508:	250a      	movs	r5, #10
 800d50a:	4638      	mov	r0, r7
 800d50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d510:	3a30      	subs	r2, #48	; 0x30
 800d512:	2a09      	cmp	r2, #9
 800d514:	d903      	bls.n	800d51e <_svfiprintf_r+0x196>
 800d516:	2b00      	cmp	r3, #0
 800d518:	d0c8      	beq.n	800d4ac <_svfiprintf_r+0x124>
 800d51a:	9105      	str	r1, [sp, #20]
 800d51c:	e7c6      	b.n	800d4ac <_svfiprintf_r+0x124>
 800d51e:	fb05 2101 	mla	r1, r5, r1, r2
 800d522:	2301      	movs	r3, #1
 800d524:	4607      	mov	r7, r0
 800d526:	e7f0      	b.n	800d50a <_svfiprintf_r+0x182>
 800d528:	ab03      	add	r3, sp, #12
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	4622      	mov	r2, r4
 800d52e:	4b11      	ldr	r3, [pc, #68]	; (800d574 <_svfiprintf_r+0x1ec>)
 800d530:	a904      	add	r1, sp, #16
 800d532:	4640      	mov	r0, r8
 800d534:	f7fc fbc2 	bl	8009cbc <_printf_float>
 800d538:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d53c:	4681      	mov	r9, r0
 800d53e:	d1d6      	bne.n	800d4ee <_svfiprintf_r+0x166>
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	065b      	lsls	r3, r3, #25
 800d544:	f53f af35 	bmi.w	800d3b2 <_svfiprintf_r+0x2a>
 800d548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d54a:	b01d      	add	sp, #116	; 0x74
 800d54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d550:	ab03      	add	r3, sp, #12
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	4622      	mov	r2, r4
 800d556:	4b07      	ldr	r3, [pc, #28]	; (800d574 <_svfiprintf_r+0x1ec>)
 800d558:	a904      	add	r1, sp, #16
 800d55a:	4640      	mov	r0, r8
 800d55c:	f7fc fe64 	bl	800a228 <_printf_i>
 800d560:	e7ea      	b.n	800d538 <_svfiprintf_r+0x1b0>
 800d562:	bf00      	nop
 800d564:	08010bec 	.word	0x08010bec
 800d568:	08010bf2 	.word	0x08010bf2
 800d56c:	08010bf6 	.word	0x08010bf6
 800d570:	08009cbd 	.word	0x08009cbd
 800d574:	0800d2d5 	.word	0x0800d2d5

0800d578 <_sbrk_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4c06      	ldr	r4, [pc, #24]	; (800d594 <_sbrk_r+0x1c>)
 800d57c:	2300      	movs	r3, #0
 800d57e:	4605      	mov	r5, r0
 800d580:	4608      	mov	r0, r1
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	f7fc f978 	bl	8009878 <_sbrk>
 800d588:	1c43      	adds	r3, r0, #1
 800d58a:	d102      	bne.n	800d592 <_sbrk_r+0x1a>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	b103      	cbz	r3, 800d592 <_sbrk_r+0x1a>
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	200048f0 	.word	0x200048f0

0800d598 <strncmp>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	b16a      	cbz	r2, 800d5b8 <strncmp+0x20>
 800d59c:	3901      	subs	r1, #1
 800d59e:	1884      	adds	r4, r0, r2
 800d5a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d103      	bne.n	800d5b4 <strncmp+0x1c>
 800d5ac:	42a0      	cmp	r0, r4
 800d5ae:	d001      	beq.n	800d5b4 <strncmp+0x1c>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f5      	bne.n	800d5a0 <strncmp+0x8>
 800d5b4:	1a98      	subs	r0, r3, r2
 800d5b6:	bd10      	pop	{r4, pc}
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	e7fc      	b.n	800d5b6 <strncmp+0x1e>

0800d5bc <__ascii_wctomb>:
 800d5bc:	b149      	cbz	r1, 800d5d2 <__ascii_wctomb+0x16>
 800d5be:	2aff      	cmp	r2, #255	; 0xff
 800d5c0:	bf85      	ittet	hi
 800d5c2:	238a      	movhi	r3, #138	; 0x8a
 800d5c4:	6003      	strhi	r3, [r0, #0]
 800d5c6:	700a      	strbls	r2, [r1, #0]
 800d5c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d5cc:	bf98      	it	ls
 800d5ce:	2001      	movls	r0, #1
 800d5d0:	4770      	bx	lr
 800d5d2:	4608      	mov	r0, r1
 800d5d4:	4770      	bx	lr

0800d5d6 <memmove>:
 800d5d6:	4288      	cmp	r0, r1
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	eb01 0302 	add.w	r3, r1, r2
 800d5de:	d807      	bhi.n	800d5f0 <memmove+0x1a>
 800d5e0:	1e42      	subs	r2, r0, #1
 800d5e2:	4299      	cmp	r1, r3
 800d5e4:	d00a      	beq.n	800d5fc <memmove+0x26>
 800d5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d5ee:	e7f8      	b.n	800d5e2 <memmove+0xc>
 800d5f0:	4283      	cmp	r3, r0
 800d5f2:	d9f5      	bls.n	800d5e0 <memmove+0xa>
 800d5f4:	1881      	adds	r1, r0, r2
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	42d3      	cmn	r3, r2
 800d5fa:	d100      	bne.n	800d5fe <memmove+0x28>
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d602:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d606:	e7f7      	b.n	800d5f8 <memmove+0x22>

0800d608 <__malloc_lock>:
 800d608:	4770      	bx	lr

0800d60a <__malloc_unlock>:
 800d60a:	4770      	bx	lr

0800d60c <_realloc_r>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	4607      	mov	r7, r0
 800d610:	4614      	mov	r4, r2
 800d612:	460e      	mov	r6, r1
 800d614:	b921      	cbnz	r1, 800d620 <_realloc_r+0x14>
 800d616:	4611      	mov	r1, r2
 800d618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d61c:	f7ff be00 	b.w	800d220 <_malloc_r>
 800d620:	b922      	cbnz	r2, 800d62c <_realloc_r+0x20>
 800d622:	f7ff fdaf 	bl	800d184 <_free_r>
 800d626:	4625      	mov	r5, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62c:	f000 f814 	bl	800d658 <_malloc_usable_size_r>
 800d630:	42a0      	cmp	r0, r4
 800d632:	d20f      	bcs.n	800d654 <_realloc_r+0x48>
 800d634:	4621      	mov	r1, r4
 800d636:	4638      	mov	r0, r7
 800d638:	f7ff fdf2 	bl	800d220 <_malloc_r>
 800d63c:	4605      	mov	r5, r0
 800d63e:	2800      	cmp	r0, #0
 800d640:	d0f2      	beq.n	800d628 <_realloc_r+0x1c>
 800d642:	4631      	mov	r1, r6
 800d644:	4622      	mov	r2, r4
 800d646:	f7fc fa91 	bl	8009b6c <memcpy>
 800d64a:	4631      	mov	r1, r6
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7ff fd99 	bl	800d184 <_free_r>
 800d652:	e7e9      	b.n	800d628 <_realloc_r+0x1c>
 800d654:	4635      	mov	r5, r6
 800d656:	e7e7      	b.n	800d628 <_realloc_r+0x1c>

0800d658 <_malloc_usable_size_r>:
 800d658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65c:	1f18      	subs	r0, r3, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfbc      	itt	lt
 800d662:	580b      	ldrlt	r3, [r1, r0]
 800d664:	18c0      	addlt	r0, r0, r3
 800d666:	4770      	bx	lr

0800d668 <_init>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	bf00      	nop
 800d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66e:	bc08      	pop	{r3}
 800d670:	469e      	mov	lr, r3
 800d672:	4770      	bx	lr

0800d674 <_fini>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr
