
DRONE_CONTROLLER_F4746NG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d730  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003688  0800d900  0800d900  0001d900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f88  08010f88  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08010f88  08010f88  00020f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f90  08010f90  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f90  08010f90  00020f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f94  08010f94  00020f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08010f98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004700  2000022c  080111c4  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000492c  080111c4  0003492c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d9c5  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007452  00000000  00000000  0006dc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c2e7  00000000  00000000  00075073  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002580  00000000  00000000  00091360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000023e0  00000000  00000000  000938e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002f581  00000000  00000000  00095cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000256ab  00000000  00000000  000c5241  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00108d0a  00000000  00000000  000ea8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001f35f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007924  00000000  00000000  001f3674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d8e8 	.word	0x0800d8e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	0800d8e8 	.word	0x0800d8e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d84:	f1a2 0201 	sub.w	r2, r2, #1
 8000d88:	d1ed      	bne.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f02:	f000 b9f3 	b.w	80012ec <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 b9a8 	b.w	80012ec <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2lz>:
 8000fb4:	ee07 0a90 	vmov	s15, r0
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d401      	bmi.n	8000fc6 <__aeabi_f2lz+0x12>
 8000fc2:	f000 b809 	b.w	8000fd8 <__aeabi_f2ulz>
 8000fc6:	b508      	push	{r3, lr}
 8000fc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f000 f804 	bl	8000fd8 <__aeabi_f2ulz>
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd6:	bd08      	pop	{r3, pc}

08000fd8 <__aeabi_f2ulz>:
 8000fd8:	b5d0      	push	{r4, r6, r7, lr}
 8000fda:	f7ff fad5 	bl	8000588 <__aeabi_f2d>
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <__aeabi_f2ulz+0x40>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fb27 	bl	8000638 <__aeabi_dmul>
 8000fea:	f7ff fdfd 	bl	8000be8 <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff faa8 	bl	8000544 <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <__aeabi_f2ulz+0x44>)
 8000ff8:	f7ff fb1e 	bl	8000638 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f960 	bl	80002c8 <__aeabi_dsub>
 8001008:	f7ff fdee 	bl	8000be8 <__aeabi_d2uiz>
 800100c:	2200      	movs	r2, #0
 800100e:	4623      	mov	r3, r4
 8001010:	4310      	orrs	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	bdd0      	pop	{r4, r6, r7, pc}
 8001016:	bf00      	nop
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9e08      	ldr	r6, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	4688      	mov	r8, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14b      	bne.n	80010c6 <__udivmoddi4+0xa6>
 800102e:	428a      	cmp	r2, r1
 8001030:	4615      	mov	r5, r2
 8001032:	d967      	bls.n	8001104 <__udivmoddi4+0xe4>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0720 	rsb	r7, r2, #32
 800103e:	fa01 f302 	lsl.w	r3, r1, r2
 8001042:	fa20 f707 	lsr.w	r7, r0, r7
 8001046:	4095      	lsls	r5, r2
 8001048:	ea47 0803 	orr.w	r8, r7, r3
 800104c:	4094      	lsls	r4, r2
 800104e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001052:	0c23      	lsrs	r3, r4, #16
 8001054:	fbb8 f7fe 	udiv	r7, r8, lr
 8001058:	fa1f fc85 	uxth.w	ip, r5
 800105c:	fb0e 8817 	mls	r8, lr, r7, r8
 8001060:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001064:	fb07 f10c 	mul.w	r1, r7, ip
 8001068:	4299      	cmp	r1, r3
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x60>
 800106c:	18eb      	adds	r3, r5, r3
 800106e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001072:	f080 811b 	bcs.w	80012ac <__udivmoddi4+0x28c>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 8118 	bls.w	80012ac <__udivmoddi4+0x28c>
 800107c:	3f02      	subs	r7, #2
 800107e:	442b      	add	r3, r5
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b2a4      	uxth	r4, r4
 8001084:	fbb3 f0fe 	udiv	r0, r3, lr
 8001088:	fb0e 3310 	mls	r3, lr, r0, r3
 800108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001090:	fb00 fc0c 	mul.w	ip, r0, ip
 8001094:	45a4      	cmp	ip, r4
 8001096:	d909      	bls.n	80010ac <__udivmoddi4+0x8c>
 8001098:	192c      	adds	r4, r5, r4
 800109a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800109e:	f080 8107 	bcs.w	80012b0 <__udivmoddi4+0x290>
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	f240 8104 	bls.w	80012b0 <__udivmoddi4+0x290>
 80010a8:	3802      	subs	r0, #2
 80010aa:	442c      	add	r4, r5
 80010ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010b0:	eba4 040c 	sub.w	r4, r4, ip
 80010b4:	2700      	movs	r7, #0
 80010b6:	b11e      	cbz	r6, 80010c0 <__udivmoddi4+0xa0>
 80010b8:	40d4      	lsrs	r4, r2
 80010ba:	2300      	movs	r3, #0
 80010bc:	e9c6 4300 	strd	r4, r3, [r6]
 80010c0:	4639      	mov	r1, r7
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d909      	bls.n	80010de <__udivmoddi4+0xbe>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	f000 80eb 	beq.w	80012a6 <__udivmoddi4+0x286>
 80010d0:	2700      	movs	r7, #0
 80010d2:	e9c6 0100 	strd	r0, r1, [r6]
 80010d6:	4638      	mov	r0, r7
 80010d8:	4639      	mov	r1, r7
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	fab3 f783 	clz	r7, r3
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d147      	bne.n	8001176 <__udivmoddi4+0x156>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d302      	bcc.n	80010f0 <__udivmoddi4+0xd0>
 80010ea:	4282      	cmp	r2, r0
 80010ec:	f200 80fa 	bhi.w	80012e4 <__udivmoddi4+0x2c4>
 80010f0:	1a84      	subs	r4, r0, r2
 80010f2:	eb61 0303 	sbc.w	r3, r1, r3
 80010f6:	2001      	movs	r0, #1
 80010f8:	4698      	mov	r8, r3
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d0e0      	beq.n	80010c0 <__udivmoddi4+0xa0>
 80010fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001102:	e7dd      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001104:	b902      	cbnz	r2, 8001108 <__udivmoddi4+0xe8>
 8001106:	deff      	udf	#255	; 0xff
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	2a00      	cmp	r2, #0
 800110e:	f040 808f 	bne.w	8001230 <__udivmoddi4+0x210>
 8001112:	1b49      	subs	r1, r1, r5
 8001114:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001118:	fa1f f885 	uxth.w	r8, r5
 800111c:	2701      	movs	r7, #1
 800111e:	fbb1 fcfe 	udiv	ip, r1, lr
 8001122:	0c23      	lsrs	r3, r4, #16
 8001124:	fb0e 111c 	mls	r1, lr, ip, r1
 8001128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800112c:	fb08 f10c 	mul.w	r1, r8, ip
 8001130:	4299      	cmp	r1, r3
 8001132:	d907      	bls.n	8001144 <__udivmoddi4+0x124>
 8001134:	18eb      	adds	r3, r5, r3
 8001136:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800113a:	d202      	bcs.n	8001142 <__udivmoddi4+0x122>
 800113c:	4299      	cmp	r1, r3
 800113e:	f200 80cd 	bhi.w	80012dc <__udivmoddi4+0x2bc>
 8001142:	4684      	mov	ip, r0
 8001144:	1a59      	subs	r1, r3, r1
 8001146:	b2a3      	uxth	r3, r4
 8001148:	fbb1 f0fe 	udiv	r0, r1, lr
 800114c:	fb0e 1410 	mls	r4, lr, r0, r1
 8001150:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001154:	fb08 f800 	mul.w	r8, r8, r0
 8001158:	45a0      	cmp	r8, r4
 800115a:	d907      	bls.n	800116c <__udivmoddi4+0x14c>
 800115c:	192c      	adds	r4, r5, r4
 800115e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x14a>
 8001164:	45a0      	cmp	r8, r4
 8001166:	f200 80b6 	bhi.w	80012d6 <__udivmoddi4+0x2b6>
 800116a:	4618      	mov	r0, r3
 800116c:	eba4 0408 	sub.w	r4, r4, r8
 8001170:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001174:	e79f      	b.n	80010b6 <__udivmoddi4+0x96>
 8001176:	f1c7 0c20 	rsb	ip, r7, #32
 800117a:	40bb      	lsls	r3, r7
 800117c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001180:	ea4e 0e03 	orr.w	lr, lr, r3
 8001184:	fa01 f407 	lsl.w	r4, r1, r7
 8001188:	fa20 f50c 	lsr.w	r5, r0, ip
 800118c:	fa21 f30c 	lsr.w	r3, r1, ip
 8001190:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001194:	4325      	orrs	r5, r4
 8001196:	fbb3 f9f8 	udiv	r9, r3, r8
 800119a:	0c2c      	lsrs	r4, r5, #16
 800119c:	fb08 3319 	mls	r3, r8, r9, r3
 80011a0:	fa1f fa8e 	uxth.w	sl, lr
 80011a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80011a8:	fb09 f40a 	mul.w	r4, r9, sl
 80011ac:	429c      	cmp	r4, r3
 80011ae:	fa02 f207 	lsl.w	r2, r2, r7
 80011b2:	fa00 f107 	lsl.w	r1, r0, r7
 80011b6:	d90b      	bls.n	80011d0 <__udivmoddi4+0x1b0>
 80011b8:	eb1e 0303 	adds.w	r3, lr, r3
 80011bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80011c0:	f080 8087 	bcs.w	80012d2 <__udivmoddi4+0x2b2>
 80011c4:	429c      	cmp	r4, r3
 80011c6:	f240 8084 	bls.w	80012d2 <__udivmoddi4+0x2b2>
 80011ca:	f1a9 0902 	sub.w	r9, r9, #2
 80011ce:	4473      	add	r3, lr
 80011d0:	1b1b      	subs	r3, r3, r4
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011d8:	fb08 3310 	mls	r3, r8, r0, r3
 80011dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80011e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80011e4:	45a2      	cmp	sl, r4
 80011e6:	d908      	bls.n	80011fa <__udivmoddi4+0x1da>
 80011e8:	eb1e 0404 	adds.w	r4, lr, r4
 80011ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011f0:	d26b      	bcs.n	80012ca <__udivmoddi4+0x2aa>
 80011f2:	45a2      	cmp	sl, r4
 80011f4:	d969      	bls.n	80012ca <__udivmoddi4+0x2aa>
 80011f6:	3802      	subs	r0, #2
 80011f8:	4474      	add	r4, lr
 80011fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011fe:	fba0 8902 	umull	r8, r9, r0, r2
 8001202:	eba4 040a 	sub.w	r4, r4, sl
 8001206:	454c      	cmp	r4, r9
 8001208:	46c2      	mov	sl, r8
 800120a:	464b      	mov	r3, r9
 800120c:	d354      	bcc.n	80012b8 <__udivmoddi4+0x298>
 800120e:	d051      	beq.n	80012b4 <__udivmoddi4+0x294>
 8001210:	2e00      	cmp	r6, #0
 8001212:	d069      	beq.n	80012e8 <__udivmoddi4+0x2c8>
 8001214:	ebb1 050a 	subs.w	r5, r1, sl
 8001218:	eb64 0403 	sbc.w	r4, r4, r3
 800121c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001220:	40fd      	lsrs	r5, r7
 8001222:	40fc      	lsrs	r4, r7
 8001224:	ea4c 0505 	orr.w	r5, ip, r5
 8001228:	e9c6 5400 	strd	r5, r4, [r6]
 800122c:	2700      	movs	r7, #0
 800122e:	e747      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001230:	f1c2 0320 	rsb	r3, r2, #32
 8001234:	fa20 f703 	lsr.w	r7, r0, r3
 8001238:	4095      	lsls	r5, r2
 800123a:	fa01 f002 	lsl.w	r0, r1, r2
 800123e:	fa21 f303 	lsr.w	r3, r1, r3
 8001242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001246:	4338      	orrs	r0, r7
 8001248:	0c01      	lsrs	r1, r0, #16
 800124a:	fbb3 f7fe 	udiv	r7, r3, lr
 800124e:	fa1f f885 	uxth.w	r8, r5
 8001252:	fb0e 3317 	mls	r3, lr, r7, r3
 8001256:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800125a:	fb07 f308 	mul.w	r3, r7, r8
 800125e:	428b      	cmp	r3, r1
 8001260:	fa04 f402 	lsl.w	r4, r4, r2
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0x256>
 8001266:	1869      	adds	r1, r5, r1
 8001268:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800126c:	d22f      	bcs.n	80012ce <__udivmoddi4+0x2ae>
 800126e:	428b      	cmp	r3, r1
 8001270:	d92d      	bls.n	80012ce <__udivmoddi4+0x2ae>
 8001272:	3f02      	subs	r7, #2
 8001274:	4429      	add	r1, r5
 8001276:	1acb      	subs	r3, r1, r3
 8001278:	b281      	uxth	r1, r0
 800127a:	fbb3 f0fe 	udiv	r0, r3, lr
 800127e:	fb0e 3310 	mls	r3, lr, r0, r3
 8001282:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001286:	fb00 f308 	mul.w	r3, r0, r8
 800128a:	428b      	cmp	r3, r1
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x27e>
 800128e:	1869      	adds	r1, r5, r1
 8001290:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001294:	d217      	bcs.n	80012c6 <__udivmoddi4+0x2a6>
 8001296:	428b      	cmp	r3, r1
 8001298:	d915      	bls.n	80012c6 <__udivmoddi4+0x2a6>
 800129a:	3802      	subs	r0, #2
 800129c:	4429      	add	r1, r5
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80012a4:	e73b      	b.n	800111e <__udivmoddi4+0xfe>
 80012a6:	4637      	mov	r7, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	e709      	b.n	80010c0 <__udivmoddi4+0xa0>
 80012ac:	4607      	mov	r7, r0
 80012ae:	e6e7      	b.n	8001080 <__udivmoddi4+0x60>
 80012b0:	4618      	mov	r0, r3
 80012b2:	e6fb      	b.n	80010ac <__udivmoddi4+0x8c>
 80012b4:	4541      	cmp	r1, r8
 80012b6:	d2ab      	bcs.n	8001210 <__udivmoddi4+0x1f0>
 80012b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80012bc:	eb69 020e 	sbc.w	r2, r9, lr
 80012c0:	3801      	subs	r0, #1
 80012c2:	4613      	mov	r3, r2
 80012c4:	e7a4      	b.n	8001210 <__udivmoddi4+0x1f0>
 80012c6:	4660      	mov	r0, ip
 80012c8:	e7e9      	b.n	800129e <__udivmoddi4+0x27e>
 80012ca:	4618      	mov	r0, r3
 80012cc:	e795      	b.n	80011fa <__udivmoddi4+0x1da>
 80012ce:	4667      	mov	r7, ip
 80012d0:	e7d1      	b.n	8001276 <__udivmoddi4+0x256>
 80012d2:	4681      	mov	r9, r0
 80012d4:	e77c      	b.n	80011d0 <__udivmoddi4+0x1b0>
 80012d6:	3802      	subs	r0, #2
 80012d8:	442c      	add	r4, r5
 80012da:	e747      	b.n	800116c <__udivmoddi4+0x14c>
 80012dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e0:	442b      	add	r3, r5
 80012e2:	e72f      	b.n	8001144 <__udivmoddi4+0x124>
 80012e4:	4638      	mov	r0, r7
 80012e6:	e708      	b.n	80010fa <__udivmoddi4+0xda>
 80012e8:	4637      	mov	r7, r6
 80012ea:	e6e9      	b.n	80010c0 <__udivmoddi4+0xa0>

080012ec <__aeabi_idiv0>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80012f0:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 80012f2:	f000 fe8b 	bl	800200c <DWT_Delay>

}
 80012f6:	bd08      	pop	{r3, pc}

080012f8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80012f8:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80012fa:	b938      	cbnz	r0, 800130c <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <NRF24_csn+0x24>)
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <NRF24_csn+0x28>)
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f002 f834 	bl	8003372 <HAL_GPIO_WritePin>
}
 800130a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <NRF24_csn+0x24>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	4b03      	ldr	r3, [pc, #12]	; (8001320 <NRF24_csn+0x28>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f002 f82c 	bl	8003372 <HAL_GPIO_WritePin>
 800131a:	e7f6      	b.n	800130a <NRF24_csn+0x12>
 800131c:	2000024c 	.word	0x2000024c
 8001320:	20000250 	.word	0x20000250

08001324 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001324:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001326:	b938      	cbnz	r0, 8001338 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <NRF24_ce+0x24>)
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <NRF24_ce+0x28>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f002 f81e 	bl	8003372 <HAL_GPIO_WritePin>
}
 8001336:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <NRF24_ce+0x24>)
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <NRF24_ce+0x28>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f002 f816 	bl	8003372 <HAL_GPIO_WritePin>
 8001346:	e7f6      	b.n	8001336 <NRF24_ce+0x12>
 8001348:	2000024a 	.word	0x2000024a
 800134c:	20000250 	.word	0x20000250

08001350 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001350:	b510      	push	{r4, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffce 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800135c:	f004 041f 	and.w	r4, r4, #31
 8001360:	a902      	add	r1, sp, #8
 8001362:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001366:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <NRF24_read_register+0x40>)
 8001368:	2302      	movs	r3, #2
 800136a:	2201      	movs	r2, #1
 800136c:	4620      	mov	r0, r4
 800136e:	f003 fd8d 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8001372:	2302      	movs	r3, #2
 8001374:	2201      	movs	r2, #1
 8001376:	f10d 0105 	add.w	r1, sp, #5
 800137a:	4620      	mov	r0, r4
 800137c:	f003 ffdd 	bl	800533a <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8001380:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff ffb7 	bl	80012f8 <NRF24_csn>
	return retData;
}
 800138a:	4620      	mov	r0, r4
 800138c:	b002      	add	sp, #8
 800138e:	bd10      	pop	{r4, pc}
 8001390:	20000254 	.word	0x20000254

08001394 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	4604      	mov	r4, r0
 800139a:	460d      	mov	r5, r1
 800139c:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ffaa 	bl	80012f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80013a4:	f004 041f 	and.w	r4, r4, #31
 80013a8:	a902      	add	r1, sp, #8
 80013aa:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80013ae:	4c08      	ldr	r4, [pc, #32]	; (80013d0 <NRF24_read_registerN+0x3c>)
 80013b0:	2302      	movs	r3, #2
 80013b2:	2201      	movs	r2, #1
 80013b4:	4620      	mov	r0, r4
 80013b6:	f003 fd69 	bl	8004e8c <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80013ba:	2302      	movs	r3, #2
 80013bc:	4632      	mov	r2, r6
 80013be:	4629      	mov	r1, r5
 80013c0:	4620      	mov	r0, r4
 80013c2:	f003 ffba 	bl	800533a <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff ff96 	bl	80012f8 <NRF24_csn>
}
 80013cc:	b002      	add	sp, #8
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	20000254 	.word	0x20000254

080013d4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80013d4:	b530      	push	{r4, r5, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff ff8b 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80013e2:	f044 0420 	orr.w	r4, r4, #32
 80013e6:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80013ea:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,2);
 80013ee:	2302      	movs	r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <NRF24_write_register+0x30>)
 80013f6:	f003 fd49 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff7c 	bl	80012f8 <NRF24_csn>
}
 8001400:	b003      	add	sp, #12
 8001402:	bd30      	pop	{r4, r5, pc}
 8001404:	20000254 	.word	0x20000254

08001408 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff70 	bl	80012f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001418:	f044 0420 	orr.w	r4, r4, #32
 800141c:	a902      	add	r1, sp, #8
 800141e:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001422:	4c08      	ldr	r4, [pc, #32]	; (8001444 <NRF24_write_registerN+0x3c>)
 8001424:	2302      	movs	r3, #2
 8001426:	2201      	movs	r2, #1
 8001428:	4620      	mov	r0, r4
 800142a:	f003 fd2f 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 800142e:	2302      	movs	r3, #2
 8001430:	4632      	mov	r2, r6
 8001432:	4629      	mov	r1, r5
 8001434:	4620      	mov	r0, r4
 8001436:	f003 fd29 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff ff5c 	bl	80012f8 <NRF24_csn>
}
 8001440:	b002      	add	sp, #8
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	20000254 	.word	0x20000254

08001448 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	4605      	mov	r5, r0
 800144e:	460e      	mov	r6, r1
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff51 	bl	80012f8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001456:	a902      	add	r1, sp, #8
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1,2);
 800145e:	4c08      	ldr	r4, [pc, #32]	; (8001480 <NRF24_write_payload+0x38>)
 8001460:	2302      	movs	r3, #2
 8001462:	2201      	movs	r2, #1
 8001464:	4620      	mov	r0, r4
 8001466:	f003 fd11 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len,2);
 800146a:	2302      	movs	r3, #2
 800146c:	4632      	mov	r2, r6
 800146e:	4629      	mov	r1, r5
 8001470:	4620      	mov	r0, r4
 8001472:	f003 fd0b 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff3e 	bl	80012f8 <NRF24_csn>
}
 800147c:	b002      	add	sp, #8
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	20000254 	.word	0x20000254

08001484 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001484:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	20e1      	movs	r0, #225	; 0xe1
 800148a:	f7ff ffa3 	bl	80013d4 <NRF24_write_register>
}
 800148e:	bd08      	pop	{r3, pc}

08001490 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001490:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	20e2      	movs	r0, #226	; 0xe2
 8001496:	f7ff ff9d 	bl	80013d4 <NRF24_write_register>
}
 800149a:	bd08      	pop	{r3, pc}

0800149c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800149c:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800149e:	2007      	movs	r0, #7
 80014a0:	f7ff ff56 	bl	8001350 <NRF24_read_register>
	return statReg;
}
 80014a4:	bd08      	pop	{r3, pc}

080014a6 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014a6:	b508      	push	{r3, lr}
	NRF24_ce(0);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff ff3b 	bl	8001324 <NRF24_ce>
	NRF24_flush_tx();
 80014ae:	f7ff ffe9 	bl	8001484 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014b2:	f7ff ffed 	bl	8001490 <NRF24_flush_rx>
}
 80014b6:	bd08      	pop	{r3, pc}

080014b8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80014b8:	b510      	push	{r4, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	ac02      	add	r4, sp, #8
 80014be:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80014c2:	2205      	movs	r2, #5
 80014c4:	4621      	mov	r1, r4
 80014c6:	200a      	movs	r0, #10
 80014c8:	f7ff ff9e 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80014cc:	2205      	movs	r2, #5
 80014ce:	4621      	mov	r1, r4
 80014d0:	2010      	movs	r0, #16
 80014d2:	f7ff ff99 	bl	8001408 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <NRF24_openWritingPipe+0x34>)
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	2920      	cmp	r1, #32
 80014dc:	bf28      	it	cs
 80014de:	2120      	movcs	r1, #32
 80014e0:	2011      	movs	r0, #17
 80014e2:	f7ff ff77 	bl	80013d4 <NRF24_write_register>
}
 80014e6:	b002      	add	sp, #8
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	20000338 	.word	0x20000338

080014f0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80014f0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80014f2:	f001 010f 	and.w	r1, r1, #15
 80014f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	2004      	movs	r0, #4
 80014fe:	f7ff ff69 	bl	80013d4 <NRF24_write_register>
}
 8001502:	bd08      	pop	{r3, pc}

08001504 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001504:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001506:	4601      	mov	r1, r0
 8001508:	287f      	cmp	r0, #127	; 0x7f
 800150a:	bf28      	it	cs
 800150c:	217f      	movcs	r1, #127	; 0x7f
 800150e:	2005      	movs	r0, #5
 8001510:	f7ff ff60 	bl	80013d4 <NRF24_write_register>
}
 8001514:	bd08      	pop	{r3, pc}
	...

08001518 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8001518:	2820      	cmp	r0, #32
 800151a:	bf28      	it	cs
 800151c:	2020      	movcs	r0, #32
 800151e:	4b01      	ldr	r3, [pc, #4]	; (8001524 <NRF24_setPayloadSize+0xc>)
 8001520:	7018      	strb	r0, [r3, #0]
}
 8001522:	4770      	bx	lr
 8001524:	20000338 	.word	0x20000338

08001528 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001528:	4b01      	ldr	r3, [pc, #4]	; (8001530 <NRF24_getPayloadSize+0x8>)
 800152a:	7818      	ldrb	r0, [r3, #0]
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000338 	.word	0x20000338

08001534 <NRF24_read_payload>:
{
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	4606      	mov	r6, r0
 800153a:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800153c:	f7ff fff4 	bl	8001528 <NRF24_getPayloadSize>
 8001540:	4604      	mov	r4, r0
 8001542:	42a8      	cmp	r0, r5
 8001544:	d817      	bhi.n	8001576 <NRF24_read_payload+0x42>
	NRF24_csn(0);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fed6 	bl	80012f8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800154c:	a902      	add	r1, sp, #8
 800154e:	2361      	movs	r3, #97	; 0x61
 8001550:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,2);
 8001554:	4d09      	ldr	r5, [pc, #36]	; (800157c <NRF24_read_payload+0x48>)
 8001556:	2302      	movs	r3, #2
 8001558:	2201      	movs	r2, #1
 800155a:	4628      	mov	r0, r5
 800155c:	f003 fc96 	bl	8004e8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,2);
 8001560:	2302      	movs	r3, #2
 8001562:	b2a2      	uxth	r2, r4
 8001564:	4631      	mov	r1, r6
 8001566:	4628      	mov	r0, r5
 8001568:	f003 fee7 	bl	800533a <HAL_SPI_Receive>
	NRF24_csn(1);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fec3 	bl	80012f8 <NRF24_csn>
}
 8001572:	b002      	add	sp, #8
 8001574:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001576:	462c      	mov	r4, r5
 8001578:	e7e5      	b.n	8001546 <NRF24_read_payload+0x12>
 800157a:	bf00      	nop
 800157c:	20000254 	.word	0x20000254

08001580 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001580:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001582:	2060      	movs	r0, #96	; 0x60
 8001584:	f7ff fee4 	bl	8001350 <NRF24_read_register>
}
 8001588:	bd08      	pop	{r3, pc}

0800158a <NRF24_read>:
{
 800158a:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800158c:	f7ff ffd2 	bl	8001534 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001590:	2017      	movs	r0, #23
 8001592:	f7ff fedd 	bl	8001350 <NRF24_read_register>
 8001596:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 800159a:	f7ff ff79 	bl	8001490 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800159e:	f7ff ffef 	bl	8001580 <NRF24_getDynamicPayloadSize>
}
 80015a2:	4620      	mov	r0, r4
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80015a6:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015a8:	201d      	movs	r0, #29
 80015aa:	f7ff fed1 	bl	8001350 <NRF24_read_register>
 80015ae:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80015b2:	201d      	movs	r0, #29
 80015b4:	f7ff ff0e 	bl	80013d4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f7ff ff0a 	bl	80013d4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80015c0:	bd08      	pop	{r3, pc}

080015c2 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80015c2:	b508      	push	{r3, lr}
	if ( enable )
 80015c4:	b920      	cbnz	r0, 80015d0 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff ff03 	bl	80013d4 <NRF24_write_register>
}
 80015ce:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80015d0:	213f      	movs	r1, #63	; 0x3f
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fefe 	bl	80013d4 <NRF24_write_register>
 80015d8:	e7f9      	b.n	80015ce <NRF24_setAutoAck+0xc>

080015da <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80015da:	b510      	push	{r4, lr}
 80015dc:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80015de:	2006      	movs	r0, #6
 80015e0:	f7ff feb6 	bl	8001350 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015e4:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80015e8:	2c03      	cmp	r4, #3
 80015ea:	d009      	beq.n	8001600 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80015ec:	2c02      	cmp	r4, #2
 80015ee:	d00d      	beq.n	800160c <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80015f0:	2c01      	cmp	r4, #1
 80015f2:	d00e      	beq.n	8001612 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80015f4:	b134      	cbz	r4, 8001604 <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80015f6:	2c04      	cmp	r4, #4
 80015f8:	d104      	bne.n	8001604 <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015fa:	f041 0106 	orr.w	r1, r1, #6
 80015fe:	e001      	b.n	8001604 <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001600:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001604:	2006      	movs	r0, #6
 8001606:	f7ff fee5 	bl	80013d4 <NRF24_write_register>
}
 800160a:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 800160c:	f041 0104 	orr.w	r1, r1, #4
 8001610:	e7f8      	b.n	8001604 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 8001612:	f041 0102 	orr.w	r1, r1, #2
 8001616:	e7f5      	b.n	8001604 <NRF24_setPALevel+0x2a>

08001618 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800161c:	2006      	movs	r0, #6
 800161e:	f7ff fe97 	bl	8001350 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001622:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 8001626:	2d02      	cmp	r5, #2
 8001628:	d00c      	beq.n	8001644 <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 800162a:	2d01      	cmp	r5, #1
 800162c:	d00d      	beq.n	800164a <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 800162e:	4621      	mov	r1, r4
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fecf 	bl	80013d4 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001636:	2006      	movs	r0, #6
 8001638:	f7ff fe8a 	bl	8001350 <NRF24_read_register>
 800163c:	42a0      	cmp	r0, r4
 800163e:	d007      	beq.n	8001650 <NRF24_setDataRate+0x38>
	bool result = false;
 8001640:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 8001644:	f044 0420 	orr.w	r4, r4, #32
 8001648:	e7f1      	b.n	800162e <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 800164a:	f044 0408 	orr.w	r4, r4, #8
 800164e:	e7ee      	b.n	800162e <NRF24_setDataRate+0x16>
		result = true;
 8001650:	2001      	movs	r0, #1
 8001652:	e7f6      	b.n	8001642 <NRF24_setDataRate+0x2a>

08001654 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001654:	b510      	push	{r4, lr}
 8001656:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fe79 	bl	8001350 <NRF24_read_register>
 800165e:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001662:	b11c      	cbz	r4, 800166c <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8001664:	2c01      	cmp	r4, #1
 8001666:	d005      	beq.n	8001674 <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8001668:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff feb1 	bl	80013d4 <NRF24_write_register>
}
 8001672:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 8001674:	f041 0108 	orr.w	r1, r1, #8
 8001678:	e7f8      	b.n	800166c <NRF24_setCRCLength+0x18>

0800167a <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800167a:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fe67 	bl	8001350 <NRF24_read_register>
 8001682:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fea4 	bl	80013d4 <NRF24_write_register>
}
 800168c:	bd08      	pop	{r3, pc}

0800168e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800168e:	b570      	push	{r4, r5, r6, lr}
 8001690:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 8001692:	f7ff ff03 	bl	800149c <NRF24_get_status>
 8001696:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2501      	movne	r5, #1
 80016a0:	2500      	moveq	r5, #0

	if (result)
 80016a2:	d00b      	beq.n	80016bc <NRF24_availablePipe+0x2e>
 80016a4:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80016a6:	b116      	cbz	r6, 80016ae <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80016a8:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80016ac:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	2007      	movs	r0, #7
 80016b2:	f7ff fe8f 	bl	80013d4 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80016b6:	f014 0f20 	tst.w	r4, #32
 80016ba:	d101      	bne.n	80016c0 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80016bc:	4628      	mov	r0, r5
 80016be:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80016c0:	2120      	movs	r1, #32
 80016c2:	2007      	movs	r0, #7
 80016c4:	f7ff fe86 	bl	80013d4 <NRF24_write_register>
 80016c8:	e7f8      	b.n	80016bc <NRF24_availablePipe+0x2e>

080016ca <NRF24_available>:
{
 80016ca:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff ffde 	bl	800168e <NRF24_availablePipe>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80016d4:	b538      	push	{r3, r4, r5, lr}
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
	// Transmitter power-up
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fe38 	bl	8001350 <NRF24_read_register>
 80016e0:	f020 0101 	bic.w	r1, r0, #1
 80016e4:	f041 0102 	orr.w	r1, r1, #2
 80016e8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fe71 	bl	80013d4 <NRF24_write_register>
	NRF24_DelayMicroSeconds(150);
 80016f2:	2096      	movs	r0, #150	; 0x96
 80016f4:	f7ff fdfc 	bl	80012f0 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 80016f8:	4629      	mov	r1, r5
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fea4 	bl	8001448 <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fe0f 	bl	8001324 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001706:	200f      	movs	r0, #15
 8001708:	f7ff fdf2 	bl	80012f0 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fe09 	bl	8001324 <NRF24_ce>
}
 8001712:	bd38      	pop	{r3, r4, r5, pc}

08001714 <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	460f      	mov	r7, r1
 800171a:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 800171c:	f7ff febe 	bl	800149c <NRF24_get_status>
 8001720:	4604      	mov	r4, r0
	*tx_ok = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001726:	2170      	movs	r1, #112	; 0x70
 8001728:	2007      	movs	r0, #7
 800172a:	f7ff fe53 	bl	80013d4 <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 800172e:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8001732:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8001734:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8001738:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 800173a:	f3c4 1480 	ubfx	r4, r4, #6, #1
 800173e:	7034      	strb	r4, [r6, #0]
}
 8001740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001742 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001742:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001744:	2170      	movs	r1, #112	; 0x70
 8001746:	2007      	movs	r0, #7
 8001748:	f7ff fe44 	bl	80013d4 <NRF24_write_register>
}
 800174c:	bd08      	pop	{r3, pc}
	...

08001750 <NRF24_write>:
{
 8001750:	b530      	push	{r4, r5, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
	NRF24_resetStatus();
 8001758:	f7ff fff3 	bl	8001742 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800175c:	4629      	mov	r1, r5
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ffb8 	bl	80016d4 <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 8001764:	f000 fc86 	bl	8002074 <HAL_GetTick>
 8001768:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800176a:	2201      	movs	r2, #1
 800176c:	f10d 0107 	add.w	r1, sp, #7
 8001770:	2008      	movs	r0, #8
 8001772:	f7ff fe0f 	bl	8001394 <NRF24_read_registerN>
		status = NRF24_get_status();
 8001776:	f7ff fe91 	bl	800149c <NRF24_get_status>
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800177a:	f010 0f30 	tst.w	r0, #48	; 0x30
 800177e:	d104      	bne.n	800178a <NRF24_write+0x3a>
 8001780:	f000 fc78 	bl	8002074 <HAL_GetTick>
 8001784:	1b00      	subs	r0, r0, r4
 8001786:	2809      	cmp	r0, #9
 8001788:	d9ef      	bls.n	800176a <NRF24_write+0x1a>
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800178a:	4c0c      	ldr	r4, [pc, #48]	; (80017bc <NRF24_write+0x6c>)
 800178c:	4622      	mov	r2, r4
 800178e:	f10d 0105 	add.w	r1, sp, #5
 8001792:	f10d 0006 	add.w	r0, sp, #6
 8001796:	f7ff ffbd 	bl	8001714 <NRF24_whatHappened>
	retStatus = tx_ok;
 800179a:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 800179e:	7823      	ldrb	r3, [r4, #0]
 80017a0:	b933      	cbnz	r3, 80017b0 <NRF24_write+0x60>
	NRF24_available();
 80017a2:	f7ff ff92 	bl	80016ca <NRF24_available>
	NRF24_flush_tx();
 80017a6:	f7ff fe6d 	bl	8001484 <NRF24_flush_tx>
}
 80017aa:	4628      	mov	r0, r5
 80017ac:	b003      	add	sp, #12
 80017ae:	bd30      	pop	{r4, r5, pc}
		ack_payload_length = NRF24_getDynamicPayloadSize();
 80017b0:	f7ff fee6 	bl	8001580 <NRF24_getDynamicPayloadSize>
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <NRF24_write+0x70>)
 80017b6:	7018      	strb	r0, [r3, #0]
 80017b8:	e7f3      	b.n	80017a2 <NRF24_write+0x52>
 80017ba:	bf00      	nop
 80017bc:	20000248 	.word	0x20000248
 80017c0:	20000249 	.word	0x20000249

080017c4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80017c4:	b500      	push	{lr}
 80017c6:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fd95 	bl	80012f8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80017ce:	2350      	movs	r3, #80	; 0x50
 80017d0:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80017d4:	2373      	movs	r3, #115	; 0x73
 80017d6:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80017da:	2302      	movs	r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	a901      	add	r1, sp, #4
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <NRF24_ACTIVATE_cmd+0x30>)
 80017e2:	f003 fb53 	bl	8004e8c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fd86 	bl	80012f8 <NRF24_csn>
}
 80017ec:	b003      	add	sp, #12
 80017ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80017f2:	bf00      	nop
 80017f4:	20000254 	.word	0x20000254

080017f8 <NRF24_enableAckPayload>:
{
 80017f8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80017fa:	201d      	movs	r0, #29
 80017fc:	f7ff fda8 	bl	8001350 <NRF24_read_register>
 8001800:	f040 0106 	orr.w	r1, r0, #6
 8001804:	b2c9      	uxtb	r1, r1
 8001806:	201d      	movs	r0, #29
 8001808:	f7ff fde4 	bl	80013d4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800180c:	201d      	movs	r0, #29
 800180e:	f7ff fd9f 	bl	8001350 <NRF24_read_register>
 8001812:	b148      	cbz	r0, 8001828 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001814:	201c      	movs	r0, #28
 8001816:	f7ff fd9b 	bl	8001350 <NRF24_read_register>
 800181a:	f040 0103 	orr.w	r1, r0, #3
 800181e:	b2c9      	uxtb	r1, r1
 8001820:	201c      	movs	r0, #28
 8001822:	f7ff fdd7 	bl	80013d4 <NRF24_write_register>
}
 8001826:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8001828:	f7ff ffcc 	bl	80017c4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800182c:	201d      	movs	r0, #29
 800182e:	f7ff fd8f 	bl	8001350 <NRF24_read_register>
 8001832:	f040 0106 	orr.w	r1, r0, #6
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	201d      	movs	r0, #29
 800183a:	f7ff fdcb 	bl	80013d4 <NRF24_write_register>
 800183e:	e7e9      	b.n	8001814 <NRF24_enableAckPayload+0x1c>

08001840 <NRF24_begin>:
{
 8001840:	b082      	sub	sp, #8
 8001842:	b570      	push	{r4, r5, r6, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	4606      	mov	r6, r0
 8001848:	460d      	mov	r5, r1
 800184a:	4614      	mov	r4, r2
 800184c:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 800184e:	2264      	movs	r2, #100	; 0x64
 8001850:	4961      	ldr	r1, [pc, #388]	; (80019d8 <NRF24_begin+0x198>)
 8001852:	4862      	ldr	r0, [pc, #392]	; (80019dc <NRF24_begin+0x19c>)
 8001854:	f008 fa98 	bl	8009d88 <memcpy>
	nrf24_PORT = nrf24PORT;
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <NRF24_begin+0x1a0>)
 800185a:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <NRF24_begin+0x1a4>)
 800185e:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <NRF24_begin+0x1a8>)
 8001862:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fd47 	bl	80012f8 <NRF24_csn>
	NRF24_ce(0);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fd5a 	bl	8001324 <NRF24_ce>
	HAL_Delay(5);
 8001870:	2005      	movs	r0, #5
 8001872:	f000 fc05 	bl	8002080 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001876:	2108      	movs	r1, #8
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fdab 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800187e:	213f      	movs	r1, #63	; 0x3f
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff fda7 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001886:	2103      	movs	r1, #3
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fda3 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800188e:	2103      	movs	r1, #3
 8001890:	4608      	mov	r0, r1
 8001892:	f7ff fd9f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001896:	2103      	movs	r1, #3
 8001898:	2004      	movs	r0, #4
 800189a:	f7ff fd9b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800189e:	2102      	movs	r1, #2
 80018a0:	2005      	movs	r0, #5
 80018a2:	f7ff fd97 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80018a6:	210f      	movs	r1, #15
 80018a8:	2006      	movs	r0, #6
 80018aa:	f7ff fd93 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80018ae:	210e      	movs	r1, #14
 80018b0:	2007      	movs	r0, #7
 80018b2:	f7ff fd8f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2008      	movs	r0, #8
 80018ba:	f7ff fd8b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80018be:	2100      	movs	r1, #0
 80018c0:	2009      	movs	r0, #9
 80018c2:	f7ff fd87 	bl	80013d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80018c6:	24e7      	movs	r4, #231	; 0xe7
 80018c8:	f88d 4004 	strb.w	r4, [sp, #4]
 80018cc:	f88d 4003 	strb.w	r4, [sp, #3]
 80018d0:	f88d 4002 	strb.w	r4, [sp, #2]
 80018d4:	f88d 4001 	strb.w	r4, [sp, #1]
 80018d8:	ad02      	add	r5, sp, #8
 80018da:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80018de:	2205      	movs	r2, #5
 80018e0:	4629      	mov	r1, r5
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff fd90 	bl	8001408 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80018e8:	23c2      	movs	r3, #194	; 0xc2
 80018ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80018ee:	f88d 3003 	strb.w	r3, [sp, #3]
 80018f2:	f88d 3002 	strb.w	r3, [sp, #2]
 80018f6:	f88d 3001 	strb.w	r3, [sp, #1]
 80018fa:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80018fe:	2205      	movs	r2, #5
 8001900:	4629      	mov	r1, r5
 8001902:	200b      	movs	r0, #11
 8001904:	f7ff fd80 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001908:	21c3      	movs	r1, #195	; 0xc3
 800190a:	200c      	movs	r0, #12
 800190c:	f7ff fd62 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001910:	21c4      	movs	r1, #196	; 0xc4
 8001912:	200d      	movs	r0, #13
 8001914:	f7ff fd5e 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001918:	21c5      	movs	r1, #197	; 0xc5
 800191a:	200e      	movs	r0, #14
 800191c:	f7ff fd5a 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001920:	21c6      	movs	r1, #198	; 0xc6
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fd56 	bl	80013d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001928:	f88d 4004 	strb.w	r4, [sp, #4]
 800192c:	f88d 4003 	strb.w	r4, [sp, #3]
 8001930:	f88d 4002 	strb.w	r4, [sp, #2]
 8001934:	f88d 4001 	strb.w	r4, [sp, #1]
 8001938:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800193c:	2205      	movs	r2, #5
 800193e:	4629      	mov	r1, r5
 8001940:	2010      	movs	r0, #16
 8001942:	f7ff fd61 	bl	8001408 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	2011      	movs	r0, #17
 800194a:	f7ff fd43 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800194e:	2100      	movs	r1, #0
 8001950:	2012      	movs	r0, #18
 8001952:	f7ff fd3f 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	2013      	movs	r0, #19
 800195a:	f7ff fd3b 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800195e:	2100      	movs	r1, #0
 8001960:	2014      	movs	r0, #20
 8001962:	f7ff fd37 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001966:	2100      	movs	r1, #0
 8001968:	2015      	movs	r0, #21
 800196a:	f7ff fd33 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	2016      	movs	r0, #22
 8001972:	f7ff fd2f 	bl	80013d4 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001976:	f7ff ff25 	bl	80017c4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	201c      	movs	r0, #28
 800197e:	f7ff fd29 	bl	80013d4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	201d      	movs	r0, #29
 8001986:	f7ff fd25 	bl	80013d4 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 800198a:	210f      	movs	r1, #15
 800198c:	4608      	mov	r0, r1
 800198e:	f7ff fdaf 	bl	80014f0 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8001992:	2002      	movs	r0, #2
 8001994:	f7ff fe21 	bl	80015da <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fe3d 	bl	8001618 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fe58 	bl	8001654 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80019a4:	f7ff fdff 	bl	80015a6 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80019a8:	2020      	movs	r0, #32
 80019aa:	f7ff fdb5 	bl	8001518 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fe07 	bl	80015c2 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80019b4:	f7ff ff20 	bl	80017f8 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80019b8:	f7ff fec3 	bl	8001742 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80019bc:	204c      	movs	r0, #76	; 0x4c
 80019be:	f7ff fda1 	bl	8001504 <NRF24_setChannel>
	NRF24_flush_tx();
 80019c2:	f7ff fd5f 	bl	8001484 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019c6:	f7ff fd63 	bl	8001490 <NRF24_flush_rx>
	NRF24_powerDown();
 80019ca:	f7ff fe56 	bl	800167a <NRF24_powerDown>
}
 80019ce:	b002      	add	sp, #8
 80019d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80019d4:	b002      	add	sp, #8
 80019d6:	4770      	bx	lr
 80019d8:	200047c4 	.word	0x200047c4
 80019dc:	20000254 	.word	0x20000254
 80019e0:	20000250 	.word	0x20000250
 80019e4:	2000024c 	.word	0x2000024c
 80019e8:	2000024a 	.word	0x2000024a

080019ec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019ec:	b084      	sub	sp, #16
 80019ee:	b508      	push	{r3, lr}
 80019f0:	f10d 0c08 	add.w	ip, sp, #8
 80019f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	4661      	mov	r1, ip
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <nrf24_DebugUART_Init+0x20>)
 80019fe:	f008 f9c3 	bl	8009d88 <memcpy>
}
 8001a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200002b8 	.word	0x200002b8

08001a10 <initLCD>:
#include <math.h>

//Touch screen variables
TS_StateTypeDef ts;
bool cleared = 0;
void initLCD(struct GPS_str GPS) {
 8001a10:	b084      	sub	sp, #16
 8001a12:	b500      	push	{lr}
 8001a14:	b083      	sub	sp, #12
 8001a16:	f10d 0c10 	add.w	ip, sp, #16
 8001a1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8001a1e:	f005 fb21 	bl	8007064 <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <initLCD+0x70>)
 8001a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9b01      	ldr	r3, [sp, #4]

	BSP_TS_Init(480, 272);
 8001a36:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a3a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a3e:	f005 fb51 	bl	80070e4 <BSP_TS_Init>

	BSP_LCD_Init();
 8001a42:	f005 f9ad 	bl	8006da0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001a46:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f004 fda8 	bl	80065a0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8001a50:	f005 f8d8 	bl	8006c04 <BSP_LCD_DisplayOn>

	BSP_LCD_SelectLayer(0);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f004 fde3 	bl	8006620 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001a5a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a5e:	f004 fe0d 	bl	800667c <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <initLCD+0x74>)
 8001a64:	f004 fde2 	bl	800662c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 40);
 8001a68:	2328      	movs	r3, #40	; 0x28
 8001a6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4608      	mov	r0, r1
 8001a72:	f005 f813 	bl	8006a9c <BSP_LCD_FillRect>
	GPS.fix_quality = 0;
	GPS.sattelite_no = 0;



}
 8001a76:	b003      	add	sp, #12
 8001a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a7c:	b004      	add	sp, #16
 8001a7e:	4770      	bx	lr
 8001a80:	40023800 	.word	0x40023800
 8001a84:	ff000080 	.word	0xff000080

08001a88 <n_tu>:
}

/** Number on countu **/

int n_tu(int number, int count) {
	int result = 1;
 8001a88:	2301      	movs	r3, #1
	while (count-- > 0)
 8001a8a:	e002      	b.n	8001a92 <n_tu+0xa>
		result *= number;
 8001a8c:	fb00 f303 	mul.w	r3, r0, r3
	while (count-- > 0)
 8001a90:	4611      	mov	r1, r2
 8001a92:	1e4a      	subs	r2, r1, #1
 8001a94:	2900      	cmp	r1, #0
 8001a96:	dcf9      	bgt.n	8001a8c <n_tu+0x4>

	return result;
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4770      	bx	lr

08001a9c <float_to_string>:
bool float_to_string(float f, char r[]) {
 8001a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa0:	ed2d 8b02 	vpush	{d8}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	9003      	str	r0, [sp, #12]
	if(isnan(f)){
 8001aa8:	eeb4 0a40 	vcmp.f32	s0, s0
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	f180 80bb 	bvs.w	8001c2a <float_to_string+0x18e>
 8001ab4:	eef0 8a40 	vmov.f32	s17, s0
	if (f < 0) {
 8001ab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	d40e      	bmi.n	8001ae0 <float_to_string+0x44>
	sign = -1;   // -1 == positive number
 8001ac2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001ac6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	number = f;
 8001aca:	ee18 0a90 	vmov	r0, s17
 8001ace:	f7ff fa71 	bl	8000fb4 <__aeabi_f2lz>
	number2 = f;
 8001ad2:	eeb0 8a68 	vmov.f32	s16, s17
	length2 = 0; // Size of tenth
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
	while ((number2 - (float) number) != 0.0
 8001ade:	e019      	b.n	8001b14 <float_to_string+0x78>
		f *= -1;
 8001ae0:	eef1 8a40 	vneg.f32	s17, s0
		sign = '-';
 8001ae4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8001ae8:	f04f 0b00 	mov.w	fp, #0
 8001aec:	e7ed      	b.n	8001aca <float_to_string+0x2e>
		number2 = f * (n_tu(10.0, length2 + 1));
 8001aee:	f108 0101 	add.w	r1, r8, #1
 8001af2:	200a      	movs	r0, #10
 8001af4:	f7ff ffc8 	bl	8001a88 <n_tu>
 8001af8:	ee07 0a90 	vmov	s15, r0
 8001afc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b00:	ee28 8a28 	vmul.f32	s16, s16, s17
		number = number2;
 8001b04:	ee18 0a10 	vmov	r0, s16
 8001b08:	f7ff fa54 	bl	8000fb4 <__aeabi_f2lz>
		length2++;
 8001b0c:	f118 0801 	adds.w	r8, r8, #1
 8001b10:	f149 0900 	adc.w	r9, r9, #0
	while ((number2 - (float) number) != 0.0
 8001b14:	f7ff f9a8 	bl	8000e68 <__aeabi_l2f>
 8001b18:	ee07 0a90 	vmov	s15, r0
 8001b1c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001b20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d004      	beq.n	8001b34 <float_to_string+0x98>
			&& !((number2 - (float) number) < 0.0)) {
 8001b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d5dc      	bpl.n	8001aee <float_to_string+0x52>
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b38:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	bfd4      	ite	le
 8001b42:	2401      	movle	r4, #1
 8001b44:	2400      	movgt	r4, #0
 8001b46:	b2e4      	uxtb	r4, r4
 8001b48:	2500      	movs	r5, #0
 8001b4a:	e006      	b.n	8001b5a <float_to_string+0xbe>
		f /= 10;
 8001b4c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001b50:	eec8 8aa7 	vdiv.f32	s17, s17, s15
	for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001b54:	3401      	adds	r4, #1
 8001b56:	f145 0500 	adc.w	r5, r5, #0
 8001b5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dcf1      	bgt.n	8001b4c <float_to_string+0xb0>
	length = length + 1 + length2;
 8001b68:	1c66      	adds	r6, r4, #1
 8001b6a:	f145 0700 	adc.w	r7, r5, #0
 8001b6e:	eb18 0806 	adds.w	r8, r8, r6
 8001b72:	eb49 0907 	adc.w	r9, r9, r7
	number = number2;
 8001b76:	ee18 0a10 	vmov	r0, s16
 8001b7a:	f7ff fa1b 	bl	8000fb4 <__aeabi_f2lz>
 8001b7e:	e9cd 0100 	strd	r0, r1, [sp]
	if (sign == '-') {
 8001b82:	f1bb 0f00 	cmp.w	fp, #0
 8001b86:	bf08      	it	eq
 8001b88:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001b8c:	d002      	beq.n	8001b94 <float_to_string+0xf8>
	for (i = length; i >= 0; i--) {
 8001b8e:	4646      	mov	r6, r8
 8001b90:	464f      	mov	r7, r9
 8001b92:	e026      	b.n	8001be2 <float_to_string+0x146>
		length++;
 8001b94:	f118 0801 	adds.w	r8, r8, #1
 8001b98:	f149 0900 	adc.w	r9, r9, #0
		position++;
 8001b9c:	4634      	mov	r4, r6
 8001b9e:	463d      	mov	r5, r7
 8001ba0:	e7f5      	b.n	8001b8e <float_to_string+0xf2>
			r[i] = '\0';
 8001ba2:	9b03      	ldr	r3, [sp, #12]
 8001ba4:	4433      	add	r3, r6
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e016      	b.n	8001bda <float_to_string+0x13e>
			r[i] = '.';
 8001bac:	9b03      	ldr	r3, [sp, #12]
 8001bae:	4433      	add	r3, r6
 8001bb0:	222e      	movs	r2, #46	; 0x2e
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e011      	b.n	8001bda <float_to_string+0x13e>
			r[i] = (number % 10) + '0';
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bbe:	f7ff f991 	bl	8000ee4 <__aeabi_ldivmod>
 8001bc2:	9b03      	ldr	r3, [sp, #12]
 8001bc4:	4433      	add	r3, r6
 8001bc6:	3230      	adds	r2, #48	; 0x30
 8001bc8:	701a      	strb	r2, [r3, #0]
			number /= 10;
 8001bca:	220a      	movs	r2, #10
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bd2:	f7ff f987 	bl	8000ee4 <__aeabi_ldivmod>
 8001bd6:	e9cd 0100 	strd	r0, r1, [sp]
	for (i = length; i >= 0; i--) {
 8001bda:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8001bde:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
 8001be2:	2e00      	cmp	r6, #0
 8001be4:	f177 0300 	sbcs.w	r3, r7, #0
 8001be8:	db19      	blt.n	8001c1e <float_to_string+0x182>
		if (i == (length))
 8001bea:	45b9      	cmp	r9, r7
 8001bec:	bf08      	it	eq
 8001bee:	45b0      	cmpeq	r8, r6
 8001bf0:	d0d7      	beq.n	8001ba2 <float_to_string+0x106>
		else if (i == (position))
 8001bf2:	42af      	cmp	r7, r5
 8001bf4:	bf08      	it	eq
 8001bf6:	42a6      	cmpeq	r6, r4
 8001bf8:	d0d8      	beq.n	8001bac <float_to_string+0x110>
		else if (sign == '-' && i == 0)
 8001bfa:	f1bb 0f00 	cmp.w	fp, #0
 8001bfe:	bf06      	itte	eq
 8001c00:	f1ba 0f2d 	cmpeq.w	sl, #45	; 0x2d
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	ea56 0207 	orrs.w	r2, r6, r7
 8001c0c:	bf18      	it	ne
 8001c0e:	2300      	movne	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0d0      	beq.n	8001bb6 <float_to_string+0x11a>
			r[i] = '-';
 8001c14:	9b03      	ldr	r3, [sp, #12]
 8001c16:	4433      	add	r3, r6
 8001c18:	222d      	movs	r2, #45	; 0x2d
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e7dd      	b.n	8001bda <float_to_string+0x13e>
	return 1;
 8001c1e:	2001      	movs	r0, #1
}
 8001c20:	b005      	add	sp, #20
 8001c22:	ecbd 8b02 	vpop	{d8}
 8001c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e7f8      	b.n	8001c20 <float_to_string+0x184>
	...

08001c30 <drawMainScreen>:
void drawMainScreen(struct GPS_str GPS, struct IMU_str IMU, struct Misc_str Misc) {
 8001c30:	b084      	sub	sp, #16
 8001c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c34:	ac06      	add	r4, sp, #24
 8001c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001c3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c3e:	f004 fd01 	bl	8006644 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c46:	f004 fcf1 	bl	800662c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&FontAvenir12);
 8001c4a:	48bf      	ldr	r0, [pc, #764]	; (8001f48 <drawMainScreen+0x318>)
 8001c4c:	f004 fd08 	bl	8006660 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30, 50, (uint8_t *) "GPS", LEFT_MODE);
 8001c50:	2303      	movs	r3, #3
 8001c52:	4abe      	ldr	r2, [pc, #760]	; (8001f4c <drawMainScreen+0x31c>)
 8001c54:	2132      	movs	r1, #50	; 0x32
 8001c56:	201e      	movs	r0, #30
 8001c58:	f004 fe24 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 80, (uint8_t *) "LONG.", LEFT_MODE);
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	4abc      	ldr	r2, [pc, #752]	; (8001f50 <drawMainScreen+0x320>)
 8001c60:	2150      	movs	r1, #80	; 0x50
 8001c62:	200e      	movs	r0, #14
 8001c64:	f004 fe1e 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 100, (uint8_t *) "LAT.", LEFT_MODE);
 8001c68:	2303      	movs	r3, #3
 8001c6a:	4aba      	ldr	r2, [pc, #744]	; (8001f54 <drawMainScreen+0x324>)
 8001c6c:	2164      	movs	r1, #100	; 0x64
 8001c6e:	200e      	movs	r0, #14
 8001c70:	f004 fe18 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 140, (uint8_t *) "SPEED.", LEFT_MODE);
 8001c74:	2303      	movs	r3, #3
 8001c76:	4ab8      	ldr	r2, [pc, #736]	; (8001f58 <drawMainScreen+0x328>)
 8001c78:	218c      	movs	r1, #140	; 0x8c
 8001c7a:	200e      	movs	r0, #14
 8001c7c:	f004 fe12 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 120, (uint8_t *) "ALT.", LEFT_MODE);
 8001c80:	2303      	movs	r3, #3
 8001c82:	4ab6      	ldr	r2, [pc, #728]	; (8001f5c <drawMainScreen+0x32c>)
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	200e      	movs	r0, #14
 8001c88:	f004 fe0c 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 160, (uint8_t *) "SATS.", LEFT_MODE);
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	4ab4      	ldr	r2, [pc, #720]	; (8001f60 <drawMainScreen+0x330>)
 8001c90:	21a0      	movs	r1, #160	; 0xa0
 8001c92:	200e      	movs	r0, #14
 8001c94:	f004 fe06 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 180, (uint8_t *) "FIX", LEFT_MODE);
 8001c98:	2303      	movs	r3, #3
 8001c9a:	4ab2      	ldr	r2, [pc, #712]	; (8001f64 <drawMainScreen+0x334>)
 8001c9c:	21b4      	movs	r1, #180	; 0xb4
 8001c9e:	200e      	movs	r0, #14
 8001ca0:	f004 fe00 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 240, (uint8_t *) "THRT", LEFT_MODE);
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	4ab0      	ldr	r2, [pc, #704]	; (8001f68 <drawMainScreen+0x338>)
 8001ca8:	21f0      	movs	r1, #240	; 0xf0
 8001caa:	200e      	movs	r0, #14
 8001cac:	f004 fdfa 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(100, 240, (uint8_t *) throttle_str, LEFT_MODE);
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	4aae      	ldr	r2, [pc, #696]	; (8001f6c <drawMainScreen+0x33c>)
 8001cb4:	21f0      	movs	r1, #240	; 0xf0
 8001cb6:	2064      	movs	r0, #100	; 0x64
 8001cb8:	f004 fdf4 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Longitude, long_str);
 8001cbc:	4cac      	ldr	r4, [pc, #688]	; (8001f70 <drawMainScreen+0x340>)
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	ed9d 0a08 	vldr	s0, [sp, #32]
 8001cc4:	f7ff feea 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(100, 80, (uint8_t *) long_str, LEFT_MODE);
 8001cc8:	2303      	movs	r3, #3
 8001cca:	4622      	mov	r2, r4
 8001ccc:	2150      	movs	r1, #80	; 0x50
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f004 fde8 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Latitude, latt_str);
 8001cd4:	4ca7      	ldr	r4, [pc, #668]	; (8001f74 <drawMainScreen+0x344>)
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8001cdc:	f7ff fede 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(100, 100, (uint8_t *) latt_str, LEFT_MODE);
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	2164      	movs	r1, #100	; 0x64
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	f004 fddc 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Speed, speed_str);
 8001cec:	4ca2      	ldr	r4, [pc, #648]	; (8001f78 <drawMainScreen+0x348>)
 8001cee:	4620      	mov	r0, r4
 8001cf0:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8001cf4:	f7ff fed2 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(100, 140, (uint8_t *) speed_str, LEFT_MODE);
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	218c      	movs	r1, #140	; 0x8c
 8001cfe:	2064      	movs	r0, #100	; 0x64
 8001d00:	f004 fdd0 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.Altitude, alt_str);
 8001d04:	4c9d      	ldr	r4, [pc, #628]	; (8001f7c <drawMainScreen+0x34c>)
 8001d06:	4620      	mov	r0, r4
 8001d08:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8001d0c:	f7ff fec6 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(100, 120, (uint8_t *) alt_str, LEFT_MODE);
 8001d10:	2303      	movs	r3, #3
 8001d12:	4622      	mov	r2, r4
 8001d14:	2178      	movs	r1, #120	; 0x78
 8001d16:	2064      	movs	r0, #100	; 0x64
 8001d18:	f004 fdc4 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	snprintf(sattelite_no_str, sizeof(sattelite_no_str), "%d", GPS.sattelite_no);
 8001d1c:	4c98      	ldr	r4, [pc, #608]	; (8001f80 <drawMainScreen+0x350>)
 8001d1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <drawMainScreen+0x354>)
 8001d24:	2105      	movs	r1, #5
 8001d26:	4620      	mov	r0, r4
 8001d28:	f008 fe86 	bl	800aa38 <sniprintf>
	BSP_LCD_DisplayStringAt(100, 160, (uint8_t *) sattelite_no_str, LEFT_MODE);
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4622      	mov	r2, r4
 8001d30:	21a0      	movs	r1, #160	; 0xa0
 8001d32:	2064      	movs	r0, #100	; 0x64
 8001d34:	f004 fdb6 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(GPS.fix_quality, fix_str);
 8001d38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001d3c:	ee00 3a10 	vmov	s0, r3
 8001d40:	4c91      	ldr	r4, [pc, #580]	; (8001f88 <drawMainScreen+0x358>)
 8001d42:	4620      	mov	r0, r4
 8001d44:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001d48:	f7ff fea8 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(100, 180, (uint8_t *) fix_str, LEFT_MODE);
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	4622      	mov	r2, r4
 8001d50:	21b4      	movs	r1, #180	; 0xb4
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f004 fda6 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8001d58:	488c      	ldr	r0, [pc, #560]	; (8001f8c <drawMainScreen+0x35c>)
 8001d5a:	f004 fc73 	bl	8006644 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(80, 10, (uint8_t *) "QUAD", RIGHT_MODE);
 8001d5e:	2302      	movs	r3, #2
 8001d60:	4a8b      	ldr	r2, [pc, #556]	; (8001f90 <drawMainScreen+0x360>)
 8001d62:	210a      	movs	r1, #10
 8001d64:	2050      	movs	r0, #80	; 0x50
 8001d66:	f004 fd9d 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 10, (uint8_t *) "%", RIGHT_MODE);
 8001d6a:	4c8a      	ldr	r4, [pc, #552]	; (8001f94 <drawMainScreen+0x364>)
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	4622      	mov	r2, r4
 8001d70:	210a      	movs	r1, #10
 8001d72:	201e      	movs	r0, #30
 8001d74:	f004 fd96 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(14, 10, (uint8_t *) "TX", LEFT_MODE);
 8001d78:	2303      	movs	r3, #3
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <drawMainScreen+0x368>)
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	200e      	movs	r0, #14
 8001d80:	f004 fd90 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(70, 10, (uint8_t *) "%", LEFT_MODE);
 8001d84:	2303      	movs	r3, #3
 8001d86:	4622      	mov	r2, r4
 8001d88:	210a      	movs	r1, #10
 8001d8a:	2046      	movs	r0, #70	; 0x46
 8001d8c:	f004 fd8a 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.batteryLevel, quad_battery_str);
 8001d90:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001d94:	ee00 3a10 	vmov	s0, r3
 8001d98:	4c80      	ldr	r4, [pc, #512]	; (8001f9c <drawMainScreen+0x36c>)
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001da0:	f7ff fe7c 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(45, 10, (uint8_t *) quad_battery_str, RIGHT_MODE);
 8001da4:	2302      	movs	r3, #2
 8001da6:	4622      	mov	r2, r4
 8001da8:	210a      	movs	r1, #10
 8001daa:	202d      	movs	r0, #45	; 0x2d
 8001dac:	f004 fd7a 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	itoa(69, tx_battery_str, 10);
 8001db0:	4c7b      	ldr	r4, [pc, #492]	; (8001fa0 <drawMainScreen+0x370>)
 8001db2:	220a      	movs	r2, #10
 8001db4:	4621      	mov	r1, r4
 8001db6:	2045      	movs	r0, #69	; 0x45
 8001db8:	f007 ffe4 	bl	8009d84 <itoa>
	BSP_LCD_DisplayStringAt(44, 10, (uint8_t *) tx_battery_str, LEFT_MODE);
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	210a      	movs	r1, #10
 8001dc2:	202c      	movs	r0, #44	; 0x2c
 8001dc4:	f004 fd6e 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	if (Misc.connection) {
 8001dc8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8088 	beq.w	8001ee2 <drawMainScreen+0x2b2>
		BSP_LCD_DisplayStringAt(250, 10, (uint8_t *) "CON", LEFT_MODE);
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	4a73      	ldr	r2, [pc, #460]	; (8001fa4 <drawMainScreen+0x374>)
 8001dd6:	210a      	movs	r1, #10
 8001dd8:	20fa      	movs	r0, #250	; 0xfa
 8001dda:	f004 fd63 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	if (Misc.airmode) {
 8001dde:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8084 	beq.w	8001ef0 <drawMainScreen+0x2c0>
		BSP_LCD_DisplayStringAt(300, 10, (uint8_t *) "AIR", LEFT_MODE);
 8001de8:	2303      	movs	r3, #3
 8001dea:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <drawMainScreen+0x378>)
 8001dec:	210a      	movs	r1, #10
 8001dee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001df2:	f004 fd57 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawCircle(400, 120, 40);
 8001df6:	2228      	movs	r2, #40	; 0x28
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001dfe:	f004 fdb9 	bl	8006974 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8001e02:	486a      	ldr	r0, [pc, #424]	; (8001fac <drawMainScreen+0x37c>)
 8001e04:	f004 fc12 	bl	800662c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 39);
 8001e08:	2227      	movs	r2, #39	; 0x27
 8001e0a:	2178      	movs	r1, #120	; 0x78
 8001e0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e10:	f004 fe8c 	bl	8006b2c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e18:	f004 fc08 	bl	800662c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(400, 120, 5);
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	2178      	movs	r1, #120	; 0x78
 8001e20:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e24:	f004 fe82 	bl	8006b2c <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001e28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e2c:	f004 fc0a 	bl	8006644 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(330, 200, (uint8_t *) "ROLL", LEFT_MODE);
 8001e30:	2303      	movs	r3, #3
 8001e32:	4a5f      	ldr	r2, [pc, #380]	; (8001fb0 <drawMainScreen+0x380>)
 8001e34:	21c8      	movs	r1, #200	; 0xc8
 8001e36:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001e3a:	f004 fd33 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 220, (uint8_t *) "PITCH", LEFT_MODE);
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4a5c      	ldr	r2, [pc, #368]	; (8001fb4 <drawMainScreen+0x384>)
 8001e42:	21dc      	movs	r1, #220	; 0xdc
 8001e44:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001e48:	f004 fd2c 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(330, 240, (uint8_t *) "YAW", LEFT_MODE);
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	4a5a      	ldr	r2, [pc, #360]	; (8001fb8 <drawMainScreen+0x388>)
 8001e50:	21f0      	movs	r1, #240	; 0xf0
 8001e52:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001e56:	f004 fd25 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	float_to_string(IMU.roll, roll_str);
 8001e5a:	4f58      	ldr	r7, [pc, #352]	; (8001fbc <drawMainScreen+0x38c>)
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 8001e62:	f7ff fe1b 	bl	8001a9c <float_to_string>
	float_to_string(IMU.pitch, pitch_str);
 8001e66:	4e56      	ldr	r6, [pc, #344]	; (8001fc0 <drawMainScreen+0x390>)
 8001e68:	4630      	mov	r0, r6
 8001e6a:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8001e6e:	f7ff fe15 	bl	8001a9c <float_to_string>
	float_to_string(IMU.yaw, yaw_str);
 8001e72:	4d54      	ldr	r5, [pc, #336]	; (8001fc4 <drawMainScreen+0x394>)
 8001e74:	4628      	mov	r0, r5
 8001e76:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8001e7a:	f7ff fe0f 	bl	8001a9c <float_to_string>
	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) "      ", RIGHT_MODE);
 8001e7e:	4c52      	ldr	r4, [pc, #328]	; (8001fc8 <drawMainScreen+0x398>)
 8001e80:	2302      	movs	r3, #2
 8001e82:	4622      	mov	r2, r4
 8001e84:	21c8      	movs	r1, #200	; 0xc8
 8001e86:	2014      	movs	r0, #20
 8001e88:	f004 fd0c 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) "      ", RIGHT_MODE);
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	4622      	mov	r2, r4
 8001e90:	21dc      	movs	r1, #220	; 0xdc
 8001e92:	2014      	movs	r0, #20
 8001e94:	f004 fd06 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 240, (uint8_t *) "      ", RIGHT_MODE);
 8001e98:	2302      	movs	r3, #2
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	21f0      	movs	r1, #240	; 0xf0
 8001e9e:	2014      	movs	r0, #20
 8001ea0:	f004 fd00 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *) roll_str, RIGHT_MODE);
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	463a      	mov	r2, r7
 8001ea8:	21c8      	movs	r1, #200	; 0xc8
 8001eaa:	2014      	movs	r0, #20
 8001eac:	f004 fcfa 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 220, (uint8_t *) pitch_str, RIGHT_MODE);
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	4632      	mov	r2, r6
 8001eb4:	21dc      	movs	r1, #220	; 0xdc
 8001eb6:	2014      	movs	r0, #20
 8001eb8:	f004 fcf4 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(20, 240, (uint8_t *) yaw_str, RIGHT_MODE);
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	21f0      	movs	r1, #240	; 0xf0
 8001ec2:	2014      	movs	r0, #20
 8001ec4:	f004 fcee 	bl	80068a4 <BSP_LCD_DisplayStringAt>
	if (Misc.kill) {
 8001ec8:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001ecc:	b9c3      	cbnz	r3, 8001f00 <drawMainScreen+0x2d0>
		if (!cleared) {
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <drawMainScreen+0x39c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b34b      	cbz	r3, 8001f28 <drawMainScreen+0x2f8>
		cleared = 1;
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <drawMainScreen+0x39c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
}
 8001eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ede:	b004      	add	sp, #16
 8001ee0:	4770      	bx	lr
		BSP_LCD_DisplayStringAt(250, 10, (uint8_t *) "    ", LEFT_MODE);
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <drawMainScreen+0x3a0>)
 8001ee6:	210a      	movs	r1, #10
 8001ee8:	20fa      	movs	r0, #250	; 0xfa
 8001eea:	f004 fcdb 	bl	80068a4 <BSP_LCD_DisplayStringAt>
 8001eee:	e776      	b.n	8001dde <drawMainScreen+0x1ae>
		BSP_LCD_DisplayStringAt(300, 10, (uint8_t *) "    ", LEFT_MODE);
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	4a37      	ldr	r2, [pc, #220]	; (8001fd0 <drawMainScreen+0x3a0>)
 8001ef4:	210a      	movs	r1, #10
 8001ef6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001efa:	f004 fcd3 	bl	80068a4 <BSP_LCD_DisplayStringAt>
 8001efe:	e77a      	b.n	8001df6 <drawMainScreen+0x1c6>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f04:	f004 fb9e 	bl	8006644 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f08:	4832      	ldr	r0, [pc, #200]	; (8001fd4 <drawMainScreen+0x3a4>)
 8001f0a:	f004 fb8f 	bl	800662c <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font20);
 8001f0e:	4832      	ldr	r0, [pc, #200]	; (8001fd8 <drawMainScreen+0x3a8>)
 8001f10:	f004 fba6 	bl	8006660 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 80,
 8001f14:	2301      	movs	r3, #1
 8001f16:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <drawMainScreen+0x3ac>)
 8001f18:	2150      	movs	r1, #80	; 0x50
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f004 fcc2 	bl	80068a4 <BSP_LCD_DisplayStringAt>
		cleared = 0;
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <drawMainScreen+0x39c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e7d8      	b.n	8001eda <drawMainScreen+0x2aa>
			BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001f28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f2c:	f004 fba6 	bl	800667c <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <drawMainScreen+0x35c>)
 8001f32:	f004 fb7b 	bl	800662c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0, 480, 40);
 8001f36:	2328      	movs	r3, #40	; 0x28
 8001f38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4608      	mov	r0, r1
 8001f40:	f004 fdac 	bl	8006a9c <BSP_LCD_FillRect>
 8001f44:	e7c6      	b.n	8001ed4 <drawMainScreen+0x2a4>
 8001f46:	bf00      	nop
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	0800d93c 	.word	0x0800d93c
 8001f50:	0800d940 	.word	0x0800d940
 8001f54:	0800d948 	.word	0x0800d948
 8001f58:	0800d950 	.word	0x0800d950
 8001f5c:	0800d958 	.word	0x0800d958
 8001f60:	0800d960 	.word	0x0800d960
 8001f64:	0800d968 	.word	0x0800d968
 8001f68:	0800d96c 	.word	0x0800d96c
 8001f6c:	20004348 	.word	0x20004348
 8001f70:	20004420 	.word	0x20004420
 8001f74:	200042ac 	.word	0x200042ac
 8001f78:	20004390 	.word	0x20004390
 8001f7c:	200043f0 	.word	0x200043f0
 8001f80:	2000434c 	.word	0x2000434c
 8001f84:	0800d974 	.word	0x0800d974
 8001f88:	2000435c 	.word	0x2000435c
 8001f8c:	ff000080 	.word	0xff000080
 8001f90:	0800d978 	.word	0x0800d978
 8001f94:	0800d980 	.word	0x0800d980
 8001f98:	0800d984 	.word	0x0800d984
 8001f9c:	200043c0 	.word	0x200043c0
 8001fa0:	2000427c 	.word	0x2000427c
 8001fa4:	0800d988 	.word	0x0800d988
 8001fa8:	0800d994 	.word	0x0800d994
 8001fac:	ff800000 	.word	0xff800000
 8001fb0:	0800d998 	.word	0x0800d998
 8001fb4:	0800d9a0 	.word	0x0800d9a0
 8001fb8:	0800d9a8 	.word	0x0800d9a8
 8001fbc:	20004354 	.word	0x20004354
 8001fc0:	2000431c 	.word	0x2000431c
 8001fc4:	20004340 	.word	0x20004340
 8001fc8:	0800d9ac 	.word	0x0800d9ac
 8001fcc:	20000339 	.word	0x20000339
 8001fd0:	0800d98c 	.word	0x0800d98c
 8001fd4:	ffff0000 	.word	0xffff0000
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	0800d9b4 	.word	0x0800d9b4

08001fe0 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <DWT_Init+0x20>)
 8001fe2:	68d3      	ldr	r3, [r2, #12]
 8001fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	60d3      	str	r3, [r2, #12]
        DWT->LAR = 0xC5ACCE55;
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <DWT_Init+0x24>)
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <DWT_Init+0x28>)
 8001fee:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

}
 8001ffe:	4770      	bx	lr
 8002000:	e000edf0 	.word	0xe000edf0
 8002004:	e0001000 	.word	0xe0001000
 8002008:	c5acce55 	.word	0xc5acce55

0800200c <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <DWT_Delay+0x20>)
 800200e:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <DWT_Delay+0x24>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <DWT_Delay+0x28>)
 8002016:	fba1 1303 	umull	r1, r3, r1, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002020:	4b02      	ldr	r3, [pc, #8]	; (800202c <DWT_Delay+0x20>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	4283      	cmp	r3, r0
 8002028:	d3fa      	bcc.n	8002020 <DWT_Delay+0x14>
}
 800202a:	4770      	bx	lr
 800202c:	e0001000 	.word	0xe0001000
 8002030:	20000058 	.word	0x20000058
 8002034:	431bde83 	.word	0x431bde83

08002038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002038:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x20>)
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 fc07 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	2000      	movs	r0, #0
 800204c:	f007 fca8 	bl	80099a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f007 fc86 	bl	8009960 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002054:	2000      	movs	r0, #0
 8002056:	bd08      	pop	{r3, pc}
 8002058:	40023c00 	.word	0x40023c00

0800205c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_IncTick+0x10>)
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_IncTick+0x14>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	440b      	add	r3, r1
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	2000442c 	.word	0x2000442c
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <HAL_GetTick+0x8>)
 8002076:	6818      	ldr	r0, [r3, #0]
}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000442c 	.word	0x2000442c

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fff6 	bl	8002074 <HAL_GetTick>
 8002088:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800208e:	d002      	beq.n	8002096 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_Delay+0x24>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	f7ff ffed 	bl	8002074 <HAL_GetTick>
 800209a:	1b40      	subs	r0, r0, r5
 800209c:	42a0      	cmp	r0, r4
 800209e:	d3fa      	bcc.n	8002096 <HAL_Delay+0x16>
  {
  }
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <ADC_Init+0x12c>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80020b0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	6841      	ldr	r1, [r0, #4]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6853      	ldr	r3, [r2, #4]
 80020be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c4:	6802      	ldr	r2, [r0, #0]
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	6901      	ldr	r1, [r0, #16]
 80020ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020ce:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d0:	6802      	ldr	r2, [r0, #0]
 80020d2:	6853      	ldr	r3, [r2, #4]
 80020d4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80020d8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020da:	6802      	ldr	r2, [r0, #0]
 80020dc:	6853      	ldr	r3, [r2, #4]
 80020de:	6881      	ldr	r1, [r0, #8]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	6893      	ldr	r3, [r2, #8]
 80020e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	6893      	ldr	r3, [r2, #8]
 80020f2:	68c1      	ldr	r1, [r0, #12]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80020fa:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <ADC_Init+0x130>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d04b      	beq.n	8002198 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	6893      	ldr	r3, [r2, #8]
 8002104:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002108:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	6893      	ldr	r3, [r2, #8]
 800210e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002110:	430b      	orrs	r3, r1
 8002112:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002114:	6802      	ldr	r2, [r0, #0]
 8002116:	6893      	ldr	r3, [r2, #8]
 8002118:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800211c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211e:	6802      	ldr	r2, [r0, #0]
 8002120:	6893      	ldr	r3, [r2, #8]
 8002122:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002128:	6802      	ldr	r2, [r0, #0]
 800212a:	6893      	ldr	r3, [r2, #8]
 800212c:	f023 0302 	bic.w	r3, r3, #2
 8002130:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002132:	6802      	ldr	r2, [r0, #0]
 8002134:	6893      	ldr	r3, [r2, #8]
 8002136:	6981      	ldr	r1, [r0, #24]
 8002138:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800213c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800213e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d133      	bne.n	80021ae <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	6853      	ldr	r3, [r2, #4]
 800214a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800214e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002150:	6802      	ldr	r2, [r0, #0]
 8002152:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002154:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002158:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800215a:	6801      	ldr	r1, [r0, #0]
 800215c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800215e:	69c2      	ldr	r2, [r0, #28]
 8002160:	3a01      	subs	r2, #1
 8002162:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002166:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002168:	6802      	ldr	r2, [r0, #0]
 800216a:	6893      	ldr	r3, [r2, #8]
 800216c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002170:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6893      	ldr	r3, [r2, #8]
 8002176:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800217a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800217e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002180:	6802      	ldr	r2, [r0, #0]
 8002182:	6893      	ldr	r3, [r2, #8]
 8002184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002188:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800218a:	6802      	ldr	r2, [r0, #0]
 800218c:	6893      	ldr	r3, [r2, #8]
 800218e:	6941      	ldr	r1, [r0, #20]
 8002190:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002194:	6093      	str	r3, [r2, #8]
}
 8002196:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6893      	ldr	r3, [r2, #8]
 800219c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80021a0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6893      	ldr	r3, [r2, #8]
 80021a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	e7bc      	b.n	8002128 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021ae:	6802      	ldr	r2, [r0, #0]
 80021b0:	6853      	ldr	r3, [r2, #4]
 80021b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	6853      	ldr	r3, [r2, #4]
 80021bc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021c0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c2:	6801      	ldr	r1, [r0, #0]
 80021c4:	684b      	ldr	r3, [r1, #4]
 80021c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021c8:	3a01      	subs	r2, #1
 80021ca:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	e7be      	b.n	8002150 <ADC_Init+0xa8>
 80021d2:	bf00      	nop
 80021d4:	40012300 	.word	0x40012300
 80021d8:	0f000001 	.word	0x0f000001

080021dc <HAL_ADC_Init>:
  if(hadc == NULL)
 80021dc:	b328      	cbz	r0, 800222a <HAL_ADC_Init+0x4e>
{
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021e4:	b143      	cbz	r3, 80021f8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e8:	f013 0f10 	tst.w	r3, #16
 80021ec:	d00b      	beq.n	8002206 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80021ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80021f0:	2300      	movs	r3, #0
 80021f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80021f6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80021f8:	f006 fb32 	bl	8008860 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	2300      	movs	r3, #0
 80021fe:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002204:	e7ef      	b.n	80021e6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002206:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_ADC_Init+0x54>)
 800220a:	4013      	ands	r3, r2
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff ff48 	bl	80020a8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	2000      	movs	r0, #0
 800221a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800221e:	f023 0303 	bic.w	r3, r3, #3
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6423      	str	r3, [r4, #64]	; 0x40
 8002228:	e7e2      	b.n	80021f0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	ffffeefd 	.word	0xffffeefd

08002234 <HAL_ADC_Start>:
{
 8002234:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800223a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d073      	beq.n	800232a <HAL_ADC_Start+0xf6>
 8002242:	2301      	movs	r3, #1
 8002244:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	f012 0f01 	tst.w	r2, #1
 8002250:	d113      	bne.n	800227a <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_ADC_Start+0x10c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <HAL_ADC_Start+0x110>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800226a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800226c:	e002      	b.n	8002274 <HAL_ADC_Start+0x40>
      counter--;
 800226e:	9b01      	ldr	r3, [sp, #4]
 8002270:	3b01      	subs	r3, #1
 8002272:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8002274:	9b01      	ldr	r3, [sp, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	6893      	ldr	r3, [r2, #8]
 800227e:	f013 0f01 	tst.w	r3, #1
 8002282:	d054      	beq.n	800232e <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_ADC_Start+0x114>)
 8002288:	400b      	ands	r3, r1
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002290:	6853      	ldr	r3, [r2, #4]
 8002292:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002298:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800229a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a2:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80022aa:	d019      	beq.n	80022e0 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80022ae:	f023 0306 	bic.w	r3, r3, #6
 80022b2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80022b4:	2300      	movs	r3, #0
 80022b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ba:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80022be:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_ADC_Start+0x118>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f013 0f1f 	tst.w	r3, #31
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022ca:	6803      	ldr	r3, [r0, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80022d2:	d12f      	bne.n	8002334 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80022dc:	2000      	movs	r0, #0
 80022de:	e027      	b.n	8002330 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 80022e0:	2300      	movs	r3, #0
 80022e2:	6443      	str	r3, [r0, #68]	; 0x44
 80022e4:	e7e6      	b.n	80022b4 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022e6:	6803      	ldr	r3, [r0, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_ADC_Start+0x11c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00a      	beq.n	8002304 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_ADC_Start+0x118>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f013 0f10 	tst.w	r3, #16
 80022f6:	d11f      	bne.n	8002338 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022f8:	6803      	ldr	r3, [r0, #0]
 80022fa:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_ADC_Start+0x120>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00a      	beq.n	8002316 <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
 8002302:	e015      	b.n	8002330 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800230a:	d1f0      	bne.n	80022ee <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e7eb      	b.n	80022ee <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800231c:	d10e      	bne.n	800233c <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002326:	2000      	movs	r0, #0
 8002328:	e002      	b.n	8002330 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 800232a:	2002      	movs	r0, #2
 800232c:	e000      	b.n	8002330 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 800232e:	2000      	movs	r0, #0
}
 8002330:	b002      	add	sp, #8
 8002332:	4770      	bx	lr
  return HAL_OK;
 8002334:	2000      	movs	r0, #0
 8002336:	e7fb      	b.n	8002330 <HAL_ADC_Start+0xfc>
 8002338:	2000      	movs	r0, #0
 800233a:	e7f9      	b.n	8002330 <HAL_ADC_Start+0xfc>
 800233c:	2000      	movs	r0, #0
 800233e:	e7f7      	b.n	8002330 <HAL_ADC_Start+0xfc>
 8002340:	20000058 	.word	0x20000058
 8002344:	431bde83 	.word	0x431bde83
 8002348:	fffff8fe 	.word	0xfffff8fe
 800234c:	40012300 	.word	0x40012300
 8002350:	40012000 	.word	0x40012000
 8002354:	40012200 	.word	0x40012200

08002358 <HAL_ADC_Start_DMA>:
{
 8002358:	b530      	push	{r4, r5, lr}
 800235a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	f000 8091 	beq.w	800248c <HAL_ADC_Start_DMA+0x134>
 800236a:	2301      	movs	r3, #1
 800236c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002370:	6804      	ldr	r4, [r0, #0]
 8002372:	68a3      	ldr	r3, [r4, #8]
 8002374:	f013 0f01 	tst.w	r3, #1
 8002378:	d113      	bne.n	80023a2 <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 800237a:	68a3      	ldr	r3, [r4, #8]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_ADC_Start_DMA+0x14c>)
 8002384:	681c      	ldr	r4, [r3, #0]
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_ADC_Start_DMA+0x150>)
 8002388:	fba3 3404 	umull	r3, r4, r3, r4
 800238c:	0ca4      	lsrs	r4, r4, #18
 800238e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002392:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8002394:	e002      	b.n	800239c <HAL_ADC_Start_DMA+0x44>
      counter--;
 8002396:	9c01      	ldr	r4, [sp, #4]
 8002398:	3c01      	subs	r4, #1
 800239a:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 800239c:	9c01      	ldr	r4, [sp, #4]
 800239e:	2c00      	cmp	r4, #0
 80023a0:	d1f9      	bne.n	8002396 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	689c      	ldr	r4, [r3, #8]
 80023a6:	f014 0f01 	tst.w	r4, #1
 80023aa:	d071      	beq.n	8002490 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80023ae:	4c3f      	ldr	r4, [pc, #252]	; (80024ac <HAL_ADC_Start_DMA+0x154>)
 80023b0:	402c      	ands	r4, r5
 80023b2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80023b6:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023be:	d005      	beq.n	80023cc <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ca:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80023d2:	d036      	beq.n	8002442 <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023d6:	f023 0306 	bic.w	r3, r3, #6
 80023da:	6443      	str	r3, [r0, #68]	; 0x44
 80023dc:	4613      	mov	r3, r2
 80023de:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 80023e0:	2200      	movs	r2, #0
 80023e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80023e8:	4831      	ldr	r0, [pc, #196]	; (80024b0 <HAL_ADC_Start_DMA+0x158>)
 80023ea:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023ee:	4831      	ldr	r0, [pc, #196]	; (80024b4 <HAL_ADC_Start_DMA+0x15c>)
 80023f0:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023f4:	4830      	ldr	r0, [pc, #192]	; (80024b8 <HAL_ADC_Start_DMA+0x160>)
 80023f6:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f8:	6822      	ldr	r2, [r4, #0]
 80023fa:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80023fe:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	6868      	ldr	r0, [r5, #4]
 8002404:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002408:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800240a:	6825      	ldr	r5, [r4, #0]
 800240c:	68a8      	ldr	r0, [r5, #8]
 800240e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002412:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002414:	6820      	ldr	r0, [r4, #0]
 8002416:	460a      	mov	r2, r1
 8002418:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800241c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800241e:	f000 fbf6 	bl	8002c0e <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_ADC_Start_DMA+0x164>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f013 0f1f 	tst.w	r3, #31
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_Start_DMA+0xf0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002434:	d12f      	bne.n	8002496 <HAL_ADC_Start_DMA+0x13e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800243c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800243e:	2000      	movs	r0, #0
 8002440:	e027      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
      ADC_CLEAR_ERRORCODE(hadc);
 8002442:	2300      	movs	r3, #0
 8002444:	6443      	str	r3, [r0, #68]	; 0x44
 8002446:	e7c9      	b.n	80023dc <HAL_ADC_Start_DMA+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_ADC_Start_DMA+0x168>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00a      	beq.n	8002466 <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_ADC_Start_DMA+0x164>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f013 0f10 	tst.w	r3, #16
 8002458:	d11f      	bne.n	800249a <HAL_ADC_Start_DMA+0x142>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_ADC_Start_DMA+0x16c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00a      	beq.n	8002478 <HAL_ADC_Start_DMA+0x120>
  return HAL_OK;
 8002462:	2000      	movs	r0, #0
 8002464:	e015      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800246c:	d1f0      	bne.n	8002450 <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e7eb      	b.n	8002450 <HAL_ADC_Start_DMA+0xf8>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800247e:	d10e      	bne.n	800249e <HAL_ADC_Start_DMA+0x146>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002488:	2000      	movs	r0, #0
 800248a:	e002      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
  __HAL_LOCK(hadc);
 800248c:	2002      	movs	r0, #2
 800248e:	e000      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
  return HAL_OK;
 8002490:	2000      	movs	r0, #0
}
 8002492:	b003      	add	sp, #12
 8002494:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
 8002498:	e7fb      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
 800249a:	2000      	movs	r0, #0
 800249c:	e7f9      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
 800249e:	2000      	movs	r0, #0
 80024a0:	e7f7      	b.n	8002492 <HAL_ADC_Start_DMA+0x13a>
 80024a2:	bf00      	nop
 80024a4:	20000058 	.word	0x20000058
 80024a8:	431bde83 	.word	0x431bde83
 80024ac:	fffff8fe 	.word	0xfffff8fe
 80024b0:	08002637 	.word	0x08002637
 80024b4:	080024cb 	.word	0x080024cb
 80024b8:	08002621 	.word	0x08002621
 80024bc:	40012300 	.word	0x40012300
 80024c0:	40012000 	.word	0x40012000
 80024c4:	40012200 	.word	0x40012200

080024c8 <HAL_ADC_ConvHalfCpltCallback>:
}
 80024c8:	4770      	bx	lr

080024ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024ca:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80024ce:	f7ff fffb 	bl	80024c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d2:	bd08      	pop	{r3, pc}

080024d4 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80024d4:	4770      	bx	lr

080024d6 <HAL_ADC_ErrorCallback>:
}
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_IRQHandler>:
{
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80024dc:	6801      	ldr	r1, [r0, #0]
 80024de:	680a      	ldr	r2, [r1, #0]
 80024e0:	f3c2 0240 	ubfx	r2, r2, #1, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80024e4:	684b      	ldr	r3, [r1, #4]
 80024e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 80024ea:	421a      	tst	r2, r3
 80024ec:	d02c      	beq.n	8002548 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024f0:	f013 0f10 	tst.w	r3, #16
 80024f4:	d103      	bne.n	80024fe <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fc:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024fe:	688b      	ldr	r3, [r1, #8]
 8002500:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8002504:	d119      	bne.n	800253a <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002506:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002508:	b9bb      	cbnz	r3, 800253a <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800250a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800250c:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002510:	d003      	beq.n	800251a <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002512:	688b      	ldr	r3, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002514:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002518:	d10f      	bne.n	800253a <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800251a:	684b      	ldr	r3, [r1, #4]
 800251c:	f023 0320 	bic.w	r3, r3, #32
 8002520:	604b      	str	r3, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002528:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002530:	d103      	bne.n	800253a <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800253a:	4620      	mov	r0, r4
 800253c:	f007 f990 	bl	8009860 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f06f 0212 	mvn.w	r2, #18
 8002546:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	f3c1 0180 	ubfx	r1, r1, #2, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 8002556:	4211      	tst	r1, r2
 8002558:	d034      	beq.n	80025c4 <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800255a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800255c:	f012 0f10 	tst.w	r2, #16
 8002560:	d103      	bne.n	800256a <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002562:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002568:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002570:	d121      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002574:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002578:	d003      	beq.n	8002582 <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800257a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800257c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002580:	d119      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002582:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002584:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002588:	d115      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xde>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800258a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800258c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002590:	d111      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xde>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002592:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002594:	b97a      	cbnz	r2, 80025b6 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800259e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a4:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025ac:	d103      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025b6:	4620      	mov	r0, r4
 80025b8:	f000 f94c 	bl	8002854 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f06f 020c 	mvn.w	r2, #12
 80025c2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80025c8:	6853      	ldr	r3, [r2, #4]
 80025ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 80025ce:	4219      	tst	r1, r3
 80025d0:	d003      	beq.n	80025da <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f013 0f01 	tst.w	r3, #1
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_IRQHandler+0x116>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80025da:	6821      	ldr	r1, [r4, #0]
 80025dc:	680a      	ldr	r2, [r1, #0]
 80025de:	f3c2 1240 	ubfx	r2, r2, #5, #1
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80025e2:	684b      	ldr	r3, [r1, #4]
 80025e4:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 80025e8:	421a      	tst	r2, r3
 80025ea:	d10c      	bne.n	8002606 <HAL_ADC_IRQHandler+0x12e>
}
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff ff6c 	bl	80024d4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	f06f 0201 	mvn.w	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e7e9      	b.n	80025da <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800260e:	f06f 0520 	mvn.w	r5, #32
 8002612:	600d      	str	r5, [r1, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff ff5e 	bl	80024d6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	601d      	str	r5, [r3, #0]
}
 800261e:	e7e5      	b.n	80025ec <HAL_ADC_IRQHandler+0x114>

08002620 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002620:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002622:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002628:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002630:	f7ff ff51 	bl	80024d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002634:	bd08      	pop	{r3, pc}

08002636 <ADC_DMAConvCplt>:
{
 8002636:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002638:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800263a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002640:	d126      	bne.n	8002690 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6891      	ldr	r1, [r2, #8]
 800264e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002652:	d119      	bne.n	8002688 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002654:	6999      	ldr	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002656:	b9b9      	cbnz	r1, 8002688 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002658:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800265e:	d003      	beq.n	8002668 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002660:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002662:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8002666:	d10f      	bne.n	8002688 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002668:	6851      	ldr	r1, [r2, #4]
 800266a:	f021 0120 	bic.w	r1, r1, #32
 800266e:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800267e:	d103      	bne.n	8002688 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002688:	4618      	mov	r0, r3
 800268a:	f007 f8e9 	bl	8009860 <HAL_ADC_ConvCpltCallback>
}
 800268e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	f012 0f10 	tst.w	r2, #16
 8002696:	d103      	bne.n	80026a0 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	4798      	blx	r3
}
 800269e:	e7f6      	b.n	800268e <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff18 	bl	80024d6 <HAL_ADC_ErrorCallback>
 80026a6:	e7f2      	b.n	800268e <ADC_DMAConvCplt+0x58>

080026a8 <HAL_ADC_ConfigChannel>:
{
 80026a8:	b430      	push	{r4, r5}
 80026aa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80026b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f000 80c0 	beq.w	800283a <HAL_ADC_ConfigChannel+0x192>
 80026ba:	2301      	movs	r3, #1
 80026bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 80026c0:	680b      	ldr	r3, [r1, #0]
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	d922      	bls.n	800270c <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c6:	6805      	ldr	r5, [r0, #0]
 80026c8:	68ea      	ldr	r2, [r5, #12]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	2407      	movs	r4, #7
 80026d4:	fa04 f303 	lsl.w	r3, r4, r3
 80026d8:	ea22 0303 	bic.w	r3, r2, r3
 80026dc:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	680b      	ldr	r3, [r1, #0]
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_ADC_ConfigChannel+0x198>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00b      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e6:	6805      	ldr	r5, [r0, #0]
 80026e8:	68ea      	ldr	r2, [r5, #12]
 80026ea:	688c      	ldr	r4, [r1, #8]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	fa04 f303 	lsl.w	r3, r4, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60eb      	str	r3, [r5, #12]
 80026fc:	e01b      	b.n	8002736 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026fe:	6802      	ldr	r2, [r0, #0]
 8002700:	68d3      	ldr	r3, [r2, #12]
 8002702:	688c      	ldr	r4, [r1, #8]
 8002704:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002708:	60d3      	str	r3, [r2, #12]
 800270a:	e014      	b.n	8002736 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800270c:	6805      	ldr	r5, [r0, #0]
 800270e:	692a      	ldr	r2, [r5, #16]
 8002710:	b29b      	uxth	r3, r3
 8002712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002716:	2407      	movs	r4, #7
 8002718:	fa04 f303 	lsl.w	r3, r4, r3
 800271c:	ea22 0303 	bic.w	r3, r2, r3
 8002720:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002722:	6805      	ldr	r5, [r0, #0]
 8002724:	692a      	ldr	r2, [r5, #16]
 8002726:	688c      	ldr	r4, [r1, #8]
 8002728:	880b      	ldrh	r3, [r1, #0]
 800272a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800272e:	fa04 f303 	lsl.w	r3, r4, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8002736:	684b      	ldr	r3, [r1, #4]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d824      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800273c:	6805      	ldr	r5, [r0, #0]
 800273e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002744:	3b05      	subs	r3, #5
 8002746:	241f      	movs	r4, #31
 8002748:	fa04 f303 	lsl.w	r3, r4, r3
 800274c:	ea22 0303 	bic.w	r3, r2, r3
 8002750:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002752:	6805      	ldr	r5, [r0, #0]
 8002754:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002756:	684b      	ldr	r3, [r1, #4]
 8002758:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800275c:	3b05      	subs	r3, #5
 800275e:	880c      	ldrh	r4, [r1, #0]
 8002760:	fa04 f303 	lsl.w	r3, r4, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002768:	6802      	ldr	r2, [r0, #0]
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_ADC_ConfigChannel+0x19c>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d03a      	beq.n	80027e6 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002770:	6802      	ldr	r2, [r0, #0]
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_ADC_ConfigChannel+0x19c>)
 8002774:	429a      	cmp	r2, r3
 8002776:	d03f      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8002778:	2300      	movs	r3, #0
 800277a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800277e:	4618      	mov	r0, r3
}
 8002780:	b002      	add	sp, #8
 8002782:	bc30      	pop	{r4, r5}
 8002784:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d816      	bhi.n	80027b8 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800278a:	6805      	ldr	r5, [r0, #0]
 800278c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800278e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002792:	3b23      	subs	r3, #35	; 0x23
 8002794:	241f      	movs	r4, #31
 8002796:	fa04 f303 	lsl.w	r3, r4, r3
 800279a:	ea22 0303 	bic.w	r3, r2, r3
 800279e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a0:	6805      	ldr	r5, [r0, #0]
 80027a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80027a4:	684b      	ldr	r3, [r1, #4]
 80027a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027aa:	3b23      	subs	r3, #35	; 0x23
 80027ac:	880c      	ldrh	r4, [r1, #0]
 80027ae:	fa04 f303 	lsl.w	r3, r4, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	632b      	str	r3, [r5, #48]	; 0x30
 80027b6:	e7d7      	b.n	8002768 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b8:	6805      	ldr	r5, [r0, #0]
 80027ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80027bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027c0:	3b41      	subs	r3, #65	; 0x41
 80027c2:	241f      	movs	r4, #31
 80027c4:	fa04 f303 	lsl.w	r3, r4, r3
 80027c8:	ea22 0303 	bic.w	r3, r2, r3
 80027cc:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ce:	6805      	ldr	r5, [r0, #0]
 80027d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80027d2:	684b      	ldr	r3, [r1, #4]
 80027d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027d8:	3b41      	subs	r3, #65	; 0x41
 80027da:	880c      	ldrh	r4, [r1, #0]
 80027dc:	fa04 f303 	lsl.w	r3, r4, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80027e4:	e7c0      	b.n	8002768 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e6:	680b      	ldr	r3, [r1, #0]
 80027e8:	2b12      	cmp	r3, #18
 80027ea:	d1c1      	bne.n	8002770 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_ADC_ConfigChannel+0x1a0>)
 80027ee:	6853      	ldr	r3, [r2, #4]
 80027f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f4:	6053      	str	r3, [r2, #4]
 80027f6:	e7bb      	b.n	8002770 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f8:	680b      	ldr	r3, [r1, #0]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_ADC_ConfigChannel+0x198>)
 80027fc:	2b11      	cmp	r3, #17
 80027fe:	bf18      	it	ne
 8002800:	4293      	cmpne	r3, r2
 8002802:	d1b9      	bne.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <HAL_ADC_ConfigChannel+0x1a0>)
 8002806:	6853      	ldr	r3, [r2, #4]
 8002808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800280c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280e:	680a      	ldr	r2, [r1, #0]
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_ADC_ConfigChannel+0x198>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d1b0      	bne.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_ADC_ConfigChannel+0x1a4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <HAL_ADC_ConfigChannel+0x1a8>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002826:	005a      	lsls	r2, r3, #1
 8002828:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800282a:	e002      	b.n	8002832 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 800282c:	9b01      	ldr	r3, [sp, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f9      	bne.n	800282c <HAL_ADC_ConfigChannel+0x184>
 8002838:	e79e      	b.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 800283a:	2002      	movs	r0, #2
 800283c:	e7a0      	b.n	8002780 <HAL_ADC_ConfigChannel+0xd8>
 800283e:	bf00      	nop
 8002840:	10000012 	.word	0x10000012
 8002844:	40012000 	.word	0x40012000
 8002848:	40012300 	.word	0x40012300
 800284c:	20000058 	.word	0x20000058
 8002850:	431bde83 	.word	0x431bde83

08002854 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002854:	4770      	bx	lr
	...

08002858 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800285a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	0200      	lsls	r0, r0, #8
 8002866:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800286c:	4a02      	ldr	r2, [pc, #8]	; (8002878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800286e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002870:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	05fa0000 	.word	0x05fa0000

0800287c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_NVIC_SetPriority+0x58>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002886:	f1c3 0407 	rsb	r4, r3, #7
 800288a:	2c04      	cmp	r4, #4
 800288c:	bf28      	it	cs
 800288e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002890:	1d1d      	adds	r5, r3, #4
 8002892:	2d06      	cmp	r5, #6
 8002894:	d914      	bls.n	80028c0 <HAL_NVIC_SetPriority+0x44>
 8002896:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800289c:	fa05 f404 	lsl.w	r4, r5, r4
 80028a0:	ea21 0104 	bic.w	r1, r1, r4
 80028a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a6:	fa05 f303 	lsl.w	r3, r5, r3
 80028aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	db07      	blt.n	80028c4 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	0109      	lsls	r1, r1, #4
 80028b6:	b2c9      	uxtb	r1, r1
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_NVIC_SetPriority+0x5c>)
 80028ba:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028bc:	bc30      	pop	{r4, r5}
 80028be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c0:	2300      	movs	r3, #0
 80028c2:	e7e9      	b.n	8002898 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	f000 000f 	and.w	r0, r0, #15
 80028c8:	0109      	lsls	r1, r1, #4
 80028ca:	b2c9      	uxtb	r1, r1
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_NVIC_SetPriority+0x60>)
 80028ce:	5419      	strb	r1, [r3, r0]
 80028d0:	e7f4      	b.n	80028bc <HAL_NVIC_SetPriority+0x40>
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	e000e400 	.word	0xe000e400
 80028dc:	e000ed14 	.word	0xe000ed14

080028e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	db07      	blt.n	80028f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e4:	f000 021f 	and.w	r2, r0, #31
 80028e8:	0940      	lsrs	r0, r0, #5
 80028ea:	2301      	movs	r3, #1
 80028ec:	4093      	lsls	r3, r2
 80028ee:	4a02      	ldr	r2, [pc, #8]	; (80028f8 <HAL_NVIC_EnableIRQ+0x18>)
 80028f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d038      	beq.n	8002972 <HAL_CRC_Init+0x76>
{
 8002900:	b510      	push	{r4, lr}
 8002902:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002904:	7f43      	ldrb	r3, [r0, #29]
 8002906:	b31b      	cbz	r3, 8002950 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800290c:	7923      	ldrb	r3, [r4, #4]
 800290e:	bb1b      	cbnz	r3, 8002958 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_CRC_Init+0x7c>)
 8002914:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6893      	ldr	r3, [r2, #8]
 800291a:	f023 0318 	bic.w	r3, r3, #24
 800291e:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002920:	7963      	ldrb	r3, [r4, #5]
 8002922:	bb13      	cbnz	r3, 800296a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	6893      	ldr	r3, [r2, #8]
 8002930:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002934:	6961      	ldr	r1, [r4, #20]
 8002936:	430b      	orrs	r3, r1
 8002938:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	6893      	ldr	r3, [r2, #8]
 800293e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002942:	69a1      	ldr	r1, [r4, #24]
 8002944:	430b      	orrs	r3, r1
 8002946:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002948:	2301      	movs	r3, #1
 800294a:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800294c:	2000      	movs	r0, #0
}
 800294e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002950:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002952:	f006 f80d 	bl	8008970 <HAL_CRC_MspInit>
 8002956:	e7d7      	b.n	8002908 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002958:	68e2      	ldr	r2, [r4, #12]
 800295a:	68a1      	ldr	r1, [r4, #8]
 800295c:	4620      	mov	r0, r4
 800295e:	f000 f80d 	bl	800297c <HAL_CRCEx_Polynomial_Set>
 8002962:	2800      	cmp	r0, #0
 8002964:	d0dc      	beq.n	8002920 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
 8002968:	e7f1      	b.n	800294e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	6922      	ldr	r2, [r4, #16]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	e7dc      	b.n	800292c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	04c11db7 	.word	0x04c11db7

0800297c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800297c:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800297e:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002980:	1e65      	subs	r5, r4, #1
 8002982:	b13c      	cbz	r4, 8002994 <HAL_CRCEx_Polynomial_Set+0x18>
 8002984:	f005 031f 	and.w	r3, r5, #31
 8002988:	fa21 f303 	lsr.w	r3, r1, r3
 800298c:	462c      	mov	r4, r5
 800298e:	f013 0f01 	tst.w	r3, #1
 8002992:	d0f5      	beq.n	8002980 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002994:	2a18      	cmp	r2, #24
 8002996:	d823      	bhi.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x64>
 8002998:	e8df f002 	tbb	[pc, r2]
 800299c:	2222220f 	.word	0x2222220f
 80029a0:	22222222 	.word	0x22222222
 80029a4:	2222221e 	.word	0x2222221e
 80029a8:	22222222 	.word	0x22222222
 80029ac:	2222221a 	.word	0x2222221a
 80029b0:	22222222 	.word	0x22222222
 80029b4:	0d          	.byte	0x0d
 80029b5:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029b6:	2d06      	cmp	r5, #6
 80029b8:	d814      	bhi.n	80029e4 <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029be:	6801      	ldr	r1, [r0, #0]
 80029c0:	688b      	ldr	r3, [r1, #8]
 80029c2:	f023 0318 	bic.w	r3, r3, #24
 80029c6:	431a      	orrs	r2, r3
 80029c8:	608a      	str	r2, [r1, #8]
 80029ca:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80029cc:	bc30      	pop	{r4, r5}
 80029ce:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 80029d0:	2d07      	cmp	r5, #7
 80029d2:	d9f2      	bls.n	80029ba <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80029d4:	2001      	movs	r0, #1
 80029d6:	e7f9      	b.n	80029cc <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 80029d8:	2d0f      	cmp	r5, #15
 80029da:	d9ee      	bls.n	80029ba <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e7f5      	b.n	80029cc <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
 80029e2:	e7f3      	b.n	80029cc <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 80029e4:	2001      	movs	r0, #1
 80029e6:	e7f1      	b.n	80029cc <HAL_CRCEx_Polynomial_Set+0x50>

080029e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ea:	6805      	ldr	r5, [r0, #0]
 80029ec:	682c      	ldr	r4, [r5, #0]
 80029ee:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80029f2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029f4:	6804      	ldr	r4, [r0, #0]
 80029f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f8:	6883      	ldr	r3, [r0, #8]
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d005      	beq.n	8002a0a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002a02:	6803      	ldr	r3, [r0, #0]
 8002a04:	60da      	str	r2, [r3, #12]
  }
}
 8002a06:	bc30      	pop	{r4, r5}
 8002a08:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	60d9      	str	r1, [r3, #12]
 8002a12:	e7f8      	b.n	8002a06 <DMA_SetConfig+0x1e>

08002a14 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a14:	6802      	ldr	r2, [r0, #0]
 8002a16:	b2d3      	uxtb	r3, r2
 8002a18:	3b10      	subs	r3, #16
 8002a1a:	4909      	ldr	r1, [pc, #36]	; (8002a40 <DMA_CalcBaseAndBitshift+0x2c>)
 8002a1c:	fba1 1303 	umull	r1, r3, r1, r3
 8002a20:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <DMA_CalcBaseAndBitshift+0x30>)
 8002a24:	5cc9      	ldrb	r1, [r1, r3]
 8002a26:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d804      	bhi.n	8002a36 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <DMA_CalcBaseAndBitshift+0x34>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002a32:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002a34:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <DMA_CalcBaseAndBitshift+0x34>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	6583      	str	r3, [r0, #88]	; 0x58
 8002a3e:	e7f8      	b.n	8002a32 <DMA_CalcBaseAndBitshift+0x1e>
 8002a40:	aaaaaaab 	.word	0xaaaaaaab
 8002a44:	0800d9c8 	.word	0x0800d9c8
 8002a48:	fffffc00 	.word	0xfffffc00

08002a4c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a4e:	6982      	ldr	r2, [r0, #24]
 8002a50:	b992      	cbnz	r2, 8002a78 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d00a      	beq.n	8002a6c <DMA_CheckFifoParam+0x20>
 8002a56:	b11b      	cbz	r3, 8002a60 <DMA_CheckFifoParam+0x14>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d001      	beq.n	8002a60 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a62:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a66:	d12c      	bne.n	8002ac2 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a72:	d028      	beq.n	8002ac6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a7c:	d005      	beq.n	8002a8a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d929      	bls.n	8002ad6 <DMA_CheckFifoParam+0x8a>
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d015      	beq.n	8002ab2 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2000      	movs	r0, #0
 8002a88:	4770      	bx	lr
    switch (tmp)
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d803      	bhi.n	8002a96 <DMA_CheckFifoParam+0x4a>
 8002a8e:	e8df f003 	tbb	[pc, r3]
 8002a92:	041c      	.short	0x041c
 8002a94:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002aa0:	d115      	bne.n	8002ace <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aac:	d011      	beq.n	8002ad2 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ab4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002ab8:	d001      	beq.n	8002abe <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002abc:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2000      	movs	r0, #0
 8002ac0:	4770      	bx	lr
        status = HAL_ERROR;
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	4770      	bx	lr
        status = HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	4770      	bx	lr
      status = HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
 8002acc:	4770      	bx	lr
        status = HAL_ERROR;
 8002ace:	2001      	movs	r0, #1
 8002ad0:	4770      	bx	lr
        status = HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	4770      	bx	lr
      status = HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_DMA_Init>:
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fac8 	bl	8002074 <HAL_GetTick>
  if(hdma == NULL)
 8002ae4:	2c00      	cmp	r4, #0
 8002ae6:	d05b      	beq.n	8002ba0 <HAL_DMA_Init+0xc4>
 8002ae8:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002aea:	2300      	movs	r3, #0
 8002aec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f012 0f01 	tst.w	r2, #1
 8002b08:	d00a      	beq.n	8002b20 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0a:	f7ff fab3 	bl	8002074 <HAL_GetTick>
 8002b0e:	1b40      	subs	r0, r0, r5
 8002b10:	2805      	cmp	r0, #5
 8002b12:	d9f5      	bls.n	8002b00 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	2320      	movs	r3, #32
 8002b16:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002b20:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b22:	4820      	ldr	r0, [pc, #128]	; (8002ba4 <HAL_DMA_Init+0xc8>)
 8002b24:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b26:	6861      	ldr	r1, [r4, #4]
 8002b28:	68a2      	ldr	r2, [r4, #8]
 8002b2a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b30:	6921      	ldr	r1, [r4, #16]
 8002b32:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b36:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	69a1      	ldr	r1, [r4, #24]
 8002b3a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	6a21      	ldr	r1, [r4, #32]
 8002b42:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b48:	2904      	cmp	r1, #4
 8002b4a:	d01e      	beq.n	8002b8a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002b4c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002b4e:	6826      	ldr	r6, [r4, #0]
 8002b50:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b52:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b58:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b60:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b64:	b11b      	cbz	r3, 8002b6e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff ff70 	bl	8002a4c <DMA_CheckFifoParam>
 8002b6c:	b990      	cbnz	r0, 8002b94 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002b6e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff ff4f 	bl	8002a14 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b78:	233f      	movs	r3, #63	; 0x3f
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7e:	2000      	movs	r0, #0
 8002b80:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002b88:	e7c9      	b.n	8002b1e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b8e:	4301      	orrs	r1, r0
 8002b90:	430a      	orrs	r2, r1
 8002b92:	e7db      	b.n	8002b4c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b94:	2340      	movs	r3, #64	; 0x40
 8002b96:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002b9e:	e7be      	b.n	8002b1e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	e7bc      	b.n	8002b1e <HAL_DMA_Init+0x42>
 8002ba4:	f010803f 	.word	0xf010803f

08002ba8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_DeInit+0x5e>
{
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002bb0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d027      	beq.n	8002c0a <HAL_DMA_DeInit+0x62>
  __HAL_DMA_DISABLE(hdma);
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	6813      	ldr	r3, [r2, #0]
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002bca:	6803      	ldr	r3, [r0, #0]
 8002bcc:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002bd2:	6803      	ldr	r3, [r0, #0]
 8002bd4:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002bda:	6803      	ldr	r3, [r0, #0]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be0:	f7ff ff18 	bl	8002a14 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002be6:	233f      	movs	r3, #63	; 0x3f
 8002be8:	4093      	lsls	r3, r2
 8002bea:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8002bec:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002bee:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002bf0:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002bf2:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002bf4:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002bf6:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002bfa:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002bfe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8002c02:	4628      	mov	r0, r5
}
 8002c04:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
}
 8002c08:	4770      	bx	lr
    return HAL_BUSY;
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	e7fa      	b.n	8002c04 <HAL_DMA_DeInit+0x5c>

08002c0e <HAL_DMA_Start_IT>:
{
 8002c0e:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c10:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002c12:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002c16:	2c01      	cmp	r4, #1
 8002c18:	d031      	beq.n	8002c7e <HAL_DMA_Start_IT+0x70>
 8002c1a:	2401      	movs	r4, #1
 8002c1c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c20:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002c24:	b2e4      	uxtb	r4, r4
 8002c26:	2c01      	cmp	r4, #1
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002c30:	2002      	movs	r0, #2
}
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c36:	2002      	movs	r0, #2
 8002c38:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fed1 	bl	80029e8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c48:	233f      	movs	r3, #63	; 0x3f
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	f043 0316 	orr.w	r3, r3, #22
 8002c56:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6953      	ldr	r3, [r2, #20]
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c64:	b123      	cbz	r3, 8002c70 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e7d9      	b.n	8002c32 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002c7e:	2002      	movs	r0, #2
 8002c80:	e7d7      	b.n	8002c32 <HAL_DMA_Start_IT+0x24>
	...

08002c84 <HAL_DMA_IRQHandler>:
{
 8002c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c8e:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <HAL_DMA_IRQHandler+0x1d4>)
 8002c90:	681d      	ldr	r5, [r3, #0]
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <HAL_DMA_IRQHandler+0x1d8>)
 8002c94:	fba3 3505 	umull	r3, r5, r3, r5
 8002c98:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002c9c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	4233      	tst	r3, r6
 8002ca6:	d010      	beq.n	8002cca <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f012 0f04 	tst.w	r2, #4
 8002cb0:	d00b      	beq.n	8002cca <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f022 0204 	bic.w	r2, r2, #4
 8002cb8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ccc:	2301      	movs	r3, #1
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	4233      	tst	r3, r6
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	6952      	ldr	r2, [r2, #20]
 8002cd8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cde:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002cea:	2304      	movs	r3, #4
 8002cec:	4093      	lsls	r3, r2
 8002cee:	4233      	tst	r3, r6
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	f012 0f02 	tst.w	r2, #2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cfc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d08:	2310      	movs	r3, #16
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	4233      	tst	r3, r6
 8002d0e:	d024      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f012 0f08 	tst.w	r2, #8
 8002d18:	d01f      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d1a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d24:	d00d      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d2c:	d104      	bne.n	8002d38 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d30:	b19b      	cbz	r3, 8002d5a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002d32:	4620      	mov	r0, r4
 8002d34:	4798      	blx	r3
 8002d36:	e010      	b.n	8002d5a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d3a:	b173      	cbz	r3, 8002d5a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4798      	blx	r3
 8002d40:	e00b      	b.n	8002d5a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d48:	d103      	bne.n	8002d52 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d54:	b10b      	cbz	r3, 8002d5a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002d56:	4620      	mov	r0, r4
 8002d58:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	4233      	tst	r3, r6
 8002d62:	d055      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	f012 0f10 	tst.w	r2, #16
 8002d6c:	d050      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d6e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d70:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d82:	d033      	beq.n	8002dec <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d8a:	d12a      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002d8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03e      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002d92:	4620      	mov	r0, r4
 8002d94:	4798      	blx	r3
 8002d96:	e03b      	b.n	8002e10 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f023 0316 	bic.w	r3, r3, #22
 8002da0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	6953      	ldr	r3, [r2, #20]
 8002da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002daa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dae:	b1a3      	cbz	r3, 8002dda <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	f023 0308 	bic.w	r3, r3, #8
 8002db8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002dbc:	233f      	movs	r3, #63	; 0x3f
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002dce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03f      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4798      	blx	r3
 8002dd8:	e03c      	b.n	8002e54 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e7      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x12c>
 8002de0:	e7eb      	b.n	8002dba <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002de4:	b1a3      	cbz	r3, 8002e10 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002de6:	4620      	mov	r0, r4
 8002de8:	4798      	blx	r3
 8002dea:	e011      	b.n	8002e10 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002df2:	d109      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f022 0210 	bic.w	r2, r2, #16
 8002dfa:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e0a:	b10b      	cbz	r3, 8002e10 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e12:	b1fb      	cbz	r3, 8002e54 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e16:	f013 0f01 	tst.w	r3, #1
 8002e1a:	d017      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	42ab      	cmp	r3, r5
 8002e34:	d804      	bhi.n	8002e40 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f013 0f01 	tst.w	r3, #1
 8002e3e:	d1f5      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002e40:	2300      	movs	r3, #0
 8002e42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002e4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e4e:	b10b      	cbz	r3, 8002e54 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002e50:	4620      	mov	r0, r4
 8002e52:	4798      	blx	r3
}
 8002e54:	b003      	add	sp, #12
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e58:	20000058 	.word	0x20000058
 8002e5c:	1b4e81b5 	.word	0x1b4e81b5

08002e60 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002e60:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002e62:	6806      	ldr	r6, [r0, #0]
 8002e64:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002e66:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002e6a:	9d03      	ldr	r5, [sp, #12]
 8002e6c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002e70:	431c      	orrs	r4, r3
 8002e72:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e78:	6843      	ldr	r3, [r0, #4]
 8002e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e7e:	d003      	beq.n	8002e88 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e80:	6803      	ldr	r3, [r0, #0]
 8002e82:	60d9      	str	r1, [r3, #12]
  }
}
 8002e84:	bc70      	pop	{r4, r5, r6}
 8002e86:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e88:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e8c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e90:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e94:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e96:	6884      	ldr	r4, [r0, #8]
 8002e98:	b194      	cbz	r4, 8002ec0 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e9a:	2c01      	cmp	r4, #1
 8002e9c:	d00e      	beq.n	8002ebc <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e9e:	2c02      	cmp	r4, #2
 8002ea0:	d011      	beq.n	8002ec6 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002ea2:	2c03      	cmp	r4, #3
 8002ea4:	d017      	beq.n	8002ed6 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002ea6:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002ea8:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002eaa:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002eac:	0219      	lsls	r1, r3, #8
 8002eae:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002eb2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002eb6:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002eba:	e001      	b.n	8002ec0 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002ebc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	6399      	str	r1, [r3, #56]	; 0x38
 8002ec4:	e7de      	b.n	8002e84 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002ec6:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002ec8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002eca:	02d9      	lsls	r1, r3, #11
 8002ecc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002ed0:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002ed4:	e7f4      	b.n	8002ec0 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002ed6:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002ed8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002eda:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002edc:	0299      	lsls	r1, r3, #10
 8002ede:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002ee2:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002ee6:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002eea:	e7e9      	b.n	8002ec0 <DMA2D_SetConfig+0x60>

08002eec <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8002eec:	b338      	cbz	r0, 8002f3e <HAL_DMA2D_Init+0x52>
{
 8002eee:	b510      	push	{r4, lr}
 8002ef0:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ef2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ef6:	b1eb      	cbz	r3, 8002f34 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f06:	6861      	ldr	r1, [r4, #4]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002f10:	f023 0307 	bic.w	r3, r3, #7
 8002f14:	68a1      	ldr	r1, [r4, #8]
 8002f16:	430b      	orrs	r3, r1
 8002f18:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_DMA2D_Init+0x58>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	68e1      	ldr	r1, [r4, #12]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f28:	2000      	movs	r0, #0
 8002f2a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002f32:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002f34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002f38:	f005 fd6a 	bl	8008a10 <HAL_DMA2D_MspInit>
 8002f3c:	e7dc      	b.n	8002ef8 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8002f3e:	2001      	movs	r0, #1
}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	ffffc000 	.word	0xffffc000

08002f48 <HAL_DMA2D_Start>:
{
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8002f4c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002f50:	2c01      	cmp	r4, #1
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA2D_Start+0x34>
 8002f54:	4604      	mov	r4, r0
 8002f56:	2001      	movs	r0, #1
 8002f58:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002f62:	9804      	ldr	r0, [sp, #16]
 8002f64:	9000      	str	r0, [sp, #0]
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff ff7a 	bl	8002e60 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002f76:	2000      	movs	r0, #0
}
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	e7fb      	b.n	8002f78 <HAL_DMA2D_Start+0x30>

08002f80 <HAL_DMA2D_PollForTransfer>:
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f8c:	6803      	ldr	r3, [r0, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f013 0f01 	tst.w	r3, #1
 8002f94:	d111      	bne.n	8002fba <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002f9e:	f013 0f20 	tst.w	r3, #32
 8002fa2:	d147      	bne.n	8003034 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	2212      	movs	r2, #18
 8002fa8:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002fba:	f7ff f85b 	bl	8002074 <HAL_GetTick>
 8002fbe:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	f012 0f02 	tst.w	r2, #2
 8002fc8:	d1e5      	bne.n	8002f96 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002fce:	9a01      	ldr	r2, [sp, #4]
 8002fd0:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002fd4:	d114      	bne.n	8003000 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8002fd6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002fda:	d0f1      	beq.n	8002fc0 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002fdc:	f7ff f84a 	bl	8002074 <HAL_GetTick>
 8002fe0:	1b80      	subs	r0, r0, r6
 8002fe2:	42a8      	cmp	r0, r5
 8002fe4:	d801      	bhi.n	8002fea <HAL_DMA2D_PollForTransfer+0x6a>
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d1ea      	bne.n	8002fc0 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002ffe:	e7da      	b.n	8002fb6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003000:	9a01      	ldr	r2, [sp, #4]
 8003002:	f012 0f20 	tst.w	r2, #32
 8003006:	d003      	beq.n	8003010 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003008:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800300a:	f042 0202 	orr.w	r2, r2, #2
 800300e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003010:	9a01      	ldr	r2, [sp, #4]
 8003012:	f012 0f01 	tst.w	r2, #1
 8003016:	d003      	beq.n	8003020 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003018:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003020:	2221      	movs	r2, #33	; 0x21
 8003022:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003024:	2304      	movs	r3, #4
 8003026:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800302a:	2300      	movs	r3, #0
 800302c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e7c0      	b.n	8002fb6 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8003034:	f7ff f81e 	bl	8002074 <HAL_GetTick>
 8003038:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	f012 0f10 	tst.w	r2, #16
 8003042:	d1af      	bne.n	8002fa4 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003048:	9a01      	ldr	r2, [sp, #4]
 800304a:	f012 0f29 	tst.w	r2, #41	; 0x29
 800304e:	d114      	bne.n	800307a <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8003050:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003054:	d0f1      	beq.n	800303a <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003056:	f7ff f80d 	bl	8002074 <HAL_GetTick>
 800305a:	1b80      	subs	r0, r0, r6
 800305c:	42a8      	cmp	r0, r5
 800305e:	d801      	bhi.n	8003064 <HAL_DMA2D_PollForTransfer+0xe4>
 8003060:	2d00      	cmp	r5, #0
 8003062:	d1ea      	bne.n	800303a <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003064:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800306c:	2003      	movs	r0, #3
 800306e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003072:	2300      	movs	r3, #0
 8003074:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003078:	e79d      	b.n	8002fb6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800307a:	9a01      	ldr	r2, [sp, #4]
 800307c:	f012 0f08 	tst.w	r2, #8
 8003080:	d003      	beq.n	800308a <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003082:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003084:	f042 0204 	orr.w	r2, r2, #4
 8003088:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800308a:	9a01      	ldr	r2, [sp, #4]
 800308c:	f012 0f20 	tst.w	r2, #32
 8003090:	d003      	beq.n	800309a <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003092:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003094:	f042 0202 	orr.w	r2, r2, #2
 8003098:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800309a:	9a01      	ldr	r2, [sp, #4]
 800309c:	f012 0f01 	tst.w	r2, #1
 80030a0:	d003      	beq.n	80030aa <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030aa:	2229      	movs	r2, #41	; 0x29
 80030ac:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80030ae:	2304      	movs	r3, #4
 80030b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80030b4:	2300      	movs	r3, #0
 80030b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e77b      	b.n	8002fb6 <HAL_DMA2D_PollForTransfer+0x36>
	...

080030c0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80030c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d059      	beq.n	800317c <HAL_DMA2D_ConfigLayer+0xbc>
{
 80030c8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80030ca:	2301      	movs	r3, #1
 80030cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80030d6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	1c8b      	adds	r3, r1, #2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	58c3      	ldr	r3, [r0, r3]
 80030e2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030e6:	3a09      	subs	r2, #9
 80030e8:	2a01      	cmp	r2, #1
 80030ea:	d91e      	bls.n	800312a <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030ec:	1c8a      	adds	r2, r1, #2
 80030ee:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030f8:	bb41      	cbnz	r1, 800314c <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80030fa:	6804      	ldr	r4, [r0, #0]
 80030fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030fe:	4a20      	ldr	r2, [pc, #128]	; (8003180 <HAL_DMA2D_ConfigLayer+0xc0>)
 8003100:	402a      	ands	r2, r5
 8003102:	4313      	orrs	r3, r2
 8003104:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003106:	6802      	ldr	r2, [r0, #0]
 8003108:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800310c:	699c      	ldr	r4, [r3, #24]
 800310e:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	3b09      	subs	r3, #9
 8003114:	2b01      	cmp	r3, #1
 8003116:	d910      	bls.n	800313a <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003118:	2301      	movs	r3, #1
 800311a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800311e:	2300      	movs	r3, #0
 8003120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8003124:	4618      	mov	r0, r3
}
 8003126:	bc30      	pop	{r4, r5}
 8003128:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800312a:	1c8a      	adds	r2, r1, #2
 800312c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003130:	6852      	ldr	r2, [r2, #4]
 8003132:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003136:	4313      	orrs	r3, r2
 8003138:	e7de      	b.n	80030f8 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800313a:	3102      	adds	r1, #2
 800313c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003140:	684b      	ldr	r3, [r1, #4]
 8003142:	6802      	ldr	r2, [r0, #0]
 8003144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003148:	6293      	str	r3, [r2, #40]	; 0x28
 800314a:	e7e5      	b.n	8003118 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800314c:	6804      	ldr	r4, [r0, #0]
 800314e:	69e5      	ldr	r5, [r4, #28]
 8003150:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <HAL_DMA2D_ConfigLayer+0xc0>)
 8003152:	402a      	ands	r2, r5
 8003154:	4313      	orrs	r3, r2
 8003156:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003158:	6802      	ldr	r2, [r0, #0]
 800315a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800315e:	699c      	ldr	r4, [r3, #24]
 8003160:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	3b09      	subs	r3, #9
 8003166:	2b01      	cmp	r3, #1
 8003168:	d8d6      	bhi.n	8003118 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800316a:	3102      	adds	r1, #2
 800316c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003170:	684b      	ldr	r3, [r1, #4]
 8003172:	6802      	ldr	r2, [r0, #0]
 8003174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	e7cd      	b.n	8003118 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800317c:	2002      	movs	r0, #2
}
 800317e:	4770      	bx	lr
 8003180:	00fcfff0 	.word	0x00fcfff0

08003184 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003184:	2300      	movs	r3, #0
 8003186:	2b0f      	cmp	r3, #15
 8003188:	f200 80e2 	bhi.w	8003350 <HAL_GPIO_Init+0x1cc>
{
 800318c:	b4f0      	push	{r4, r5, r6, r7}
 800318e:	b082      	sub	sp, #8
 8003190:	e039      	b.n	8003206 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003192:	2209      	movs	r2, #9
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x14>
 8003196:	2200      	movs	r2, #0
 8003198:	40b2      	lsls	r2, r6
 800319a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800319c:	3402      	adds	r4, #2
 800319e:	4e6d      	ldr	r6, [pc, #436]	; (8003354 <HAL_GPIO_Init+0x1d0>)
 80031a0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a4:	4a6c      	ldr	r2, [pc, #432]	; (8003358 <HAL_GPIO_Init+0x1d4>)
 80031a6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	43ea      	mvns	r2, r5
 80031aa:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ae:	684f      	ldr	r7, [r1, #4]
 80031b0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80031b4:	d001      	beq.n	80031ba <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80031b6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80031ba:	4c67      	ldr	r4, [pc, #412]	; (8003358 <HAL_GPIO_Init+0x1d4>)
 80031bc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80031be:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c4:	684f      	ldr	r7, [r1, #4]
 80031c6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80031ca:	d001      	beq.n	80031d0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80031cc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80031d0:	4c61      	ldr	r4, [pc, #388]	; (8003358 <HAL_GPIO_Init+0x1d4>)
 80031d2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031da:	684f      	ldr	r7, [r1, #4]
 80031dc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80031e0:	d001      	beq.n	80031e6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80031e2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80031e6:	4c5c      	ldr	r4, [pc, #368]	; (8003358 <HAL_GPIO_Init+0x1d4>)
 80031e8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80031ea:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ee:	684e      	ldr	r6, [r1, #4]
 80031f0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80031f4:	d001      	beq.n	80031fa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80031f6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80031fa:	4c57      	ldr	r4, [pc, #348]	; (8003358 <HAL_GPIO_Init+0x1d4>)
 80031fc:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031fe:	3301      	adds	r3, #1
 8003200:	2b0f      	cmp	r3, #15
 8003202:	f200 80a2 	bhi.w	800334a <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	680c      	ldr	r4, [r1, #0]
 800320c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003210:	42aa      	cmp	r2, r5
 8003212:	d1f4      	bne.n	80031fe <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003214:	684c      	ldr	r4, [r1, #4]
 8003216:	2c12      	cmp	r4, #18
 8003218:	bf18      	it	ne
 800321a:	2c02      	cmpne	r4, #2
 800321c:	d110      	bne.n	8003240 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800321e:	08de      	lsrs	r6, r3, #3
 8003220:	3608      	adds	r6, #8
 8003222:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003226:	f003 0407 	and.w	r4, r3, #7
 800322a:	00a7      	lsls	r7, r4, #2
 800322c:	240f      	movs	r4, #15
 800322e:	40bc      	lsls	r4, r7
 8003230:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003234:	690c      	ldr	r4, [r1, #16]
 8003236:	40bc      	lsls	r4, r7
 8003238:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 800323c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003240:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003242:	005f      	lsls	r7, r3, #1
 8003244:	2603      	movs	r6, #3
 8003246:	40be      	lsls	r6, r7
 8003248:	43f6      	mvns	r6, r6
 800324a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800324e:	684c      	ldr	r4, [r1, #4]
 8003250:	f004 0403 	and.w	r4, r4, #3
 8003254:	40bc      	lsls	r4, r7
 8003256:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800325a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325c:	684c      	ldr	r4, [r1, #4]
 800325e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003262:	2c11      	cmp	r4, #17
 8003264:	bf18      	it	ne
 8003266:	f1bc 0f01 	cmpne.w	ip, #1
 800326a:	d901      	bls.n	8003270 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326c:	2c12      	cmp	r4, #18
 800326e:	d111      	bne.n	8003294 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003270:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003272:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003276:	68cc      	ldr	r4, [r1, #12]
 8003278:	40bc      	lsls	r4, r7
 800327a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800327e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003280:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003282:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003286:	684c      	ldr	r4, [r1, #4]
 8003288:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800328c:	409a      	lsls	r2, r3
 800328e:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8003292:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003294:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003296:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003298:	688a      	ldr	r2, [r1, #8]
 800329a:	40ba      	lsls	r2, r7
 800329c:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800329e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a0:	684a      	ldr	r2, [r1, #4]
 80032a2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80032a6:	d0aa      	beq.n	80031fe <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a8:	4a2c      	ldr	r2, [pc, #176]	; (800335c <HAL_GPIO_Init+0x1d8>)
 80032aa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80032ac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80032b0:	6454      	str	r4, [r2, #68]	; 0x44
 80032b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032b4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80032bc:	089c      	lsrs	r4, r3, #2
 80032be:	1ca6      	adds	r6, r4, #2
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_GPIO_Init+0x1d0>)
 80032c2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	0096      	lsls	r6, r2, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	40b2      	lsls	r2, r6
 80032d0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_GPIO_Init+0x1dc>)
 80032d6:	4290      	cmp	r0, r2
 80032d8:	f43f af5d 	beq.w	8003196 <HAL_GPIO_Init+0x12>
 80032dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e0:	4290      	cmp	r0, r2
 80032e2:	d022      	beq.n	800332a <HAL_GPIO_Init+0x1a6>
 80032e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e8:	4290      	cmp	r0, r2
 80032ea:	d020      	beq.n	800332e <HAL_GPIO_Init+0x1aa>
 80032ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f0:	4290      	cmp	r0, r2
 80032f2:	d01e      	beq.n	8003332 <HAL_GPIO_Init+0x1ae>
 80032f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d01c      	beq.n	8003336 <HAL_GPIO_Init+0x1b2>
 80032fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003300:	4290      	cmp	r0, r2
 8003302:	d01a      	beq.n	800333a <HAL_GPIO_Init+0x1b6>
 8003304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003308:	4290      	cmp	r0, r2
 800330a:	d018      	beq.n	800333e <HAL_GPIO_Init+0x1ba>
 800330c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003310:	4290      	cmp	r0, r2
 8003312:	d016      	beq.n	8003342 <HAL_GPIO_Init+0x1be>
 8003314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003318:	4290      	cmp	r0, r2
 800331a:	d014      	beq.n	8003346 <HAL_GPIO_Init+0x1c2>
 800331c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003320:	4290      	cmp	r0, r2
 8003322:	f43f af36 	beq.w	8003192 <HAL_GPIO_Init+0xe>
 8003326:	220a      	movs	r2, #10
 8003328:	e736      	b.n	8003198 <HAL_GPIO_Init+0x14>
 800332a:	2201      	movs	r2, #1
 800332c:	e734      	b.n	8003198 <HAL_GPIO_Init+0x14>
 800332e:	2202      	movs	r2, #2
 8003330:	e732      	b.n	8003198 <HAL_GPIO_Init+0x14>
 8003332:	2203      	movs	r2, #3
 8003334:	e730      	b.n	8003198 <HAL_GPIO_Init+0x14>
 8003336:	2204      	movs	r2, #4
 8003338:	e72e      	b.n	8003198 <HAL_GPIO_Init+0x14>
 800333a:	2205      	movs	r2, #5
 800333c:	e72c      	b.n	8003198 <HAL_GPIO_Init+0x14>
 800333e:	2206      	movs	r2, #6
 8003340:	e72a      	b.n	8003198 <HAL_GPIO_Init+0x14>
 8003342:	2207      	movs	r2, #7
 8003344:	e728      	b.n	8003198 <HAL_GPIO_Init+0x14>
 8003346:	2208      	movs	r2, #8
 8003348:	e726      	b.n	8003198 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800334a:	b002      	add	sp, #8
 800334c:	bcf0      	pop	{r4, r5, r6, r7}
 800334e:	4770      	bx	lr
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40013800 	.word	0x40013800
 8003358:	40013c00 	.word	0x40013c00
 800335c:	40023800 	.word	0x40023800
 8003360:	40020000 	.word	0x40020000

08003364 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003364:	6903      	ldr	r3, [r0, #16]
 8003366:	4219      	tst	r1, r3
 8003368:	d101      	bne.n	800336e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800336c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800336e:	2001      	movs	r0, #1
 8003370:	4770      	bx	lr

08003372 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003372:	b912      	cbnz	r2, 800337a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003374:	0409      	lsls	r1, r1, #16
 8003376:	6181      	str	r1, [r0, #24]
  }
}
 8003378:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800337a:	6181      	str	r1, [r0, #24]
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4203      	tst	r3, r0
 8003388:	d100      	bne.n	800338c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800338a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800338e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003390:	f006 f9e8 	bl	8009764 <HAL_GPIO_EXTI_Callback>
}
 8003394:	e7f9      	b.n	800338a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003396:	bf00      	nop
 8003398:	40013c00 	.word	0x40013c00

0800339c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	f012 0f02 	tst.w	r2, #2
 80033a4:	d001      	beq.n	80033aa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	6803      	ldr	r3, [r0, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	f012 0f01 	tst.w	r2, #1
 80033b2:	d103      	bne.n	80033bc <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	619a      	str	r2, [r3, #24]
  }
}
 80033bc:	4770      	bx	lr

080033be <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80033be:	b470      	push	{r4, r5, r6}
 80033c0:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033c2:	6805      	ldr	r5, [r0, #0]
 80033c4:	6868      	ldr	r0, [r5, #4]
 80033c6:	0d74      	lsrs	r4, r6, #21
 80033c8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80033cc:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80033d0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80033d4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80033d8:	f044 0403 	orr.w	r4, r4, #3
 80033dc:	ea20 0004 	bic.w	r0, r0, r4
 80033e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80033e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80033e8:	4319      	orrs	r1, r3
 80033ea:	4331      	orrs	r1, r6
 80033ec:	4301      	orrs	r1, r0
 80033ee:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033f0:	bc70      	pop	{r4, r5, r6}
 80033f2:	4770      	bx	lr

080033f4 <I2C_IsAcknowledgeFailed>:
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	460d      	mov	r5, r1
 80033fa:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f013 0f10 	tst.w	r3, #16
 8003404:	d01c      	beq.n	8003440 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	f012 0f20 	tst.w	r2, #32
 800340e:	d119      	bne.n	8003444 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003410:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003414:	d0f7      	beq.n	8003406 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fe2d 	bl	8002074 <HAL_GetTick>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	42a8      	cmp	r0, r5
 800341e:	d801      	bhi.n	8003424 <I2C_IsAcknowledgeFailed+0x30>
 8003420:	2d00      	cmp	r5, #0
 8003422:	d1f0      	bne.n	8003406 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003426:	f043 0320 	orr.w	r3, r3, #32
 800342a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800342c:	2320      	movs	r3, #32
 800342e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
 800343e:	e020      	b.n	8003482 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8003440:	2000      	movs	r0, #0
 8003442:	e01e      	b.n	8003482 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	2210      	movs	r2, #16
 8003446:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	2520      	movs	r5, #32
 800344c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ffa4 	bl	800339c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	6853      	ldr	r3, [r2, #4]
 8003458:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800345c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003460:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800347c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
}
 8003482:	bd70      	pop	{r4, r5, r6, pc}

08003484 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	460d      	mov	r5, r1
 800348a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f013 0f02 	tst.w	r3, #2
 8003494:	d11d      	bne.n	80034d2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	4632      	mov	r2, r6
 8003498:	4629      	mov	r1, r5
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff ffaa 	bl	80033f4 <I2C_IsAcknowledgeFailed>
 80034a0:	b9c8      	cbnz	r0, 80034d6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80034a6:	d0f1      	beq.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7fe fde4 	bl	8002074 <HAL_GetTick>
 80034ac:	1b80      	subs	r0, r0, r6
 80034ae:	42a8      	cmp	r0, r5
 80034b0:	d801      	bhi.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d1ea      	bne.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034be:	2320      	movs	r3, #32
 80034c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80034ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
 80034d0:	e000      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80034d2:	2000      	movs	r0, #0
}
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7fc      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080034da <I2C_WaitOnFlagUntilTimeout>:
{
 80034da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034dc:	4605      	mov	r5, r0
 80034de:	460f      	mov	r7, r1
 80034e0:	4616      	mov	r6, r2
 80034e2:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	ea37 0303 	bics.w	r3, r7, r3
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	42b3      	cmp	r3, r6
 80034f4:	d118      	bne.n	8003528 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80034fa:	d0f3      	beq.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7fe fdba 	bl	8002074 <HAL_GetTick>
 8003500:	9b06      	ldr	r3, [sp, #24]
 8003502:	1ac0      	subs	r0, r0, r3
 8003504:	42a0      	cmp	r0, r4
 8003506:	d801      	bhi.n	800350c <I2C_WaitOnFlagUntilTimeout+0x32>
 8003508:	2c00      	cmp	r4, #0
 800350a:	d1eb      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003514:	2320      	movs	r3, #32
 8003516:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	2300      	movs	r3, #0
 800351c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003520:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003524:	2001      	movs	r0, #1
 8003526:	e000      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003528:	2000      	movs	r0, #0
}
 800352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800352c <I2C_RequestMemoryWrite>:
{
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	4604      	mov	r4, r0
 8003532:	4616      	mov	r6, r2
 8003534:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <I2C_RequestMemoryWrite+0x6c>)
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800353e:	b2ea      	uxtb	r2, r5
 8003540:	f7ff ff3d 	bl	80033be <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003544:	9a07      	ldr	r2, [sp, #28]
 8003546:	9906      	ldr	r1, [sp, #24]
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ff9b 	bl	8003484 <I2C_WaitOnTXISFlagUntilTimeout>
 800354e:	b9e8      	cbnz	r0, 800358c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003550:	2d01      	cmp	r5, #1
 8003552:	d10e      	bne.n	8003572 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	b2f6      	uxtb	r6, r6
 8003558:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800355a:	9b07      	ldr	r3, [sp, #28]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	9b06      	ldr	r3, [sp, #24]
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff ffb8 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	b178      	cbz	r0, 800358e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e00d      	b.n	800358e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	0a32      	lsrs	r2, r6, #8
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003578:	9a07      	ldr	r2, [sp, #28]
 800357a:	9906      	ldr	r1, [sp, #24]
 800357c:	4620      	mov	r0, r4
 800357e:	f7ff ff81 	bl	8003484 <I2C_WaitOnTXISFlagUntilTimeout>
 8003582:	b938      	cbnz	r0, 8003594 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	b2f6      	uxtb	r6, r6
 8003588:	629e      	str	r6, [r3, #40]	; 0x28
 800358a:	e7e6      	b.n	800355a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
}
 800358e:	4618      	mov	r0, r3
 8003590:	b002      	add	sp, #8
 8003592:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e7fa      	b.n	800358e <I2C_RequestMemoryWrite+0x62>
 8003598:	80002000 	.word	0x80002000

0800359c <I2C_RequestMemoryRead>:
{
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	4604      	mov	r4, r0
 80035a2:	4616      	mov	r6, r2
 80035a4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <I2C_RequestMemoryRead+0x6c>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	b2ea      	uxtb	r2, r5
 80035ae:	f7ff ff06 	bl	80033be <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	9a07      	ldr	r2, [sp, #28]
 80035b4:	9906      	ldr	r1, [sp, #24]
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ff64 	bl	8003484 <I2C_WaitOnTXISFlagUntilTimeout>
 80035bc:	b9e8      	cbnz	r0, 80035fa <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035be:	2d01      	cmp	r5, #1
 80035c0:	d10e      	bne.n	80035e0 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	b2f6      	uxtb	r6, r6
 80035c6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	9b07      	ldr	r3, [sp, #28]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	9b06      	ldr	r3, [sp, #24]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff ff81 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	b178      	cbz	r0, 80035fc <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00d      	b.n	80035fc <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	0a32      	lsrs	r2, r6, #8
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e6:	9a07      	ldr	r2, [sp, #28]
 80035e8:	9906      	ldr	r1, [sp, #24]
 80035ea:	4620      	mov	r0, r4
 80035ec:	f7ff ff4a 	bl	8003484 <I2C_WaitOnTXISFlagUntilTimeout>
 80035f0:	b938      	cbnz	r0, 8003602 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	b2f6      	uxtb	r6, r6
 80035f6:	629e      	str	r6, [r3, #40]	; 0x28
 80035f8:	e7e6      	b.n	80035c8 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	b002      	add	sp, #8
 8003600:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e7fa      	b.n	80035fc <I2C_RequestMemoryRead+0x60>
 8003606:	bf00      	nop
 8003608:	80002000 	.word	0x80002000

0800360c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4605      	mov	r5, r0
 8003610:	460c      	mov	r4, r1
 8003612:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f013 0f20 	tst.w	r3, #32
 800361c:	d11a      	bne.n	8003654 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	4632      	mov	r2, r6
 8003620:	4621      	mov	r1, r4
 8003622:	4628      	mov	r0, r5
 8003624:	f7ff fee6 	bl	80033f4 <I2C_IsAcknowledgeFailed>
 8003628:	b9b0      	cbnz	r0, 8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fd23 	bl	8002074 <HAL_GetTick>
 800362e:	1b80      	subs	r0, r0, r6
 8003630:	42a0      	cmp	r0, r4
 8003632:	d801      	bhi.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003634:	2c00      	cmp	r4, #0
 8003636:	d1ed      	bne.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800363a:	f043 0320 	orr.w	r3, r3, #32
 800363e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003640:	2320      	movs	r3, #32
 8003642:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800364c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003650:	2001      	movs	r0, #1
}
 8003652:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003654:	2000      	movs	r0, #0
 8003656:	e7fc      	b.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
 800365a:	e7fa      	b.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800365c <HAL_I2C_MspInit>:
}
 800365c:	4770      	bx	lr
	...

08003660 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003660:	2800      	cmp	r0, #0
 8003662:	d057      	beq.n	8003714 <HAL_I2C_Init+0xb4>
{
 8003664:	b510      	push	{r4, lr}
 8003666:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003668:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800366c:	2b00      	cmp	r3, #0
 800366e:	d041      	beq.n	80036f4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	2324      	movs	r3, #36	; 0x24
 8003672:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003688:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	6893      	ldr	r3, [r2, #8]
 800368e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003692:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003694:	68e3      	ldr	r3, [r4, #12]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d031      	beq.n	80036fe <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	6822      	ldr	r2, [r4, #0]
 800369e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80036a2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d02f      	beq.n	800370a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	6851      	ldr	r1, [r2, #4]
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_I2C_Init+0xb8>)
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	68d3      	ldr	r3, [r2, #12]
 80036b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036bc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	6962      	ldr	r2, [r4, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	69a1      	ldr	r1, [r4, #24]
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036cc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ce:	69e3      	ldr	r3, [r4, #28]
 80036d0:	6a21      	ldr	r1, [r4, #32]
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80036d8:	6822      	ldr	r2, [r4, #0]
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e2:	2000      	movs	r0, #0
 80036e4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	2320      	movs	r3, #32
 80036e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ec:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80036f2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80036f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80036f8:	f7ff ffb0 	bl	800365c <HAL_I2C_MspInit>
 80036fc:	e7b8      	b.n	8003670 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036fe:	68a3      	ldr	r3, [r4, #8]
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003706:	6093      	str	r3, [r2, #8]
 8003708:	e7cc      	b.n	80036a4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e7ca      	b.n	80036aa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003714:	2001      	movs	r0, #1
}
 8003716:	4770      	bx	lr
 8003718:	02008000 	.word	0x02008000

0800371c <HAL_I2C_MspDeInit>:
}
 800371c:	4770      	bx	lr

0800371e <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800371e:	b1a8      	cbz	r0, 800374c <HAL_I2C_DeInit+0x2e>
{
 8003720:	b510      	push	{r4, lr}
 8003722:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	2324      	movs	r3, #36	; 0x24
 8003726:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800372a:	6802      	ldr	r2, [r0, #0]
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003734:	f7ff fff2 	bl	800371c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003738:	2000      	movs	r0, #0
 800373a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800373c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003740:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003746:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800374a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800374c:	2001      	movs	r0, #1
}
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_Mem_Write>:
{
 8003750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800375e:	b2ed      	uxtb	r5, r5
 8003760:	2d20      	cmp	r5, #32
 8003762:	f040 80bf 	bne.w	80038e4 <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 8003766:	fab6 f586 	clz	r5, r6
 800376a:	096d      	lsrs	r5, r5, #5
 800376c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800376e:	2c00      	cmp	r4, #0
 8003770:	bf08      	it	eq
 8003772:	2501      	moveq	r5, #1
 8003774:	b9d5      	cbnz	r5, 80037ac <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 8003776:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800377a:	2c01      	cmp	r4, #1
 800377c:	f000 80b7 	beq.w	80038ee <HAL_I2C_Mem_Write+0x19e>
 8003780:	4698      	mov	r8, r3
 8003782:	4691      	mov	r9, r2
 8003784:	460d      	mov	r5, r1
 8003786:	4604      	mov	r4, r0
 8003788:	f04f 0a01 	mov.w	sl, #1
 800378c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003790:	f7fe fc70 	bl	8002074 <HAL_GetTick>
 8003794:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003796:	9000      	str	r0, [sp, #0]
 8003798:	2319      	movs	r3, #25
 800379a:	4652      	mov	r2, sl
 800379c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff fe9a 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 80037a6:	b130      	cbz	r0, 80037b6 <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e09c      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e097      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b6:	2321      	movs	r3, #33	; 0x21
 80037b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80037c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037c8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80037ca:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037cc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ce:	9701      	str	r7, [sp, #4]
 80037d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4643      	mov	r3, r8
 80037d6:	464a      	mov	r2, r9
 80037d8:	4629      	mov	r1, r5
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fea6 	bl	800352c <I2C_RequestMemoryWrite>
 80037e0:	b970      	cbnz	r0, 8003800 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2bff      	cmp	r3, #255	; 0xff
 80037e8:	d90f      	bls.n	800380a <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f6:	4629      	mov	r1, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff fde0 	bl	80033be <I2C_TransferConfig>
 80037fe:	e021      	b.n	8003844 <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003800:	2300      	movs	r3, #0
 8003802:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003806:	4653      	mov	r3, sl
 8003808:	e06d      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800380a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800380c:	b292      	uxth	r2, r2
 800380e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003810:	2300      	movs	r3, #0
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	4629      	mov	r1, r5
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff fdce 	bl	80033be <I2C_TransferConfig>
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003824:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003826:	b292      	uxth	r2, r2
 8003828:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800382a:	2300      	movs	r3, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	4629      	mov	r1, r5
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff fdc1 	bl	80033be <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800383c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d032      	beq.n	80038aa <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003844:	463a      	mov	r2, r7
 8003846:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff fe1b 	bl	8003484 <I2C_WaitOnTXISFlagUntilTimeout>
 800384e:	2800      	cmp	r0, #0
 8003850:	d14f      	bne.n	80038f2 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003852:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800385a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385c:	3301      	adds	r3, #1
 800385e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003862:	3b01      	subs	r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003868:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003870:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003872:	b292      	uxth	r2, r2
 8003874:	2a00      	cmp	r2, #0
 8003876:	d0e1      	beq.n	800383c <HAL_I2C_Mem_Write+0xec>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1df      	bne.n	800383c <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800387c:	9700      	str	r7, [sp, #0]
 800387e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff fe28 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 800388a:	bba0      	cbnz	r0, 80038f6 <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2bff      	cmp	r3, #255	; 0xff
 8003892:	d9c7      	bls.n	8003824 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003894:	22ff      	movs	r2, #255	; 0xff
 8003896:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a0:	4629      	mov	r1, r5
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff fd8b 	bl	80033be <I2C_TransferConfig>
 80038a8:	e7c8      	b.n	800383c <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	463a      	mov	r2, r7
 80038ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff feac 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	bb00      	cbnz	r0, 80038fa <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	2120      	movs	r1, #32
 80038bc:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	6842      	ldr	r2, [r0, #4]
 80038c2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80038c6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80038ca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d8:	2200      	movs	r2, #0
 80038da:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80038de:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80038e2:	e000      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	b002      	add	sp, #8
 80038ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80038ee:	2302      	movs	r3, #2
 80038f0:	e7f9      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e7f7      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e7f5      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e7f3      	b.n	80038e6 <HAL_I2C_Mem_Write+0x196>
	...

08003900 <HAL_I2C_Mem_Read>:
{
 8003900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800390e:	b2ed      	uxtb	r5, r5
 8003910:	2d20      	cmp	r5, #32
 8003912:	f040 80c1 	bne.w	8003a98 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 8003916:	fab6 f586 	clz	r5, r6
 800391a:	096d      	lsrs	r5, r5, #5
 800391c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800391e:	2c00      	cmp	r4, #0
 8003920:	bf08      	it	eq
 8003922:	2501      	moveq	r5, #1
 8003924:	b9d5      	cbnz	r5, 800395c <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 8003926:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800392a:	2c01      	cmp	r4, #1
 800392c:	f000 80b9 	beq.w	8003aa2 <HAL_I2C_Mem_Read+0x1a2>
 8003930:	4698      	mov	r8, r3
 8003932:	4691      	mov	r9, r2
 8003934:	460d      	mov	r5, r1
 8003936:	4604      	mov	r4, r0
 8003938:	f04f 0a01 	mov.w	sl, #1
 800393c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003940:	f7fe fb98 	bl	8002074 <HAL_GetTick>
 8003944:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003946:	9000      	str	r0, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	4652      	mov	r2, sl
 800394c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff fdc2 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 8003956:	b130      	cbz	r0, 8003966 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e09e      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800395c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003960:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e099      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003966:	2322      	movs	r3, #34	; 0x22
 8003968:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800396c:	2340      	movs	r3, #64	; 0x40
 800396e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003972:	2300      	movs	r3, #0
 8003974:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003978:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800397a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800397c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800397e:	9701      	str	r7, [sp, #4]
 8003980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4643      	mov	r3, r8
 8003986:	464a      	mov	r2, r9
 8003988:	4629      	mov	r1, r5
 800398a:	4620      	mov	r0, r4
 800398c:	f7ff fe06 	bl	800359c <I2C_RequestMemoryRead>
 8003990:	b970      	cbnz	r0, 80039b0 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2bff      	cmp	r3, #255	; 0xff
 8003998:	d90f      	bls.n	80039ba <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800399e:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <HAL_I2C_Mem_Read+0x1b4>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a6:	4629      	mov	r1, r5
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff fd08 	bl	80033be <I2C_TransferConfig>
 80039ae:	e021      	b.n	80039f4 <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 80039b0:	2300      	movs	r3, #0
 80039b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80039b6:	4653      	mov	r3, sl
 80039b8:	e06f      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 80039ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039bc:	b292      	uxth	r2, r2
 80039be:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039c0:	4b3c      	ldr	r3, [pc, #240]	; (8003ab4 <HAL_I2C_Mem_Read+0x1b4>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	4629      	mov	r1, r5
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff fcf6 	bl	80033be <I2C_TransferConfig>
 80039d2:	e00f      	b.n	80039f4 <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 80039d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039d6:	b292      	uxth	r2, r2
 80039d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	4629      	mov	r1, r5
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff fce9 	bl	80033be <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80039ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d034      	beq.n	8003a5e <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039f4:	9700      	str	r7, [sp, #0]
 80039f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	2104      	movs	r1, #4
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff fd6c 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d14f      	bne.n	8003aa6 <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a10:	3301      	adds	r3, #1
 8003a12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	b292      	uxth	r2, r2
 8003a22:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a26:	b292      	uxth	r2, r2
 8003a28:	2a00      	cmp	r2, #0
 8003a2a:	d0df      	beq.n	80039ec <HAL_I2C_Mem_Read+0xec>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1dd      	bne.n	80039ec <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	9700      	str	r7, [sp, #0]
 8003a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a34:	2200      	movs	r2, #0
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff fd4e 	bl	80034da <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	bba0      	cbnz	r0, 8003aaa <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2bff      	cmp	r3, #255	; 0xff
 8003a46:	d9c5      	bls.n	80039d4 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a48:	22ff      	movs	r2, #255	; 0xff
 8003a4a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a54:	4629      	mov	r1, r5
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7ff fcb1 	bl	80033be <I2C_TransferConfig>
 8003a5c:	e7c6      	b.n	80039ec <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5e:	463a      	mov	r2, r7
 8003a60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff fdd2 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	bb00      	cbnz	r0, 8003aae <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	2120      	movs	r1, #32
 8003a70:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	6842      	ldr	r2, [r0, #4]
 8003a76:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003a7a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003a7e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003a92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003a96:	e000      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	b002      	add	sp, #8
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e7f9      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7f7      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e7f5      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e7f3      	b.n	8003a9a <HAL_I2C_Mem_Read+0x19a>
 8003ab2:	bf00      	nop
 8003ab4:	80002400 	.word	0x80002400

08003ab8 <HAL_I2C_GetState>:
  return hi2c->State;
 8003ab8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003abc:	4770      	bx	lr
	...

08003ac0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ac0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ac2:	684d      	ldr	r5, [r1, #4]
 8003ac4:	6804      	ldr	r4, [r0, #0]
 8003ac6:	68e3      	ldr	r3, [r4, #12]
 8003ac8:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003acc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ace:	01d2      	lsls	r2, r2, #7
 8003ad0:	4414      	add	r4, r2
 8003ad2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003ad6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ada:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ade:	680b      	ldr	r3, [r1, #0]
 8003ae0:	6804      	ldr	r4, [r0, #0]
 8003ae2:	68e6      	ldr	r6, [r4, #12]
 8003ae4:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003ae8:	4433      	add	r3, r6
 8003aea:	3301      	adds	r3, #1
 8003aec:	4414      	add	r4, r2
 8003aee:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003af2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003af6:	68cd      	ldr	r5, [r1, #12]
 8003af8:	6804      	ldr	r4, [r0, #0]
 8003afa:	68e3      	ldr	r3, [r4, #12]
 8003afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b00:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b02:	4414      	add	r4, r2
 8003b04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b10:	688b      	ldr	r3, [r1, #8]
 8003b12:	6804      	ldr	r4, [r0, #0]
 8003b14:	68e6      	ldr	r6, [r4, #12]
 8003b16:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003b1a:	4433      	add	r3, r6
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	4414      	add	r4, r2
 8003b20:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003b24:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003b30:	f024 0407 	bic.w	r4, r4, #7
 8003b34:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b38:	6803      	ldr	r3, [r0, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	690c      	ldr	r4, [r1, #16]
 8003b3e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b42:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b46:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b4a:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b4c:	6805      	ldr	r5, [r0, #0]
 8003b4e:	4415      	add	r5, r2
 8003b50:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003b54:	2400      	movs	r4, #0
 8003b56:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b5a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003b5e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003b62:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003b66:	6805      	ldr	r5, [r0, #0]
 8003b68:	4415      	add	r5, r2
 8003b6a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003b6e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b72:	6803      	ldr	r3, [r0, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8003b7a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003b7e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	694d      	ldr	r5, [r1, #20]
 8003b88:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b8c:	6803      	ldr	r3, [r0, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003b94:	4d2d      	ldr	r5, [pc, #180]	; (8003c4c <LTDC_SetConfig+0x18c>)
 8003b96:	4035      	ands	r5, r6
 8003b98:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b9c:	69cd      	ldr	r5, [r1, #28]
 8003b9e:	6a0e      	ldr	r6, [r1, #32]
 8003ba0:	6803      	ldr	r3, [r0, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4335      	orrs	r5, r6
 8003ba6:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003baa:	6803      	ldr	r3, [r0, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8003bb2:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003bbc:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b16b      	cbz	r3, 8003be0 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d03a      	beq.n	8003c3e <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	bf18      	it	ne
 8003bcc:	2b04      	cmpne	r3, #4
 8003bce:	d038      	beq.n	8003c42 <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d038      	beq.n	8003c46 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003bd4:	2b07      	cmp	r3, #7
 8003bd6:	d001      	beq.n	8003bdc <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e002      	b.n	8003be2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e000      	b.n	8003be2 <LTDC_SetConfig+0x122>
    tmp = 4U;
 8003be0:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003be2:	6804      	ldr	r4, [r0, #0]
 8003be4:	4414      	add	r4, r2
 8003be6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8003bea:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003bee:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003bf2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003bf4:	fb03 f504 	mul.w	r5, r3, r4
 8003bf8:	684c      	ldr	r4, [r1, #4]
 8003bfa:	680e      	ldr	r6, [r1, #0]
 8003bfc:	1ba4      	subs	r4, r4, r6
 8003bfe:	fb03 f304 	mul.w	r3, r3, r4
 8003c02:	3303      	adds	r3, #3
 8003c04:	6804      	ldr	r4, [r0, #0]
 8003c06:	4414      	add	r4, r2
 8003c08:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003c0c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003c10:	6803      	ldr	r3, [r0, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8003c18:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <LTDC_SetConfig+0x190>)
 8003c1a:	402c      	ands	r4, r5
 8003c1c:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003c20:	6803      	ldr	r3, [r0, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003c26:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003c2a:	6803      	ldr	r3, [r0, #0]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8003c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c3c:	4770      	bx	lr
    tmp = 3U;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e7cf      	b.n	8003be2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e7cd      	b.n	8003be2 <LTDC_SetConfig+0x122>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e7cb      	b.n	8003be2 <LTDC_SetConfig+0x122>
 8003c4a:	bf00      	nop
 8003c4c:	fffff8f8 	.word	0xfffff8f8
 8003c50:	fffff800 	.word	0xfffff800

08003c54 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d072      	beq.n	8003d3e <HAL_LTDC_Init+0xea>
{
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c5c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d067      	beq.n	8003d34 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	6993      	ldr	r3, [r2, #24]
 8003c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c72:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c74:	6821      	ldr	r1, [r4, #0]
 8003c76:	698a      	ldr	r2, [r1, #24]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	68a0      	ldr	r0, [r4, #8]
 8003c7c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c7e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c80:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c82:	6920      	ldr	r0, [r4, #16]
 8003c84:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c86:	4313      	orrs	r3, r2
 8003c88:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c8a:	6821      	ldr	r1, [r4, #0]
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_LTDC_Init+0xf0>)
 8003c90:	401a      	ands	r2, r3
 8003c92:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c94:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	6882      	ldr	r2, [r0, #8]
 8003c9a:	69a1      	ldr	r1, [r4, #24]
 8003c9c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ca4:	6821      	ldr	r1, [r4, #0]
 8003ca6:	68ca      	ldr	r2, [r1, #12]
 8003ca8:	401a      	ands	r2, r3
 8003caa:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cac:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	68c2      	ldr	r2, [r0, #12]
 8003cb2:	6a21      	ldr	r1, [r4, #32]
 8003cb4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cbc:	6821      	ldr	r1, [r4, #0]
 8003cbe:	690a      	ldr	r2, [r1, #16]
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	6902      	ldr	r2, [r0, #16]
 8003cca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ccc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cd4:	6821      	ldr	r1, [r4, #0]
 8003cd6:	694a      	ldr	r2, [r1, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003cde:	6821      	ldr	r1, [r4, #0]
 8003ce0:	694b      	ldr	r3, [r1, #20]
 8003ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ce4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003cec:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003cf0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003cf4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003cfa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cfe:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d08:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003d0c:	4303      	orrs	r3, r0
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003d16:	f043 0306 	orr.w	r3, r3, #6
 8003d1a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	6993      	ldr	r3, [r2, #24]
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d26:	2000      	movs	r0, #0
 8003d28:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003d34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003d38:	f005 fab0 	bl	800929c <HAL_LTDC_MspInit>
 8003d3c:	e792      	b.n	8003c64 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8003d3e:	2001      	movs	r0, #1
}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	f000f800 	.word	0xf000f800

08003d48 <HAL_LTDC_ErrorCallback>:
}
 8003d48:	4770      	bx	lr

08003d4a <HAL_LTDC_LineEventCallback>:
}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_LTDC_ReloadEventCallback>:
}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_LTDC_IRQHandler>:
{
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d52:	6803      	ldr	r3, [r0, #0]
 8003d54:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d56:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003d58:	f015 0f04 	tst.w	r5, #4
 8003d5c:	d002      	beq.n	8003d64 <HAL_LTDC_IRQHandler+0x16>
 8003d5e:	f016 0f04 	tst.w	r6, #4
 8003d62:	d112      	bne.n	8003d8a <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003d64:	f015 0f02 	tst.w	r5, #2
 8003d68:	d002      	beq.n	8003d70 <HAL_LTDC_IRQHandler+0x22>
 8003d6a:	f016 0f02 	tst.w	r6, #2
 8003d6e:	d121      	bne.n	8003db4 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003d70:	f015 0f01 	tst.w	r5, #1
 8003d74:	d002      	beq.n	8003d7c <HAL_LTDC_IRQHandler+0x2e>
 8003d76:	f016 0f01 	tst.w	r6, #1
 8003d7a:	d132      	bne.n	8003de2 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003d7c:	f015 0f08 	tst.w	r5, #8
 8003d80:	d002      	beq.n	8003d88 <HAL_LTDC_IRQHandler+0x3a>
 8003d82:	f016 0f08 	tst.w	r6, #8
 8003d86:	d13d      	bne.n	8003e04 <HAL_LTDC_IRQHandler+0xb6>
}
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8c:	f022 0204 	bic.w	r2, r2, #4
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d92:	6803      	ldr	r3, [r0, #0]
 8003d94:	2204      	movs	r2, #4
 8003d96:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d98:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003da4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003da8:	2300      	movs	r3, #0
 8003daa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003dae:	f7ff ffcb 	bl	8003d48 <HAL_LTDC_ErrorCallback>
 8003db2:	e7d7      	b.n	8003d64 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003dc4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003dce:	2304      	movs	r3, #4
 8003dd0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff ffb4 	bl	8003d48 <HAL_LTDC_ErrorCallback>
 8003de0:	e7c6      	b.n	8003d70 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	2301      	movs	r3, #1
 8003df0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003df2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003df6:	2300      	movs	r3, #0
 8003df8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff ffa4 	bl	8003d4a <HAL_LTDC_LineEventCallback>
 8003e02:	e7bb      	b.n	8003d7c <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003e08:	f023 0308 	bic.w	r3, r3, #8
 8003e0c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	2208      	movs	r2, #8
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff ff93 	bl	8003d4c <HAL_LTDC_ReloadEventCallback>
}
 8003e26:	e7af      	b.n	8003d88 <HAL_LTDC_IRQHandler+0x3a>

08003e28 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003e28:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d027      	beq.n	8003e80 <HAL_LTDC_ConfigLayer+0x58>
{
 8003e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e34:	4694      	mov	ip, r2
 8003e36:	460f      	mov	r7, r1
 8003e38:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003e3a:	f04f 0801 	mov.w	r8, #1
 8003e3e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e48:	2434      	movs	r4, #52	; 0x34
 8003e4a:	fb04 0402 	mla	r4, r4, r2, r0
 8003e4e:	3438      	adds	r4, #56	; 0x38
 8003e50:	460d      	mov	r5, r1
 8003e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e62:	4662      	mov	r2, ip
 8003e64:	4639      	mov	r1, r7
 8003e66:	4630      	mov	r0, r6
 8003e68:	f7ff fe2a 	bl	8003ac0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e72:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003e76:	2000      	movs	r0, #0
 8003e78:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003e80:	2002      	movs	r0, #2
}
 8003e82:	4770      	bx	lr

08003e84 <HAL_LTDC_GetState>:
  return hltdc->State;
 8003e84:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_PWREx_EnableOverDrive+0x74>)
 8003e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ea4:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <HAL_PWREx_EnableOverDrive+0x78>)
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eae:	f7fe f8e1 	bl	8002074 <HAL_GetTick>
 8003eb2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_PWREx_EnableOverDrive+0x78>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ebe:	f7fe f8d9 	bl	8002074 <HAL_GetTick>
 8003ec2:	1b00      	subs	r0, r0, r4
 8003ec4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ec8:	d9f4      	bls.n	8003eb4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003eca:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <HAL_PWREx_EnableOverDrive+0x78>)
 8003ed2:	6813      	ldr	r3, [r2, #0]
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003eda:	f7fe f8cb 	bl	8002074 <HAL_GetTick>
 8003ede:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_PWREx_EnableOverDrive+0x78>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ee8:	d107      	bne.n	8003efa <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eea:	f7fe f8c3 	bl	8002074 <HAL_GetTick>
 8003eee:	1b00      	subs	r0, r0, r4
 8003ef0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ef4:	d9f4      	bls.n	8003ee0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	e7e8      	b.n	8003ecc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	e7e6      	b.n	8003ecc <HAL_PWREx_EnableOverDrive+0x40>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000

08003f08 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f000 81db 	beq.w	80042c4 <HAL_RCC_OscConfig+0x3bc>
{
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f14:	6803      	ldr	r3, [r0, #0]
 8003f16:	f013 0f01 	tst.w	r3, #1
 8003f1a:	d029      	beq.n	8003f70 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f1c:	4ba2      	ldr	r3, [pc, #648]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d01a      	beq.n	8003f5e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f28:	4b9f      	ldr	r3, [pc, #636]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d00f      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3a:	d040      	beq.n	8003fbe <HAL_RCC_OscConfig+0xb6>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d154      	bne.n	8003fea <HAL_RCC_OscConfig+0xe2>
 8003f40:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e039      	b.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f54:	4b94      	ldr	r3, [pc, #592]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f5c:	d0ea      	beq.n	8003f34 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f66:	d003      	beq.n	8003f70 <HAL_RCC_OscConfig+0x68>
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 81ac 	beq.w	80042c8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	f013 0f02 	tst.w	r3, #2
 8003f76:	d075      	beq.n	8004064 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f78:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f013 0f0c 	tst.w	r3, #12
 8003f80:	d05e      	beq.n	8004040 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b89      	ldr	r3, [pc, #548]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d053      	beq.n	8004036 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 808a 	beq.w	80040aa <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f96:	4a84      	ldr	r2, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f868 	bl	8002074 <HAL_GetTick>
 8003fa4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b80      	ldr	r3, [pc, #512]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f013 0f02 	tst.w	r3, #2
 8003fae:	d173      	bne.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fe f860 	bl	8002074 <HAL_GetTick>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	2802      	cmp	r0, #2
 8003fb8:	d9f5      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
 8003fbc:	e187      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	4a7a      	ldr	r2, [pc, #488]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	b32b      	cbz	r3, 8004018 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003fcc:	f7fe f852 	bl	8002074 <HAL_GetTick>
 8003fd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b75      	ldr	r3, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fda:	d1c9      	bne.n	8003f70 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f84a 	bl	8002074 <HAL_GetTick>
 8003fe0:	1b40      	subs	r0, r0, r5
 8003fe2:	2864      	cmp	r0, #100	; 0x64
 8003fe4:	d9f5      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	e171      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fee:	d009      	beq.n	8004004 <HAL_RCC_OscConfig+0xfc>
 8003ff0:	4b6d      	ldr	r3, [pc, #436]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e7e1      	b.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e7d7      	b.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004018:	f7fe f82c 	bl	8002074 <HAL_GetTick>
 800401c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004026:	d0a3      	beq.n	8003f70 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe f824 	bl	8002074 <HAL_GetTick>
 800402c:	1b40      	subs	r0, r0, r5
 800402e:	2864      	cmp	r0, #100	; 0x64
 8004030:	d9f5      	bls.n	800401e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
 8004034:	e14b      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800403e:	d1a6      	bne.n	8003f8e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f013 0f02 	tst.w	r3, #2
 8004048:	d004      	beq.n	8004054 <HAL_RCC_OscConfig+0x14c>
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8004050:	2001      	movs	r0, #1
 8004052:	e13c      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4a54      	ldr	r2, [pc, #336]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800405c:	6921      	ldr	r1, [r4, #16]
 800405e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004062:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	f013 0f08 	tst.w	r3, #8
 800406a:	d046      	beq.n	80040fa <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406c:	6963      	ldr	r3, [r4, #20]
 800406e:	b383      	cbz	r3, 80040d2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004072:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407a:	f7fd fffb 	bl	8002074 <HAL_GetTick>
 800407e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004080:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	f013 0f02 	tst.w	r3, #2
 8004088:	d137      	bne.n	80040fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd fff3 	bl	8002074 <HAL_GetTick>
 800408e:	1b40      	subs	r0, r0, r5
 8004090:	2802      	cmp	r0, #2
 8004092:	d9f5      	bls.n	8004080 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8004094:	2003      	movs	r0, #3
 8004096:	e11a      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4a43      	ldr	r2, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040a0:	6921      	ldr	r1, [r4, #16]
 80040a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e7dc      	b.n	8004064 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040b4:	f7fd ffde 	bl	8002074 <HAL_GetTick>
 80040b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f013 0f02 	tst.w	r3, #2
 80040c2:	d0cf      	beq.n	8004064 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fd ffd6 	bl	8002074 <HAL_GetTick>
 80040c8:	1b40      	subs	r0, r0, r5
 80040ca:	2802      	cmp	r0, #2
 80040cc:	d9f5      	bls.n	80040ba <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80040ce:	2003      	movs	r0, #3
 80040d0:	e0fd      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d2:	4a35      	ldr	r2, [pc, #212]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 80040d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd ffca 	bl	8002074 <HAL_GetTick>
 80040e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	f013 0f02 	tst.w	r3, #2
 80040ea:	d006      	beq.n	80040fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fd ffc2 	bl	8002074 <HAL_GetTick>
 80040f0:	1b40      	subs	r0, r0, r5
 80040f2:	2802      	cmp	r0, #2
 80040f4:	d9f5      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80040f6:	2003      	movs	r0, #3
 80040f8:	e0e9      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	f013 0f04 	tst.w	r3, #4
 8004100:	d07e      	beq.n	8004200 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800410a:	d11e      	bne.n	800414a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 800410e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004110:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004120:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_OscConfig+0x2a4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f413 7f80 	tst.w	r3, #256	; 0x100
 800412a:	d010      	beq.n	800414e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	68a3      	ldr	r3, [r4, #8]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d021      	beq.n	8004176 <HAL_RCC_OscConfig+0x26e>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d13c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2a8>
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	671a      	str	r2, [r3, #112]	; 0x70
 8004140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004142:	f022 0204 	bic.w	r2, r2, #4
 8004146:	671a      	str	r2, [r3, #112]	; 0x70
 8004148:	e01a      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800414a:	2500      	movs	r5, #0
 800414c:	e7e9      	b.n	8004122 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_RCC_OscConfig+0x2a4>)
 8004150:	6813      	ldr	r3, [r2, #0]
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004158:	f7fd ff8c 	bl	8002074 <HAL_GetTick>
 800415c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_OscConfig+0x2a4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004166:	d1e1      	bne.n	800412c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fd ff84 	bl	8002074 <HAL_GetTick>
 800416c:	1b80      	subs	r0, r0, r6
 800416e:	2864      	cmp	r0, #100	; 0x64
 8004170:	d9f5      	bls.n	800415e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
 8004174:	e0ab      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 8004178:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	68a3      	ldr	r3, [r4, #8]
 8004182:	b35b      	cbz	r3, 80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd ff76 	bl	8002074 <HAL_GetTick>
 8004188:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCC_OscConfig+0x2a0>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f013 0f02 	tst.w	r3, #2
 8004192:	d134      	bne.n	80041fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd ff6e 	bl	8002074 <HAL_GetTick>
 8004198:	1b80      	subs	r0, r0, r6
 800419a:	f241 3388 	movw	r3, #5000	; 0x1388
 800419e:	4298      	cmp	r0, r3
 80041a0:	d9f3      	bls.n	800418a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80041a2:	2003      	movs	r0, #3
 80041a4:	e093      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d009      	beq.n	80041c8 <HAL_RCC_OscConfig+0x2c0>
 80041b4:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 80041b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	671a      	str	r2, [r3, #112]	; 0x70
 80041be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041c0:	f022 0204 	bic.w	r2, r2, #4
 80041c4:	671a      	str	r2, [r3, #112]	; 0x70
 80041c6:	e7db      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 80041ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041cc:	f042 0204 	orr.w	r2, r2, #4
 80041d0:	671a      	str	r2, [r3, #112]	; 0x70
 80041d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	671a      	str	r2, [r3, #112]	; 0x70
 80041da:	e7d1      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd ff4a 	bl	8002074 <HAL_GetTick>
 80041e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f013 0f02 	tst.w	r3, #2
 80041ea:	d008      	beq.n	80041fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd ff42 	bl	8002074 <HAL_GetTick>
 80041f0:	1b80      	subs	r0, r0, r6
 80041f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80041f6:	4298      	cmp	r0, r3
 80041f8:	d9f3      	bls.n	80041e2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80041fa:	2003      	movs	r0, #3
 80041fc:	e067      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fe:	b9f5      	cbnz	r5, 800423e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004200:	69a3      	ldr	r3, [r4, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d062      	beq.n	80042cc <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	f002 020c 	and.w	r2, r2, #12
 800420e:	2a08      	cmp	r2, #8
 8004210:	d05f      	beq.n	80042d2 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004212:	2b02      	cmp	r3, #2
 8004214:	d019      	beq.n	800424a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd ff28 	bl	8002074 <HAL_GetTick>
 8004224:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800422e:	d047      	beq.n	80042c0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd ff20 	bl	8002074 <HAL_GetTick>
 8004234:	1b00      	subs	r0, r0, r4
 8004236:	2802      	cmp	r0, #2
 8004238:	d9f5      	bls.n	8004226 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800423a:	2003      	movs	r0, #3
 800423c:	e047      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 8004240:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
 8004248:	e7da      	b.n	8004200 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004254:	f7fd ff0e 	bl	8002074 <HAL_GetTick>
 8004258:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004262:	d006      	beq.n	8004272 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd ff06 	bl	8002074 <HAL_GetTick>
 8004268:	1b40      	subs	r0, r0, r5
 800426a:	2802      	cmp	r0, #2
 800426c:	d9f5      	bls.n	800425a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800426e:	2003      	movs	r0, #3
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004272:	69e3      	ldr	r3, [r4, #28]
 8004274:	6a22      	ldr	r2, [r4, #32]
 8004276:	4313      	orrs	r3, r2
 8004278:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800427a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800427e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800428a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800428e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 8004294:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800429e:	f7fd fee9 	bl	8002074 <HAL_GetTick>
 80042a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x3d0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd fee1 	bl	8002074 <HAL_GetTick>
 80042b2:	1b00      	subs	r0, r0, r4
 80042b4:	2802      	cmp	r0, #2
 80042b6:	d9f5      	bls.n	80042a4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80042b8:	2003      	movs	r0, #3
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80042bc:	2000      	movs	r0, #0
 80042be:	e006      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
 80042c0:	2000      	movs	r0, #0
 80042c2:	e004      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80042c4:	2001      	movs	r0, #1
}
 80042c6:	4770      	bx	lr
        return HAL_ERROR;
 80042c8:	2001      	movs	r0, #1
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80042cc:	2000      	movs	r0, #0
}
 80042ce:	b002      	add	sp, #8
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
 80042d4:	e7fb      	b.n	80042ce <HAL_RCC_OscConfig+0x3c6>
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800

080042dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d044      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x96>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4823      	ldr	r0, [pc, #140]	; (800437c <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ee:	4770      	bx	lr
{
 80042f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004302:	d013      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800430c:	2300      	movs	r3, #0
 800430e:	481c      	ldr	r0, [pc, #112]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004310:	fba1 0100 	umull	r0, r1, r1, r0
 8004314:	f7fc fe36 	bl	8000f84 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004320:	3301      	adds	r3, #1
 8004322:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004324:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004328:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004334:	461e      	mov	r6, r3
 8004336:	2700      	movs	r7, #0
 8004338:	015c      	lsls	r4, r3, #5
 800433a:	2500      	movs	r5, #0
 800433c:	1ae4      	subs	r4, r4, r3
 800433e:	eb65 0507 	sbc.w	r5, r5, r7
 8004342:	01a9      	lsls	r1, r5, #6
 8004344:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004348:	01a0      	lsls	r0, r4, #6
 800434a:	1b00      	subs	r0, r0, r4
 800434c:	eb61 0105 	sbc.w	r1, r1, r5
 8004350:	00cb      	lsls	r3, r1, #3
 8004352:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004356:	00c4      	lsls	r4, r0, #3
 8004358:	19a0      	adds	r0, r4, r6
 800435a:	eb43 0107 	adc.w	r1, r3, r7
 800435e:	028b      	lsls	r3, r1, #10
 8004360:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004364:	0284      	lsls	r4, r0, #10
 8004366:	4620      	mov	r0, r4
 8004368:	4619      	mov	r1, r3
 800436a:	2300      	movs	r3, #0
 800436c:	f7fc fe0a 	bl	8000f84 <__aeabi_uldivmod>
 8004370:	e7d2      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8004372:	4803      	ldr	r0, [pc, #12]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	017d7840 	.word	0x017d7840

08004384 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004384:	2800      	cmp	r0, #0
 8004386:	f000 80a2 	beq.w	80044ce <HAL_RCC_ClockConfig+0x14a>
{
 800438a:	b570      	push	{r4, r5, r6, lr}
 800438c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438e:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_RCC_ClockConfig+0x154>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	428b      	cmp	r3, r1
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4a4f      	ldr	r2, [pc, #316]	; (80044d8 <HAL_RCC_ClockConfig+0x154>)
 800439c:	6813      	ldr	r3, [r2, #0]
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80043b0:	2001      	movs	r0, #1
}
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f013 0f02 	tst.w	r3, #2
 80043ba:	d017      	beq.n	80043ec <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	f013 0f04 	tst.w	r3, #4
 80043c0:	d004      	beq.n	80043cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c2:	4a46      	ldr	r2, [pc, #280]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 80043c4:	6893      	ldr	r3, [r2, #8]
 80043c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ca:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f013 0f08 	tst.w	r3, #8
 80043d2:	d004      	beq.n	80043de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d4:	4a41      	ldr	r2, [pc, #260]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 80043d6:	6893      	ldr	r3, [r2, #8]
 80043d8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043de:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 80043e0:	6893      	ldr	r3, [r2, #8]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e6:	68a0      	ldr	r0, [r4, #8]
 80043e8:	4303      	orrs	r3, r0
 80043ea:	6093      	str	r3, [r2, #8]
 80043ec:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f013 0f01 	tst.w	r3, #1
 80043f4:	d031      	beq.n	800445a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d025      	beq.n	800444c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4a36      	ldr	r2, [pc, #216]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	f012 0f02 	tst.w	r2, #2
 8004408:	d063      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440a:	4934      	ldr	r1, [pc, #208]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 800440c:	688a      	ldr	r2, [r1, #8]
 800440e:	f022 0203 	bic.w	r2, r2, #3
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004416:	f7fd fe2d 	bl	8002074 <HAL_GetTick>
 800441a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441c:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	6862      	ldr	r2, [r4, #4]
 8004426:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800442a:	d016      	beq.n	800445a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442c:	f7fd fe22 	bl	8002074 <HAL_GetTick>
 8004430:	1b80      	subs	r0, r0, r6
 8004432:	f241 3388 	movw	r3, #5000	; 0x1388
 8004436:	4298      	cmp	r0, r3
 8004438:	d9f0      	bls.n	800441c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800443a:	2003      	movs	r0, #3
 800443c:	e7b9      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004446:	d1e0      	bne.n	800440a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004448:	2001      	movs	r0, #1
 800444a:	e7b2      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004454:	d1d9      	bne.n	800440a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004456:	2001      	movs	r0, #1
 8004458:	e7ab      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445a:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <HAL_RCC_ClockConfig+0x154>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	42ab      	cmp	r3, r5
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_RCC_ClockConfig+0x154>)
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f023 030f 	bic.w	r3, r3, #15
 800446e:	432b      	orrs	r3, r5
 8004470:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	42ab      	cmp	r3, r5
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800447c:	2001      	movs	r0, #1
 800447e:	e798      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	f013 0f04 	tst.w	r3, #4
 8004486:	d006      	beq.n	8004496 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 800448a:	6893      	ldr	r3, [r2, #8]
 800448c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004490:	68e1      	ldr	r1, [r4, #12]
 8004492:	430b      	orrs	r3, r1
 8004494:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f013 0f08 	tst.w	r3, #8
 800449c:	d007      	beq.n	80044ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800449e:	4a0f      	ldr	r2, [pc, #60]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 80044a0:	6893      	ldr	r3, [r2, #8]
 80044a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044ac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ae:	f7ff ff15 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_RCC_ClockConfig+0x158>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x15c>)
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	40d8      	lsrs	r0, r3
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCC_ClockConfig+0x160>)
 80044c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80044c4:	2000      	movs	r0, #0
 80044c6:	f005 fa6b 	bl	80099a0 <HAL_InitTick>
  return HAL_OK;
 80044ca:	2000      	movs	r0, #0
 80044cc:	e771      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
}
 80044d0:	4770      	bx	lr
        return HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
 80044d4:	e76d      	b.n	80043b2 <HAL_RCC_ClockConfig+0x2e>
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00
 80044dc:	40023800 	.word	0x40023800
 80044e0:	08010c94 	.word	0x08010c94
 80044e4:	20000058 	.word	0x20000058

080044e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80044e8:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000058 	.word	0x20000058

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f6:	f7ff fff7 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 80044fa:	4b04      	ldr	r3, [pc, #16]	; (800450c <HAL_RCC_GetPCLK1Freq+0x18>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004502:	4a03      	ldr	r2, [pc, #12]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
}
 8004506:	40d8      	lsrs	r0, r3
 8004508:	bd08      	pop	{r3, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	08010ca4 	.word	0x08010ca4

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004516:	f7ff ffe7 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <HAL_RCC_GetPCLK2Freq+0x18>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004522:	4a03      	ldr	r2, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
}
 8004526:	40d8      	lsrs	r0, r3
 8004528:	bd08      	pop	{r3, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	08010ca4 	.word	0x08010ca4

08004534 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004534:	230f      	movs	r3, #15
 8004536:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_GetClockConfig+0x34>)
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	f002 0203 	and.w	r2, r2, #3
 8004540:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004548:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004550:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800455a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_GetClockConfig+0x38>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	600b      	str	r3, [r1, #0]
}
 8004566:	4770      	bx	lr
 8004568:	40023800 	.word	0x40023800
 800456c:	40023c00 	.word	0x40023c00

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	b083      	sub	sp, #12
 8004574:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004576:	6803      	ldr	r3, [r0, #0]
 8004578:	f013 0f01 	tst.w	r3, #1
 800457c:	d00c      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800457e:	4baf      	ldr	r3, [pc, #700]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004590:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004592:	b1c3      	cbz	r3, 80045c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8004594:	2600      	movs	r6, #0
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004598:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80045a0:	d015      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a2:	4aa6      	ldr	r2, [pc, #664]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80045a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80045ae:	430b      	orrs	r3, r1
 80045b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d006      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 811b 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 80045c2:	2500      	movs	r5, #0
 80045c4:	e004      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80045c6:	2601      	movs	r6, #1
 80045c8:	e7e7      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80045ca:	2601      	movs	r6, #1
 80045cc:	e7f6      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 80045ce:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80045d6:	d00f      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045d8:	4a98      	ldr	r2, [pc, #608]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80045de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80045e4:	430b      	orrs	r3, r1
 80045e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f0:	f000 8104 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045f4:	b903      	cbnz	r3, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 80045f6:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80045fe:	d000      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8004600:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004602:	f013 0f20 	tst.w	r3, #32
 8004606:	f040 80fb 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	f013 0f10 	tst.w	r3, #16
 8004610:	d00c      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004612:	4b8a      	ldr	r3, [pc, #552]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004614:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004618:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800461c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004620:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004624:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004626:	430a      	orrs	r2, r1
 8004628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004632:	d008      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004634:	4a81      	ldr	r2, [pc, #516]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004636:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800463a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800463e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004640:	430b      	orrs	r3, r1
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800464e:	4a7b      	ldr	r2, [pc, #492]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004650:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004654:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004658:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800465a:	430b      	orrs	r3, r1
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004668:	4a74      	ldr	r2, [pc, #464]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800466a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800466e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004672:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004674:	430b      	orrs	r3, r1
 8004676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004680:	d008      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004682:	4a6e      	ldr	r2, [pc, #440]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004684:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004688:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800468c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800468e:	430b      	orrs	r3, r1
 8004690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	f013 0f40 	tst.w	r3, #64	; 0x40
 800469a:	d008      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469c:	4a67      	ldr	r2, [pc, #412]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800469e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80046a8:	430b      	orrs	r3, r1
 80046aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046b4:	d008      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b6:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046bc:	f023 030c 	bic.w	r3, r3, #12
 80046c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046c2:	430b      	orrs	r3, r1
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d0:	4a5a      	ldr	r2, [pc, #360]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80046da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80046dc:	430b      	orrs	r3, r1
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ea:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80046f6:	430b      	orrs	r3, r1
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004702:	d008      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004704:	4a4d      	ldr	r2, [pc, #308]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004706:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004710:	430b      	orrs	r3, r1
 8004712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800471c:	d008      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800471e:	4a47      	ldr	r2, [pc, #284]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004720:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004724:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004728:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800472a:	430b      	orrs	r3, r1
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004738:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800473a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800473e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004742:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004744:	430b      	orrs	r3, r1
 8004746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004752:	4a3a      	ldr	r2, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004754:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004758:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800475c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800475e:	430b      	orrs	r3, r1
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800476c:	4a33      	ldr	r2, [pc, #204]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800476e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004776:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004778:	430b      	orrs	r3, r1
 800477a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004784:	d00d      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004786:	4a2d      	ldr	r2, [pc, #180]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004788:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800478c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004790:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004792:	430b      	orrs	r3, r1
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004798:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800479a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479e:	f000 8099 	beq.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	f013 0f08 	tst.w	r3, #8
 80047a8:	d000      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 80047aa:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047b8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80047bc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80047be:	430b      	orrs	r3, r1
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80047ca:	d009      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80047da:	430b      	orrs	r3, r1
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d179      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ea:	d075      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	f040 8106 	bne.w	80049fe <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80047f2:	2000      	movs	r0, #0
}
 80047f4:	b003      	add	sp, #12
 80047f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80047f8:	2501      	movs	r5, #1
 80047fa:	e6e9      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80047fc:	2601      	movs	r6, #1
 80047fe:	e6f9      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004804:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004814:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800481e:	f7fd fc29 	bl	8002074 <HAL_GetTick>
 8004822:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f413 7f80 	tst.w	r3, #256	; 0x100
 800482c:	d10a      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fd fc21 	bl	8002074 <HAL_GetTick>
 8004832:	1bc0      	subs	r0, r0, r7
 8004834:	2864      	cmp	r0, #100	; 0x64
 8004836:	d9f5      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 8004838:	2003      	movs	r0, #3
 800483a:	e7db      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800483c:	40023800 	.word	0x40023800
 8004840:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004844:	4bb3      	ldr	r3, [pc, #716]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004848:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800484c:	d015      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800484e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004850:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004854:	429a      	cmp	r2, r3
 8004856:	d010      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004858:	4bae      	ldr	r3, [pc, #696]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800485a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800485c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004860:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004862:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004866:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004868:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800486a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800486e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004870:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	f013 0f01 	tst.w	r3, #1
 8004878:	d112      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800487a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800487c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004880:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004884:	d01d      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004886:	4aa3      	ldr	r2, [pc, #652]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004888:	6893      	ldr	r3, [r2, #8]
 800488a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800488e:	6093      	str	r3, [r2, #8]
 8004890:	49a0      	ldr	r1, [pc, #640]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004892:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004894:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004896:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800489a:	4313      	orrs	r3, r2
 800489c:	670b      	str	r3, [r1, #112]	; 0x70
 800489e:	e6b4      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80048a0:	f7fd fbe8 	bl	8002074 <HAL_GetTick>
 80048a4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	4b9b      	ldr	r3, [pc, #620]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	f013 0f02 	tst.w	r3, #2
 80048ae:	d1e4      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd fbe0 	bl	8002074 <HAL_GetTick>
 80048b4:	1bc0      	subs	r0, r0, r7
 80048b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80048ba:	4298      	cmp	r0, r3
 80048bc:	d9f3      	bls.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e798      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c2:	4894      	ldr	r0, [pc, #592]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048c4:	6882      	ldr	r2, [r0, #8]
 80048c6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80048ca:	4993      	ldr	r1, [pc, #588]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80048cc:	4019      	ands	r1, r3
 80048ce:	430a      	orrs	r2, r1
 80048d0:	6082      	str	r2, [r0, #8]
 80048d2:	e7dd      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 80048d4:	2501      	movs	r5, #1
 80048d6:	e764      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 80048d8:	4a8e      	ldr	r2, [pc, #568]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048e2:	f7fd fbc7 	bl	8002074 <HAL_GetTick>
 80048e6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e8:	4b8a      	ldr	r3, [pc, #552]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80048f0:	d006      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048f2:	f7fd fbbf 	bl	8002074 <HAL_GetTick>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	2864      	cmp	r0, #100	; 0x64
 80048fa:	d9f5      	bls.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 80048fc:	2003      	movs	r0, #3
 80048fe:	e779      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f013 0f01 	tst.w	r3, #1
 8004906:	d013      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800490a:	b98b      	cbnz	r3, 8004930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800490c:	4a81      	ldr	r2, [pc, #516]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800490e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004912:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004916:	6860      	ldr	r0, [r4, #4]
 8004918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800491c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004920:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004924:	430b      	orrs	r3, r1
 8004926:	68a1      	ldr	r1, [r4, #8]
 8004928:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800492c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004936:	d003      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800493a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800493e:	d006      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004940:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004944:	d01e      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d11a      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800494e:	4a71      	ldr	r2, [pc, #452]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004950:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004954:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004958:	6860      	ldr	r0, [r4, #4]
 800495a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800495e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004962:	68e0      	ldr	r0, [r4, #12]
 8004964:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004968:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800496c:	430b      	orrs	r3, r1
 800496e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004972:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004976:	f023 031f 	bic.w	r3, r3, #31
 800497a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800497c:	3901      	subs	r1, #1
 800497e:	430b      	orrs	r3, r1
 8004980:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800498a:	d011      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800498c:	4a61      	ldr	r2, [pc, #388]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800498e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004992:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004996:	6866      	ldr	r6, [r4, #4]
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80049a0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80049a4:	4303      	orrs	r3, r0
 80049a6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80049aa:	430b      	orrs	r3, r1
 80049ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049b6:	d00d      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80049c2:	68e2      	ldr	r2, [r4, #12]
 80049c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049c8:	68a2      	ldr	r2, [r4, #8]
 80049ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80049ce:	4a51      	ldr	r2, [pc, #324]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80049d4:	4a4f      	ldr	r2, [pc, #316]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80049de:	f7fd fb49 	bl	8002074 <HAL_GetTick>
 80049e2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80049ec:	f47f aefe 	bne.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f0:	f7fd fb40 	bl	8002074 <HAL_GetTick>
 80049f4:	1b80      	subs	r0, r0, r6
 80049f6:	2864      	cmp	r0, #100	; 0x64
 80049f8:	d9f4      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 80049fa:	2003      	movs	r0, #3
 80049fc:	e6fa      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 80049fe:	4a45      	ldr	r2, [pc, #276]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a08:	f7fd fb34 	bl	8002074 <HAL_GetTick>
 8004a0c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004a16:	d006      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a18:	f7fd fb2c 	bl	8002074 <HAL_GetTick>
 8004a1c:	1b40      	subs	r0, r0, r5
 8004a1e:	2864      	cmp	r0, #100	; 0x64
 8004a20:	d9f5      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8004a22:	2003      	movs	r0, #3
 8004a24:	e6e6      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004a2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a30:	b122      	cbz	r2, 8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004a32:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a36:	d01d      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a3a:	b9db      	cbnz	r3, 8004a74 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a3c:	4a35      	ldr	r2, [pc, #212]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a42:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a46:	6960      	ldr	r0, [r4, #20]
 8004a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a4c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004a50:	69a0      	ldr	r0, [r4, #24]
 8004a52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004a56:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a60:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004a64:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004a68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a6a:	3901      	subs	r1, #1
 8004a6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004a7a:	d003      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a7c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a82:	d031      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f013 0f08 	tst.w	r3, #8
 8004a8a:	d019      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a8c:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004a8e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a96:	6960      	ldr	r0, [r4, #20]
 8004a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a9c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004aa0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	69e1      	ldr	r1, [r4, #28]
 8004aa8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004ab4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004ab8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004aba:	430b      	orrs	r3, r1
 8004abc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aca:	f7fd fad3 	bl	8002074 <HAL_GetTick>
 8004ace:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004ad8:	d119      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ada:	f7fd facb 	bl	8002074 <HAL_GetTick>
 8004ade:	1b00      	subs	r0, r0, r4
 8004ae0:	2864      	cmp	r0, #100	; 0x64
 8004ae2:	d9f5      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	e685      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004aea:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004af2:	6965      	ldr	r5, [r4, #20]
 8004af4:	6a23      	ldr	r3, [r4, #32]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004afc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004b00:	4303      	orrs	r3, r0
 8004b02:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004b0c:	e7ba      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e670      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	0ffffcff 	.word	0x0ffffcff

08004b1c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004b1c:	b1d8      	cbz	r0, 8004b56 <HAL_SDRAM_Init+0x3a>
{   
 8004b1e:	b538      	push	{r3, r4, r5, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004b24:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b28:	b183      	cbz	r3, 8004b4c <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004b30:	1d21      	adds	r1, r4, #4
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	f001 f9ec 	bl	8005f10 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004b38:	6862      	ldr	r2, [r4, #4]
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	f001 fa21 	bl	8005f84 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004b48:	2000      	movs	r0, #0
}
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004b4c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004b50:	f003 fffe 	bl	8008b50 <HAL_SDRAM_MspInit>
 8004b54:	e7e9      	b.n	8004b2a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8004b56:	2001      	movs	r0, #1
}
 8004b58:	4770      	bx	lr

08004b5a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004b5a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b5c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d014      	beq.n	8004b90 <HAL_SDRAM_SendCommand+0x36>
 8004b66:	460d      	mov	r5, r1
 8004b68:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004b70:	6800      	ldr	r0, [r0, #0]
 8004b72:	f001 fa53 	bl	800601c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d004      	beq.n	8004b86 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004b82:	2000      	movs	r0, #0
}
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004b86:	2305      	movs	r3, #5
 8004b88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e7f9      	b.n	8004b84 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8004b90:	2002      	movs	r0, #2
 8004b92:	e7f7      	b.n	8004b84 <HAL_SDRAM_SendCommand+0x2a>

08004b94 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b94:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004ba8:	6800      	ldr	r0, [r0, #0]
 8004baa:	f001 fa4d 	bl	8006048 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004bb4:	2000      	movs	r0, #0
}
 8004bb6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004bb8:	2002      	movs	r0, #2
}
 8004bba:	4770      	bx	lr

08004bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	460f      	mov	r7, r1
 8004bc2:	4616      	mov	r6, r2
 8004bc4:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	ea37 0303 	bics.w	r3, r7, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	42b3      	cmp	r3, r6
 8004bd6:	d037      	beq.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004bdc:	d0f3      	beq.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bde:	f7fd fa49 	bl	8002074 <HAL_GetTick>
 8004be2:	9b06      	ldr	r3, [sp, #24]
 8004be4:	1ac0      	subs	r0, r0, r3
 8004be6:	42a0      	cmp	r0, r4
 8004be8:	d201      	bcs.n	8004bee <SPI_WaitFlagStateUntilTimeout+0x32>
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d1eb      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bee:	682a      	ldr	r2, [r5, #0]
 8004bf0:	6853      	ldr	r3, [r2, #4]
 8004bf2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004bf6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	686b      	ldr	r3, [r5, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d00b      	beq.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	d014      	beq.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c14:	2003      	movs	r0, #3
 8004c16:	e018      	b.n	8004c4a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c18:	68ab      	ldr	r3, [r5, #8]
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	bf18      	it	ne
 8004c20:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004c24:	d1ec      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004c26:	682a      	ldr	r2, [r5, #0]
 8004c28:	6813      	ldr	r3, [r2, #0]
 8004c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e7e6      	b.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004c32:	682a      	ldr	r2, [r5, #0]
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	682a      	ldr	r2, [r5, #0]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e7df      	b.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004c48:	2000      	movs	r0, #0
}
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4607      	mov	r7, r0
 8004c50:	460d      	mov	r5, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004c56:	e002      	b.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c58:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004c5c:	d10b      	bne.n	8004c76 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	6893      	ldr	r3, [r2, #8]
 8004c62:	402b      	ands	r3, r5
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d03b      	beq.n	8004ce0 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c68:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004c6c:	bf08      	it	eq
 8004c6e:	2c00      	cmpeq	r4, #0
 8004c70:	d1f2      	bne.n	8004c58 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c72:	7b13      	ldrb	r3, [r2, #12]
 8004c74:	e7f0      	b.n	8004c58 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c76:	f7fd f9fd 	bl	8002074 <HAL_GetTick>
 8004c7a:	9b06      	ldr	r3, [sp, #24]
 8004c7c:	1ac0      	subs	r0, r0, r3
 8004c7e:	42b0      	cmp	r0, r6
 8004c80:	d201      	bcs.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004c82:	2e00      	cmp	r6, #0
 8004c84:	d1eb      	bne.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	6853      	ldr	r3, [r2, #4]
 8004c8a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c8e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d00b      	beq.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d014      	beq.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cac:	2003      	movs	r0, #3
 8004cae:	e018      	b.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	bf18      	it	ne
 8004cb8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004cbc:	d1ec      	bne.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e7e6      	b.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	6813      	ldr	r3, [r2, #0]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e7df      	b.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004ce0:	2000      	movs	r0, #0
}
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cee:	9200      	str	r2, [sp, #0]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cf8:	f7ff ffa8 	bl	8004c4c <SPI_WaitFifoStateUntilTimeout>
 8004cfc:	b9b8      	cbnz	r0, 8004d2e <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfe:	9600      	str	r6, [sp, #0]
 8004d00:	462b      	mov	r3, r5
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff ff58 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004d0c:	b9b8      	cbnz	r0, 8004d3e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d0e:	9600      	str	r6, [sp, #0]
 8004d10:	462b      	mov	r3, r5
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff ff97 	bl	8004c4c <SPI_WaitFifoStateUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b150      	cbz	r0, 8004d38 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e004      	b.n	8004d38 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d40:	f043 0320 	orr.w	r3, r3, #32
 8004d44:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e7f6      	b.n	8004d38 <SPI_EndRxTxTransaction+0x54>

08004d4a <SPI_EndRxTransaction>:
{
 8004d4a:	b570      	push	{r4, r5, r6, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d54:	6843      	ldr	r3, [r0, #4]
 8004d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5a:	d00f      	beq.n	8004d7c <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5c:	9600      	str	r6, [sp, #0]
 8004d5e:	462b      	mov	r3, r5
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7ff ff29 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	b998      	cbnz	r0, 8004d96 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004d74:	d015      	beq.n	8004da2 <SPI_EndRxTransaction+0x58>
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7c:	6883      	ldr	r3, [r0, #8]
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	bf18      	it	ne
 8004d84:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8004d88:	d1e8      	bne.n	8004d5c <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004d8a:	6802      	ldr	r2, [r0, #0]
 8004d8c:	6813      	ldr	r3, [r2, #0]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e7e2      	b.n	8004d5c <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d98:	f043 0320 	orr.w	r3, r3, #32
 8004d9c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e7e9      	b.n	8004d76 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68a2      	ldr	r2, [r4, #8]
 8004da4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004da8:	bf18      	it	ne
 8004daa:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 8004dae:	d1e2      	bne.n	8004d76 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004db0:	9600      	str	r6, [sp, #0]
 8004db2:	462b      	mov	r3, r5
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7ff ff46 	bl	8004c4c <SPI_WaitFifoStateUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0d7      	beq.n	8004d76 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e7d1      	b.n	8004d76 <SPI_EndRxTransaction+0x2c>

08004dd2 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d058      	beq.n	8004e88 <HAL_SPI_Init+0xb6>
{
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dde:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d045      	beq.n	8004e72 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004de6:	2302      	movs	r3, #2
 8004de8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dfc:	d93e      	bls.n	8004e7c <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dfe:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e04:	bf18      	it	ne
 8004e06:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8004e0a:	d001      	beq.n	8004e10 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e12:	b921      	cbnz	r1, 8004e1e <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	d933      	bls.n	8004e82 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	68a1      	ldr	r1, [r4, #8]
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6921      	ldr	r1, [r4, #16]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6961      	ldr	r1, [r4, #20]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	69a1      	ldr	r1, [r4, #24]
 8004e2e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004e32:	430b      	orrs	r3, r1
 8004e34:	69e1      	ldr	r1, [r4, #28]
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	4303      	orrs	r3, r0
 8004e42:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e44:	8b63      	ldrh	r3, [r4, #26]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e50:	430b      	orrs	r3, r1
 8004e52:	68e1      	ldr	r1, [r4, #12]
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6821      	ldr	r1, [r4, #0]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	69d3      	ldr	r3, [r2, #28]
 8004e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e64:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e66:	2000      	movs	r0, #0
 8004e68:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004e70:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004e72:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004e76:	f004 fd29 	bl	80098cc <HAL_SPI_MspInit>
 8004e7a:	e7b4      	b.n	8004de6 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e80:	e7be      	b.n	8004e00 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e82:	2301      	movs	r3, #1
 8004e84:	6323      	str	r3, [r4, #48]	; 0x30
 8004e86:	e7ca      	b.n	8004e1e <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_SPI_Transmit>:
{
 8004e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004e92:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004e96:	2c01      	cmp	r4, #1
 8004e98:	f000 80e5 	beq.w	8005066 <HAL_SPI_Transmit+0x1da>
 8004e9c:	461d      	mov	r5, r3
 8004e9e:	4617      	mov	r7, r2
 8004ea0:	4688      	mov	r8, r1
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004eaa:	f7fd f8e3 	bl	8002074 <HAL_GetTick>
 8004eae:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004eb0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d009      	beq.n	8004ece <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004eba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004ec8:	b002      	add	sp, #8
 8004eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004ece:	fab7 f387 	clz	r3, r7
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f1b8 0f00 	cmp.w	r8, #0
 8004ed8:	bf08      	it	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 80b6 	bne.w	800504e <HAL_SPI_Transmit+0x1c2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eec:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ef0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ef2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ef4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ef6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004efa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004efe:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f00:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d01c      	beq.n	8004f44 <HAL_SPI_Transmit+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f12:	d103      	bne.n	8004f1c <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f1c:	68e3      	ldr	r3, [r4, #12]
 8004f1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f22:	d933      	bls.n	8004f8c <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	b10b      	cbz	r3, 8004f2c <HAL_SPI_Transmit+0xa0>
 8004f28:	2f01      	cmp	r7, #1
 8004f2a:	d11b      	bne.n	8004f64 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f36:	3302      	adds	r3, #2
 8004f38:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004f3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f42:	e00f      	b.n	8004f64 <HAL_SPI_Transmit+0xd8>
    SPI_1LINE_TX(hspi);
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e7dc      	b.n	8004f0a <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f50:	f7fd f890 	bl	8002074 <HAL_GetTick>
 8004f54:	1b80      	subs	r0, r0, r6
 8004f56:	42a8      	cmp	r0, r5
 8004f58:	d302      	bcc.n	8004f60 <HAL_SPI_Transmit+0xd4>
 8004f5a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004f5e:	d178      	bne.n	8005052 <HAL_SPI_Transmit+0x1c6>
 8004f60:	2d00      	cmp	r5, #0
 8004f62:	d078      	beq.n	8005056 <HAL_SPI_Transmit+0x1ca>
    while (hspi->TxXferCount > 0U)
 8004f64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05b      	beq.n	8005024 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	f012 0f02 	tst.w	r2, #2
 8004f74:	d0ec      	beq.n	8004f50 <HAL_SPI_Transmit+0xc4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f7e:	3302      	adds	r3, #2
 8004f80:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f8a:	e7eb      	b.n	8004f64 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	b10b      	cbz	r3, 8004f94 <HAL_SPI_Transmit+0x108>
 8004f90:	2f01      	cmp	r7, #1
 8004f92:	d130      	bne.n	8004ff6 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 8004f94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d90b      	bls.n	8004fb4 <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	8812      	ldrh	r2, [r2, #0]
 8004fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004faa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fac:	3b02      	subs	r3, #2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fb2:	e020      	b.n	8004ff6 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004fc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fca:	e014      	b.n	8004ff6 <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004fd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fe0:	e009      	b.n	8004ff6 <HAL_SPI_Transmit+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fd f847 	bl	8002074 <HAL_GetTick>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	42a8      	cmp	r0, r5
 8004fea:	d302      	bcc.n	8004ff2 <HAL_SPI_Transmit+0x166>
 8004fec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004ff0:	d133      	bne.n	800505a <HAL_SPI_Transmit+0x1ce>
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	d033      	beq.n	800505e <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 8004ff6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	b19b      	cbz	r3, 8005024 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	6893      	ldr	r3, [r2, #8]
 8005000:	f013 0f02 	tst.w	r3, #2
 8005004:	d0ed      	beq.n	8004fe2 <HAL_SPI_Transmit+0x156>
        if (hspi->TxXferCount > 1U)
 8005006:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d9de      	bls.n	8004fcc <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005016:	3302      	adds	r3, #2
 8005018:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800501a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501c:	3b02      	subs	r3, #2
 800501e:	b29b      	uxth	r3, r3
 8005020:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005022:	e7e8      	b.n	8004ff6 <HAL_SPI_Transmit+0x16a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005024:	4632      	mov	r2, r6
 8005026:	4629      	mov	r1, r5
 8005028:	4620      	mov	r0, r4
 800502a:	f7ff fe5b 	bl	8004ce4 <SPI_EndRxTxTransaction>
 800502e:	b108      	cbz	r0, 8005034 <HAL_SPI_Transmit+0x1a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005030:	2320      	movs	r3, #32
 8005032:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005034:	68a3      	ldr	r3, [r4, #8]
 8005036:	b933      	cbnz	r3, 8005046 <HAL_SPI_Transmit+0x1ba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	9201      	str	r2, [sp, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005046:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005048:	b95b      	cbnz	r3, 8005062 <HAL_SPI_Transmit+0x1d6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800504a:	2000      	movs	r0, #0
 800504c:	e736      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800504e:	2001      	movs	r0, #1
 8005050:	e734      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8005052:	2003      	movs	r0, #3
 8005054:	e732      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
 8005056:	2003      	movs	r0, #3
 8005058:	e730      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800505a:	2003      	movs	r0, #3
 800505c:	e72e      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
 800505e:	2003      	movs	r0, #3
 8005060:	e72c      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8005062:	2001      	movs	r0, #1
 8005064:	e72a      	b.n	8004ebc <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8005066:	2002      	movs	r0, #2
 8005068:	e72e      	b.n	8004ec8 <HAL_SPI_Transmit+0x3c>

0800506a <HAL_SPI_TransmitReceive>:
{
 800506a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800506e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005072:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005076:	2c01      	cmp	r4, #1
 8005078:	f000 815d 	beq.w	8005336 <HAL_SPI_TransmitReceive+0x2cc>
 800507c:	461d      	mov	r5, r3
 800507e:	4617      	mov	r7, r2
 8005080:	460e      	mov	r6, r1
 8005082:	4604      	mov	r4, r0
 8005084:	2301      	movs	r3, #1
 8005086:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800508a:	f7fc fff3 	bl	8002074 <HAL_GetTick>
 800508e:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005090:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005094:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8005096:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005098:	2801      	cmp	r0, #1
 800509a:	d014      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
 800509c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a0:	d009      	beq.n	80050b6 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80050a4:	2201      	movs	r2, #1
 80050a6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050aa:	2200      	movs	r2, #0
 80050ac:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050b6:	68a3      	ldr	r3, [r4, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8130 	bne.w	800531e <HAL_SPI_TransmitReceive+0x2b4>
 80050be:	2804      	cmp	r0, #4
 80050c0:	d001      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
 80050c4:	e7ee      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050c6:	fab7 f387 	clz	r3, r7
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	bf08      	it	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 8125 	bne.w	8005322 <HAL_SPI_TransmitReceive+0x2b8>
 80050d8:	2d00      	cmp	r5, #0
 80050da:	f000 8124 	beq.w	8005326 <HAL_SPI_TransmitReceive+0x2bc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050de:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d002      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x84>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e8:	2305      	movs	r3, #5
 80050ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f2:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050f4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050f8:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050fc:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050fe:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005100:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005102:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005104:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800510c:	d801      	bhi.n	8005112 <HAL_SPI_TransmitReceive+0xa8>
 800510e:	2d01      	cmp	r5, #1
 8005110:	d922      	bls.n	8005158 <HAL_SPI_TransmitReceive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	6853      	ldr	r3, [r2, #4]
 8005116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800511a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005124:	d103      	bne.n	800512e <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005134:	d956      	bls.n	80051e4 <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	b10b      	cbz	r3, 800513e <HAL_SPI_TransmitReceive+0xd4>
 800513a:	2d01      	cmp	r5, #1
 800513c:	d10a      	bne.n	8005154 <HAL_SPI_TransmitReceive+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005148:	3302      	adds	r3, #2
 800514a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800514c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005154:	2501      	movs	r5, #1
 8005156:	e025      	b.n	80051a4 <HAL_SPI_TransmitReceive+0x13a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	6853      	ldr	r3, [r2, #4]
 800515c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	e7db      	b.n	800511c <HAL_SPI_TransmitReceive+0xb2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	f012 0f01 	tst.w	r2, #1
 800516c:	d010      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x126>
 800516e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005172:	b292      	uxth	r2, r2
 8005174:	b162      	cbz	r2, 8005190 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800517a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800517c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800517e:	3302      	adds	r3, #2
 8005180:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005182:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005186:	3b01      	subs	r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800518e:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005190:	f7fc ff70 	bl	8002074 <HAL_GetTick>
 8005194:	eba0 0009 	sub.w	r0, r0, r9
 8005198:	4540      	cmp	r0, r8
 800519a:	d303      	bcc.n	80051a4 <HAL_SPI_TransmitReceive+0x13a>
 800519c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80051a0:	f040 80c3 	bne.w	800532a <HAL_SPI_TransmitReceive+0x2c0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b92b      	cbnz	r3, 80051b6 <HAL_SPI_TransmitReceive+0x14c>
 80051aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a7 	beq.w	8005304 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	f012 0f02 	tst.w	r2, #2
 80051be:	d0d1      	beq.n	8005164 <HAL_SPI_TransmitReceive+0xfa>
 80051c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051c2:	b292      	uxth	r2, r2
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	d0cd      	beq.n	8005164 <HAL_SPI_TransmitReceive+0xfa>
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	d0cb      	beq.n	8005164 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d4:	3302      	adds	r3, #2
 80051d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80051d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80051e0:	2500      	movs	r5, #0
 80051e2:	e7bf      	b.n	8005164 <HAL_SPI_TransmitReceive+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <HAL_SPI_TransmitReceive+0x182>
 80051e8:	2d01      	cmp	r5, #1
 80051ea:	d10e      	bne.n	800520a <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 80051ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d90c      	bls.n	800520e <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	8812      	ldrh	r2, [r2, #0]
 80051fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051fe:	3302      	adds	r3, #2
 8005200:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005202:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005204:	3b02      	subs	r3, #2
 8005206:	b29b      	uxth	r3, r3
 8005208:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800520a:	2501      	movs	r5, #1
 800520c:	e047      	b.n	800529e <HAL_SPI_TransmitReceive+0x234>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800520e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005218:	3301      	adds	r3, #1
 800521a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800521c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005224:	e7f1      	b.n	800520a <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 8005226:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005228:	b292      	uxth	r2, r2
 800522a:	2a01      	cmp	r2, #1
 800522c:	d90b      	bls.n	8005246 <HAL_SPI_TransmitReceive+0x1dc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005230:	8812      	ldrh	r2, [r2, #0]
 8005232:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005236:	3302      	adds	r3, #2
 8005238:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800523a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800523c:	3b02      	subs	r3, #2
 800523e:	b29b      	uxth	r3, r3
 8005240:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005242:	2500      	movs	r5, #0
 8005244:	e03c      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005246:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800524c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800524e:	3301      	adds	r3, #1
 8005250:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005252:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005254:	3b01      	subs	r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800525a:	2500      	movs	r5, #0
 800525c:	e030      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	6853      	ldr	r3, [r2, #4]
 8005262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005266:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005268:	2501      	movs	r5, #1
 800526a:	e00c      	b.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800526c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800526e:	7b1b      	ldrb	r3, [r3, #12]
 8005270:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005274:	3301      	adds	r3, #1
 8005276:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005278:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005284:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005286:	f7fc fef5 	bl	8002074 <HAL_GetTick>
 800528a:	eba0 0009 	sub.w	r0, r0, r9
 800528e:	4540      	cmp	r0, r8
 8005290:	d302      	bcc.n	8005298 <HAL_SPI_TransmitReceive+0x22e>
 8005292:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005296:	d14a      	bne.n	800532e <HAL_SPI_TransmitReceive+0x2c4>
 8005298:	f1b8 0f00 	cmp.w	r8, #0
 800529c:	d049      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b91b      	cbnz	r3, 80052ac <HAL_SPI_TransmitReceive+0x242>
 80052a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	b35b      	cbz	r3, 8005304 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	f012 0f02 	tst.w	r2, #2
 80052b4:	d004      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x256>
 80052b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80052b8:	b292      	uxth	r2, r2
 80052ba:	b10a      	cbz	r2, 80052c0 <HAL_SPI_TransmitReceive+0x256>
 80052bc:	2d00      	cmp	r5, #0
 80052be:	d1b2      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	f012 0f01 	tst.w	r2, #1
 80052c8:	d0dd      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
 80052ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80052ce:	b292      	uxth	r2, r2
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d0d8      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
        if (hspi->RxXferCount > 1U)
 80052d4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80052d8:	b292      	uxth	r2, r2
 80052da:	2a01      	cmp	r2, #1
 80052dc:	d9c6      	bls.n	800526c <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e6:	3302      	adds	r3, #2
 80052e8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052ee:	3b02      	subs	r3, #2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d9ae      	bls.n	800525e <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8005300:	2501      	movs	r5, #1
 8005302:	e7c0      	b.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005304:	464a      	mov	r2, r9
 8005306:	4641      	mov	r1, r8
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff fceb 	bl	8004ce4 <SPI_EndRxTxTransaction>
 800530e:	4603      	mov	r3, r0
 8005310:	2800      	cmp	r0, #0
 8005312:	f43f aec7 	beq.w	80050a4 <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005316:	2320      	movs	r3, #32
 8005318:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e6c2      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	e6c0      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e6be      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
 8005326:	2301      	movs	r3, #1
 8005328:	e6bc      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e6ba      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e6b8      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
 8005332:	2303      	movs	r3, #3
 8005334:	e6b6      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8005336:	2302      	movs	r3, #2
 8005338:	e6ba      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x46>

0800533a <HAL_SPI_Receive>:
{
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	4604      	mov	r4, r0
 8005342:	4688      	mov	r8, r1
 8005344:	4617      	mov	r7, r2
 8005346:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005348:	6843      	ldr	r3, [r0, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d019      	beq.n	8005384 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8005350:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005354:	2b01      	cmp	r3, #1
 8005356:	f000 80ba 	beq.w	80054ce <HAL_SPI_Receive+0x194>
 800535a:	2301      	movs	r3, #1
 800535c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005360:	f7fc fe88 	bl	8002074 <HAL_GetTick>
 8005364:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005366:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d015      	beq.n	800539c <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8005370:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005372:	2301      	movs	r3, #1
 8005374:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005378:	2300      	movs	r3, #0
 800537a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800537e:	b002      	add	sp, #8
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005384:	6883      	ldr	r3, [r0, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e2      	bne.n	8005350 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800538a:	2304      	movs	r3, #4
 800538c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005390:	9500      	str	r5, [sp, #0]
 8005392:	4613      	mov	r3, r2
 8005394:	460a      	mov	r2, r1
 8005396:	f7ff fe68 	bl	800506a <HAL_SPI_TransmitReceive>
 800539a:	e7f0      	b.n	800537e <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800539c:	fab7 f387 	clz	r3, r7
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f1b8 0f00 	cmp.w	r8, #0
 80053a6:	bf08      	it	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8083 	bne.w	80054b6 <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053b0:	2304      	movs	r3, #4
 80053b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053ba:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053be:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80053c2:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053c6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80053c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80053ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053cc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053ce:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d0:	68e3      	ldr	r3, [r4, #12]
 80053d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d6:	d916      	bls.n	8005406 <HAL_SPI_Receive+0xcc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	6853      	ldr	r3, [r2, #4]
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e0:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e8:	d013      	beq.n	8005412 <HAL_SPI_Receive+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053f2:	d103      	bne.n	80053fc <HAL_SPI_Receive+0xc2>
    __HAL_SPI_ENABLE(hspi);
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053fc:	68e3      	ldr	r3, [r4, #12]
 80053fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005402:	d916      	bls.n	8005432 <HAL_SPI_Receive+0xf8>
 8005404:	e035      	b.n	8005472 <HAL_SPI_Receive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6853      	ldr	r3, [r2, #4]
 800540a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800540e:	6053      	str	r3, [r2, #4]
 8005410:	e7e7      	b.n	80053e2 <HAL_SPI_Receive+0xa8>
    SPI_1LINE_RX(hspi);
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	6813      	ldr	r3, [r2, #0]
 8005416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e7e5      	b.n	80053ea <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fc fe29 	bl	8002074 <HAL_GetTick>
 8005422:	1b80      	subs	r0, r0, r6
 8005424:	42a8      	cmp	r0, r5
 8005426:	d302      	bcc.n	800542e <HAL_SPI_Receive+0xf4>
 8005428:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800542c:	d145      	bne.n	80054ba <HAL_SPI_Receive+0x180>
 800542e:	2d00      	cmp	r5, #0
 8005430:	d045      	beq.n	80054be <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 8005432:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d030      	beq.n	800549e <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	f012 0f01 	tst.w	r2, #1
 8005444:	d0eb      	beq.n	800541e <HAL_SPI_Receive+0xe4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005446:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005448:	7b1b      	ldrb	r3, [r3, #12]
 800544a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800544c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800544e:	3301      	adds	r3, #1
 8005450:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005452:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005456:	3b01      	subs	r3, #1
 8005458:	b29b      	uxth	r3, r3
 800545a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800545e:	e7e8      	b.n	8005432 <HAL_SPI_Receive+0xf8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005460:	f7fc fe08 	bl	8002074 <HAL_GetTick>
 8005464:	1b80      	subs	r0, r0, r6
 8005466:	42a8      	cmp	r0, r5
 8005468:	d302      	bcc.n	8005470 <HAL_SPI_Receive+0x136>
 800546a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800546e:	d128      	bne.n	80054c2 <HAL_SPI_Receive+0x188>
 8005470:	b34d      	cbz	r5, 80054c6 <HAL_SPI_Receive+0x18c>
    while (hspi->RxXferCount > 0U)
 8005472:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005476:	b29b      	uxth	r3, r3
 8005478:	b18b      	cbz	r3, 800549e <HAL_SPI_Receive+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	f012 0f01 	tst.w	r2, #1
 8005482:	d0ed      	beq.n	8005460 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800548a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800548c:	3302      	adds	r3, #2
 800548e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005490:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005494:	3b01      	subs	r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800549c:	e7e9      	b.n	8005472 <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549e:	4632      	mov	r2, r6
 80054a0:	4629      	mov	r1, r5
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff fc51 	bl	8004d4a <SPI_EndRxTransaction>
 80054a8:	b108      	cbz	r0, 80054ae <HAL_SPI_Receive+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054aa:	2320      	movs	r3, #32
 80054ac:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054b0:	b95b      	cbnz	r3, 80054ca <HAL_SPI_Receive+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b2:	2000      	movs	r0, #0
 80054b4:	e75d      	b.n	8005372 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80054b6:	2001      	movs	r0, #1
 80054b8:	e75b      	b.n	8005372 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80054ba:	2003      	movs	r0, #3
 80054bc:	e759      	b.n	8005372 <HAL_SPI_Receive+0x38>
 80054be:	2003      	movs	r0, #3
 80054c0:	e757      	b.n	8005372 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80054c2:	2003      	movs	r0, #3
 80054c4:	e755      	b.n	8005372 <HAL_SPI_Receive+0x38>
 80054c6:	2003      	movs	r0, #3
 80054c8:	e753      	b.n	8005372 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80054ca:	2001      	movs	r0, #1
 80054cc:	e751      	b.n	8005372 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80054ce:	2002      	movs	r0, #2
 80054d0:	e755      	b.n	800537e <HAL_SPI_Receive+0x44>

080054d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d6:	6a04      	ldr	r4, [r0, #32]
 80054d8:	f024 0401 	bic.w	r4, r4, #1
 80054dc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80054ec:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80054f0:	6203      	str	r3, [r0, #32]
}
 80054f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fa:	6a03      	ldr	r3, [r0, #32]
 80054fc:	f023 0310 	bic.w	r3, r3, #16
 8005500:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005504:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005506:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005512:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005516:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005518:	6203      	str	r3, [r0, #32]
}
 800551a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005520:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005526:	4319      	orrs	r1, r3
 8005528:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552c:	6081      	str	r1, [r0, #8]
}
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	2302      	movs	r3, #2
 8005532:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005536:	6802      	ldr	r2, [r0, #0]
 8005538:	6891      	ldr	r1, [r2, #8]
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <HAL_TIM_Base_Start+0x2c>)
 800553c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	2b06      	cmp	r3, #6
 8005540:	bf18      	it	ne
 8005542:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8005546:	d003      	beq.n	8005550 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005550:	2301      	movs	r3, #1
 8005552:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005556:	2000      	movs	r0, #0
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	00010007 	.word	0x00010007

08005560 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	6802      	ldr	r2, [r0, #0]
 8005562:	68d3      	ldr	r3, [r2, #12]
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	6802      	ldr	r2, [r0, #0]
 800556c:	6891      	ldr	r1, [r2, #8]
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_TIM_Base_Start_IT+0x28>)
 8005570:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	2b06      	cmp	r3, #6
 8005574:	bf18      	it	ne
 8005576:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 800557a:	d003      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800557c:	6813      	ldr	r3, [r2, #0]
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6013      	str	r3, [r2, #0]
}
 8005584:	2000      	movs	r0, #0
 8005586:	4770      	bx	lr
 8005588:	00010007 	.word	0x00010007

0800558c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_IC_CaptureCallback>:
}
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_TriggerCallback>:
}
 8005592:	4770      	bx	lr

08005594 <HAL_TIM_IRQHandler>:
{
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005598:	6803      	ldr	r3, [r0, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	f012 0f02 	tst.w	r2, #2
 80055a0:	d011      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	f012 0f02 	tst.w	r2, #2
 80055a8:	d00d      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055aa:	f06f 0202 	mvn.w	r2, #2
 80055ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b0:	2301      	movs	r3, #1
 80055b2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	6803      	ldr	r3, [r0, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f013 0f03 	tst.w	r3, #3
 80055bc:	d079      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80055be:	f7ff ffe6 	bl	800558e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	2300      	movs	r3, #0
 80055c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	f012 0f04 	tst.w	r2, #4
 80055ce:	d012      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	f012 0f04 	tst.w	r2, #4
 80055d6:	d00e      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055d8:	f06f 0204 	mvn.w	r2, #4
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055de:	2302      	movs	r3, #2
 80055e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80055ea:	d068      	beq.n	80056be <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	4620      	mov	r0, r4
 80055ee:	f7ff ffce 	bl	800558e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	2300      	movs	r3, #0
 80055f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	f012 0f08 	tst.w	r2, #8
 80055fe:	d012      	beq.n	8005626 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	f012 0f08 	tst.w	r2, #8
 8005606:	d00e      	beq.n	8005626 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005608:	f06f 0208 	mvn.w	r2, #8
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560e:	2304      	movs	r3, #4
 8005610:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f013 0f03 	tst.w	r3, #3
 800561a:	d057      	beq.n	80056cc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff ffb6 	bl	800558e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	2300      	movs	r3, #0
 8005624:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	f012 0f10 	tst.w	r2, #16
 800562e:	d012      	beq.n	8005656 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	f012 0f10 	tst.w	r2, #16
 8005636:	d00e      	beq.n	8005656 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	f06f 0210 	mvn.w	r2, #16
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563e:	2308      	movs	r3, #8
 8005640:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f413 7f40 	tst.w	r3, #768	; 0x300
 800564a:	d046      	beq.n	80056da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff ff9e 	bl	800558e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	2300      	movs	r3, #0
 8005654:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	f012 0f01 	tst.w	r2, #1
 800565e:	d003      	beq.n	8005668 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	f012 0f01 	tst.w	r2, #1
 8005666:	d13f      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005678:	d13d      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	f012 0f80 	tst.w	r2, #128	; 0x80
 800568a:	d13b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	f012 0f40 	tst.w	r2, #64	; 0x40
 800569c:	d139      	bne.n	8005712 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	f012 0f20 	tst.w	r2, #32
 80056a6:	d003      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	f012 0f20 	tst.w	r2, #32
 80056ae:	d137      	bne.n	8005720 <HAL_TIM_IRQHandler+0x18c>
}
 80056b0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	f7ff ff6b 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff ff6a 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
 80056bc:	e781      	b.n	80055c2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff ff64 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff ff63 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
 80056ca:	e792      	b.n	80055f2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7ff ff5d 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff ff5c 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
 80056d8:	e7a3      	b.n	8005622 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	4620      	mov	r0, r4
 80056dc:	f7ff ff56 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff ff55 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
 80056e6:	e7b4      	b.n	8005652 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e8:	f06f 0201 	mvn.w	r2, #1
 80056ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ee:	4620      	mov	r0, r4
 80056f0:	f004 f8b8 	bl	8009864 <HAL_TIM_PeriodElapsedCallback>
 80056f4:	e7b8      	b.n	8005668 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 f964 	bl	80059ca <HAL_TIMEx_BreakCallback>
 8005702:	e7ba      	b.n	800567a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005704:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005708:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f95e 	bl	80059cc <HAL_TIMEx_Break2Callback>
 8005710:	e7bc      	b.n	800568c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005716:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff ff3a 	bl	8005592 <HAL_TIM_TriggerCallback>
 800571e:	e7be      	b.n	800569e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005720:	f06f 0220 	mvn.w	r2, #32
 8005724:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f94e 	bl	80059c8 <HAL_TIMEx_CommutCallback>
}
 800572c:	e7c0      	b.n	80056b0 <HAL_TIM_IRQHandler+0x11c>
	...

08005730 <TIM_Base_SetConfig>:
{
 8005730:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8005732:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	4c3a      	ldr	r4, [pc, #232]	; (8005820 <TIM_Base_SetConfig+0xf0>)
 8005736:	42a0      	cmp	r0, r4
 8005738:	bf14      	ite	ne
 800573a:	2400      	movne	r4, #0
 800573c:	2401      	moveq	r4, #1
 800573e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005742:	bf14      	ite	ne
 8005744:	4622      	movne	r2, r4
 8005746:	f044 0201 	orreq.w	r2, r4, #1
 800574a:	b9aa      	cbnz	r2, 8005778 <TIM_Base_SetConfig+0x48>
 800574c:	4d35      	ldr	r5, [pc, #212]	; (8005824 <TIM_Base_SetConfig+0xf4>)
 800574e:	42a8      	cmp	r0, r5
 8005750:	bf14      	ite	ne
 8005752:	2500      	movne	r5, #0
 8005754:	2501      	moveq	r5, #1
 8005756:	4e34      	ldr	r6, [pc, #208]	; (8005828 <TIM_Base_SetConfig+0xf8>)
 8005758:	42b0      	cmp	r0, r6
 800575a:	d00d      	beq.n	8005778 <TIM_Base_SetConfig+0x48>
 800575c:	b965      	cbnz	r5, 8005778 <TIM_Base_SetConfig+0x48>
 800575e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8005762:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8005766:	42a8      	cmp	r0, r5
 8005768:	bf14      	ite	ne
 800576a:	2500      	movne	r5, #0
 800576c:	2501      	moveq	r5, #1
 800576e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005772:	42b0      	cmp	r0, r6
 8005774:	d000      	beq.n	8005778 <TIM_Base_SetConfig+0x48>
 8005776:	b11d      	cbz	r5, 8005780 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800577c:	684d      	ldr	r5, [r1, #4]
 800577e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005780:	2a00      	cmp	r2, #0
 8005782:	d133      	bne.n	80057ec <TIM_Base_SetConfig+0xbc>
 8005784:	4a27      	ldr	r2, [pc, #156]	; (8005824 <TIM_Base_SetConfig+0xf4>)
 8005786:	4290      	cmp	r0, r2
 8005788:	bf14      	ite	ne
 800578a:	2200      	movne	r2, #0
 800578c:	2201      	moveq	r2, #1
 800578e:	4d26      	ldr	r5, [pc, #152]	; (8005828 <TIM_Base_SetConfig+0xf8>)
 8005790:	42a8      	cmp	r0, r5
 8005792:	d02b      	beq.n	80057ec <TIM_Base_SetConfig+0xbc>
 8005794:	bb52      	cbnz	r2, 80057ec <TIM_Base_SetConfig+0xbc>
 8005796:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800579a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800579e:	4290      	cmp	r0, r2
 80057a0:	bf14      	ite	ne
 80057a2:	2200      	movne	r2, #0
 80057a4:	2201      	moveq	r2, #1
 80057a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d01e      	beq.n	80057ec <TIM_Base_SetConfig+0xbc>
 80057ae:	b9ea      	cbnz	r2, 80057ec <TIM_Base_SetConfig+0xbc>
 80057b0:	4a1e      	ldr	r2, [pc, #120]	; (800582c <TIM_Base_SetConfig+0xfc>)
 80057b2:	4290      	cmp	r0, r2
 80057b4:	bf14      	ite	ne
 80057b6:	2200      	movne	r2, #0
 80057b8:	2201      	moveq	r2, #1
 80057ba:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80057be:	42a8      	cmp	r0, r5
 80057c0:	d014      	beq.n	80057ec <TIM_Base_SetConfig+0xbc>
 80057c2:	b99a      	cbnz	r2, 80057ec <TIM_Base_SetConfig+0xbc>
 80057c4:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <TIM_Base_SetConfig+0x100>)
 80057c6:	4290      	cmp	r0, r2
 80057c8:	bf14      	ite	ne
 80057ca:	2200      	movne	r2, #0
 80057cc:	2201      	moveq	r2, #1
 80057ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80057d2:	42a8      	cmp	r0, r5
 80057d4:	d00a      	beq.n	80057ec <TIM_Base_SetConfig+0xbc>
 80057d6:	b94a      	cbnz	r2, 80057ec <TIM_Base_SetConfig+0xbc>
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <TIM_Base_SetConfig+0x104>)
 80057da:	4290      	cmp	r0, r2
 80057dc:	bf14      	ite	ne
 80057de:	2200      	movne	r2, #0
 80057e0:	2201      	moveq	r2, #1
 80057e2:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	d000      	beq.n	80057ec <TIM_Base_SetConfig+0xbc>
 80057ea:	b11a      	cbz	r2, 80057f4 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f0:	68ca      	ldr	r2, [r1, #12]
 80057f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f8:	694a      	ldr	r2, [r1, #20]
 80057fa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80057fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fe:	688a      	ldr	r2, [r1, #8]
 8005800:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005802:	680a      	ldr	r2, [r1, #0]
 8005804:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <TIM_Base_SetConfig+0x108>)
 8005808:	4298      	cmp	r0, r3
 800580a:	bf14      	ite	ne
 800580c:	4623      	movne	r3, r4
 800580e:	f044 0301 	orreq.w	r3, r4, #1
 8005812:	b10b      	cbz	r3, 8005818 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005818:	2301      	movs	r3, #1
 800581a:	6143      	str	r3, [r0, #20]
}
 800581c:	bc70      	pop	{r4, r5, r6}
 800581e:	4770      	bx	lr
 8005820:	40010000 	.word	0x40010000
 8005824:	40000800 	.word	0x40000800
 8005828:	40000400 	.word	0x40000400
 800582c:	40014400 	.word	0x40014400
 8005830:	40001800 	.word	0x40001800
 8005834:	40002000 	.word	0x40002000
 8005838:	40010400 	.word	0x40010400

0800583c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800583c:	b1a8      	cbz	r0, 800586a <HAL_TIM_Base_Init+0x2e>
{
 800583e:	b510      	push	{r4, lr}
 8005840:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005846:	b15b      	cbz	r3, 8005860 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	2302      	movs	r3, #2
 800584a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584e:	1d21      	adds	r1, r4, #4
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	f7ff ff6d 	bl	8005730 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005856:	2301      	movs	r3, #1
 8005858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800585c:	2000      	movs	r0, #0
}
 800585e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005860:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005864:	f004 f99a 	bl	8009b9c <HAL_TIM_Base_MspInit>
 8005868:	e7ee      	b.n	8005848 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800586a:	2001      	movs	r0, #1
}
 800586c:	4770      	bx	lr

0800586e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800586e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005870:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005872:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005876:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800587a:	430b      	orrs	r3, r1
 800587c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	6083      	str	r3, [r0, #8]
}
 8005880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005888:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d064      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xd2>
{
 8005890:	b510      	push	{r4, lr}
 8005892:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005894:	2301      	movs	r3, #1
 8005896:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80058a0:	6802      	ldr	r2, [r0, #0]
 80058a2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	4b2e      	ldr	r3, [pc, #184]	; (8005960 <HAL_TIM_ConfigClockSource+0xd8>)
 80058a6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80058a8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80058aa:	680b      	ldr	r3, [r1, #0]
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d04a      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xbe>
 80058b0:	d913      	bls.n	80058da <HAL_TIM_ConfigClockSource+0x52>
 80058b2:	2b60      	cmp	r3, #96	; 0x60
 80058b4:	d03d      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0xaa>
 80058b6:	d91e      	bls.n	80058f6 <HAL_TIM_ConfigClockSource+0x6e>
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d028      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x86>
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d130      	bne.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80058c2:	68cb      	ldr	r3, [r1, #12]
 80058c4:	684a      	ldr	r2, [r1, #4]
 80058c6:	6889      	ldr	r1, [r1, #8]
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	f7ff ffd0 	bl	800586e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	6893      	ldr	r3, [r2, #8]
 80058d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d6:	6093      	str	r3, [r2, #8]
      break;
 80058d8:	e024      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d006      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x64>
 80058de:	d904      	bls.n	80058ea <HAL_TIM_ConfigClockSource+0x62>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d003      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x64>
 80058e4:	2b30      	cmp	r3, #48	; 0x30
 80058e6:	d001      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x64>
 80058e8:	e01c      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
 80058ea:	b9db      	cbnz	r3, 8005924 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ec:	4619      	mov	r1, r3
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	f7ff fe16 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e016      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80058f6:	2b50      	cmp	r3, #80	; 0x50
 80058f8:	d114      	bne.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	68ca      	ldr	r2, [r1, #12]
 80058fc:	6849      	ldr	r1, [r1, #4]
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	f7ff fde7 	bl	80054d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	2150      	movs	r1, #80	; 0x50
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	f7ff fe0a 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 800590c:	e00a      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	68cb      	ldr	r3, [r1, #12]
 8005910:	684a      	ldr	r2, [r1, #4]
 8005912:	6889      	ldr	r1, [r1, #8]
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	f7ff ffaa 	bl	800586e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005922:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005924:	2301      	movs	r3, #1
 8005926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800592a:	2000      	movs	r0, #0
 800592c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005930:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	68ca      	ldr	r2, [r1, #12]
 8005934:	6849      	ldr	r1, [r1, #4]
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	f7ff fdde 	bl	80054f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800593c:	2160      	movs	r1, #96	; 0x60
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	f7ff fdee 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 8005944:	e7ee      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	68ca      	ldr	r2, [r1, #12]
 8005948:	6849      	ldr	r1, [r1, #4]
 800594a:	6820      	ldr	r0, [r4, #0]
 800594c:	f7ff fdc1 	bl	80054d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005950:	2140      	movs	r1, #64	; 0x40
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	f7ff fde4 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 8005958:	e7e4      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800595a:	2002      	movs	r0, #2
}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	fffe0088 	.word	0xfffe0088

08005964 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005964:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d027      	beq.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 800596c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800596e:	2301      	movs	r3, #1
 8005970:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	2302      	movs	r3, #2
 8005976:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800597a:	6803      	ldr	r3, [r0, #0]
 800597c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800597e:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005980:	4e0f      	ldr	r6, [pc, #60]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005982:	4c10      	ldr	r4, [pc, #64]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005984:	42a3      	cmp	r3, r4
 8005986:	bf18      	it	ne
 8005988:	42b3      	cmpne	r3, r6
 800598a:	d103      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800598c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005990:	684c      	ldr	r4, [r1, #4]
 8005992:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005994:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005998:	680c      	ldr	r4, [r1, #0]
 800599a:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800599c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a0:	6889      	ldr	r1, [r1, #8]
 80059a2:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059a6:	6803      	ldr	r3, [r0, #0]
 80059a8:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b0:	2300      	movs	r3, #0
 80059b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80059b6:	4618      	mov	r0, r3
}
 80059b8:	bc70      	pop	{r4, r5, r6}
 80059ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80059bc:	2002      	movs	r0, #2
}
 80059be:	4770      	bx	lr
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c8:	4770      	bx	lr

080059ca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059cc:	4770      	bx	lr
	...

080059d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	6883      	ldr	r3, [r0, #8]
 80059d6:	6902      	ldr	r2, [r0, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	6942      	ldr	r2, [r0, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	69c2      	ldr	r2, [r0, #28]
 80059e0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059e2:	6801      	ldr	r1, [r0, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	4a99      	ldr	r2, [pc, #612]	; (8005c4c <UART_SetConfig+0x27c>)
 80059e8:	4002      	ands	r2, r0
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	6853      	ldr	r3, [r2, #4]
 80059f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059f6:	68e1      	ldr	r1, [r4, #12]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059fc:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80059fe:	6a23      	ldr	r3, [r4, #32]
 8005a00:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	688b      	ldr	r3, [r1, #8]
 8005a06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	4a8f      	ldr	r2, [pc, #572]	; (8005c50 <UART_SetConfig+0x280>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <UART_SetConfig+0x78>
 8005a16:	4a8f      	ldr	r2, [pc, #572]	; (8005c54 <UART_SetConfig+0x284>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d028      	beq.n	8005a6e <UART_SetConfig+0x9e>
 8005a1c:	4a8e      	ldr	r2, [pc, #568]	; (8005c58 <UART_SetConfig+0x288>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d03d      	beq.n	8005a9e <UART_SetConfig+0xce>
 8005a22:	4a8e      	ldr	r2, [pc, #568]	; (8005c5c <UART_SetConfig+0x28c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d050      	beq.n	8005aca <UART_SetConfig+0xfa>
 8005a28:	4a8d      	ldr	r2, [pc, #564]	; (8005c60 <UART_SetConfig+0x290>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d062      	beq.n	8005af4 <UART_SetConfig+0x124>
 8005a2e:	4a8d      	ldr	r2, [pc, #564]	; (8005c64 <UART_SetConfig+0x294>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d077      	beq.n	8005b24 <UART_SetConfig+0x154>
 8005a34:	4a8c      	ldr	r2, [pc, #560]	; (8005c68 <UART_SetConfig+0x298>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	f000 808c 	beq.w	8005b54 <UART_SetConfig+0x184>
 8005a3c:	4a8b      	ldr	r2, [pc, #556]	; (8005c6c <UART_SetConfig+0x29c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	f000 80a0 	beq.w	8005b84 <UART_SetConfig+0x1b4>
 8005a44:	2310      	movs	r3, #16
 8005a46:	e0b6      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a48:	4b89      	ldr	r3, [pc, #548]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d809      	bhi.n	8005a6a <UART_SetConfig+0x9a>
 8005a56:	e8df f003 	tbb	[pc, r3]
 8005a5a:	0402      	.short	0x0402
 8005a5c:	06ad      	.short	0x06ad
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0a9      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a62:	2304      	movs	r3, #4
 8005a64:	e0a7      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a66:	2308      	movs	r3, #8
 8005a68:	e0a5      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	e0a3      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a6e:	4b80      	ldr	r3, [pc, #512]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d80e      	bhi.n	8005a9a <UART_SetConfig+0xca>
 8005a7c:	e8df f003 	tbb	[pc, r3]
 8005a80:	0d0d0d07 	.word	0x0d0d0d07
 8005a84:	0d0d0d09 	.word	0x0d0d0d09
 8005a88:	0d0d0da9 	.word	0x0d0d0da9
 8005a8c:	0b          	.byte	0x0b
 8005a8d:	00          	.byte	0x00
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e091      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a92:	2304      	movs	r3, #4
 8005a94:	e08f      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a96:	2308      	movs	r3, #8
 8005a98:	e08d      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	e08b      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005a9e:	4b74      	ldr	r3, [pc, #464]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d00a      	beq.n	8005ac2 <UART_SetConfig+0xf2>
 8005aac:	d906      	bls.n	8005abc <UART_SetConfig+0xec>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f000 8091 	beq.w	8005bd6 <UART_SetConfig+0x206>
 8005ab4:	2b30      	cmp	r3, #48	; 0x30
 8005ab6:	d106      	bne.n	8005ac6 <UART_SetConfig+0xf6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	e07c      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005abc:	b91b      	cbnz	r3, 8005ac6 <UART_SetConfig+0xf6>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e079      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	e077      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	e075      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005aca:	4b69      	ldr	r3, [pc, #420]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d009      	beq.n	8005aec <UART_SetConfig+0x11c>
 8005ad8:	d905      	bls.n	8005ae6 <UART_SetConfig+0x116>
 8005ada:	2b80      	cmp	r3, #128	; 0x80
 8005adc:	d07d      	beq.n	8005bda <UART_SetConfig+0x20a>
 8005ade:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae0:	d106      	bne.n	8005af0 <UART_SetConfig+0x120>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	e067      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005ae6:	b91b      	cbnz	r3, 8005af0 <UART_SetConfig+0x120>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e064      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005aec:	2304      	movs	r3, #4
 8005aee:	e062      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005af0:	2310      	movs	r3, #16
 8005af2:	e060      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005af4:	4b5e      	ldr	r3, [pc, #376]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d00b      	beq.n	8005b1c <UART_SetConfig+0x14c>
 8005b04:	d907      	bls.n	8005b16 <UART_SetConfig+0x146>
 8005b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0a:	d068      	beq.n	8005bde <UART_SetConfig+0x20e>
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b10:	d106      	bne.n	8005b20 <UART_SetConfig+0x150>
 8005b12:	2308      	movs	r3, #8
 8005b14:	e04f      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b16:	b91b      	cbnz	r3, 8005b20 <UART_SetConfig+0x150>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e04c      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e04a      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b20:	2310      	movs	r3, #16
 8005b22:	e048      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b24:	4b52      	ldr	r3, [pc, #328]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d00b      	beq.n	8005b4c <UART_SetConfig+0x17c>
 8005b34:	d907      	bls.n	8005b46 <UART_SetConfig+0x176>
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d052      	beq.n	8005be2 <UART_SetConfig+0x212>
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b40:	d106      	bne.n	8005b50 <UART_SetConfig+0x180>
 8005b42:	2308      	movs	r3, #8
 8005b44:	e037      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b46:	b91b      	cbnz	r3, 8005b50 <UART_SetConfig+0x180>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e034      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	e032      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b50:	2310      	movs	r3, #16
 8005b52:	e030      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b54:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b62:	d00b      	beq.n	8005b7c <UART_SetConfig+0x1ac>
 8005b64:	d907      	bls.n	8005b76 <UART_SetConfig+0x1a6>
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6a:	d03c      	beq.n	8005be6 <UART_SetConfig+0x216>
 8005b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b70:	d106      	bne.n	8005b80 <UART_SetConfig+0x1b0>
 8005b72:	2308      	movs	r3, #8
 8005b74:	e01f      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b76:	b91b      	cbnz	r3, 8005b80 <UART_SetConfig+0x1b0>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e01c      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	e01a      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b80:	2310      	movs	r3, #16
 8005b82:	e018      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b92:	d00b      	beq.n	8005bac <UART_SetConfig+0x1dc>
 8005b94:	d907      	bls.n	8005ba6 <UART_SetConfig+0x1d6>
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d026      	beq.n	8005bea <UART_SetConfig+0x21a>
 8005b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ba0:	d106      	bne.n	8005bb0 <UART_SetConfig+0x1e0>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	e007      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005ba6:	b91b      	cbnz	r3, 8005bb0 <UART_SetConfig+0x1e0>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e004      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bac:	2304      	movs	r3, #4
 8005bae:	e002      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	e000      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bb4:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb6:	69e2      	ldr	r2, [r4, #28]
 8005bb8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005bbc:	d017      	beq.n	8005bee <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	f200 80b3 	bhi.w	8005d2a <UART_SetConfig+0x35a>
 8005bc4:	e8df f003 	tbb	[pc, r3]
 8005bc8:	b1958b76 	.word	0xb1958b76
 8005bcc:	b1b1b19e 	.word	0xb1b1b19e
 8005bd0:	a8          	.byte	0xa8
 8005bd1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e7ef      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e7ed      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e7eb      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e7e9      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e7e7      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e7e5      	b.n	8005bb6 <UART_SetConfig+0x1e6>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e7e3      	b.n	8005bb6 <UART_SetConfig+0x1e6>
    switch (clocksource)
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d85d      	bhi.n	8005cae <UART_SetConfig+0x2de>
 8005bf2:	e8df f003 	tbb	[pc, r3]
 8005bf6:	1f05      	.short	0x1f05
 8005bf8:	5c485c3f 	.word	0x5c485c3f
 8005bfc:	5c5c      	.short	0x5c5c
 8005bfe:	53          	.byte	0x53
 8005bff:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c00:	f7fe fc78 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	0853      	lsrs	r3, r2, #1
 8005c08:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c10:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c12:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c14:	f1a3 0110 	sub.w	r1, r3, #16
 8005c18:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005c1c:	4291      	cmp	r1, r2
 8005c1e:	f200 8087 	bhi.w	8005d30 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c28:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005c2c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	60d3      	str	r3, [r2, #12]
 8005c32:	e050      	b.n	8005cd6 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c34:	f7fe fc6e 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8005c38:	6862      	ldr	r2, [r4, #4]
 8005c3a:	0853      	lsrs	r3, r2, #1
 8005c3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c46:	2000      	movs	r0, #0
        break;
 8005c48:	e7e4      	b.n	8005c14 <UART_SetConfig+0x244>
 8005c4a:	bf00      	nop
 8005c4c:	efff69f3 	.word	0xefff69f3
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40004400 	.word	0x40004400
 8005c58:	40004800 	.word	0x40004800
 8005c5c:	40004c00 	.word	0x40004c00
 8005c60:	40005000 	.word	0x40005000
 8005c64:	40011400 	.word	0x40011400
 8005c68:	40007800 	.word	0x40007800
 8005c6c:	40007c00 	.word	0x40007c00
 8005c70:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c74:	6862      	ldr	r2, [r4, #4]
 8005c76:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <UART_SetConfig+0x368>)
 8005c78:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c80:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c82:	2000      	movs	r0, #0
        break;
 8005c84:	e7c6      	b.n	8005c14 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c86:	f7fe fb29 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	0853      	lsrs	r3, r2, #1
 8005c8e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c96:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c98:	2000      	movs	r0, #0
        break;
 8005c9a:	e7bb      	b.n	8005c14 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c9c:	6862      	ldr	r2, [r4, #4]
 8005c9e:	0853      	lsrs	r3, r2, #1
 8005ca0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005caa:	2000      	movs	r0, #0
        break;
 8005cac:	e7b2      	b.n	8005c14 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8005cae:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e7af      	b.n	8005c14 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005cb4:	f7fe fc1e 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	6862      	ldr	r2, [r4, #4]
 8005cba:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc4:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc6:	f1a3 0110 	sub.w	r1, r3, #16
 8005cca:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	d830      	bhi.n	8005d34 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005cda:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005cdc:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005cde:	f7fe fc19 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cee:	2000      	movs	r0, #0
        break;
 8005cf0:	e7e9      	b.n	8005cc6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005cf2:	6862      	ldr	r2, [r4, #4]
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <UART_SetConfig+0x36c>)
 8005cf6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cfe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d00:	2000      	movs	r0, #0
        break;
 8005d02:	e7e0      	b.n	8005cc6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d04:	f7fe faea 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 8005d08:	6862      	ldr	r2, [r4, #4]
 8005d0a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d12:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d14:	2000      	movs	r0, #0
        break;
 8005d16:	e7d6      	b.n	8005cc6 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	0853      	lsrs	r3, r2, #1
 8005d1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d24:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d26:	2000      	movs	r0, #0
        break;
 8005d28:	e7cd      	b.n	8005cc6 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8005d2a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e7ca      	b.n	8005cc6 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7d0      	b.n	8005cd6 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8005d34:	2001      	movs	r0, #1
 8005d36:	e7ce      	b.n	8005cd6 <UART_SetConfig+0x306>
 8005d38:	01e84800 	.word	0x01e84800
 8005d3c:	00f42400 	.word	0x00f42400

08005d40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d42:	f013 0f01 	tst.w	r3, #1
 8005d46:	d006      	beq.n	8005d56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d48:	6802      	ldr	r2, [r0, #0]
 8005d4a:	6853      	ldr	r3, [r2, #4]
 8005d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d50:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005d52:	430b      	orrs	r3, r1
 8005d54:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d58:	f013 0f02 	tst.w	r3, #2
 8005d5c:	d006      	beq.n	8005d6c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d5e:	6802      	ldr	r2, [r0, #0]
 8005d60:	6853      	ldr	r3, [r2, #4]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d6e:	f013 0f04 	tst.w	r3, #4
 8005d72:	d006      	beq.n	8005d82 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d74:	6802      	ldr	r2, [r0, #0]
 8005d76:	6853      	ldr	r3, [r2, #4]
 8005d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d84:	f013 0f08 	tst.w	r3, #8
 8005d88:	d006      	beq.n	8005d98 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d8a:	6802      	ldr	r2, [r0, #0]
 8005d8c:	6853      	ldr	r3, [r2, #4]
 8005d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d92:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d9a:	f013 0f10 	tst.w	r3, #16
 8005d9e:	d006      	beq.n	8005dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da0:	6802      	ldr	r2, [r0, #0]
 8005da2:	6893      	ldr	r3, [r2, #8]
 8005da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005da8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005daa:	430b      	orrs	r3, r1
 8005dac:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005db0:	f013 0f20 	tst.w	r3, #32
 8005db4:	d006      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	6802      	ldr	r2, [r0, #0]
 8005db8:	6893      	ldr	r3, [r2, #8]
 8005dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dbe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005dc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dcc:	6802      	ldr	r2, [r0, #0]
 8005dce:	6853      	ldr	r3, [r2, #4]
 8005dd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de0:	d00b      	beq.n	8005dfa <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005de8:	d006      	beq.n	8005df8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dea:	6802      	ldr	r2, [r0, #0]
 8005dec:	6853      	ldr	r3, [r2, #4]
 8005dee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005df2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005df4:	430b      	orrs	r3, r1
 8005df6:	6053      	str	r3, [r2, #4]
  }
}
 8005df8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dfa:	6802      	ldr	r2, [r0, #0]
 8005dfc:	6853      	ldr	r3, [r2, #4]
 8005dfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e02:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6053      	str	r3, [r2, #4]
 8005e08:	e7eb      	b.n	8005de2 <UART_AdvFeatureConfig+0xa2>

08005e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	4605      	mov	r5, r0
 8005e10:	460f      	mov	r7, r1
 8005e12:	4616      	mov	r6, r2
 8005e14:	4698      	mov	r8, r3
 8005e16:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	ea37 0303 	bics.w	r3, r7, r3
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	42b3      	cmp	r3, r6
 8005e28:	d11c      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005e2e:	d0f3      	beq.n	8005e18 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e30:	f7fc f920 	bl	8002074 <HAL_GetTick>
 8005e34:	eba0 0008 	sub.w	r0, r0, r8
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d801      	bhi.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x36>
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d1eb      	bne.n	8005e18 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e40:	682a      	ldr	r2, [r5, #0]
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e48:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	682a      	ldr	r2, [r5, #0]
 8005e4c:	6893      	ldr	r3, [r2, #8]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e54:	2320      	movs	r3, #32
 8005e56:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e58:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
 8005e62:	e000      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8005e64:	2000      	movs	r0, #0
}
 8005e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e6a <UART_CheckIdleState>:
{
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005e74:	f7fc f8fe 	bl	8002074 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	f012 0f08 	tst.w	r2, #8
 8005e80:	d107      	bne.n	8005e92 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8005e82:	2320      	movs	r3, #32
 8005e84:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e86:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ffb2 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0eb      	beq.n	8005e82 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005eaa:	2003      	movs	r0, #3
 8005eac:	e7ef      	b.n	8005e8e <UART_CheckIdleState+0x24>

08005eae <HAL_UART_Init>:
  if (huart == NULL)
 8005eae:	b368      	cbz	r0, 8005f0c <HAL_UART_Init+0x5e>
{
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005eb4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005eb6:	b303      	cbz	r3, 8005efa <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005eb8:	2324      	movs	r3, #36	; 0x24
 8005eba:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff fd82 	bl	80059d0 <UART_SetConfig>
 8005ecc:	2801      	cmp	r0, #1
 8005ece:	d013      	beq.n	8005ef8 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed2:	b9bb      	cbnz	r3, 8005f04 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	6853      	ldr	r3, [r2, #4]
 8005ed8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005edc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005ee6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff ffb9 	bl	8005e6a <UART_CheckIdleState>
}
 8005ef8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005efa:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005efe:	f003 fe89 	bl	8009c14 <HAL_UART_MspInit>
 8005f02:	e7d9      	b.n	8005eb8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff ff1b 	bl	8005d40 <UART_AdvFeatureConfig>
 8005f0a:	e7e3      	b.n	8005ed4 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005f0c:	2001      	movs	r0, #1
}
 8005f0e:	4770      	bx	lr

08005f10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f10:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005f12:	680b      	ldr	r3, [r1, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d018      	beq.n	8005f4a <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005f18:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005f1a:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <FMC_SDRAM_Init+0x70>)
 8005f1c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f1e:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005f20:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f22:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8005f24:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8005f26:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005f28:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8005f2a:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005f2c:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005f2e:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005f30:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005f32:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005f34:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8005f36:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005f38:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8005f3a:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005f3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f3e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f40:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f42:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005f44:	2000      	movs	r0, #0
 8005f46:	bc30      	pop	{r4, r5}
 8005f48:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005f4a:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005f4c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f50:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005f52:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005f56:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f58:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f5a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005f5c:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005f5e:	4c08      	ldr	r4, [pc, #32]	; (8005f80 <FMC_SDRAM_Init+0x70>)
 8005f60:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f62:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8005f64:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f66:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8005f68:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8005f6a:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8005f6c:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8005f6e:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8005f70:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8005f72:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8005f74:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8005f76:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f78:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f7a:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005f7c:	6043      	str	r3, [r0, #4]
 8005f7e:	e7e1      	b.n	8005f44 <FMC_SDRAM_Init+0x34>
 8005f80:	ffff8000 	.word	0xffff8000

08005f84 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f84:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005f86:	2a01      	cmp	r2, #1
 8005f88:	d021      	beq.n	8005fce <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f8a:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f8c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005f94:	684c      	ldr	r4, [r1, #4]
 8005f96:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f98:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005f9c:	688c      	ldr	r4, [r1, #8]
 8005f9e:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fa0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005fa4:	68cc      	ldr	r4, [r1, #12]
 8005fa6:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005fa8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005fac:	690c      	ldr	r4, [r1, #16]
 8005fae:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005fb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8005fb4:	694c      	ldr	r4, [r1, #20]
 8005fb6:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005fb8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8005fbc:	6989      	ldr	r1, [r1, #24]
 8005fbe:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005fc4:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005fc6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bc30      	pop	{r4, r5}
 8005fcc:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005fce:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005fd0:	4c11      	ldr	r4, [pc, #68]	; (8006018 <FMC_SDRAM_Timing_Init+0x94>)
 8005fd2:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005fd4:	68ca      	ldr	r2, [r1, #12]
 8005fd6:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8005fd8:	694b      	ldr	r3, [r1, #20]
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005fde:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8005fe2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005fe4:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005fe6:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fea:	680b      	ldr	r3, [r1, #0]
 8005fec:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005fee:	684d      	ldr	r5, [r1, #4]
 8005ff0:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ff2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005ff6:	688d      	ldr	r5, [r1, #8]
 8005ff8:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005ffa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005ffe:	690d      	ldr	r5, [r1, #16]
 8006000:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006002:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8006006:	6989      	ldr	r1, [r1, #24]
 8006008:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800600a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800600e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006010:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006012:	60c3      	str	r3, [r0, #12]
 8006014:	e7d8      	b.n	8005fc8 <FMC_SDRAM_Timing_Init+0x44>
 8006016:	bf00      	nop
 8006018:	ff0f0fff 	.word	0xff0f0fff

0800601c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800601c:	b410      	push	{r4}
 800601e:	b083      	sub	sp, #12
 8006020:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8006022:	2000      	movs	r0, #0
 8006024:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006026:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8006028:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800602a:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8006030:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8006034:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006036:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800603a:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8006040:	b003      	add	sp, #12
 8006042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006046:	4770      	bx	lr

08006048 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006048:	6943      	ldr	r3, [r0, #20]
 800604a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800604e:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8006050:	2000      	movs	r0, #0
 8006052:	4770      	bx	lr

08006054 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8006054:	4770      	bx	lr

08006056 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8006056:	2000      	movs	r0, #0
 8006058:	4770      	bx	lr

0800605a <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 800605a:	4770      	bx	lr

0800605c <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <ft5336_Get_I2C_InitializedStatus+0x8>)
 800605e:	7818      	ldrb	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000033c 	.word	0x2000033c

08006068 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006068:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800606a:	f7ff fff7 	bl	800605c <ft5336_Get_I2C_InitializedStatus>
 800606e:	b100      	cbz	r0, 8006072 <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8006070:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8006072:	f000 fa09 	bl	8006488 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006076:	4b02      	ldr	r3, [pc, #8]	; (8006080 <ft5336_I2C_InitializeIfRequired+0x18>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
}
 800607c:	e7f8      	b.n	8006070 <ft5336_I2C_InitializeIfRequired+0x8>
 800607e:	bf00      	nop
 8006080:	2000033c 	.word	0x2000033c

08006084 <ft5336_Init>:
{
 8006084:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 8006086:	20c8      	movs	r0, #200	; 0xc8
 8006088:	f000 fa2e 	bl	80064e8 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 800608c:	f7ff ffec 	bl	8006068 <ft5336_I2C_InitializeIfRequired>
}
 8006090:	bd08      	pop	{r3, pc}

08006092 <ft5336_ReadID>:
{
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8006098:	2400      	movs	r4, #0
 800609a:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 800609e:	f7ff ffe3 	bl	8006068 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80060a2:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80060a4:	e001      	b.n	80060aa <ft5336_ReadID+0x18>
 80060a6:	3401      	adds	r4, #1
 80060a8:	b2e4      	uxtb	r4, r4
 80060aa:	f085 0301 	eor.w	r3, r5, #1
 80060ae:	2c02      	cmp	r4, #2
 80060b0:	bf8c      	ite	hi
 80060b2:	2300      	movhi	r3, #0
 80060b4:	f003 0301 	andls.w	r3, r3, #1
 80060b8:	b163      	cbz	r3, 80060d4 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80060ba:	21a8      	movs	r1, #168	; 0xa8
 80060bc:	b2f0      	uxtb	r0, r6
 80060be:	f000 f9fd 	bl	80064bc <TS_IO_Read>
 80060c2:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80060c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b51      	cmp	r3, #81	; 0x51
 80060ce:	d1ea      	bne.n	80060a6 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 80060d0:	2501      	movs	r5, #1
 80060d2:	e7e8      	b.n	80060a6 <ft5336_ReadID+0x14>
  return (ucReadId);
 80060d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80060d8:	b002      	add	sp, #8
 80060da:	bd70      	pop	{r4, r5, r6, pc}

080060dc <ft5336_TS_DetectTouch>:
{
 80060dc:	b500      	push	{lr}
 80060de:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80060e6:	2102      	movs	r1, #2
 80060e8:	b2c0      	uxtb	r0, r0
 80060ea:	f000 f9e7 	bl	80064bc <TS_IO_Read>
 80060ee:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80060f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80060fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b05      	cmp	r3, #5
 8006106:	d902      	bls.n	800610e <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800610e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006112:	4b04      	ldr	r3, [pc, #16]	; (8006124 <ft5336_TS_DetectTouch+0x48>)
 8006114:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8006116:	2200      	movs	r2, #0
 8006118:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 800611a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800611e:	b003      	add	sp, #12
 8006120:	f85d fb04 	ldr.w	pc, [sp], #4
 8006124:	2000033c 	.word	0x2000033c

08006128 <ft5336_TS_GetXY>:
{
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8006134:	4d4f      	ldr	r5, [pc, #316]	; (8006274 <ft5336_TS_GetXY+0x14c>)
 8006136:	78ab      	ldrb	r3, [r5, #2]
 8006138:	786c      	ldrb	r4, [r5, #1]
 800613a:	42a3      	cmp	r3, r4
 800613c:	f080 8096 	bcs.w	800626c <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 8006140:	2b09      	cmp	r3, #9
 8006142:	d806      	bhi.n	8006152 <ft5336_TS_GetXY+0x2a>
 8006144:	e8df f003 	tbb	[pc, r3]
 8006148:	1b130b53 	.word	0x1b130b53
 800614c:	3b332b23 	.word	0x3b332b23
 8006150:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 8006152:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 8006156:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 8006158:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 800615a:	4643      	mov	r3, r8
 800615c:	e04e      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 800615e:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8006162:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8006166:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 800616a:	230a      	movs	r3, #10
      break;
 800616c:	e046      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 800616e:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8006172:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8006176:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 800617a:	2310      	movs	r3, #16
      break;
 800617c:	e03e      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 800617e:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8006182:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 8006186:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 800618a:	2316      	movs	r3, #22
      break;
 800618c:	e036      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 800618e:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8006192:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 8006196:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 800619a:	231c      	movs	r3, #28
      break;
 800619c:	e02e      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 800619e:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 80061a2:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 80061a6:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 80061aa:	2322      	movs	r3, #34	; 0x22
      break;
 80061ac:	e026      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 80061ae:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 80061b2:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 80061b6:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 80061ba:	2328      	movs	r3, #40	; 0x28
      break;
 80061bc:	e01e      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 80061be:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 80061c2:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 80061c6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 80061ca:	232e      	movs	r3, #46	; 0x2e
      break;
 80061cc:	e016      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 80061ce:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 80061d2:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 80061d6:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 80061da:	2334      	movs	r3, #52	; 0x34
      break;
 80061dc:	e00e      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 80061de:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 80061e2:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 80061e6:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 80061ea:	233a      	movs	r3, #58	; 0x3a
      break;
 80061ec:	e006      	b.n	80061fc <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 80061ee:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 80061f2:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 80061f6:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 80061fa:	2304      	movs	r3, #4
 80061fc:	4616      	mov	r6, r2
 80061fe:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006200:	b2c4      	uxtb	r4, r0
 8006202:	4619      	mov	r1, r3
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f959 	bl	80064bc <TS_IO_Read>
 800620a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800620e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006212:	4d19      	ldr	r5, [pc, #100]	; (8006278 <ft5336_TS_GetXY+0x150>)
 8006214:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006216:	4651      	mov	r1, sl
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f94f 	bl	80064bc <TS_IO_Read>
 800621e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006222:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800622c:	882a      	ldrh	r2, [r5, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	802b      	strh	r3, [r5, #0]
    *X = coord;
 8006232:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006234:	4649      	mov	r1, r9
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f940 	bl	80064bc <TS_IO_Read>
 800623c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006244:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006246:	4641      	mov	r1, r8
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f937 	bl	80064bc <TS_IO_Read>
 800624e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006252:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800625c:	882a      	ldrh	r2, [r5, #0]
 800625e:	4313      	orrs	r3, r2
 8006260:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 8006262:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006264:	4a03      	ldr	r2, [pc, #12]	; (8006274 <ft5336_TS_GetXY+0x14c>)
 8006266:	7893      	ldrb	r3, [r2, #2]
 8006268:	3301      	adds	r3, #1
 800626a:	7093      	strb	r3, [r2, #2]
}
 800626c:	b002      	add	sp, #8
 800626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006272:	bf00      	nop
 8006274:	2000033c 	.word	0x2000033c
 8006278:	2000033a 	.word	0x2000033a

0800627c <ft5336_TS_EnableIT>:
{
 800627c:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800627e:	2201      	movs	r2, #1
 8006280:	21a4      	movs	r1, #164	; 0xa4
 8006282:	b2c0      	uxtb	r0, r0
 8006284:	f000 f908 	bl	8006498 <TS_IO_Write>
}
 8006288:	bd08      	pop	{r3, pc}

0800628a <ft5336_TS_DisableIT>:
{
 800628a:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800628c:	2200      	movs	r2, #0
 800628e:	21a4      	movs	r1, #164	; 0xa4
 8006290:	b2c0      	uxtb	r0, r0
 8006292:	f000 f901 	bl	8006498 <TS_IO_Write>
}
 8006296:	bd08      	pop	{r3, pc}

08006298 <ft5336_TS_Start>:
{
 8006298:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 800629a:	f7ff fff6 	bl	800628a <ft5336_TS_DisableIT>
}
 800629e:	bd08      	pop	{r3, pc}

080062a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80062a4:	4b44      	ldr	r3, [pc, #272]	; (80063b8 <I2Cx_MspInit+0x118>)
 80062a6:	4283      	cmp	r3, r0
 80062a8:	d043      	beq.n	8006332 <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80062aa:	4c44      	ldr	r4, [pc, #272]	; (80063bc <I2Cx_MspInit+0x11c>)
 80062ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062ae:	f043 0302 	orr.w	r3, r3, #2
 80062b2:	6323      	str	r3, [r4, #48]	; 0x30
 80062b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80062be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c2:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80062c4:	2312      	movs	r3, #18
 80062c6:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80062c8:	2500      	movs	r5, #0
 80062ca:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80062cc:	2302      	movs	r3, #2
 80062ce:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80062d0:	2304      	movs	r3, #4
 80062d2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062d4:	4e3a      	ldr	r6, [pc, #232]	; (80063c0 <I2Cx_MspInit+0x120>)
 80062d6:	a905      	add	r1, sp, #20
 80062d8:	4630      	mov	r0, r6
 80062da:	f7fc ff53 	bl	8003184 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80062de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062e4:	a905      	add	r1, sp, #20
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7fc ff4c 	bl	8003184 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80062ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062f2:	6423      	str	r3, [r4, #64]	; 0x40
 80062f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80062fe:	6a23      	ldr	r3, [r4, #32]
 8006300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006304:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006306:	6a23      	ldr	r3, [r4, #32]
 8006308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630c:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800630e:	462a      	mov	r2, r5
 8006310:	210f      	movs	r1, #15
 8006312:	201f      	movs	r0, #31
 8006314:	f7fc fab2 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8006318:	201f      	movs	r0, #31
 800631a:	f7fc fae1 	bl	80028e0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800631e:	462a      	mov	r2, r5
 8006320:	210f      	movs	r1, #15
 8006322:	2020      	movs	r0, #32
 8006324:	f7fc faaa 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8006328:	2020      	movs	r0, #32
 800632a:	f7fc fad9 	bl	80028e0 <HAL_NVIC_EnableIRQ>
  }
}
 800632e:	b00a      	add	sp, #40	; 0x28
 8006330:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006332:	4c22      	ldr	r4, [pc, #136]	; (80063bc <I2Cx_MspInit+0x11c>)
 8006334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	6323      	str	r3, [r4, #48]	; 0x30
 800633c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800634a:	2312      	movs	r3, #18
 800634c:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800634e:	2500      	movs	r5, #0
 8006350:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006352:	2302      	movs	r3, #2
 8006354:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006356:	2304      	movs	r3, #4
 8006358:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800635a:	4e1a      	ldr	r6, [pc, #104]	; (80063c4 <I2Cx_MspInit+0x124>)
 800635c:	a905      	add	r1, sp, #20
 800635e:	4630      	mov	r0, r6
 8006360:	f7fc ff10 	bl	8003184 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006368:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800636a:	a905      	add	r1, sp, #20
 800636c:	4630      	mov	r0, r6
 800636e:	f7fc ff09 	bl	8003184 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006378:	6423      	str	r3, [r4, #64]	; 0x40
 800637a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800637c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006380:	9302      	str	r3, [sp, #8]
 8006382:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006384:	6a23      	ldr	r3, [r4, #32]
 8006386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800638a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800638c:	6a23      	ldr	r3, [r4, #32]
 800638e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006392:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006394:	462a      	mov	r2, r5
 8006396:	210f      	movs	r1, #15
 8006398:	2048      	movs	r0, #72	; 0x48
 800639a:	f7fc fa6f 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800639e:	2048      	movs	r0, #72	; 0x48
 80063a0:	f7fc fa9e 	bl	80028e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80063a4:	462a      	mov	r2, r5
 80063a6:	210f      	movs	r1, #15
 80063a8:	2049      	movs	r0, #73	; 0x49
 80063aa:	f7fc fa67 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80063ae:	2049      	movs	r0, #73	; 0x49
 80063b0:	f7fc fa96 	bl	80028e0 <HAL_NVIC_EnableIRQ>
 80063b4:	e7bb      	b.n	800632e <I2Cx_MspInit+0x8e>
 80063b6:	bf00      	nop
 80063b8:	20000340 	.word	0x20000340
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40020400 	.word	0x40020400
 80063c4:	40021c00 	.word	0x40021c00

080063c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80063c8:	b510      	push	{r4, lr}
 80063ca:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80063cc:	f7fd fb74 	bl	8003ab8 <HAL_I2C_GetState>
 80063d0:	b9a0      	cbnz	r0, 80063fc <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <I2Cx_Init+0x3c>)
 80063d4:	429c      	cmp	r4, r3
 80063d6:	d012      	beq.n	80063fe <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <I2Cx_Init+0x40>)
 80063da:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <I2Cx_Init+0x44>)
 80063de:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80063e4:	2201      	movs	r2, #1
 80063e6:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80063e8:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80063ea:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80063ec:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80063ee:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff ff55 	bl	80062a0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7fd f932 	bl	8003660 <HAL_I2C_Init>
  }
}
 80063fc:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <I2Cx_Init+0x48>)
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	e7eb      	b.n	80063dc <I2Cx_Init+0x14>
 8006404:	20000340 	.word	0x20000340
 8006408:	40005400 	.word	0x40005400
 800640c:	40912732 	.word	0x40912732
 8006410:	40005c00 	.word	0x40005c00

08006414 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006414:	b510      	push	{r4, lr}
 8006416:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006418:	f7fd f981 	bl	800371e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff ffd3 	bl	80063c8 <I2Cx_Init>
}
 8006422:	bd10      	pop	{r4, pc}

08006424 <I2Cx_WriteMultiple>:
{
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	4606      	mov	r6, r0
 800642a:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800642c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006430:	9102      	str	r1, [sp, #8]
 8006432:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006436:	9101      	str	r1, [sp, #4]
 8006438:	9908      	ldr	r1, [sp, #32]
 800643a:	9100      	str	r1, [sp, #0]
 800643c:	4621      	mov	r1, r4
 800643e:	f7fd f987 	bl	8003750 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8006442:	4605      	mov	r5, r0
 8006444:	b910      	cbnz	r0, 800644c <I2Cx_WriteMultiple+0x28>
}
 8006446:	4628      	mov	r0, r5
 8006448:	b004      	add	sp, #16
 800644a:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800644c:	4621      	mov	r1, r4
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ffe0 	bl	8006414 <I2Cx_Error>
 8006454:	e7f7      	b.n	8006446 <I2Cx_WriteMultiple+0x22>

08006456 <I2Cx_ReadMultiple>:
{
 8006456:	b570      	push	{r4, r5, r6, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	4606      	mov	r6, r0
 800645c:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800645e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006462:	9102      	str	r1, [sp, #8]
 8006464:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006468:	9101      	str	r1, [sp, #4]
 800646a:	9908      	ldr	r1, [sp, #32]
 800646c:	9100      	str	r1, [sp, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	f7fd fa46 	bl	8003900 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8006474:	4605      	mov	r5, r0
 8006476:	b910      	cbnz	r0, 800647e <I2Cx_ReadMultiple+0x28>
}
 8006478:	4628      	mov	r0, r5
 800647a:	b004      	add	sp, #16
 800647c:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800647e:	4621      	mov	r1, r4
 8006480:	4630      	mov	r0, r6
 8006482:	f7ff ffc7 	bl	8006414 <I2Cx_Error>
 8006486:	e7f7      	b.n	8006478 <I2Cx_ReadMultiple+0x22>

08006488 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006488:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 800648a:	4802      	ldr	r0, [pc, #8]	; (8006494 <TS_IO_Init+0xc>)
 800648c:	f7ff ff9c 	bl	80063c8 <I2Cx_Init>
}
 8006490:	bd08      	pop	{r3, pc}
 8006492:	bf00      	nop
 8006494:	20000340 	.word	0x20000340

08006498 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006498:	b510      	push	{r4, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	ac04      	add	r4, sp, #16
 800649e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80064a2:	2301      	movs	r3, #1
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	9400      	str	r4, [sp, #0]
 80064a8:	460a      	mov	r2, r1
 80064aa:	4601      	mov	r1, r0
 80064ac:	4802      	ldr	r0, [pc, #8]	; (80064b8 <TS_IO_Write+0x20>)
 80064ae:	f7ff ffb9 	bl	8006424 <I2Cx_WriteMultiple>
}
 80064b2:	b004      	add	sp, #16
 80064b4:	bd10      	pop	{r4, pc}
 80064b6:	bf00      	nop
 80064b8:	20000340 	.word	0x20000340

080064bc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80064bc:	b500      	push	{lr}
 80064be:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 80064c0:	aa04      	add	r2, sp, #16
 80064c2:	2300      	movs	r3, #0
 80064c4:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80064c8:	2301      	movs	r3, #1
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	9200      	str	r2, [sp, #0]
 80064ce:	460a      	mov	r2, r1
 80064d0:	4601      	mov	r1, r0
 80064d2:	4804      	ldr	r0, [pc, #16]	; (80064e4 <TS_IO_Read+0x28>)
 80064d4:	f7ff ffbf 	bl	8006456 <I2Cx_ReadMultiple>

  return read_value;
}
 80064d8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80064dc:	b005      	add	sp, #20
 80064de:	f85d fb04 	ldr.w	pc, [sp], #4
 80064e2:	bf00      	nop
 80064e4:	20000340 	.word	0x20000340

080064e8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80064e8:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80064ea:	f7fb fdc9 	bl	8002080 <HAL_Delay>
}
 80064ee:	bd08      	pop	{r3, pc}

080064f0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	4616      	mov	r6, r2
 80064fa:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80064fc:	4b18      	ldr	r3, [pc, #96]	; (8006560 <LL_FillBuffer+0x70>)
 80064fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006502:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <LL_FillBuffer+0x74>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a17      	ldr	r2, [pc, #92]	; (8006568 <LL_FillBuffer+0x78>)
 800650a:	2134      	movs	r1, #52	; 0x34
 800650c:	fb01 2303 	mla	r3, r1, r3, r2
 8006510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006512:	2b02      	cmp	r3, #2
 8006514:	d00c      	beq.n	8006530 <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <LL_FillBuffer+0x70>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800651c:	4810      	ldr	r0, [pc, #64]	; (8006560 <LL_FillBuffer+0x70>)
 800651e:	9b08      	ldr	r3, [sp, #32]
 8006520:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <LL_FillBuffer+0x7c>)
 8006524:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006526:	f7fc fce1 	bl	8002eec <HAL_DMA2D_Init>
 800652a:	b128      	cbz	r0, 8006538 <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 800652c:	b003      	add	sp, #12
 800652e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <LL_FillBuffer+0x70>)
 8006532:	2202      	movs	r2, #2
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	e7f1      	b.n	800651c <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006538:	4621      	mov	r1, r4
 800653a:	4809      	ldr	r0, [pc, #36]	; (8006560 <LL_FillBuffer+0x70>)
 800653c:	f7fc fdc0 	bl	80030c0 <HAL_DMA2D_ConfigLayer>
 8006540:	2800      	cmp	r0, #0
 8006542:	d1f3      	bne.n	800652c <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006544:	9700      	str	r7, [sp, #0]
 8006546:	4633      	mov	r3, r6
 8006548:	462a      	mov	r2, r5
 800654a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800654c:	4804      	ldr	r0, [pc, #16]	; (8006560 <LL_FillBuffer+0x70>)
 800654e:	f7fc fcfb 	bl	8002f48 <HAL_DMA2D_Start>
 8006552:	2800      	cmp	r0, #0
 8006554:	d1ea      	bne.n	800652c <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006556:	210a      	movs	r1, #10
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <LL_FillBuffer+0x70>)
 800655a:	f7fc fd11 	bl	8002f80 <HAL_DMA2D_PollForTransfer>
}
 800655e:	e7e5      	b.n	800652c <LL_FillBuffer+0x3c>
 8006560:	200003a8 	.word	0x200003a8
 8006564:	2000038c 	.word	0x2000038c
 8006568:	20004430 	.word	0x20004430
 800656c:	4002b000 	.word	0x4002b000

08006570 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <BSP_LCD_GetXSize+0x10>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a03      	ldr	r2, [pc, #12]	; (8006584 <BSP_LCD_GetXSize+0x14>)
 8006576:	2134      	movs	r1, #52	; 0x34
 8006578:	fb01 2303 	mla	r3, r1, r3, r2
}
 800657c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800657e:	4770      	bx	lr
 8006580:	2000038c 	.word	0x2000038c
 8006584:	20004430 	.word	0x20004430

08006588 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006588:	4b03      	ldr	r3, [pc, #12]	; (8006598 <BSP_LCD_GetYSize+0x10>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a03      	ldr	r2, [pc, #12]	; (800659c <BSP_LCD_GetYSize+0x14>)
 800658e:	2134      	movs	r1, #52	; 0x34
 8006590:	fb01 2303 	mla	r3, r1, r3, r2
}
 8006594:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006596:	4770      	bx	lr
 8006598:	2000038c 	.word	0x2000038c
 800659c:	20004430 	.word	0x20004430

080065a0 <BSP_LCD_LayerDefaultInit>:
{     
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	4605      	mov	r5, r0
 80065a6:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 80065a8:	2400      	movs	r4, #0
 80065aa:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80065ac:	f7ff ffe0 	bl	8006570 <BSP_LCD_GetXSize>
 80065b0:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 80065b2:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80065b4:	f7ff ffe8 	bl	8006588 <BSP_LCD_GetYSize>
 80065b8:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80065ba:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 80065bc:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 80065be:	23ff      	movs	r3, #255	; 0xff
 80065c0:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 80065c2:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 80065c4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 80065c8:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 80065cc:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80065d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065d4:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80065d6:	2307      	movs	r3, #7
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80065da:	f7ff ffc9 	bl	8006570 <BSP_LCD_GetXSize>
 80065de:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80065e0:	f7ff ffd2 	bl	8006588 <BSP_LCD_GetYSize>
 80065e4:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80065e6:	462a      	mov	r2, r5
 80065e8:	a901      	add	r1, sp, #4
 80065ea:	480a      	ldr	r0, [pc, #40]	; (8006614 <BSP_LCD_LayerDefaultInit+0x74>)
 80065ec:	f7fd fc1c 	bl	8003e28 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80065f0:	4a09      	ldr	r2, [pc, #36]	; (8006618 <BSP_LCD_LayerDefaultInit+0x78>)
 80065f2:	0068      	lsls	r0, r5, #1
 80065f4:	1941      	adds	r1, r0, r5
 80065f6:	008b      	lsls	r3, r1, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80065fe:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006600:	4906      	ldr	r1, [pc, #24]	; (800661c <BSP_LCD_LayerDefaultInit+0x7c>)
 8006602:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006604:	4428      	add	r0, r5
 8006606:	0083      	lsls	r3, r0, #2
 8006608:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800660c:	50d1      	str	r1, [r2, r3]
}
 800660e:	b00e      	add	sp, #56	; 0x38
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	bf00      	nop
 8006614:	20004430 	.word	0x20004430
 8006618:	20000390 	.word	0x20000390
 800661c:	20000014 	.word	0x20000014

08006620 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8006620:	4b01      	ldr	r3, [pc, #4]	; (8006628 <BSP_LCD_SelectLayer+0x8>)
 8006622:	6018      	str	r0, [r3, #0]
} 
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	2000038c 	.word	0x2000038c

0800662c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <BSP_LCD_SetTextColor+0x10>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006634:	009a      	lsls	r2, r3, #2
 8006636:	4b02      	ldr	r3, [pc, #8]	; (8006640 <BSP_LCD_SetTextColor+0x14>)
 8006638:	5098      	str	r0, [r3, r2]
}
 800663a:	4770      	bx	lr
 800663c:	2000038c 	.word	0x2000038c
 8006640:	20000390 	.word	0x20000390

08006644 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <BSP_LCD_SetBackColor+0x14>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800664c:	009a      	lsls	r2, r3, #2
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <BSP_LCD_SetBackColor+0x18>)
 8006650:	4413      	add	r3, r2
 8006652:	6058      	str	r0, [r3, #4]
}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2000038c 	.word	0x2000038c
 800665c:	20000390 	.word	0x20000390

08006660 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <BSP_LCD_SetFont+0x14>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006668:	009a      	lsls	r2, r3, #2
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <BSP_LCD_SetFont+0x18>)
 800666c:	4413      	add	r3, r2
 800666e:	6098      	str	r0, [r3, #8]
}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	2000038c 	.word	0x2000038c
 8006678:	20000390 	.word	0x20000390

0800667c <BSP_LCD_Clear>:
{ 
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667e:	b083      	sub	sp, #12
 8006680:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006682:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <BSP_LCD_Clear+0x34>)
 8006684:	681c      	ldr	r4, [r3, #0]
 8006686:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <BSP_LCD_Clear+0x38>)
 8006688:	2334      	movs	r3, #52	; 0x34
 800668a:	fb03 2304 	mla	r3, r3, r4, r2
 800668e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006690:	f7ff ff6e 	bl	8006570 <BSP_LCD_GetXSize>
 8006694:	4606      	mov	r6, r0
 8006696:	f7ff ff77 	bl	8006588 <BSP_LCD_GetYSize>
 800669a:	9701      	str	r7, [sp, #4]
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4603      	mov	r3, r0
 80066a2:	4632      	mov	r2, r6
 80066a4:	4629      	mov	r1, r5
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff22 	bl	80064f0 <LL_FillBuffer>
}
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	2000038c 	.word	0x2000038c
 80066b4:	20004430 	.word	0x20004430

080066b8 <BSP_LCD_DrawHLine>:
{
 80066b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	4680      	mov	r8, r0
 80066c0:	460e      	mov	r6, r1
 80066c2:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80066c4:	4b17      	ldr	r3, [pc, #92]	; (8006724 <BSP_LCD_DrawHLine+0x6c>)
 80066c6:	681c      	ldr	r4, [r3, #0]
 80066c8:	4a17      	ldr	r2, [pc, #92]	; (8006728 <BSP_LCD_DrawHLine+0x70>)
 80066ca:	2334      	movs	r3, #52	; 0x34
 80066cc:	fb03 2304 	mla	r3, r3, r4, r2
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d01a      	beq.n	800670c <BSP_LCD_DrawHLine+0x54>
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80066d6:	4a14      	ldr	r2, [pc, #80]	; (8006728 <BSP_LCD_DrawHLine+0x70>)
 80066d8:	2334      	movs	r3, #52	; 0x34
 80066da:	fb03 2304 	mla	r3, r3, r4, r2
 80066de:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80066e0:	f7ff ff46 	bl	8006570 <BSP_LCD_GetXSize>
 80066e4:	fb00 8006 	mla	r0, r0, r6, r8
 80066e8:	eb05 0180 	add.w	r1, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80066ec:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80066f0:	0093      	lsls	r3, r2, #2
 80066f2:	4a0e      	ldr	r2, [pc, #56]	; (800672c <BSP_LCD_DrawHLine+0x74>)
 80066f4:	58d3      	ldr	r3, [r2, r3]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	2300      	movs	r3, #0
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	2301      	movs	r3, #1
 80066fe:	463a      	mov	r2, r7
 8006700:	4620      	mov	r0, r4
 8006702:	f7ff fef5 	bl	80064f0 <LL_FillBuffer>
}
 8006706:	b002      	add	sp, #8
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800670c:	2334      	movs	r3, #52	; 0x34
 800670e:	fb03 2304 	mla	r3, r3, r4, r2
 8006712:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006714:	f7ff ff2c 	bl	8006570 <BSP_LCD_GetXSize>
 8006718:	fb00 8006 	mla	r0, r0, r6, r8
 800671c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8006720:	e7e4      	b.n	80066ec <BSP_LCD_DrawHLine+0x34>
 8006722:	bf00      	nop
 8006724:	2000038c 	.word	0x2000038c
 8006728:	20004430 	.word	0x20004430
 800672c:	20000390 	.word	0x20000390

08006730 <BSP_LCD_DrawPixel>:
{
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	4606      	mov	r6, r0
 8006734:	460c      	mov	r4, r1
 8006736:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <BSP_LCD_DrawPixel+0x4c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4910      	ldr	r1, [pc, #64]	; (8006780 <BSP_LCD_DrawPixel+0x50>)
 800673e:	2234      	movs	r2, #52	; 0x34
 8006740:	fb02 1203 	mla	r2, r2, r3, r1
 8006744:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006746:	2a02      	cmp	r2, #2
 8006748:	d00b      	beq.n	8006762 <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800674a:	4a0d      	ldr	r2, [pc, #52]	; (8006780 <BSP_LCD_DrawPixel+0x50>)
 800674c:	2134      	movs	r1, #52	; 0x34
 800674e:	fb01 2303 	mla	r3, r1, r3, r2
 8006752:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006754:	f7ff ff0c 	bl	8006570 <BSP_LCD_GetXSize>
 8006758:	fb00 6004 	mla	r0, r0, r4, r6
 800675c:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8006760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006762:	460a      	mov	r2, r1
 8006764:	2134      	movs	r1, #52	; 0x34
 8006766:	fb01 2303 	mla	r3, r1, r3, r2
 800676a:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800676c:	f7ff ff00 	bl	8006570 <BSP_LCD_GetXSize>
 8006770:	fb00 6004 	mla	r0, r0, r4, r6
 8006774:	b2ad      	uxth	r5, r5
 8006776:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 800677a:	e7f1      	b.n	8006760 <BSP_LCD_DrawPixel+0x30>
 800677c:	2000038c 	.word	0x2000038c
 8006780:	20004430 	.word	0x20004430

08006784 <DrawChar>:
{
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	b083      	sub	sp, #12
 800678a:	4681      	mov	r9, r0
 800678c:	460f      	mov	r7, r1
 800678e:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8006790:	4b34      	ldr	r3, [pc, #208]	; (8006864 <DrawChar+0xe0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006798:	009a      	lsls	r2, r3, #2
 800679a:	4b33      	ldr	r3, [pc, #204]	; (8006868 <DrawChar+0xe4>)
 800679c:	4413      	add	r3, r2
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	88da      	ldrh	r2, [r3, #6]
 80067a2:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80067a4:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 80067a6:	f105 0b07 	add.w	fp, r5, #7
 80067aa:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80067ae:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 80067b2:	fa5f f888 	uxtb.w	r8, r8
 80067b6:	b2eb      	uxtb	r3, r5
 80067b8:	eba8 0803 	sub.w	r8, r8, r3
 80067bc:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 80067c0:	f04f 0a00 	mov.w	sl, #0
 80067c4:	e034      	b.n	8006830 <DrawChar+0xac>
      line =  pchar[0];      
 80067c6:	9a00      	ldr	r2, [sp, #0]
 80067c8:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 80067ca:	2400      	movs	r4, #0
 80067cc:	e014      	b.n	80067f8 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 80067ce:	9900      	ldr	r1, [sp, #0]
 80067d0:	5ccb      	ldrb	r3, [r1, r3]
 80067d2:	7856      	ldrb	r6, [r2, #1]
 80067d4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 80067d8:	e7f7      	b.n	80067ca <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80067da:	4b22      	ldr	r3, [pc, #136]	; (8006864 <DrawChar+0xe0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067e2:	009a      	lsls	r2, r3, #2
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <DrawChar+0xe4>)
 80067e6:	4413      	add	r3, r2
 80067e8:	eb09 0004 	add.w	r0, r9, r4
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	4639      	mov	r1, r7
 80067f0:	b280      	uxth	r0, r0
 80067f2:	f7ff ff9d 	bl	8006730 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80067f6:	3401      	adds	r4, #1
 80067f8:	42a5      	cmp	r5, r4
 80067fa:	d915      	bls.n	8006828 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 80067fc:	1b2b      	subs	r3, r5, r4
 80067fe:	4443      	add	r3, r8
 8006800:	3b01      	subs	r3, #1
 8006802:	2201      	movs	r2, #1
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	4233      	tst	r3, r6
 800680a:	d0e6      	beq.n	80067da <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800680c:	4b15      	ldr	r3, [pc, #84]	; (8006864 <DrawChar+0xe0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006814:	009a      	lsls	r2, r3, #2
 8006816:	eb09 0004 	add.w	r0, r9, r4
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <DrawChar+0xe4>)
 800681c:	589a      	ldr	r2, [r3, r2]
 800681e:	4639      	mov	r1, r7
 8006820:	b280      	uxth	r0, r0
 8006822:	f7ff ff85 	bl	8006730 <BSP_LCD_DrawPixel>
 8006826:	e7e6      	b.n	80067f6 <DrawChar+0x72>
    Ypos++;
 8006828:	3701      	adds	r7, #1
 800682a:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 800682c:	f10a 0a01 	add.w	sl, sl, #1
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	4553      	cmp	r3, sl
 8006834:	d912      	bls.n	800685c <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006836:	fb0a f30b 	mul.w	r3, sl, fp
 800683a:	9a00      	ldr	r2, [sp, #0]
 800683c:	441a      	add	r2, r3
    switch(((width + 7)/8))
 800683e:	f1bb 0f01 	cmp.w	fp, #1
 8006842:	d0c0      	beq.n	80067c6 <DrawChar+0x42>
 8006844:	f1bb 0f02 	cmp.w	fp, #2
 8006848:	d0c1      	beq.n	80067ce <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800684a:	9900      	ldr	r1, [sp, #0]
 800684c:	5ccb      	ldrb	r3, [r1, r3]
 800684e:	7856      	ldrb	r6, [r2, #1]
 8006850:	0236      	lsls	r6, r6, #8
 8006852:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8006856:	7893      	ldrb	r3, [r2, #2]
 8006858:	431e      	orrs	r6, r3
      break;
 800685a:	e7b6      	b.n	80067ca <DrawChar+0x46>
}
 800685c:	b003      	add	sp, #12
 800685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006862:	bf00      	nop
 8006864:	2000038c 	.word	0x2000038c
 8006868:	20000390 	.word	0x20000390

0800686c <BSP_LCD_DisplayChar>:
{
 800686c:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <BSP_LCD_DisplayChar+0x30>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006876:	009c      	lsls	r4, r3, #2
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <BSP_LCD_DisplayChar+0x34>)
 800687a:	4423      	add	r3, r4
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	681c      	ldr	r4, [r3, #0]
 8006880:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006884:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006886:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800688a:	889b      	ldrh	r3, [r3, #4]
 800688c:	3307      	adds	r3, #7
 800688e:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006890:	fb03 4202 	mla	r2, r3, r2, r4
 8006894:	f7ff ff76 	bl	8006784 <DrawChar>
}
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	bf00      	nop
 800689c:	2000038c 	.word	0x2000038c
 80068a0:	20000390 	.word	0x20000390

080068a4 <BSP_LCD_DisplayStringAt>:
{
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	4605      	mov	r5, r0
 80068aa:	4688      	mov	r8, r1
 80068ac:	4616      	mov	r6, r2
 80068ae:	461f      	mov	r7, r3
  uint8_t  *ptr = Text;
 80068b0:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 80068b2:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 80068b4:	e001      	b.n	80068ba <BSP_LCD_DisplayStringAt+0x16>
 80068b6:	3401      	adds	r4, #1
 80068b8:	4613      	mov	r3, r2
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f9      	bne.n	80068b6 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80068c2:	f7ff fe55 	bl	8006570 <BSP_LCD_GetXSize>
 80068c6:	4b29      	ldr	r3, [pc, #164]	; (800696c <BSP_LCD_DisplayStringAt+0xc8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068ce:	009a      	lsls	r2, r3, #2
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <BSP_LCD_DisplayStringAt+0xcc>)
 80068d2:	4413      	add	r3, r2
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	889a      	ldrh	r2, [r3, #4]
 80068d8:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 80068dc:	2f01      	cmp	r7, #1
 80068de:	d006      	beq.n	80068ee <BSP_LCD_DisplayStringAt+0x4a>
 80068e0:	2f02      	cmp	r7, #2
 80068e2:	d00c      	beq.n	80068fe <BSP_LCD_DisplayStringAt+0x5a>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80068e4:	b22b      	sxth	r3, r5
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd3d      	ble.n	8006966 <BSP_LCD_DisplayStringAt+0xc2>
    ref_column = 1;
 80068ea:	2400      	movs	r4, #0
 80068ec:	e021      	b.n	8006932 <BSP_LCD_DisplayStringAt+0x8e>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80068ee:	1b04      	subs	r4, r0, r4
 80068f0:	fb04 f302 	mul.w	r3, r4, r2
 80068f4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80068f8:	441d      	add	r5, r3
 80068fa:	b2ad      	uxth	r5, r5
      break;
 80068fc:	e7f2      	b.n	80068e4 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80068fe:	1b03      	subs	r3, r0, r4
 8006900:	fb13 f302 	smulbb	r3, r3, r2
 8006904:	b29b      	uxth	r3, r3
 8006906:	1b5d      	subs	r5, r3, r5
 8006908:	b2ad      	uxth	r5, r5
      break;
 800690a:	e7eb      	b.n	80068e4 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800690c:	463a      	mov	r2, r7
 800690e:	4641      	mov	r1, r8
 8006910:	4628      	mov	r0, r5
 8006912:	f7ff ffab 	bl	800686c <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <BSP_LCD_DisplayStringAt+0xc8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800691e:	009a      	lsls	r2, r3, #2
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <BSP_LCD_DisplayStringAt+0xcc>)
 8006922:	4413      	add	r3, r2
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	889b      	ldrh	r3, [r3, #4]
 8006928:	441d      	add	r5, r3
 800692a:	b2ad      	uxth	r5, r5
    Text++;
 800692c:	3601      	adds	r6, #1
    i++;
 800692e:	3401      	adds	r4, #1
 8006930:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006932:	7837      	ldrb	r7, [r6, #0]
 8006934:	f7ff fe1c 	bl	8006570 <BSP_LCD_GetXSize>
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <BSP_LCD_DisplayStringAt+0xc8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006940:	009a      	lsls	r2, r3, #2
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <BSP_LCD_DisplayStringAt+0xcc>)
 8006944:	4413      	add	r3, r2
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	889b      	ldrh	r3, [r3, #4]
 800694a:	fb03 0014 	mls	r0, r3, r4, r0
 800694e:	b280      	uxth	r0, r0
 8006950:	4298      	cmp	r0, r3
 8006952:	bf34      	ite	cc
 8006954:	2000      	movcc	r0, #0
 8006956:	2001      	movcs	r0, #1
 8006958:	2f00      	cmp	r7, #0
 800695a:	bf08      	it	eq
 800695c:	2000      	moveq	r0, #0
 800695e:	2800      	cmp	r0, #0
 8006960:	d1d4      	bne.n	800690c <BSP_LCD_DisplayStringAt+0x68>
}
 8006962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 8006966:	2501      	movs	r5, #1
 8006968:	e7bf      	b.n	80068ea <BSP_LCD_DisplayStringAt+0x46>
 800696a:	bf00      	nop
 800696c:	2000038c 	.word	0x2000038c
 8006970:	20000390 	.word	0x20000390

08006974 <BSP_LCD_DrawCircle>:
{
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	b087      	sub	sp, #28
 800697a:	4682      	mov	sl, r0
 800697c:	468b      	mov	fp, r1
  decision = 3 - (Radius << 1);
 800697e:	0053      	lsls	r3, r2, #1
 8006980:	f1c3 0303 	rsb	r3, r3, #3
 8006984:	9302      	str	r3, [sp, #8]
  current_y = Radius;
 8006986:	9201      	str	r2, [sp, #4]
  current_x = 0;
 8006988:	f04f 0900 	mov.w	r9, #0
  while (current_x <= current_y)
 800698c:	e005      	b.n	800699a <BSP_LCD_DrawCircle+0x26>
      decision += (current_x << 2) + 6;
 800698e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006992:	3306      	adds	r3, #6
 8006994:	9302      	str	r3, [sp, #8]
    current_x++;
 8006996:	f109 0901 	add.w	r9, r9, #1
  while (current_x <= current_y)
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	4599      	cmp	r9, r3
 800699e:	d876      	bhi.n	8006a8e <BSP_LCD_DrawCircle+0x11a>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80069a0:	fa1f f489 	uxth.w	r4, r9
 80069a4:	eb04 030a 	add.w	r3, r4, sl
 80069a8:	b298      	uxth	r0, r3
 80069aa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80069ae:	ebab 0805 	sub.w	r8, fp, r5
 80069b2:	fa1f f888 	uxth.w	r8, r8
 80069b6:	4e37      	ldr	r6, [pc, #220]	; (8006a94 <BSP_LCD_DrawCircle+0x120>)
 80069b8:	4f37      	ldr	r7, [pc, #220]	; (8006a98 <BSP_LCD_DrawCircle+0x124>)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069c0:	009a      	lsls	r2, r3, #2
 80069c2:	58b2      	ldr	r2, [r6, r2]
 80069c4:	4641      	mov	r1, r8
 80069c6:	9003      	str	r0, [sp, #12]
 80069c8:	f7ff feb2 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80069cc:	ebaa 0304 	sub.w	r3, sl, r4
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	4618      	mov	r0, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069da:	009a      	lsls	r2, r3, #2
 80069dc:	58b2      	ldr	r2, [r6, r2]
 80069de:	4641      	mov	r1, r8
 80069e0:	9004      	str	r0, [sp, #16]
 80069e2:	f7ff fea5 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80069e6:	eb05 030a 	add.w	r3, r5, sl
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4618      	mov	r0, r3
 80069ee:	ebab 0804 	sub.w	r8, fp, r4
 80069f2:	fa1f f888 	uxth.w	r8, r8
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069fc:	009a      	lsls	r2, r3, #2
 80069fe:	58b2      	ldr	r2, [r6, r2]
 8006a00:	4641      	mov	r1, r8
 8006a02:	9005      	str	r0, [sp, #20]
 8006a04:	f7ff fe94 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006a08:	ebaa 0305 	sub.w	r3, sl, r5
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4618      	mov	r0, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a16:	009a      	lsls	r2, r3, #2
 8006a18:	58b2      	ldr	r2, [r6, r2]
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	f7ff fe87 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006a22:	445d      	add	r5, fp
 8006a24:	b2ad      	uxth	r5, r5
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a2c:	009a      	lsls	r2, r3, #2
 8006a2e:	58b2      	ldr	r2, [r6, r2]
 8006a30:	4629      	mov	r1, r5
 8006a32:	9803      	ldr	r0, [sp, #12]
 8006a34:	f7ff fe7c 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a3e:	009a      	lsls	r2, r3, #2
 8006a40:	58b2      	ldr	r2, [r6, r2]
 8006a42:	4629      	mov	r1, r5
 8006a44:	9804      	ldr	r0, [sp, #16]
 8006a46:	f7ff fe73 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006a4a:	445c      	add	r4, fp
 8006a4c:	b2a4      	uxth	r4, r4
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a54:	009a      	lsls	r2, r3, #2
 8006a56:	58b2      	ldr	r2, [r6, r2]
 8006a58:	4621      	mov	r1, r4
 8006a5a:	9805      	ldr	r0, [sp, #20]
 8006a5c:	f7ff fe68 	bl	8006730 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	58b2      	ldr	r2, [r6, r2]
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	f7ff fe5f 	bl	8006730 <BSP_LCD_DrawPixel>
    if (decision < 0)
 8006a72:	9b02      	ldr	r3, [sp, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	db8a      	blt.n	800698e <BSP_LCD_DrawCircle+0x1a>
      decision += ((current_x - current_y) << 2) + 10;
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	eba9 0302 	sub.w	r3, r9, r2
 8006a7e:	9902      	ldr	r1, [sp, #8]
 8006a80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006a84:	330a      	adds	r3, #10
 8006a86:	9302      	str	r3, [sp, #8]
      current_y--;
 8006a88:	1e53      	subs	r3, r2, #1
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	e783      	b.n	8006996 <BSP_LCD_DrawCircle+0x22>
}
 8006a8e:	b007      	add	sp, #28
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	20000390 	.word	0x20000390
 8006a98:	2000038c 	.word	0x2000038c

08006a9c <BSP_LCD_FillRect>:
{
 8006a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	4681      	mov	r9, r0
 8006aa4:	460e      	mov	r6, r1
 8006aa6:	4617      	mov	r7, r2
 8006aa8:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006aaa:	4c1d      	ldr	r4, [pc, #116]	; (8006b20 <BSP_LCD_FillRect+0x84>)
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ab2:	009a      	lsls	r2, r3, #2
 8006ab4:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <BSP_LCD_FillRect+0x88>)
 8006ab6:	5898      	ldr	r0, [r3, r2]
 8006ab8:	f7ff fdb8 	bl	800662c <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006abc:	6824      	ldr	r4, [r4, #0]
 8006abe:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <BSP_LCD_FillRect+0x8c>)
 8006ac0:	2334      	movs	r3, #52	; 0x34
 8006ac2:	fb03 2304 	mla	r3, r3, r4, r2
 8006ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d01d      	beq.n	8006b08 <BSP_LCD_FillRect+0x6c>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006acc:	4a16      	ldr	r2, [pc, #88]	; (8006b28 <BSP_LCD_FillRect+0x8c>)
 8006ace:	2334      	movs	r3, #52	; 0x34
 8006ad0:	fb03 2304 	mla	r3, r3, r4, r2
 8006ad4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006ad6:	f7ff fd4b 	bl	8006570 <BSP_LCD_GetXSize>
 8006ada:	fb00 9006 	mla	r0, r0, r6, r9
 8006ade:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006ae2:	f7ff fd45 	bl	8006570 <BSP_LCD_GetXSize>
 8006ae6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006aea:	0093      	lsls	r3, r2, #2
 8006aec:	4a0d      	ldr	r2, [pc, #52]	; (8006b24 <BSP_LCD_FillRect+0x88>)
 8006aee:	58d3      	ldr	r3, [r2, r3]
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	1bc0      	subs	r0, r0, r7
 8006af4:	9000      	str	r0, [sp, #0]
 8006af6:	4643      	mov	r3, r8
 8006af8:	463a      	mov	r2, r7
 8006afa:	4629      	mov	r1, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7ff fcf7 	bl	80064f0 <LL_FillBuffer>
}
 8006b02:	b003      	add	sp, #12
 8006b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006b08:	2334      	movs	r3, #52	; 0x34
 8006b0a:	fb03 2304 	mla	r3, r3, r4, r2
 8006b0e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006b10:	f7ff fd2e 	bl	8006570 <BSP_LCD_GetXSize>
 8006b14:	fb00 9006 	mla	r0, r0, r6, r9
 8006b18:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8006b1c:	e7e1      	b.n	8006ae2 <BSP_LCD_FillRect+0x46>
 8006b1e:	bf00      	nop
 8006b20:	2000038c 	.word	0x2000038c
 8006b24:	20000390 	.word	0x20000390
 8006b28:	20004430 	.word	0x20004430

08006b2c <BSP_LCD_FillCircle>:
{
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	b083      	sub	sp, #12
 8006b32:	4682      	mov	sl, r0
 8006b34:	4689      	mov	r9, r1
 8006b36:	4615      	mov	r5, r2
 8006b38:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 8006b3a:	0056      	lsls	r6, r2, #1
 8006b3c:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006b40:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <BSP_LCD_FillCircle+0xd0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b48:	009a      	lsls	r2, r3, #2
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <BSP_LCD_FillCircle+0xd4>)
 8006b4c:	5898      	ldr	r0, [r3, r2]
 8006b4e:	f7ff fd6d 	bl	800662c <BSP_LCD_SetTextColor>
  current_x = 0;
 8006b52:	2400      	movs	r4, #0
  while (current_x <= current_y)
 8006b54:	e033      	b.n	8006bbe <BSP_LCD_FillCircle+0x92>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8006b56:	b2af      	uxth	r7, r5
 8006b58:	ebaa 0b07 	sub.w	fp, sl, r7
 8006b5c:	fa1f fb8b 	uxth.w	fp, fp
 8006b60:	fa1f f884 	uxth.w	r8, r4
 8006b64:	007f      	lsls	r7, r7, #1
 8006b66:	b2bf      	uxth	r7, r7
 8006b68:	eb08 0109 	add.w	r1, r8, r9
 8006b6c:	463a      	mov	r2, r7
 8006b6e:	b289      	uxth	r1, r1
 8006b70:	4658      	mov	r0, fp
 8006b72:	f7ff fda1 	bl	80066b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006b76:	eba9 0108 	sub.w	r1, r9, r8
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	b289      	uxth	r1, r1
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f7ff fd9a 	bl	80066b8 <BSP_LCD_DrawHLine>
 8006b84:	e01f      	b.n	8006bc6 <BSP_LCD_FillCircle+0x9a>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006b86:	b2a7      	uxth	r7, r4
 8006b88:	ebaa 0b07 	sub.w	fp, sl, r7
 8006b8c:	fa1f fb8b 	uxth.w	fp, fp
 8006b90:	fa1f f885 	uxth.w	r8, r5
 8006b94:	007f      	lsls	r7, r7, #1
 8006b96:	b2bf      	uxth	r7, r7
 8006b98:	eba9 0108 	sub.w	r1, r9, r8
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	b289      	uxth	r1, r1
 8006ba0:	4658      	mov	r0, fp
 8006ba2:	f7ff fd89 	bl	80066b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006ba6:	eb08 0109 	add.w	r1, r8, r9
 8006baa:	463a      	mov	r2, r7
 8006bac:	b289      	uxth	r1, r1
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f7ff fd82 	bl	80066b8 <BSP_LCD_DrawHLine>
 8006bb4:	e009      	b.n	8006bca <BSP_LCD_FillCircle+0x9e>
      decision += (current_x << 2) + 6;
 8006bb6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006bba:	3606      	adds	r6, #6
    current_x++;
 8006bbc:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8006bbe:	42ac      	cmp	r4, r5
 8006bc0:	d80b      	bhi.n	8006bda <BSP_LCD_FillCircle+0xae>
    if(current_y > 0) 
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	d1c7      	bne.n	8006b56 <BSP_LCD_FillCircle+0x2a>
    if(current_x > 0) 
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	d1dd      	bne.n	8006b86 <BSP_LCD_FillCircle+0x5a>
    if (decision < 0)
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	dbf3      	blt.n	8006bb6 <BSP_LCD_FillCircle+0x8a>
      decision += ((current_x - current_y) << 2) + 10;
 8006bce:	1b63      	subs	r3, r4, r5
 8006bd0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006bd4:	360a      	adds	r6, #10
      current_y--;
 8006bd6:	3d01      	subs	r5, #1
 8006bd8:	e7f0      	b.n	8006bbc <BSP_LCD_FillCircle+0x90>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006bda:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <BSP_LCD_FillCircle+0xd0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006be2:	009a      	lsls	r2, r3, #2
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <BSP_LCD_FillCircle+0xd4>)
 8006be6:	5898      	ldr	r0, [r3, r2]
 8006be8:	f7ff fd20 	bl	800662c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006bec:	9a01      	ldr	r2, [sp, #4]
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	f7ff febf 	bl	8006974 <BSP_LCD_DrawCircle>
}
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	2000038c 	.word	0x2000038c
 8006c00:	20000390 	.word	0x20000390

08006c04 <BSP_LCD_DisplayOn>:
{
 8006c04:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <BSP_LCD_DisplayOn+0x28>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	6993      	ldr	r3, [r2, #24]
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006c12:	2201      	movs	r2, #1
 8006c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c18:	4805      	ldr	r0, [pc, #20]	; (8006c30 <BSP_LCD_DisplayOn+0x2c>)
 8006c1a:	f7fc fbaa 	bl	8003372 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006c1e:	2201      	movs	r2, #1
 8006c20:	2108      	movs	r1, #8
 8006c22:	4804      	ldr	r0, [pc, #16]	; (8006c34 <BSP_LCD_DisplayOn+0x30>)
 8006c24:	f7fc fba5 	bl	8003372 <HAL_GPIO_WritePin>
}
 8006c28:	bd08      	pop	{r3, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20004430 	.word	0x20004430
 8006c30:	40022000 	.word	0x40022000
 8006c34:	40022800 	.word	0x40022800

08006c38 <BSP_LCD_MspInit>:
{
 8006c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3a:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006c3c:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <BSP_LCD_MspInit+0x130>)
 8006c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c40:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44
 8006c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c48:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006c4c:	9200      	str	r2, [sp, #0]
 8006c4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
 8006c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006c5e:	9201      	str	r2, [sp, #4]
 8006c60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c64:	f042 0210 	orr.w	r2, r2, #16
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
 8006c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6c:	f002 0210 	and.w	r2, r2, #16
 8006c70:	9202      	str	r2, [sp, #8]
 8006c72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006c82:	9203      	str	r2, [sp, #12]
 8006c84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006c94:	9204      	str	r2, [sp, #16]
 8006c96:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006ca6:	9205      	str	r2, [sp, #20]
 8006ca8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006cb8:	9206      	str	r2, [sp, #24]
 8006cba:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006cca:	9207      	str	r2, [sp, #28]
 8006ccc:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cdc:	9308      	str	r3, [sp, #32]
 8006cde:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ce4:	2402      	movs	r4, #2
 8006ce6:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006cec:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006cee:	250e      	movs	r5, #14
 8006cf0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006cf2:	a909      	add	r1, sp, #36	; 0x24
 8006cf4:	481d      	ldr	r0, [pc, #116]	; (8006d6c <BSP_LCD_MspInit+0x134>)
 8006cf6:	f7fc fa45 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006cfa:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8006cfe:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d00:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006d02:	2309      	movs	r3, #9
 8006d04:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006d06:	a909      	add	r1, sp, #36	; 0x24
 8006d08:	4819      	ldr	r0, [pc, #100]	; (8006d70 <BSP_LCD_MspInit+0x138>)
 8006d0a:	f7fc fa3b 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006d0e:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006d12:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d14:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d16:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006d18:	4e16      	ldr	r6, [pc, #88]	; (8006d74 <BSP_LCD_MspInit+0x13c>)
 8006d1a:	a909      	add	r1, sp, #36	; 0x24
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7fc fa31 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006d22:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d28:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d2a:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006d2c:	a909      	add	r1, sp, #36	; 0x24
 8006d2e:	4812      	ldr	r0, [pc, #72]	; (8006d78 <BSP_LCD_MspInit+0x140>)
 8006d30:	f7fc fa28 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006d34:	23f7      	movs	r3, #247	; 0xf7
 8006d36:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d38:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d3a:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006d3c:	4c0f      	ldr	r4, [pc, #60]	; (8006d7c <BSP_LCD_MspInit+0x144>)
 8006d3e:	a909      	add	r1, sp, #36	; 0x24
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7fc fa1f 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006d46:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006d48:	2501      	movs	r5, #1
 8006d4a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006d4c:	a909      	add	r1, sp, #36	; 0x24
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7fc fa18 	bl	8003184 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006d54:	2308      	movs	r3, #8
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006d58:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006d5a:	a909      	add	r1, sp, #36	; 0x24
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7fc fa11 	bl	8003184 <HAL_GPIO_Init>
}
 8006d62:	b00f      	add	sp, #60	; 0x3c
 8006d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	40021800 	.word	0x40021800
 8006d74:	40022000 	.word	0x40022000
 8006d78:	40022400 	.word	0x40022400
 8006d7c:	40022800 	.word	0x40022800

08006d80 <BSP_LCD_ClockConfig>:
{
 8006d80:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006d82:	4806      	ldr	r0, [pc, #24]	; (8006d9c <BSP_LCD_ClockConfig+0x1c>)
 8006d84:	2308      	movs	r3, #8
 8006d86:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006d88:	23c0      	movs	r3, #192	; 0xc0
 8006d8a:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006d8c:	2305      	movs	r3, #5
 8006d8e:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d94:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006d96:	f7fd fbeb 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
}
 8006d9a:	bd08      	pop	{r3, pc}
 8006d9c:	200003e8 	.word	0x200003e8

08006da0 <BSP_LCD_Init>:
{    
 8006da0:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006da2:	4c25      	ldr	r4, [pc, #148]	; (8006e38 <BSP_LCD_Init+0x98>)
 8006da4:	2328      	movs	r3, #40	; 0x28
 8006da6:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006da8:	2309      	movs	r3, #9
 8006daa:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006dac:	2335      	movs	r3, #53	; 0x35
 8006dae:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006db0:	230b      	movs	r3, #11
 8006db2:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006db4:	f240 131b 	movw	r3, #283	; 0x11b
 8006db8:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006dba:	f240 2315 	movw	r3, #533	; 0x215
 8006dbe:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006dc0:	f240 131d 	movw	r3, #285	; 0x11d
 8006dc4:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006dc6:	f240 2335 	movw	r3, #565	; 0x235
 8006dca:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff ffd6 	bl	8006d80 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006dd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006dd8:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006dda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006dde:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006de6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006dea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006dee:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006df0:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006df2:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006df4:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <BSP_LCD_Init+0x9c>)
 8006df8:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7fd f842 	bl	8003e84 <HAL_LTDC_GetState>
 8006e00:	b1a0      	cbz	r0, 8006e2c <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 8006e02:	480d      	ldr	r0, [pc, #52]	; (8006e38 <BSP_LCD_Init+0x98>)
 8006e04:	f7fc ff26 	bl	8003c54 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e0e:	480c      	ldr	r0, [pc, #48]	; (8006e40 <BSP_LCD_Init+0xa0>)
 8006e10:	f7fc faaf 	bl	8003372 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006e14:	2201      	movs	r2, #1
 8006e16:	2108      	movs	r1, #8
 8006e18:	480a      	ldr	r0, [pc, #40]	; (8006e44 <BSP_LCD_Init+0xa4>)
 8006e1a:	f7fc faaa 	bl	8003372 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8006e1e:	f000 f921 	bl	8007064 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006e22:	4809      	ldr	r0, [pc, #36]	; (8006e48 <BSP_LCD_Init+0xa8>)
 8006e24:	f7ff fc1c 	bl	8006660 <BSP_LCD_SetFont>
}
 8006e28:	2000      	movs	r0, #0
 8006e2a:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff ff02 	bl	8006c38 <BSP_LCD_MspInit>
 8006e34:	e7e5      	b.n	8006e02 <BSP_LCD_Init+0x62>
 8006e36:	bf00      	nop
 8006e38:	20004430 	.word	0x20004430
 8006e3c:	40016800 	.word	0x40016800
 8006e40:	40022000 	.word	0x40022000
 8006e44:	40022800 	.word	0x40022800
 8006e48:	20000014 	.word	0x20000014

08006e4c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e50:	b083      	sub	sp, #12
 8006e52:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8006e54:	f04f 0800 	mov.w	r8, #0
 8006e58:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e5c:	4c20      	ldr	r4, [pc, #128]	; (8006ee0 <BSP_SDRAM_Initialization_sequence+0x94>)
 8006e5e:	2601      	movs	r6, #1
 8006e60:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e62:	2710      	movs	r7, #16
 8006e64:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006e66:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006e68:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e6c:	4d1d      	ldr	r5, [pc, #116]	; (8006ee4 <BSP_SDRAM_Initialization_sequence+0x98>)
 8006e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f7fd fe70 	bl	8004b5a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7fb f900 	bl	8002080 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006e80:	2302      	movs	r3, #2
 8006e82:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e84:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006e86:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006e88:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7fd fe61 	bl	8004b5a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e9c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006ea2:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f7fd fe54 	bl	8004b5a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006eb2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006eb6:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006eb8:	2304      	movs	r3, #4
 8006eba:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ebc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006ebe:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7fd fe45 	bl	8004b5a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7fd fe5e 	bl	8004b94 <HAL_SDRAM_ProgramRefreshRate>
}
 8006ed8:	b003      	add	sp, #12
 8006eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000046c 	.word	0x2000046c
 8006ee4:	200044d8 	.word	0x200044d8

08006ee8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	b08e      	sub	sp, #56	; 0x38
 8006eec:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006eee:	4b54      	ldr	r3, [pc, #336]	; (8007040 <BSP_SDRAM_MspInit+0x158>)
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efa:	f002 0201 	and.w	r2, r2, #1
 8006efe:	9201      	str	r2, [sp, #4]
 8006f00:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
 8006f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f0c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f16:	f042 0204 	orr.w	r2, r2, #4
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	f002 0204 	and.w	r2, r2, #4
 8006f22:	9203      	str	r2, [sp, #12]
 8006f24:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f28:	f042 0208 	orr.w	r2, r2, #8
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f30:	f002 0208 	and.w	r2, r2, #8
 8006f34:	9204      	str	r2, [sp, #16]
 8006f36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3a:	f042 0210 	orr.w	r2, r2, #16
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f42:	f002 0210 	and.w	r2, r2, #16
 8006f46:	9205      	str	r2, [sp, #20]
 8006f48:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4c:	f042 0220 	orr.w	r2, r2, #32
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	f002 0220 	and.w	r2, r2, #32
 8006f58:	9206      	str	r2, [sp, #24]
 8006f5a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006f6a:	9207      	str	r2, [sp, #28]
 8006f6c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7c:	9308      	str	r3, [sp, #32]
 8006f7e:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006f80:	2302      	movs	r3, #2
 8006f82:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006f84:	2201      	movs	r2, #1
 8006f86:	920b      	str	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006f88:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006f8e:	ac0e      	add	r4, sp, #56	; 0x38
 8006f90:	2308      	movs	r3, #8
 8006f92:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f96:	4621      	mov	r1, r4
 8006f98:	482a      	ldr	r0, [pc, #168]	; (8007044 <BSP_SDRAM_MspInit+0x15c>)
 8006f9a:	f7fc f8f3 	bl	8003184 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006f9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006fa2:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4828      	ldr	r0, [pc, #160]	; (8007048 <BSP_SDRAM_MspInit+0x160>)
 8006fa8:	f7fc f8ec 	bl	8003184 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006fac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006fb0:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4825      	ldr	r0, [pc, #148]	; (800704c <BSP_SDRAM_MspInit+0x164>)
 8006fb6:	f7fc f8e5 	bl	8003184 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006fba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006fbe:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4823      	ldr	r0, [pc, #140]	; (8007050 <BSP_SDRAM_MspInit+0x168>)
 8006fc4:	f7fc f8de 	bl	8003184 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006fc8:	f248 1333 	movw	r3, #33075	; 0x8133
 8006fcc:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4820      	ldr	r0, [pc, #128]	; (8007054 <BSP_SDRAM_MspInit+0x16c>)
 8006fd2:	f7fc f8d7 	bl	8003184 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006fd6:	2328      	movs	r3, #40	; 0x28
 8006fd8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006fda:	4621      	mov	r1, r4
 8006fdc:	481e      	ldr	r0, [pc, #120]	; (8007058 <BSP_SDRAM_MspInit+0x170>)
 8006fde:	f7fc f8d1 	bl	8003184 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006fe2:	4c1e      	ldr	r4, [pc, #120]	; (800705c <BSP_SDRAM_MspInit+0x174>)
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff0:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff6:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ffc:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007002:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007004:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800700a:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800700c:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800700e:	2303      	movs	r3, #3
 8007010:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007012:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007014:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007016:	4b12      	ldr	r3, [pc, #72]	; (8007060 <BSP_SDRAM_MspInit+0x178>)
 8007018:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800701a:	6334      	str	r4, [r6, #48]	; 0x30
 800701c:	63a6      	str	r6, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800701e:	4620      	mov	r0, r4
 8007020:	f7fb fdc2 	bl	8002ba8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007024:	4620      	mov	r0, r4
 8007026:	f7fb fd59 	bl	8002adc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800702a:	462a      	mov	r2, r5
 800702c:	210f      	movs	r1, #15
 800702e:	2038      	movs	r0, #56	; 0x38
 8007030:	f7fb fc24 	bl	800287c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007034:	2038      	movs	r0, #56	; 0x38
 8007036:	f7fb fc53 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 800703a:	b00e      	add	sp, #56	; 0x38
 800703c:	bd70      	pop	{r4, r5, r6, pc}
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800
 8007044:	40020800 	.word	0x40020800
 8007048:	40020c00 	.word	0x40020c00
 800704c:	40021000 	.word	0x40021000
 8007050:	40021400 	.word	0x40021400
 8007054:	40021800 	.word	0x40021800
 8007058:	40021c00 	.word	0x40021c00
 800705c:	20000498 	.word	0x20000498
 8007060:	40026410 	.word	0x40026410

08007064 <BSP_SDRAM_Init>:
{ 
 8007064:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007066:	4c1b      	ldr	r4, [pc, #108]	; (80070d4 <BSP_SDRAM_Init+0x70>)
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <BSP_SDRAM_Init+0x74>)
 800706a:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 800706c:	4d1b      	ldr	r5, [pc, #108]	; (80070dc <BSP_SDRAM_Init+0x78>)
 800706e:	2302      	movs	r3, #2
 8007070:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8007072:	2107      	movs	r1, #7
 8007074:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 8007076:	2204      	movs	r2, #4
 8007078:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 800707a:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 800707c:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800707e:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8007080:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8007082:	2100      	movs	r1, #0
 8007084:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007086:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007088:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800708a:	2310      	movs	r3, #16
 800708c:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8007092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007096:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007098:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800709a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800709e:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80070a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a4:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80070a6:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7ff ff1d 	bl	8006ee8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80070ae:	4629      	mov	r1, r5
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7fd fd33 	bl	8004b1c <HAL_SDRAM_Init>
 80070b6:	b948      	cbnz	r0, 80070cc <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_OK;
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <BSP_SDRAM_Init+0x7c>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80070be:	f240 6003 	movw	r0, #1539	; 0x603
 80070c2:	f7ff fec3 	bl	8006e4c <BSP_SDRAM_Initialization_sequence>
}
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <BSP_SDRAM_Init+0x7c>)
 80070c8:	7818      	ldrb	r0, [r3, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_ERROR;
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <BSP_SDRAM_Init+0x7c>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e7f4      	b.n	80070be <BSP_SDRAM_Init+0x5a>
 80070d4:	200044d8 	.word	0x200044d8
 80070d8:	a0000140 	.word	0xa0000140
 80070dc:	2000047c 	.word	0x2000047c
 80070e0:	20000044 	.word	0x20000044

080070e4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80070e4:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <BSP_TS_Init+0x38>)
 80070e8:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <BSP_TS_Init+0x3c>)
 80070ec:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80070ee:	4c0d      	ldr	r4, [pc, #52]	; (8007124 <BSP_TS_Init+0x40>)
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	2070      	movs	r0, #112	; 0x70
 80070f4:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80070f6:	6863      	ldr	r3, [r4, #4]
 80070f8:	2070      	movs	r0, #112	; 0x70
 80070fa:	4798      	blx	r3
 80070fc:	2851      	cmp	r0, #81	; 0x51
 80070fe:	d10b      	bne.n	8007118 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007100:	4a09      	ldr	r2, [pc, #36]	; (8007128 <BSP_TS_Init+0x44>)
 8007102:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007104:	2070      	movs	r0, #112	; 0x70
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <BSP_TS_Init+0x48>)
 8007108:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 800710a:	4a09      	ldr	r2, [pc, #36]	; (8007130 <BSP_TS_Init+0x4c>)
 800710c:	2108      	movs	r1, #8
 800710e:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007110:	68e3      	ldr	r3, [r4, #12]
 8007112:	4798      	blx	r3
  uint8_t status = TS_OK;
 8007114:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8007116:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 8007118:	2003      	movs	r0, #3
 800711a:	e7fc      	b.n	8007116 <BSP_TS_Init+0x32>
 800711c:	20000502 	.word	0x20000502
 8007120:	20000504 	.word	0x20000504
 8007124:	2000001c 	.word	0x2000001c
 8007128:	200004fc 	.word	0x200004fc
 800712c:	200004f8 	.word	0x200004f8
 8007130:	20000500 	.word	0x20000500

08007134 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007134:	2884      	cmp	r0, #132	; 0x84
 8007136:	d001      	beq.n	800713c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007138:	3003      	adds	r0, #3
 800713a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800713c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800713e:	4770      	bx	lr

08007140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007140:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007142:	f000 fcd9 	bl	8007af8 <vTaskStartScheduler>
  
  return osOK;
}
 8007146:	2000      	movs	r0, #0
 8007148:	bd08      	pop	{r3, pc}

0800714a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800714a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714c:	b085      	sub	sp, #20
 800714e:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007150:	6844      	ldr	r4, [r0, #4]
 8007152:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007154:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007156:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800715a:	f7ff ffeb 	bl	8007134 <makeFreeRtosPriority>
 800715e:	ab03      	add	r3, sp, #12
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	9000      	str	r0, [sp, #0]
 8007164:	463b      	mov	r3, r7
 8007166:	b2b2      	uxth	r2, r6
 8007168:	4629      	mov	r1, r5
 800716a:	4620      	mov	r0, r4
 800716c:	f000 fc92 	bl	8007a94 <xTaskCreate>
 8007170:	2801      	cmp	r0, #1
 8007172:	d102      	bne.n	800717a <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007174:	9803      	ldr	r0, [sp, #12]
}
 8007176:	b005      	add	sp, #20
 8007178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800717a:	2000      	movs	r0, #0
 800717c:	e7fb      	b.n	8007176 <osThreadCreate+0x2c>

0800717e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800717e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007180:	4603      	mov	r3, r0
 8007182:	b900      	cbnz	r0, 8007186 <osDelay+0x8>
 8007184:	2301      	movs	r3, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fe0a 	bl	8007da0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800718c:	2000      	movs	r0, #0
 800718e:	bd08      	pop	{r3, pc}

08007190 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007190:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007192:	2001      	movs	r0, #1
 8007194:	f000 fa2a 	bl	80075ec <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8007198:	bd08      	pop	{r3, pc}

0800719a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800719a:	f100 0308 	add.w	r3, r0, #8
 800719e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071ae:	4770      	bx	lr

080071b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071b4:	4770      	bx	lr

080071b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80071b6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80071c6:	6803      	ldr	r3, [r0, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	6003      	str	r3, [r0, #0]
}
 80071cc:	4770      	bx	lr

080071ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ce:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071d0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071d2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80071d6:	d002      	beq.n	80071de <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d8:	f100 0208 	add.w	r2, r0, #8
 80071dc:	e002      	b.n	80071e4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80071de:	6902      	ldr	r2, [r0, #16]
 80071e0:	e004      	b.n	80071ec <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e2:	461a      	mov	r2, r3
 80071e4:	6853      	ldr	r3, [r2, #4]
 80071e6:	681c      	ldr	r4, [r3, #0]
 80071e8:	42ac      	cmp	r4, r5
 80071ea:	d9fa      	bls.n	80071e2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071ec:	6853      	ldr	r3, [r2, #4]
 80071ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071f0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071f2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80071f4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80071f8:	6803      	ldr	r3, [r0, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	6003      	str	r3, [r0, #0]
}
 80071fe:	bc30      	pop	{r4, r5}
 8007200:	4770      	bx	lr

08007202 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007202:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007204:	6842      	ldr	r2, [r0, #4]
 8007206:	6881      	ldr	r1, [r0, #8]
 8007208:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800720a:	6882      	ldr	r2, [r0, #8]
 800720c:	6841      	ldr	r1, [r0, #4]
 800720e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4282      	cmp	r2, r0
 8007214:	d006      	beq.n	8007224 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007216:	2200      	movs	r2, #0
 8007218:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	3a01      	subs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007220:	6818      	ldr	r0, [r3, #0]
}
 8007222:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007224:	6882      	ldr	r2, [r0, #8]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	e7f5      	b.n	8007216 <uxListRemove+0x14>

0800722a <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800722a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800722c:	b123      	cbz	r3, 8007238 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800722e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f1c0 0007 	rsb	r0, r0, #7
 8007236:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007238:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800723a:	4770      	bx	lr

0800723c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800723c:	b510      	push	{r4, lr}
 800723e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007240:	f001 f880 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007246:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007248:	429a      	cmp	r2, r3
 800724a:	d004      	beq.n	8007256 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800724c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800724e:	f001 f89f 	bl	8008390 <vPortExitCritical>

	return xReturn;
}
 8007252:	4620      	mov	r0, r4
 8007254:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007256:	2401      	movs	r4, #1
 8007258:	e7f9      	b.n	800724e <prvIsQueueFull+0x12>

0800725a <prvIsQueueEmpty>:
{
 800725a:	b510      	push	{r4, lr}
 800725c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800725e:	f001 f871 	bl	8008344 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007264:	b123      	cbz	r3, 8007270 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007266:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007268:	f001 f892 	bl	8008390 <vPortExitCritical>
}
 800726c:	4620      	mov	r0, r4
 800726e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007270:	2401      	movs	r4, #1
 8007272:	e7f9      	b.n	8007268 <prvIsQueueEmpty+0xe>

08007274 <prvCopyDataToQueue>:
{
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800727a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800727c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800727e:	b95a      	cbnz	r2, 8007298 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007280:	6803      	ldr	r3, [r0, #0]
 8007282:	b11b      	cbz	r3, 800728c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007284:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007286:	3501      	adds	r5, #1
 8007288:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800728a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800728c:	6840      	ldr	r0, [r0, #4]
 800728e:	f000 ff21 	bl	80080d4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	e7f6      	b.n	8007286 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007298:	b96e      	cbnz	r6, 80072b6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800729a:	6880      	ldr	r0, [r0, #8]
 800729c:	f002 fd74 	bl	8009d88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80072a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	4413      	add	r3, r2
 80072a6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072a8:	6862      	ldr	r2, [r4, #4]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d319      	bcc.n	80072e2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80072b2:	2000      	movs	r0, #0
 80072b4:	e7e7      	b.n	8007286 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b6:	68c0      	ldr	r0, [r0, #12]
 80072b8:	f002 fd66 	bl	8009d88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072be:	4252      	negs	r2, r2
 80072c0:	68e3      	ldr	r3, [r4, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c6:	6821      	ldr	r1, [r4, #0]
 80072c8:	428b      	cmp	r3, r1
 80072ca:	d202      	bcs.n	80072d2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	441a      	add	r2, r3
 80072d0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80072d2:	2e02      	cmp	r6, #2
 80072d4:	d001      	beq.n	80072da <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7d5      	b.n	8007286 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072da:	b125      	cbz	r5, 80072e6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80072dc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80072de:	2000      	movs	r0, #0
 80072e0:	e7d1      	b.n	8007286 <prvCopyDataToQueue+0x12>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e7cf      	b.n	8007286 <prvCopyDataToQueue+0x12>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7cd      	b.n	8007286 <prvCopyDataToQueue+0x12>

080072ea <prvUnlockQueue>:
{
 80072ea:	b538      	push	{r3, r4, r5, lr}
 80072ec:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80072ee:	f001 f829 	bl	8008344 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80072f2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80072f6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072f8:	e003      	b.n	8007302 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80072fa:	f000 fe79 	bl	8007ff0 <vTaskMissedYield>
			--cTxLock;
 80072fe:	3c01      	subs	r4, #1
 8007300:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007302:	2c00      	cmp	r4, #0
 8007304:	dd08      	ble.n	8007318 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007308:	b133      	cbz	r3, 8007318 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800730a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800730e:	f000 fdd7 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007312:	2800      	cmp	r0, #0
 8007314:	d0f3      	beq.n	80072fe <prvUnlockQueue+0x14>
 8007316:	e7f0      	b.n	80072fa <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007318:	23ff      	movs	r3, #255	; 0xff
 800731a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800731e:	f001 f837 	bl	8008390 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007322:	f001 f80f 	bl	8008344 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007326:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800732a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800732c:	e003      	b.n	8007336 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800732e:	f000 fe5f 	bl	8007ff0 <vTaskMissedYield>
				--cRxLock;
 8007332:	3c01      	subs	r4, #1
 8007334:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007336:	2c00      	cmp	r4, #0
 8007338:	dd08      	ble.n	800734c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800733a:	692b      	ldr	r3, [r5, #16]
 800733c:	b133      	cbz	r3, 800734c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800733e:	f105 0010 	add.w	r0, r5, #16
 8007342:	f000 fdbd 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007346:	2800      	cmp	r0, #0
 8007348:	d0f3      	beq.n	8007332 <prvUnlockQueue+0x48>
 800734a:	e7f0      	b.n	800732e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800734c:	23ff      	movs	r3, #255	; 0xff
 800734e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007352:	f001 f81d 	bl	8008390 <vPortExitCritical>
}
 8007356:	bd38      	pop	{r3, r4, r5, pc}

08007358 <xQueueGenericReset>:
{
 8007358:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800735a:	b950      	cbnz	r0, 8007372 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	b672      	cpsid	i
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	b662      	cpsie	i
 8007370:	e7fe      	b.n	8007370 <xQueueGenericReset+0x18>
 8007372:	4604      	mov	r4, r0
 8007374:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007376:	f000 ffe5 	bl	8008344 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800737a:	6821      	ldr	r1, [r4, #0]
 800737c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800737e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007380:	fb03 1002 	mla	r0, r3, r2, r1
 8007384:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007386:	2000      	movs	r0, #0
 8007388:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800738a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800738c:	3a01      	subs	r2, #1
 800738e:	fb02 1303 	mla	r3, r2, r3, r1
 8007392:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007394:	23ff      	movs	r3, #255	; 0xff
 8007396:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800739a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800739e:	b9a5      	cbnz	r5, 80073ca <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	b91b      	cbnz	r3, 80073ac <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80073a4:	f000 fff4 	bl	8008390 <vPortExitCritical>
}
 80073a8:	2001      	movs	r0, #1
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ac:	f104 0010 	add.w	r0, r4, #16
 80073b0:	f000 fd86 	bl	8007ec0 <xTaskRemoveFromEventList>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0f5      	beq.n	80073a4 <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
 80073b8:	4b08      	ldr	r3, [pc, #32]	; (80073dc <xQueueGenericReset+0x84>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	e7ec      	b.n	80073a4 <xQueueGenericReset+0x4c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073ca:	f104 0010 	add.w	r0, r4, #16
 80073ce:	f7ff fee4 	bl	800719a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073d6:	f7ff fee0 	bl	800719a <vListInitialise>
 80073da:	e7e3      	b.n	80073a4 <xQueueGenericReset+0x4c>
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <prvInitialiseNewQueue>:
{
 80073e0:	b510      	push	{r4, lr}
 80073e2:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80073e4:	460c      	mov	r4, r1
 80073e6:	b139      	cbz	r1, 80073f8 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073e8:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80073ea:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073ec:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073ee:	2101      	movs	r1, #1
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff ffb1 	bl	8007358 <xQueueGenericReset>
}
 80073f6:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073f8:	601b      	str	r3, [r3, #0]
 80073fa:	e7f6      	b.n	80073ea <prvInitialiseNewQueue+0xa>

080073fc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073fc:	b950      	cbnz	r0, 8007414 <xQueueGenericCreate+0x18>
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	b672      	cpsid	i
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	b662      	cpsie	i
 8007412:	e7fe      	b.n	8007412 <xQueueGenericCreate+0x16>
	{
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	b083      	sub	sp, #12
 8007418:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800741a:	b111      	cbz	r1, 8007422 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	fb01 f000 	mul.w	r0, r1, r0
 8007420:	e000      	b.n	8007424 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8007422:	2000      	movs	r0, #0
 8007424:	4617      	mov	r7, r2
 8007426:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007428:	3048      	adds	r0, #72	; 0x48
 800742a:	f001 f8f5 	bl	8008618 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800742e:	4606      	mov	r6, r0
 8007430:	b138      	cbz	r0, 8007442 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007432:	9000      	str	r0, [sp, #0]
 8007434:	463b      	mov	r3, r7
 8007436:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f7ff ffcf 	bl	80073e0 <prvInitialiseNewQueue>
	}
 8007442:	4630      	mov	r0, r6
 8007444:	b003      	add	sp, #12
 8007446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007448 <xQueueGenericSend>:
{
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	b085      	sub	sp, #20
 800744c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800744e:	b170      	cbz	r0, 800746e <xQueueGenericSend+0x26>
 8007450:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007452:	b9b9      	cbnz	r1, 8007484 <xQueueGenericSend+0x3c>
 8007454:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007456:	b1aa      	cbz	r2, 8007484 <xQueueGenericSend+0x3c>
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	b672      	cpsid	i
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	b662      	cpsie	i
 800746c:	e7fe      	b.n	800746c <xQueueGenericSend+0x24>
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	b672      	cpsid	i
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	b662      	cpsie	i
 8007482:	e7fe      	b.n	8007482 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007484:	2b02      	cmp	r3, #2
 8007486:	d10d      	bne.n	80074a4 <xQueueGenericSend+0x5c>
 8007488:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800748a:	2a01      	cmp	r2, #1
 800748c:	d00a      	beq.n	80074a4 <xQueueGenericSend+0x5c>
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	b672      	cpsid	i
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	b662      	cpsie	i
 80074a2:	e7fe      	b.n	80074a2 <xQueueGenericSend+0x5a>
 80074a4:	461e      	mov	r6, r3
 80074a6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a8:	f000 fda8 	bl	8007ffc <xTaskGetSchedulerState>
 80074ac:	b960      	cbnz	r0, 80074c8 <xQueueGenericSend+0x80>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	b163      	cbz	r3, 80074cc <xQueueGenericSend+0x84>
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	b672      	cpsid	i
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	b662      	cpsie	i
 80074c6:	e7fe      	b.n	80074c6 <xQueueGenericSend+0x7e>
 80074c8:	2500      	movs	r5, #0
 80074ca:	e03a      	b.n	8007542 <xQueueGenericSend+0xfa>
 80074cc:	2500      	movs	r5, #0
 80074ce:	e038      	b.n	8007542 <xQueueGenericSend+0xfa>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074d0:	4632      	mov	r2, r6
 80074d2:	4639      	mov	r1, r7
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7ff fecd 	bl	8007274 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074dc:	b94b      	cbnz	r3, 80074f2 <xQueueGenericSend+0xaa>
					else if( xYieldRequired != pdFALSE )
 80074de:	b1a8      	cbz	r0, 800750c <xQueueGenericSend+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 80074e0:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <xQueueGenericSend+0x188>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	e00c      	b.n	800750c <xQueueGenericSend+0xc4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074f6:	f000 fce3 	bl	8007ec0 <xTaskRemoveFromEventList>
 80074fa:	b138      	cbz	r0, 800750c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
 80074fc:	4b34      	ldr	r3, [pc, #208]	; (80075d0 <xQueueGenericSend+0x188>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800750c:	f000 ff40 	bl	8008390 <vPortExitCritical>
				return pdPASS;
 8007510:	2001      	movs	r0, #1
}
 8007512:	b005      	add	sp, #20
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8007516:	f000 ff3b 	bl	8008390 <vPortExitCritical>
					return errQUEUE_FULL;
 800751a:	2000      	movs	r0, #0
 800751c:	e7f9      	b.n	8007512 <xQueueGenericSend+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800751e:	a802      	add	r0, sp, #8
 8007520:	f000 fd16 	bl	8007f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007524:	2501      	movs	r5, #1
 8007526:	e019      	b.n	800755c <xQueueGenericSend+0x114>
		prvLockQueue( pxQueue );
 8007528:	2300      	movs	r3, #0
 800752a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800752e:	e021      	b.n	8007574 <xQueueGenericSend+0x12c>
 8007530:	2300      	movs	r3, #0
 8007532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007536:	e023      	b.n	8007580 <xQueueGenericSend+0x138>
				prvUnlockQueue( pxQueue );
 8007538:	4620      	mov	r0, r4
 800753a:	f7ff fed6 	bl	80072ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800753e:	f000 fbb3 	bl	8007ca8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007542:	f000 feff 	bl	8008344 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007546:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800754a:	429a      	cmp	r2, r3
 800754c:	d3c0      	bcc.n	80074d0 <xQueueGenericSend+0x88>
 800754e:	2e02      	cmp	r6, #2
 8007550:	d0be      	beq.n	80074d0 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0de      	beq.n	8007516 <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 8007558:	2d00      	cmp	r5, #0
 800755a:	d0e0      	beq.n	800751e <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 800755c:	f000 ff18 	bl	8008390 <vPortExitCritical>
		vTaskSuspendAll();
 8007560:	f000 fb0c 	bl	8007b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007564:	f000 feee 	bl	8008344 <vPortEnterCritical>
 8007568:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800756c:	b25b      	sxtb	r3, r3
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007572:	d0d9      	beq.n	8007528 <xQueueGenericSend+0xe0>
 8007574:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007578:	b25b      	sxtb	r3, r3
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800757e:	d0d7      	beq.n	8007530 <xQueueGenericSend+0xe8>
 8007580:	f000 ff06 	bl	8008390 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007584:	a901      	add	r1, sp, #4
 8007586:	a802      	add	r0, sp, #8
 8007588:	f000 fcee 	bl	8007f68 <xTaskCheckForTimeOut>
 800758c:	b9c8      	cbnz	r0, 80075c2 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff fe54 	bl	800723c <prvIsQueueFull>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0cf      	beq.n	8007538 <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007598:	9901      	ldr	r1, [sp, #4]
 800759a:	f104 0010 	add.w	r0, r4, #16
 800759e:	f000 fc75 	bl	8007e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7ff fea1 	bl	80072ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075a8:	f000 fb7e 	bl	8007ca8 <xTaskResumeAll>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1c8      	bne.n	8007542 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <xQueueGenericSend+0x188>)
 80075b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	e7bf      	b.n	8007542 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7ff fe91 	bl	80072ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c8:	f000 fb6e 	bl	8007ca8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7a0      	b.n	8007512 <xQueueGenericSend+0xca>
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80075d4:	b148      	cbz	r0, 80075ea <prvInitialiseMutex+0x16>
	{
 80075d6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80075d8:	2100      	movs	r1, #0
 80075da:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075dc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80075de:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075e0:	460b      	mov	r3, r1
 80075e2:	460a      	mov	r2, r1
 80075e4:	f7ff ff30 	bl	8007448 <xQueueGenericSend>
	}
 80075e8:	bd08      	pop	{r3, pc}
 80075ea:	4770      	bx	lr

080075ec <xQueueCreateMutex>:
	{
 80075ec:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075ee:	4602      	mov	r2, r0
 80075f0:	2100      	movs	r1, #0
 80075f2:	2001      	movs	r0, #1
 80075f4:	f7ff ff02 	bl	80073fc <xQueueGenericCreate>
 80075f8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80075fa:	f7ff ffeb 	bl	80075d4 <prvInitialiseMutex>
	}
 80075fe:	4620      	mov	r0, r4
 8007600:	bd10      	pop	{r4, pc}
	...

08007604 <xQueueSemaphoreTake>:
{
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800760a:	b950      	cbnz	r0, 8007622 <xQueueSemaphoreTake+0x1e>
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	b672      	cpsid	i
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	b662      	cpsie	i
 8007620:	e7fe      	b.n	8007620 <xQueueSemaphoreTake+0x1c>
 8007622:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007624:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007626:	b153      	cbz	r3, 800763e <xQueueSemaphoreTake+0x3a>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	e7fe      	b.n	800763c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800763e:	f000 fcdd 	bl	8007ffc <xTaskGetSchedulerState>
 8007642:	b960      	cbnz	r0, 800765e <xQueueSemaphoreTake+0x5a>
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	b16b      	cbz	r3, 8007664 <xQueueSemaphoreTake+0x60>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	e7fe      	b.n	800765c <xQueueSemaphoreTake+0x58>
 800765e:	2500      	movs	r5, #0
 8007660:	462e      	mov	r6, r5
 8007662:	e053      	b.n	800770c <xQueueSemaphoreTake+0x108>
 8007664:	2500      	movs	r5, #0
 8007666:	462e      	mov	r6, r5
 8007668:	e050      	b.n	800770c <xQueueSemaphoreTake+0x108>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800766a:	3b01      	subs	r3, #1
 800766c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	b913      	cbnz	r3, 8007678 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007672:	f000 fdef 	bl	8008254 <pvTaskIncrementMutexHeldCount>
 8007676:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	b163      	cbz	r3, 8007696 <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800767c:	f104 0010 	add.w	r0, r4, #16
 8007680:	f000 fc1e 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007684:	b138      	cbz	r0, 8007696 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 8007686:	4b49      	ldr	r3, [pc, #292]	; (80077ac <xQueueSemaphoreTake+0x1a8>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007696:	f000 fe7b 	bl	8008390 <vPortExitCritical>
				return pdPASS;
 800769a:	2501      	movs	r5, #1
}
 800769c:	4628      	mov	r0, r5
 800769e:	b004      	add	sp, #16
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076a2:	b155      	cbz	r5, 80076ba <xQueueSemaphoreTake+0xb6>
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	b672      	cpsid	i
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	b662      	cpsie	i
 80076b8:	e7fe      	b.n	80076b8 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 80076ba:	f000 fe69 	bl	8008390 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80076be:	e7ed      	b.n	800769c <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076c0:	a802      	add	r0, sp, #8
 80076c2:	f000 fc45 	bl	8007f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076c6:	2601      	movs	r6, #1
 80076c8:	e02a      	b.n	8007720 <xQueueSemaphoreTake+0x11c>
		prvLockQueue( pxQueue );
 80076ca:	2300      	movs	r3, #0
 80076cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80076d0:	e032      	b.n	8007738 <xQueueSemaphoreTake+0x134>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076d8:	e034      	b.n	8007744 <xQueueSemaphoreTake+0x140>
						taskENTER_CRITICAL();
 80076da:	f000 fe33 	bl	8008344 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80076de:	6860      	ldr	r0, [r4, #4]
 80076e0:	f000 fc9c 	bl	800801c <xTaskPriorityInherit>
 80076e4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80076e6:	f000 fe53 	bl	8008390 <vPortExitCritical>
 80076ea:	e03b      	b.n	8007764 <xQueueSemaphoreTake+0x160>
				prvUnlockQueue( pxQueue );
 80076ec:	4620      	mov	r0, r4
 80076ee:	f7ff fdfc 	bl	80072ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076f2:	f000 fad9 	bl	8007ca8 <xTaskResumeAll>
 80076f6:	e009      	b.n	800770c <xQueueSemaphoreTake+0x108>
			prvUnlockQueue( pxQueue );
 80076f8:	4620      	mov	r0, r4
 80076fa:	f7ff fdf6 	bl	80072ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076fe:	f000 fad3 	bl	8007ca8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff fda9 	bl	800725a <prvIsQueueEmpty>
 8007708:	2800      	cmp	r0, #0
 800770a:	d140      	bne.n	800778e <xQueueSemaphoreTake+0x18a>
		taskENTER_CRITICAL();
 800770c:	f000 fe1a 	bl	8008344 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1a9      	bne.n	800766a <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0c2      	beq.n	80076a2 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800771c:	2e00      	cmp	r6, #0
 800771e:	d0cf      	beq.n	80076c0 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 8007720:	f000 fe36 	bl	8008390 <vPortExitCritical>
		vTaskSuspendAll();
 8007724:	f000 fa2a 	bl	8007b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007728:	f000 fe0c 	bl	8008344 <vPortEnterCritical>
 800772c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007730:	b25b      	sxtb	r3, r3
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007736:	d0c8      	beq.n	80076ca <xQueueSemaphoreTake+0xc6>
 8007738:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800773c:	b25b      	sxtb	r3, r3
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	d0c6      	beq.n	80076d2 <xQueueSemaphoreTake+0xce>
 8007744:	f000 fe24 	bl	8008390 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007748:	a901      	add	r1, sp, #4
 800774a:	a802      	add	r0, sp, #8
 800774c:	f000 fc0c 	bl	8007f68 <xTaskCheckForTimeOut>
 8007750:	2800      	cmp	r0, #0
 8007752:	d1d1      	bne.n	80076f8 <xQueueSemaphoreTake+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff fd80 	bl	800725a <prvIsQueueEmpty>
 800775a:	2800      	cmp	r0, #0
 800775c:	d0c6      	beq.n	80076ec <xQueueSemaphoreTake+0xe8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0ba      	beq.n	80076da <xQueueSemaphoreTake+0xd6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007764:	9901      	ldr	r1, [sp, #4]
 8007766:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800776a:	f000 fb8f 	bl	8007e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff fdbb 	bl	80072ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007774:	f000 fa98 	bl	8007ca8 <xTaskResumeAll>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1c7      	bne.n	800770c <xQueueSemaphoreTake+0x108>
					portYIELD_WITHIN_API();
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <xQueueSemaphoreTake+0x1a8>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	e7be      	b.n	800770c <xQueueSemaphoreTake+0x108>
					if( xInheritanceOccurred != pdFALSE )
 800778e:	2d00      	cmp	r5, #0
 8007790:	d084      	beq.n	800769c <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
 8007792:	f000 fdd7 	bl	8008344 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff fd47 	bl	800722a <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800779c:	4601      	mov	r1, r0
 800779e:	6860      	ldr	r0, [r4, #4]
 80077a0:	f000 fcf4 	bl	800818c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80077a4:	f000 fdf4 	bl	8008390 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80077a8:	2500      	movs	r5, #0
 80077aa:	e777      	b.n	800769c <xQueueSemaphoreTake+0x98>
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <prvResetNextTaskUnblockTime+0x24>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	b13b      	cbz	r3, 80077c8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <prvResetNextTaskUnblockTime+0x24>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <prvResetNextTaskUnblockTime+0x28>)
 80077c4:	601a      	str	r2, [r3, #0]
	}
}
 80077c6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80077c8:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <prvResetNextTaskUnblockTime+0x28>)
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	2000050c 	.word	0x2000050c
 80077d8:	200005e4 	.word	0x200005e4

080077dc <prvDeleteTCB>:
	{
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 80077e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80077e2:	f000 ffa3 	bl	800872c <vPortFree>
			vPortFree( pxTCB );
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 ffa0 	bl	800872c <vPortFree>
	}
 80077ec:	bd10      	pop	{r4, pc}

080077ee <prvInitialiseNewTask>:
{
 80077ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f2:	4680      	mov	r8, r0
 80077f4:	4699      	mov	r9, r3
 80077f6:	9d08      	ldr	r5, [sp, #32]
 80077f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80077fc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80077fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007802:	4413      	add	r3, r2
 8007804:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007808:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800780c:	2300      	movs	r3, #0
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d807      	bhi.n	8007822 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007812:	5cc8      	ldrb	r0, [r1, r3]
 8007814:	18e2      	adds	r2, r4, r3
 8007816:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800781a:	5cca      	ldrb	r2, [r1, r3]
 800781c:	b10a      	cbz	r2, 8007822 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800781e:	3301      	adds	r3, #1
 8007820:	e7f5      	b.n	800780e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007822:	2300      	movs	r3, #0
 8007824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007828:	2d06      	cmp	r5, #6
 800782a:	d900      	bls.n	800782e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800782c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800782e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007830:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007832:	f04f 0a00 	mov.w	sl, #0
 8007836:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800783a:	1d20      	adds	r0, r4, #4
 800783c:	f7ff fcb8 	bl	80071b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007840:	f104 0018 	add.w	r0, r4, #24
 8007844:	f7ff fcb4 	bl	80071b0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007848:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784a:	f1c5 0507 	rsb	r5, r5, #7
 800784e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007850:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007852:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007856:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800785a:	464a      	mov	r2, r9
 800785c:	4641      	mov	r1, r8
 800785e:	4630      	mov	r0, r6
 8007860:	f000 fd48 	bl	80082f4 <pxPortInitialiseStack>
 8007864:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007866:	b107      	cbz	r7, 800786a <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007868:	603c      	str	r4, [r7, #0]
}
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007870 <prvInitialiseTaskLists>:
{
 8007870:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007872:	2400      	movs	r4, #0
 8007874:	e007      	b.n	8007886 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007876:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800787a:	0093      	lsls	r3, r2, #2
 800787c:	480e      	ldr	r0, [pc, #56]	; (80078b8 <prvInitialiseTaskLists+0x48>)
 800787e:	4418      	add	r0, r3
 8007880:	f7ff fc8b 	bl	800719a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007884:	3401      	adds	r4, #1
 8007886:	2c06      	cmp	r4, #6
 8007888:	d9f5      	bls.n	8007876 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800788a:	4d0c      	ldr	r5, [pc, #48]	; (80078bc <prvInitialiseTaskLists+0x4c>)
 800788c:	4628      	mov	r0, r5
 800788e:	f7ff fc84 	bl	800719a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007892:	4c0b      	ldr	r4, [pc, #44]	; (80078c0 <prvInitialiseTaskLists+0x50>)
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff fc80 	bl	800719a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800789a:	480a      	ldr	r0, [pc, #40]	; (80078c4 <prvInitialiseTaskLists+0x54>)
 800789c:	f7ff fc7d 	bl	800719a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80078a0:	4809      	ldr	r0, [pc, #36]	; (80078c8 <prvInitialiseTaskLists+0x58>)
 80078a2:	f7ff fc7a 	bl	800719a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80078a6:	4809      	ldr	r0, [pc, #36]	; (80078cc <prvInitialiseTaskLists+0x5c>)
 80078a8:	f7ff fc77 	bl	800719a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ac:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <prvInitialiseTaskLists+0x60>)
 80078ae:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <prvInitialiseTaskLists+0x64>)
 80078b2:	601c      	str	r4, [r3, #0]
}
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000514 	.word	0x20000514
 80078bc:	200005b8 	.word	0x200005b8
 80078c0:	200005cc 	.word	0x200005cc
 80078c4:	200005ec 	.word	0x200005ec
 80078c8:	20000618 	.word	0x20000618
 80078cc:	20000604 	.word	0x20000604
 80078d0:	2000050c 	.word	0x2000050c
 80078d4:	20000510 	.word	0x20000510

080078d8 <prvAddNewTaskToReadyList>:
{
 80078d8:	b510      	push	{r4, lr}
 80078da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80078dc:	f000 fd32 	bl	8008344 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <prvAddNewTaskToReadyList+0x8c>)
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078e8:	4b1f      	ldr	r3, [pc, #124]	; (8007968 <prvAddNewTaskToReadyList+0x90>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	b15b      	cbz	r3, 8007906 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80078ee:	4b1f      	ldr	r3, [pc, #124]	; (800796c <prvAddNewTaskToReadyList+0x94>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	b96b      	cbnz	r3, 8007910 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f4:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <prvAddNewTaskToReadyList+0x90>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d807      	bhi.n	8007910 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007900:	4b19      	ldr	r3, [pc, #100]	; (8007968 <prvAddNewTaskToReadyList+0x90>)
 8007902:	601c      	str	r4, [r3, #0]
 8007904:	e004      	b.n	8007910 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007906:	4b18      	ldr	r3, [pc, #96]	; (8007968 <prvAddNewTaskToReadyList+0x90>)
 8007908:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d026      	beq.n	800795e <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8007910:	4a17      	ldr	r2, [pc, #92]	; (8007970 <prvAddNewTaskToReadyList+0x98>)
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800791a:	2201      	movs	r2, #1
 800791c:	409a      	lsls	r2, r3
 800791e:	4915      	ldr	r1, [pc, #84]	; (8007974 <prvAddNewTaskToReadyList+0x9c>)
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	4302      	orrs	r2, r0
 8007924:	600a      	str	r2, [r1, #0]
 8007926:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	1d21      	adds	r1, r4, #4
 800792e:	4812      	ldr	r0, [pc, #72]	; (8007978 <prvAddNewTaskToReadyList+0xa0>)
 8007930:	4410      	add	r0, r2
 8007932:	f7ff fc40 	bl	80071b6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007936:	f000 fd2b 	bl	8008390 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <prvAddNewTaskToReadyList+0x94>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b16b      	cbz	r3, 800795c <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <prvAddNewTaskToReadyList+0x90>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007948:	429a      	cmp	r2, r3
 800794a:	d207      	bcs.n	800795c <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <prvAddNewTaskToReadyList+0xa4>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	f3bf 8f6f 	isb	sy
}
 800795c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800795e:	f7ff ff87 	bl	8007870 <prvInitialiseTaskLists>
 8007962:	e7d5      	b.n	8007910 <prvAddNewTaskToReadyList+0x38>
 8007964:	200005a0 	.word	0x200005a0
 8007968:	20000508 	.word	0x20000508
 800796c:	20000600 	.word	0x20000600
 8007970:	200005b0 	.word	0x200005b0
 8007974:	200005b4 	.word	0x200005b4
 8007978:	20000514 	.word	0x20000514
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <prvCheckTasksWaitingTermination+0x40>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	b1d3      	cbz	r3, 80079bc <prvCheckTasksWaitingTermination+0x3c>
{
 8007986:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007988:	f000 fcdc 	bl	8008344 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <prvCheckTasksWaitingTermination+0x44>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007992:	1d20      	adds	r0, r4, #4
 8007994:	f7ff fc35 	bl	8007202 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007998:	4a0b      	ldr	r2, [pc, #44]	; (80079c8 <prvCheckTasksWaitingTermination+0x48>)
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	3b01      	subs	r3, #1
 800799e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079a0:	4a07      	ldr	r2, [pc, #28]	; (80079c0 <prvCheckTasksWaitingTermination+0x40>)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80079a8:	f000 fcf2 	bl	8008390 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff ff15 	bl	80077dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079b2:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <prvCheckTasksWaitingTermination+0x40>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <prvCheckTasksWaitingTermination+0x8>
}
 80079ba:	bd10      	pop	{r4, pc}
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	200005a4 	.word	0x200005a4
 80079c4:	20000618 	.word	0x20000618
 80079c8:	200005a0 	.word	0x200005a0

080079cc <prvIdleTask>:
{
 80079cc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80079ce:	f7ff ffd7 	bl	8007980 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <prvIdleTask+0x20>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d9f9      	bls.n	80079ce <prvIdleTask+0x2>
				taskYIELD();
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <prvIdleTask+0x24>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	e7f0      	b.n	80079ce <prvIdleTask+0x2>
 80079ec:	20000514 	.word	0x20000514
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <prvAddCurrentTaskToDelayedList+0x84>)
 80079fc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079fe:	4b1f      	ldr	r3, [pc, #124]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	3004      	adds	r0, #4
 8007a04:	f7ff fbfd 	bl	8007202 <uxListRemove>
 8007a08:	b950      	cbnz	r0, 8007a20 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	2301      	movs	r3, #1
 8007a12:	fa03 f202 	lsl.w	r2, r3, r2
 8007a16:	491a      	ldr	r1, [pc, #104]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x8c>)
 8007a18:	680b      	ldr	r3, [r1, #0]
 8007a1a:	ea23 0302 	bic.w	r3, r3, r2
 8007a1e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a20:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007a24:	bf14      	ite	ne
 8007a26:	2300      	movne	r3, #0
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	bf08      	it	eq
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b99b      	cbnz	r3, 8007a5a <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a32:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a34:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007a3a:	42a5      	cmp	r5, r4
 8007a3c:	d814      	bhi.n	8007a68 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	4b0e      	ldr	r3, [pc, #56]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	3104      	adds	r1, #4
 8007a48:	f7ff fbc1 	bl	80071ce <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d910      	bls.n	8007a76 <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a56:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a58:	e00d      	b.n	8007a76 <prvAddCurrentTaskToDelayedList+0x82>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	3104      	adds	r1, #4
 8007a60:	480a      	ldr	r0, [pc, #40]	; (8007a8c <prvAddCurrentTaskToDelayedList+0x98>)
 8007a62:	f7ff fba8 	bl	80071b6 <vListInsertEnd>
 8007a66:	e006      	b.n	8007a76 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	3104      	adds	r1, #4
 8007a72:	f7ff fbac 	bl	80071ce <vListInsert>
}
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	2000062c 	.word	0x2000062c
 8007a7c:	20000508 	.word	0x20000508
 8007a80:	200005b4 	.word	0x200005b4
 8007a84:	2000050c 	.word	0x2000050c
 8007a88:	200005e4 	.word	0x200005e4
 8007a8c:	20000604 	.word	0x20000604
 8007a90:	20000510 	.word	0x20000510

08007a94 <xTaskCreate>:
	{
 8007a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	4688      	mov	r8, r1
 8007a9e:	4615      	mov	r5, r2
 8007aa0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	0090      	lsls	r0, r2, #2
 8007aa4:	f000 fdb8 	bl	8008618 <pvPortMalloc>
			if( pxStack != NULL )
 8007aa8:	b1f8      	cbz	r0, 8007aea <xTaskCreate+0x56>
 8007aaa:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007aac:	2054      	movs	r0, #84	; 0x54
 8007aae:	f000 fdb3 	bl	8008618 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	b1a8      	cbz	r0, 8007ae2 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007ab6:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8007ab8:	b1d4      	cbz	r4, 8007af0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aba:	2300      	movs	r3, #0
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	9402      	str	r4, [sp, #8]
 8007ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	464b      	mov	r3, r9
 8007aca:	462a      	mov	r2, r5
 8007acc:	4641      	mov	r1, r8
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f7ff fe8d 	bl	80077ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7ff feff 	bl	80078d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ada:	2001      	movs	r0, #1
	}
 8007adc:	b005      	add	sp, #20
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 fe22 	bl	800872c <vPortFree>
 8007ae8:	e7e6      	b.n	8007ab8 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aee:	e7f5      	b.n	8007adc <xTaskCreate+0x48>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007af4:	e7f2      	b.n	8007adc <xTaskCreate+0x48>
	...

08007af8 <vTaskStartScheduler>:
{
 8007af8:	b500      	push	{lr}
 8007afa:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8007afc:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <vTaskStartScheduler+0x6c>)
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	2300      	movs	r3, #0
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2280      	movs	r2, #128	; 0x80
 8007b06:	4918      	ldr	r1, [pc, #96]	; (8007b68 <vTaskStartScheduler+0x70>)
 8007b08:	4818      	ldr	r0, [pc, #96]	; (8007b6c <vTaskStartScheduler+0x74>)
 8007b0a:	f7ff ffc3 	bl	8007a94 <xTaskCreate>
	if( xReturn == pdPASS )
 8007b0e:	2801      	cmp	r0, #1
 8007b10:	d005      	beq.n	8007b1e <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b16:	d019      	beq.n	8007b4c <vTaskStartScheduler+0x54>
}
 8007b18:	b003      	add	sp, #12
 8007b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	b672      	cpsid	i
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <vTaskStartScheduler+0x78>)
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <vTaskStartScheduler+0x7c>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b40:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <vTaskStartScheduler+0x80>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007b46:	f000 fca1 	bl	800848c <xPortStartScheduler>
 8007b4a:	e7e5      	b.n	8007b18 <vTaskStartScheduler+0x20>
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	e7fe      	b.n	8007b60 <vTaskStartScheduler+0x68>
 8007b62:	bf00      	nop
 8007b64:	200005e0 	.word	0x200005e0
 8007b68:	08010c48 	.word	0x08010c48
 8007b6c:	080079cd 	.word	0x080079cd
 8007b70:	200005e4 	.word	0x200005e4
 8007b74:	20000600 	.word	0x20000600
 8007b78:	2000062c 	.word	0x2000062c

08007b7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007b7c:	4a02      	ldr	r2, [pc, #8]	; (8007b88 <vTaskSuspendAll+0xc>)
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	6013      	str	r3, [r2, #0]
}
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	200005ac 	.word	0x200005ac

08007b8c <xTaskIncrementTick>:
{
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b8e:	4b3b      	ldr	r3, [pc, #236]	; (8007c7c <xTaskIncrementTick+0xf0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d166      	bne.n	8007c64 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b96:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <xTaskIncrementTick+0xf4>)
 8007b98:	681d      	ldr	r5, [r3, #0]
 8007b9a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007b9c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b9e:	b9d5      	cbnz	r5, 8007bd6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007ba0:	4b38      	ldr	r3, [pc, #224]	; (8007c84 <xTaskIncrementTick+0xf8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	b153      	cbz	r3, 8007bbe <xTaskIncrementTick+0x32>
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
 8007bbc:	e7fe      	b.n	8007bbc <xTaskIncrementTick+0x30>
 8007bbe:	4a31      	ldr	r2, [pc, #196]	; (8007c84 <xTaskIncrementTick+0xf8>)
 8007bc0:	6811      	ldr	r1, [r2, #0]
 8007bc2:	4b31      	ldr	r3, [pc, #196]	; (8007c88 <xTaskIncrementTick+0xfc>)
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	6019      	str	r1, [r3, #0]
 8007bca:	4a30      	ldr	r2, [pc, #192]	; (8007c8c <xTaskIncrementTick+0x100>)
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	f7ff fded 	bl	80077b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <xTaskIncrementTick+0x104>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	d938      	bls.n	8007c50 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007bde:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007be0:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <xTaskIncrementTick+0x108>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007bea:	009a      	lsls	r2, r3, #2
 8007bec:	4b2a      	ldr	r3, [pc, #168]	; (8007c98 <xTaskIncrementTick+0x10c>)
 8007bee:	589b      	ldr	r3, [r3, r2]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d93c      	bls.n	8007c6e <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8007bf4:	2401      	movs	r4, #1
 8007bf6:	e03a      	b.n	8007c6e <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8007bf8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfa:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <xTaskIncrementTick+0xf8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	b343      	cbz	r3, 8007c54 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c02:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <xTaskIncrementTick+0xf8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c0a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007c0c:	429d      	cmp	r5, r3
 8007c0e:	d326      	bcc.n	8007c5e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c10:	1d37      	adds	r7, r6, #4
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff faf5 	bl	8007202 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c18:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007c1a:	b11b      	cbz	r3, 8007c24 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c1c:	f106 0018 	add.w	r0, r6, #24
 8007c20:	f7ff faef 	bl	8007202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c24:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007c26:	2201      	movs	r2, #1
 8007c28:	409a      	lsls	r2, r3
 8007c2a:	491c      	ldr	r1, [pc, #112]	; (8007c9c <xTaskIncrementTick+0x110>)
 8007c2c:	6808      	ldr	r0, [r1, #0]
 8007c2e:	4302      	orrs	r2, r0
 8007c30:	600a      	str	r2, [r1, #0]
 8007c32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c36:	009a      	lsls	r2, r3, #2
 8007c38:	4639      	mov	r1, r7
 8007c3a:	4817      	ldr	r0, [pc, #92]	; (8007c98 <xTaskIncrementTick+0x10c>)
 8007c3c:	4410      	add	r0, r2
 8007c3e:	f7ff faba 	bl	80071b6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c42:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007c44:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <xTaskIncrementTick+0x108>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d2d4      	bcs.n	8007bf8 <xTaskIncrementTick+0x6c>
 8007c4e:	e7d4      	b.n	8007bfa <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 8007c50:	2400      	movs	r4, #0
 8007c52:	e7d2      	b.n	8007bfa <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <xTaskIncrementTick+0x104>)
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c5a:	601a      	str	r2, [r3, #0]
					break;
 8007c5c:	e7c0      	b.n	8007be0 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8007c5e:	4a0c      	ldr	r2, [pc, #48]	; (8007c90 <xTaskIncrementTick+0x104>)
 8007c60:	6013      	str	r3, [r2, #0]
						break;
 8007c62:	e7bd      	b.n	8007be0 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007c64:	4a0e      	ldr	r2, [pc, #56]	; (8007ca0 <xTaskIncrementTick+0x114>)
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007c6c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <xTaskIncrementTick+0x118>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 8007c74:	2401      	movs	r4, #1
}
 8007c76:	4620      	mov	r0, r4
 8007c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200005ac 	.word	0x200005ac
 8007c80:	2000062c 	.word	0x2000062c
 8007c84:	2000050c 	.word	0x2000050c
 8007c88:	20000510 	.word	0x20000510
 8007c8c:	200005e8 	.word	0x200005e8
 8007c90:	200005e4 	.word	0x200005e4
 8007c94:	20000508 	.word	0x20000508
 8007c98:	20000514 	.word	0x20000514
 8007c9c:	200005b4 	.word	0x200005b4
 8007ca0:	200005a8 	.word	0x200005a8
 8007ca4:	20000630 	.word	0x20000630

08007ca8 <xTaskResumeAll>:
{
 8007ca8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007caa:	4b34      	ldr	r3, [pc, #208]	; (8007d7c <xTaskResumeAll+0xd4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	b953      	cbnz	r3, 8007cc6 <xTaskResumeAll+0x1e>
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	b672      	cpsid	i
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	b662      	cpsie	i
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007cc6:	f000 fb3d 	bl	8008344 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007cca:	4b2c      	ldr	r3, [pc, #176]	; (8007d7c <xTaskResumeAll+0xd4>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	3a01      	subs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d14d      	bne.n	8007d74 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cd8:	4b29      	ldr	r3, [pc, #164]	; (8007d80 <xTaskResumeAll+0xd8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	b923      	cbnz	r3, 8007ce8 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8007cde:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007ce0:	f000 fb56 	bl	8008390 <vPortExitCritical>
}
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8007ce8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cea:	4b26      	ldr	r3, [pc, #152]	; (8007d84 <xTaskResumeAll+0xdc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	b31b      	cbz	r3, 8007d38 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007cf0:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <xTaskResumeAll+0xdc>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf6:	f104 0018 	add.w	r0, r4, #24
 8007cfa:	f7ff fa82 	bl	8007202 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cfe:	1d25      	adds	r5, r4, #4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7ff fa7e 	bl	8007202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d08:	2201      	movs	r2, #1
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	491e      	ldr	r1, [pc, #120]	; (8007d88 <xTaskResumeAll+0xe0>)
 8007d0e:	6808      	ldr	r0, [r1, #0]
 8007d10:	4302      	orrs	r2, r0
 8007d12:	600a      	str	r2, [r1, #0]
 8007d14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d18:	009a      	lsls	r2, r3, #2
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	481b      	ldr	r0, [pc, #108]	; (8007d8c <xTaskResumeAll+0xe4>)
 8007d1e:	4410      	add	r0, r2
 8007d20:	f7ff fa49 	bl	80071b6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <xTaskResumeAll+0xe8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d3dc      	bcc.n	8007cea <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8007d30:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <xTaskResumeAll+0xec>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e7d8      	b.n	8007cea <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8007d38:	b10c      	cbz	r4, 8007d3e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8007d3a:	f7ff fd39 	bl	80077b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <xTaskResumeAll+0xf0>)
 8007d40:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d42:	b154      	cbz	r4, 8007d5a <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
 8007d44:	f7ff ff22 	bl	8007b8c <xTaskIncrementTick>
 8007d48:	b110      	cbz	r0, 8007d50 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <xTaskResumeAll+0xec>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d50:	3c01      	subs	r4, #1
 8007d52:	d1f7      	bne.n	8007d44 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8007d54:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <xTaskResumeAll+0xf0>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <xTaskResumeAll+0xec>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	b15b      	cbz	r3, 8007d78 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8007d60:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <xTaskResumeAll+0xf4>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007d70:	2401      	movs	r4, #1
 8007d72:	e7b5      	b.n	8007ce0 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8007d74:	2400      	movs	r4, #0
 8007d76:	e7b3      	b.n	8007ce0 <xTaskResumeAll+0x38>
 8007d78:	2400      	movs	r4, #0
 8007d7a:	e7b1      	b.n	8007ce0 <xTaskResumeAll+0x38>
 8007d7c:	200005ac 	.word	0x200005ac
 8007d80:	200005a0 	.word	0x200005a0
 8007d84:	200005ec 	.word	0x200005ec
 8007d88:	200005b4 	.word	0x200005b4
 8007d8c:	20000514 	.word	0x20000514
 8007d90:	20000508 	.word	0x20000508
 8007d94:	20000630 	.word	0x20000630
 8007d98:	200005a8 	.word	0x200005a8
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <vTaskDelay>:
	{
 8007da0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007da2:	b1b8      	cbz	r0, 8007dd4 <vTaskDelay+0x34>
 8007da4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <vTaskDelay+0x48>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	b153      	cbz	r3, 8007dc2 <vTaskDelay+0x22>
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	b672      	cpsid	i
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	b662      	cpsie	i
 8007dc0:	e7fe      	b.n	8007dc0 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007dc2:	f7ff fedb 	bl	8007b7c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff fe13 	bl	80079f4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007dce:	f7ff ff6b 	bl	8007ca8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007dd2:	b938      	cbnz	r0, 8007de4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <vTaskDelay+0x4c>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
	}
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	200005ac 	.word	0x200005ac
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <vTaskSwitchContext+0x88>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b11b      	cbz	r3, 8007dfe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007df6:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <vTaskSwitchContext+0x8c>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <vTaskSwitchContext+0x8c>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e04:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <vTaskSwitchContext+0x90>)
 8007e06:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e08:	fab3 f383 	clz	r3, r3
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f1c3 031f 	rsb	r3, r3, #31
 8007e12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007e16:	008a      	lsls	r2, r1, #2
 8007e18:	491a      	ldr	r1, [pc, #104]	; (8007e84 <vTaskSwitchContext+0x94>)
 8007e1a:	588a      	ldr	r2, [r1, r2]
 8007e1c:	b952      	cbnz	r2, 8007e34 <vTaskSwitchContext+0x44>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	b672      	cpsid	i
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	b662      	cpsie	i
 8007e32:	e7fe      	b.n	8007e32 <vTaskSwitchContext+0x42>
{
 8007e34:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e36:	4813      	ldr	r0, [pc, #76]	; (8007e84 <vTaskSwitchContext+0x94>)
 8007e38:	009a      	lsls	r2, r3, #2
 8007e3a:	18d4      	adds	r4, r2, r3
 8007e3c:	00a1      	lsls	r1, r4, #2
 8007e3e:	4401      	add	r1, r0
 8007e40:	684c      	ldr	r4, [r1, #4]
 8007e42:	6864      	ldr	r4, [r4, #4]
 8007e44:	604c      	str	r4, [r1, #4]
 8007e46:	441a      	add	r2, r3
 8007e48:	0091      	lsls	r1, r2, #2
 8007e4a:	3108      	adds	r1, #8
 8007e4c:	4408      	add	r0, r1
 8007e4e:	4284      	cmp	r4, r0
 8007e50:	d00b      	beq.n	8007e6a <vTaskSwitchContext+0x7a>
 8007e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e56:	009a      	lsls	r2, r3, #2
 8007e58:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <vTaskSwitchContext+0x94>)
 8007e5a:	4413      	add	r3, r2
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <vTaskSwitchContext+0x98>)
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e68:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e6a:	6861      	ldr	r1, [r4, #4]
 8007e6c:	4805      	ldr	r0, [pc, #20]	; (8007e84 <vTaskSwitchContext+0x94>)
 8007e6e:	2214      	movs	r2, #20
 8007e70:	fb02 0203 	mla	r2, r2, r3, r0
 8007e74:	6051      	str	r1, [r2, #4]
 8007e76:	e7ec      	b.n	8007e52 <vTaskSwitchContext+0x62>
 8007e78:	200005ac 	.word	0x200005ac
 8007e7c:	20000630 	.word	0x20000630
 8007e80:	200005b4 	.word	0x200005b4
 8007e84:	20000514 	.word	0x20000514
 8007e88:	20000508 	.word	0x20000508

08007e8c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007e8c:	b950      	cbnz	r0, 8007ea4 <vTaskPlaceOnEventList+0x18>
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	b672      	cpsid	i
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	b662      	cpsie	i
 8007ea2:	e7fe      	b.n	8007ea2 <vTaskPlaceOnEventList+0x16>
{
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <vTaskPlaceOnEventList+0x30>)
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	3118      	adds	r1, #24
 8007eae:	f7ff f98e 	bl	80071ce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f7ff fd9d 	bl	80079f4 <prvAddCurrentTaskToDelayedList>
}
 8007eba:	bd10      	pop	{r4, pc}
 8007ebc:	20000508 	.word	0x20000508

08007ec0 <xTaskRemoveFromEventList>:
{
 8007ec0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ec2:	68c3      	ldr	r3, [r0, #12]
 8007ec4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007ec6:	b954      	cbnz	r4, 8007ede <xTaskRemoveFromEventList+0x1e>
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	b672      	cpsid	i
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	b662      	cpsie	i
 8007edc:	e7fe      	b.n	8007edc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ede:	f104 0518 	add.w	r5, r4, #24
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f7ff f98d 	bl	8007202 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b13      	ldr	r3, [pc, #76]	; (8007f38 <xTaskRemoveFromEventList+0x78>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	b9e3      	cbnz	r3, 8007f28 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007eee:	1d25      	adds	r5, r4, #4
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f7ff f986 	bl	8007202 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ef8:	2201      	movs	r2, #1
 8007efa:	409a      	lsls	r2, r3
 8007efc:	490f      	ldr	r1, [pc, #60]	; (8007f3c <xTaskRemoveFromEventList+0x7c>)
 8007efe:	6808      	ldr	r0, [r1, #0]
 8007f00:	4302      	orrs	r2, r0
 8007f02:	600a      	str	r2, [r1, #0]
 8007f04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f08:	009a      	lsls	r2, r3, #2
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	480c      	ldr	r0, [pc, #48]	; (8007f40 <xTaskRemoveFromEventList+0x80>)
 8007f0e:	4410      	add	r0, r2
 8007f10:	f7ff f951 	bl	80071b6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <xTaskRemoveFromEventList+0x84>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d908      	bls.n	8007f32 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8007f20:	2001      	movs	r0, #1
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <xTaskRemoveFromEventList+0x88>)
 8007f24:	6018      	str	r0, [r3, #0]
}
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4808      	ldr	r0, [pc, #32]	; (8007f4c <xTaskRemoveFromEventList+0x8c>)
 8007f2c:	f7ff f943 	bl	80071b6 <vListInsertEnd>
 8007f30:	e7f0      	b.n	8007f14 <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 8007f32:	2000      	movs	r0, #0
	return xReturn;
 8007f34:	e7f7      	b.n	8007f26 <xTaskRemoveFromEventList+0x66>
 8007f36:	bf00      	nop
 8007f38:	200005ac 	.word	0x200005ac
 8007f3c:	200005b4 	.word	0x200005b4
 8007f40:	20000514 	.word	0x20000514
 8007f44:	20000508 	.word	0x20000508
 8007f48:	20000630 	.word	0x20000630
 8007f4c:	200005ec 	.word	0x200005ec

08007f50 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <vTaskInternalSetTimeOutState+0x10>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f56:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <vTaskInternalSetTimeOutState+0x14>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6043      	str	r3, [r0, #4]
}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	200005e8 	.word	0x200005e8
 8007f64:	2000062c 	.word	0x2000062c

08007f68 <xTaskCheckForTimeOut>:
{
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007f6a:	b160      	cbz	r0, 8007f86 <xTaskCheckForTimeOut+0x1e>
 8007f6c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007f6e:	b9a9      	cbnz	r1, 8007f9c <xTaskCheckForTimeOut+0x34>
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	b672      	cpsid	i
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	b662      	cpsie	i
 8007f84:	e7fe      	b.n	8007f84 <xTaskCheckForTimeOut+0x1c>
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	b672      	cpsid	i
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	b662      	cpsie	i
 8007f9a:	e7fe      	b.n	8007f9a <xTaskCheckForTimeOut+0x32>
 8007f9c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8007f9e:	f000 f9d1 	bl	8008344 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <xTaskCheckForTimeOut+0x80>)
 8007fa4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fa6:	6868      	ldr	r0, [r5, #4]
 8007fa8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb0:	d016      	beq.n	8007fe0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fb2:	682f      	ldr	r7, [r5, #0]
 8007fb4:	4e0d      	ldr	r6, [pc, #52]	; (8007fec <xTaskCheckForTimeOut+0x84>)
 8007fb6:	6836      	ldr	r6, [r6, #0]
 8007fb8:	42b7      	cmp	r7, r6
 8007fba:	d001      	beq.n	8007fc0 <xTaskCheckForTimeOut+0x58>
 8007fbc:	4288      	cmp	r0, r1
 8007fbe:	d911      	bls.n	8007fe4 <xTaskCheckForTimeOut+0x7c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d803      	bhi.n	8007fcc <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007fc8:	2401      	movs	r4, #1
 8007fca:	e005      	b.n	8007fd8 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f7ff ffbd 	bl	8007f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fd6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007fd8:	f000 f9da 	bl	8008390 <vPortExitCritical>
}
 8007fdc:	4620      	mov	r0, r4
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	e7f9      	b.n	8007fd8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8007fe4:	2401      	movs	r4, #1
 8007fe6:	e7f7      	b.n	8007fd8 <xTaskCheckForTimeOut+0x70>
 8007fe8:	2000062c 	.word	0x2000062c
 8007fec:	200005e8 	.word	0x200005e8

08007ff0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007ff0:	4b01      	ldr	r3, [pc, #4]	; (8007ff8 <vTaskMissedYield+0x8>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	4770      	bx	lr
 8007ff8:	20000630 	.word	0x20000630

08007ffc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <xTaskGetSchedulerState+0x18>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	b133      	cbz	r3, 8008010 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <xTaskGetSchedulerState+0x1c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	b10b      	cbz	r3, 800800c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008008:	2000      	movs	r0, #0
	}
 800800a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800800c:	2002      	movs	r0, #2
 800800e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008010:	2001      	movs	r0, #1
 8008012:	4770      	bx	lr
 8008014:	20000600 	.word	0x20000600
 8008018:	200005ac 	.word	0x200005ac

0800801c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800801c:	2800      	cmp	r0, #0
 800801e:	d050      	beq.n	80080c2 <xTaskPriorityInherit+0xa6>
	{
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008024:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008026:	4928      	ldr	r1, [pc, #160]	; (80080c8 <xTaskPriorityInherit+0xac>)
 8008028:	6809      	ldr	r1, [r1, #0]
 800802a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800802c:	428a      	cmp	r2, r1
 800802e:	d23e      	bcs.n	80080ae <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008030:	6981      	ldr	r1, [r0, #24]
 8008032:	2900      	cmp	r1, #0
 8008034:	db05      	blt.n	8008042 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008036:	4924      	ldr	r1, [pc, #144]	; (80080c8 <xTaskPriorityInherit+0xac>)
 8008038:	6809      	ldr	r1, [r1, #0]
 800803a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800803c:	f1c1 0107 	rsb	r1, r1, #7
 8008040:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008042:	6960      	ldr	r0, [r4, #20]
 8008044:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008048:	0091      	lsls	r1, r2, #2
 800804a:	4a20      	ldr	r2, [pc, #128]	; (80080cc <xTaskPriorityInherit+0xb0>)
 800804c:	440a      	add	r2, r1
 800804e:	4290      	cmp	r0, r2
 8008050:	d005      	beq.n	800805e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008052:	4a1d      	ldr	r2, [pc, #116]	; (80080c8 <xTaskPriorityInherit+0xac>)
 8008054:	6812      	ldr	r2, [r2, #0]
 8008056:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008058:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800805a:	2001      	movs	r0, #1
	}
 800805c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805e:	1d25      	adds	r5, r4, #4
 8008060:	4628      	mov	r0, r5
 8008062:	f7ff f8ce 	bl	8007202 <uxListRemove>
 8008066:	b968      	cbnz	r0, 8008084 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800806a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800806e:	008a      	lsls	r2, r1, #2
 8008070:	4916      	ldr	r1, [pc, #88]	; (80080cc <xTaskPriorityInherit+0xb0>)
 8008072:	588a      	ldr	r2, [r1, r2]
 8008074:	b932      	cbnz	r2, 8008084 <xTaskPriorityInherit+0x68>
 8008076:	2201      	movs	r2, #1
 8008078:	409a      	lsls	r2, r3
 800807a:	4915      	ldr	r1, [pc, #84]	; (80080d0 <xTaskPriorityInherit+0xb4>)
 800807c:	680b      	ldr	r3, [r1, #0]
 800807e:	ea23 0302 	bic.w	r3, r3, r2
 8008082:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008084:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <xTaskPriorityInherit+0xac>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800808c:	2401      	movs	r4, #1
 800808e:	fa04 f203 	lsl.w	r2, r4, r3
 8008092:	490f      	ldr	r1, [pc, #60]	; (80080d0 <xTaskPriorityInherit+0xb4>)
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	4302      	orrs	r2, r0
 8008098:	600a      	str	r2, [r1, #0]
 800809a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800809e:	009a      	lsls	r2, r3, #2
 80080a0:	4629      	mov	r1, r5
 80080a2:	480a      	ldr	r0, [pc, #40]	; (80080cc <xTaskPriorityInherit+0xb0>)
 80080a4:	4410      	add	r0, r2
 80080a6:	f7ff f886 	bl	80071b6 <vListInsertEnd>
				xReturn = pdTRUE;
 80080aa:	4620      	mov	r0, r4
 80080ac:	e7d6      	b.n	800805c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <xTaskPriorityInherit+0xac>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d201      	bcs.n	80080be <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 80080ba:	2001      	movs	r0, #1
		return xReturn;
 80080bc:	e7ce      	b.n	800805c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 80080be:	2000      	movs	r0, #0
 80080c0:	e7cc      	b.n	800805c <xTaskPriorityInherit+0x40>
 80080c2:	2000      	movs	r0, #0
	}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000508 	.word	0x20000508
 80080cc:	20000514 	.word	0x20000514
 80080d0:	200005b4 	.word	0x200005b4

080080d4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d04d      	beq.n	8008174 <xTaskPriorityDisinherit+0xa0>
	{
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80080dc:	4a28      	ldr	r2, [pc, #160]	; (8008180 <xTaskPriorityDisinherit+0xac>)
 80080de:	6812      	ldr	r2, [r2, #0]
 80080e0:	4282      	cmp	r2, r0
 80080e2:	d00a      	beq.n	80080fa <xTaskPriorityDisinherit+0x26>
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	b672      	cpsid	i
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	b662      	cpsie	i
 80080f8:	e7fe      	b.n	80080f8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80080fa:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80080fc:	b952      	cbnz	r2, 8008114 <xTaskPriorityDisinherit+0x40>
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	b672      	cpsid	i
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	b662      	cpsie	i
 8008112:	e7fe      	b.n	8008112 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 8008114:	3a01      	subs	r2, #1
 8008116:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008118:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800811a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800811c:	4288      	cmp	r0, r1
 800811e:	d02b      	beq.n	8008178 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008120:	bb62      	cbnz	r2, 800817c <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008122:	1d25      	adds	r5, r4, #4
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff f86c 	bl	8007202 <uxListRemove>
 800812a:	b970      	cbnz	r0, 800814a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800812c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800812e:	2314      	movs	r3, #20
 8008130:	fb03 f302 	mul.w	r3, r3, r2
 8008134:	4913      	ldr	r1, [pc, #76]	; (8008184 <xTaskPriorityDisinherit+0xb0>)
 8008136:	58cb      	ldr	r3, [r1, r3]
 8008138:	b93b      	cbnz	r3, 800814a <xTaskPriorityDisinherit+0x76>
 800813a:	2301      	movs	r3, #1
 800813c:	fa03 f202 	lsl.w	r2, r3, r2
 8008140:	4911      	ldr	r1, [pc, #68]	; (8008188 <xTaskPriorityDisinherit+0xb4>)
 8008142:	680b      	ldr	r3, [r1, #0]
 8008144:	ea23 0302 	bic.w	r3, r3, r2
 8008148:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800814a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800814c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814e:	f1c3 0207 	rsb	r2, r3, #7
 8008152:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008154:	2401      	movs	r4, #1
 8008156:	fa04 f203 	lsl.w	r2, r4, r3
 800815a:	490b      	ldr	r1, [pc, #44]	; (8008188 <xTaskPriorityDisinherit+0xb4>)
 800815c:	6808      	ldr	r0, [r1, #0]
 800815e:	4302      	orrs	r2, r0
 8008160:	600a      	str	r2, [r1, #0]
 8008162:	4629      	mov	r1, r5
 8008164:	4a07      	ldr	r2, [pc, #28]	; (8008184 <xTaskPriorityDisinherit+0xb0>)
 8008166:	2014      	movs	r0, #20
 8008168:	fb00 2003 	mla	r0, r0, r3, r2
 800816c:	f7ff f823 	bl	80071b6 <vListInsertEnd>
					xReturn = pdTRUE;
 8008170:	4620      	mov	r0, r4
	}
 8008172:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008174:	2000      	movs	r0, #0
	}
 8008176:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008178:	2000      	movs	r0, #0
 800817a:	e7fa      	b.n	8008172 <xTaskPriorityDisinherit+0x9e>
 800817c:	2000      	movs	r0, #0
		return xReturn;
 800817e:	e7f8      	b.n	8008172 <xTaskPriorityDisinherit+0x9e>
 8008180:	20000508 	.word	0x20000508
 8008184:	20000514 	.word	0x20000514
 8008188:	200005b4 	.word	0x200005b4

0800818c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800818c:	2800      	cmp	r0, #0
 800818e:	d059      	beq.n	8008244 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008194:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008196:	b950      	cbnz	r0, 80081ae <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	e7fe      	b.n	80081ac <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80081ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b0:	428a      	cmp	r2, r1
 80081b2:	d200      	bcs.n	80081b6 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081b4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081b8:	4291      	cmp	r1, r2
 80081ba:	d001      	beq.n	80081c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081bc:	2801      	cmp	r0, #1
 80081be:	d000      	beq.n	80081c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80081c2:	4821      	ldr	r0, [pc, #132]	; (8008248 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80081c4:	6800      	ldr	r0, [r0, #0]
 80081c6:	4298      	cmp	r0, r3
 80081c8:	d10a      	bne.n	80081e0 <vTaskPriorityDisinheritAfterTimeout+0x54>
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	b672      	cpsid	i
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	b662      	cpsie	i
 80081de:	e7fe      	b.n	80081de <vTaskPriorityDisinheritAfterTimeout+0x52>
					pxTCB->uxPriority = uxPriorityToUse;
 80081e0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081e2:	6998      	ldr	r0, [r3, #24]
 80081e4:	2800      	cmp	r0, #0
 80081e6:	db02      	blt.n	80081ee <vTaskPriorityDisinheritAfterTimeout+0x62>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e8:	f1c2 0207 	rsb	r2, r2, #7
 80081ec:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081ee:	695a      	ldr	r2, [r3, #20]
 80081f0:	4816      	ldr	r0, [pc, #88]	; (800824c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80081f2:	2414      	movs	r4, #20
 80081f4:	fb04 0101 	mla	r1, r4, r1, r0
 80081f8:	428a      	cmp	r2, r1
 80081fa:	d1e1      	bne.n	80081c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80081fc:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081fe:	1d1d      	adds	r5, r3, #4
 8008200:	4628      	mov	r0, r5
 8008202:	f7fe fffe 	bl	8007202 <uxListRemove>
 8008206:	b970      	cbnz	r0, 8008226 <vTaskPriorityDisinheritAfterTimeout+0x9a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800820a:	2314      	movs	r3, #20
 800820c:	fb03 f302 	mul.w	r3, r3, r2
 8008210:	490e      	ldr	r1, [pc, #56]	; (800824c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8008212:	58cb      	ldr	r3, [r1, r3]
 8008214:	b93b      	cbnz	r3, 8008226 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8008216:	2301      	movs	r3, #1
 8008218:	fa03 f202 	lsl.w	r2, r3, r2
 800821c:	490c      	ldr	r1, [pc, #48]	; (8008250 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800821e:	680b      	ldr	r3, [r1, #0]
 8008220:	ea23 0302 	bic.w	r3, r3, r2
 8008224:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8008226:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008228:	2301      	movs	r3, #1
 800822a:	4093      	lsls	r3, r2
 800822c:	4908      	ldr	r1, [pc, #32]	; (8008250 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800822e:	6808      	ldr	r0, [r1, #0]
 8008230:	4303      	orrs	r3, r0
 8008232:	600b      	str	r3, [r1, #0]
 8008234:	4629      	mov	r1, r5
 8008236:	4b05      	ldr	r3, [pc, #20]	; (800824c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8008238:	2014      	movs	r0, #20
 800823a:	fb00 3002 	mla	r0, r0, r2, r3
 800823e:	f7fe ffba 	bl	80071b6 <vListInsertEnd>
	}
 8008242:	e7bd      	b.n	80081c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000508 	.word	0x20000508
 800824c:	20000514 	.word	0x20000514
 8008250:	200005b4 	.word	0x200005b4

08008254 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <pvTaskIncrementMutexHeldCount+0x18>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	b123      	cbz	r3, 8008264 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800825a:	4b04      	ldr	r3, [pc, #16]	; (800826c <pvTaskIncrementMutexHeldCount+0x18>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008260:	3301      	adds	r3, #1
 8008262:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8008264:	4b01      	ldr	r3, [pc, #4]	; (800826c <pvTaskIncrementMutexHeldCount+0x18>)
 8008266:	6818      	ldr	r0, [r3, #0]
	}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000508 	.word	0x20000508

08008270 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008270:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <prvTaskExitError+0x44>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827e:	d00a      	beq.n	8008296 <prvTaskExitError+0x26>
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	e7fe      	b.n	8008294 <prvTaskExitError+0x24>
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	b672      	cpsid	i
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0fc      	beq.n	80082aa <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082b0:	b002      	add	sp, #8
 80082b2:	4770      	bx	lr
 80082b4:	20000048 	.word	0x20000048

080082b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082b8:	4808      	ldr	r0, [pc, #32]	; (80082dc <prvPortStartFirstTask+0x24>)
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f380 8808 	msr	MSP, r0
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8814 	msr	CONTROL, r0
 80082ca:	b662      	cpsie	i
 80082cc:	b661      	cpsie	f
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	df00      	svc	0
 80082d8:	bf00      	nop
 80082da:	0000      	.short	0x0000
 80082dc:	e000ed08 	.word	0xe000ed08

080082e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082f0 <vPortEnableVFP+0x10>
 80082e4:	6801      	ldr	r1, [r0, #0]
 80082e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ea:	6001      	str	r1, [r0, #0]
 80082ec:	4770      	bx	lr
 80082ee:	0000      	.short	0x0000
 80082f0:	e000ed88 	.word	0xe000ed88

080082f4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082f8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082fc:	f021 0101 	bic.w	r1, r1, #1
 8008300:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <pxPortInitialiseStack+0x28>)
 8008306:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800830a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800830e:	f06f 0302 	mvn.w	r3, #2
 8008312:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008316:	3844      	subs	r0, #68	; 0x44
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	08008271 	.word	0x08008271

08008320 <SVC_Handler>:
	__asm volatile (
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <pxCurrentTCBConst2>)
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f380 8809 	msr	PSP, r0
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	4770      	bx	lr
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst2>:
 8008340:	20000508 	.word	0x20000508

08008344 <vPortEnterCritical>:
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
	uxCriticalNesting++;
 8008358:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <vPortEnterCritical+0x44>)
 800835a:	6813      	ldr	r3, [r2, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008360:	2b01      	cmp	r3, #1
 8008362:	d000      	beq.n	8008366 <vPortEnterCritical+0x22>
}
 8008364:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <vPortEnterCritical+0x48>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800836e:	d0f9      	beq.n	8008364 <vPortEnterCritical+0x20>
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	b672      	cpsid	i
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	b662      	cpsie	i
 8008384:	e7fe      	b.n	8008384 <vPortEnterCritical+0x40>
 8008386:	bf00      	nop
 8008388:	20000048 	.word	0x20000048
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <vPortExitCritical+0x2c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	b953      	cbnz	r3, 80083ac <vPortExitCritical+0x1c>
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	b672      	cpsid	i
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	b662      	cpsie	i
 80083aa:	e7fe      	b.n	80083aa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a03      	ldr	r2, [pc, #12]	; (80083bc <vPortExitCritical+0x2c>)
 80083b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083b2:	b90b      	cbnz	r3, 80083b8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083b4:	f383 8811 	msr	BASEPRI, r3
}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20000048 	.word	0x20000048

080083c0 <PendSV_Handler>:
	__asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	; (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083e4:	b672      	cpsid	i
 80083e6:	f380 8811 	msr	BASEPRI, r0
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	b662      	cpsie	i
 80083f4:	f7ff fcfc 	bl	8007df0 <vTaskSwitchContext>
 80083f8:	f04f 0000 	mov.w	r0, #0
 80083fc:	f380 8811 	msr	BASEPRI, r0
 8008400:	bc09      	pop	{r0, r3}
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f01e 0f10 	tst.w	lr, #16
 800840e:	bf08      	it	eq
 8008410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008414:	f380 8809 	msr	PSP, r0
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop

08008420 <pxCurrentTCBConst>:
 8008420:	20000508 	.word	0x20000508

08008424 <SysTick_Handler>:
{
 8008424:	b508      	push	{r3, lr}
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800843a:	f7ff fba7 	bl	8007b8c <xTaskIncrementTick>
 800843e:	b118      	cbz	r0, 8008448 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008440:	4b03      	ldr	r3, [pc, #12]	; (8008450 <SysTick_Handler+0x2c>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008448:	2300      	movs	r3, #0
 800844a:	f383 8811 	msr	BASEPRI, r3
}
 800844e:	bd08      	pop	{r3, pc}
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008454:	4a08      	ldr	r2, [pc, #32]	; (8008478 <vPortSetupTimerInterrupt+0x24>)
 8008456:	2300      	movs	r3, #0
 8008458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800845a:	4908      	ldr	r1, [pc, #32]	; (800847c <vPortSetupTimerInterrupt+0x28>)
 800845c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845e:	4b08      	ldr	r3, [pc, #32]	; (8008480 <vPortSetupTimerInterrupt+0x2c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4908      	ldr	r1, [pc, #32]	; (8008484 <vPortSetupTimerInterrupt+0x30>)
 8008464:	fba1 1303 	umull	r1, r3, r1, r3
 8008468:	099b      	lsrs	r3, r3, #6
 800846a:	3b01      	subs	r3, #1
 800846c:	4906      	ldr	r1, [pc, #24]	; (8008488 <vPortSetupTimerInterrupt+0x34>)
 800846e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008470:	2307      	movs	r3, #7
 8008472:	6013      	str	r3, [r2, #0]
}
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	e000e010 	.word	0xe000e010
 800847c:	e000e018 	.word	0xe000e018
 8008480:	20000058 	.word	0x20000058
 8008484:	10624dd3 	.word	0x10624dd3
 8008488:	e000e014 	.word	0xe000e014

0800848c <xPortStartScheduler>:
{
 800848c:	b510      	push	{r4, lr}
 800848e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008490:	4b2c      	ldr	r3, [pc, #176]	; (8008544 <xPortStartScheduler+0xb8>)
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008498:	22ff      	movs	r2, #255	; 0xff
 800849a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80084a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084ac:	4a26      	ldr	r2, [pc, #152]	; (8008548 <xPortStartScheduler+0xbc>)
 80084ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084b0:	4b26      	ldr	r3, [pc, #152]	; (800854c <xPortStartScheduler+0xc0>)
 80084b2:	2207      	movs	r2, #7
 80084b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084b6:	e009      	b.n	80084cc <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80084b8:	4a24      	ldr	r2, [pc, #144]	; (800854c <xPortStartScheduler+0xc0>)
 80084ba:	6813      	ldr	r3, [r2, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80084d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084d4:	d1f0      	bne.n	80084b8 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084d6:	4b1d      	ldr	r3, [pc, #116]	; (800854c <xPortStartScheduler+0xc0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d00a      	beq.n	80084f4 <xPortStartScheduler+0x68>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	e7fe      	b.n	80084f2 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084f4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084fa:	4a14      	ldr	r2, [pc, #80]	; (800854c <xPortStartScheduler+0xc0>)
 80084fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084fe:	9b01      	ldr	r3, [sp, #4]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4a10      	ldr	r2, [pc, #64]	; (8008544 <xPortStartScheduler+0xb8>)
 8008504:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <xPortStartScheduler+0xc4>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800850e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008516:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008518:	f7ff ff9c 	bl	8008454 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800851c:	2400      	movs	r4, #0
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <xPortStartScheduler+0xc8>)
 8008520:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008522:	f7ff fedd 	bl	80082e0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008526:	4a0c      	ldr	r2, [pc, #48]	; (8008558 <xPortStartScheduler+0xcc>)
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800852e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008530:	f7ff fec2 	bl	80082b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008534:	f7ff fc5c 	bl	8007df0 <vTaskSwitchContext>
	prvTaskExitError();
 8008538:	f7ff fe9a 	bl	8008270 <prvTaskExitError>
}
 800853c:	4620      	mov	r0, r4
 800853e:	b002      	add	sp, #8
 8008540:	bd10      	pop	{r4, pc}
 8008542:	bf00      	nop
 8008544:	e000e400 	.word	0xe000e400
 8008548:	20000634 	.word	0x20000634
 800854c:	20000638 	.word	0x20000638
 8008550:	e000ed20 	.word	0xe000ed20
 8008554:	20000048 	.word	0x20000048
 8008558:	e000ef34 	.word	0xe000ef34

0800855c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800855c:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800855e:	f012 0f07 	tst.w	r2, #7
 8008562:	d01e      	beq.n	80085a2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008564:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008566:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800856a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800856e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008570:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008572:	480e      	ldr	r0, [pc, #56]	; (80085ac <prvHeapInit+0x50>)
 8008574:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008576:	2100      	movs	r1, #0
 8008578:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800857a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800857c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800857e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8008582:	480b      	ldr	r0, [pc, #44]	; (80085b0 <prvHeapInit+0x54>)
 8008584:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8008586:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008588:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800858a:	1a99      	subs	r1, r3, r2
 800858c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800858e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008590:	4b08      	ldr	r3, [pc, #32]	; (80085b4 <prvHeapInit+0x58>)
 8008592:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <prvHeapInit+0x5c>)
 8008596:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008598:	4b08      	ldr	r3, [pc, #32]	; (80085bc <prvHeapInit+0x60>)
 800859a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800859e:	601a      	str	r2, [r3, #0]
}
 80085a0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085a6:	e7e4      	b.n	8008572 <prvHeapInit+0x16>
 80085a8:	20000640 	.word	0x20000640
 80085ac:	2000424c 	.word	0x2000424c
 80085b0:	2000063c 	.word	0x2000063c
 80085b4:	20004248 	.word	0x20004248
 80085b8:	20004244 	.word	0x20004244
 80085bc:	20004240 	.word	0x20004240

080085c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c2:	4b13      	ldr	r3, [pc, #76]	; (8008610 <prvInsertBlockIntoFreeList+0x50>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4282      	cmp	r2, r0
 80085c8:	d31b      	bcc.n	8008602 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ca:	6859      	ldr	r1, [r3, #4]
 80085cc:	185c      	adds	r4, r3, r1
 80085ce:	4284      	cmp	r4, r0
 80085d0:	d103      	bne.n	80085da <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085d2:	6840      	ldr	r0, [r0, #4]
 80085d4:	4401      	add	r1, r0
 80085d6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085d8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085da:	6841      	ldr	r1, [r0, #4]
 80085dc:	1844      	adds	r4, r0, r1
 80085de:	42a2      	cmp	r2, r4
 80085e0:	d113      	bne.n	800860a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085e2:	4c0c      	ldr	r4, [pc, #48]	; (8008614 <prvInsertBlockIntoFreeList+0x54>)
 80085e4:	6824      	ldr	r4, [r4, #0]
 80085e6:	42a2      	cmp	r2, r4
 80085e8:	d00d      	beq.n	8008606 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ea:	6852      	ldr	r2, [r2, #4]
 80085ec:	4411      	add	r1, r2
 80085ee:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085f6:	4298      	cmp	r0, r3
 80085f8:	d000      	beq.n	80085fc <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085fa:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008600:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008602:	4613      	mov	r3, r2
 8008604:	e7de      	b.n	80085c4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008606:	6004      	str	r4, [r0, #0]
 8008608:	e7f5      	b.n	80085f6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800860a:	6002      	str	r2, [r0, #0]
 800860c:	e7f3      	b.n	80085f6 <prvInsertBlockIntoFreeList+0x36>
 800860e:	bf00      	nop
 8008610:	2000424c 	.word	0x2000424c
 8008614:	2000063c 	.word	0x2000063c

08008618 <pvPortMalloc>:
{
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800861c:	f7ff faae 	bl	8007b7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008620:	4b3d      	ldr	r3, [pc, #244]	; (8008718 <pvPortMalloc+0x100>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b1cb      	cbz	r3, 800865a <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008626:	4b3d      	ldr	r3, [pc, #244]	; (800871c <pvPortMalloc+0x104>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	421c      	tst	r4, r3
 800862c:	d169      	bne.n	8008702 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800862e:	b1bc      	cbz	r4, 8008660 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8008630:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008632:	f014 0f07 	tst.w	r4, #7
 8008636:	d013      	beq.n	8008660 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008638:	f024 0407 	bic.w	r4, r4, #7
 800863c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800863e:	f004 0307 	and.w	r3, r4, #7
 8008642:	b16b      	cbz	r3, 8008660 <pvPortMalloc+0x48>
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	b672      	cpsid	i
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	b662      	cpsie	i
 8008658:	e7fe      	b.n	8008658 <pvPortMalloc+0x40>
			prvHeapInit();
 800865a:	f7ff ff7f 	bl	800855c <prvHeapInit>
 800865e:	e7e2      	b.n	8008626 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008660:	2c00      	cmp	r4, #0
 8008662:	d050      	beq.n	8008706 <pvPortMalloc+0xee>
 8008664:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <pvPortMalloc+0x108>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	42a3      	cmp	r3, r4
 800866a:	d34e      	bcc.n	800870a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 800866c:	4b2d      	ldr	r3, [pc, #180]	; (8008724 <pvPortMalloc+0x10c>)
 800866e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008670:	e001      	b.n	8008676 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8008672:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8008674:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008676:	686a      	ldr	r2, [r5, #4]
 8008678:	42a2      	cmp	r2, r4
 800867a:	d202      	bcs.n	8008682 <pvPortMalloc+0x6a>
 800867c:	682a      	ldr	r2, [r5, #0]
 800867e:	2a00      	cmp	r2, #0
 8008680:	d1f7      	bne.n	8008672 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8008682:	4a25      	ldr	r2, [pc, #148]	; (8008718 <pvPortMalloc+0x100>)
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	42aa      	cmp	r2, r5
 8008688:	d041      	beq.n	800870e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800868a:	681e      	ldr	r6, [r3, #0]
 800868c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800868e:	682a      	ldr	r2, [r5, #0]
 8008690:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008692:	686b      	ldr	r3, [r5, #4]
 8008694:	1b1b      	subs	r3, r3, r4
 8008696:	2b10      	cmp	r3, #16
 8008698:	d912      	bls.n	80086c0 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800869a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800869c:	f010 0f07 	tst.w	r0, #7
 80086a0:	d00a      	beq.n	80086b8 <pvPortMalloc+0xa0>
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	b672      	cpsid	i
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	b662      	cpsie	i
 80086b6:	e7fe      	b.n	80086b6 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086ba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086bc:	f7ff ff80 	bl	80085c0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086c0:	686a      	ldr	r2, [r5, #4]
 80086c2:	4917      	ldr	r1, [pc, #92]	; (8008720 <pvPortMalloc+0x108>)
 80086c4:	680b      	ldr	r3, [r1, #0]
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ca:	4917      	ldr	r1, [pc, #92]	; (8008728 <pvPortMalloc+0x110>)
 80086cc:	6809      	ldr	r1, [r1, #0]
 80086ce:	428b      	cmp	r3, r1
 80086d0:	d201      	bcs.n	80086d6 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086d2:	4915      	ldr	r1, [pc, #84]	; (8008728 <pvPortMalloc+0x110>)
 80086d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086d6:	4b11      	ldr	r3, [pc, #68]	; (800871c <pvPortMalloc+0x104>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80086e2:	f7ff fae1 	bl	8007ca8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e6:	f016 0f07 	tst.w	r6, #7
 80086ea:	d012      	beq.n	8008712 <pvPortMalloc+0xfa>
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	b672      	cpsid	i
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	b662      	cpsie	i
 8008700:	e7fe      	b.n	8008700 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8008702:	2600      	movs	r6, #0
 8008704:	e7ed      	b.n	80086e2 <pvPortMalloc+0xca>
 8008706:	2600      	movs	r6, #0
 8008708:	e7eb      	b.n	80086e2 <pvPortMalloc+0xca>
 800870a:	2600      	movs	r6, #0
 800870c:	e7e9      	b.n	80086e2 <pvPortMalloc+0xca>
 800870e:	2600      	movs	r6, #0
 8008710:	e7e7      	b.n	80086e2 <pvPortMalloc+0xca>
}
 8008712:	4630      	mov	r0, r6
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	bf00      	nop
 8008718:	2000063c 	.word	0x2000063c
 800871c:	20004240 	.word	0x20004240
 8008720:	20004244 	.word	0x20004244
 8008724:	2000424c 	.word	0x2000424c
 8008728:	20004248 	.word	0x20004248

0800872c <vPortFree>:
	if( pv != NULL )
 800872c:	2800      	cmp	r0, #0
 800872e:	d034      	beq.n	800879a <vPortFree+0x6e>
{
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008734:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008738:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800873c:	4917      	ldr	r1, [pc, #92]	; (800879c <vPortFree+0x70>)
 800873e:	6809      	ldr	r1, [r1, #0]
 8008740:	420a      	tst	r2, r1
 8008742:	d10a      	bne.n	800875a <vPortFree+0x2e>
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	e7fe      	b.n	8008758 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800875a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800875e:	b150      	cbz	r0, 8008776 <vPortFree+0x4a>
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	b672      	cpsid	i
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	b662      	cpsie	i
 8008774:	e7fe      	b.n	8008774 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008776:	ea22 0201 	bic.w	r2, r2, r1
 800877a:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800877e:	f7ff f9fd 	bl	8007b7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008782:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008786:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vPortFree+0x74>)
 8008788:	6813      	ldr	r3, [r2, #0]
 800878a:	440b      	add	r3, r1
 800878c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800878e:	4628      	mov	r0, r5
 8008790:	f7ff ff16 	bl	80085c0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008794:	f7ff fa88 	bl	8007ca8 <xTaskResumeAll>
}
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	4770      	bx	lr
 800879c:	20004240 	.word	0x20004240
 80087a0:	20004244 	.word	0x20004244

080087a4 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80087a4:	b500      	push	{lr}
 80087a6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80087a8:	2300      	movs	r3, #0
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	9302      	str	r3, [sp, #8]
 80087b0:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80087b2:	4829      	ldr	r0, [pc, #164]	; (8008858 <MX_ADC3_Init+0xb4>)
 80087b4:	4a29      	ldr	r2, [pc, #164]	; (800885c <MX_ADC3_Init+0xb8>)
 80087b6:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80087b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80087bc:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80087be:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80087c0:	2201      	movs	r2, #1
 80087c2:	6102      	str	r2, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80087c4:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80087c6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80087ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80087ce:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80087d0:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
 80087d4:	6281      	str	r1, [r0, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80087d6:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 4;
 80087d8:	2104      	movs	r1, #4
 80087da:	61c1      	str	r1, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80087dc:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80087e0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80087e2:	f7f9 fcfb 	bl	80021dc <HAL_ADC_Init>
 80087e6:	bb40      	cbnz	r0, 800883a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80087f0:	2306      	movs	r3, #6
 80087f2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80087f4:	4669      	mov	r1, sp
 80087f6:	4818      	ldr	r0, [pc, #96]	; (8008858 <MX_ADC3_Init+0xb4>)
 80087f8:	f7f9 ff56 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80087fc:	bb00      	cbnz	r0, 8008840 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80087fe:	2306      	movs	r3, #6
 8008800:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008802:	2302      	movs	r3, #2
 8008804:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008806:	4669      	mov	r1, sp
 8008808:	4813      	ldr	r0, [pc, #76]	; (8008858 <MX_ADC3_Init+0xb4>)
 800880a:	f7f9 ff4d 	bl	80026a8 <HAL_ADC_ConfigChannel>
 800880e:	b9d0      	cbnz	r0, 8008846 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008810:	2307      	movs	r3, #7
 8008812:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008814:	2303      	movs	r3, #3
 8008816:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008818:	4669      	mov	r1, sp
 800881a:	480f      	ldr	r0, [pc, #60]	; (8008858 <MX_ADC3_Init+0xb4>)
 800881c:	f7f9 ff44 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8008820:	b9a0      	cbnz	r0, 800884c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008822:	2308      	movs	r3, #8
 8008824:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008826:	2304      	movs	r3, #4
 8008828:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800882a:	4669      	mov	r1, sp
 800882c:	480a      	ldr	r0, [pc, #40]	; (8008858 <MX_ADC3_Init+0xb4>)
 800882e:	f7f9 ff3b 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8008832:	b970      	cbnz	r0, 8008852 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
  }

}
 8008834:	b005      	add	sp, #20
 8008836:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800883a:	f001 f81f 	bl	800987c <Error_Handler>
 800883e:	e7d3      	b.n	80087e8 <MX_ADC3_Init+0x44>
    Error_Handler();
 8008840:	f001 f81c 	bl	800987c <Error_Handler>
 8008844:	e7db      	b.n	80087fe <MX_ADC3_Init+0x5a>
    Error_Handler();
 8008846:	f001 f819 	bl	800987c <Error_Handler>
 800884a:	e7e1      	b.n	8008810 <MX_ADC3_Init+0x6c>
    Error_Handler();
 800884c:	f001 f816 	bl	800987c <Error_Handler>
 8008850:	e7e7      	b.n	8008822 <MX_ADC3_Init+0x7e>
    Error_Handler();
 8008852:	f001 f813 	bl	800987c <Error_Handler>
}
 8008856:	e7ed      	b.n	8008834 <MX_ADC3_Init+0x90>
 8008858:	2000456c 	.word	0x2000456c
 800885c:	40012200 	.word	0x40012200

08008860 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008860:	b530      	push	{r4, r5, lr}
 8008862:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008864:	2300      	movs	r3, #0
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	9306      	str	r3, [sp, #24]
 800886e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC3)
 8008870:	6802      	ldr	r2, [r0, #0]
 8008872:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <HAL_ADC_MspInit+0xd0>)
 8008874:	429a      	cmp	r2, r3
 8008876:	d001      	beq.n	800887c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8008878:	b009      	add	sp, #36	; 0x24
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	4604      	mov	r4, r0
    __HAL_RCC_ADC3_CLK_ENABLE();
 800887e:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8008882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008888:	645a      	str	r2, [r3, #68]	; 0x44
 800888a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800888c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008890:	9200      	str	r2, [sp, #0]
 8008892:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008896:	f042 0220 	orr.w	r2, r2, #32
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
 800889c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889e:	f002 0220 	and.w	r2, r2, #32
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin;
 80088b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80088bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088be:	2503      	movs	r5, #3
 80088c0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80088c2:	a903      	add	r1, sp, #12
 80088c4:	481b      	ldr	r0, [pc, #108]	; (8008934 <HAL_ADC_MspInit+0xd4>)
 80088c6:	f7fa fc5d 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A0_Pin;
 80088ca:	2301      	movs	r3, #1
 80088cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088ce:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d0:	2500      	movs	r5, #0
 80088d2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 80088d4:	a903      	add	r1, sp, #12
 80088d6:	4818      	ldr	r0, [pc, #96]	; (8008938 <HAL_ADC_MspInit+0xd8>)
 80088d8:	f7fa fc54 	bl	8003184 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80088dc:	4817      	ldr	r0, [pc, #92]	; (800893c <HAL_ADC_MspInit+0xdc>)
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <HAL_ADC_MspInit+0xe0>)
 80088e0:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80088e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80088e6:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088e8:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80088ea:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80088ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f0:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80088f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f6:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80088f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088fc:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80088fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008902:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8008904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008908:	6203      	str	r3, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800890a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800890c:	f7fa f8e6 	bl	8002adc <HAL_DMA_Init>
 8008910:	b958      	cbnz	r0, 800892a <HAL_ADC_MspInit+0xca>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8008912:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_ADC_MspInit+0xdc>)
 8008914:	63a3      	str	r3, [r4, #56]	; 0x38
 8008916:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008918:	2200      	movs	r2, #0
 800891a:	2105      	movs	r1, #5
 800891c:	2012      	movs	r0, #18
 800891e:	f7f9 ffad 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008922:	2012      	movs	r0, #18
 8008924:	f7f9 ffdc 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 8008928:	e7a6      	b.n	8008878 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800892a:	f000 ffa7 	bl	800987c <Error_Handler>
 800892e:	e7f0      	b.n	8008912 <HAL_ADC_MspInit+0xb2>
 8008930:	40012200 	.word	0x40012200
 8008934:	40021400 	.word	0x40021400
 8008938:	40020000 	.word	0x40020000
 800893c:	2000450c 	.word	0x2000450c
 8008940:	40026428 	.word	0x40026428

08008944 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008944:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8008946:	4808      	ldr	r0, [pc, #32]	; (8008968 <MX_CRC_Init+0x24>)
 8008948:	4b08      	ldr	r3, [pc, #32]	; (800896c <MX_CRC_Init+0x28>)
 800894a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800894c:	2300      	movs	r3, #0
 800894e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008950:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008952:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008954:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008956:	2301      	movs	r3, #1
 8008958:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800895a:	f7f9 ffcf 	bl	80028fc <HAL_CRC_Init>
 800895e:	b900      	cbnz	r0, 8008962 <MX_CRC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8008960:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008962:	f000 ff8b 	bl	800987c <Error_Handler>
}
 8008966:	e7fb      	b.n	8008960 <MX_CRC_Init+0x1c>
 8008968:	200045b4 	.word	0x200045b4
 800896c:	40023000 	.word	0x40023000

08008970 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8008970:	6802      	ldr	r2, [r0, #0]
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <HAL_CRC_MspInit+0x28>)
 8008974:	429a      	cmp	r2, r3
 8008976:	d000      	beq.n	800897a <HAL_CRC_MspInit+0xa>
 8008978:	4770      	bx	lr
{
 800897a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800897c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008982:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008992:	b002      	add	sp, #8
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40023000 	.word	0x40023000

0800899c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800899c:	b500      	push	{lr}
 800899e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <MX_DMA_Init+0x30>)
 80089a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
 80089aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80089b4:	2200      	movs	r2, #0
 80089b6:	2105      	movs	r1, #5
 80089b8:	2039      	movs	r0, #57	; 0x39
 80089ba:	f7f9 ff5f 	bl	800287c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80089be:	2039      	movs	r0, #57	; 0x39
 80089c0:	f7f9 ff8e 	bl	80028e0 <HAL_NVIC_EnableIRQ>

}
 80089c4:	b003      	add	sp, #12
 80089c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ca:	bf00      	nop
 80089cc:	40023800 	.word	0x40023800

080089d0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80089d0:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 80089d2:	480d      	ldr	r0, [pc, #52]	; (8008a08 <MX_DMA2D_Init+0x38>)
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <MX_DMA2D_Init+0x3c>)
 80089d6:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80089d8:	2300      	movs	r3, #0
 80089da:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80089dc:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80089de:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80089e0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80089e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80089e4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80089e6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80089e8:	f7fa fa80 	bl	8002eec <HAL_DMA2D_Init>
 80089ec:	b928      	cbnz	r0, 80089fa <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80089ee:	2101      	movs	r1, #1
 80089f0:	4805      	ldr	r0, [pc, #20]	; (8008a08 <MX_DMA2D_Init+0x38>)
 80089f2:	f7fa fb65 	bl	80030c0 <HAL_DMA2D_ConfigLayer>
 80089f6:	b918      	cbnz	r0, 8008a00 <MX_DMA2D_Init+0x30>
  {
    Error_Handler();
  }

}
 80089f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80089fa:	f000 ff3f 	bl	800987c <Error_Handler>
 80089fe:	e7f6      	b.n	80089ee <MX_DMA2D_Init+0x1e>
    Error_Handler();
 8008a00:	f000 ff3c 	bl	800987c <Error_Handler>
}
 8008a04:	e7f8      	b.n	80089f8 <MX_DMA2D_Init+0x28>
 8008a06:	bf00      	nop
 8008a08:	200045d8 	.word	0x200045d8
 8008a0c:	4002b000 	.word	0x4002b000

08008a10 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8008a10:	6802      	ldr	r2, [r0, #0]
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <HAL_DMA2D_MspInit+0x28>)
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d000      	beq.n	8008a1a <HAL_DMA2D_MspInit+0xa>
 8008a18:	4770      	bx	lr
{
 8008a1a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008a1c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8008a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a22:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8008a32:	b002      	add	sp, #8
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	4002b000 	.word	0x4002b000

08008a3c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a40:	2300      	movs	r3, #0
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8008a4c:	4b25      	ldr	r3, [pc, #148]	; (8008ae4 <HAL_FMC_MspInit+0xa8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	b10b      	cbz	r3, 8008a56 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008a52:	b007      	add	sp, #28
 8008a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8008a56:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <HAL_FMC_MspInit+0xa8>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008a5c:	4b22      	ldr	r3, [pc, #136]	; (8008ae8 <HAL_FMC_MspInit+0xac>)
 8008a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8008a70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008a74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a76:	2602      	movs	r6, #2
 8008a78:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a7a:	2503      	movs	r5, #3
 8008a7c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a7e:	240c      	movs	r4, #12
 8008a80:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a82:	a901      	add	r1, sp, #4
 8008a84:	4819      	ldr	r0, [pc, #100]	; (8008aec <HAL_FMC_MspInit+0xb0>)
 8008a86:	f7fa fb7d 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8008a8a:	f248 1311 	movw	r3, #33041	; 0x8111
 8008a8e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a90:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a92:	2700      	movs	r7, #0
 8008a94:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a96:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a98:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a9a:	a901      	add	r1, sp, #4
 8008a9c:	4814      	ldr	r0, [pc, #80]	; (8008af0 <HAL_FMC_MspInit+0xb4>)
 8008a9e:	f7fa fb71 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8008aa2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008aa6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aaa:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aac:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008aae:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ab0:	a901      	add	r1, sp, #4
 8008ab2:	4810      	ldr	r0, [pc, #64]	; (8008af4 <HAL_FMC_MspInit+0xb8>)
 8008ab4:	f7fa fb66 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008ab8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008abc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008abe:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ac2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ac4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ac6:	a901      	add	r1, sp, #4
 8008ac8:	480b      	ldr	r0, [pc, #44]	; (8008af8 <HAL_FMC_MspInit+0xbc>)
 8008aca:	f7fa fb5b 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8008ace:	232c      	movs	r3, #44	; 0x2c
 8008ad0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ad2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ad8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008ada:	a901      	add	r1, sp, #4
 8008adc:	4807      	ldr	r0, [pc, #28]	; (8008afc <HAL_FMC_MspInit+0xc0>)
 8008ade:	f7fa fb51 	bl	8003184 <HAL_GPIO_Init>
 8008ae2:	e7b6      	b.n	8008a52 <HAL_FMC_MspInit+0x16>
 8008ae4:	20004254 	.word	0x20004254
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	40021000 	.word	0x40021000
 8008af0:	40021800 	.word	0x40021800
 8008af4:	40020c00 	.word	0x40020c00
 8008af8:	40021400 	.word	0x40021400
 8008afc:	40021c00 	.word	0x40021c00

08008b00 <MX_FMC_Init>:
{
 8008b00:	b500      	push	{lr}
 8008b02:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008b04:	4810      	ldr	r0, [pc, #64]	; (8008b48 <MX_FMC_Init+0x48>)
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <MX_FMC_Init+0x4c>)
 8008b08:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008b0e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8008b10:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008b12:	2310      	movs	r3, #16
 8008b14:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8008b16:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008b1c:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008b1e:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008b20:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008b22:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8008b24:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008b26:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008b28:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8008b2a:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008b2c:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 8008b2e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 8008b30:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008b32:	a901      	add	r1, sp, #4
 8008b34:	f7fb fff2 	bl	8004b1c <HAL_SDRAM_Init>
 8008b38:	b910      	cbnz	r0, 8008b40 <MX_FMC_Init+0x40>
}
 8008b3a:	b009      	add	sp, #36	; 0x24
 8008b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8008b40:	f000 fe9c 	bl	800987c <Error_Handler>
}
 8008b44:	e7f9      	b.n	8008b3a <MX_FMC_Init+0x3a>
 8008b46:	bf00      	nop
 8008b48:	20004618 	.word	0x20004618
 8008b4c:	a0000140 	.word	0xa0000140

08008b50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008b50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008b52:	f7ff ff73 	bl	8008a3c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008b56:	bd08      	pop	{r3, pc}

08008b58 <StartDrawUI>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDrawUI */
void StartDrawUI(void const * argument)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32

  /* USER CODE BEGIN StartDrawUI */
	xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008b5c:	4c23      	ldr	r4, [pc, #140]	; (8008bec <StartDrawUI+0x94>)
 8008b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	f7fe fd4e 	bl	8007604 <xQueueSemaphoreTake>
	initLCD(GPS);
 8008b68:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <StartDrawUI+0x98>)
 8008b6a:	f103 0210 	add.w	r2, r3, #16
 8008b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b76:	f7f8 ff4b 	bl	8001a10 <initLCD>
	xSemaphoreGive(RxDataMutexHandle);
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	f7fe fc61 	bl	8007448 <xQueueGenericSend>

	/* Infinite loop */
	for (;;) {
		xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008b86:	4f19      	ldr	r7, [pc, #100]	; (8008bec <StartDrawUI+0x94>)
 8008b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b8c:	6838      	ldr	r0, [r7, #0]
 8008b8e:	f7fe fd39 	bl	8007604 <xQueueSemaphoreTake>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008b92:	4e18      	ldr	r6, [pc, #96]	; (8008bf4 <StartDrawUI+0x9c>)
 8008b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b98:	6830      	ldr	r0, [r6, #0]
 8008b9a:	f7fe fd33 	bl	8007604 <xQueueSemaphoreTake>
		drawMainScreen(GPS, IMU, Misc);
 8008b9e:	4c14      	ldr	r4, [pc, #80]	; (8008bf0 <StartDrawUI+0x98>)
 8008ba0:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <StartDrawUI+0xa0>)
 8008ba2:	881a      	ldrh	r2, [r3, #0]
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8008baa:	f88d 301e 	strb.w	r3, [sp, #30]
 8008bae:	4b13      	ldr	r3, [pc, #76]	; (8008bfc <StartDrawUI+0xa4>)
 8008bb0:	ad03      	add	r5, sp, #12
 8008bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bb4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008bb8:	f104 0310 	add.w	r3, r4, #16
 8008bbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008bc8:	f7f9 f832 	bl	8001c30 <drawMainScreen>
		xSemaphoreGive(RxDataMutexHandle);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6838      	ldr	r0, [r7, #0]
 8008bd4:	f7fe fc38 	bl	8007448 <xQueueGenericSend>
		xSemaphoreGive(SwDataMutexHandle);
 8008bd8:	2300      	movs	r3, #0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6830      	ldr	r0, [r6, #0]
 8008be0:	f7fe fc32 	bl	8007448 <xQueueGenericSend>
		osDelay(20);
 8008be4:	2014      	movs	r0, #20
 8008be6:	f7fe faca 	bl	800717e <osDelay>
 8008bea:	e7cc      	b.n	8008b86 <StartDrawUI+0x2e>
 8008bec:	200046ec 	.word	0x200046ec
 8008bf0:	20004324 	.word	0x20004324
 8008bf4:	20004718 	.word	0x20004718
 8008bf8:	2000438c 	.word	0x2000438c
 8008bfc:	200042dc 	.word	0x200042dc

08008c00 <StartADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADC */
void StartADC(void const * argument)
{
 8008c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartADC */

	//	//Init ADC for DMA
	if (HAL_ADC_Start(&hadc3) == HAL_OK) {
 8008c02:	481b      	ldr	r0, [pc, #108]	; (8008c70 <StartADC+0x70>)
 8008c04:	f7f9 fb16 	bl	8002234 <HAL_ADC_Start>
 8008c08:	b9c8      	cbnz	r0, 8008c3e <StartADC+0x3e>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t *) adcArray, 4);
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	4919      	ldr	r1, [pc, #100]	; (8008c74 <StartADC+0x74>)
 8008c0e:	4818      	ldr	r0, [pc, #96]	; (8008c70 <StartADC+0x70>)
 8008c10:	f7f9 fba2 	bl	8002358 <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim1);
 8008c14:	4818      	ldr	r0, [pc, #96]	; (8008c78 <StartADC+0x78>)
 8008c16:	f7fc fc8b 	bl	8005530 <HAL_TIM_Base_Start>
 8008c1a:	e010      	b.n	8008c3e <StartADC+0x3e>
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
			Misc.airmode = 1;
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <StartADC+0x7c>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	709a      	strb	r2, [r3, #2]
 8008c22:	e01b      	b.n	8008c5c <StartADC+0x5c>

		//SW2 - Kill switch
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
			Misc.kill = 1;
		} else {
			Misc.kill = 0;
 8008c24:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <StartADC+0x7c>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	705a      	strb	r2, [r3, #1]
		}
		xSemaphoreGive(SwDataMutexHandle);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4813      	ldr	r0, [pc, #76]	; (8008c80 <StartADC+0x80>)
 8008c32:	6800      	ldr	r0, [r0, #0]
 8008c34:	f7fe fc08 	bl	8007448 <xQueueGenericSend>
		osDelay(50);
 8008c38:	2032      	movs	r0, #50	; 0x32
 8008c3a:	f7fe faa0 	bl	800717e <osDelay>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <StartADC+0x80>)
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f7fe fcdd 	bl	8007604 <xQueueSemaphoreTake>
		if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET) {
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	480d      	ldr	r0, [pc, #52]	; (8008c84 <StartADC+0x84>)
 8008c4e:	f7fa fb89 	bl	8003364 <HAL_GPIO_ReadPin>
 8008c52:	2801      	cmp	r0, #1
 8008c54:	d0e2      	beq.n	8008c1c <StartADC+0x1c>
			Misc.airmode = 0;
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <StartADC+0x7c>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	709a      	strb	r2, [r3, #2]
		if (HAL_GPIO_ReadPin(GPIOI, SW2_Pin) == GPIO_PIN_RESET) {
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4809      	ldr	r0, [pc, #36]	; (8008c84 <StartADC+0x84>)
 8008c60:	f7fa fb80 	bl	8003364 <HAL_GPIO_ReadPin>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d1dd      	bne.n	8008c24 <StartADC+0x24>
			Misc.kill = 1;
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <StartADC+0x7c>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	705a      	strb	r2, [r3, #1]
 8008c6e:	e7dc      	b.n	8008c2a <StartADC+0x2a>
 8008c70:	2000456c 	.word	0x2000456c
 8008c74:	200046d0 	.word	0x200046d0
 8008c78:	20004868 	.word	0x20004868
 8008c7c:	2000438c 	.word	0x2000438c
 8008c80:	20004718 	.word	0x20004718
 8008c84:	40022000 	.word	0x40022000

08008c88 <NRF24_init>:
void unpackAckPayload(struct GPS_str GPS, struct IMU_str IMU);

void unpackAckPayload_0();
void unpackAckPayload_1();

void NRF24_init(struct GPS_str GPS) {
 8008c88:	b084      	sub	sp, #16
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	b09c      	sub	sp, #112	; 0x70
 8008c8e:	ac1e      	add	r4, sp, #120	; 0x78
 8008c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DWT_Init(); //For uS delays
 8008c94:	f7f9 f9a4 	bl	8001fe0 <DWT_Init>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, none);
 8008c98:	4c17      	ldr	r4, [pc, #92]	; (8008cf8 <NRF24_init+0x70>)
 8008c9a:	2260      	movs	r2, #96	; 0x60
 8008c9c:	1d21      	adds	r1, r4, #4
 8008c9e:	4668      	mov	r0, sp
 8008ca0:	f001 f872 	bl	8009d88 <memcpy>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008cae:	4813      	ldr	r0, [pc, #76]	; (8008cfc <NRF24_init+0x74>)
 8008cb0:	f7f8 fdc6 	bl	8001840 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 8008cb4:	4c12      	ldr	r4, [pc, #72]	; (8008d00 <NRF24_init+0x78>)
 8008cb6:	2270      	movs	r2, #112	; 0x70
 8008cb8:	f104 0110 	add.w	r1, r4, #16
 8008cbc:	4668      	mov	r0, sp
 8008cbe:	f001 f863 	bl	8009d88 <memcpy>
 8008cc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008cc6:	f7f8 fe91 	bl	80019ec <nrf24_DebugUART_Init>

	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 8008cca:	f7f8 fbec 	bl	80014a6 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <NRF24_init+0x7c>)
 8008cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd4:	f7f8 fbf0 	bl	80014b8 <NRF24_openWritingPipe>

	//printRadioSettings();

	for (int i = 0; i < 31; ++i) {
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e005      	b.n	8008ce8 <NRF24_init+0x60>
		TxData[i] = 0;
 8008cdc:	2200      	movs	r2, #0
 8008cde:	490a      	ldr	r1, [pc, #40]	; (8008d08 <NRF24_init+0x80>)
 8008ce0:	54ca      	strb	r2, [r1, r3]
		AckPayload[i] = 0;
 8008ce2:	490a      	ldr	r1, [pc, #40]	; (8008d0c <NRF24_init+0x84>)
 8008ce4:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 31; ++i) {
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	2b1e      	cmp	r3, #30
 8008cea:	ddf7      	ble.n	8008cdc <NRF24_init+0x54>
	GPS.Year = 0;
	GPS.fix_quality = 0;
	GPS.sattelite_no = 0;


}
 8008cec:	b01c      	add	sp, #112	; 0x70
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf2:	b004      	add	sp, #16
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	2000466c 	.word	0x2000466c
 8008cfc:	40020000 	.word	0x40020000
 8008d00:	200048a8 	.word	0x200048a8
 8008d04:	20000050 	.word	0x20000050
 8008d08:	200046f4 	.word	0x200046f4
 8008d0c:	2000464c 	.word	0x2000464c

08008d10 <packData>:
		return 0;
	}

}

void packData(uint32_t * array, bool airmode, bool kill) {
 8008d10:	b410      	push	{r4}

	//L Joystick X
	//First byte = first byte of A0
	TxData[0] = *array;
 8008d12:	6804      	ldr	r4, [r0, #0]
 8008d14:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <packData+0x5c>)
 8008d16:	701c      	strb	r4, [r3, #0]
	//Second bytes = last byte of A0
	TxData[1] = *array >> 8;
 8008d18:	6804      	ldr	r4, [r0, #0]
 8008d1a:	0a24      	lsrs	r4, r4, #8
 8008d1c:	705c      	strb	r4, [r3, #1]

	array++;

	TxData[2] = *array;
 8008d1e:	6844      	ldr	r4, [r0, #4]
 8008d20:	709c      	strb	r4, [r3, #2]
	TxData[3] = *array >> 8;
 8008d22:	0a24      	lsrs	r4, r4, #8
 8008d24:	70dc      	strb	r4, [r3, #3]

	array++;

	TxData[4] = *array;
 8008d26:	6884      	ldr	r4, [r0, #8]
 8008d28:	711c      	strb	r4, [r3, #4]
	TxData[5] = *array >> 8;
 8008d2a:	0a24      	lsrs	r4, r4, #8
 8008d2c:	715c      	strb	r4, [r3, #5]

	array++;

	TxData[6] = *array;
 8008d2e:	68c0      	ldr	r0, [r0, #12]
 8008d30:	7198      	strb	r0, [r3, #6]
	TxData[7] = *array >> 8;
 8008d32:	0a00      	lsrs	r0, r0, #8
 8008d34:	71d8      	strb	r0, [r3, #7]

	//Air mode bit
	if (airmode) {
 8008d36:	b169      	cbz	r1, 8008d54 <packData+0x44>
		TxData[8] |= 1 << 0;
 8008d38:	4619      	mov	r1, r3
 8008d3a:	7a1b      	ldrb	r3, [r3, #8]
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	720b      	strb	r3, [r1, #8]
	} else {
		TxData[8] &= ~(1 << 0);
	}

	//Kill switch
	if (kill) {
 8008d42:	b96a      	cbnz	r2, 8008d60 <packData+0x50>

		TxData[8] |= 1 << 1;
	} else {
		TxData[8] &= ~(1 << 1);
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <packData+0x5c>)
 8008d46:	7a13      	ldrb	r3, [r2, #8]
 8008d48:	f023 0302 	bic.w	r3, r3, #2
 8008d4c:	7213      	strb	r3, [r2, #8]
	//	TxData[12] = roll_i_tx >> 8;
	//
	//	TxData[13] = roll_d_tx;
	//	TxData[14] = roll_d_tx >> 8;

}
 8008d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d52:	4770      	bx	lr
		TxData[8] &= ~(1 << 0);
 8008d54:	4905      	ldr	r1, [pc, #20]	; (8008d6c <packData+0x5c>)
 8008d56:	7a0b      	ldrb	r3, [r1, #8]
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	720b      	strb	r3, [r1, #8]
 8008d5e:	e7f0      	b.n	8008d42 <packData+0x32>
		TxData[8] |= 1 << 1;
 8008d60:	4a02      	ldr	r2, [pc, #8]	; (8008d6c <packData+0x5c>)
 8008d62:	7a13      	ldrb	r3, [r2, #8]
 8008d64:	f043 0302 	orr.w	r3, r3, #2
 8008d68:	7213      	strb	r3, [r2, #8]
 8008d6a:	e7f0      	b.n	8008d4e <packData+0x3e>
 8008d6c:	200046f4 	.word	0x200046f4

08008d70 <unpackAckPayload_0>:

void unpackAckPayload_0() {
 8008d70:	b410      	push	{r4}

	IMU.batteryLevel = (AckPayload[1] & 0xFF) | (AckPayload[2] << 8);
 8008d72:	481f      	ldr	r0, [pc, #124]	; (8008df0 <unpackAckPayload_0+0x80>)
 8008d74:	7843      	ldrb	r3, [r0, #1]
 8008d76:	7882      	ldrb	r2, [r0, #2]
 8008d78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d7c:	491d      	ldr	r1, [pc, #116]	; (8008df4 <unpackAckPayload_0+0x84>)
 8008d7e:	800b      	strh	r3, [r1, #0]

	int16_t roll_rx = (AckPayload[3] & 0xFF) | (AckPayload[4] << 8);
 8008d80:	78c2      	ldrb	r2, [r0, #3]
 8008d82:	7903      	ldrb	r3, [r0, #4]
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	b21b      	sxth	r3, r3
 8008d88:	431a      	orrs	r2, r3
	IMU.roll = roll_rx / 100;
 8008d8a:	4c1b      	ldr	r4, [pc, #108]	; (8008df8 <unpackAckPayload_0+0x88>)
 8008d8c:	fb84 c302 	smull	ip, r3, r4, r2
 8008d90:	17d2      	asrs	r2, r2, #31
 8008d92:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8008d96:	b212      	sxth	r2, r2
 8008d98:	ee07 2a90 	vmov	s15, r2
 8008d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008da0:	edc1 7a01 	vstr	s15, [r1, #4]

	int16_t pitch_rx = (AckPayload[5] & 0xFF) | (AckPayload[6] << 8);
 8008da4:	7942      	ldrb	r2, [r0, #5]
 8008da6:	7983      	ldrb	r3, [r0, #6]
 8008da8:	021b      	lsls	r3, r3, #8
 8008daa:	b21b      	sxth	r3, r3
 8008dac:	431a      	orrs	r2, r3
	IMU.pitch = pitch_rx / 100;
 8008dae:	fb84 c302 	smull	ip, r3, r4, r2
 8008db2:	17d2      	asrs	r2, r2, #31
 8008db4:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8008db8:	b212      	sxth	r2, r2
 8008dba:	ee07 2a90 	vmov	s15, r2
 8008dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc2:	edc1 7a02 	vstr	s15, [r1, #8]

	int16_t yaw_rx_ = (AckPayload[7] & 0xFF) | (AckPayload[8] << 8);
 8008dc6:	79c3      	ldrb	r3, [r0, #7]
 8008dc8:	7a02      	ldrb	r2, [r0, #8]
 8008dca:	0212      	lsls	r2, r2, #8
 8008dcc:	b212      	sxth	r2, r2
 8008dce:	4313      	orrs	r3, r2
	IMU.yaw = yaw_rx_ / 100;
 8008dd0:	fb84 2403 	smull	r2, r4, r4, r3
 8008dd4:	17db      	asrs	r3, r3, #31
 8008dd6:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de4:	edc1 7a03 	vstr	s15, [r1, #12]
}
 8008de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	2000464c 	.word	0x2000464c
 8008df4:	200042dc 	.word	0x200042dc
 8008df8:	51eb851f 	.word	0x51eb851f

08008dfc <unpackAckPayload_1>:

void unpackAckPayload_1() {
 8008dfc:	b082      	sub	sp, #8

	//All the 1 byte values
	GPS.sattelite_no = AckPayload[1];
 8008dfe:	4b26      	ldr	r3, [pc, #152]	; (8008e98 <unpackAckPayload_1+0x9c>)
 8008e00:	7859      	ldrb	r1, [r3, #1]
 8008e02:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <unpackAckPayload_1+0xa0>)
 8008e04:	7611      	strb	r1, [r2, #24]
	GPS.fix_quality = AckPayload[2];
 8008e06:	7899      	ldrb	r1, [r3, #2]
 8008e08:	7651      	strb	r1, [r2, #25]
	GPS.Day = AckPayload[3];
 8008e0a:	78d9      	ldrb	r1, [r3, #3]
 8008e0c:	7011      	strb	r1, [r2, #0]
	GPS.Month = AckPayload[4];
 8008e0e:	7919      	ldrb	r1, [r3, #4]
 8008e10:	7051      	strb	r1, [r2, #1]
	GPS.Year = AckPayload[5];
 8008e12:	7959      	ldrb	r1, [r3, #5]
 8008e14:	7091      	strb	r1, [r2, #2]
	GPS.Hours = AckPayload[6];
 8008e16:	7999      	ldrb	r1, [r3, #6]
 8008e18:	70d1      	strb	r1, [r2, #3]
	GPS.Minutes = AckPayload[7];
 8008e1a:	79d9      	ldrb	r1, [r3, #7]
 8008e1c:	7111      	strb	r1, [r2, #4]
	GPS.Seconds = AckPayload[8];
 8008e1e:	7a19      	ldrb	r1, [r3, #8]
 8008e20:	7151      	strb	r1, [r2, #5]
	//GPS speed
	uint16_t speed_rx = (AckPayload[9] & 0xFF) | (AckPayload[10] << 8);
 8008e22:	7a59      	ldrb	r1, [r3, #9]
 8008e24:	7a98      	ldrb	r0, [r3, #10]
 8008e26:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	GPS.Speed = speed_rx / 100;
 8008e2a:	481d      	ldr	r0, [pc, #116]	; (8008ea0 <unpackAckPayload_1+0xa4>)
 8008e2c:	fba0 0101 	umull	r0, r1, r0, r1
 8008e30:	0949      	lsrs	r1, r1, #5
 8008e32:	ee07 1a90 	vmov	s15, r1
 8008e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e3a:	edc2 7a04 	vstr	s15, [r2, #16]

	//Longitude, latitude and altitude
	unsigned char temp[4] = {0,0,0,0};

	temp[0] = AckPayload[11];
 8008e3e:	7ad9      	ldrb	r1, [r3, #11]
 8008e40:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[12];
 8008e44:	7b19      	ldrb	r1, [r3, #12]
 8008e46:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[13];
 8008e4a:	7b59      	ldrb	r1, [r3, #13]
 8008e4c:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[14];
 8008e50:	7b99      	ldrb	r1, [r3, #14]
 8008e52:	f88d 1007 	strb.w	r1, [sp, #7]

	memcpy(&GPS.Longitude, temp, sizeof(float));
 8008e56:	9901      	ldr	r1, [sp, #4]
 8008e58:	6091      	str	r1, [r2, #8]

	temp[0] = AckPayload[15];
 8008e5a:	7bd9      	ldrb	r1, [r3, #15]
 8008e5c:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[16];
 8008e60:	7c19      	ldrb	r1, [r3, #16]
 8008e62:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[17];
 8008e66:	7c59      	ldrb	r1, [r3, #17]
 8008e68:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[18];
 8008e6c:	7c99      	ldrb	r1, [r3, #18]
 8008e6e:	f88d 1007 	strb.w	r1, [sp, #7]

	memcpy(&GPS.Latitude, temp, sizeof(float));
 8008e72:	9901      	ldr	r1, [sp, #4]
 8008e74:	60d1      	str	r1, [r2, #12]

	temp[0] = AckPayload[19];
 8008e76:	7cd9      	ldrb	r1, [r3, #19]
 8008e78:	f88d 1004 	strb.w	r1, [sp, #4]
	temp[1] = AckPayload[20];
 8008e7c:	7d19      	ldrb	r1, [r3, #20]
 8008e7e:	f88d 1005 	strb.w	r1, [sp, #5]
	temp[2] = AckPayload[21];
 8008e82:	7d59      	ldrb	r1, [r3, #21]
 8008e84:	f88d 1006 	strb.w	r1, [sp, #6]
	temp[3] = AckPayload[22];
 8008e88:	7d9b      	ldrb	r3, [r3, #22]
 8008e8a:	f88d 3007 	strb.w	r3, [sp, #7]

	memcpy(&GPS.Altitude, temp, sizeof(float));
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	6153      	str	r3, [r2, #20]
}
 8008e92:	b002      	add	sp, #8
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	2000464c 	.word	0x2000464c
 8008e9c:	20004324 	.word	0x20004324
 8008ea0:	51eb851f 	.word	0x51eb851f

08008ea4 <sendPayload>:
bool sendPayload() {
 8008ea4:	b538      	push	{r3, r4, r5, lr}
	if (NRF24_write(TxData, 32)) {
 8008ea6:	2120      	movs	r1, #32
 8008ea8:	480b      	ldr	r0, [pc, #44]	; (8008ed8 <sendPayload+0x34>)
 8008eaa:	f7f8 fc51 	bl	8001750 <NRF24_write>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	b908      	cbnz	r0, 8008eb6 <sendPayload+0x12>
}
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
		NRF24_read(AckPayload, 32);
 8008eb6:	4d09      	ldr	r5, [pc, #36]	; (8008edc <sendPayload+0x38>)
 8008eb8:	2120      	movs	r1, #32
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7f8 fb65 	bl	800158a <NRF24_read>
		switch (AckPayload[0]) {
 8008ec0:	782b      	ldrb	r3, [r5, #0]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d004      	beq.n	8008ed0 <sendPayload+0x2c>
 8008ec6:	2bff      	cmp	r3, #255	; 0xff
 8008ec8:	d1f3      	bne.n	8008eb2 <sendPayload+0xe>
			unpackAckPayload_1();
 8008eca:	f7ff ff97 	bl	8008dfc <unpackAckPayload_1>
			break;
 8008ece:	e7f0      	b.n	8008eb2 <sendPayload+0xe>
			unpackAckPayload_0();
 8008ed0:	f7ff ff4e 	bl	8008d70 <unpackAckPayload_0>
			break;
 8008ed4:	e7ed      	b.n	8008eb2 <sendPayload+0xe>
 8008ed6:	bf00      	nop
 8008ed8:	200046f4 	.word	0x200046f4
 8008edc:	2000464c 	.word	0x2000464c

08008ee0 <startNRFTX>:
{
 8008ee0:	b500      	push	{lr}
 8008ee2:	b085      	sub	sp, #20
	xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008ee4:	4c1c      	ldr	r4, [pc, #112]	; (8008f58 <startNRFTX+0x78>)
 8008ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008eea:	6820      	ldr	r0, [r4, #0]
 8008eec:	f7fe fb8a 	bl	8007604 <xQueueSemaphoreTake>
	NRF24_init(GPS);
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <startNRFTX+0x7c>)
 8008ef2:	f103 0210 	add.w	r2, r3, #16
 8008ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ef8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008efe:	f7ff fec3 	bl	8008c88 <NRF24_init>
	xSemaphoreGive(RxDataMutexHandle);
 8008f02:	2300      	movs	r3, #0
 8008f04:	461a      	mov	r2, r3
 8008f06:	4619      	mov	r1, r3
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	f7fe fa9d 	bl	8007448 <xQueueGenericSend>
		xSemaphoreTake(SwDataMutexHandle, portMAX_DELAY);
 8008f0e:	4d14      	ldr	r5, [pc, #80]	; (8008f60 <startNRFTX+0x80>)
 8008f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f14:	6828      	ldr	r0, [r5, #0]
 8008f16:	f7fe fb75 	bl	8007604 <xQueueSemaphoreTake>
		packData(adcArray, Misc.airmode, Misc.kill);
 8008f1a:	4c12      	ldr	r4, [pc, #72]	; (8008f64 <startNRFTX+0x84>)
 8008f1c:	7862      	ldrb	r2, [r4, #1]
 8008f1e:	78a1      	ldrb	r1, [r4, #2]
 8008f20:	4811      	ldr	r0, [pc, #68]	; (8008f68 <startNRFTX+0x88>)
 8008f22:	f7ff fef5 	bl	8008d10 <packData>
		xSemaphoreGive(SwDataMutexHandle);
 8008f26:	2300      	movs	r3, #0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6828      	ldr	r0, [r5, #0]
 8008f2e:	f7fe fa8b 	bl	8007448 <xQueueGenericSend>
		xSemaphoreTake(RxDataMutexHandle, portMAX_DELAY);
 8008f32:	4d09      	ldr	r5, [pc, #36]	; (8008f58 <startNRFTX+0x78>)
 8008f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f38:	6828      	ldr	r0, [r5, #0]
 8008f3a:	f7fe fb63 	bl	8007604 <xQueueSemaphoreTake>
		Misc.connection = sendPayload();
 8008f3e:	f7ff ffb1 	bl	8008ea4 <sendPayload>
 8008f42:	7020      	strb	r0, [r4, #0]
		xSemaphoreGive(RxDataMutexHandle);
 8008f44:	2300      	movs	r3, #0
 8008f46:	461a      	mov	r2, r3
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6828      	ldr	r0, [r5, #0]
 8008f4c:	f7fe fa7c 	bl	8007448 <xQueueGenericSend>
		osDelay(1);
 8008f50:	2001      	movs	r0, #1
 8008f52:	f7fe f914 	bl	800717e <osDelay>
 8008f56:	e7da      	b.n	8008f0e <startNRFTX+0x2e>
 8008f58:	200046ec 	.word	0x200046ec
 8008f5c:	20004324 	.word	0x20004324
 8008f60:	20004718 	.word	0x20004718
 8008f64:	2000438c 	.word	0x2000438c
 8008f68:	200046d0 	.word	0x200046d0

08008f6c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8008f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6e:	b093      	sub	sp, #76	; 0x4c
  osMutexDef(RxDataMutex);
 8008f70:	2700      	movs	r7, #0
 8008f72:	a812      	add	r0, sp, #72	; 0x48
 8008f74:	f840 7d04 	str.w	r7, [r0, #-4]!
  RxDataMutexHandle = osMutexCreate(osMutex(RxDataMutex));
 8008f78:	f7fe f90a 	bl	8007190 <osMutexCreate>
 8008f7c:	4b18      	ldr	r3, [pc, #96]	; (8008fe0 <MX_FREERTOS_Init+0x74>)
 8008f7e:	6018      	str	r0, [r3, #0]
  osMutexDef(SwDataMutex);
 8008f80:	a812      	add	r0, sp, #72	; 0x48
 8008f82:	f840 7d08 	str.w	r7, [r0, #-8]!
  SwDataMutexHandle = osMutexCreate(osMutex(SwDataMutex));
 8008f86:	f7fe f903 	bl	8007190 <osMutexCreate>
 8008f8a:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <MX_FREERTOS_Init+0x78>)
 8008f8c:	6018      	str	r0, [r3, #0]
  osThreadDef(DrawUI, StartDrawUI, osPriorityNormal, 0, 1024);
 8008f8e:	4c16      	ldr	r4, [pc, #88]	; (8008fe8 <MX_FREERTOS_Init+0x7c>)
 8008f90:	ad0b      	add	r5, sp, #44	; 0x2c
 8008f92:	4626      	mov	r6, r4
 8008f94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	602b      	str	r3, [r5, #0]
  DrawUIHandle = osThreadCreate(osThread(DrawUI), NULL);
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	a80b      	add	r0, sp, #44	; 0x2c
 8008fa0:	f7fe f8d3 	bl	800714a <osThreadCreate>
 8008fa4:	4b11      	ldr	r3, [pc, #68]	; (8008fec <MX_FREERTOS_Init+0x80>)
 8008fa6:	6018      	str	r0, [r3, #0]
  osThreadDef(NRFTX, startNRFTX, osPriorityRealtime, 0, 512);
 8008fa8:	ad06      	add	r5, sp, #24
 8008faa:	f104 0614 	add.w	r6, r4, #20
 8008fae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fb2:	6833      	ldr	r3, [r6, #0]
 8008fb4:	602b      	str	r3, [r5, #0]
  NRFTXHandle = osThreadCreate(osThread(NRFTX), NULL);
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	a806      	add	r0, sp, #24
 8008fba:	f7fe f8c6 	bl	800714a <osThreadCreate>
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <MX_FREERTOS_Init+0x84>)
 8008fc0:	6018      	str	r0, [r3, #0]
  osThreadDef(ADC, StartADC, osPriorityLow, 0, 128);
 8008fc2:	ad01      	add	r5, sp, #4
 8008fc4:	3428      	adds	r4, #40	; 0x28
 8008fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	602b      	str	r3, [r5, #0]
  ADCHandle = osThreadCreate(osThread(ADC), NULL);
 8008fce:	4639      	mov	r1, r7
 8008fd0:	a801      	add	r0, sp, #4
 8008fd2:	f7fe f8ba 	bl	800714a <osThreadCreate>
 8008fd6:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <MX_FREERTOS_Init+0x88>)
 8008fd8:	6018      	str	r0, [r3, #0]
}
 8008fda:	b013      	add	sp, #76	; 0x4c
 8008fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200046ec 	.word	0x200046ec
 8008fe4:	20004718 	.word	0x20004718
 8008fe8:	0800d900 	.word	0x0800d900
 8008fec:	200046e0 	.word	0x200046e0
 8008ff0:	200046e8 	.word	0x200046e8
 8008ff4:	20004714 	.word	0x20004714

08008ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffc:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ffe:	2400      	movs	r4, #0
 8009000:	940b      	str	r4, [sp, #44]	; 0x2c
 8009002:	940c      	str	r4, [sp, #48]	; 0x30
 8009004:	940d      	str	r4, [sp, #52]	; 0x34
 8009006:	940e      	str	r4, [sp, #56]	; 0x38
 8009008:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800900a:	4b5e      	ldr	r3, [pc, #376]	; (8009184 <MX_GPIO_Init+0x18c>)
 800900c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800900e:	f042 0210 	orr.w	r2, r2, #16
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
 8009014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009016:	f002 0210 	and.w	r2, r2, #16
 800901a:	9200      	str	r2, [sp, #0]
 800901c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800901e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009020:	f042 0202 	orr.w	r2, r2, #2
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
 8009026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009028:	f002 0202 	and.w	r2, r2, #2
 800902c:	9201      	str	r2, [sp, #4]
 800902e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	631a      	str	r2, [r3, #48]	; 0x30
 8009038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800903a:	f002 0201 	and.w	r2, r2, #1
 800903e:	9202      	str	r2, [sp, #8]
 8009040:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009048:	631a      	str	r2, [r3, #48]	; 0x30
 800904a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800904c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009050:	9203      	str	r2, [sp, #12]
 8009052:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009056:	f042 0208 	orr.w	r2, r2, #8
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
 800905c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905e:	f002 0208 	and.w	r2, r2, #8
 8009062:	9204      	str	r2, [sp, #16]
 8009064:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800906c:	631a      	str	r2, [r3, #48]	; 0x30
 800906e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009070:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009074:	9205      	str	r2, [sp, #20]
 8009076:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800907a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
 8009080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009082:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009086:	9206      	str	r2, [sp, #24]
 8009088:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800908a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908c:	f042 0220 	orr.w	r2, r2, #32
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
 8009092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009094:	f002 0220 	and.w	r2, r2, #32
 8009098:	9207      	str	r2, [sp, #28]
 800909a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800909c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800909e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
 80090a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80090aa:	9208      	str	r2, [sp, #32]
 80090ac:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b0:	f042 0204 	orr.w	r2, r2, #4
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
 80090b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b8:	f002 0204 	and.w	r2, r2, #4
 80090bc:	9209      	str	r2, [sp, #36]	; 0x24
 80090be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80090c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ce:	930a      	str	r3, [sp, #40]	; 0x28
 80090d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80090d2:	4f2d      	ldr	r7, [pc, #180]	; (8009188 <MX_GPIO_Init+0x190>)
 80090d4:	4622      	mov	r2, r4
 80090d6:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80090da:	4638      	mov	r0, r7
 80090dc:	f7fa f949 	bl	8003372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_A_Pin;
 80090e0:	2310      	movs	r3, #16
 80090e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80090e4:	4e29      	ldr	r6, [pc, #164]	; (800918c <MX_GPIO_Init+0x194>)
 80090e6:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090e8:	2501      	movs	r5, #1
 80090ea:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_A_GPIO_Port, &GPIO_InitStruct);
 80090ec:	a90b      	add	r1, sp, #44	; 0x2c
 80090ee:	4828      	ldr	r0, [pc, #160]	; (8009190 <MX_GPIO_Init+0x198>)
 80090f0:	f7fa f848 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80090f4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80090f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090fa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090fe:	2303      	movs	r3, #3
 8009100:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009102:	a90b      	add	r1, sp, #44	; 0x2c
 8009104:	4638      	mov	r0, r7
 8009106:	f7fa f83d 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ENC3_B_Pin|SW1_Pin|SW2_Pin;
 800910a:	230d      	movs	r3, #13
 800910c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800910e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009110:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009112:	a90b      	add	r1, sp, #44	; 0x2c
 8009114:	481f      	ldr	r0, [pc, #124]	; (8009194 <MX_GPIO_Init+0x19c>)
 8009116:	f7fa f835 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 800911a:	2740      	movs	r7, #64	; 0x40
 800911c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800911e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009120:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 8009122:	a90b      	add	r1, sp, #44	; 0x2c
 8009124:	481c      	ldr	r0, [pc, #112]	; (8009198 <MX_GPIO_Init+0x1a0>)
 8009126:	f7fa f82d 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 800912a:	f04f 0880 	mov.w	r8, #128	; 0x80
 800912e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009132:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009134:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8009136:	a90b      	add	r1, sp, #44	; 0x2c
 8009138:	4818      	ldr	r0, [pc, #96]	; (800919c <MX_GPIO_Init+0x1a4>)
 800913a:	f7fa f823 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC1_A_Pin;
 800913e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009142:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009144:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 8009146:	a90b      	add	r1, sp, #44	; 0x2c
 8009148:	4815      	ldr	r0, [pc, #84]	; (80091a0 <MX_GPIO_Init+0x1a8>)
 800914a:	f7fa f81b 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC3_A_Pin;
 800914e:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009150:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009152:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8009154:	a90b      	add	r1, sp, #44	; 0x2c
 8009156:	4813      	ldr	r0, [pc, #76]	; (80091a4 <MX_GPIO_Init+0x1ac>)
 8009158:	f7fa f814 	bl	8003184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800915c:	4622      	mov	r2, r4
 800915e:	2105      	movs	r1, #5
 8009160:	200a      	movs	r0, #10
 8009162:	f7f9 fb8b 	bl	800287c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8009166:	200a      	movs	r0, #10
 8009168:	f7f9 fbba 	bl	80028e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800916c:	4622      	mov	r2, r4
 800916e:	2105      	movs	r1, #5
 8009170:	2017      	movs	r0, #23
 8009172:	f7f9 fb83 	bl	800287c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009176:	2017      	movs	r0, #23
 8009178:	f7f9 fbb2 	bl	80028e0 <HAL_NVIC_EnableIRQ>

}
 800917c:	b010      	add	sp, #64	; 0x40
 800917e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009182:	bf00      	nop
 8009184:	40023800 	.word	0x40023800
 8009188:	40020000 	.word	0x40020000
 800918c:	10110000 	.word	0x10110000
 8009190:	40020400 	.word	0x40020400
 8009194:	40022000 	.word	0x40022000
 8009198:	40020800 	.word	0x40020800
 800919c:	40021800 	.word	0x40021800
 80091a0:	40021400 	.word	0x40021400
 80091a4:	40021c00 	.word	0x40021c00

080091a8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80091a8:	b510      	push	{r4, lr}
 80091aa:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80091ac:	2434      	movs	r4, #52	; 0x34
 80091ae:	4622      	mov	r2, r4
 80091b0:	2100      	movs	r1, #0
 80091b2:	eb0d 0004 	add.w	r0, sp, r4
 80091b6:	f000 fdf2 	bl	8009d9e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80091ba:	4622      	mov	r2, r4
 80091bc:	2100      	movs	r1, #0
 80091be:	4668      	mov	r0, sp
 80091c0:	f000 fded 	bl	8009d9e <memset>

  hltdc.Instance = LTDC;
 80091c4:	4833      	ldr	r0, [pc, #204]	; (8009294 <MX_LTDC_Init+0xec>)
 80091c6:	4b34      	ldr	r3, [pc, #208]	; (8009298 <MX_LTDC_Init+0xf0>)
 80091c8:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80091ce:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80091d0:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80091d2:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 80091d4:	2207      	movs	r2, #7
 80091d6:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 80091d8:	2203      	movs	r2, #3
 80091da:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80091dc:	220e      	movs	r2, #14
 80091de:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80091e0:	2205      	movs	r2, #5
 80091e2:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80091e4:	f240 228e 	movw	r2, #654	; 0x28e
 80091e8:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80091ea:	f240 12e5 	movw	r2, #485	; 0x1e5
 80091ee:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80091f0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80091f4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80091f6:	f240 12e7 	movw	r2, #487	; 0x1e7
 80091fa:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80091fc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009200:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009204:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009208:	f7fa fd24 	bl	8003c54 <HAL_LTDC_Init>
 800920c:	2800      	cmp	r0, #0
 800920e:	d138      	bne.n	8009282 <MX_LTDC_Init+0xda>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8009210:	2200      	movs	r2, #0
 8009212:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8009214:	920e      	str	r2, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8009216:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8009218:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800921a:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800921c:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800921e:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009224:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009226:	2305      	movs	r3, #5
 8009228:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800922a:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800922c:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800922e:	9218      	str	r2, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009230:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8009234:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8009238:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800923c:	a90d      	add	r1, sp, #52	; 0x34
 800923e:	4815      	ldr	r0, [pc, #84]	; (8009294 <MX_LTDC_Init+0xec>)
 8009240:	f7fa fdf2 	bl	8003e28 <HAL_LTDC_ConfigLayer>
 8009244:	bb00      	cbnz	r0, 8009288 <MX_LTDC_Init+0xe0>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800924a:	9301      	str	r3, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 800924c:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 800924e:	9303      	str	r3, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009250:	9304      	str	r3, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8009252:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8009254:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800925a:	9207      	str	r2, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800925c:	2205      	movs	r2, #5
 800925e:	9208      	str	r2, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009260:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009264:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009266:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800926a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800926e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009272:	2201      	movs	r2, #1
 8009274:	4669      	mov	r1, sp
 8009276:	4807      	ldr	r0, [pc, #28]	; (8009294 <MX_LTDC_Init+0xec>)
 8009278:	f7fa fdd6 	bl	8003e28 <HAL_LTDC_ConfigLayer>
 800927c:	b938      	cbnz	r0, 800928e <MX_LTDC_Init+0xe6>
  {
    Error_Handler();
  }

}
 800927e:	b01a      	add	sp, #104	; 0x68
 8009280:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009282:	f000 fafb 	bl	800987c <Error_Handler>
 8009286:	e7c3      	b.n	8009210 <MX_LTDC_Init+0x68>
    Error_Handler();
 8009288:	f000 faf8 	bl	800987c <Error_Handler>
 800928c:	e7db      	b.n	8009246 <MX_LTDC_Init+0x9e>
    Error_Handler();
 800928e:	f000 faf5 	bl	800987c <Error_Handler>
}
 8009292:	e7f4      	b.n	800927e <MX_LTDC_Init+0xd6>
 8009294:	2000471c 	.word	0x2000471c
 8009298:	40016800 	.word	0x40016800

0800929c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929e:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092a0:	2300      	movs	r3, #0
 80092a2:	9309      	str	r3, [sp, #36]	; 0x24
 80092a4:	930a      	str	r3, [sp, #40]	; 0x28
 80092a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a8:	930c      	str	r3, [sp, #48]	; 0x30
 80092aa:	930d      	str	r3, [sp, #52]	; 0x34
  if(ltdcHandle->Instance==LTDC)
 80092ac:	6802      	ldr	r2, [r0, #0]
 80092ae:	4b62      	ldr	r3, [pc, #392]	; (8009438 <HAL_LTDC_MspInit+0x19c>)
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d001      	beq.n	80092b8 <HAL_LTDC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80092b4:	b00f      	add	sp, #60	; 0x3c
 80092b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80092b8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80092bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80092c2:	645a      	str	r2, [r3, #68]	; 0x44
 80092c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092c6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80092ca:	9200      	str	r2, [sp, #0]
 80092cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d0:	f042 0202 	orr.w	r2, r2, #2
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
 80092d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d8:	f002 0202 	and.w	r2, r2, #2
 80092dc:	9201      	str	r2, [sp, #4]
 80092de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
 80092e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80092ee:	9202      	str	r2, [sp, #8]
 80092f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	631a      	str	r2, [r3, #48]	; 0x30
 80092fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092fc:	f002 0201 	and.w	r2, r2, #1
 8009300:	9203      	str	r2, [sp, #12]
 8009302:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
 800930c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800930e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009312:	9204      	str	r2, [sp, #16]
 8009314:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8009316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800931c:	631a      	str	r2, [r3, #48]	; 0x30
 800931e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009320:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009324:	9205      	str	r2, [sp, #20]
 8009326:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800932a:	f042 0208 	orr.w	r2, r2, #8
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
 8009330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009332:	f002 0208 	and.w	r2, r2, #8
 8009336:	9206      	str	r2, [sp, #24]
 8009338:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800933a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800933c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
 8009342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009344:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009348:	9207      	str	r2, [sp, #28]
 800934a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800934c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800935a:	9308      	str	r3, [sp, #32]
 800935c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800935e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009362:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009364:	2502      	movs	r5, #2
 8009366:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009368:	260e      	movs	r6, #14
 800936a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800936c:	a909      	add	r1, sp, #36	; 0x24
 800936e:	4833      	ldr	r0, [pc, #204]	; (800943c <HAL_LTDC_MspInit+0x1a0>)
 8009370:	f7f9 ff08 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8009374:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800937a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937c:	2400      	movs	r4, #0
 800937e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009380:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009382:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009384:	4f2e      	ldr	r7, [pc, #184]	; (8009440 <HAL_LTDC_MspInit+0x1a4>)
 8009386:	a909      	add	r1, sp, #36	; 0x24
 8009388:	4638      	mov	r0, r7
 800938a:	f7f9 fefb 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800938e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009392:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009394:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009396:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009398:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800939a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800939c:	a909      	add	r1, sp, #36	; 0x24
 800939e:	4829      	ldr	r0, [pc, #164]	; (8009444 <HAL_LTDC_MspInit+0x1a8>)
 80093a0:	f7f9 fef0 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9 
 80093a4:	f244 6330 	movw	r3, #17968	; 0x4630
 80093a8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093aa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ac:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ae:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093b0:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80093b2:	a909      	add	r1, sp, #36	; 0x24
 80093b4:	4824      	ldr	r0, [pc, #144]	; (8009448 <HAL_LTDC_MspInit+0x1ac>)
 80093b6:	f7f9 fee5 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0;
 80093ba:	2383      	movs	r3, #131	; 0x83
 80093bc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093be:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093c2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093c4:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80093c6:	a909      	add	r1, sp, #36	; 0x24
 80093c8:	4820      	ldr	r0, [pc, #128]	; (800944c <HAL_LTDC_MspInit+0x1b0>)
 80093ca:	f7f9 fedb 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80093ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093d8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80093da:	2309      	movs	r3, #9
 80093dc:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80093de:	a909      	add	r1, sp, #36	; 0x24
 80093e0:	4638      	mov	r0, r7
 80093e2:	f7f9 fecf 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80093e6:	2308      	movs	r3, #8
 80093e8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ea:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ec:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ee:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093f0:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093f2:	a909      	add	r1, sp, #36	; 0x24
 80093f4:	4816      	ldr	r0, [pc, #88]	; (8009450 <HAL_LTDC_MspInit+0x1b4>)
 80093f6:	f7f9 fec5 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80093fa:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80093fe:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009400:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009402:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009404:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009406:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009408:	a909      	add	r1, sp, #36	; 0x24
 800940a:	4812      	ldr	r0, [pc, #72]	; (8009454 <HAL_LTDC_MspInit+0x1b8>)
 800940c:	f7f9 feba 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009410:	2320      	movs	r3, #32
 8009412:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009414:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009416:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009418:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800941a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800941c:	a909      	add	r1, sp, #36	; 0x24
 800941e:	480e      	ldr	r0, [pc, #56]	; (8009458 <HAL_LTDC_MspInit+0x1bc>)
 8009420:	f7f9 feb0 	bl	8003184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 12, 0);
 8009424:	4622      	mov	r2, r4
 8009426:	210c      	movs	r1, #12
 8009428:	2058      	movs	r0, #88	; 0x58
 800942a:	f7f9 fa27 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800942e:	2058      	movs	r0, #88	; 0x58
 8009430:	f7f9 fa56 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 8009434:	e73e      	b.n	80092b4 <HAL_LTDC_MspInit+0x18>
 8009436:	bf00      	nop
 8009438:	40016800 	.word	0x40016800
 800943c:	40020400 	.word	0x40020400
 8009440:	40021800 	.word	0x40021800
 8009444:	40020000 	.word	0x40020000
 8009448:	40022000 	.word	0x40022000
 800944c:	40022800 	.word	0x40022800
 8009450:	40020c00 	.word	0x40020c00
 8009454:	40021c00 	.word	0x40021c00
 8009458:	40022400 	.word	0x40022400

0800945c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009460:	2230      	movs	r2, #48	; 0x30
 8009462:	2100      	movs	r1, #0
 8009464:	a828      	add	r0, sp, #160	; 0xa0
 8009466:	f000 fc9a 	bl	8009d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800946a:	2400      	movs	r4, #0
 800946c:	9423      	str	r4, [sp, #140]	; 0x8c
 800946e:	9424      	str	r4, [sp, #144]	; 0x90
 8009470:	9425      	str	r4, [sp, #148]	; 0x94
 8009472:	9426      	str	r4, [sp, #152]	; 0x98
 8009474:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009476:	2284      	movs	r2, #132	; 0x84
 8009478:	4621      	mov	r1, r4
 800947a:	a802      	add	r0, sp, #8
 800947c:	f000 fc8f 	bl	8009d9e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009480:	4b26      	ldr	r3, [pc, #152]	; (800951c <SystemClock_Config+0xc0>)
 8009482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009488:	641a      	str	r2, [r3, #64]	; 0x40
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009494:	4b22      	ldr	r3, [pc, #136]	; (8009520 <SystemClock_Config+0xc4>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094a8:	2601      	movs	r6, #1
 80094aa:	9628      	str	r6, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094b0:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094b2:	2502      	movs	r5, #2
 80094b4:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ba:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80094bc:	2319      	movs	r3, #25
 80094be:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80094c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80094c4:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094c6:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80094c8:	2309      	movs	r3, #9
 80094ca:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094cc:	a828      	add	r0, sp, #160	; 0xa0
 80094ce:	f7fa fd1b 	bl	8003f08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80094d2:	f7fa fcdb 	bl	8003e8c <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094d6:	230f      	movs	r3, #15
 80094d8:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094da:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094dc:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80094de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80094e2:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80094e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094e8:	9327      	str	r3, [sp, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80094ea:	2107      	movs	r1, #7
 80094ec:	a823      	add	r0, sp, #140	; 0x8c
 80094ee:	f7fa ff49 	bl	8004384 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 80094f2:	2348      	movs	r3, #72	; 0x48
 80094f4:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80094f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80094fa:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80094fc:	2305      	movs	r3, #5
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009500:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8009502:	2303      	movs	r3, #3
 8009504:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009506:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800950c:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800950e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009510:	a802      	add	r0, sp, #8
 8009512:	f7fb f82d 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8009516:	b034      	add	sp, #208	; 0xd0
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800
 8009520:	40007000 	.word	0x40007000

08009524 <main>:
{
 8009524:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800952a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800952e:	4b29      	ldr	r3, [pc, #164]	; (80095d4 <main+0xb0>)
 8009530:	2100      	movs	r1, #0
 8009532:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800953a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800953e:	695a      	ldr	r2, [r3, #20]
 8009540:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009544:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800954a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800954e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009552:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8009556:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800955a:	f3c4 314e 	ubfx	r1, r4, #13, #15
 800955e:	e00f      	b.n	8009580 <main+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8009560:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009562:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009566:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 800956a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800956e:	4819      	ldr	r0, [pc, #100]	; (80095d4 <main+0xb0>)
 8009570:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8009574:	1e53      	subs	r3, r2, #1
 8009576:	2a00      	cmp	r2, #0
 8009578:	d1f2      	bne.n	8009560 <main+0x3c>
    } while(sets-- != 0U);
 800957a:	1e4b      	subs	r3, r1, #1
 800957c:	b119      	cbz	r1, 8009586 <main+0x62>
 800957e:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009580:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8009584:	e7ed      	b.n	8009562 <main+0x3e>
 8009586:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800958a:	6943      	ldr	r3, [r0, #20]
 800958c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009590:	6143      	str	r3, [r0, #20]
 8009592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009596:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800959a:	f7f8 fd4d 	bl	8002038 <HAL_Init>
  SystemClock_Config();
 800959e:	f7ff ff5d 	bl	800945c <SystemClock_Config>
  MX_GPIO_Init();
 80095a2:	f7ff fd29 	bl	8008ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 80095a6:	f7ff f9f9 	bl	800899c <MX_DMA_Init>
  MX_SPI2_Init();
 80095aa:	f000 f969 	bl	8009880 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80095ae:	f000 fb15 	bl	8009bdc <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80095b2:	f7ff f8f7 	bl	80087a4 <MX_ADC3_Init>
  MX_CRC_Init();
 80095b6:	f7ff f9c5 	bl	8008944 <MX_CRC_Init>
  MX_DMA2D_Init();
 80095ba:	f7ff fa09 	bl	80089d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80095be:	f7ff fa9f 	bl	8008b00 <MX_FMC_Init>
  MX_LTDC_Init();
 80095c2:	f7ff fdf1 	bl	80091a8 <MX_LTDC_Init>
  MX_TIM1_Init();
 80095c6:	f000 faab 	bl	8009b20 <MX_TIM1_Init>
  MX_FREERTOS_Init();
 80095ca:	f7ff fccf 	bl	8008f6c <MX_FREERTOS_Init>
  osKernelStart();
 80095ce:	f7fd fdb7 	bl	8007140 <osKernelStart>
 80095d2:	e7fe      	b.n	80095d2 <main+0xae>
 80095d4:	e000ed00 	.word	0xe000ed00

080095d8 <read_rotary_1>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_1() {
 80095d8:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_1 <<= 2;
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <read_rotary_1+0x70>)
 80095dc:	7813      	ldrb	r3, [r2, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 80095e2:	2180      	movs	r1, #128	; 0x80
 80095e4:	4819      	ldr	r0, [pc, #100]	; (800964c <read_rotary_1+0x74>)
 80095e6:	f7f9 febd 	bl	8003364 <HAL_GPIO_ReadPin>
 80095ea:	2801      	cmp	r0, #1
 80095ec:	d01a      	beq.n	8009624 <read_rotary_1+0x4c>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 80095ee:	2140      	movs	r1, #64	; 0x40
 80095f0:	4817      	ldr	r0, [pc, #92]	; (8009650 <read_rotary_1+0x78>)
 80095f2:	f7f9 feb7 	bl	8003364 <HAL_GPIO_ReadPin>
 80095f6:	2801      	cmp	r0, #1
 80095f8:	d01a      	beq.n	8009630 <read_rotary_1+0x58>
	prevNextCode_1 &= 0x0f;
 80095fa:	4913      	ldr	r1, [pc, #76]	; (8009648 <read_rotary_1+0x70>)
 80095fc:	780b      	ldrb	r3, [r1, #0]
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_1] ) {
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <read_rotary_1+0x7c>)
 8009606:	5698      	ldrsb	r0, [r3, r2]
 8009608:	b158      	cbz	r0, 8009622 <read_rotary_1+0x4a>
		store_1 <<= 4;
 800960a:	4913      	ldr	r1, [pc, #76]	; (8009658 <read_rotary_1+0x80>)
 800960c:	880b      	ldrh	r3, [r1, #0]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	b29b      	uxth	r3, r3
		store_1 |= prevNextCode_1;
 8009612:	4313      	orrs	r3, r2
 8009614:	800b      	strh	r3, [r1, #0]
 8009616:	b2db      	uxtb	r3, r3

		if ((store_1&0xff)==0x2b) return -1;
 8009618:	2b2b      	cmp	r3, #43	; 0x2b
 800961a:	d011      	beq.n	8009640 <read_rotary_1+0x68>
		if ((store_1&0xff)==0x17) return 1;
 800961c:	2b17      	cmp	r3, #23
 800961e:	d00d      	beq.n	800963c <read_rotary_1+0x64>
	}
	return 0;
 8009620:	2000      	movs	r0, #0
}
 8009622:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOF, ENC1_A_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x02;
 8009624:	4a08      	ldr	r2, [pc, #32]	; (8009648 <read_rotary_1+0x70>)
 8009626:	7813      	ldrb	r3, [r2, #0]
 8009628:	f043 0302 	orr.w	r3, r3, #2
 800962c:	7013      	strb	r3, [r2, #0]
 800962e:	e7de      	b.n	80095ee <read_rotary_1+0x16>
	if (HAL_GPIO_ReadPin(GPIOC, ENC1_B_Pin) == GPIO_PIN_SET) prevNextCode_1 |= 0x01;
 8009630:	4a05      	ldr	r2, [pc, #20]	; (8009648 <read_rotary_1+0x70>)
 8009632:	7813      	ldrb	r3, [r2, #0]
 8009634:	f043 0301 	orr.w	r3, r3, #1
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e7de      	b.n	80095fa <read_rotary_1+0x22>
		if ((store_1&0xff)==0x17) return 1;
 800963c:	2001      	movs	r0, #1
 800963e:	e7f0      	b.n	8009622 <read_rotary_1+0x4a>
		if ((store_1&0xff)==0x2b) return -1;
 8009640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009644:	e7ed      	b.n	8009622 <read_rotary_1+0x4a>
 8009646:	bf00      	nop
 8009648:	20004258 	.word	0x20004258
 800964c:	40021400 	.word	0x40021400
 8009650:	40020800 	.word	0x40020800
 8009654:	08010c64 	.word	0x08010c64
 8009658:	20004268 	.word	0x20004268

0800965c <read_rotary_2>:


// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_2() {
 800965c:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_2 <<= 2;
 800965e:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <read_rotary_2+0x70>)
 8009660:	7813      	ldrb	r3, [r2, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 8009666:	2110      	movs	r1, #16
 8009668:	4819      	ldr	r0, [pc, #100]	; (80096d0 <read_rotary_2+0x74>)
 800966a:	f7f9 fe7b 	bl	8003364 <HAL_GPIO_ReadPin>
 800966e:	2801      	cmp	r0, #1
 8009670:	d01a      	beq.n	80096a8 <read_rotary_2+0x4c>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 8009672:	2180      	movs	r1, #128	; 0x80
 8009674:	4817      	ldr	r0, [pc, #92]	; (80096d4 <read_rotary_2+0x78>)
 8009676:	f7f9 fe75 	bl	8003364 <HAL_GPIO_ReadPin>
 800967a:	2801      	cmp	r0, #1
 800967c:	d01a      	beq.n	80096b4 <read_rotary_2+0x58>
	prevNextCode_2 &= 0x0f;
 800967e:	4913      	ldr	r1, [pc, #76]	; (80096cc <read_rotary_2+0x70>)
 8009680:	780b      	ldrb	r3, [r1, #0]
 8009682:	f003 020f 	and.w	r2, r3, #15
 8009686:	700a      	strb	r2, [r1, #0]

	// If valid then store_2 as 16 bit data.
	if  (rot_enc_table[prevNextCode_2] ) {
 8009688:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <read_rotary_2+0x7c>)
 800968a:	5698      	ldrsb	r0, [r3, r2]
 800968c:	b158      	cbz	r0, 80096a6 <read_rotary_2+0x4a>
		store_2 <<= 4;
 800968e:	4913      	ldr	r1, [pc, #76]	; (80096dc <read_rotary_2+0x80>)
 8009690:	880b      	ldrh	r3, [r1, #0]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	b29b      	uxth	r3, r3
		store_2 |= prevNextCode_2;
 8009696:	4313      	orrs	r3, r2
 8009698:	800b      	strh	r3, [r1, #0]
 800969a:	b2db      	uxtb	r3, r3

		if ((store_2&0xff)==0x2b) return -1;
 800969c:	2b2b      	cmp	r3, #43	; 0x2b
 800969e:	d011      	beq.n	80096c4 <read_rotary_2+0x68>
		if ((store_2&0xff)==0x17) return 1;
 80096a0:	2b17      	cmp	r3, #23
 80096a2:	d00d      	beq.n	80096c0 <read_rotary_2+0x64>
	}
	return 0;
 80096a4:	2000      	movs	r0, #0
}
 80096a6:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOB, ENC2_A_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x02;
 80096a8:	4a08      	ldr	r2, [pc, #32]	; (80096cc <read_rotary_2+0x70>)
 80096aa:	7813      	ldrb	r3, [r2, #0]
 80096ac:	f043 0302 	orr.w	r3, r3, #2
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e7de      	b.n	8009672 <read_rotary_2+0x16>
	if (HAL_GPIO_ReadPin(GPIOG, ENC2_B_Pin) == GPIO_PIN_SET) prevNextCode_2 |= 0x01;
 80096b4:	4a05      	ldr	r2, [pc, #20]	; (80096cc <read_rotary_2+0x70>)
 80096b6:	7813      	ldrb	r3, [r2, #0]
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	7013      	strb	r3, [r2, #0]
 80096be:	e7de      	b.n	800967e <read_rotary_2+0x22>
		if ((store_2&0xff)==0x17) return 1;
 80096c0:	2001      	movs	r0, #1
 80096c2:	e7f0      	b.n	80096a6 <read_rotary_2+0x4a>
		if ((store_2&0xff)==0x2b) return -1;
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c8:	e7ed      	b.n	80096a6 <read_rotary_2+0x4a>
 80096ca:	bf00      	nop
 80096cc:	20004259 	.word	0x20004259
 80096d0:	40020400 	.word	0x40020400
 80096d4:	40021800 	.word	0x40021800
 80096d8:	08010c74 	.word	0x08010c74
 80096dc:	2000426a 	.word	0x2000426a

080096e0 <read_rotary_3>:




// A vald CW or  CCW move returns 1, invalid returns 0.
int8_t read_rotary_3() {
 80096e0:	b508      	push	{r3, lr}
	static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};

	prevNextCode_3 <<= 2;
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <read_rotary_3+0x70>)
 80096e4:	7813      	ldrb	r3, [r2, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 80096ea:	2140      	movs	r1, #64	; 0x40
 80096ec:	4819      	ldr	r0, [pc, #100]	; (8009754 <read_rotary_3+0x74>)
 80096ee:	f7f9 fe39 	bl	8003364 <HAL_GPIO_ReadPin>
 80096f2:	2801      	cmp	r0, #1
 80096f4:	d01a      	beq.n	800972c <read_rotary_3+0x4c>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 80096f6:	2108      	movs	r1, #8
 80096f8:	4817      	ldr	r0, [pc, #92]	; (8009758 <read_rotary_3+0x78>)
 80096fa:	f7f9 fe33 	bl	8003364 <HAL_GPIO_ReadPin>
 80096fe:	2801      	cmp	r0, #1
 8009700:	d01a      	beq.n	8009738 <read_rotary_3+0x58>
	prevNextCode_3 &= 0x0f;
 8009702:	4913      	ldr	r1, [pc, #76]	; (8009750 <read_rotary_3+0x70>)
 8009704:	780b      	ldrb	r3, [r1, #0]
 8009706:	f003 020f 	and.w	r2, r3, #15
 800970a:	700a      	strb	r2, [r1, #0]

	// If valid then store_1 as 16 bit data.
	if  (rot_enc_table[prevNextCode_3] ) {
 800970c:	4b13      	ldr	r3, [pc, #76]	; (800975c <read_rotary_3+0x7c>)
 800970e:	5698      	ldrsb	r0, [r3, r2]
 8009710:	b158      	cbz	r0, 800972a <read_rotary_3+0x4a>
		store_3 <<= 4;
 8009712:	4913      	ldr	r1, [pc, #76]	; (8009760 <read_rotary_3+0x80>)
 8009714:	880b      	ldrh	r3, [r1, #0]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	b29b      	uxth	r3, r3
		store_3 |= prevNextCode_3;
 800971a:	4313      	orrs	r3, r2
 800971c:	800b      	strh	r3, [r1, #0]
 800971e:	b2db      	uxtb	r3, r3

		if ((store_3&0xff)==0x2b) return -1;
 8009720:	2b2b      	cmp	r3, #43	; 0x2b
 8009722:	d011      	beq.n	8009748 <read_rotary_3+0x68>
		if ((store_3&0xff)==0x17) return 1;
 8009724:	2b17      	cmp	r3, #23
 8009726:	d00d      	beq.n	8009744 <read_rotary_3+0x64>
	}
	return 0;
 8009728:	2000      	movs	r0, #0
}
 800972a:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOH, ENC3_A_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x02;
 800972c:	4a08      	ldr	r2, [pc, #32]	; (8009750 <read_rotary_3+0x70>)
 800972e:	7813      	ldrb	r3, [r2, #0]
 8009730:	f043 0302 	orr.w	r3, r3, #2
 8009734:	7013      	strb	r3, [r2, #0]
 8009736:	e7de      	b.n	80096f6 <read_rotary_3+0x16>
	if (HAL_GPIO_ReadPin(GPIOI, ENC3_B_Pin) == GPIO_PIN_SET) prevNextCode_3 |= 0x01;
 8009738:	4a05      	ldr	r2, [pc, #20]	; (8009750 <read_rotary_3+0x70>)
 800973a:	7813      	ldrb	r3, [r2, #0]
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	7013      	strb	r3, [r2, #0]
 8009742:	e7de      	b.n	8009702 <read_rotary_3+0x22>
		if ((store_3&0xff)==0x17) return 1;
 8009744:	2001      	movs	r0, #1
 8009746:	e7f0      	b.n	800972a <read_rotary_3+0x4a>
		if ((store_3&0xff)==0x2b) return -1;
 8009748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800974c:	e7ed      	b.n	800972a <read_rotary_3+0x4a>
 800974e:	bf00      	nop
 8009750:	2000425a 	.word	0x2000425a
 8009754:	40021c00 	.word	0x40021c00
 8009758:	40022000 	.word	0x40022000
 800975c:	08010c84 	.word	0x08010c84
 8009760:	2000426c 	.word	0x2000426c

08009764 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009764:	b510      	push	{r4, lr}
 8009766:	4604      	mov	r4, r0
	if (GPIO_Pin == GPIO_PIN_7) {
 8009768:	2880      	cmp	r0, #128	; 0x80
 800976a:	d004      	beq.n	8009776 <HAL_GPIO_EXTI_Callback+0x12>
	if (GPIO_Pin == GPIO_PIN_4) {
 800976c:	2c10      	cmp	r4, #16
 800976e:	d025      	beq.n	80097bc <HAL_GPIO_EXTI_Callback+0x58>
	if (GPIO_Pin == GPIO_PIN_6) {
 8009770:	2c40      	cmp	r4, #64	; 0x40
 8009772:	d046      	beq.n	8009802 <HAL_GPIO_EXTI_Callback+0x9e>
}
 8009774:	bd10      	pop	{r4, pc}
		if(read_rotary_1()){
 8009776:	f7ff ff2f 	bl	80095d8 <read_rotary_1>
 800977a:	2800      	cmp	r0, #0
 800977c:	d0f6      	beq.n	800976c <HAL_GPIO_EXTI_Callback+0x8>
			if ( prevNextCode_1==0x0b) {
 800977e:	4b32      	ldr	r3, [pc, #200]	; (8009848 <HAL_GPIO_EXTI_Callback+0xe4>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b0b      	cmp	r3, #11
 8009784:	d00b      	beq.n	800979e <HAL_GPIO_EXTI_Callback+0x3a>
			if ( prevNextCode_1==0x07) {
 8009786:	2b07      	cmp	r3, #7
 8009788:	d1f0      	bne.n	800976c <HAL_GPIO_EXTI_Callback+0x8>
				roll_d += 0.5;
 800978a:	4b30      	ldr	r3, [pc, #192]	; (800984c <HAL_GPIO_EXTI_Callback+0xe8>)
 800978c:	edd3 7a00 	vldr	s15, [r3]
 8009790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009798:	edc3 7a00 	vstr	s15, [r3]
 800979c:	e7e6      	b.n	800976c <HAL_GPIO_EXTI_Callback+0x8>
				if (roll_d > 0) {
 800979e:	4a2b      	ldr	r2, [pc, #172]	; (800984c <HAL_GPIO_EXTI_Callback+0xe8>)
 80097a0:	edd2 7a00 	vldr	s15, [r2]
 80097a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ac:	ddeb      	ble.n	8009786 <HAL_GPIO_EXTI_Callback+0x22>
					roll_d -= 0.5;
 80097ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097b6:	edc2 7a00 	vstr	s15, [r2]
 80097ba:	e7e4      	b.n	8009786 <HAL_GPIO_EXTI_Callback+0x22>
		if(read_rotary_2()){
 80097bc:	f7ff ff4e 	bl	800965c <read_rotary_2>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d0d5      	beq.n	8009770 <HAL_GPIO_EXTI_Callback+0xc>
			if ( prevNextCode_2==0x0b) {
 80097c4:	4b22      	ldr	r3, [pc, #136]	; (8009850 <HAL_GPIO_EXTI_Callback+0xec>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b0b      	cmp	r3, #11
 80097ca:	d00b      	beq.n	80097e4 <HAL_GPIO_EXTI_Callback+0x80>
			if ( prevNextCode_2==0x07) {
 80097cc:	2b07      	cmp	r3, #7
 80097ce:	d1cf      	bne.n	8009770 <HAL_GPIO_EXTI_Callback+0xc>
				roll_i += 0.5;
 80097d0:	4b20      	ldr	r3, [pc, #128]	; (8009854 <HAL_GPIO_EXTI_Callback+0xf0>)
 80097d2:	edd3 7a00 	vldr	s15, [r3]
 80097d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097de:	edc3 7a00 	vstr	s15, [r3]
 80097e2:	e7c5      	b.n	8009770 <HAL_GPIO_EXTI_Callback+0xc>
				if (roll_i > 0) {
 80097e4:	4a1b      	ldr	r2, [pc, #108]	; (8009854 <HAL_GPIO_EXTI_Callback+0xf0>)
 80097e6:	edd2 7a00 	vldr	s15, [r2]
 80097ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f2:	ddeb      	ble.n	80097cc <HAL_GPIO_EXTI_Callback+0x68>
					roll_i -= 0.5;
 80097f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097fc:	edc2 7a00 	vstr	s15, [r2]
 8009800:	e7e4      	b.n	80097cc <HAL_GPIO_EXTI_Callback+0x68>
		if(read_rotary_3()){
 8009802:	f7ff ff6d 	bl	80096e0 <read_rotary_3>
 8009806:	2800      	cmp	r0, #0
 8009808:	d0b4      	beq.n	8009774 <HAL_GPIO_EXTI_Callback+0x10>
			if ( prevNextCode_3==0x0b) {
 800980a:	4b13      	ldr	r3, [pc, #76]	; (8009858 <HAL_GPIO_EXTI_Callback+0xf4>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b0b      	cmp	r3, #11
 8009810:	d00b      	beq.n	800982a <HAL_GPIO_EXTI_Callback+0xc6>
			if ( prevNextCode_3==0x07) {
 8009812:	2b07      	cmp	r3, #7
 8009814:	d1ae      	bne.n	8009774 <HAL_GPIO_EXTI_Callback+0x10>
				roll_p += 0.5;
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <HAL_GPIO_EXTI_Callback+0xf8>)
 8009818:	edd3 7a00 	vldr	s15, [r3]
 800981c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009824:	edc3 7a00 	vstr	s15, [r3]
}
 8009828:	e7a4      	b.n	8009774 <HAL_GPIO_EXTI_Callback+0x10>
				if (roll_p > 0) {
 800982a:	4a0c      	ldr	r2, [pc, #48]	; (800985c <HAL_GPIO_EXTI_Callback+0xf8>)
 800982c:	edd2 7a00 	vldr	s15, [r2]
 8009830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	ddeb      	ble.n	8009812 <HAL_GPIO_EXTI_Callback+0xae>
					roll_p -= 0.5;
 800983a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800983e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009842:	edc2 7a00 	vstr	s15, [r2]
 8009846:	e7e4      	b.n	8009812 <HAL_GPIO_EXTI_Callback+0xae>
 8009848:	20004258 	.word	0x20004258
 800984c:	2000425c 	.word	0x2000425c
 8009850:	20004259 	.word	0x20004259
 8009854:	20004260 	.word	0x20004260
 8009858:	2000425a 	.word	0x2000425a
 800985c:	20004264 	.word	0x20004264

08009860 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{


}
 8009860:	4770      	bx	lr
	...

08009864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8009866:	6802      	ldr	r2, [r0, #0]
 8009868:	4b03      	ldr	r3, [pc, #12]	; (8009878 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800986a:	429a      	cmp	r2, r3
 800986c:	d000      	beq.n	8009870 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800986e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8009870:	f7f8 fbf4 	bl	800205c <HAL_IncTick>
}
 8009874:	e7fb      	b.n	800986e <HAL_TIM_PeriodElapsedCallback+0xa>
 8009876:	bf00      	nop
 8009878:	40002000 	.word	0x40002000

0800987c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800987c:	4770      	bx	lr
	...

08009880 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009880:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8009882:	4810      	ldr	r0, [pc, #64]	; (80098c4 <MX_SPI2_Init+0x44>)
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <MX_SPI2_Init+0x48>)
 8009886:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009888:	f44f 7382 	mov.w	r3, #260	; 0x104
 800988c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800988e:	2300      	movs	r3, #0
 8009890:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009892:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009896:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009898:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800989a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800989c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098a0:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80098a2:	2220      	movs	r2, #32
 80098a4:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80098a6:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80098a8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098aa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80098ac:	2207      	movs	r2, #7
 80098ae:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80098b0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80098b2:	2308      	movs	r3, #8
 80098b4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80098b6:	f7fb fa8c 	bl	8004dd2 <HAL_SPI_Init>
 80098ba:	b900      	cbnz	r0, 80098be <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 80098bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80098be:	f7ff ffdd 	bl	800987c <Error_Handler>
}
 80098c2:	e7fb      	b.n	80098bc <MX_SPI2_Init+0x3c>
 80098c4:	200047c4 	.word	0x200047c4
 80098c8:	40003800 	.word	0x40003800

080098cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d0:	2300      	movs	r3, #0
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	9305      	str	r3, [sp, #20]
 80098d8:	9306      	str	r3, [sp, #24]
 80098da:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80098dc:	6802      	ldr	r2, [r0, #0]
 80098de:	4b1d      	ldr	r3, [pc, #116]	; (8009954 <HAL_SPI_MspInit+0x88>)
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d001      	beq.n	80098e8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80098e4:	b008      	add	sp, #32
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80098e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80098ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098f2:	641a      	str	r2, [r3, #64]	; 0x40
 80098f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80098fa:	9200      	str	r2, [sp, #0]
 80098fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80098fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009904:	631a      	str	r2, [r3, #48]	; 0x30
 8009906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009908:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800990c:	9201      	str	r2, [sp, #4]
 800990e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009912:	f042 0202 	orr.w	r2, r2, #2
 8009916:	631a      	str	r2, [r3, #48]	; 0x30
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	9302      	str	r3, [sp, #8]
 8009920:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009922:	2402      	movs	r4, #2
 8009924:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009926:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009928:	2603      	movs	r6, #3
 800992a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800992c:	2505      	movs	r5, #5
 800992e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009930:	a903      	add	r1, sp, #12
 8009932:	4809      	ldr	r0, [pc, #36]	; (8009958 <HAL_SPI_MspInit+0x8c>)
 8009934:	f7f9 fc26 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009938:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800993c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800993e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009940:	2300      	movs	r3, #0
 8009942:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009944:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009946:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009948:	a903      	add	r1, sp, #12
 800994a:	4804      	ldr	r0, [pc, #16]	; (800995c <HAL_SPI_MspInit+0x90>)
 800994c:	f7f9 fc1a 	bl	8003184 <HAL_GPIO_Init>
}
 8009950:	e7c8      	b.n	80098e4 <HAL_SPI_MspInit+0x18>
 8009952:	bf00      	nop
 8009954:	40003800 	.word	0x40003800
 8009958:	40022000 	.word	0x40022000
 800995c:	40020400 	.word	0x40020400

08009960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009960:	b500      	push	{lr}
 8009962:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <HAL_MspInit+0x3c>)
 8009966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009968:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800996c:	641a      	str	r2, [r3, #64]	; 0x40
 800996e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009970:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009974:	9200      	str	r2, [sp, #0]
 8009976:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800997a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800997e:	645a      	str	r2, [r3, #68]	; 0x44
 8009980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800998a:	2200      	movs	r2, #0
 800998c:	210f      	movs	r1, #15
 800998e:	f06f 0001 	mvn.w	r0, #1
 8009992:	f7f8 ff73 	bl	800287c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009996:	b003      	add	sp, #12
 8009998:	f85d fb04 	ldr.w	pc, [sp], #4
 800999c:	40023800 	.word	0x40023800

080099a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80099a0:	b500      	push	{lr}
 80099a2:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80099a4:	2200      	movs	r2, #0
 80099a6:	4601      	mov	r1, r0
 80099a8:	202d      	movs	r0, #45	; 0x2d
 80099aa:	f7f8 ff67 	bl	800287c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80099ae:	202d      	movs	r0, #45	; 0x2d
 80099b0:	f7f8 ff96 	bl	80028e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80099b4:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <HAL_InitTick+0x6c>)
 80099b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099bc:	641a      	str	r2, [r3, #64]	; 0x40
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80099c8:	a902      	add	r1, sp, #8
 80099ca:	a803      	add	r0, sp, #12
 80099cc:	f7fa fdb2 	bl	8004534 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80099d0:	f7fa fd90 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 80099d4:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80099d6:	480e      	ldr	r0, [pc, #56]	; (8009a10 <HAL_InitTick+0x70>)
 80099d8:	fba0 2303 	umull	r2, r3, r0, r3
 80099dc:	0c9b      	lsrs	r3, r3, #18
 80099de:	3b01      	subs	r3, #1
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80099e0:	480c      	ldr	r0, [pc, #48]	; (8009a14 <HAL_InitTick+0x74>)
 80099e2:	4a0d      	ldr	r2, [pc, #52]	; (8009a18 <HAL_InitTick+0x78>)
 80099e4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80099e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099ea:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80099ec:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099f2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80099f4:	f7fb ff22 	bl	800583c <HAL_TIM_Base_Init>
 80099f8:	b118      	cbz	r0, 8009a02 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80099fa:	2001      	movs	r0, #1
}
 80099fc:	b009      	add	sp, #36	; 0x24
 80099fe:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim14);
 8009a02:	4804      	ldr	r0, [pc, #16]	; (8009a14 <HAL_InitTick+0x74>)
 8009a04:	f7fb fdac 	bl	8005560 <HAL_TIM_Base_Start_IT>
 8009a08:	e7f8      	b.n	80099fc <HAL_InitTick+0x5c>
 8009a0a:	bf00      	nop
 8009a0c:	40023800 	.word	0x40023800
 8009a10:	431bde83 	.word	0x431bde83
 8009a14:	20004828 	.word	0x20004828
 8009a18:	40002000 	.word	0x40002000

08009a1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009a1c:	4770      	bx	lr

08009a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009a1e:	e7fe      	b.n	8009a1e <HardFault_Handler>

08009a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009a20:	e7fe      	b.n	8009a20 <MemManage_Handler>

08009a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009a22:	e7fe      	b.n	8009a22 <BusFault_Handler>

08009a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009a24:	e7fe      	b.n	8009a24 <UsageFault_Handler>

08009a26 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009a26:	4770      	bx	lr

08009a28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009a2a:	2010      	movs	r0, #16
 8009a2c:	f7f9 fca8 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009a30:	bd08      	pop	{r3, pc}
	...

08009a34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8009a36:	4802      	ldr	r0, [pc, #8]	; (8009a40 <ADC_IRQHandler+0xc>)
 8009a38:	f7f8 fd4e 	bl	80024d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009a3c:	bd08      	pop	{r3, pc}
 8009a3e:	bf00      	nop
 8009a40:	2000456c 	.word	0x2000456c

08009a44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8009a46:	2040      	movs	r0, #64	; 0x40
 8009a48:	f7f9 fc9a 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009a4c:	2080      	movs	r0, #128	; 0x80
 8009a4e:	f7f9 fc97 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009a52:	bd08      	pop	{r3, pc}

08009a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009a56:	4802      	ldr	r0, [pc, #8]	; (8009a60 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8009a58:	f7fb fd9c 	bl	8005594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009a5c:	bd08      	pop	{r3, pc}
 8009a5e:	bf00      	nop
 8009a60:	20004868 	.word	0x20004868

08009a64 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8009a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8009a66:	4802      	ldr	r0, [pc, #8]	; (8009a70 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8009a68:	f7fb fd94 	bl	8005594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8009a6c:	bd08      	pop	{r3, pc}
 8009a6e:	bf00      	nop
 8009a70:	20004828 	.word	0x20004828

08009a74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8009a76:	4802      	ldr	r0, [pc, #8]	; (8009a80 <DMA2_Stream1_IRQHandler+0xc>)
 8009a78:	f7f9 f904 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009a7c:	bd08      	pop	{r3, pc}
 8009a7e:	bf00      	nop
 8009a80:	2000450c 	.word	0x2000450c

08009a84 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009a84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009a86:	4802      	ldr	r0, [pc, #8]	; (8009a90 <LTDC_IRQHandler+0xc>)
 8009a88:	f7fa f961 	bl	8003d4e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009a8c:	bd08      	pop	{r3, pc}
 8009a8e:	bf00      	nop
 8009a90:	2000471c 	.word	0x2000471c

08009a94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009a94:	b508      	push	{r3, lr}
 8009a96:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009a98:	4a0b      	ldr	r2, [pc, #44]	; (8009ac8 <_sbrk+0x34>)
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	b142      	cbz	r2, 8009ab0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8009a9e:	4a0a      	ldr	r2, [pc, #40]	; (8009ac8 <_sbrk+0x34>)
 8009aa0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009aa2:	4403      	add	r3, r0
 8009aa4:	466a      	mov	r2, sp
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d806      	bhi.n	8009ab8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8009aaa:	4a07      	ldr	r2, [pc, #28]	; (8009ac8 <_sbrk+0x34>)
 8009aac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8009aae:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8009ab0:	4a05      	ldr	r2, [pc, #20]	; (8009ac8 <_sbrk+0x34>)
 8009ab2:	4906      	ldr	r1, [pc, #24]	; (8009acc <_sbrk+0x38>)
 8009ab4:	6011      	str	r1, [r2, #0]
 8009ab6:	e7f2      	b.n	8009a9e <_sbrk+0xa>
		errno = ENOMEM;
 8009ab8:	f000 f922 	bl	8009d00 <__errno>
 8009abc:	230c      	movs	r3, #12
 8009abe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac4:	e7f3      	b.n	8009aae <_sbrk+0x1a>
 8009ac6:	bf00      	nop
 8009ac8:	20004270 	.word	0x20004270
 8009acc:	20004930 	.word	0x20004930

08009ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ad0:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009ad2:	4a0f      	ldr	r2, [pc, #60]	; (8009b10 <SystemInit+0x40>)
 8009ad4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009ae0:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <SystemInit+0x44>)
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	f041 0101 	orr.w	r1, r1, #1
 8009ae8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009aea:	2000      	movs	r0, #0
 8009aec:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009aee:	681c      	ldr	r4, [r3, #0]
 8009af0:	4909      	ldr	r1, [pc, #36]	; (8009b18 <SystemInit+0x48>)
 8009af2:	4021      	ands	r1, r4
 8009af4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009af6:	4909      	ldr	r1, [pc, #36]	; (8009b1c <SystemInit+0x4c>)
 8009af8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009b00:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009b02:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b08:	6093      	str	r3, [r2, #8]
#endif
}
 8009b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	e000ed00 	.word	0xe000ed00
 8009b14:	40023800 	.word	0x40023800
 8009b18:	fef6ffff 	.word	0xfef6ffff
 8009b1c:	24003010 	.word	0x24003010

08009b20 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009b20:	b500      	push	{lr}
 8009b22:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b24:	2300      	movs	r3, #0
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	9306      	str	r3, [sp, #24]
 8009b2c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	9302      	str	r3, [sp, #8]
 8009b32:	9303      	str	r3, [sp, #12]

  htim1.Instance = TIM1;
 8009b34:	4817      	ldr	r0, [pc, #92]	; (8009b94 <MX_TIM1_Init+0x74>)
 8009b36:	4a18      	ldr	r2, [pc, #96]	; (8009b98 <MX_TIM1_Init+0x78>)
 8009b38:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 10000-1;
 8009b3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8009b3e:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b40:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 216-1;
 8009b42:	22d7      	movs	r2, #215	; 0xd7
 8009b44:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b46:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8009b48:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b4a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009b4c:	f7fb fe76 	bl	800583c <HAL_TIM_Base_Init>
 8009b50:	b9b8      	cbnz	r0, 8009b82 <MX_TIM1_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b52:	a908      	add	r1, sp, #32
 8009b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b58:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009b5c:	480d      	ldr	r0, [pc, #52]	; (8009b94 <MX_TIM1_Init+0x74>)
 8009b5e:	f7fb fe93 	bl	8005888 <HAL_TIM_ConfigClockSource>
 8009b62:	b988      	cbnz	r0, 8009b88 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009b64:	2320      	movs	r3, #32
 8009b66:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8009b68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b6c:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009b72:	a901      	add	r1, sp, #4
 8009b74:	4807      	ldr	r0, [pc, #28]	; (8009b94 <MX_TIM1_Init+0x74>)
 8009b76:	f7fb fef5 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8009b7a:	b940      	cbnz	r0, 8009b8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
  }

}
 8009b7c:	b009      	add	sp, #36	; 0x24
 8009b7e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009b82:	f7ff fe7b 	bl	800987c <Error_Handler>
 8009b86:	e7e4      	b.n	8009b52 <MX_TIM1_Init+0x32>
    Error_Handler();
 8009b88:	f7ff fe78 	bl	800987c <Error_Handler>
 8009b8c:	e7ea      	b.n	8009b64 <MX_TIM1_Init+0x44>
    Error_Handler();
 8009b8e:	f7ff fe75 	bl	800987c <Error_Handler>
}
 8009b92:	e7f3      	b.n	8009b7c <MX_TIM1_Init+0x5c>
 8009b94:	20004868 	.word	0x20004868
 8009b98:	40010000 	.word	0x40010000

08009b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8009b9c:	6802      	ldr	r2, [r0, #0]
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d000      	beq.n	8009ba6 <HAL_TIM_Base_MspInit+0xa>
 8009ba4:	4770      	bx	lr
{
 8009ba6:	b500      	push	{lr}
 8009ba8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009baa:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8009bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8009bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	2019      	movs	r0, #25
 8009bc6:	f7f8 fe59 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009bca:	2019      	movs	r0, #25
 8009bcc:	f7f8 fe88 	bl	80028e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009bd0:	b003      	add	sp, #12
 8009bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bd6:	bf00      	nop
 8009bd8:	40010000 	.word	0x40010000

08009bdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009bdc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8009bde:	480b      	ldr	r0, [pc, #44]	; (8009c0c <MX_USART1_UART_Init+0x30>)
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <MX_USART1_UART_Init+0x34>)
 8009be2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8009be4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009be8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009bea:	2300      	movs	r3, #0
 8009bec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009bee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009bf0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009bf2:	220c      	movs	r2, #12
 8009bf4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bf6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bf8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009bfa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009bfc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009bfe:	f7fc f956 	bl	8005eae <HAL_UART_Init>
 8009c02:	b900      	cbnz	r0, 8009c06 <MX_USART1_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 8009c04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009c06:	f7ff fe39 	bl	800987c <Error_Handler>
}
 8009c0a:	e7fb      	b.n	8009c04 <MX_USART1_UART_Init+0x28>
 8009c0c:	200048a8 	.word	0x200048a8
 8009c10:	40011000 	.word	0x40011000

08009c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9303      	str	r3, [sp, #12]
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	9305      	str	r3, [sp, #20]
 8009c20:	9306      	str	r3, [sp, #24]
 8009c22:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8009c24:	6802      	ldr	r2, [r0, #0]
 8009c26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c2a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d001      	beq.n	8009c36 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009c32:	b008      	add	sp, #32
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8009c36:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8009c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c3c:	f042 0210 	orr.w	r2, r2, #16
 8009c40:	645a      	str	r2, [r3, #68]	; 0x44
 8009c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c44:	f002 0210 	and.w	r2, r2, #16
 8009c48:	9200      	str	r2, [sp, #0]
 8009c4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c4e:	f042 0202 	orr.w	r2, r2, #2
 8009c52:	631a      	str	r2, [r3, #48]	; 0x30
 8009c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c56:	f002 0202 	and.w	r2, r2, #2
 8009c5a:	9201      	str	r2, [sp, #4]
 8009c5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c60:	f042 0201 	orr.w	r2, r2, #1
 8009c64:	631a      	str	r2, [r3, #48]	; 0x30
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c74:	2602      	movs	r6, #2
 8009c76:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c78:	2503      	movs	r5, #3
 8009c7a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c7c:	2407      	movs	r4, #7
 8009c7e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c80:	a903      	add	r1, sp, #12
 8009c82:	4808      	ldr	r0, [pc, #32]	; (8009ca4 <HAL_UART_MspInit+0x90>)
 8009c84:	f7f9 fa7e 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c8e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c94:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c96:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c98:	a903      	add	r1, sp, #12
 8009c9a:	4803      	ldr	r0, [pc, #12]	; (8009ca8 <HAL_UART_MspInit+0x94>)
 8009c9c:	f7f9 fa72 	bl	8003184 <HAL_GPIO_Init>
}
 8009ca0:	e7c7      	b.n	8009c32 <HAL_UART_MspInit+0x1e>
 8009ca2:	bf00      	nop
 8009ca4:	40020400 	.word	0x40020400
 8009ca8:	40020000 	.word	0x40020000

08009cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009cb2:	e003      	b.n	8009cbc <LoopCopyDataInit>

08009cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009cba:	3104      	adds	r1, #4

08009cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009cbc:	480b      	ldr	r0, [pc, #44]	; (8009cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009cc4:	d3f6      	bcc.n	8009cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8009cc6:	4a0b      	ldr	r2, [pc, #44]	; (8009cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cc8:	e002      	b.n	8009cd0 <LoopFillZerobss>

08009cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ccc:	f842 3b04 	str.w	r3, [r2], #4

08009cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cd4:	d3f9      	bcc.n	8009cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009cd6:	f7ff fefb 	bl	8009ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cda:	f000 f817 	bl	8009d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cde:	f7ff fc21 	bl	8009524 <main>
  bx  lr    
 8009ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009ce4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009ce8:	08010f98 	.word	0x08010f98
  ldr  r0, =_sdata
 8009cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009cf0:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 8009cf4:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 8009cf8:	2000492c 	.word	0x2000492c

08009cfc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009cfc:	e7fe      	b.n	8009cfc <CAN1_RX0_IRQHandler>
	...

08009d00 <__errno>:
 8009d00:	4b01      	ldr	r3, [pc, #4]	; (8009d08 <__errno+0x8>)
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	2000005c 	.word	0x2000005c

08009d0c <__libc_init_array>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	4e0d      	ldr	r6, [pc, #52]	; (8009d44 <__libc_init_array+0x38>)
 8009d10:	4c0d      	ldr	r4, [pc, #52]	; (8009d48 <__libc_init_array+0x3c>)
 8009d12:	1ba4      	subs	r4, r4, r6
 8009d14:	10a4      	asrs	r4, r4, #2
 8009d16:	2500      	movs	r5, #0
 8009d18:	42a5      	cmp	r5, r4
 8009d1a:	d109      	bne.n	8009d30 <__libc_init_array+0x24>
 8009d1c:	4e0b      	ldr	r6, [pc, #44]	; (8009d4c <__libc_init_array+0x40>)
 8009d1e:	4c0c      	ldr	r4, [pc, #48]	; (8009d50 <__libc_init_array+0x44>)
 8009d20:	f003 fde2 	bl	800d8e8 <_init>
 8009d24:	1ba4      	subs	r4, r4, r6
 8009d26:	10a4      	asrs	r4, r4, #2
 8009d28:	2500      	movs	r5, #0
 8009d2a:	42a5      	cmp	r5, r4
 8009d2c:	d105      	bne.n	8009d3a <__libc_init_array+0x2e>
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d34:	4798      	blx	r3
 8009d36:	3501      	adds	r5, #1
 8009d38:	e7ee      	b.n	8009d18 <__libc_init_array+0xc>
 8009d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d3e:	4798      	blx	r3
 8009d40:	3501      	adds	r5, #1
 8009d42:	e7f2      	b.n	8009d2a <__libc_init_array+0x1e>
 8009d44:	08010f90 	.word	0x08010f90
 8009d48:	08010f90 	.word	0x08010f90
 8009d4c:	08010f90 	.word	0x08010f90
 8009d50:	08010f94 	.word	0x08010f94

08009d54 <__itoa>:
 8009d54:	1e93      	subs	r3, r2, #2
 8009d56:	2b22      	cmp	r3, #34	; 0x22
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	d904      	bls.n	8009d68 <__itoa+0x14>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	700b      	strb	r3, [r1, #0]
 8009d62:	461c      	mov	r4, r3
 8009d64:	4620      	mov	r0, r4
 8009d66:	bd10      	pop	{r4, pc}
 8009d68:	2a0a      	cmp	r2, #10
 8009d6a:	d109      	bne.n	8009d80 <__itoa+0x2c>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	da07      	bge.n	8009d80 <__itoa+0x2c>
 8009d70:	232d      	movs	r3, #45	; 0x2d
 8009d72:	700b      	strb	r3, [r1, #0]
 8009d74:	4240      	negs	r0, r0
 8009d76:	2101      	movs	r1, #1
 8009d78:	4421      	add	r1, r4
 8009d7a:	f001 fd5f 	bl	800b83c <__utoa>
 8009d7e:	e7f1      	b.n	8009d64 <__itoa+0x10>
 8009d80:	2100      	movs	r1, #0
 8009d82:	e7f9      	b.n	8009d78 <__itoa+0x24>

08009d84 <itoa>:
 8009d84:	f7ff bfe6 	b.w	8009d54 <__itoa>

08009d88 <memcpy>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	1e43      	subs	r3, r0, #1
 8009d8c:	440a      	add	r2, r1
 8009d8e:	4291      	cmp	r1, r2
 8009d90:	d100      	bne.n	8009d94 <memcpy+0xc>
 8009d92:	bd10      	pop	{r4, pc}
 8009d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d9c:	e7f7      	b.n	8009d8e <memcpy+0x6>

08009d9e <memset>:
 8009d9e:	4402      	add	r2, r0
 8009da0:	4603      	mov	r3, r0
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d100      	bne.n	8009da8 <memset+0xa>
 8009da6:	4770      	bx	lr
 8009da8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dac:	e7f9      	b.n	8009da2 <memset+0x4>

08009dae <__cvt>:
 8009dae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db2:	ec55 4b10 	vmov	r4, r5, d0
 8009db6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4691      	mov	r9, r2
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4622      	movlt	r2, r4
 8009dc8:	462b      	mov	r3, r5
 8009dca:	f027 0720 	bic.w	r7, r7, #32
 8009dce:	bfbb      	ittet	lt
 8009dd0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009dd4:	461d      	movlt	r5, r3
 8009dd6:	2300      	movge	r3, #0
 8009dd8:	232d      	movlt	r3, #45	; 0x2d
 8009dda:	bfb8      	it	lt
 8009ddc:	4614      	movlt	r4, r2
 8009dde:	2f46      	cmp	r7, #70	; 0x46
 8009de0:	700b      	strb	r3, [r1, #0]
 8009de2:	d004      	beq.n	8009dee <__cvt+0x40>
 8009de4:	2f45      	cmp	r7, #69	; 0x45
 8009de6:	d100      	bne.n	8009dea <__cvt+0x3c>
 8009de8:	3601      	adds	r6, #1
 8009dea:	2102      	movs	r1, #2
 8009dec:	e000      	b.n	8009df0 <__cvt+0x42>
 8009dee:	2103      	movs	r1, #3
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	ab02      	add	r3, sp, #8
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4653      	mov	r3, sl
 8009dfc:	ec45 4b10 	vmov	d0, r4, r5
 8009e00:	f001 fde6 	bl	800b9d0 <_dtoa_r>
 8009e04:	2f47      	cmp	r7, #71	; 0x47
 8009e06:	4680      	mov	r8, r0
 8009e08:	d102      	bne.n	8009e10 <__cvt+0x62>
 8009e0a:	f019 0f01 	tst.w	r9, #1
 8009e0e:	d026      	beq.n	8009e5e <__cvt+0xb0>
 8009e10:	2f46      	cmp	r7, #70	; 0x46
 8009e12:	eb08 0906 	add.w	r9, r8, r6
 8009e16:	d111      	bne.n	8009e3c <__cvt+0x8e>
 8009e18:	f898 3000 	ldrb.w	r3, [r8]
 8009e1c:	2b30      	cmp	r3, #48	; 0x30
 8009e1e:	d10a      	bne.n	8009e36 <__cvt+0x88>
 8009e20:	2200      	movs	r2, #0
 8009e22:	2300      	movs	r3, #0
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e2c:	b918      	cbnz	r0, 8009e36 <__cvt+0x88>
 8009e2e:	f1c6 0601 	rsb	r6, r6, #1
 8009e32:	f8ca 6000 	str.w	r6, [sl]
 8009e36:	f8da 3000 	ldr.w	r3, [sl]
 8009e3a:	4499      	add	r9, r3
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4620      	mov	r0, r4
 8009e42:	4629      	mov	r1, r5
 8009e44:	f7f6 fe60 	bl	8000b08 <__aeabi_dcmpeq>
 8009e48:	b938      	cbnz	r0, 8009e5a <__cvt+0xac>
 8009e4a:	2230      	movs	r2, #48	; 0x30
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	454b      	cmp	r3, r9
 8009e50:	d205      	bcs.n	8009e5e <__cvt+0xb0>
 8009e52:	1c59      	adds	r1, r3, #1
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	701a      	strb	r2, [r3, #0]
 8009e58:	e7f8      	b.n	8009e4c <__cvt+0x9e>
 8009e5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e62:	eba3 0308 	sub.w	r3, r3, r8
 8009e66:	4640      	mov	r0, r8
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	b004      	add	sp, #16
 8009e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e70 <__exponent>:
 8009e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e72:	2900      	cmp	r1, #0
 8009e74:	4604      	mov	r4, r0
 8009e76:	bfba      	itte	lt
 8009e78:	4249      	neglt	r1, r1
 8009e7a:	232d      	movlt	r3, #45	; 0x2d
 8009e7c:	232b      	movge	r3, #43	; 0x2b
 8009e7e:	2909      	cmp	r1, #9
 8009e80:	f804 2b02 	strb.w	r2, [r4], #2
 8009e84:	7043      	strb	r3, [r0, #1]
 8009e86:	dd20      	ble.n	8009eca <__exponent+0x5a>
 8009e88:	f10d 0307 	add.w	r3, sp, #7
 8009e8c:	461f      	mov	r7, r3
 8009e8e:	260a      	movs	r6, #10
 8009e90:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e94:	fb06 1115 	mls	r1, r6, r5, r1
 8009e98:	3130      	adds	r1, #48	; 0x30
 8009e9a:	2d09      	cmp	r5, #9
 8009e9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ea0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	dc09      	bgt.n	8009ebc <__exponent+0x4c>
 8009ea8:	3130      	adds	r1, #48	; 0x30
 8009eaa:	3b02      	subs	r3, #2
 8009eac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009eb0:	42bb      	cmp	r3, r7
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	d304      	bcc.n	8009ec0 <__exponent+0x50>
 8009eb6:	1a10      	subs	r0, r2, r0
 8009eb8:	b003      	add	sp, #12
 8009eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	e7e7      	b.n	8009e90 <__exponent+0x20>
 8009ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec4:	f804 2b01 	strb.w	r2, [r4], #1
 8009ec8:	e7f2      	b.n	8009eb0 <__exponent+0x40>
 8009eca:	2330      	movs	r3, #48	; 0x30
 8009ecc:	4419      	add	r1, r3
 8009ece:	7083      	strb	r3, [r0, #2]
 8009ed0:	1d02      	adds	r2, r0, #4
 8009ed2:	70c1      	strb	r1, [r0, #3]
 8009ed4:	e7ef      	b.n	8009eb6 <__exponent+0x46>
	...

08009ed8 <_printf_float>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	b08d      	sub	sp, #52	; 0x34
 8009ede:	460c      	mov	r4, r1
 8009ee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009ee4:	4616      	mov	r6, r2
 8009ee6:	461f      	mov	r7, r3
 8009ee8:	4605      	mov	r5, r0
 8009eea:	f002 fe55 	bl	800cb98 <_localeconv_r>
 8009eee:	6803      	ldr	r3, [r0, #0]
 8009ef0:	9304      	str	r3, [sp, #16]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f6 f98c 	bl	8000210 <strlen>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	930a      	str	r3, [sp, #40]	; 0x28
 8009efc:	f8d8 3000 	ldr.w	r3, [r8]
 8009f00:	9005      	str	r0, [sp, #20]
 8009f02:	3307      	adds	r3, #7
 8009f04:	f023 0307 	bic.w	r3, r3, #7
 8009f08:	f103 0208 	add.w	r2, r3, #8
 8009f0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f10:	f8d4 b000 	ldr.w	fp, [r4]
 8009f14:	f8c8 2000 	str.w	r2, [r8]
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f32:	4ba7      	ldr	r3, [pc, #668]	; (800a1d0 <_printf_float+0x2f8>)
 8009f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f38:	f7f6 fe18 	bl	8000b6c <__aeabi_dcmpun>
 8009f3c:	bb70      	cbnz	r0, 8009f9c <_printf_float+0xc4>
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f42:	4ba3      	ldr	r3, [pc, #652]	; (800a1d0 <_printf_float+0x2f8>)
 8009f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f48:	f7f6 fdf2 	bl	8000b30 <__aeabi_dcmple>
 8009f4c:	bb30      	cbnz	r0, 8009f9c <_printf_float+0xc4>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2300      	movs	r3, #0
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 fde1 	bl	8000b1c <__aeabi_dcmplt>
 8009f5a:	b110      	cbz	r0, 8009f62 <_printf_float+0x8a>
 8009f5c:	232d      	movs	r3, #45	; 0x2d
 8009f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f62:	4a9c      	ldr	r2, [pc, #624]	; (800a1d4 <_printf_float+0x2fc>)
 8009f64:	4b9c      	ldr	r3, [pc, #624]	; (800a1d8 <_printf_float+0x300>)
 8009f66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f6a:	bf8c      	ite	hi
 8009f6c:	4690      	movhi	r8, r2
 8009f6e:	4698      	movls	r8, r3
 8009f70:	2303      	movs	r3, #3
 8009f72:	f02b 0204 	bic.w	r2, fp, #4
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	6022      	str	r2, [r4, #0]
 8009f7a:	f04f 0900 	mov.w	r9, #0
 8009f7e:	9700      	str	r7, [sp, #0]
 8009f80:	4633      	mov	r3, r6
 8009f82:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f84:	4621      	mov	r1, r4
 8009f86:	4628      	mov	r0, r5
 8009f88:	f000 f9e6 	bl	800a358 <_printf_common>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f040 808d 	bne.w	800a0ac <_printf_float+0x1d4>
 8009f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f96:	b00d      	add	sp, #52	; 0x34
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f7f6 fde2 	bl	8000b6c <__aeabi_dcmpun>
 8009fa8:	b110      	cbz	r0, 8009fb0 <_printf_float+0xd8>
 8009faa:	4a8c      	ldr	r2, [pc, #560]	; (800a1dc <_printf_float+0x304>)
 8009fac:	4b8c      	ldr	r3, [pc, #560]	; (800a1e0 <_printf_float+0x308>)
 8009fae:	e7da      	b.n	8009f66 <_printf_float+0x8e>
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	1c4b      	adds	r3, r1, #1
 8009fb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009fb8:	a80a      	add	r0, sp, #40	; 0x28
 8009fba:	d13e      	bne.n	800a03a <_printf_float+0x162>
 8009fbc:	2306      	movs	r3, #6
 8009fbe:	6063      	str	r3, [r4, #4]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009fc6:	ab09      	add	r3, sp, #36	; 0x24
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	ec49 8b10 	vmov	d0, r8, r9
 8009fce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	f8cd a004 	str.w	sl, [sp, #4]
 8009fd8:	6861      	ldr	r1, [r4, #4]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7ff fee7 	bl	8009dae <__cvt>
 8009fe0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009fe4:	2b47      	cmp	r3, #71	; 0x47
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	d109      	bne.n	8009ffe <_printf_float+0x126>
 8009fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fec:	1cd8      	adds	r0, r3, #3
 8009fee:	db02      	blt.n	8009ff6 <_printf_float+0x11e>
 8009ff0:	6862      	ldr	r2, [r4, #4]
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	dd47      	ble.n	800a086 <_printf_float+0x1ae>
 8009ff6:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ffa:	fa5f fa8a 	uxtb.w	sl, sl
 8009ffe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a002:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a004:	d824      	bhi.n	800a050 <_printf_float+0x178>
 800a006:	3901      	subs	r1, #1
 800a008:	4652      	mov	r2, sl
 800a00a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a00e:	9109      	str	r1, [sp, #36]	; 0x24
 800a010:	f7ff ff2e 	bl	8009e70 <__exponent>
 800a014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a016:	1813      	adds	r3, r2, r0
 800a018:	2a01      	cmp	r2, #1
 800a01a:	4681      	mov	r9, r0
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	dc02      	bgt.n	800a026 <_printf_float+0x14e>
 800a020:	6822      	ldr	r2, [r4, #0]
 800a022:	07d1      	lsls	r1, r2, #31
 800a024:	d501      	bpl.n	800a02a <_printf_float+0x152>
 800a026:	3301      	adds	r3, #1
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0a5      	beq.n	8009f7e <_printf_float+0xa6>
 800a032:	232d      	movs	r3, #45	; 0x2d
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a038:	e7a1      	b.n	8009f7e <_printf_float+0xa6>
 800a03a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a03e:	f000 8177 	beq.w	800a330 <_printf_float+0x458>
 800a042:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a046:	d1bb      	bne.n	8009fc0 <_printf_float+0xe8>
 800a048:	2900      	cmp	r1, #0
 800a04a:	d1b9      	bne.n	8009fc0 <_printf_float+0xe8>
 800a04c:	2301      	movs	r3, #1
 800a04e:	e7b6      	b.n	8009fbe <_printf_float+0xe6>
 800a050:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a054:	d119      	bne.n	800a08a <_printf_float+0x1b2>
 800a056:	2900      	cmp	r1, #0
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	dd0c      	ble.n	800a076 <_printf_float+0x19e>
 800a05c:	6121      	str	r1, [r4, #16]
 800a05e:	b913      	cbnz	r3, 800a066 <_printf_float+0x18e>
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	07d2      	lsls	r2, r2, #31
 800a064:	d502      	bpl.n	800a06c <_printf_float+0x194>
 800a066:	3301      	adds	r3, #1
 800a068:	440b      	add	r3, r1
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a070:	f04f 0900 	mov.w	r9, #0
 800a074:	e7d9      	b.n	800a02a <_printf_float+0x152>
 800a076:	b913      	cbnz	r3, 800a07e <_printf_float+0x1a6>
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	07d0      	lsls	r0, r2, #31
 800a07c:	d501      	bpl.n	800a082 <_printf_float+0x1aa>
 800a07e:	3302      	adds	r3, #2
 800a080:	e7f3      	b.n	800a06a <_printf_float+0x192>
 800a082:	2301      	movs	r3, #1
 800a084:	e7f1      	b.n	800a06a <_printf_float+0x192>
 800a086:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a08a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a08e:	4293      	cmp	r3, r2
 800a090:	db05      	blt.n	800a09e <_printf_float+0x1c6>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	6123      	str	r3, [r4, #16]
 800a096:	07d1      	lsls	r1, r2, #31
 800a098:	d5e8      	bpl.n	800a06c <_printf_float+0x194>
 800a09a:	3301      	adds	r3, #1
 800a09c:	e7e5      	b.n	800a06a <_printf_float+0x192>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfd4      	ite	le
 800a0a2:	f1c3 0302 	rsble	r3, r3, #2
 800a0a6:	2301      	movgt	r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	e7de      	b.n	800a06a <_printf_float+0x192>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	055a      	lsls	r2, r3, #21
 800a0b0:	d407      	bmi.n	800a0c2 <_printf_float+0x1ea>
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b8      	blx	r7
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d12b      	bne.n	800a118 <_printf_float+0x240>
 800a0c0:	e767      	b.n	8009f92 <_printf_float+0xba>
 800a0c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a0c6:	f240 80dc 	bls.w	800a282 <_printf_float+0x3aa>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0d2:	f7f6 fd19 	bl	8000b08 <__aeabi_dcmpeq>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d033      	beq.n	800a142 <_printf_float+0x26a>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4a41      	ldr	r2, [pc, #260]	; (800a1e4 <_printf_float+0x30c>)
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f af54 	beq.w	8009f92 <_printf_float+0xba>
 800a0ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	db02      	blt.n	800a0f8 <_printf_float+0x220>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	07d8      	lsls	r0, r3, #31
 800a0f6:	d50f      	bpl.n	800a118 <_printf_float+0x240>
 800a0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f af45 	beq.w	8009f92 <_printf_float+0xba>
 800a108:	f04f 0800 	mov.w	r8, #0
 800a10c:	f104 091a 	add.w	r9, r4, #26
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	3b01      	subs	r3, #1
 800a114:	4543      	cmp	r3, r8
 800a116:	dc09      	bgt.n	800a12c <_printf_float+0x254>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	079b      	lsls	r3, r3, #30
 800a11c:	f100 8103 	bmi.w	800a326 <_printf_float+0x44e>
 800a120:	68e0      	ldr	r0, [r4, #12]
 800a122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a124:	4298      	cmp	r0, r3
 800a126:	bfb8      	it	lt
 800a128:	4618      	movlt	r0, r3
 800a12a:	e734      	b.n	8009f96 <_printf_float+0xbe>
 800a12c:	2301      	movs	r3, #1
 800a12e:	464a      	mov	r2, r9
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	f43f af2b 	beq.w	8009f92 <_printf_float+0xba>
 800a13c:	f108 0801 	add.w	r8, r8, #1
 800a140:	e7e6      	b.n	800a110 <_printf_float+0x238>
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc2b      	bgt.n	800a1a0 <_printf_float+0x2c8>
 800a148:	2301      	movs	r3, #1
 800a14a:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <_printf_float+0x30c>)
 800a14c:	4631      	mov	r1, r6
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	f43f af1d 	beq.w	8009f92 <_printf_float+0xba>
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	b923      	cbnz	r3, 800a166 <_printf_float+0x28e>
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	b913      	cbnz	r3, 800a166 <_printf_float+0x28e>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d5d8      	bpl.n	800a118 <_printf_float+0x240>
 800a166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f af0e 	beq.w	8009f92 <_printf_float+0xba>
 800a176:	f04f 0900 	mov.w	r9, #0
 800a17a:	f104 0a1a 	add.w	sl, r4, #26
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	425b      	negs	r3, r3
 800a182:	454b      	cmp	r3, r9
 800a184:	dc01      	bgt.n	800a18a <_printf_float+0x2b2>
 800a186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a188:	e794      	b.n	800a0b4 <_printf_float+0x1dc>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4652      	mov	r2, sl
 800a18e:	4631      	mov	r1, r6
 800a190:	4628      	mov	r0, r5
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	f43f aefc 	beq.w	8009f92 <_printf_float+0xba>
 800a19a:	f109 0901 	add.w	r9, r9, #1
 800a19e:	e7ee      	b.n	800a17e <_printf_float+0x2a6>
 800a1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	bfa8      	it	ge
 800a1a8:	461a      	movge	r2, r3
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	4691      	mov	r9, r2
 800a1ae:	dd07      	ble.n	800a1c0 <_printf_float+0x2e8>
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f43f aee9 	beq.w	8009f92 <_printf_float+0xba>
 800a1c0:	f104 031a 	add.w	r3, r4, #26
 800a1c4:	f04f 0b00 	mov.w	fp, #0
 800a1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1cc:	9306      	str	r3, [sp, #24]
 800a1ce:	e015      	b.n	800a1fc <_printf_float+0x324>
 800a1d0:	7fefffff 	.word	0x7fefffff
 800a1d4:	08010cb0 	.word	0x08010cb0
 800a1d8:	08010cac 	.word	0x08010cac
 800a1dc:	08010cb8 	.word	0x08010cb8
 800a1e0:	08010cb4 	.word	0x08010cb4
 800a1e4:	08010cbc 	.word	0x08010cbc
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	9a06      	ldr	r2, [sp, #24]
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	47b8      	blx	r7
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f43f aecd 	beq.w	8009f92 <_printf_float+0xba>
 800a1f8:	f10b 0b01 	add.w	fp, fp, #1
 800a1fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a200:	ebaa 0309 	sub.w	r3, sl, r9
 800a204:	455b      	cmp	r3, fp
 800a206:	dcef      	bgt.n	800a1e8 <_printf_float+0x310>
 800a208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a20c:	429a      	cmp	r2, r3
 800a20e:	44d0      	add	r8, sl
 800a210:	db15      	blt.n	800a23e <_printf_float+0x366>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	07da      	lsls	r2, r3, #31
 800a216:	d412      	bmi.n	800a23e <_printf_float+0x366>
 800a218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a21c:	eba3 020a 	sub.w	r2, r3, sl
 800a220:	eba3 0a01 	sub.w	sl, r3, r1
 800a224:	4592      	cmp	sl, r2
 800a226:	bfa8      	it	ge
 800a228:	4692      	movge	sl, r2
 800a22a:	f1ba 0f00 	cmp.w	sl, #0
 800a22e:	dc0e      	bgt.n	800a24e <_printf_float+0x376>
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a238:	f104 091a 	add.w	r9, r4, #26
 800a23c:	e019      	b.n	800a272 <_printf_float+0x39a>
 800a23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	d1e5      	bne.n	800a218 <_printf_float+0x340>
 800a24c:	e6a1      	b.n	8009f92 <_printf_float+0xba>
 800a24e:	4653      	mov	r3, sl
 800a250:	4642      	mov	r2, r8
 800a252:	4631      	mov	r1, r6
 800a254:	4628      	mov	r0, r5
 800a256:	47b8      	blx	r7
 800a258:	3001      	adds	r0, #1
 800a25a:	d1e9      	bne.n	800a230 <_printf_float+0x358>
 800a25c:	e699      	b.n	8009f92 <_printf_float+0xba>
 800a25e:	2301      	movs	r3, #1
 800a260:	464a      	mov	r2, r9
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	47b8      	blx	r7
 800a268:	3001      	adds	r0, #1
 800a26a:	f43f ae92 	beq.w	8009f92 <_printf_float+0xba>
 800a26e:	f108 0801 	add.w	r8, r8, #1
 800a272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a276:	1a9b      	subs	r3, r3, r2
 800a278:	eba3 030a 	sub.w	r3, r3, sl
 800a27c:	4543      	cmp	r3, r8
 800a27e:	dcee      	bgt.n	800a25e <_printf_float+0x386>
 800a280:	e74a      	b.n	800a118 <_printf_float+0x240>
 800a282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a284:	2a01      	cmp	r2, #1
 800a286:	dc01      	bgt.n	800a28c <_printf_float+0x3b4>
 800a288:	07db      	lsls	r3, r3, #31
 800a28a:	d53a      	bpl.n	800a302 <_printf_float+0x42a>
 800a28c:	2301      	movs	r3, #1
 800a28e:	4642      	mov	r2, r8
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	47b8      	blx	r7
 800a296:	3001      	adds	r0, #1
 800a298:	f43f ae7b 	beq.w	8009f92 <_printf_float+0xba>
 800a29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f108 0801 	add.w	r8, r8, #1
 800a2ac:	f43f ae71 	beq.w	8009f92 <_printf_float+0xba>
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f7f6 fc23 	bl	8000b08 <__aeabi_dcmpeq>
 800a2c2:	b9c8      	cbnz	r0, 800a2f8 <_printf_float+0x420>
 800a2c4:	4653      	mov	r3, sl
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d10e      	bne.n	800a2f0 <_printf_float+0x418>
 800a2d2:	e65e      	b.n	8009f92 <_printf_float+0xba>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4652      	mov	r2, sl
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f43f ae57 	beq.w	8009f92 <_printf_float+0xba>
 800a2e4:	f108 0801 	add.w	r8, r8, #1
 800a2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	dcf1      	bgt.n	800a2d4 <_printf_float+0x3fc>
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2f6:	e6de      	b.n	800a0b6 <_printf_float+0x1de>
 800a2f8:	f04f 0800 	mov.w	r8, #0
 800a2fc:	f104 0a1a 	add.w	sl, r4, #26
 800a300:	e7f2      	b.n	800a2e8 <_printf_float+0x410>
 800a302:	2301      	movs	r3, #1
 800a304:	e7df      	b.n	800a2c6 <_printf_float+0x3ee>
 800a306:	2301      	movs	r3, #1
 800a308:	464a      	mov	r2, r9
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f ae3e 	beq.w	8009f92 <_printf_float+0xba>
 800a316:	f108 0801 	add.w	r8, r8, #1
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	4543      	cmp	r3, r8
 800a322:	dcf0      	bgt.n	800a306 <_printf_float+0x42e>
 800a324:	e6fc      	b.n	800a120 <_printf_float+0x248>
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	f104 0919 	add.w	r9, r4, #25
 800a32e:	e7f4      	b.n	800a31a <_printf_float+0x442>
 800a330:	2900      	cmp	r1, #0
 800a332:	f43f ae8b 	beq.w	800a04c <_printf_float+0x174>
 800a336:	2300      	movs	r3, #0
 800a338:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a33c:	ab09      	add	r3, sp, #36	; 0x24
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	ec49 8b10 	vmov	d0, r8, r9
 800a344:	6022      	str	r2, [r4, #0]
 800a346:	f8cd a004 	str.w	sl, [sp, #4]
 800a34a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a34e:	4628      	mov	r0, r5
 800a350:	f7ff fd2d 	bl	8009dae <__cvt>
 800a354:	4680      	mov	r8, r0
 800a356:	e648      	b.n	8009fea <_printf_float+0x112>

0800a358 <_printf_common>:
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	4691      	mov	r9, r2
 800a35e:	461f      	mov	r7, r3
 800a360:	688a      	ldr	r2, [r1, #8]
 800a362:	690b      	ldr	r3, [r1, #16]
 800a364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a368:	4293      	cmp	r3, r2
 800a36a:	bfb8      	it	lt
 800a36c:	4613      	movlt	r3, r2
 800a36e:	f8c9 3000 	str.w	r3, [r9]
 800a372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a376:	4606      	mov	r6, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	b112      	cbz	r2, 800a382 <_printf_common+0x2a>
 800a37c:	3301      	adds	r3, #1
 800a37e:	f8c9 3000 	str.w	r3, [r9]
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	0699      	lsls	r1, r3, #26
 800a386:	bf42      	ittt	mi
 800a388:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a38c:	3302      	addmi	r3, #2
 800a38e:	f8c9 3000 	strmi.w	r3, [r9]
 800a392:	6825      	ldr	r5, [r4, #0]
 800a394:	f015 0506 	ands.w	r5, r5, #6
 800a398:	d107      	bne.n	800a3aa <_printf_common+0x52>
 800a39a:	f104 0a19 	add.w	sl, r4, #25
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	42ab      	cmp	r3, r5
 800a3a8:	dc28      	bgt.n	800a3fc <_printf_common+0xa4>
 800a3aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	3300      	adds	r3, #0
 800a3b2:	bf18      	it	ne
 800a3b4:	2301      	movne	r3, #1
 800a3b6:	0692      	lsls	r2, r2, #26
 800a3b8:	d42d      	bmi.n	800a416 <_printf_common+0xbe>
 800a3ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3be:	4639      	mov	r1, r7
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	47c0      	blx	r8
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d020      	beq.n	800a40a <_printf_common+0xb2>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	68e5      	ldr	r5, [r4, #12]
 800a3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800a3d0:	f003 0306 	and.w	r3, r3, #6
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	bf08      	it	eq
 800a3d8:	1aad      	subeq	r5, r5, r2
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	bf0c      	ite	eq
 800a3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3e4:	2500      	movne	r5, #0
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bfc4      	itt	gt
 800a3ea:	1a9b      	subgt	r3, r3, r2
 800a3ec:	18ed      	addgt	r5, r5, r3
 800a3ee:	f04f 0900 	mov.w	r9, #0
 800a3f2:	341a      	adds	r4, #26
 800a3f4:	454d      	cmp	r5, r9
 800a3f6:	d11a      	bne.n	800a42e <_printf_common+0xd6>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	e008      	b.n	800a40e <_printf_common+0xb6>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4652      	mov	r2, sl
 800a400:	4639      	mov	r1, r7
 800a402:	4630      	mov	r0, r6
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d103      	bne.n	800a412 <_printf_common+0xba>
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a412:	3501      	adds	r5, #1
 800a414:	e7c3      	b.n	800a39e <_printf_common+0x46>
 800a416:	18e1      	adds	r1, r4, r3
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	2030      	movs	r0, #48	; 0x30
 800a41c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a420:	4422      	add	r2, r4
 800a422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a42a:	3302      	adds	r3, #2
 800a42c:	e7c5      	b.n	800a3ba <_printf_common+0x62>
 800a42e:	2301      	movs	r3, #1
 800a430:	4622      	mov	r2, r4
 800a432:	4639      	mov	r1, r7
 800a434:	4630      	mov	r0, r6
 800a436:	47c0      	blx	r8
 800a438:	3001      	adds	r0, #1
 800a43a:	d0e6      	beq.n	800a40a <_printf_common+0xb2>
 800a43c:	f109 0901 	add.w	r9, r9, #1
 800a440:	e7d8      	b.n	800a3f4 <_printf_common+0x9c>
	...

0800a444 <_printf_i>:
 800a444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a448:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a44c:	460c      	mov	r4, r1
 800a44e:	7e09      	ldrb	r1, [r1, #24]
 800a450:	b085      	sub	sp, #20
 800a452:	296e      	cmp	r1, #110	; 0x6e
 800a454:	4617      	mov	r7, r2
 800a456:	4606      	mov	r6, r0
 800a458:	4698      	mov	r8, r3
 800a45a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a45c:	f000 80b3 	beq.w	800a5c6 <_printf_i+0x182>
 800a460:	d822      	bhi.n	800a4a8 <_printf_i+0x64>
 800a462:	2963      	cmp	r1, #99	; 0x63
 800a464:	d036      	beq.n	800a4d4 <_printf_i+0x90>
 800a466:	d80a      	bhi.n	800a47e <_printf_i+0x3a>
 800a468:	2900      	cmp	r1, #0
 800a46a:	f000 80b9 	beq.w	800a5e0 <_printf_i+0x19c>
 800a46e:	2958      	cmp	r1, #88	; 0x58
 800a470:	f000 8083 	beq.w	800a57a <_printf_i+0x136>
 800a474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a478:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a47c:	e032      	b.n	800a4e4 <_printf_i+0xa0>
 800a47e:	2964      	cmp	r1, #100	; 0x64
 800a480:	d001      	beq.n	800a486 <_printf_i+0x42>
 800a482:	2969      	cmp	r1, #105	; 0x69
 800a484:	d1f6      	bne.n	800a474 <_printf_i+0x30>
 800a486:	6820      	ldr	r0, [r4, #0]
 800a488:	6813      	ldr	r3, [r2, #0]
 800a48a:	0605      	lsls	r5, r0, #24
 800a48c:	f103 0104 	add.w	r1, r3, #4
 800a490:	d52a      	bpl.n	800a4e8 <_printf_i+0xa4>
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	da03      	bge.n	800a4a2 <_printf_i+0x5e>
 800a49a:	222d      	movs	r2, #45	; 0x2d
 800a49c:	425b      	negs	r3, r3
 800a49e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a4a2:	486f      	ldr	r0, [pc, #444]	; (800a660 <_printf_i+0x21c>)
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	e039      	b.n	800a51c <_printf_i+0xd8>
 800a4a8:	2973      	cmp	r1, #115	; 0x73
 800a4aa:	f000 809d 	beq.w	800a5e8 <_printf_i+0x1a4>
 800a4ae:	d808      	bhi.n	800a4c2 <_printf_i+0x7e>
 800a4b0:	296f      	cmp	r1, #111	; 0x6f
 800a4b2:	d020      	beq.n	800a4f6 <_printf_i+0xb2>
 800a4b4:	2970      	cmp	r1, #112	; 0x70
 800a4b6:	d1dd      	bne.n	800a474 <_printf_i+0x30>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	f043 0320 	orr.w	r3, r3, #32
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	e003      	b.n	800a4ca <_printf_i+0x86>
 800a4c2:	2975      	cmp	r1, #117	; 0x75
 800a4c4:	d017      	beq.n	800a4f6 <_printf_i+0xb2>
 800a4c6:	2978      	cmp	r1, #120	; 0x78
 800a4c8:	d1d4      	bne.n	800a474 <_printf_i+0x30>
 800a4ca:	2378      	movs	r3, #120	; 0x78
 800a4cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4d0:	4864      	ldr	r0, [pc, #400]	; (800a664 <_printf_i+0x220>)
 800a4d2:	e055      	b.n	800a580 <_printf_i+0x13c>
 800a4d4:	6813      	ldr	r3, [r2, #0]
 800a4d6:	1d19      	adds	r1, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6011      	str	r1, [r2, #0]
 800a4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e08c      	b.n	800a602 <_printf_i+0x1be>
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6011      	str	r1, [r2, #0]
 800a4ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4f0:	bf18      	it	ne
 800a4f2:	b21b      	sxthne	r3, r3
 800a4f4:	e7cf      	b.n	800a496 <_printf_i+0x52>
 800a4f6:	6813      	ldr	r3, [r2, #0]
 800a4f8:	6825      	ldr	r5, [r4, #0]
 800a4fa:	1d18      	adds	r0, r3, #4
 800a4fc:	6010      	str	r0, [r2, #0]
 800a4fe:	0628      	lsls	r0, r5, #24
 800a500:	d501      	bpl.n	800a506 <_printf_i+0xc2>
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	e002      	b.n	800a50c <_printf_i+0xc8>
 800a506:	0668      	lsls	r0, r5, #25
 800a508:	d5fb      	bpl.n	800a502 <_printf_i+0xbe>
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	4854      	ldr	r0, [pc, #336]	; (800a660 <_printf_i+0x21c>)
 800a50e:	296f      	cmp	r1, #111	; 0x6f
 800a510:	bf14      	ite	ne
 800a512:	220a      	movne	r2, #10
 800a514:	2208      	moveq	r2, #8
 800a516:	2100      	movs	r1, #0
 800a518:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a51c:	6865      	ldr	r5, [r4, #4]
 800a51e:	60a5      	str	r5, [r4, #8]
 800a520:	2d00      	cmp	r5, #0
 800a522:	f2c0 8095 	blt.w	800a650 <_printf_i+0x20c>
 800a526:	6821      	ldr	r1, [r4, #0]
 800a528:	f021 0104 	bic.w	r1, r1, #4
 800a52c:	6021      	str	r1, [r4, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d13d      	bne.n	800a5ae <_printf_i+0x16a>
 800a532:	2d00      	cmp	r5, #0
 800a534:	f040 808e 	bne.w	800a654 <_printf_i+0x210>
 800a538:	4665      	mov	r5, ip
 800a53a:	2a08      	cmp	r2, #8
 800a53c:	d10b      	bne.n	800a556 <_printf_i+0x112>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	07db      	lsls	r3, r3, #31
 800a542:	d508      	bpl.n	800a556 <_printf_i+0x112>
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	bfde      	ittt	le
 800a54c:	2330      	movle	r3, #48	; 0x30
 800a54e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a552:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a556:	ebac 0305 	sub.w	r3, ip, r5
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	f8cd 8000 	str.w	r8, [sp]
 800a560:	463b      	mov	r3, r7
 800a562:	aa03      	add	r2, sp, #12
 800a564:	4621      	mov	r1, r4
 800a566:	4630      	mov	r0, r6
 800a568:	f7ff fef6 	bl	800a358 <_printf_common>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d14d      	bne.n	800a60c <_printf_i+0x1c8>
 800a570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a574:	b005      	add	sp, #20
 800a576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57a:	4839      	ldr	r0, [pc, #228]	; (800a660 <_printf_i+0x21c>)
 800a57c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a580:	6813      	ldr	r3, [r2, #0]
 800a582:	6821      	ldr	r1, [r4, #0]
 800a584:	1d1d      	adds	r5, r3, #4
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6015      	str	r5, [r2, #0]
 800a58a:	060a      	lsls	r2, r1, #24
 800a58c:	d50b      	bpl.n	800a5a6 <_printf_i+0x162>
 800a58e:	07ca      	lsls	r2, r1, #31
 800a590:	bf44      	itt	mi
 800a592:	f041 0120 	orrmi.w	r1, r1, #32
 800a596:	6021      	strmi	r1, [r4, #0]
 800a598:	b91b      	cbnz	r3, 800a5a2 <_printf_i+0x15e>
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	f022 0220 	bic.w	r2, r2, #32
 800a5a0:	6022      	str	r2, [r4, #0]
 800a5a2:	2210      	movs	r2, #16
 800a5a4:	e7b7      	b.n	800a516 <_printf_i+0xd2>
 800a5a6:	064d      	lsls	r5, r1, #25
 800a5a8:	bf48      	it	mi
 800a5aa:	b29b      	uxthmi	r3, r3
 800a5ac:	e7ef      	b.n	800a58e <_printf_i+0x14a>
 800a5ae:	4665      	mov	r5, ip
 800a5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5b4:	fb02 3311 	mls	r3, r2, r1, r3
 800a5b8:	5cc3      	ldrb	r3, [r0, r3]
 800a5ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a5be:	460b      	mov	r3, r1
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	d1f5      	bne.n	800a5b0 <_printf_i+0x16c>
 800a5c4:	e7b9      	b.n	800a53a <_printf_i+0xf6>
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	6825      	ldr	r5, [r4, #0]
 800a5ca:	6961      	ldr	r1, [r4, #20]
 800a5cc:	1d18      	adds	r0, r3, #4
 800a5ce:	6010      	str	r0, [r2, #0]
 800a5d0:	0628      	lsls	r0, r5, #24
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	d501      	bpl.n	800a5da <_printf_i+0x196>
 800a5d6:	6019      	str	r1, [r3, #0]
 800a5d8:	e002      	b.n	800a5e0 <_printf_i+0x19c>
 800a5da:	066a      	lsls	r2, r5, #25
 800a5dc:	d5fb      	bpl.n	800a5d6 <_printf_i+0x192>
 800a5de:	8019      	strh	r1, [r3, #0]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6123      	str	r3, [r4, #16]
 800a5e4:	4665      	mov	r5, ip
 800a5e6:	e7b9      	b.n	800a55c <_printf_i+0x118>
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	1d19      	adds	r1, r3, #4
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	681d      	ldr	r5, [r3, #0]
 800a5f0:	6862      	ldr	r2, [r4, #4]
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f7f5 fe13 	bl	8000220 <memchr>
 800a5fa:	b108      	cbz	r0, 800a600 <_printf_i+0x1bc>
 800a5fc:	1b40      	subs	r0, r0, r5
 800a5fe:	6060      	str	r0, [r4, #4]
 800a600:	6863      	ldr	r3, [r4, #4]
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	2300      	movs	r3, #0
 800a606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60a:	e7a7      	b.n	800a55c <_printf_i+0x118>
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	462a      	mov	r2, r5
 800a610:	4639      	mov	r1, r7
 800a612:	4630      	mov	r0, r6
 800a614:	47c0      	blx	r8
 800a616:	3001      	adds	r0, #1
 800a618:	d0aa      	beq.n	800a570 <_printf_i+0x12c>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	079b      	lsls	r3, r3, #30
 800a61e:	d413      	bmi.n	800a648 <_printf_i+0x204>
 800a620:	68e0      	ldr	r0, [r4, #12]
 800a622:	9b03      	ldr	r3, [sp, #12]
 800a624:	4298      	cmp	r0, r3
 800a626:	bfb8      	it	lt
 800a628:	4618      	movlt	r0, r3
 800a62a:	e7a3      	b.n	800a574 <_printf_i+0x130>
 800a62c:	2301      	movs	r3, #1
 800a62e:	464a      	mov	r2, r9
 800a630:	4639      	mov	r1, r7
 800a632:	4630      	mov	r0, r6
 800a634:	47c0      	blx	r8
 800a636:	3001      	adds	r0, #1
 800a638:	d09a      	beq.n	800a570 <_printf_i+0x12c>
 800a63a:	3501      	adds	r5, #1
 800a63c:	68e3      	ldr	r3, [r4, #12]
 800a63e:	9a03      	ldr	r2, [sp, #12]
 800a640:	1a9b      	subs	r3, r3, r2
 800a642:	42ab      	cmp	r3, r5
 800a644:	dcf2      	bgt.n	800a62c <_printf_i+0x1e8>
 800a646:	e7eb      	b.n	800a620 <_printf_i+0x1dc>
 800a648:	2500      	movs	r5, #0
 800a64a:	f104 0919 	add.w	r9, r4, #25
 800a64e:	e7f5      	b.n	800a63c <_printf_i+0x1f8>
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1ac      	bne.n	800a5ae <_printf_i+0x16a>
 800a654:	7803      	ldrb	r3, [r0, #0]
 800a656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a65a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a65e:	e76c      	b.n	800a53a <_printf_i+0xf6>
 800a660:	08010cbe 	.word	0x08010cbe
 800a664:	08010ccf 	.word	0x08010ccf

0800a668 <_scanf_float>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	469a      	mov	sl, r3
 800a66e:	688b      	ldr	r3, [r1, #8]
 800a670:	4616      	mov	r6, r2
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a678:	b087      	sub	sp, #28
 800a67a:	bf83      	ittte	hi
 800a67c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a680:	189b      	addhi	r3, r3, r2
 800a682:	9301      	strhi	r3, [sp, #4]
 800a684:	2300      	movls	r3, #0
 800a686:	bf86      	itte	hi
 800a688:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a68c:	608b      	strhi	r3, [r1, #8]
 800a68e:	9301      	strls	r3, [sp, #4]
 800a690:	680b      	ldr	r3, [r1, #0]
 800a692:	4688      	mov	r8, r1
 800a694:	f04f 0b00 	mov.w	fp, #0
 800a698:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a69c:	f848 3b1c 	str.w	r3, [r8], #28
 800a6a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	4645      	mov	r5, r8
 800a6aa:	465a      	mov	r2, fp
 800a6ac:	46d9      	mov	r9, fp
 800a6ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a6b2:	68a1      	ldr	r1, [r4, #8]
 800a6b4:	b181      	cbz	r1, 800a6d8 <_scanf_float+0x70>
 800a6b6:	6833      	ldr	r3, [r6, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b49      	cmp	r3, #73	; 0x49
 800a6bc:	d071      	beq.n	800a7a2 <_scanf_float+0x13a>
 800a6be:	d84d      	bhi.n	800a75c <_scanf_float+0xf4>
 800a6c0:	2b39      	cmp	r3, #57	; 0x39
 800a6c2:	d840      	bhi.n	800a746 <_scanf_float+0xde>
 800a6c4:	2b31      	cmp	r3, #49	; 0x31
 800a6c6:	f080 8088 	bcs.w	800a7da <_scanf_float+0x172>
 800a6ca:	2b2d      	cmp	r3, #45	; 0x2d
 800a6cc:	f000 8090 	beq.w	800a7f0 <_scanf_float+0x188>
 800a6d0:	d815      	bhi.n	800a6fe <_scanf_float+0x96>
 800a6d2:	2b2b      	cmp	r3, #43	; 0x2b
 800a6d4:	f000 808c 	beq.w	800a7f0 <_scanf_float+0x188>
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	d003      	beq.n	800a6e6 <_scanf_float+0x7e>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	3a01      	subs	r2, #1
 800a6e8:	2a01      	cmp	r2, #1
 800a6ea:	f200 80ea 	bhi.w	800a8c2 <_scanf_float+0x25a>
 800a6ee:	4545      	cmp	r5, r8
 800a6f0:	f200 80dc 	bhi.w	800a8ac <_scanf_float+0x244>
 800a6f4:	2601      	movs	r6, #1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	b007      	add	sp, #28
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a700:	f000 809f 	beq.w	800a842 <_scanf_float+0x1da>
 800a704:	2b30      	cmp	r3, #48	; 0x30
 800a706:	d1e7      	bne.n	800a6d8 <_scanf_float+0x70>
 800a708:	6820      	ldr	r0, [r4, #0]
 800a70a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a70e:	d064      	beq.n	800a7da <_scanf_float+0x172>
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a716:	6020      	str	r0, [r4, #0]
 800a718:	f109 0901 	add.w	r9, r9, #1
 800a71c:	b11b      	cbz	r3, 800a726 <_scanf_float+0xbe>
 800a71e:	3b01      	subs	r3, #1
 800a720:	3101      	adds	r1, #1
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	60a1      	str	r1, [r4, #8]
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	3b01      	subs	r3, #1
 800a72a:	60a3      	str	r3, [r4, #8]
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	3301      	adds	r3, #1
 800a730:	6123      	str	r3, [r4, #16]
 800a732:	6873      	ldr	r3, [r6, #4]
 800a734:	3b01      	subs	r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	6073      	str	r3, [r6, #4]
 800a73a:	f340 80ac 	ble.w	800a896 <_scanf_float+0x22e>
 800a73e:	6833      	ldr	r3, [r6, #0]
 800a740:	3301      	adds	r3, #1
 800a742:	6033      	str	r3, [r6, #0]
 800a744:	e7b5      	b.n	800a6b2 <_scanf_float+0x4a>
 800a746:	2b45      	cmp	r3, #69	; 0x45
 800a748:	f000 8085 	beq.w	800a856 <_scanf_float+0x1ee>
 800a74c:	2b46      	cmp	r3, #70	; 0x46
 800a74e:	d06a      	beq.n	800a826 <_scanf_float+0x1be>
 800a750:	2b41      	cmp	r3, #65	; 0x41
 800a752:	d1c1      	bne.n	800a6d8 <_scanf_float+0x70>
 800a754:	2a01      	cmp	r2, #1
 800a756:	d1bf      	bne.n	800a6d8 <_scanf_float+0x70>
 800a758:	2202      	movs	r2, #2
 800a75a:	e046      	b.n	800a7ea <_scanf_float+0x182>
 800a75c:	2b65      	cmp	r3, #101	; 0x65
 800a75e:	d07a      	beq.n	800a856 <_scanf_float+0x1ee>
 800a760:	d818      	bhi.n	800a794 <_scanf_float+0x12c>
 800a762:	2b54      	cmp	r3, #84	; 0x54
 800a764:	d066      	beq.n	800a834 <_scanf_float+0x1cc>
 800a766:	d811      	bhi.n	800a78c <_scanf_float+0x124>
 800a768:	2b4e      	cmp	r3, #78	; 0x4e
 800a76a:	d1b5      	bne.n	800a6d8 <_scanf_float+0x70>
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	d146      	bne.n	800a7fe <_scanf_float+0x196>
 800a770:	f1b9 0f00 	cmp.w	r9, #0
 800a774:	d145      	bne.n	800a802 <_scanf_float+0x19a>
 800a776:	6821      	ldr	r1, [r4, #0]
 800a778:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a77c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a780:	d13f      	bne.n	800a802 <_scanf_float+0x19a>
 800a782:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a786:	6021      	str	r1, [r4, #0]
 800a788:	2201      	movs	r2, #1
 800a78a:	e02e      	b.n	800a7ea <_scanf_float+0x182>
 800a78c:	2b59      	cmp	r3, #89	; 0x59
 800a78e:	d01e      	beq.n	800a7ce <_scanf_float+0x166>
 800a790:	2b61      	cmp	r3, #97	; 0x61
 800a792:	e7de      	b.n	800a752 <_scanf_float+0xea>
 800a794:	2b6e      	cmp	r3, #110	; 0x6e
 800a796:	d0e9      	beq.n	800a76c <_scanf_float+0x104>
 800a798:	d815      	bhi.n	800a7c6 <_scanf_float+0x15e>
 800a79a:	2b66      	cmp	r3, #102	; 0x66
 800a79c:	d043      	beq.n	800a826 <_scanf_float+0x1be>
 800a79e:	2b69      	cmp	r3, #105	; 0x69
 800a7a0:	d19a      	bne.n	800a6d8 <_scanf_float+0x70>
 800a7a2:	f1bb 0f00 	cmp.w	fp, #0
 800a7a6:	d138      	bne.n	800a81a <_scanf_float+0x1b2>
 800a7a8:	f1b9 0f00 	cmp.w	r9, #0
 800a7ac:	d197      	bne.n	800a6de <_scanf_float+0x76>
 800a7ae:	6821      	ldr	r1, [r4, #0]
 800a7b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a7b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a7b8:	d195      	bne.n	800a6e6 <_scanf_float+0x7e>
 800a7ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a7be:	6021      	str	r1, [r4, #0]
 800a7c0:	f04f 0b01 	mov.w	fp, #1
 800a7c4:	e011      	b.n	800a7ea <_scanf_float+0x182>
 800a7c6:	2b74      	cmp	r3, #116	; 0x74
 800a7c8:	d034      	beq.n	800a834 <_scanf_float+0x1cc>
 800a7ca:	2b79      	cmp	r3, #121	; 0x79
 800a7cc:	d184      	bne.n	800a6d8 <_scanf_float+0x70>
 800a7ce:	f1bb 0f07 	cmp.w	fp, #7
 800a7d2:	d181      	bne.n	800a6d8 <_scanf_float+0x70>
 800a7d4:	f04f 0b08 	mov.w	fp, #8
 800a7d8:	e007      	b.n	800a7ea <_scanf_float+0x182>
 800a7da:	eb12 0f0b 	cmn.w	r2, fp
 800a7de:	f47f af7b 	bne.w	800a6d8 <_scanf_float+0x70>
 800a7e2:	6821      	ldr	r1, [r4, #0]
 800a7e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a7e8:	6021      	str	r1, [r4, #0]
 800a7ea:	702b      	strb	r3, [r5, #0]
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	e79a      	b.n	800a726 <_scanf_float+0xbe>
 800a7f0:	6821      	ldr	r1, [r4, #0]
 800a7f2:	0608      	lsls	r0, r1, #24
 800a7f4:	f57f af70 	bpl.w	800a6d8 <_scanf_float+0x70>
 800a7f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7fc:	e7f4      	b.n	800a7e8 <_scanf_float+0x180>
 800a7fe:	2a02      	cmp	r2, #2
 800a800:	d047      	beq.n	800a892 <_scanf_float+0x22a>
 800a802:	f1bb 0f01 	cmp.w	fp, #1
 800a806:	d003      	beq.n	800a810 <_scanf_float+0x1a8>
 800a808:	f1bb 0f04 	cmp.w	fp, #4
 800a80c:	f47f af64 	bne.w	800a6d8 <_scanf_float+0x70>
 800a810:	f10b 0b01 	add.w	fp, fp, #1
 800a814:	fa5f fb8b 	uxtb.w	fp, fp
 800a818:	e7e7      	b.n	800a7ea <_scanf_float+0x182>
 800a81a:	f1bb 0f03 	cmp.w	fp, #3
 800a81e:	d0f7      	beq.n	800a810 <_scanf_float+0x1a8>
 800a820:	f1bb 0f05 	cmp.w	fp, #5
 800a824:	e7f2      	b.n	800a80c <_scanf_float+0x1a4>
 800a826:	f1bb 0f02 	cmp.w	fp, #2
 800a82a:	f47f af55 	bne.w	800a6d8 <_scanf_float+0x70>
 800a82e:	f04f 0b03 	mov.w	fp, #3
 800a832:	e7da      	b.n	800a7ea <_scanf_float+0x182>
 800a834:	f1bb 0f06 	cmp.w	fp, #6
 800a838:	f47f af4e 	bne.w	800a6d8 <_scanf_float+0x70>
 800a83c:	f04f 0b07 	mov.w	fp, #7
 800a840:	e7d3      	b.n	800a7ea <_scanf_float+0x182>
 800a842:	6821      	ldr	r1, [r4, #0]
 800a844:	0588      	lsls	r0, r1, #22
 800a846:	f57f af47 	bpl.w	800a6d8 <_scanf_float+0x70>
 800a84a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a84e:	6021      	str	r1, [r4, #0]
 800a850:	f8cd 9008 	str.w	r9, [sp, #8]
 800a854:	e7c9      	b.n	800a7ea <_scanf_float+0x182>
 800a856:	6821      	ldr	r1, [r4, #0]
 800a858:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a85c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a860:	d006      	beq.n	800a870 <_scanf_float+0x208>
 800a862:	0548      	lsls	r0, r1, #21
 800a864:	f57f af38 	bpl.w	800a6d8 <_scanf_float+0x70>
 800a868:	f1b9 0f00 	cmp.w	r9, #0
 800a86c:	f43f af3b 	beq.w	800a6e6 <_scanf_float+0x7e>
 800a870:	0588      	lsls	r0, r1, #22
 800a872:	bf58      	it	pl
 800a874:	9802      	ldrpl	r0, [sp, #8]
 800a876:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a87a:	bf58      	it	pl
 800a87c:	eba9 0000 	subpl.w	r0, r9, r0
 800a880:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a884:	bf58      	it	pl
 800a886:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a88a:	6021      	str	r1, [r4, #0]
 800a88c:	f04f 0900 	mov.w	r9, #0
 800a890:	e7ab      	b.n	800a7ea <_scanf_float+0x182>
 800a892:	2203      	movs	r2, #3
 800a894:	e7a9      	b.n	800a7ea <_scanf_float+0x182>
 800a896:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a89a:	9205      	str	r2, [sp, #20]
 800a89c:	4631      	mov	r1, r6
 800a89e:	4638      	mov	r0, r7
 800a8a0:	4798      	blx	r3
 800a8a2:	9a05      	ldr	r2, [sp, #20]
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f43f af04 	beq.w	800a6b2 <_scanf_float+0x4a>
 800a8aa:	e715      	b.n	800a6d8 <_scanf_float+0x70>
 800a8ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	4798      	blx	r3
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	6123      	str	r3, [r4, #16]
 800a8c0:	e715      	b.n	800a6ee <_scanf_float+0x86>
 800a8c2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	d80a      	bhi.n	800a8e0 <_scanf_float+0x278>
 800a8ca:	f1bb 0f02 	cmp.w	fp, #2
 800a8ce:	d968      	bls.n	800a9a2 <_scanf_float+0x33a>
 800a8d0:	f1ab 0b03 	sub.w	fp, fp, #3
 800a8d4:	fa5f fb8b 	uxtb.w	fp, fp
 800a8d8:	eba5 0b0b 	sub.w	fp, r5, fp
 800a8dc:	455d      	cmp	r5, fp
 800a8de:	d14b      	bne.n	800a978 <_scanf_float+0x310>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	05da      	lsls	r2, r3, #23
 800a8e4:	d51f      	bpl.n	800a926 <_scanf_float+0x2be>
 800a8e6:	055b      	lsls	r3, r3, #21
 800a8e8:	d468      	bmi.n	800a9bc <_scanf_float+0x354>
 800a8ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	2965      	cmp	r1, #101	; 0x65
 800a8f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a8f6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	d00d      	beq.n	800a91a <_scanf_float+0x2b2>
 800a8fe:	2945      	cmp	r1, #69	; 0x45
 800a900:	d00b      	beq.n	800a91a <_scanf_float+0x2b2>
 800a902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a906:	4632      	mov	r2, r6
 800a908:	4638      	mov	r0, r7
 800a90a:	4798      	blx	r3
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a912:	3b01      	subs	r3, #1
 800a914:	f1a5 0b02 	sub.w	fp, r5, #2
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a91e:	4632      	mov	r2, r6
 800a920:	4638      	mov	r0, r7
 800a922:	4798      	blx	r3
 800a924:	465d      	mov	r5, fp
 800a926:	6826      	ldr	r6, [r4, #0]
 800a928:	f016 0610 	ands.w	r6, r6, #16
 800a92c:	d17a      	bne.n	800aa24 <_scanf_float+0x3bc>
 800a92e:	702e      	strb	r6, [r5, #0]
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a93a:	d142      	bne.n	800a9c2 <_scanf_float+0x35a>
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	eba9 0303 	sub.w	r3, r9, r3
 800a942:	425a      	negs	r2, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d149      	bne.n	800a9dc <_scanf_float+0x374>
 800a948:	2200      	movs	r2, #0
 800a94a:	4641      	mov	r1, r8
 800a94c:	4638      	mov	r0, r7
 800a94e:	f000 fed7 	bl	800b700 <_strtod_r>
 800a952:	6825      	ldr	r5, [r4, #0]
 800a954:	f8da 3000 	ldr.w	r3, [sl]
 800a958:	f015 0f02 	tst.w	r5, #2
 800a95c:	f103 0204 	add.w	r2, r3, #4
 800a960:	ec59 8b10 	vmov	r8, r9, d0
 800a964:	f8ca 2000 	str.w	r2, [sl]
 800a968:	d043      	beq.n	800a9f2 <_scanf_float+0x38a>
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	e9c3 8900 	strd	r8, r9, [r3]
 800a970:	68e3      	ldr	r3, [r4, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	60e3      	str	r3, [r4, #12]
 800a976:	e6be      	b.n	800a6f6 <_scanf_float+0x8e>
 800a978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a97c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a980:	4632      	mov	r2, r6
 800a982:	4638      	mov	r0, r7
 800a984:	4798      	blx	r3
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	3b01      	subs	r3, #1
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	e7a6      	b.n	800a8dc <_scanf_float+0x274>
 800a98e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a992:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a996:	4632      	mov	r2, r6
 800a998:	4638      	mov	r0, r7
 800a99a:	4798      	blx	r3
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	6123      	str	r3, [r4, #16]
 800a9a2:	4545      	cmp	r5, r8
 800a9a4:	d8f3      	bhi.n	800a98e <_scanf_float+0x326>
 800a9a6:	e6a5      	b.n	800a6f4 <_scanf_float+0x8c>
 800a9a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	4798      	blx	r3
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	6123      	str	r3, [r4, #16]
 800a9bc:	4545      	cmp	r5, r8
 800a9be:	d8f3      	bhi.n	800a9a8 <_scanf_float+0x340>
 800a9c0:	e698      	b.n	800a6f4 <_scanf_float+0x8c>
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0bf      	beq.n	800a948 <_scanf_float+0x2e0>
 800a9c8:	9904      	ldr	r1, [sp, #16]
 800a9ca:	230a      	movs	r3, #10
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	3101      	adds	r1, #1
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f000 ff21 	bl	800b818 <_strtol_r>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	9d04      	ldr	r5, [sp, #16]
 800a9da:	1ac2      	subs	r2, r0, r3
 800a9dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9e0:	429d      	cmp	r5, r3
 800a9e2:	bf28      	it	cs
 800a9e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a9e8:	490f      	ldr	r1, [pc, #60]	; (800aa28 <_scanf_float+0x3c0>)
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 f858 	bl	800aaa0 <siprintf>
 800a9f0:	e7aa      	b.n	800a948 <_scanf_float+0x2e0>
 800a9f2:	f015 0504 	ands.w	r5, r5, #4
 800a9f6:	d1b8      	bne.n	800a96a <_scanf_float+0x302>
 800a9f8:	681f      	ldr	r7, [r3, #0]
 800a9fa:	ee10 2a10 	vmov	r2, s0
 800a9fe:	464b      	mov	r3, r9
 800aa00:	ee10 0a10 	vmov	r0, s0
 800aa04:	4649      	mov	r1, r9
 800aa06:	f7f6 f8b1 	bl	8000b6c <__aeabi_dcmpun>
 800aa0a:	b128      	cbz	r0, 800aa18 <_scanf_float+0x3b0>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f000 f80d 	bl	800aa2c <nanf>
 800aa12:	ed87 0a00 	vstr	s0, [r7]
 800aa16:	e7ab      	b.n	800a970 <_scanf_float+0x308>
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f6 f904 	bl	8000c28 <__aeabi_d2f>
 800aa20:	6038      	str	r0, [r7, #0]
 800aa22:	e7a5      	b.n	800a970 <_scanf_float+0x308>
 800aa24:	2600      	movs	r6, #0
 800aa26:	e666      	b.n	800a6f6 <_scanf_float+0x8e>
 800aa28:	08010ce0 	.word	0x08010ce0

0800aa2c <nanf>:
 800aa2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa34 <nanf+0x8>
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	7fc00000 	.word	0x7fc00000

0800aa38 <sniprintf>:
 800aa38:	b40c      	push	{r2, r3}
 800aa3a:	b530      	push	{r4, r5, lr}
 800aa3c:	4b17      	ldr	r3, [pc, #92]	; (800aa9c <sniprintf+0x64>)
 800aa3e:	1e0c      	subs	r4, r1, #0
 800aa40:	b09d      	sub	sp, #116	; 0x74
 800aa42:	681d      	ldr	r5, [r3, #0]
 800aa44:	da08      	bge.n	800aa58 <sniprintf+0x20>
 800aa46:	238b      	movs	r3, #139	; 0x8b
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa4e:	b01d      	add	sp, #116	; 0x74
 800aa50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa54:	b002      	add	sp, #8
 800aa56:	4770      	bx	lr
 800aa58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa60:	bf14      	ite	ne
 800aa62:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800aa66:	4623      	moveq	r3, r4
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa70:	9002      	str	r0, [sp, #8]
 800aa72:	9006      	str	r0, [sp, #24]
 800aa74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa7a:	ab21      	add	r3, sp, #132	; 0x84
 800aa7c:	a902      	add	r1, sp, #8
 800aa7e:	4628      	mov	r0, r5
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f002 fdc1 	bl	800d608 <_svfiprintf_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	bfbc      	itt	lt
 800aa8a:	238b      	movlt	r3, #139	; 0x8b
 800aa8c:	602b      	strlt	r3, [r5, #0]
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	d0dd      	beq.n	800aa4e <sniprintf+0x16>
 800aa92:	9b02      	ldr	r3, [sp, #8]
 800aa94:	2200      	movs	r2, #0
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e7d9      	b.n	800aa4e <sniprintf+0x16>
 800aa9a:	bf00      	nop
 800aa9c:	2000005c 	.word	0x2000005c

0800aaa0 <siprintf>:
 800aaa0:	b40e      	push	{r1, r2, r3}
 800aaa2:	b500      	push	{lr}
 800aaa4:	b09c      	sub	sp, #112	; 0x70
 800aaa6:	ab1d      	add	r3, sp, #116	; 0x74
 800aaa8:	9002      	str	r0, [sp, #8]
 800aaaa:	9006      	str	r0, [sp, #24]
 800aaac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aab0:	4809      	ldr	r0, [pc, #36]	; (800aad8 <siprintf+0x38>)
 800aab2:	9107      	str	r1, [sp, #28]
 800aab4:	9104      	str	r1, [sp, #16]
 800aab6:	4909      	ldr	r1, [pc, #36]	; (800aadc <siprintf+0x3c>)
 800aab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabc:	9105      	str	r1, [sp, #20]
 800aabe:	6800      	ldr	r0, [r0, #0]
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	a902      	add	r1, sp, #8
 800aac4:	f002 fda0 	bl	800d608 <_svfiprintf_r>
 800aac8:	9b02      	ldr	r3, [sp, #8]
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	b01c      	add	sp, #112	; 0x70
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr
 800aad8:	2000005c 	.word	0x2000005c
 800aadc:	ffff0208 	.word	0xffff0208

0800aae0 <sulp>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	ec45 4b10 	vmov	d0, r4, r5
 800aaea:	4616      	mov	r6, r2
 800aaec:	f002 fb48 	bl	800d180 <__ulp>
 800aaf0:	ec51 0b10 	vmov	r0, r1, d0
 800aaf4:	b17e      	cbz	r6, 800ab16 <sulp+0x36>
 800aaf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aafa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd09      	ble.n	800ab16 <sulp+0x36>
 800ab02:	051b      	lsls	r3, r3, #20
 800ab04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab08:	2400      	movs	r4, #0
 800ab0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab0e:	4622      	mov	r2, r4
 800ab10:	462b      	mov	r3, r5
 800ab12:	f7f5 fd91 	bl	8000638 <__aeabi_dmul>
 800ab16:	bd70      	pop	{r4, r5, r6, pc}

0800ab18 <_strtod_l>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	461f      	mov	r7, r3
 800ab1e:	b0a1      	sub	sp, #132	; 0x84
 800ab20:	2300      	movs	r3, #0
 800ab22:	4681      	mov	r9, r0
 800ab24:	4638      	mov	r0, r7
 800ab26:	460e      	mov	r6, r1
 800ab28:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab2a:	931c      	str	r3, [sp, #112]	; 0x70
 800ab2c:	f002 f831 	bl	800cb92 <__localeconv_l>
 800ab30:	4680      	mov	r8, r0
 800ab32:	6800      	ldr	r0, [r0, #0]
 800ab34:	f7f5 fb6c 	bl	8000210 <strlen>
 800ab38:	f04f 0a00 	mov.w	sl, #0
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	f04f 0b00 	mov.w	fp, #0
 800ab42:	961b      	str	r6, [sp, #108]	; 0x6c
 800ab44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	2a0d      	cmp	r2, #13
 800ab4a:	d832      	bhi.n	800abb2 <_strtod_l+0x9a>
 800ab4c:	2a09      	cmp	r2, #9
 800ab4e:	d236      	bcs.n	800abbe <_strtod_l+0xa6>
 800ab50:	2a00      	cmp	r2, #0
 800ab52:	d03e      	beq.n	800abd2 <_strtod_l+0xba>
 800ab54:	2300      	movs	r3, #0
 800ab56:	930d      	str	r3, [sp, #52]	; 0x34
 800ab58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ab5a:	782b      	ldrb	r3, [r5, #0]
 800ab5c:	2b30      	cmp	r3, #48	; 0x30
 800ab5e:	f040 80ac 	bne.w	800acba <_strtod_l+0x1a2>
 800ab62:	786b      	ldrb	r3, [r5, #1]
 800ab64:	2b58      	cmp	r3, #88	; 0x58
 800ab66:	d001      	beq.n	800ab6c <_strtod_l+0x54>
 800ab68:	2b78      	cmp	r3, #120	; 0x78
 800ab6a:	d167      	bne.n	800ac3c <_strtod_l+0x124>
 800ab6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	ab1c      	add	r3, sp, #112	; 0x70
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	9702      	str	r7, [sp, #8]
 800ab76:	ab1d      	add	r3, sp, #116	; 0x74
 800ab78:	4a88      	ldr	r2, [pc, #544]	; (800ad9c <_strtod_l+0x284>)
 800ab7a:	a91b      	add	r1, sp, #108	; 0x6c
 800ab7c:	4648      	mov	r0, r9
 800ab7e:	f001 fd2e 	bl	800c5de <__gethex>
 800ab82:	f010 0407 	ands.w	r4, r0, #7
 800ab86:	4606      	mov	r6, r0
 800ab88:	d005      	beq.n	800ab96 <_strtod_l+0x7e>
 800ab8a:	2c06      	cmp	r4, #6
 800ab8c:	d12b      	bne.n	800abe6 <_strtod_l+0xce>
 800ab8e:	3501      	adds	r5, #1
 800ab90:	2300      	movs	r3, #0
 800ab92:	951b      	str	r5, [sp, #108]	; 0x6c
 800ab94:	930d      	str	r3, [sp, #52]	; 0x34
 800ab96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f040 859a 	bne.w	800b6d2 <_strtod_l+0xbba>
 800ab9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba0:	b1e3      	cbz	r3, 800abdc <_strtod_l+0xc4>
 800aba2:	4652      	mov	r2, sl
 800aba4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aba8:	ec43 2b10 	vmov	d0, r2, r3
 800abac:	b021      	add	sp, #132	; 0x84
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	2a2b      	cmp	r2, #43	; 0x2b
 800abb4:	d015      	beq.n	800abe2 <_strtod_l+0xca>
 800abb6:	2a2d      	cmp	r2, #45	; 0x2d
 800abb8:	d004      	beq.n	800abc4 <_strtod_l+0xac>
 800abba:	2a20      	cmp	r2, #32
 800abbc:	d1ca      	bne.n	800ab54 <_strtod_l+0x3c>
 800abbe:	3301      	adds	r3, #1
 800abc0:	931b      	str	r3, [sp, #108]	; 0x6c
 800abc2:	e7bf      	b.n	800ab44 <_strtod_l+0x2c>
 800abc4:	2201      	movs	r2, #1
 800abc6:	920d      	str	r2, [sp, #52]	; 0x34
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	921b      	str	r2, [sp, #108]	; 0x6c
 800abcc:	785b      	ldrb	r3, [r3, #1]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1c2      	bne.n	800ab58 <_strtod_l+0x40>
 800abd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd4:	961b      	str	r6, [sp, #108]	; 0x6c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f040 8579 	bne.w	800b6ce <_strtod_l+0xbb6>
 800abdc:	4652      	mov	r2, sl
 800abde:	465b      	mov	r3, fp
 800abe0:	e7e2      	b.n	800aba8 <_strtod_l+0x90>
 800abe2:	2200      	movs	r2, #0
 800abe4:	e7ef      	b.n	800abc6 <_strtod_l+0xae>
 800abe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abe8:	b13a      	cbz	r2, 800abfa <_strtod_l+0xe2>
 800abea:	2135      	movs	r1, #53	; 0x35
 800abec:	a81e      	add	r0, sp, #120	; 0x78
 800abee:	f002 fbbf 	bl	800d370 <__copybits>
 800abf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abf4:	4648      	mov	r0, r9
 800abf6:	f002 f82b 	bl	800cc50 <_Bfree>
 800abfa:	3c01      	subs	r4, #1
 800abfc:	2c04      	cmp	r4, #4
 800abfe:	d806      	bhi.n	800ac0e <_strtod_l+0xf6>
 800ac00:	e8df f004 	tbb	[pc, r4]
 800ac04:	1714030a 	.word	0x1714030a
 800ac08:	0a          	.byte	0x0a
 800ac09:	00          	.byte	0x00
 800ac0a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ac0e:	0730      	lsls	r0, r6, #28
 800ac10:	d5c1      	bpl.n	800ab96 <_strtod_l+0x7e>
 800ac12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ac16:	e7be      	b.n	800ab96 <_strtod_l+0x7e>
 800ac18:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ac1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ac1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac2a:	e7f0      	b.n	800ac0e <_strtod_l+0xf6>
 800ac2c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ada0 <_strtod_l+0x288>
 800ac30:	e7ed      	b.n	800ac0e <_strtod_l+0xf6>
 800ac32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ac36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac3a:	e7e8      	b.n	800ac0e <_strtod_l+0xf6>
 800ac3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	2b30      	cmp	r3, #48	; 0x30
 800ac46:	d0f9      	beq.n	800ac3c <_strtod_l+0x124>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0a4      	beq.n	800ab96 <_strtod_l+0x7e>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	2500      	movs	r5, #0
 800ac50:	9306      	str	r3, [sp, #24]
 800ac52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac54:	9308      	str	r3, [sp, #32]
 800ac56:	9507      	str	r5, [sp, #28]
 800ac58:	9505      	str	r5, [sp, #20]
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ac5e:	7807      	ldrb	r7, [r0, #0]
 800ac60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ac64:	b2d9      	uxtb	r1, r3
 800ac66:	2909      	cmp	r1, #9
 800ac68:	d929      	bls.n	800acbe <_strtod_l+0x1a6>
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	f8d8 1000 	ldr.w	r1, [r8]
 800ac70:	f002 fdd2 	bl	800d818 <strncmp>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d031      	beq.n	800acdc <_strtod_l+0x1c4>
 800ac78:	2000      	movs	r0, #0
 800ac7a:	9c05      	ldr	r4, [sp, #20]
 800ac7c:	9004      	str	r0, [sp, #16]
 800ac7e:	463b      	mov	r3, r7
 800ac80:	4602      	mov	r2, r0
 800ac82:	2b65      	cmp	r3, #101	; 0x65
 800ac84:	d001      	beq.n	800ac8a <_strtod_l+0x172>
 800ac86:	2b45      	cmp	r3, #69	; 0x45
 800ac88:	d114      	bne.n	800acb4 <_strtod_l+0x19c>
 800ac8a:	b924      	cbnz	r4, 800ac96 <_strtod_l+0x17e>
 800ac8c:	b910      	cbnz	r0, 800ac94 <_strtod_l+0x17c>
 800ac8e:	9b06      	ldr	r3, [sp, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d09e      	beq.n	800abd2 <_strtod_l+0xba>
 800ac94:	2400      	movs	r4, #0
 800ac96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ac98:	1c73      	adds	r3, r6, #1
 800ac9a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac9c:	7873      	ldrb	r3, [r6, #1]
 800ac9e:	2b2b      	cmp	r3, #43	; 0x2b
 800aca0:	d078      	beq.n	800ad94 <_strtod_l+0x27c>
 800aca2:	2b2d      	cmp	r3, #45	; 0x2d
 800aca4:	d070      	beq.n	800ad88 <_strtod_l+0x270>
 800aca6:	f04f 0c00 	mov.w	ip, #0
 800acaa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800acae:	2f09      	cmp	r7, #9
 800acb0:	d97c      	bls.n	800adac <_strtod_l+0x294>
 800acb2:	961b      	str	r6, [sp, #108]	; 0x6c
 800acb4:	f04f 0e00 	mov.w	lr, #0
 800acb8:	e09a      	b.n	800adf0 <_strtod_l+0x2d8>
 800acba:	2300      	movs	r3, #0
 800acbc:	e7c7      	b.n	800ac4e <_strtod_l+0x136>
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	2908      	cmp	r1, #8
 800acc2:	bfdd      	ittte	le
 800acc4:	9907      	ldrle	r1, [sp, #28]
 800acc6:	fb02 3301 	mlale	r3, r2, r1, r3
 800acca:	9307      	strle	r3, [sp, #28]
 800accc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	3001      	adds	r0, #1
 800acd4:	3301      	adds	r3, #1
 800acd6:	9305      	str	r3, [sp, #20]
 800acd8:	901b      	str	r0, [sp, #108]	; 0x6c
 800acda:	e7bf      	b.n	800ac5c <_strtod_l+0x144>
 800acdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acde:	191a      	adds	r2, r3, r4
 800ace0:	921b      	str	r2, [sp, #108]	; 0x6c
 800ace2:	9a05      	ldr	r2, [sp, #20]
 800ace4:	5d1b      	ldrb	r3, [r3, r4]
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	d037      	beq.n	800ad5a <_strtod_l+0x242>
 800acea:	9c05      	ldr	r4, [sp, #20]
 800acec:	4602      	mov	r2, r0
 800acee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800acf2:	2909      	cmp	r1, #9
 800acf4:	d913      	bls.n	800ad1e <_strtod_l+0x206>
 800acf6:	2101      	movs	r1, #1
 800acf8:	9104      	str	r1, [sp, #16]
 800acfa:	e7c2      	b.n	800ac82 <_strtod_l+0x16a>
 800acfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad02:	785b      	ldrb	r3, [r3, #1]
 800ad04:	3001      	adds	r0, #1
 800ad06:	2b30      	cmp	r3, #48	; 0x30
 800ad08:	d0f8      	beq.n	800acfc <_strtod_l+0x1e4>
 800ad0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ad0e:	2a08      	cmp	r2, #8
 800ad10:	f200 84e4 	bhi.w	800b6dc <_strtod_l+0xbc4>
 800ad14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad16:	9208      	str	r2, [sp, #32]
 800ad18:	4602      	mov	r2, r0
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ad22:	f100 0101 	add.w	r1, r0, #1
 800ad26:	d012      	beq.n	800ad4e <_strtod_l+0x236>
 800ad28:	440a      	add	r2, r1
 800ad2a:	eb00 0c04 	add.w	ip, r0, r4
 800ad2e:	4621      	mov	r1, r4
 800ad30:	270a      	movs	r7, #10
 800ad32:	458c      	cmp	ip, r1
 800ad34:	d113      	bne.n	800ad5e <_strtod_l+0x246>
 800ad36:	1821      	adds	r1, r4, r0
 800ad38:	2908      	cmp	r1, #8
 800ad3a:	f104 0401 	add.w	r4, r4, #1
 800ad3e:	4404      	add	r4, r0
 800ad40:	dc19      	bgt.n	800ad76 <_strtod_l+0x25e>
 800ad42:	9b07      	ldr	r3, [sp, #28]
 800ad44:	210a      	movs	r1, #10
 800ad46:	fb01 e303 	mla	r3, r1, r3, lr
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad50:	1c58      	adds	r0, r3, #1
 800ad52:	901b      	str	r0, [sp, #108]	; 0x6c
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	4608      	mov	r0, r1
 800ad58:	e7c9      	b.n	800acee <_strtod_l+0x1d6>
 800ad5a:	9805      	ldr	r0, [sp, #20]
 800ad5c:	e7d3      	b.n	800ad06 <_strtod_l+0x1ee>
 800ad5e:	2908      	cmp	r1, #8
 800ad60:	f101 0101 	add.w	r1, r1, #1
 800ad64:	dc03      	bgt.n	800ad6e <_strtod_l+0x256>
 800ad66:	9b07      	ldr	r3, [sp, #28]
 800ad68:	437b      	muls	r3, r7
 800ad6a:	9307      	str	r3, [sp, #28]
 800ad6c:	e7e1      	b.n	800ad32 <_strtod_l+0x21a>
 800ad6e:	2910      	cmp	r1, #16
 800ad70:	bfd8      	it	le
 800ad72:	437d      	mulle	r5, r7
 800ad74:	e7dd      	b.n	800ad32 <_strtod_l+0x21a>
 800ad76:	2c10      	cmp	r4, #16
 800ad78:	bfdc      	itt	le
 800ad7a:	210a      	movle	r1, #10
 800ad7c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ad80:	e7e4      	b.n	800ad4c <_strtod_l+0x234>
 800ad82:	2301      	movs	r3, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	e781      	b.n	800ac8c <_strtod_l+0x174>
 800ad88:	f04f 0c01 	mov.w	ip, #1
 800ad8c:	1cb3      	adds	r3, r6, #2
 800ad8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad90:	78b3      	ldrb	r3, [r6, #2]
 800ad92:	e78a      	b.n	800acaa <_strtod_l+0x192>
 800ad94:	f04f 0c00 	mov.w	ip, #0
 800ad98:	e7f8      	b.n	800ad8c <_strtod_l+0x274>
 800ad9a:	bf00      	nop
 800ad9c:	08010ce8 	.word	0x08010ce8
 800ada0:	7ff00000 	.word	0x7ff00000
 800ada4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ada6:	1c5f      	adds	r7, r3, #1
 800ada8:	971b      	str	r7, [sp, #108]	; 0x6c
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b30      	cmp	r3, #48	; 0x30
 800adae:	d0f9      	beq.n	800ada4 <_strtod_l+0x28c>
 800adb0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800adb4:	2f08      	cmp	r7, #8
 800adb6:	f63f af7d 	bhi.w	800acb4 <_strtod_l+0x19c>
 800adba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800adbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adc0:	930a      	str	r3, [sp, #40]	; 0x28
 800adc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adc4:	1c5f      	adds	r7, r3, #1
 800adc6:	971b      	str	r7, [sp, #108]	; 0x6c
 800adc8:	785b      	ldrb	r3, [r3, #1]
 800adca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800adce:	f1b8 0f09 	cmp.w	r8, #9
 800add2:	d937      	bls.n	800ae44 <_strtod_l+0x32c>
 800add4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800add6:	1a7f      	subs	r7, r7, r1
 800add8:	2f08      	cmp	r7, #8
 800adda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800adde:	dc37      	bgt.n	800ae50 <_strtod_l+0x338>
 800ade0:	45be      	cmp	lr, r7
 800ade2:	bfa8      	it	ge
 800ade4:	46be      	movge	lr, r7
 800ade6:	f1bc 0f00 	cmp.w	ip, #0
 800adea:	d001      	beq.n	800adf0 <_strtod_l+0x2d8>
 800adec:	f1ce 0e00 	rsb	lr, lr, #0
 800adf0:	2c00      	cmp	r4, #0
 800adf2:	d151      	bne.n	800ae98 <_strtod_l+0x380>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f47f aece 	bne.w	800ab96 <_strtod_l+0x7e>
 800adfa:	9a06      	ldr	r2, [sp, #24]
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	f47f aeca 	bne.w	800ab96 <_strtod_l+0x7e>
 800ae02:	9a04      	ldr	r2, [sp, #16]
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	f47f aee4 	bne.w	800abd2 <_strtod_l+0xba>
 800ae0a:	2b4e      	cmp	r3, #78	; 0x4e
 800ae0c:	d027      	beq.n	800ae5e <_strtod_l+0x346>
 800ae0e:	dc21      	bgt.n	800ae54 <_strtod_l+0x33c>
 800ae10:	2b49      	cmp	r3, #73	; 0x49
 800ae12:	f47f aede 	bne.w	800abd2 <_strtod_l+0xba>
 800ae16:	49a0      	ldr	r1, [pc, #640]	; (800b098 <_strtod_l+0x580>)
 800ae18:	a81b      	add	r0, sp, #108	; 0x6c
 800ae1a:	f001 fe13 	bl	800ca44 <__match>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f43f aed7 	beq.w	800abd2 <_strtod_l+0xba>
 800ae24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae26:	499d      	ldr	r1, [pc, #628]	; (800b09c <_strtod_l+0x584>)
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	a81b      	add	r0, sp, #108	; 0x6c
 800ae2c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae2e:	f001 fe09 	bl	800ca44 <__match>
 800ae32:	b910      	cbnz	r0, 800ae3a <_strtod_l+0x322>
 800ae34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae36:	3301      	adds	r3, #1
 800ae38:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae3a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b0b0 <_strtod_l+0x598>
 800ae3e:	f04f 0a00 	mov.w	sl, #0
 800ae42:	e6a8      	b.n	800ab96 <_strtod_l+0x7e>
 800ae44:	210a      	movs	r1, #10
 800ae46:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ae4a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae4e:	e7b8      	b.n	800adc2 <_strtod_l+0x2aa>
 800ae50:	46be      	mov	lr, r7
 800ae52:	e7c8      	b.n	800ade6 <_strtod_l+0x2ce>
 800ae54:	2b69      	cmp	r3, #105	; 0x69
 800ae56:	d0de      	beq.n	800ae16 <_strtod_l+0x2fe>
 800ae58:	2b6e      	cmp	r3, #110	; 0x6e
 800ae5a:	f47f aeba 	bne.w	800abd2 <_strtod_l+0xba>
 800ae5e:	4990      	ldr	r1, [pc, #576]	; (800b0a0 <_strtod_l+0x588>)
 800ae60:	a81b      	add	r0, sp, #108	; 0x6c
 800ae62:	f001 fdef 	bl	800ca44 <__match>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f aeb3 	beq.w	800abd2 <_strtod_l+0xba>
 800ae6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b28      	cmp	r3, #40	; 0x28
 800ae72:	d10e      	bne.n	800ae92 <_strtod_l+0x37a>
 800ae74:	aa1e      	add	r2, sp, #120	; 0x78
 800ae76:	498b      	ldr	r1, [pc, #556]	; (800b0a4 <_strtod_l+0x58c>)
 800ae78:	a81b      	add	r0, sp, #108	; 0x6c
 800ae7a:	f001 fdf7 	bl	800ca6c <__hexnan>
 800ae7e:	2805      	cmp	r0, #5
 800ae80:	d107      	bne.n	800ae92 <_strtod_l+0x37a>
 800ae82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae84:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ae88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae90:	e681      	b.n	800ab96 <_strtod_l+0x7e>
 800ae92:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b0b8 <_strtod_l+0x5a0>
 800ae96:	e7d2      	b.n	800ae3e <_strtod_l+0x326>
 800ae98:	ebae 0302 	sub.w	r3, lr, r2
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	9b05      	ldr	r3, [sp, #20]
 800aea0:	9807      	ldr	r0, [sp, #28]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	bf08      	it	eq
 800aea6:	4623      	moveq	r3, r4
 800aea8:	2c10      	cmp	r4, #16
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	46a0      	mov	r8, r4
 800aeae:	bfa8      	it	ge
 800aeb0:	f04f 0810 	movge.w	r8, #16
 800aeb4:	f7f5 fb46 	bl	8000544 <__aeabi_ui2d>
 800aeb8:	2c09      	cmp	r4, #9
 800aeba:	4682      	mov	sl, r0
 800aebc:	468b      	mov	fp, r1
 800aebe:	dc13      	bgt.n	800aee8 <_strtod_l+0x3d0>
 800aec0:	9b06      	ldr	r3, [sp, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f43f ae67 	beq.w	800ab96 <_strtod_l+0x7e>
 800aec8:	9b06      	ldr	r3, [sp, #24]
 800aeca:	dd7a      	ble.n	800afc2 <_strtod_l+0x4aa>
 800aecc:	2b16      	cmp	r3, #22
 800aece:	dc61      	bgt.n	800af94 <_strtod_l+0x47c>
 800aed0:	4a75      	ldr	r2, [pc, #468]	; (800b0a8 <_strtod_l+0x590>)
 800aed2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800aed6:	e9de 0100 	ldrd	r0, r1, [lr]
 800aeda:	4652      	mov	r2, sl
 800aedc:	465b      	mov	r3, fp
 800aede:	f7f5 fbab 	bl	8000638 <__aeabi_dmul>
 800aee2:	4682      	mov	sl, r0
 800aee4:	468b      	mov	fp, r1
 800aee6:	e656      	b.n	800ab96 <_strtod_l+0x7e>
 800aee8:	4b6f      	ldr	r3, [pc, #444]	; (800b0a8 <_strtod_l+0x590>)
 800aeea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aeee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aef2:	f7f5 fba1 	bl	8000638 <__aeabi_dmul>
 800aef6:	4606      	mov	r6, r0
 800aef8:	4628      	mov	r0, r5
 800aefa:	460f      	mov	r7, r1
 800aefc:	f7f5 fb22 	bl	8000544 <__aeabi_ui2d>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4630      	mov	r0, r6
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 f9e0 	bl	80002cc <__adddf3>
 800af0c:	2c0f      	cmp	r4, #15
 800af0e:	4682      	mov	sl, r0
 800af10:	468b      	mov	fp, r1
 800af12:	ddd5      	ble.n	800aec0 <_strtod_l+0x3a8>
 800af14:	9b06      	ldr	r3, [sp, #24]
 800af16:	eba4 0808 	sub.w	r8, r4, r8
 800af1a:	4498      	add	r8, r3
 800af1c:	f1b8 0f00 	cmp.w	r8, #0
 800af20:	f340 8096 	ble.w	800b050 <_strtod_l+0x538>
 800af24:	f018 030f 	ands.w	r3, r8, #15
 800af28:	d00a      	beq.n	800af40 <_strtod_l+0x428>
 800af2a:	495f      	ldr	r1, [pc, #380]	; (800b0a8 <_strtod_l+0x590>)
 800af2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af30:	4652      	mov	r2, sl
 800af32:	465b      	mov	r3, fp
 800af34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af38:	f7f5 fb7e 	bl	8000638 <__aeabi_dmul>
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	f038 080f 	bics.w	r8, r8, #15
 800af44:	d073      	beq.n	800b02e <_strtod_l+0x516>
 800af46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af4a:	dd47      	ble.n	800afdc <_strtod_l+0x4c4>
 800af4c:	2400      	movs	r4, #0
 800af4e:	46a0      	mov	r8, r4
 800af50:	9407      	str	r4, [sp, #28]
 800af52:	9405      	str	r4, [sp, #20]
 800af54:	2322      	movs	r3, #34	; 0x22
 800af56:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b0b0 <_strtod_l+0x598>
 800af5a:	f8c9 3000 	str.w	r3, [r9]
 800af5e:	f04f 0a00 	mov.w	sl, #0
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f43f ae16 	beq.w	800ab96 <_strtod_l+0x7e>
 800af6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af6c:	4648      	mov	r0, r9
 800af6e:	f001 fe6f 	bl	800cc50 <_Bfree>
 800af72:	9905      	ldr	r1, [sp, #20]
 800af74:	4648      	mov	r0, r9
 800af76:	f001 fe6b 	bl	800cc50 <_Bfree>
 800af7a:	4641      	mov	r1, r8
 800af7c:	4648      	mov	r0, r9
 800af7e:	f001 fe67 	bl	800cc50 <_Bfree>
 800af82:	9907      	ldr	r1, [sp, #28]
 800af84:	4648      	mov	r0, r9
 800af86:	f001 fe63 	bl	800cc50 <_Bfree>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4648      	mov	r0, r9
 800af8e:	f001 fe5f 	bl	800cc50 <_Bfree>
 800af92:	e600      	b.n	800ab96 <_strtod_l+0x7e>
 800af94:	9a06      	ldr	r2, [sp, #24]
 800af96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800af9a:	4293      	cmp	r3, r2
 800af9c:	dbba      	blt.n	800af14 <_strtod_l+0x3fc>
 800af9e:	4d42      	ldr	r5, [pc, #264]	; (800b0a8 <_strtod_l+0x590>)
 800afa0:	f1c4 040f 	rsb	r4, r4, #15
 800afa4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800afa8:	4652      	mov	r2, sl
 800afaa:	465b      	mov	r3, fp
 800afac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb0:	f7f5 fb42 	bl	8000638 <__aeabi_dmul>
 800afb4:	9b06      	ldr	r3, [sp, #24]
 800afb6:	1b1c      	subs	r4, r3, r4
 800afb8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800afbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc0:	e78d      	b.n	800aede <_strtod_l+0x3c6>
 800afc2:	f113 0f16 	cmn.w	r3, #22
 800afc6:	dba5      	blt.n	800af14 <_strtod_l+0x3fc>
 800afc8:	4a37      	ldr	r2, [pc, #220]	; (800b0a8 <_strtod_l+0x590>)
 800afca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800afce:	e9d2 2300 	ldrd	r2, r3, [r2]
 800afd2:	4650      	mov	r0, sl
 800afd4:	4659      	mov	r1, fp
 800afd6:	f7f5 fc59 	bl	800088c <__aeabi_ddiv>
 800afda:	e782      	b.n	800aee2 <_strtod_l+0x3ca>
 800afdc:	2300      	movs	r3, #0
 800afde:	4e33      	ldr	r6, [pc, #204]	; (800b0ac <_strtod_l+0x594>)
 800afe0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800afe4:	4650      	mov	r0, sl
 800afe6:	4659      	mov	r1, fp
 800afe8:	461d      	mov	r5, r3
 800afea:	f1b8 0f01 	cmp.w	r8, #1
 800afee:	dc21      	bgt.n	800b034 <_strtod_l+0x51c>
 800aff0:	b10b      	cbz	r3, 800aff6 <_strtod_l+0x4de>
 800aff2:	4682      	mov	sl, r0
 800aff4:	468b      	mov	fp, r1
 800aff6:	4b2d      	ldr	r3, [pc, #180]	; (800b0ac <_strtod_l+0x594>)
 800aff8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800affc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b000:	4652      	mov	r2, sl
 800b002:	465b      	mov	r3, fp
 800b004:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b008:	f7f5 fb16 	bl	8000638 <__aeabi_dmul>
 800b00c:	4b28      	ldr	r3, [pc, #160]	; (800b0b0 <_strtod_l+0x598>)
 800b00e:	460a      	mov	r2, r1
 800b010:	400b      	ands	r3, r1
 800b012:	4928      	ldr	r1, [pc, #160]	; (800b0b4 <_strtod_l+0x59c>)
 800b014:	428b      	cmp	r3, r1
 800b016:	4682      	mov	sl, r0
 800b018:	d898      	bhi.n	800af4c <_strtod_l+0x434>
 800b01a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b01e:	428b      	cmp	r3, r1
 800b020:	bf86      	itte	hi
 800b022:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b0bc <_strtod_l+0x5a4>
 800b026:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b02a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b02e:	2300      	movs	r3, #0
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	e077      	b.n	800b124 <_strtod_l+0x60c>
 800b034:	f018 0f01 	tst.w	r8, #1
 800b038:	d006      	beq.n	800b048 <_strtod_l+0x530>
 800b03a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 faf9 	bl	8000638 <__aeabi_dmul>
 800b046:	2301      	movs	r3, #1
 800b048:	3501      	adds	r5, #1
 800b04a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b04e:	e7cc      	b.n	800afea <_strtod_l+0x4d2>
 800b050:	d0ed      	beq.n	800b02e <_strtod_l+0x516>
 800b052:	f1c8 0800 	rsb	r8, r8, #0
 800b056:	f018 020f 	ands.w	r2, r8, #15
 800b05a:	d00a      	beq.n	800b072 <_strtod_l+0x55a>
 800b05c:	4b12      	ldr	r3, [pc, #72]	; (800b0a8 <_strtod_l+0x590>)
 800b05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b062:	4650      	mov	r0, sl
 800b064:	4659      	mov	r1, fp
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 fc0f 	bl	800088c <__aeabi_ddiv>
 800b06e:	4682      	mov	sl, r0
 800b070:	468b      	mov	fp, r1
 800b072:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b076:	d0da      	beq.n	800b02e <_strtod_l+0x516>
 800b078:	f1b8 0f1f 	cmp.w	r8, #31
 800b07c:	dd20      	ble.n	800b0c0 <_strtod_l+0x5a8>
 800b07e:	2400      	movs	r4, #0
 800b080:	46a0      	mov	r8, r4
 800b082:	9407      	str	r4, [sp, #28]
 800b084:	9405      	str	r4, [sp, #20]
 800b086:	2322      	movs	r3, #34	; 0x22
 800b088:	f04f 0a00 	mov.w	sl, #0
 800b08c:	f04f 0b00 	mov.w	fp, #0
 800b090:	f8c9 3000 	str.w	r3, [r9]
 800b094:	e765      	b.n	800af62 <_strtod_l+0x44a>
 800b096:	bf00      	nop
 800b098:	08010cb1 	.word	0x08010cb1
 800b09c:	08010d60 	.word	0x08010d60
 800b0a0:	08010cb9 	.word	0x08010cb9
 800b0a4:	08010cfc 	.word	0x08010cfc
 800b0a8:	08010da0 	.word	0x08010da0
 800b0ac:	08010d78 	.word	0x08010d78
 800b0b0:	7ff00000 	.word	0x7ff00000
 800b0b4:	7ca00000 	.word	0x7ca00000
 800b0b8:	fff80000 	.word	0xfff80000
 800b0bc:	7fefffff 	.word	0x7fefffff
 800b0c0:	f018 0310 	ands.w	r3, r8, #16
 800b0c4:	bf18      	it	ne
 800b0c6:	236a      	movne	r3, #106	; 0x6a
 800b0c8:	4da0      	ldr	r5, [pc, #640]	; (800b34c <_strtod_l+0x834>)
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f1b8 0f00 	cmp.w	r8, #0
 800b0d6:	f300 810a 	bgt.w	800b2ee <_strtod_l+0x7d6>
 800b0da:	b10b      	cbz	r3, 800b0e0 <_strtod_l+0x5c8>
 800b0dc:	4682      	mov	sl, r0
 800b0de:	468b      	mov	fp, r1
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	b1bb      	cbz	r3, 800b114 <_strtod_l+0x5fc>
 800b0e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b0e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	4659      	mov	r1, fp
 800b0f0:	dd10      	ble.n	800b114 <_strtod_l+0x5fc>
 800b0f2:	2b1f      	cmp	r3, #31
 800b0f4:	f340 8107 	ble.w	800b306 <_strtod_l+0x7ee>
 800b0f8:	2b34      	cmp	r3, #52	; 0x34
 800b0fa:	bfde      	ittt	le
 800b0fc:	3b20      	suble	r3, #32
 800b0fe:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b102:	fa02 f303 	lslle.w	r3, r2, r3
 800b106:	f04f 0a00 	mov.w	sl, #0
 800b10a:	bfcc      	ite	gt
 800b10c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b110:	ea03 0b01 	andle.w	fp, r3, r1
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fcf4 	bl	8000b08 <__aeabi_dcmpeq>
 800b120:	2800      	cmp	r0, #0
 800b122:	d1ac      	bne.n	800b07e <_strtod_l+0x566>
 800b124:	9b07      	ldr	r3, [sp, #28]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	9a05      	ldr	r2, [sp, #20]
 800b12a:	9908      	ldr	r1, [sp, #32]
 800b12c:	4623      	mov	r3, r4
 800b12e:	4648      	mov	r0, r9
 800b130:	f001 fde0 	bl	800ccf4 <__s2b>
 800b134:	9007      	str	r0, [sp, #28]
 800b136:	2800      	cmp	r0, #0
 800b138:	f43f af08 	beq.w	800af4c <_strtod_l+0x434>
 800b13c:	9a06      	ldr	r2, [sp, #24]
 800b13e:	9b06      	ldr	r3, [sp, #24]
 800b140:	2a00      	cmp	r2, #0
 800b142:	f1c3 0300 	rsb	r3, r3, #0
 800b146:	bfa8      	it	ge
 800b148:	2300      	movge	r3, #0
 800b14a:	930e      	str	r3, [sp, #56]	; 0x38
 800b14c:	2400      	movs	r4, #0
 800b14e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b152:	9316      	str	r3, [sp, #88]	; 0x58
 800b154:	46a0      	mov	r8, r4
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	4648      	mov	r0, r9
 800b15a:	6859      	ldr	r1, [r3, #4]
 800b15c:	f001 fd44 	bl	800cbe8 <_Balloc>
 800b160:	9005      	str	r0, [sp, #20]
 800b162:	2800      	cmp	r0, #0
 800b164:	f43f aef6 	beq.w	800af54 <_strtod_l+0x43c>
 800b168:	9b07      	ldr	r3, [sp, #28]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	3202      	adds	r2, #2
 800b16e:	f103 010c 	add.w	r1, r3, #12
 800b172:	0092      	lsls	r2, r2, #2
 800b174:	300c      	adds	r0, #12
 800b176:	f7fe fe07 	bl	8009d88 <memcpy>
 800b17a:	aa1e      	add	r2, sp, #120	; 0x78
 800b17c:	a91d      	add	r1, sp, #116	; 0x74
 800b17e:	ec4b ab10 	vmov	d0, sl, fp
 800b182:	4648      	mov	r0, r9
 800b184:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b188:	f002 f870 	bl	800d26c <__d2b>
 800b18c:	901c      	str	r0, [sp, #112]	; 0x70
 800b18e:	2800      	cmp	r0, #0
 800b190:	f43f aee0 	beq.w	800af54 <_strtod_l+0x43c>
 800b194:	2101      	movs	r1, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f001 fe38 	bl	800ce0c <__i2b>
 800b19c:	4680      	mov	r8, r0
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f aed8 	beq.w	800af54 <_strtod_l+0x43c>
 800b1a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b1a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b1a8:	2e00      	cmp	r6, #0
 800b1aa:	bfab      	itete	ge
 800b1ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b1ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b1b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b1b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b1b4:	bfac      	ite	ge
 800b1b6:	18f7      	addge	r7, r6, r3
 800b1b8:	1b9d      	sublt	r5, r3, r6
 800b1ba:	9b04      	ldr	r3, [sp, #16]
 800b1bc:	1af6      	subs	r6, r6, r3
 800b1be:	4416      	add	r6, r2
 800b1c0:	4b63      	ldr	r3, [pc, #396]	; (800b350 <_strtod_l+0x838>)
 800b1c2:	3e01      	subs	r6, #1
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1ca:	f280 80af 	bge.w	800b32c <_strtod_l+0x814>
 800b1ce:	1b9b      	subs	r3, r3, r6
 800b1d0:	2b1f      	cmp	r3, #31
 800b1d2:	eba2 0203 	sub.w	r2, r2, r3
 800b1d6:	f04f 0101 	mov.w	r1, #1
 800b1da:	f300 809b 	bgt.w	800b314 <_strtod_l+0x7fc>
 800b1de:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1e8:	18be      	adds	r6, r7, r2
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	42b7      	cmp	r7, r6
 800b1ee:	4415      	add	r5, r2
 800b1f0:	441d      	add	r5, r3
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	bfa8      	it	ge
 800b1f6:	4633      	movge	r3, r6
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	bfa8      	it	ge
 800b1fc:	462b      	movge	r3, r5
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bfc2      	ittt	gt
 800b202:	1af6      	subgt	r6, r6, r3
 800b204:	1aed      	subgt	r5, r5, r3
 800b206:	1aff      	subgt	r7, r7, r3
 800b208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b20a:	b1bb      	cbz	r3, 800b23c <_strtod_l+0x724>
 800b20c:	4641      	mov	r1, r8
 800b20e:	461a      	mov	r2, r3
 800b210:	4648      	mov	r0, r9
 800b212:	f001 fe9b 	bl	800cf4c <__pow5mult>
 800b216:	4680      	mov	r8, r0
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f ae9b 	beq.w	800af54 <_strtod_l+0x43c>
 800b21e:	4601      	mov	r1, r0
 800b220:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b222:	4648      	mov	r0, r9
 800b224:	f001 fdfb 	bl	800ce1e <__multiply>
 800b228:	900c      	str	r0, [sp, #48]	; 0x30
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f ae92 	beq.w	800af54 <_strtod_l+0x43c>
 800b230:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b232:	4648      	mov	r0, r9
 800b234:	f001 fd0c 	bl	800cc50 <_Bfree>
 800b238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23a:	931c      	str	r3, [sp, #112]	; 0x70
 800b23c:	2e00      	cmp	r6, #0
 800b23e:	dc7a      	bgt.n	800b336 <_strtod_l+0x81e>
 800b240:	9b06      	ldr	r3, [sp, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd08      	ble.n	800b258 <_strtod_l+0x740>
 800b246:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b248:	9905      	ldr	r1, [sp, #20]
 800b24a:	4648      	mov	r0, r9
 800b24c:	f001 fe7e 	bl	800cf4c <__pow5mult>
 800b250:	9005      	str	r0, [sp, #20]
 800b252:	2800      	cmp	r0, #0
 800b254:	f43f ae7e 	beq.w	800af54 <_strtod_l+0x43c>
 800b258:	2d00      	cmp	r5, #0
 800b25a:	dd08      	ble.n	800b26e <_strtod_l+0x756>
 800b25c:	462a      	mov	r2, r5
 800b25e:	9905      	ldr	r1, [sp, #20]
 800b260:	4648      	mov	r0, r9
 800b262:	f001 fec1 	bl	800cfe8 <__lshift>
 800b266:	9005      	str	r0, [sp, #20]
 800b268:	2800      	cmp	r0, #0
 800b26a:	f43f ae73 	beq.w	800af54 <_strtod_l+0x43c>
 800b26e:	2f00      	cmp	r7, #0
 800b270:	dd08      	ble.n	800b284 <_strtod_l+0x76c>
 800b272:	4641      	mov	r1, r8
 800b274:	463a      	mov	r2, r7
 800b276:	4648      	mov	r0, r9
 800b278:	f001 feb6 	bl	800cfe8 <__lshift>
 800b27c:	4680      	mov	r8, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	f43f ae68 	beq.w	800af54 <_strtod_l+0x43c>
 800b284:	9a05      	ldr	r2, [sp, #20]
 800b286:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b288:	4648      	mov	r0, r9
 800b28a:	f001 ff1b 	bl	800d0c4 <__mdiff>
 800b28e:	4604      	mov	r4, r0
 800b290:	2800      	cmp	r0, #0
 800b292:	f43f ae5f 	beq.w	800af54 <_strtod_l+0x43c>
 800b296:	68c3      	ldr	r3, [r0, #12]
 800b298:	930c      	str	r3, [sp, #48]	; 0x30
 800b29a:	2300      	movs	r3, #0
 800b29c:	60c3      	str	r3, [r0, #12]
 800b29e:	4641      	mov	r1, r8
 800b2a0:	f001 fef6 	bl	800d090 <__mcmp>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	da55      	bge.n	800b354 <_strtod_l+0x83c>
 800b2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2aa:	b9e3      	cbnz	r3, 800b2e6 <_strtod_l+0x7ce>
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d119      	bne.n	800b2e6 <_strtod_l+0x7ce>
 800b2b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2b6:	b9b3      	cbnz	r3, 800b2e6 <_strtod_l+0x7ce>
 800b2b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2bc:	0d1b      	lsrs	r3, r3, #20
 800b2be:	051b      	lsls	r3, r3, #20
 800b2c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2c4:	d90f      	bls.n	800b2e6 <_strtod_l+0x7ce>
 800b2c6:	6963      	ldr	r3, [r4, #20]
 800b2c8:	b913      	cbnz	r3, 800b2d0 <_strtod_l+0x7b8>
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	dd0a      	ble.n	800b2e6 <_strtod_l+0x7ce>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	4648      	mov	r0, r9
 800b2d6:	f001 fe87 	bl	800cfe8 <__lshift>
 800b2da:	4641      	mov	r1, r8
 800b2dc:	4604      	mov	r4, r0
 800b2de:	f001 fed7 	bl	800d090 <__mcmp>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	dc67      	bgt.n	800b3b6 <_strtod_l+0x89e>
 800b2e6:	9b04      	ldr	r3, [sp, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d171      	bne.n	800b3d0 <_strtod_l+0x8b8>
 800b2ec:	e63d      	b.n	800af6a <_strtod_l+0x452>
 800b2ee:	f018 0f01 	tst.w	r8, #1
 800b2f2:	d004      	beq.n	800b2fe <_strtod_l+0x7e6>
 800b2f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2f8:	f7f5 f99e 	bl	8000638 <__aeabi_dmul>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b302:	3508      	adds	r5, #8
 800b304:	e6e5      	b.n	800b0d2 <_strtod_l+0x5ba>
 800b306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30a:	fa02 f303 	lsl.w	r3, r2, r3
 800b30e:	ea03 0a0a 	and.w	sl, r3, sl
 800b312:	e6ff      	b.n	800b114 <_strtod_l+0x5fc>
 800b314:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b318:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b31c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b320:	36e2      	adds	r6, #226	; 0xe2
 800b322:	fa01 f306 	lsl.w	r3, r1, r6
 800b326:	930a      	str	r3, [sp, #40]	; 0x28
 800b328:	910f      	str	r1, [sp, #60]	; 0x3c
 800b32a:	e75d      	b.n	800b1e8 <_strtod_l+0x6d0>
 800b32c:	2300      	movs	r3, #0
 800b32e:	930a      	str	r3, [sp, #40]	; 0x28
 800b330:	2301      	movs	r3, #1
 800b332:	930f      	str	r3, [sp, #60]	; 0x3c
 800b334:	e758      	b.n	800b1e8 <_strtod_l+0x6d0>
 800b336:	4632      	mov	r2, r6
 800b338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b33a:	4648      	mov	r0, r9
 800b33c:	f001 fe54 	bl	800cfe8 <__lshift>
 800b340:	901c      	str	r0, [sp, #112]	; 0x70
 800b342:	2800      	cmp	r0, #0
 800b344:	f47f af7c 	bne.w	800b240 <_strtod_l+0x728>
 800b348:	e604      	b.n	800af54 <_strtod_l+0x43c>
 800b34a:	bf00      	nop
 800b34c:	08010d10 	.word	0x08010d10
 800b350:	fffffc02 	.word	0xfffffc02
 800b354:	465d      	mov	r5, fp
 800b356:	f040 8086 	bne.w	800b466 <_strtod_l+0x94e>
 800b35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b360:	b32a      	cbz	r2, 800b3ae <_strtod_l+0x896>
 800b362:	4aaf      	ldr	r2, [pc, #700]	; (800b620 <_strtod_l+0xb08>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d153      	bne.n	800b410 <_strtod_l+0x8f8>
 800b368:	9b04      	ldr	r3, [sp, #16]
 800b36a:	4650      	mov	r0, sl
 800b36c:	b1d3      	cbz	r3, 800b3a4 <_strtod_l+0x88c>
 800b36e:	4aad      	ldr	r2, [pc, #692]	; (800b624 <_strtod_l+0xb0c>)
 800b370:	402a      	ands	r2, r5
 800b372:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b376:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b37a:	d816      	bhi.n	800b3aa <_strtod_l+0x892>
 800b37c:	0d12      	lsrs	r2, r2, #20
 800b37e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b382:	fa01 f303 	lsl.w	r3, r1, r3
 800b386:	4298      	cmp	r0, r3
 800b388:	d142      	bne.n	800b410 <_strtod_l+0x8f8>
 800b38a:	4ba7      	ldr	r3, [pc, #668]	; (800b628 <_strtod_l+0xb10>)
 800b38c:	429d      	cmp	r5, r3
 800b38e:	d102      	bne.n	800b396 <_strtod_l+0x87e>
 800b390:	3001      	adds	r0, #1
 800b392:	f43f addf 	beq.w	800af54 <_strtod_l+0x43c>
 800b396:	4ba3      	ldr	r3, [pc, #652]	; (800b624 <_strtod_l+0xb0c>)
 800b398:	402b      	ands	r3, r5
 800b39a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b39e:	f04f 0a00 	mov.w	sl, #0
 800b3a2:	e7a0      	b.n	800b2e6 <_strtod_l+0x7ce>
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a8:	e7ed      	b.n	800b386 <_strtod_l+0x86e>
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	e7eb      	b.n	800b386 <_strtod_l+0x86e>
 800b3ae:	bb7b      	cbnz	r3, 800b410 <_strtod_l+0x8f8>
 800b3b0:	f1ba 0f00 	cmp.w	sl, #0
 800b3b4:	d12c      	bne.n	800b410 <_strtod_l+0x8f8>
 800b3b6:	9904      	ldr	r1, [sp, #16]
 800b3b8:	4a9a      	ldr	r2, [pc, #616]	; (800b624 <_strtod_l+0xb0c>)
 800b3ba:	465b      	mov	r3, fp
 800b3bc:	b1f1      	cbz	r1, 800b3fc <_strtod_l+0x8e4>
 800b3be:	ea02 010b 	and.w	r1, r2, fp
 800b3c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b3c6:	dc19      	bgt.n	800b3fc <_strtod_l+0x8e4>
 800b3c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3cc:	f77f ae5b 	ble.w	800b086 <_strtod_l+0x56e>
 800b3d0:	4a96      	ldr	r2, [pc, #600]	; (800b62c <_strtod_l+0xb14>)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b3e0:	f7f5 f92a 	bl	8000638 <__aeabi_dmul>
 800b3e4:	4682      	mov	sl, r0
 800b3e6:	468b      	mov	fp, r1
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	f47f adbe 	bne.w	800af6a <_strtod_l+0x452>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	f47f adbb 	bne.w	800af6a <_strtod_l+0x452>
 800b3f4:	2322      	movs	r3, #34	; 0x22
 800b3f6:	f8c9 3000 	str.w	r3, [r9]
 800b3fa:	e5b6      	b.n	800af6a <_strtod_l+0x452>
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b402:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b406:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b40a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b40e:	e76a      	b.n	800b2e6 <_strtod_l+0x7ce>
 800b410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b412:	b193      	cbz	r3, 800b43a <_strtod_l+0x922>
 800b414:	422b      	tst	r3, r5
 800b416:	f43f af66 	beq.w	800b2e6 <_strtod_l+0x7ce>
 800b41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b41c:	9a04      	ldr	r2, [sp, #16]
 800b41e:	4650      	mov	r0, sl
 800b420:	4659      	mov	r1, fp
 800b422:	b173      	cbz	r3, 800b442 <_strtod_l+0x92a>
 800b424:	f7ff fb5c 	bl	800aae0 <sulp>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b430:	f7f4 ff4c 	bl	80002cc <__adddf3>
 800b434:	4682      	mov	sl, r0
 800b436:	468b      	mov	fp, r1
 800b438:	e755      	b.n	800b2e6 <_strtod_l+0x7ce>
 800b43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b43c:	ea13 0f0a 	tst.w	r3, sl
 800b440:	e7e9      	b.n	800b416 <_strtod_l+0x8fe>
 800b442:	f7ff fb4d 	bl	800aae0 <sulp>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b44e:	f7f4 ff3b 	bl	80002c8 <__aeabi_dsub>
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	4682      	mov	sl, r0
 800b458:	468b      	mov	fp, r1
 800b45a:	f7f5 fb55 	bl	8000b08 <__aeabi_dcmpeq>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f47f ae11 	bne.w	800b086 <_strtod_l+0x56e>
 800b464:	e73f      	b.n	800b2e6 <_strtod_l+0x7ce>
 800b466:	4641      	mov	r1, r8
 800b468:	4620      	mov	r0, r4
 800b46a:	f001 ff4e 	bl	800d30a <__ratio>
 800b46e:	ec57 6b10 	vmov	r6, r7, d0
 800b472:	2200      	movs	r2, #0
 800b474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b478:	ee10 0a10 	vmov	r0, s0
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f5 fb57 	bl	8000b30 <__aeabi_dcmple>
 800b482:	2800      	cmp	r0, #0
 800b484:	d077      	beq.n	800b576 <_strtod_l+0xa5e>
 800b486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d04a      	beq.n	800b522 <_strtod_l+0xa0a>
 800b48c:	4b68      	ldr	r3, [pc, #416]	; (800b630 <_strtod_l+0xb18>)
 800b48e:	2200      	movs	r2, #0
 800b490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b494:	4f66      	ldr	r7, [pc, #408]	; (800b630 <_strtod_l+0xb18>)
 800b496:	2600      	movs	r6, #0
 800b498:	4b62      	ldr	r3, [pc, #392]	; (800b624 <_strtod_l+0xb0c>)
 800b49a:	402b      	ands	r3, r5
 800b49c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b49e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4a0:	4b64      	ldr	r3, [pc, #400]	; (800b634 <_strtod_l+0xb1c>)
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	f040 80ce 	bne.w	800b644 <_strtod_l+0xb2c>
 800b4a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b4b4:	ec4b ab10 	vmov	d0, sl, fp
 800b4b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b4bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b4c0:	f001 fe5e 	bl	800d180 <__ulp>
 800b4c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4c8:	ec53 2b10 	vmov	r2, r3, d0
 800b4cc:	f7f5 f8b4 	bl	8000638 <__aeabi_dmul>
 800b4d0:	4652      	mov	r2, sl
 800b4d2:	465b      	mov	r3, fp
 800b4d4:	f7f4 fefa 	bl	80002cc <__adddf3>
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4952      	ldr	r1, [pc, #328]	; (800b624 <_strtod_l+0xb0c>)
 800b4dc:	4a56      	ldr	r2, [pc, #344]	; (800b638 <_strtod_l+0xb20>)
 800b4de:	4019      	ands	r1, r3
 800b4e0:	4291      	cmp	r1, r2
 800b4e2:	4682      	mov	sl, r0
 800b4e4:	d95b      	bls.n	800b59e <_strtod_l+0xa86>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d103      	bne.n	800b4f8 <_strtod_l+0x9e0>
 800b4f0:	9b08      	ldr	r3, [sp, #32]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	f43f ad2e 	beq.w	800af54 <_strtod_l+0x43c>
 800b4f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b628 <_strtod_l+0xb10>
 800b4fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b500:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b502:	4648      	mov	r0, r9
 800b504:	f001 fba4 	bl	800cc50 <_Bfree>
 800b508:	9905      	ldr	r1, [sp, #20]
 800b50a:	4648      	mov	r0, r9
 800b50c:	f001 fba0 	bl	800cc50 <_Bfree>
 800b510:	4641      	mov	r1, r8
 800b512:	4648      	mov	r0, r9
 800b514:	f001 fb9c 	bl	800cc50 <_Bfree>
 800b518:	4621      	mov	r1, r4
 800b51a:	4648      	mov	r0, r9
 800b51c:	f001 fb98 	bl	800cc50 <_Bfree>
 800b520:	e619      	b.n	800b156 <_strtod_l+0x63e>
 800b522:	f1ba 0f00 	cmp.w	sl, #0
 800b526:	d11a      	bne.n	800b55e <_strtod_l+0xa46>
 800b528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b52c:	b9eb      	cbnz	r3, 800b56a <_strtod_l+0xa52>
 800b52e:	2200      	movs	r2, #0
 800b530:	4b3f      	ldr	r3, [pc, #252]	; (800b630 <_strtod_l+0xb18>)
 800b532:	4630      	mov	r0, r6
 800b534:	4639      	mov	r1, r7
 800b536:	f7f5 faf1 	bl	8000b1c <__aeabi_dcmplt>
 800b53a:	b9c8      	cbnz	r0, 800b570 <_strtod_l+0xa58>
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	2200      	movs	r2, #0
 800b542:	4b3e      	ldr	r3, [pc, #248]	; (800b63c <_strtod_l+0xb24>)
 800b544:	f7f5 f878 	bl	8000638 <__aeabi_dmul>
 800b548:	4606      	mov	r6, r0
 800b54a:	460f      	mov	r7, r1
 800b54c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b550:	9618      	str	r6, [sp, #96]	; 0x60
 800b552:	9319      	str	r3, [sp, #100]	; 0x64
 800b554:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b558:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b55c:	e79c      	b.n	800b498 <_strtod_l+0x980>
 800b55e:	f1ba 0f01 	cmp.w	sl, #1
 800b562:	d102      	bne.n	800b56a <_strtod_l+0xa52>
 800b564:	2d00      	cmp	r5, #0
 800b566:	f43f ad8e 	beq.w	800b086 <_strtod_l+0x56e>
 800b56a:	2200      	movs	r2, #0
 800b56c:	4b34      	ldr	r3, [pc, #208]	; (800b640 <_strtod_l+0xb28>)
 800b56e:	e78f      	b.n	800b490 <_strtod_l+0x978>
 800b570:	2600      	movs	r6, #0
 800b572:	4f32      	ldr	r7, [pc, #200]	; (800b63c <_strtod_l+0xb24>)
 800b574:	e7ea      	b.n	800b54c <_strtod_l+0xa34>
 800b576:	4b31      	ldr	r3, [pc, #196]	; (800b63c <_strtod_l+0xb24>)
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	2200      	movs	r2, #0
 800b57e:	f7f5 f85b 	bl	8000638 <__aeabi_dmul>
 800b582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	b933      	cbnz	r3, 800b598 <_strtod_l+0xa80>
 800b58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b58e:	9010      	str	r0, [sp, #64]	; 0x40
 800b590:	9311      	str	r3, [sp, #68]	; 0x44
 800b592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b596:	e7df      	b.n	800b558 <_strtod_l+0xa40>
 800b598:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b59c:	e7f9      	b.n	800b592 <_strtod_l+0xa7a>
 800b59e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b5a2:	9b04      	ldr	r3, [sp, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ab      	bne.n	800b500 <_strtod_l+0x9e8>
 800b5a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5ac:	0d1b      	lsrs	r3, r3, #20
 800b5ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5b0:	051b      	lsls	r3, r3, #20
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	465d      	mov	r5, fp
 800b5b6:	d1a3      	bne.n	800b500 <_strtod_l+0x9e8>
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7f5 faec 	bl	8000b98 <__aeabi_d2iz>
 800b5c0:	f7f4 ffd0 	bl	8000564 <__aeabi_i2d>
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7f4 fe7c 	bl	80002c8 <__aeabi_dsub>
 800b5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	b933      	cbnz	r3, 800b5e6 <_strtod_l+0xace>
 800b5d8:	f1ba 0f00 	cmp.w	sl, #0
 800b5dc:	d103      	bne.n	800b5e6 <_strtod_l+0xace>
 800b5de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b5e2:	2d00      	cmp	r5, #0
 800b5e4:	d06d      	beq.n	800b6c2 <_strtod_l+0xbaa>
 800b5e6:	a30a      	add	r3, pc, #40	; (adr r3, 800b610 <_strtod_l+0xaf8>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	f7f5 fa94 	bl	8000b1c <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f47f acb8 	bne.w	800af6a <_strtod_l+0x452>
 800b5fa:	a307      	add	r3, pc, #28	; (adr r3, 800b618 <_strtod_l+0xb00>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f5 faa8 	bl	8000b58 <__aeabi_dcmpgt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	f43f af79 	beq.w	800b500 <_strtod_l+0x9e8>
 800b60e:	e4ac      	b.n	800af6a <_strtod_l+0x452>
 800b610:	94a03595 	.word	0x94a03595
 800b614:	3fdfffff 	.word	0x3fdfffff
 800b618:	35afe535 	.word	0x35afe535
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	000fffff 	.word	0x000fffff
 800b624:	7ff00000 	.word	0x7ff00000
 800b628:	7fefffff 	.word	0x7fefffff
 800b62c:	39500000 	.word	0x39500000
 800b630:	3ff00000 	.word	0x3ff00000
 800b634:	7fe00000 	.word	0x7fe00000
 800b638:	7c9fffff 	.word	0x7c9fffff
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	bff00000 	.word	0xbff00000
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	b333      	cbz	r3, 800b696 <_strtod_l+0xb7e>
 800b648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b64a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b64e:	d822      	bhi.n	800b696 <_strtod_l+0xb7e>
 800b650:	a327      	add	r3, pc, #156	; (adr r3, 800b6f0 <_strtod_l+0xbd8>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f5 fa69 	bl	8000b30 <__aeabi_dcmple>
 800b65e:	b1a0      	cbz	r0, 800b68a <_strtod_l+0xb72>
 800b660:	4639      	mov	r1, r7
 800b662:	4630      	mov	r0, r6
 800b664:	f7f5 fac0 	bl	8000be8 <__aeabi_d2uiz>
 800b668:	2800      	cmp	r0, #0
 800b66a:	bf08      	it	eq
 800b66c:	2001      	moveq	r0, #1
 800b66e:	f7f4 ff69 	bl	8000544 <__aeabi_ui2d>
 800b672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	bb03      	cbnz	r3, 800b6bc <_strtod_l+0xba4>
 800b67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b67e:	9012      	str	r0, [sp, #72]	; 0x48
 800b680:	9313      	str	r3, [sp, #76]	; 0x4c
 800b682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b686:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b68e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b692:	1a9b      	subs	r3, r3, r2
 800b694:	930b      	str	r3, [sp, #44]	; 0x2c
 800b696:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b69a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b69e:	f001 fd6f 	bl	800d180 <__ulp>
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	ec53 2b10 	vmov	r2, r3, d0
 800b6a8:	4659      	mov	r1, fp
 800b6aa:	f7f4 ffc5 	bl	8000638 <__aeabi_dmul>
 800b6ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6b2:	f7f4 fe0b 	bl	80002cc <__adddf3>
 800b6b6:	4682      	mov	sl, r0
 800b6b8:	468b      	mov	fp, r1
 800b6ba:	e772      	b.n	800b5a2 <_strtod_l+0xa8a>
 800b6bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b6c0:	e7df      	b.n	800b682 <_strtod_l+0xb6a>
 800b6c2:	a30d      	add	r3, pc, #52	; (adr r3, 800b6f8 <_strtod_l+0xbe0>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f5 fa28 	bl	8000b1c <__aeabi_dcmplt>
 800b6cc:	e79c      	b.n	800b608 <_strtod_l+0xaf0>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b6d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	f7ff ba61 	b.w	800ab9e <_strtod_l+0x86>
 800b6dc:	2b65      	cmp	r3, #101	; 0x65
 800b6de:	f04f 0200 	mov.w	r2, #0
 800b6e2:	f43f ab4e 	beq.w	800ad82 <_strtod_l+0x26a>
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	9104      	str	r1, [sp, #16]
 800b6ec:	f7ff bacb 	b.w	800ac86 <_strtod_l+0x16e>
 800b6f0:	ffc00000 	.word	0xffc00000
 800b6f4:	41dfffff 	.word	0x41dfffff
 800b6f8:	94a03595 	.word	0x94a03595
 800b6fc:	3fcfffff 	.word	0x3fcfffff

0800b700 <_strtod_r>:
 800b700:	4b05      	ldr	r3, [pc, #20]	; (800b718 <_strtod_r+0x18>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	b410      	push	{r4}
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	4c04      	ldr	r4, [pc, #16]	; (800b71c <_strtod_r+0x1c>)
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bf08      	it	eq
 800b70e:	4623      	moveq	r3, r4
 800b710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b714:	f7ff ba00 	b.w	800ab18 <_strtod_l>
 800b718:	2000005c 	.word	0x2000005c
 800b71c:	200000c0 	.word	0x200000c0

0800b720 <_strtol_l.isra.0>:
 800b720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b724:	4680      	mov	r8, r0
 800b726:	4689      	mov	r9, r1
 800b728:	4692      	mov	sl, r2
 800b72a:	461e      	mov	r6, r3
 800b72c:	460f      	mov	r7, r1
 800b72e:	463d      	mov	r5, r7
 800b730:	9808      	ldr	r0, [sp, #32]
 800b732:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b736:	f001 fa29 	bl	800cb8c <__locale_ctype_ptr_l>
 800b73a:	4420      	add	r0, r4
 800b73c:	7843      	ldrb	r3, [r0, #1]
 800b73e:	f013 0308 	ands.w	r3, r3, #8
 800b742:	d132      	bne.n	800b7aa <_strtol_l.isra.0+0x8a>
 800b744:	2c2d      	cmp	r4, #45	; 0x2d
 800b746:	d132      	bne.n	800b7ae <_strtol_l.isra.0+0x8e>
 800b748:	787c      	ldrb	r4, [r7, #1]
 800b74a:	1cbd      	adds	r5, r7, #2
 800b74c:	2201      	movs	r2, #1
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d05d      	beq.n	800b80e <_strtol_l.isra.0+0xee>
 800b752:	2e10      	cmp	r6, #16
 800b754:	d109      	bne.n	800b76a <_strtol_l.isra.0+0x4a>
 800b756:	2c30      	cmp	r4, #48	; 0x30
 800b758:	d107      	bne.n	800b76a <_strtol_l.isra.0+0x4a>
 800b75a:	782b      	ldrb	r3, [r5, #0]
 800b75c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b760:	2b58      	cmp	r3, #88	; 0x58
 800b762:	d14f      	bne.n	800b804 <_strtol_l.isra.0+0xe4>
 800b764:	786c      	ldrb	r4, [r5, #1]
 800b766:	2610      	movs	r6, #16
 800b768:	3502      	adds	r5, #2
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	bf14      	ite	ne
 800b76e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b772:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b776:	2700      	movs	r7, #0
 800b778:	fbb1 fcf6 	udiv	ip, r1, r6
 800b77c:	4638      	mov	r0, r7
 800b77e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b782:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b786:	2b09      	cmp	r3, #9
 800b788:	d817      	bhi.n	800b7ba <_strtol_l.isra.0+0x9a>
 800b78a:	461c      	mov	r4, r3
 800b78c:	42a6      	cmp	r6, r4
 800b78e:	dd23      	ble.n	800b7d8 <_strtol_l.isra.0+0xb8>
 800b790:	1c7b      	adds	r3, r7, #1
 800b792:	d007      	beq.n	800b7a4 <_strtol_l.isra.0+0x84>
 800b794:	4584      	cmp	ip, r0
 800b796:	d31c      	bcc.n	800b7d2 <_strtol_l.isra.0+0xb2>
 800b798:	d101      	bne.n	800b79e <_strtol_l.isra.0+0x7e>
 800b79a:	45a6      	cmp	lr, r4
 800b79c:	db19      	blt.n	800b7d2 <_strtol_l.isra.0+0xb2>
 800b79e:	fb00 4006 	mla	r0, r0, r6, r4
 800b7a2:	2701      	movs	r7, #1
 800b7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7a8:	e7eb      	b.n	800b782 <_strtol_l.isra.0+0x62>
 800b7aa:	462f      	mov	r7, r5
 800b7ac:	e7bf      	b.n	800b72e <_strtol_l.isra.0+0xe>
 800b7ae:	2c2b      	cmp	r4, #43	; 0x2b
 800b7b0:	bf04      	itt	eq
 800b7b2:	1cbd      	addeq	r5, r7, #2
 800b7b4:	787c      	ldrbeq	r4, [r7, #1]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	e7c9      	b.n	800b74e <_strtol_l.isra.0+0x2e>
 800b7ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b7be:	2b19      	cmp	r3, #25
 800b7c0:	d801      	bhi.n	800b7c6 <_strtol_l.isra.0+0xa6>
 800b7c2:	3c37      	subs	r4, #55	; 0x37
 800b7c4:	e7e2      	b.n	800b78c <_strtol_l.isra.0+0x6c>
 800b7c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b7ca:	2b19      	cmp	r3, #25
 800b7cc:	d804      	bhi.n	800b7d8 <_strtol_l.isra.0+0xb8>
 800b7ce:	3c57      	subs	r4, #87	; 0x57
 800b7d0:	e7dc      	b.n	800b78c <_strtol_l.isra.0+0x6c>
 800b7d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7d6:	e7e5      	b.n	800b7a4 <_strtol_l.isra.0+0x84>
 800b7d8:	1c7b      	adds	r3, r7, #1
 800b7da:	d108      	bne.n	800b7ee <_strtol_l.isra.0+0xce>
 800b7dc:	2322      	movs	r3, #34	; 0x22
 800b7de:	f8c8 3000 	str.w	r3, [r8]
 800b7e2:	4608      	mov	r0, r1
 800b7e4:	f1ba 0f00 	cmp.w	sl, #0
 800b7e8:	d107      	bne.n	800b7fa <_strtol_l.isra.0+0xda>
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	b102      	cbz	r2, 800b7f2 <_strtol_l.isra.0+0xd2>
 800b7f0:	4240      	negs	r0, r0
 800b7f2:	f1ba 0f00 	cmp.w	sl, #0
 800b7f6:	d0f8      	beq.n	800b7ea <_strtol_l.isra.0+0xca>
 800b7f8:	b10f      	cbz	r7, 800b7fe <_strtol_l.isra.0+0xde>
 800b7fa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b7fe:	f8ca 9000 	str.w	r9, [sl]
 800b802:	e7f2      	b.n	800b7ea <_strtol_l.isra.0+0xca>
 800b804:	2430      	movs	r4, #48	; 0x30
 800b806:	2e00      	cmp	r6, #0
 800b808:	d1af      	bne.n	800b76a <_strtol_l.isra.0+0x4a>
 800b80a:	2608      	movs	r6, #8
 800b80c:	e7ad      	b.n	800b76a <_strtol_l.isra.0+0x4a>
 800b80e:	2c30      	cmp	r4, #48	; 0x30
 800b810:	d0a3      	beq.n	800b75a <_strtol_l.isra.0+0x3a>
 800b812:	260a      	movs	r6, #10
 800b814:	e7a9      	b.n	800b76a <_strtol_l.isra.0+0x4a>
	...

0800b818 <_strtol_r>:
 800b818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b81a:	4c06      	ldr	r4, [pc, #24]	; (800b834 <_strtol_r+0x1c>)
 800b81c:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_strtol_r+0x20>)
 800b81e:	6824      	ldr	r4, [r4, #0]
 800b820:	6a24      	ldr	r4, [r4, #32]
 800b822:	2c00      	cmp	r4, #0
 800b824:	bf08      	it	eq
 800b826:	462c      	moveq	r4, r5
 800b828:	9400      	str	r4, [sp, #0]
 800b82a:	f7ff ff79 	bl	800b720 <_strtol_l.isra.0>
 800b82e:	b003      	add	sp, #12
 800b830:	bd30      	pop	{r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	2000005c 	.word	0x2000005c
 800b838:	200000c0 	.word	0x200000c0

0800b83c <__utoa>:
 800b83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b83e:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <__utoa+0x78>)
 800b840:	b08b      	sub	sp, #44	; 0x2c
 800b842:	4605      	mov	r5, r0
 800b844:	460c      	mov	r4, r1
 800b846:	466e      	mov	r6, sp
 800b848:	f103 0c20 	add.w	ip, r3, #32
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	6859      	ldr	r1, [r3, #4]
 800b850:	4637      	mov	r7, r6
 800b852:	c703      	stmia	r7!, {r0, r1}
 800b854:	3308      	adds	r3, #8
 800b856:	4563      	cmp	r3, ip
 800b858:	463e      	mov	r6, r7
 800b85a:	d1f7      	bne.n	800b84c <__utoa+0x10>
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	791b      	ldrb	r3, [r3, #4]
 800b860:	713b      	strb	r3, [r7, #4]
 800b862:	1e93      	subs	r3, r2, #2
 800b864:	2b22      	cmp	r3, #34	; 0x22
 800b866:	6038      	str	r0, [r7, #0]
 800b868:	f04f 0300 	mov.w	r3, #0
 800b86c:	d904      	bls.n	800b878 <__utoa+0x3c>
 800b86e:	7023      	strb	r3, [r4, #0]
 800b870:	461c      	mov	r4, r3
 800b872:	4620      	mov	r0, r4
 800b874:	b00b      	add	sp, #44	; 0x2c
 800b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b878:	1e66      	subs	r6, r4, #1
 800b87a:	fbb5 f0f2 	udiv	r0, r5, r2
 800b87e:	af0a      	add	r7, sp, #40	; 0x28
 800b880:	fb02 5510 	mls	r5, r2, r0, r5
 800b884:	443d      	add	r5, r7
 800b886:	1c59      	adds	r1, r3, #1
 800b888:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b88c:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b890:	4605      	mov	r5, r0
 800b892:	b968      	cbnz	r0, 800b8b0 <__utoa+0x74>
 800b894:	5460      	strb	r0, [r4, r1]
 800b896:	4423      	add	r3, r4
 800b898:	4622      	mov	r2, r4
 800b89a:	1b19      	subs	r1, r3, r4
 800b89c:	1b10      	subs	r0, r2, r4
 800b89e:	4281      	cmp	r1, r0
 800b8a0:	dde7      	ble.n	800b872 <__utoa+0x36>
 800b8a2:	7811      	ldrb	r1, [r2, #0]
 800b8a4:	7818      	ldrb	r0, [r3, #0]
 800b8a6:	f802 0b01 	strb.w	r0, [r2], #1
 800b8aa:	f803 1901 	strb.w	r1, [r3], #-1
 800b8ae:	e7f4      	b.n	800b89a <__utoa+0x5e>
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	e7e2      	b.n	800b87a <__utoa+0x3e>
 800b8b4:	08010d38 	.word	0x08010d38

0800b8b8 <quorem>:
 800b8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	6903      	ldr	r3, [r0, #16]
 800b8be:	690c      	ldr	r4, [r1, #16]
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	f2c0 8082 	blt.w	800b9cc <quorem+0x114>
 800b8c8:	3c01      	subs	r4, #1
 800b8ca:	f101 0714 	add.w	r7, r1, #20
 800b8ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b8d2:	f100 0614 	add.w	r6, r0, #20
 800b8d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b8da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b8de:	eb06 030c 	add.w	r3, r6, ip
 800b8e2:	3501      	adds	r5, #1
 800b8e4:	eb07 090c 	add.w	r9, r7, ip
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	fbb0 f5f5 	udiv	r5, r0, r5
 800b8ee:	b395      	cbz	r5, 800b956 <quorem+0x9e>
 800b8f0:	f04f 0a00 	mov.w	sl, #0
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	46b6      	mov	lr, r6
 800b8f8:	46d3      	mov	fp, sl
 800b8fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8fe:	b293      	uxth	r3, r2
 800b900:	fb05 a303 	mla	r3, r5, r3, sl
 800b904:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b908:	b29b      	uxth	r3, r3
 800b90a:	ebab 0303 	sub.w	r3, fp, r3
 800b90e:	0c12      	lsrs	r2, r2, #16
 800b910:	f8de b000 	ldr.w	fp, [lr]
 800b914:	fb05 a202 	mla	r2, r5, r2, sl
 800b918:	fa13 f38b 	uxtah	r3, r3, fp
 800b91c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b920:	fa1f fb82 	uxth.w	fp, r2
 800b924:	f8de 2000 	ldr.w	r2, [lr]
 800b928:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b92c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b930:	b29b      	uxth	r3, r3
 800b932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b936:	4581      	cmp	r9, r0
 800b938:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b93c:	f84e 3b04 	str.w	r3, [lr], #4
 800b940:	d2db      	bcs.n	800b8fa <quorem+0x42>
 800b942:	f856 300c 	ldr.w	r3, [r6, ip]
 800b946:	b933      	cbnz	r3, 800b956 <quorem+0x9e>
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	429e      	cmp	r6, r3
 800b94e:	461a      	mov	r2, r3
 800b950:	d330      	bcc.n	800b9b4 <quorem+0xfc>
 800b952:	f8c8 4010 	str.w	r4, [r8, #16]
 800b956:	4640      	mov	r0, r8
 800b958:	f001 fb9a 	bl	800d090 <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	db25      	blt.n	800b9ac <quorem+0xf4>
 800b960:	3501      	adds	r5, #1
 800b962:	4630      	mov	r0, r6
 800b964:	f04f 0c00 	mov.w	ip, #0
 800b968:	f857 2b04 	ldr.w	r2, [r7], #4
 800b96c:	f8d0 e000 	ldr.w	lr, [r0]
 800b970:	b293      	uxth	r3, r2
 800b972:	ebac 0303 	sub.w	r3, ip, r3
 800b976:	0c12      	lsrs	r2, r2, #16
 800b978:	fa13 f38e 	uxtah	r3, r3, lr
 800b97c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b984:	b29b      	uxth	r3, r3
 800b986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b98a:	45b9      	cmp	r9, r7
 800b98c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b990:	f840 3b04 	str.w	r3, [r0], #4
 800b994:	d2e8      	bcs.n	800b968 <quorem+0xb0>
 800b996:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b99a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b99e:	b92a      	cbnz	r2, 800b9ac <quorem+0xf4>
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	429e      	cmp	r6, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	d30b      	bcc.n	800b9c0 <quorem+0x108>
 800b9a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	b003      	add	sp, #12
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	6812      	ldr	r2, [r2, #0]
 800b9b6:	3b04      	subs	r3, #4
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	d1ca      	bne.n	800b952 <quorem+0x9a>
 800b9bc:	3c01      	subs	r4, #1
 800b9be:	e7c5      	b.n	800b94c <quorem+0x94>
 800b9c0:	6812      	ldr	r2, [r2, #0]
 800b9c2:	3b04      	subs	r3, #4
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d1ef      	bne.n	800b9a8 <quorem+0xf0>
 800b9c8:	3c01      	subs	r4, #1
 800b9ca:	e7ea      	b.n	800b9a2 <quorem+0xea>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e7ee      	b.n	800b9ae <quorem+0xf6>

0800b9d0 <_dtoa_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	ec57 6b10 	vmov	r6, r7, d0
 800b9d8:	b097      	sub	sp, #92	; 0x5c
 800b9da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9dc:	9106      	str	r1, [sp, #24]
 800b9de:	4604      	mov	r4, r0
 800b9e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b9e2:	9312      	str	r3, [sp, #72]	; 0x48
 800b9e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b9e8:	e9cd 6700 	strd	r6, r7, [sp]
 800b9ec:	b93d      	cbnz	r5, 800b9fe <_dtoa_r+0x2e>
 800b9ee:	2010      	movs	r0, #16
 800b9f0:	f001 f8e0 	bl	800cbb4 <malloc>
 800b9f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b9f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9fa:	6005      	str	r5, [r0, #0]
 800b9fc:	60c5      	str	r5, [r0, #12]
 800b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba00:	6819      	ldr	r1, [r3, #0]
 800ba02:	b151      	cbz	r1, 800ba1a <_dtoa_r+0x4a>
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	604a      	str	r2, [r1, #4]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4093      	lsls	r3, r2
 800ba0c:	608b      	str	r3, [r1, #8]
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f001 f91e 	bl	800cc50 <_Bfree>
 800ba14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	1e3b      	subs	r3, r7, #0
 800ba1c:	bfbb      	ittet	lt
 800ba1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba22:	9301      	strlt	r3, [sp, #4]
 800ba24:	2300      	movge	r3, #0
 800ba26:	2201      	movlt	r2, #1
 800ba28:	bfac      	ite	ge
 800ba2a:	f8c8 3000 	strge.w	r3, [r8]
 800ba2e:	f8c8 2000 	strlt.w	r2, [r8]
 800ba32:	4baf      	ldr	r3, [pc, #700]	; (800bcf0 <_dtoa_r+0x320>)
 800ba34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba38:	ea33 0308 	bics.w	r3, r3, r8
 800ba3c:	d114      	bne.n	800ba68 <_dtoa_r+0x98>
 800ba3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba40:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	b923      	cbnz	r3, 800ba54 <_dtoa_r+0x84>
 800ba4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f000 8542 	beq.w	800c4d8 <_dtoa_r+0xb08>
 800ba54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bd04 <_dtoa_r+0x334>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 8544 	beq.w	800c4e8 <_dtoa_r+0xb18>
 800ba60:	f10b 0303 	add.w	r3, fp, #3
 800ba64:	f000 bd3e 	b.w	800c4e4 <_dtoa_r+0xb14>
 800ba68:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	f7f5 f848 	bl	8000b08 <__aeabi_dcmpeq>
 800ba78:	4681      	mov	r9, r0
 800ba7a:	b168      	cbz	r0, 800ba98 <_dtoa_r+0xc8>
 800ba7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba7e:	2301      	movs	r3, #1
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8524 	beq.w	800c4d2 <_dtoa_r+0xb02>
 800ba8a:	4b9a      	ldr	r3, [pc, #616]	; (800bcf4 <_dtoa_r+0x324>)
 800ba8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba8e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	f000 bd28 	b.w	800c4e8 <_dtoa_r+0xb18>
 800ba98:	aa14      	add	r2, sp, #80	; 0x50
 800ba9a:	a915      	add	r1, sp, #84	; 0x54
 800ba9c:	ec47 6b10 	vmov	d0, r6, r7
 800baa0:	4620      	mov	r0, r4
 800baa2:	f001 fbe3 	bl	800d26c <__d2b>
 800baa6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800baaa:	9004      	str	r0, [sp, #16]
 800baac:	2d00      	cmp	r5, #0
 800baae:	d07c      	beq.n	800bbaa <_dtoa_r+0x1da>
 800bab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bab4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bab8:	46b2      	mov	sl, r6
 800baba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800babe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bac2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bac6:	2200      	movs	r2, #0
 800bac8:	4b8b      	ldr	r3, [pc, #556]	; (800bcf8 <_dtoa_r+0x328>)
 800baca:	4650      	mov	r0, sl
 800bacc:	4659      	mov	r1, fp
 800bace:	f7f4 fbfb 	bl	80002c8 <__aeabi_dsub>
 800bad2:	a381      	add	r3, pc, #516	; (adr r3, 800bcd8 <_dtoa_r+0x308>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fdae 	bl	8000638 <__aeabi_dmul>
 800badc:	a380      	add	r3, pc, #512	; (adr r3, 800bce0 <_dtoa_r+0x310>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f7f4 fbf3 	bl	80002cc <__adddf3>
 800bae6:	4606      	mov	r6, r0
 800bae8:	4628      	mov	r0, r5
 800baea:	460f      	mov	r7, r1
 800baec:	f7f4 fd3a 	bl	8000564 <__aeabi_i2d>
 800baf0:	a37d      	add	r3, pc, #500	; (adr r3, 800bce8 <_dtoa_r+0x318>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fd9f 	bl	8000638 <__aeabi_dmul>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f4 fbe3 	bl	80002cc <__adddf3>
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	f7f5 f845 	bl	8000b98 <__aeabi_d2iz>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4682      	mov	sl, r0
 800bb12:	2300      	movs	r3, #0
 800bb14:	4630      	mov	r0, r6
 800bb16:	4639      	mov	r1, r7
 800bb18:	f7f5 f800 	bl	8000b1c <__aeabi_dcmplt>
 800bb1c:	b148      	cbz	r0, 800bb32 <_dtoa_r+0x162>
 800bb1e:	4650      	mov	r0, sl
 800bb20:	f7f4 fd20 	bl	8000564 <__aeabi_i2d>
 800bb24:	4632      	mov	r2, r6
 800bb26:	463b      	mov	r3, r7
 800bb28:	f7f4 ffee 	bl	8000b08 <__aeabi_dcmpeq>
 800bb2c:	b908      	cbnz	r0, 800bb32 <_dtoa_r+0x162>
 800bb2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb32:	f1ba 0f16 	cmp.w	sl, #22
 800bb36:	d859      	bhi.n	800bbec <_dtoa_r+0x21c>
 800bb38:	4970      	ldr	r1, [pc, #448]	; (800bcfc <_dtoa_r+0x32c>)
 800bb3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bb3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb46:	f7f5 f807 	bl	8000b58 <__aeabi_dcmpgt>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d050      	beq.n	800bbf0 <_dtoa_r+0x220>
 800bb4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb52:	2300      	movs	r3, #0
 800bb54:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb58:	1b5d      	subs	r5, r3, r5
 800bb5a:	f1b5 0801 	subs.w	r8, r5, #1
 800bb5e:	bf49      	itett	mi
 800bb60:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb64:	2300      	movpl	r3, #0
 800bb66:	9305      	strmi	r3, [sp, #20]
 800bb68:	f04f 0800 	movmi.w	r8, #0
 800bb6c:	bf58      	it	pl
 800bb6e:	9305      	strpl	r3, [sp, #20]
 800bb70:	f1ba 0f00 	cmp.w	sl, #0
 800bb74:	db3e      	blt.n	800bbf4 <_dtoa_r+0x224>
 800bb76:	2300      	movs	r3, #0
 800bb78:	44d0      	add	r8, sl
 800bb7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bb7e:	9307      	str	r3, [sp, #28]
 800bb80:	9b06      	ldr	r3, [sp, #24]
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	f200 8090 	bhi.w	800bca8 <_dtoa_r+0x2d8>
 800bb88:	2b05      	cmp	r3, #5
 800bb8a:	bfc4      	itt	gt
 800bb8c:	3b04      	subgt	r3, #4
 800bb8e:	9306      	strgt	r3, [sp, #24]
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	f1a3 0302 	sub.w	r3, r3, #2
 800bb96:	bfcc      	ite	gt
 800bb98:	2500      	movgt	r5, #0
 800bb9a:	2501      	movle	r5, #1
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	f200 808f 	bhi.w	800bcc0 <_dtoa_r+0x2f0>
 800bba2:	e8df f003 	tbb	[pc, r3]
 800bba6:	7f7d      	.short	0x7f7d
 800bba8:	7131      	.short	0x7131
 800bbaa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bbae:	441d      	add	r5, r3
 800bbb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bbb4:	2820      	cmp	r0, #32
 800bbb6:	dd13      	ble.n	800bbe0 <_dtoa_r+0x210>
 800bbb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bbbc:	9b00      	ldr	r3, [sp, #0]
 800bbbe:	fa08 f800 	lsl.w	r8, r8, r0
 800bbc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bbc6:	fa23 f000 	lsr.w	r0, r3, r0
 800bbca:	ea48 0000 	orr.w	r0, r8, r0
 800bbce:	f7f4 fcb9 	bl	8000544 <__aeabi_ui2d>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4682      	mov	sl, r0
 800bbd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bbda:	3d01      	subs	r5, #1
 800bbdc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbde:	e772      	b.n	800bac6 <_dtoa_r+0xf6>
 800bbe0:	9b00      	ldr	r3, [sp, #0]
 800bbe2:	f1c0 0020 	rsb	r0, r0, #32
 800bbe6:	fa03 f000 	lsl.w	r0, r3, r0
 800bbea:	e7f0      	b.n	800bbce <_dtoa_r+0x1fe>
 800bbec:	2301      	movs	r3, #1
 800bbee:	e7b1      	b.n	800bb54 <_dtoa_r+0x184>
 800bbf0:	900f      	str	r0, [sp, #60]	; 0x3c
 800bbf2:	e7b0      	b.n	800bb56 <_dtoa_r+0x186>
 800bbf4:	9b05      	ldr	r3, [sp, #20]
 800bbf6:	eba3 030a 	sub.w	r3, r3, sl
 800bbfa:	9305      	str	r3, [sp, #20]
 800bbfc:	f1ca 0300 	rsb	r3, sl, #0
 800bc00:	9307      	str	r3, [sp, #28]
 800bc02:	2300      	movs	r3, #0
 800bc04:	930e      	str	r3, [sp, #56]	; 0x38
 800bc06:	e7bb      	b.n	800bb80 <_dtoa_r+0x1b0>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dd59      	ble.n	800bcc6 <_dtoa_r+0x2f6>
 800bc12:	9302      	str	r3, [sp, #8]
 800bc14:	4699      	mov	r9, r3
 800bc16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc18:	2200      	movs	r2, #0
 800bc1a:	6072      	str	r2, [r6, #4]
 800bc1c:	2204      	movs	r2, #4
 800bc1e:	f102 0014 	add.w	r0, r2, #20
 800bc22:	4298      	cmp	r0, r3
 800bc24:	6871      	ldr	r1, [r6, #4]
 800bc26:	d953      	bls.n	800bcd0 <_dtoa_r+0x300>
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 ffdd 	bl	800cbe8 <_Balloc>
 800bc2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc30:	6030      	str	r0, [r6, #0]
 800bc32:	f1b9 0f0e 	cmp.w	r9, #14
 800bc36:	f8d3 b000 	ldr.w	fp, [r3]
 800bc3a:	f200 80e6 	bhi.w	800be0a <_dtoa_r+0x43a>
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	f000 80e3 	beq.w	800be0a <_dtoa_r+0x43a>
 800bc44:	ed9d 7b00 	vldr	d7, [sp]
 800bc48:	f1ba 0f00 	cmp.w	sl, #0
 800bc4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bc50:	dd74      	ble.n	800bd3c <_dtoa_r+0x36c>
 800bc52:	4a2a      	ldr	r2, [pc, #168]	; (800bcfc <_dtoa_r+0x32c>)
 800bc54:	f00a 030f 	and.w	r3, sl, #15
 800bc58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc5c:	ed93 7b00 	vldr	d7, [r3]
 800bc60:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bc64:	06f0      	lsls	r0, r6, #27
 800bc66:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bc6a:	d565      	bpl.n	800bd38 <_dtoa_r+0x368>
 800bc6c:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <_dtoa_r+0x330>)
 800bc6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc76:	f7f4 fe09 	bl	800088c <__aeabi_ddiv>
 800bc7a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc7e:	f006 060f 	and.w	r6, r6, #15
 800bc82:	2503      	movs	r5, #3
 800bc84:	4f1e      	ldr	r7, [pc, #120]	; (800bd00 <_dtoa_r+0x330>)
 800bc86:	e04c      	b.n	800bd22 <_dtoa_r+0x352>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc8e:	4453      	add	r3, sl
 800bc90:	f103 0901 	add.w	r9, r3, #1
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	464b      	mov	r3, r9
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	bfb8      	it	lt
 800bc9c:	2301      	movlt	r3, #1
 800bc9e:	e7ba      	b.n	800bc16 <_dtoa_r+0x246>
 800bca0:	2300      	movs	r3, #0
 800bca2:	e7b2      	b.n	800bc0a <_dtoa_r+0x23a>
 800bca4:	2300      	movs	r3, #0
 800bca6:	e7f0      	b.n	800bc8a <_dtoa_r+0x2ba>
 800bca8:	2501      	movs	r5, #1
 800bcaa:	2300      	movs	r3, #0
 800bcac:	9306      	str	r3, [sp, #24]
 800bcae:	950a      	str	r5, [sp, #40]	; 0x28
 800bcb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcb4:	9302      	str	r3, [sp, #8]
 800bcb6:	4699      	mov	r9, r3
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2312      	movs	r3, #18
 800bcbc:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcbe:	e7aa      	b.n	800bc16 <_dtoa_r+0x246>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc4:	e7f4      	b.n	800bcb0 <_dtoa_r+0x2e0>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	4699      	mov	r9, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	e7f5      	b.n	800bcbc <_dtoa_r+0x2ec>
 800bcd0:	3101      	adds	r1, #1
 800bcd2:	6071      	str	r1, [r6, #4]
 800bcd4:	0052      	lsls	r2, r2, #1
 800bcd6:	e7a2      	b.n	800bc1e <_dtoa_r+0x24e>
 800bcd8:	636f4361 	.word	0x636f4361
 800bcdc:	3fd287a7 	.word	0x3fd287a7
 800bce0:	8b60c8b3 	.word	0x8b60c8b3
 800bce4:	3fc68a28 	.word	0x3fc68a28
 800bce8:	509f79fb 	.word	0x509f79fb
 800bcec:	3fd34413 	.word	0x3fd34413
 800bcf0:	7ff00000 	.word	0x7ff00000
 800bcf4:	08010cbd 	.word	0x08010cbd
 800bcf8:	3ff80000 	.word	0x3ff80000
 800bcfc:	08010da0 	.word	0x08010da0
 800bd00:	08010d78 	.word	0x08010d78
 800bd04:	08010d66 	.word	0x08010d66
 800bd08:	07f1      	lsls	r1, r6, #31
 800bd0a:	d508      	bpl.n	800bd1e <_dtoa_r+0x34e>
 800bd0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd14:	f7f4 fc90 	bl	8000638 <__aeabi_dmul>
 800bd18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	1076      	asrs	r6, r6, #1
 800bd20:	3708      	adds	r7, #8
 800bd22:	2e00      	cmp	r6, #0
 800bd24:	d1f0      	bne.n	800bd08 <_dtoa_r+0x338>
 800bd26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd2e:	f7f4 fdad 	bl	800088c <__aeabi_ddiv>
 800bd32:	e9cd 0100 	strd	r0, r1, [sp]
 800bd36:	e01a      	b.n	800bd6e <_dtoa_r+0x39e>
 800bd38:	2502      	movs	r5, #2
 800bd3a:	e7a3      	b.n	800bc84 <_dtoa_r+0x2b4>
 800bd3c:	f000 80a0 	beq.w	800be80 <_dtoa_r+0x4b0>
 800bd40:	f1ca 0600 	rsb	r6, sl, #0
 800bd44:	4b9f      	ldr	r3, [pc, #636]	; (800bfc4 <_dtoa_r+0x5f4>)
 800bd46:	4fa0      	ldr	r7, [pc, #640]	; (800bfc8 <_dtoa_r+0x5f8>)
 800bd48:	f006 020f 	and.w	r2, r6, #15
 800bd4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd58:	f7f4 fc6e 	bl	8000638 <__aeabi_dmul>
 800bd5c:	e9cd 0100 	strd	r0, r1, [sp]
 800bd60:	1136      	asrs	r6, r6, #4
 800bd62:	2300      	movs	r3, #0
 800bd64:	2502      	movs	r5, #2
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	d17f      	bne.n	800be6a <_dtoa_r+0x49a>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e1      	bne.n	800bd32 <_dtoa_r+0x362>
 800bd6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8087 	beq.w	800be84 <_dtoa_r+0x4b4>
 800bd76:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4b93      	ldr	r3, [pc, #588]	; (800bfcc <_dtoa_r+0x5fc>)
 800bd7e:	4630      	mov	r0, r6
 800bd80:	4639      	mov	r1, r7
 800bd82:	f7f4 fecb 	bl	8000b1c <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d07c      	beq.n	800be84 <_dtoa_r+0x4b4>
 800bd8a:	f1b9 0f00 	cmp.w	r9, #0
 800bd8e:	d079      	beq.n	800be84 <_dtoa_r+0x4b4>
 800bd90:	9b02      	ldr	r3, [sp, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dd35      	ble.n	800be02 <_dtoa_r+0x432>
 800bd96:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bd9a:	9308      	str	r3, [sp, #32]
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4b8b      	ldr	r3, [pc, #556]	; (800bfd0 <_dtoa_r+0x600>)
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7f4 fc48 	bl	8000638 <__aeabi_dmul>
 800bda8:	e9cd 0100 	strd	r0, r1, [sp]
 800bdac:	9f02      	ldr	r7, [sp, #8]
 800bdae:	3501      	adds	r5, #1
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f7f4 fbd7 	bl	8000564 <__aeabi_i2d>
 800bdb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdba:	f7f4 fc3d 	bl	8000638 <__aeabi_dmul>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4b84      	ldr	r3, [pc, #528]	; (800bfd4 <_dtoa_r+0x604>)
 800bdc2:	f7f4 fa83 	bl	80002cc <__adddf3>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bdcc:	2f00      	cmp	r7, #0
 800bdce:	d15d      	bne.n	800be8c <_dtoa_r+0x4bc>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4b81      	ldr	r3, [pc, #516]	; (800bfd8 <_dtoa_r+0x608>)
 800bdd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd8:	f7f4 fa76 	bl	80002c8 <__aeabi_dsub>
 800bddc:	462a      	mov	r2, r5
 800bdde:	4633      	mov	r3, r6
 800bde0:	e9cd 0100 	strd	r0, r1, [sp]
 800bde4:	f7f4 feb8 	bl	8000b58 <__aeabi_dcmpgt>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f040 8288 	bne.w	800c2fe <_dtoa_r+0x92e>
 800bdee:	462a      	mov	r2, r5
 800bdf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bdf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdf8:	f7f4 fe90 	bl	8000b1c <__aeabi_dcmplt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f040 827c 	bne.w	800c2fa <_dtoa_r+0x92a>
 800be02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be06:	e9cd 2300 	strd	r2, r3, [sp]
 800be0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f2c0 8150 	blt.w	800c0b2 <_dtoa_r+0x6e2>
 800be12:	f1ba 0f0e 	cmp.w	sl, #14
 800be16:	f300 814c 	bgt.w	800c0b2 <_dtoa_r+0x6e2>
 800be1a:	4b6a      	ldr	r3, [pc, #424]	; (800bfc4 <_dtoa_r+0x5f4>)
 800be1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be20:	ed93 7b00 	vldr	d7, [r3]
 800be24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be26:	2b00      	cmp	r3, #0
 800be28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be2c:	f280 80d8 	bge.w	800bfe0 <_dtoa_r+0x610>
 800be30:	f1b9 0f00 	cmp.w	r9, #0
 800be34:	f300 80d4 	bgt.w	800bfe0 <_dtoa_r+0x610>
 800be38:	f040 825e 	bne.w	800c2f8 <_dtoa_r+0x928>
 800be3c:	2200      	movs	r2, #0
 800be3e:	4b66      	ldr	r3, [pc, #408]	; (800bfd8 <_dtoa_r+0x608>)
 800be40:	ec51 0b17 	vmov	r0, r1, d7
 800be44:	f7f4 fbf8 	bl	8000638 <__aeabi_dmul>
 800be48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4c:	f7f4 fe7a 	bl	8000b44 <__aeabi_dcmpge>
 800be50:	464f      	mov	r7, r9
 800be52:	464e      	mov	r6, r9
 800be54:	2800      	cmp	r0, #0
 800be56:	f040 8234 	bne.w	800c2c2 <_dtoa_r+0x8f2>
 800be5a:	2331      	movs	r3, #49	; 0x31
 800be5c:	f10b 0501 	add.w	r5, fp, #1
 800be60:	f88b 3000 	strb.w	r3, [fp]
 800be64:	f10a 0a01 	add.w	sl, sl, #1
 800be68:	e22f      	b.n	800c2ca <_dtoa_r+0x8fa>
 800be6a:	07f2      	lsls	r2, r6, #31
 800be6c:	d505      	bpl.n	800be7a <_dtoa_r+0x4aa>
 800be6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be72:	f7f4 fbe1 	bl	8000638 <__aeabi_dmul>
 800be76:	3501      	adds	r5, #1
 800be78:	2301      	movs	r3, #1
 800be7a:	1076      	asrs	r6, r6, #1
 800be7c:	3708      	adds	r7, #8
 800be7e:	e772      	b.n	800bd66 <_dtoa_r+0x396>
 800be80:	2502      	movs	r5, #2
 800be82:	e774      	b.n	800bd6e <_dtoa_r+0x39e>
 800be84:	f8cd a020 	str.w	sl, [sp, #32]
 800be88:	464f      	mov	r7, r9
 800be8a:	e791      	b.n	800bdb0 <_dtoa_r+0x3e0>
 800be8c:	4b4d      	ldr	r3, [pc, #308]	; (800bfc4 <_dtoa_r+0x5f4>)
 800be8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800be96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d047      	beq.n	800bf2c <_dtoa_r+0x55c>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	2000      	movs	r0, #0
 800bea2:	494e      	ldr	r1, [pc, #312]	; (800bfdc <_dtoa_r+0x60c>)
 800bea4:	f7f4 fcf2 	bl	800088c <__aeabi_ddiv>
 800bea8:	462a      	mov	r2, r5
 800beaa:	4633      	mov	r3, r6
 800beac:	f7f4 fa0c 	bl	80002c8 <__aeabi_dsub>
 800beb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800beb4:	465d      	mov	r5, fp
 800beb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beba:	f7f4 fe6d 	bl	8000b98 <__aeabi_d2iz>
 800bebe:	4606      	mov	r6, r0
 800bec0:	f7f4 fb50 	bl	8000564 <__aeabi_i2d>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800becc:	f7f4 f9fc 	bl	80002c8 <__aeabi_dsub>
 800bed0:	3630      	adds	r6, #48	; 0x30
 800bed2:	f805 6b01 	strb.w	r6, [r5], #1
 800bed6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800beda:	e9cd 0100 	strd	r0, r1, [sp]
 800bede:	f7f4 fe1d 	bl	8000b1c <__aeabi_dcmplt>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d163      	bne.n	800bfae <_dtoa_r+0x5de>
 800bee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beea:	2000      	movs	r0, #0
 800beec:	4937      	ldr	r1, [pc, #220]	; (800bfcc <_dtoa_r+0x5fc>)
 800beee:	f7f4 f9eb 	bl	80002c8 <__aeabi_dsub>
 800bef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bef6:	f7f4 fe11 	bl	8000b1c <__aeabi_dcmplt>
 800befa:	2800      	cmp	r0, #0
 800befc:	f040 80b7 	bne.w	800c06e <_dtoa_r+0x69e>
 800bf00:	eba5 030b 	sub.w	r3, r5, fp
 800bf04:	429f      	cmp	r7, r3
 800bf06:	f77f af7c 	ble.w	800be02 <_dtoa_r+0x432>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4b30      	ldr	r3, [pc, #192]	; (800bfd0 <_dtoa_r+0x600>)
 800bf0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf12:	f7f4 fb91 	bl	8000638 <__aeabi_dmul>
 800bf16:	2200      	movs	r2, #0
 800bf18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bf1c:	4b2c      	ldr	r3, [pc, #176]	; (800bfd0 <_dtoa_r+0x600>)
 800bf1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf22:	f7f4 fb89 	bl	8000638 <__aeabi_dmul>
 800bf26:	e9cd 0100 	strd	r0, r1, [sp]
 800bf2a:	e7c4      	b.n	800beb6 <_dtoa_r+0x4e6>
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4633      	mov	r3, r6
 800bf30:	f7f4 fb82 	bl	8000638 <__aeabi_dmul>
 800bf34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bf38:	eb0b 0507 	add.w	r5, fp, r7
 800bf3c:	465e      	mov	r6, fp
 800bf3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf42:	f7f4 fe29 	bl	8000b98 <__aeabi_d2iz>
 800bf46:	4607      	mov	r7, r0
 800bf48:	f7f4 fb0c 	bl	8000564 <__aeabi_i2d>
 800bf4c:	3730      	adds	r7, #48	; 0x30
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf56:	f7f4 f9b7 	bl	80002c8 <__aeabi_dsub>
 800bf5a:	f806 7b01 	strb.w	r7, [r6], #1
 800bf5e:	42ae      	cmp	r6, r5
 800bf60:	e9cd 0100 	strd	r0, r1, [sp]
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	d126      	bne.n	800bfb8 <_dtoa_r+0x5e8>
 800bf6a:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <_dtoa_r+0x60c>)
 800bf6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf70:	f7f4 f9ac 	bl	80002cc <__adddf3>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf7c:	f7f4 fdec 	bl	8000b58 <__aeabi_dcmpgt>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d174      	bne.n	800c06e <_dtoa_r+0x69e>
 800bf84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf88:	2000      	movs	r0, #0
 800bf8a:	4914      	ldr	r1, [pc, #80]	; (800bfdc <_dtoa_r+0x60c>)
 800bf8c:	f7f4 f99c 	bl	80002c8 <__aeabi_dsub>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf98:	f7f4 fdc0 	bl	8000b1c <__aeabi_dcmplt>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f43f af30 	beq.w	800be02 <_dtoa_r+0x432>
 800bfa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfa6:	2b30      	cmp	r3, #48	; 0x30
 800bfa8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bfac:	d002      	beq.n	800bfb4 <_dtoa_r+0x5e4>
 800bfae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bfb2:	e04a      	b.n	800c04a <_dtoa_r+0x67a>
 800bfb4:	4615      	mov	r5, r2
 800bfb6:	e7f4      	b.n	800bfa2 <_dtoa_r+0x5d2>
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_dtoa_r+0x600>)
 800bfba:	f7f4 fb3d 	bl	8000638 <__aeabi_dmul>
 800bfbe:	e9cd 0100 	strd	r0, r1, [sp]
 800bfc2:	e7bc      	b.n	800bf3e <_dtoa_r+0x56e>
 800bfc4:	08010da0 	.word	0x08010da0
 800bfc8:	08010d78 	.word	0x08010d78
 800bfcc:	3ff00000 	.word	0x3ff00000
 800bfd0:	40240000 	.word	0x40240000
 800bfd4:	401c0000 	.word	0x401c0000
 800bfd8:	40140000 	.word	0x40140000
 800bfdc:	3fe00000 	.word	0x3fe00000
 800bfe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bfe4:	465d      	mov	r5, fp
 800bfe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 fc4d 	bl	800088c <__aeabi_ddiv>
 800bff2:	f7f4 fdd1 	bl	8000b98 <__aeabi_d2iz>
 800bff6:	4680      	mov	r8, r0
 800bff8:	f7f4 fab4 	bl	8000564 <__aeabi_i2d>
 800bffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c000:	f7f4 fb1a 	bl	8000638 <__aeabi_dmul>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c010:	f7f4 f95a 	bl	80002c8 <__aeabi_dsub>
 800c014:	f805 6b01 	strb.w	r6, [r5], #1
 800c018:	eba5 060b 	sub.w	r6, r5, fp
 800c01c:	45b1      	cmp	r9, r6
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	d139      	bne.n	800c098 <_dtoa_r+0x6c8>
 800c024:	f7f4 f952 	bl	80002cc <__adddf3>
 800c028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c02c:	4606      	mov	r6, r0
 800c02e:	460f      	mov	r7, r1
 800c030:	f7f4 fd92 	bl	8000b58 <__aeabi_dcmpgt>
 800c034:	b9c8      	cbnz	r0, 800c06a <_dtoa_r+0x69a>
 800c036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c03a:	4630      	mov	r0, r6
 800c03c:	4639      	mov	r1, r7
 800c03e:	f7f4 fd63 	bl	8000b08 <__aeabi_dcmpeq>
 800c042:	b110      	cbz	r0, 800c04a <_dtoa_r+0x67a>
 800c044:	f018 0f01 	tst.w	r8, #1
 800c048:	d10f      	bne.n	800c06a <_dtoa_r+0x69a>
 800c04a:	9904      	ldr	r1, [sp, #16]
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fdff 	bl	800cc50 <_Bfree>
 800c052:	2300      	movs	r3, #0
 800c054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c056:	702b      	strb	r3, [r5, #0]
 800c058:	f10a 0301 	add.w	r3, sl, #1
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8241 	beq.w	800c4e8 <_dtoa_r+0xb18>
 800c066:	601d      	str	r5, [r3, #0]
 800c068:	e23e      	b.n	800c4e8 <_dtoa_r+0xb18>
 800c06a:	f8cd a020 	str.w	sl, [sp, #32]
 800c06e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c072:	2a39      	cmp	r2, #57	; 0x39
 800c074:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c078:	d108      	bne.n	800c08c <_dtoa_r+0x6bc>
 800c07a:	459b      	cmp	fp, r3
 800c07c:	d10a      	bne.n	800c094 <_dtoa_r+0x6c4>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	3301      	adds	r3, #1
 800c082:	9308      	str	r3, [sp, #32]
 800c084:	2330      	movs	r3, #48	; 0x30
 800c086:	f88b 3000 	strb.w	r3, [fp]
 800c08a:	465b      	mov	r3, fp
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	3201      	adds	r2, #1
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	e78c      	b.n	800bfae <_dtoa_r+0x5de>
 800c094:	461d      	mov	r5, r3
 800c096:	e7ea      	b.n	800c06e <_dtoa_r+0x69e>
 800c098:	2200      	movs	r2, #0
 800c09a:	4b9b      	ldr	r3, [pc, #620]	; (800c308 <_dtoa_r+0x938>)
 800c09c:	f7f4 facc 	bl	8000638 <__aeabi_dmul>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	f7f4 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d09a      	beq.n	800bfe6 <_dtoa_r+0x616>
 800c0b0:	e7cb      	b.n	800c04a <_dtoa_r+0x67a>
 800c0b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b4:	2a00      	cmp	r2, #0
 800c0b6:	f000 808b 	beq.w	800c1d0 <_dtoa_r+0x800>
 800c0ba:	9a06      	ldr	r2, [sp, #24]
 800c0bc:	2a01      	cmp	r2, #1
 800c0be:	dc6e      	bgt.n	800c19e <_dtoa_r+0x7ce>
 800c0c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	d067      	beq.n	800c196 <_dtoa_r+0x7c6>
 800c0c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0ca:	9f07      	ldr	r7, [sp, #28]
 800c0cc:	9d05      	ldr	r5, [sp, #20]
 800c0ce:	9a05      	ldr	r2, [sp, #20]
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	441a      	add	r2, r3
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	9205      	str	r2, [sp, #20]
 800c0d8:	4498      	add	r8, r3
 800c0da:	f000 fe97 	bl	800ce0c <__i2b>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	2d00      	cmp	r5, #0
 800c0e2:	dd0c      	ble.n	800c0fe <_dtoa_r+0x72e>
 800c0e4:	f1b8 0f00 	cmp.w	r8, #0
 800c0e8:	dd09      	ble.n	800c0fe <_dtoa_r+0x72e>
 800c0ea:	4545      	cmp	r5, r8
 800c0ec:	9a05      	ldr	r2, [sp, #20]
 800c0ee:	462b      	mov	r3, r5
 800c0f0:	bfa8      	it	ge
 800c0f2:	4643      	movge	r3, r8
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	9205      	str	r2, [sp, #20]
 800c0f8:	1aed      	subs	r5, r5, r3
 800c0fa:	eba8 0803 	sub.w	r8, r8, r3
 800c0fe:	9b07      	ldr	r3, [sp, #28]
 800c100:	b1eb      	cbz	r3, 800c13e <_dtoa_r+0x76e>
 800c102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c104:	2b00      	cmp	r3, #0
 800c106:	d067      	beq.n	800c1d8 <_dtoa_r+0x808>
 800c108:	b18f      	cbz	r7, 800c12e <_dtoa_r+0x75e>
 800c10a:	4631      	mov	r1, r6
 800c10c:	463a      	mov	r2, r7
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 ff1c 	bl	800cf4c <__pow5mult>
 800c114:	9a04      	ldr	r2, [sp, #16]
 800c116:	4601      	mov	r1, r0
 800c118:	4606      	mov	r6, r0
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fe7f 	bl	800ce1e <__multiply>
 800c120:	9904      	ldr	r1, [sp, #16]
 800c122:	9008      	str	r0, [sp, #32]
 800c124:	4620      	mov	r0, r4
 800c126:	f000 fd93 	bl	800cc50 <_Bfree>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	9b07      	ldr	r3, [sp, #28]
 800c130:	1bda      	subs	r2, r3, r7
 800c132:	d004      	beq.n	800c13e <_dtoa_r+0x76e>
 800c134:	9904      	ldr	r1, [sp, #16]
 800c136:	4620      	mov	r0, r4
 800c138:	f000 ff08 	bl	800cf4c <__pow5mult>
 800c13c:	9004      	str	r0, [sp, #16]
 800c13e:	2101      	movs	r1, #1
 800c140:	4620      	mov	r0, r4
 800c142:	f000 fe63 	bl	800ce0c <__i2b>
 800c146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c148:	4607      	mov	r7, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 81d0 	beq.w	800c4f0 <_dtoa_r+0xb20>
 800c150:	461a      	mov	r2, r3
 800c152:	4601      	mov	r1, r0
 800c154:	4620      	mov	r0, r4
 800c156:	f000 fef9 	bl	800cf4c <__pow5mult>
 800c15a:	9b06      	ldr	r3, [sp, #24]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	4607      	mov	r7, r0
 800c160:	dc40      	bgt.n	800c1e4 <_dtoa_r+0x814>
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d139      	bne.n	800c1dc <_dtoa_r+0x80c>
 800c168:	9b01      	ldr	r3, [sp, #4]
 800c16a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d136      	bne.n	800c1e0 <_dtoa_r+0x810>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c178:	0d1b      	lsrs	r3, r3, #20
 800c17a:	051b      	lsls	r3, r3, #20
 800c17c:	b12b      	cbz	r3, 800c18a <_dtoa_r+0x7ba>
 800c17e:	9b05      	ldr	r3, [sp, #20]
 800c180:	3301      	adds	r3, #1
 800c182:	9305      	str	r3, [sp, #20]
 800c184:	f108 0801 	add.w	r8, r8, #1
 800c188:	2301      	movs	r3, #1
 800c18a:	9307      	str	r3, [sp, #28]
 800c18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d12a      	bne.n	800c1e8 <_dtoa_r+0x818>
 800c192:	2001      	movs	r0, #1
 800c194:	e030      	b.n	800c1f8 <_dtoa_r+0x828>
 800c196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c198:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c19c:	e795      	b.n	800c0ca <_dtoa_r+0x6fa>
 800c19e:	9b07      	ldr	r3, [sp, #28]
 800c1a0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c1a4:	42bb      	cmp	r3, r7
 800c1a6:	bfbf      	itttt	lt
 800c1a8:	9b07      	ldrlt	r3, [sp, #28]
 800c1aa:	9707      	strlt	r7, [sp, #28]
 800c1ac:	1afa      	sublt	r2, r7, r3
 800c1ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c1b0:	bfbb      	ittet	lt
 800c1b2:	189b      	addlt	r3, r3, r2
 800c1b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c1b6:	1bdf      	subge	r7, r3, r7
 800c1b8:	2700      	movlt	r7, #0
 800c1ba:	f1b9 0f00 	cmp.w	r9, #0
 800c1be:	bfb5      	itete	lt
 800c1c0:	9b05      	ldrlt	r3, [sp, #20]
 800c1c2:	9d05      	ldrge	r5, [sp, #20]
 800c1c4:	eba3 0509 	sublt.w	r5, r3, r9
 800c1c8:	464b      	movge	r3, r9
 800c1ca:	bfb8      	it	lt
 800c1cc:	2300      	movlt	r3, #0
 800c1ce:	e77e      	b.n	800c0ce <_dtoa_r+0x6fe>
 800c1d0:	9f07      	ldr	r7, [sp, #28]
 800c1d2:	9d05      	ldr	r5, [sp, #20]
 800c1d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c1d6:	e783      	b.n	800c0e0 <_dtoa_r+0x710>
 800c1d8:	9a07      	ldr	r2, [sp, #28]
 800c1da:	e7ab      	b.n	800c134 <_dtoa_r+0x764>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e7d4      	b.n	800c18a <_dtoa_r+0x7ba>
 800c1e0:	9b00      	ldr	r3, [sp, #0]
 800c1e2:	e7d2      	b.n	800c18a <_dtoa_r+0x7ba>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9307      	str	r3, [sp, #28]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c1ee:	6918      	ldr	r0, [r3, #16]
 800c1f0:	f000 fdbe 	bl	800cd70 <__hi0bits>
 800c1f4:	f1c0 0020 	rsb	r0, r0, #32
 800c1f8:	4440      	add	r0, r8
 800c1fa:	f010 001f 	ands.w	r0, r0, #31
 800c1fe:	d047      	beq.n	800c290 <_dtoa_r+0x8c0>
 800c200:	f1c0 0320 	rsb	r3, r0, #32
 800c204:	2b04      	cmp	r3, #4
 800c206:	dd3b      	ble.n	800c280 <_dtoa_r+0x8b0>
 800c208:	9b05      	ldr	r3, [sp, #20]
 800c20a:	f1c0 001c 	rsb	r0, r0, #28
 800c20e:	4403      	add	r3, r0
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	4405      	add	r5, r0
 800c214:	4480      	add	r8, r0
 800c216:	9b05      	ldr	r3, [sp, #20]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dd05      	ble.n	800c228 <_dtoa_r+0x858>
 800c21c:	461a      	mov	r2, r3
 800c21e:	9904      	ldr	r1, [sp, #16]
 800c220:	4620      	mov	r0, r4
 800c222:	f000 fee1 	bl	800cfe8 <__lshift>
 800c226:	9004      	str	r0, [sp, #16]
 800c228:	f1b8 0f00 	cmp.w	r8, #0
 800c22c:	dd05      	ble.n	800c23a <_dtoa_r+0x86a>
 800c22e:	4639      	mov	r1, r7
 800c230:	4642      	mov	r2, r8
 800c232:	4620      	mov	r0, r4
 800c234:	f000 fed8 	bl	800cfe8 <__lshift>
 800c238:	4607      	mov	r7, r0
 800c23a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c23c:	b353      	cbz	r3, 800c294 <_dtoa_r+0x8c4>
 800c23e:	4639      	mov	r1, r7
 800c240:	9804      	ldr	r0, [sp, #16]
 800c242:	f000 ff25 	bl	800d090 <__mcmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	da24      	bge.n	800c294 <_dtoa_r+0x8c4>
 800c24a:	2300      	movs	r3, #0
 800c24c:	220a      	movs	r2, #10
 800c24e:	9904      	ldr	r1, [sp, #16]
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fd14 	bl	800cc7e <__multadd>
 800c256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c258:	9004      	str	r0, [sp, #16]
 800c25a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 814d 	beq.w	800c4fe <_dtoa_r+0xb2e>
 800c264:	2300      	movs	r3, #0
 800c266:	4631      	mov	r1, r6
 800c268:	220a      	movs	r2, #10
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fd07 	bl	800cc7e <__multadd>
 800c270:	9b02      	ldr	r3, [sp, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	4606      	mov	r6, r0
 800c276:	dc4f      	bgt.n	800c318 <_dtoa_r+0x948>
 800c278:	9b06      	ldr	r3, [sp, #24]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	dd4c      	ble.n	800c318 <_dtoa_r+0x948>
 800c27e:	e011      	b.n	800c2a4 <_dtoa_r+0x8d4>
 800c280:	d0c9      	beq.n	800c216 <_dtoa_r+0x846>
 800c282:	9a05      	ldr	r2, [sp, #20]
 800c284:	331c      	adds	r3, #28
 800c286:	441a      	add	r2, r3
 800c288:	9205      	str	r2, [sp, #20]
 800c28a:	441d      	add	r5, r3
 800c28c:	4498      	add	r8, r3
 800c28e:	e7c2      	b.n	800c216 <_dtoa_r+0x846>
 800c290:	4603      	mov	r3, r0
 800c292:	e7f6      	b.n	800c282 <_dtoa_r+0x8b2>
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	dc38      	bgt.n	800c30c <_dtoa_r+0x93c>
 800c29a:	9b06      	ldr	r3, [sp, #24]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	dd35      	ble.n	800c30c <_dtoa_r+0x93c>
 800c2a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	b963      	cbnz	r3, 800c2c2 <_dtoa_r+0x8f2>
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	2205      	movs	r2, #5
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f000 fce6 	bl	800cc7e <__multadd>
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	4607      	mov	r7, r0
 800c2b6:	9804      	ldr	r0, [sp, #16]
 800c2b8:	f000 feea 	bl	800d090 <__mcmp>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f73f adcc 	bgt.w	800be5a <_dtoa_r+0x48a>
 800c2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c4:	465d      	mov	r5, fp
 800c2c6:	ea6f 0a03 	mvn.w	sl, r3
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fcbd 	bl	800cc50 <_Bfree>
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	f43f aeb7 	beq.w	800c04a <_dtoa_r+0x67a>
 800c2dc:	f1b9 0f00 	cmp.w	r9, #0
 800c2e0:	d005      	beq.n	800c2ee <_dtoa_r+0x91e>
 800c2e2:	45b1      	cmp	r9, r6
 800c2e4:	d003      	beq.n	800c2ee <_dtoa_r+0x91e>
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fcb1 	bl	800cc50 <_Bfree>
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 fcad 	bl	800cc50 <_Bfree>
 800c2f6:	e6a8      	b.n	800c04a <_dtoa_r+0x67a>
 800c2f8:	2700      	movs	r7, #0
 800c2fa:	463e      	mov	r6, r7
 800c2fc:	e7e1      	b.n	800c2c2 <_dtoa_r+0x8f2>
 800c2fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c302:	463e      	mov	r6, r7
 800c304:	e5a9      	b.n	800be5a <_dtoa_r+0x48a>
 800c306:	bf00      	nop
 800c308:	40240000 	.word	0x40240000
 800c30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c30e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 80fa 	beq.w	800c50c <_dtoa_r+0xb3c>
 800c318:	2d00      	cmp	r5, #0
 800c31a:	dd05      	ble.n	800c328 <_dtoa_r+0x958>
 800c31c:	4631      	mov	r1, r6
 800c31e:	462a      	mov	r2, r5
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fe61 	bl	800cfe8 <__lshift>
 800c326:	4606      	mov	r6, r0
 800c328:	9b07      	ldr	r3, [sp, #28]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d04c      	beq.n	800c3c8 <_dtoa_r+0x9f8>
 800c32e:	6871      	ldr	r1, [r6, #4]
 800c330:	4620      	mov	r0, r4
 800c332:	f000 fc59 	bl	800cbe8 <_Balloc>
 800c336:	6932      	ldr	r2, [r6, #16]
 800c338:	3202      	adds	r2, #2
 800c33a:	4605      	mov	r5, r0
 800c33c:	0092      	lsls	r2, r2, #2
 800c33e:	f106 010c 	add.w	r1, r6, #12
 800c342:	300c      	adds	r0, #12
 800c344:	f7fd fd20 	bl	8009d88 <memcpy>
 800c348:	2201      	movs	r2, #1
 800c34a:	4629      	mov	r1, r5
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 fe4b 	bl	800cfe8 <__lshift>
 800c352:	9b00      	ldr	r3, [sp, #0]
 800c354:	f8cd b014 	str.w	fp, [sp, #20]
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	46b1      	mov	r9, r6
 800c35e:	9307      	str	r3, [sp, #28]
 800c360:	4606      	mov	r6, r0
 800c362:	4639      	mov	r1, r7
 800c364:	9804      	ldr	r0, [sp, #16]
 800c366:	f7ff faa7 	bl	800b8b8 <quorem>
 800c36a:	4649      	mov	r1, r9
 800c36c:	4605      	mov	r5, r0
 800c36e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c372:	9804      	ldr	r0, [sp, #16]
 800c374:	f000 fe8c 	bl	800d090 <__mcmp>
 800c378:	4632      	mov	r2, r6
 800c37a:	9000      	str	r0, [sp, #0]
 800c37c:	4639      	mov	r1, r7
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 fea0 	bl	800d0c4 <__mdiff>
 800c384:	68c3      	ldr	r3, [r0, #12]
 800c386:	4602      	mov	r2, r0
 800c388:	bb03      	cbnz	r3, 800c3cc <_dtoa_r+0x9fc>
 800c38a:	4601      	mov	r1, r0
 800c38c:	9008      	str	r0, [sp, #32]
 800c38e:	9804      	ldr	r0, [sp, #16]
 800c390:	f000 fe7e 	bl	800d090 <__mcmp>
 800c394:	9a08      	ldr	r2, [sp, #32]
 800c396:	4603      	mov	r3, r0
 800c398:	4611      	mov	r1, r2
 800c39a:	4620      	mov	r0, r4
 800c39c:	9308      	str	r3, [sp, #32]
 800c39e:	f000 fc57 	bl	800cc50 <_Bfree>
 800c3a2:	9b08      	ldr	r3, [sp, #32]
 800c3a4:	b9a3      	cbnz	r3, 800c3d0 <_dtoa_r+0xa00>
 800c3a6:	9a06      	ldr	r2, [sp, #24]
 800c3a8:	b992      	cbnz	r2, 800c3d0 <_dtoa_r+0xa00>
 800c3aa:	9a07      	ldr	r2, [sp, #28]
 800c3ac:	b982      	cbnz	r2, 800c3d0 <_dtoa_r+0xa00>
 800c3ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c3b2:	d029      	beq.n	800c408 <_dtoa_r+0xa38>
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dd01      	ble.n	800c3be <_dtoa_r+0x9ee>
 800c3ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c3be:	9b05      	ldr	r3, [sp, #20]
 800c3c0:	1c5d      	adds	r5, r3, #1
 800c3c2:	f883 8000 	strb.w	r8, [r3]
 800c3c6:	e782      	b.n	800c2ce <_dtoa_r+0x8fe>
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	e7c2      	b.n	800c352 <_dtoa_r+0x982>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e7e3      	b.n	800c398 <_dtoa_r+0x9c8>
 800c3d0:	9a00      	ldr	r2, [sp, #0]
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	db04      	blt.n	800c3e0 <_dtoa_r+0xa10>
 800c3d6:	d125      	bne.n	800c424 <_dtoa_r+0xa54>
 800c3d8:	9a06      	ldr	r2, [sp, #24]
 800c3da:	bb1a      	cbnz	r2, 800c424 <_dtoa_r+0xa54>
 800c3dc:	9a07      	ldr	r2, [sp, #28]
 800c3de:	bb0a      	cbnz	r2, 800c424 <_dtoa_r+0xa54>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	ddec      	ble.n	800c3be <_dtoa_r+0x9ee>
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	9904      	ldr	r1, [sp, #16]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fdfd 	bl	800cfe8 <__lshift>
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	9004      	str	r0, [sp, #16]
 800c3f2:	f000 fe4d 	bl	800d090 <__mcmp>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	dc03      	bgt.n	800c402 <_dtoa_r+0xa32>
 800c3fa:	d1e0      	bne.n	800c3be <_dtoa_r+0x9ee>
 800c3fc:	f018 0f01 	tst.w	r8, #1
 800c400:	d0dd      	beq.n	800c3be <_dtoa_r+0x9ee>
 800c402:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c406:	d1d8      	bne.n	800c3ba <_dtoa_r+0x9ea>
 800c408:	9b05      	ldr	r3, [sp, #20]
 800c40a:	9a05      	ldr	r2, [sp, #20]
 800c40c:	1c5d      	adds	r5, r3, #1
 800c40e:	2339      	movs	r3, #57	; 0x39
 800c410:	7013      	strb	r3, [r2, #0]
 800c412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c416:	2b39      	cmp	r3, #57	; 0x39
 800c418:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c41c:	d04f      	beq.n	800c4be <_dtoa_r+0xaee>
 800c41e:	3301      	adds	r3, #1
 800c420:	7013      	strb	r3, [r2, #0]
 800c422:	e754      	b.n	800c2ce <_dtoa_r+0x8fe>
 800c424:	9a05      	ldr	r2, [sp, #20]
 800c426:	2b00      	cmp	r3, #0
 800c428:	f102 0501 	add.w	r5, r2, #1
 800c42c:	dd06      	ble.n	800c43c <_dtoa_r+0xa6c>
 800c42e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c432:	d0e9      	beq.n	800c408 <_dtoa_r+0xa38>
 800c434:	f108 0801 	add.w	r8, r8, #1
 800c438:	9b05      	ldr	r3, [sp, #20]
 800c43a:	e7c2      	b.n	800c3c2 <_dtoa_r+0x9f2>
 800c43c:	9a02      	ldr	r2, [sp, #8]
 800c43e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c442:	eba5 030b 	sub.w	r3, r5, fp
 800c446:	4293      	cmp	r3, r2
 800c448:	d021      	beq.n	800c48e <_dtoa_r+0xabe>
 800c44a:	2300      	movs	r3, #0
 800c44c:	220a      	movs	r2, #10
 800c44e:	9904      	ldr	r1, [sp, #16]
 800c450:	4620      	mov	r0, r4
 800c452:	f000 fc14 	bl	800cc7e <__multadd>
 800c456:	45b1      	cmp	r9, r6
 800c458:	9004      	str	r0, [sp, #16]
 800c45a:	f04f 0300 	mov.w	r3, #0
 800c45e:	f04f 020a 	mov.w	r2, #10
 800c462:	4649      	mov	r1, r9
 800c464:	4620      	mov	r0, r4
 800c466:	d105      	bne.n	800c474 <_dtoa_r+0xaa4>
 800c468:	f000 fc09 	bl	800cc7e <__multadd>
 800c46c:	4681      	mov	r9, r0
 800c46e:	4606      	mov	r6, r0
 800c470:	9505      	str	r5, [sp, #20]
 800c472:	e776      	b.n	800c362 <_dtoa_r+0x992>
 800c474:	f000 fc03 	bl	800cc7e <__multadd>
 800c478:	4631      	mov	r1, r6
 800c47a:	4681      	mov	r9, r0
 800c47c:	2300      	movs	r3, #0
 800c47e:	220a      	movs	r2, #10
 800c480:	4620      	mov	r0, r4
 800c482:	f000 fbfc 	bl	800cc7e <__multadd>
 800c486:	4606      	mov	r6, r0
 800c488:	e7f2      	b.n	800c470 <_dtoa_r+0xaa0>
 800c48a:	f04f 0900 	mov.w	r9, #0
 800c48e:	2201      	movs	r2, #1
 800c490:	9904      	ldr	r1, [sp, #16]
 800c492:	4620      	mov	r0, r4
 800c494:	f000 fda8 	bl	800cfe8 <__lshift>
 800c498:	4639      	mov	r1, r7
 800c49a:	9004      	str	r0, [sp, #16]
 800c49c:	f000 fdf8 	bl	800d090 <__mcmp>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	dcb6      	bgt.n	800c412 <_dtoa_r+0xa42>
 800c4a4:	d102      	bne.n	800c4ac <_dtoa_r+0xadc>
 800c4a6:	f018 0f01 	tst.w	r8, #1
 800c4aa:	d1b2      	bne.n	800c412 <_dtoa_r+0xa42>
 800c4ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4b0:	2b30      	cmp	r3, #48	; 0x30
 800c4b2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c4b6:	f47f af0a 	bne.w	800c2ce <_dtoa_r+0x8fe>
 800c4ba:	4615      	mov	r5, r2
 800c4bc:	e7f6      	b.n	800c4ac <_dtoa_r+0xadc>
 800c4be:	4593      	cmp	fp, r2
 800c4c0:	d105      	bne.n	800c4ce <_dtoa_r+0xafe>
 800c4c2:	2331      	movs	r3, #49	; 0x31
 800c4c4:	f10a 0a01 	add.w	sl, sl, #1
 800c4c8:	f88b 3000 	strb.w	r3, [fp]
 800c4cc:	e6ff      	b.n	800c2ce <_dtoa_r+0x8fe>
 800c4ce:	4615      	mov	r5, r2
 800c4d0:	e79f      	b.n	800c412 <_dtoa_r+0xa42>
 800c4d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c538 <_dtoa_r+0xb68>
 800c4d6:	e007      	b.n	800c4e8 <_dtoa_r+0xb18>
 800c4d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c53c <_dtoa_r+0xb6c>
 800c4de:	b11b      	cbz	r3, 800c4e8 <_dtoa_r+0xb18>
 800c4e0:	f10b 0308 	add.w	r3, fp, #8
 800c4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4e6:	6013      	str	r3, [r2, #0]
 800c4e8:	4658      	mov	r0, fp
 800c4ea:	b017      	add	sp, #92	; 0x5c
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	9b06      	ldr	r3, [sp, #24]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	f77f ae35 	ble.w	800c162 <_dtoa_r+0x792>
 800c4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4fa:	9307      	str	r3, [sp, #28]
 800c4fc:	e649      	b.n	800c192 <_dtoa_r+0x7c2>
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	dc03      	bgt.n	800c50c <_dtoa_r+0xb3c>
 800c504:	9b06      	ldr	r3, [sp, #24]
 800c506:	2b02      	cmp	r3, #2
 800c508:	f73f aecc 	bgt.w	800c2a4 <_dtoa_r+0x8d4>
 800c50c:	465d      	mov	r5, fp
 800c50e:	4639      	mov	r1, r7
 800c510:	9804      	ldr	r0, [sp, #16]
 800c512:	f7ff f9d1 	bl	800b8b8 <quorem>
 800c516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c51a:	f805 8b01 	strb.w	r8, [r5], #1
 800c51e:	9a02      	ldr	r2, [sp, #8]
 800c520:	eba5 030b 	sub.w	r3, r5, fp
 800c524:	429a      	cmp	r2, r3
 800c526:	ddb0      	ble.n	800c48a <_dtoa_r+0xaba>
 800c528:	2300      	movs	r3, #0
 800c52a:	220a      	movs	r2, #10
 800c52c:	9904      	ldr	r1, [sp, #16]
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 fba5 	bl	800cc7e <__multadd>
 800c534:	9004      	str	r0, [sp, #16]
 800c536:	e7ea      	b.n	800c50e <_dtoa_r+0xb3e>
 800c538:	08010cbc 	.word	0x08010cbc
 800c53c:	08010d5d 	.word	0x08010d5d

0800c540 <rshift>:
 800c540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c542:	6906      	ldr	r6, [r0, #16]
 800c544:	114b      	asrs	r3, r1, #5
 800c546:	429e      	cmp	r6, r3
 800c548:	f100 0414 	add.w	r4, r0, #20
 800c54c:	dd30      	ble.n	800c5b0 <rshift+0x70>
 800c54e:	f011 011f 	ands.w	r1, r1, #31
 800c552:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c556:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c55a:	d108      	bne.n	800c56e <rshift+0x2e>
 800c55c:	4621      	mov	r1, r4
 800c55e:	42b2      	cmp	r2, r6
 800c560:	460b      	mov	r3, r1
 800c562:	d211      	bcs.n	800c588 <rshift+0x48>
 800c564:	f852 3b04 	ldr.w	r3, [r2], #4
 800c568:	f841 3b04 	str.w	r3, [r1], #4
 800c56c:	e7f7      	b.n	800c55e <rshift+0x1e>
 800c56e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c572:	f1c1 0c20 	rsb	ip, r1, #32
 800c576:	40cd      	lsrs	r5, r1
 800c578:	3204      	adds	r2, #4
 800c57a:	4623      	mov	r3, r4
 800c57c:	42b2      	cmp	r2, r6
 800c57e:	4617      	mov	r7, r2
 800c580:	d30c      	bcc.n	800c59c <rshift+0x5c>
 800c582:	601d      	str	r5, [r3, #0]
 800c584:	b105      	cbz	r5, 800c588 <rshift+0x48>
 800c586:	3304      	adds	r3, #4
 800c588:	1b1a      	subs	r2, r3, r4
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c590:	bf08      	it	eq
 800c592:	2300      	moveq	r3, #0
 800c594:	6102      	str	r2, [r0, #16]
 800c596:	bf08      	it	eq
 800c598:	6143      	streq	r3, [r0, #20]
 800c59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59c:	683f      	ldr	r7, [r7, #0]
 800c59e:	fa07 f70c 	lsl.w	r7, r7, ip
 800c5a2:	433d      	orrs	r5, r7
 800c5a4:	f843 5b04 	str.w	r5, [r3], #4
 800c5a8:	f852 5b04 	ldr.w	r5, [r2], #4
 800c5ac:	40cd      	lsrs	r5, r1
 800c5ae:	e7e5      	b.n	800c57c <rshift+0x3c>
 800c5b0:	4623      	mov	r3, r4
 800c5b2:	e7e9      	b.n	800c588 <rshift+0x48>

0800c5b4 <__hexdig_fun>:
 800c5b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5b8:	2b09      	cmp	r3, #9
 800c5ba:	d802      	bhi.n	800c5c2 <__hexdig_fun+0xe>
 800c5bc:	3820      	subs	r0, #32
 800c5be:	b2c0      	uxtb	r0, r0
 800c5c0:	4770      	bx	lr
 800c5c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5c6:	2b05      	cmp	r3, #5
 800c5c8:	d801      	bhi.n	800c5ce <__hexdig_fun+0x1a>
 800c5ca:	3847      	subs	r0, #71	; 0x47
 800c5cc:	e7f7      	b.n	800c5be <__hexdig_fun+0xa>
 800c5ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5d2:	2b05      	cmp	r3, #5
 800c5d4:	d801      	bhi.n	800c5da <__hexdig_fun+0x26>
 800c5d6:	3827      	subs	r0, #39	; 0x27
 800c5d8:	e7f1      	b.n	800c5be <__hexdig_fun+0xa>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	4770      	bx	lr

0800c5de <__gethex>:
 800c5de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e2:	b08b      	sub	sp, #44	; 0x2c
 800c5e4:	468a      	mov	sl, r1
 800c5e6:	9002      	str	r0, [sp, #8]
 800c5e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c5ea:	9306      	str	r3, [sp, #24]
 800c5ec:	4690      	mov	r8, r2
 800c5ee:	f000 fad0 	bl	800cb92 <__localeconv_l>
 800c5f2:	6803      	ldr	r3, [r0, #0]
 800c5f4:	9303      	str	r3, [sp, #12]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7f3 fe0a 	bl	8000210 <strlen>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	9001      	str	r0, [sp, #4]
 800c600:	4403      	add	r3, r0
 800c602:	f04f 0b00 	mov.w	fp, #0
 800c606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c60a:	9307      	str	r3, [sp, #28]
 800c60c:	f8da 3000 	ldr.w	r3, [sl]
 800c610:	3302      	adds	r3, #2
 800c612:	461f      	mov	r7, r3
 800c614:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c618:	2830      	cmp	r0, #48	; 0x30
 800c61a:	d06c      	beq.n	800c6f6 <__gethex+0x118>
 800c61c:	f7ff ffca 	bl	800c5b4 <__hexdig_fun>
 800c620:	4604      	mov	r4, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	d16a      	bne.n	800c6fc <__gethex+0x11e>
 800c626:	9a01      	ldr	r2, [sp, #4]
 800c628:	9903      	ldr	r1, [sp, #12]
 800c62a:	4638      	mov	r0, r7
 800c62c:	f001 f8f4 	bl	800d818 <strncmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	d166      	bne.n	800c702 <__gethex+0x124>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	5cf8      	ldrb	r0, [r7, r3]
 800c638:	18fe      	adds	r6, r7, r3
 800c63a:	f7ff ffbb 	bl	800c5b4 <__hexdig_fun>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d062      	beq.n	800c708 <__gethex+0x12a>
 800c642:	4633      	mov	r3, r6
 800c644:	7818      	ldrb	r0, [r3, #0]
 800c646:	2830      	cmp	r0, #48	; 0x30
 800c648:	461f      	mov	r7, r3
 800c64a:	f103 0301 	add.w	r3, r3, #1
 800c64e:	d0f9      	beq.n	800c644 <__gethex+0x66>
 800c650:	f7ff ffb0 	bl	800c5b4 <__hexdig_fun>
 800c654:	fab0 f580 	clz	r5, r0
 800c658:	096d      	lsrs	r5, r5, #5
 800c65a:	4634      	mov	r4, r6
 800c65c:	f04f 0b01 	mov.w	fp, #1
 800c660:	463a      	mov	r2, r7
 800c662:	4616      	mov	r6, r2
 800c664:	3201      	adds	r2, #1
 800c666:	7830      	ldrb	r0, [r6, #0]
 800c668:	f7ff ffa4 	bl	800c5b4 <__hexdig_fun>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d1f8      	bne.n	800c662 <__gethex+0x84>
 800c670:	9a01      	ldr	r2, [sp, #4]
 800c672:	9903      	ldr	r1, [sp, #12]
 800c674:	4630      	mov	r0, r6
 800c676:	f001 f8cf 	bl	800d818 <strncmp>
 800c67a:	b950      	cbnz	r0, 800c692 <__gethex+0xb4>
 800c67c:	b954      	cbnz	r4, 800c694 <__gethex+0xb6>
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	18f4      	adds	r4, r6, r3
 800c682:	4622      	mov	r2, r4
 800c684:	4616      	mov	r6, r2
 800c686:	3201      	adds	r2, #1
 800c688:	7830      	ldrb	r0, [r6, #0]
 800c68a:	f7ff ff93 	bl	800c5b4 <__hexdig_fun>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d1f8      	bne.n	800c684 <__gethex+0xa6>
 800c692:	b10c      	cbz	r4, 800c698 <__gethex+0xba>
 800c694:	1ba4      	subs	r4, r4, r6
 800c696:	00a4      	lsls	r4, r4, #2
 800c698:	7833      	ldrb	r3, [r6, #0]
 800c69a:	2b50      	cmp	r3, #80	; 0x50
 800c69c:	d001      	beq.n	800c6a2 <__gethex+0xc4>
 800c69e:	2b70      	cmp	r3, #112	; 0x70
 800c6a0:	d140      	bne.n	800c724 <__gethex+0x146>
 800c6a2:	7873      	ldrb	r3, [r6, #1]
 800c6a4:	2b2b      	cmp	r3, #43	; 0x2b
 800c6a6:	d031      	beq.n	800c70c <__gethex+0x12e>
 800c6a8:	2b2d      	cmp	r3, #45	; 0x2d
 800c6aa:	d033      	beq.n	800c714 <__gethex+0x136>
 800c6ac:	1c71      	adds	r1, r6, #1
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	7808      	ldrb	r0, [r1, #0]
 800c6b4:	f7ff ff7e 	bl	800c5b4 <__hexdig_fun>
 800c6b8:	1e43      	subs	r3, r0, #1
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b18      	cmp	r3, #24
 800c6be:	d831      	bhi.n	800c724 <__gethex+0x146>
 800c6c0:	f1a0 0210 	sub.w	r2, r0, #16
 800c6c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6c8:	f7ff ff74 	bl	800c5b4 <__hexdig_fun>
 800c6cc:	1e43      	subs	r3, r0, #1
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b18      	cmp	r3, #24
 800c6d2:	d922      	bls.n	800c71a <__gethex+0x13c>
 800c6d4:	f1b9 0f00 	cmp.w	r9, #0
 800c6d8:	d000      	beq.n	800c6dc <__gethex+0xfe>
 800c6da:	4252      	negs	r2, r2
 800c6dc:	4414      	add	r4, r2
 800c6de:	f8ca 1000 	str.w	r1, [sl]
 800c6e2:	b30d      	cbz	r5, 800c728 <__gethex+0x14a>
 800c6e4:	f1bb 0f00 	cmp.w	fp, #0
 800c6e8:	bf0c      	ite	eq
 800c6ea:	2706      	moveq	r7, #6
 800c6ec:	2700      	movne	r7, #0
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	b00b      	add	sp, #44	; 0x2c
 800c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f6:	f10b 0b01 	add.w	fp, fp, #1
 800c6fa:	e78a      	b.n	800c612 <__gethex+0x34>
 800c6fc:	2500      	movs	r5, #0
 800c6fe:	462c      	mov	r4, r5
 800c700:	e7ae      	b.n	800c660 <__gethex+0x82>
 800c702:	463e      	mov	r6, r7
 800c704:	2501      	movs	r5, #1
 800c706:	e7c7      	b.n	800c698 <__gethex+0xba>
 800c708:	4604      	mov	r4, r0
 800c70a:	e7fb      	b.n	800c704 <__gethex+0x126>
 800c70c:	f04f 0900 	mov.w	r9, #0
 800c710:	1cb1      	adds	r1, r6, #2
 800c712:	e7ce      	b.n	800c6b2 <__gethex+0xd4>
 800c714:	f04f 0901 	mov.w	r9, #1
 800c718:	e7fa      	b.n	800c710 <__gethex+0x132>
 800c71a:	230a      	movs	r3, #10
 800c71c:	fb03 0202 	mla	r2, r3, r2, r0
 800c720:	3a10      	subs	r2, #16
 800c722:	e7cf      	b.n	800c6c4 <__gethex+0xe6>
 800c724:	4631      	mov	r1, r6
 800c726:	e7da      	b.n	800c6de <__gethex+0x100>
 800c728:	1bf3      	subs	r3, r6, r7
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4629      	mov	r1, r5
 800c72e:	2b07      	cmp	r3, #7
 800c730:	dc49      	bgt.n	800c7c6 <__gethex+0x1e8>
 800c732:	9802      	ldr	r0, [sp, #8]
 800c734:	f000 fa58 	bl	800cbe8 <_Balloc>
 800c738:	9b01      	ldr	r3, [sp, #4]
 800c73a:	f100 0914 	add.w	r9, r0, #20
 800c73e:	f04f 0b00 	mov.w	fp, #0
 800c742:	f1c3 0301 	rsb	r3, r3, #1
 800c746:	4605      	mov	r5, r0
 800c748:	f8cd 9010 	str.w	r9, [sp, #16]
 800c74c:	46da      	mov	sl, fp
 800c74e:	9308      	str	r3, [sp, #32]
 800c750:	42b7      	cmp	r7, r6
 800c752:	d33b      	bcc.n	800c7cc <__gethex+0x1ee>
 800c754:	9804      	ldr	r0, [sp, #16]
 800c756:	f840 ab04 	str.w	sl, [r0], #4
 800c75a:	eba0 0009 	sub.w	r0, r0, r9
 800c75e:	1080      	asrs	r0, r0, #2
 800c760:	6128      	str	r0, [r5, #16]
 800c762:	0147      	lsls	r7, r0, #5
 800c764:	4650      	mov	r0, sl
 800c766:	f000 fb03 	bl	800cd70 <__hi0bits>
 800c76a:	f8d8 6000 	ldr.w	r6, [r8]
 800c76e:	1a3f      	subs	r7, r7, r0
 800c770:	42b7      	cmp	r7, r6
 800c772:	dd64      	ble.n	800c83e <__gethex+0x260>
 800c774:	1bbf      	subs	r7, r7, r6
 800c776:	4639      	mov	r1, r7
 800c778:	4628      	mov	r0, r5
 800c77a:	f000 fe13 	bl	800d3a4 <__any_on>
 800c77e:	4682      	mov	sl, r0
 800c780:	b178      	cbz	r0, 800c7a2 <__gethex+0x1c4>
 800c782:	1e7b      	subs	r3, r7, #1
 800c784:	1159      	asrs	r1, r3, #5
 800c786:	f003 021f 	and.w	r2, r3, #31
 800c78a:	f04f 0a01 	mov.w	sl, #1
 800c78e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c792:	fa0a f202 	lsl.w	r2, sl, r2
 800c796:	420a      	tst	r2, r1
 800c798:	d003      	beq.n	800c7a2 <__gethex+0x1c4>
 800c79a:	4553      	cmp	r3, sl
 800c79c:	dc46      	bgt.n	800c82c <__gethex+0x24e>
 800c79e:	f04f 0a02 	mov.w	sl, #2
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f7ff fecb 	bl	800c540 <rshift>
 800c7aa:	443c      	add	r4, r7
 800c7ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7b0:	42a3      	cmp	r3, r4
 800c7b2:	da52      	bge.n	800c85a <__gethex+0x27c>
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	9802      	ldr	r0, [sp, #8]
 800c7b8:	f000 fa4a 	bl	800cc50 <_Bfree>
 800c7bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7be:	2300      	movs	r3, #0
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	27a3      	movs	r7, #163	; 0xa3
 800c7c4:	e793      	b.n	800c6ee <__gethex+0x110>
 800c7c6:	3101      	adds	r1, #1
 800c7c8:	105b      	asrs	r3, r3, #1
 800c7ca:	e7b0      	b.n	800c72e <__gethex+0x150>
 800c7cc:	1e73      	subs	r3, r6, #1
 800c7ce:	9305      	str	r3, [sp, #20]
 800c7d0:	9a07      	ldr	r2, [sp, #28]
 800c7d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d018      	beq.n	800c80c <__gethex+0x22e>
 800c7da:	f1bb 0f20 	cmp.w	fp, #32
 800c7de:	d107      	bne.n	800c7f0 <__gethex+0x212>
 800c7e0:	9b04      	ldr	r3, [sp, #16]
 800c7e2:	f8c3 a000 	str.w	sl, [r3]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	f04f 0a00 	mov.w	sl, #0
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	46d3      	mov	fp, sl
 800c7f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c7f4:	f7ff fede 	bl	800c5b4 <__hexdig_fun>
 800c7f8:	f000 000f 	and.w	r0, r0, #15
 800c7fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c800:	ea4a 0a00 	orr.w	sl, sl, r0
 800c804:	f10b 0b04 	add.w	fp, fp, #4
 800c808:	9b05      	ldr	r3, [sp, #20]
 800c80a:	e00d      	b.n	800c828 <__gethex+0x24a>
 800c80c:	9b05      	ldr	r3, [sp, #20]
 800c80e:	9a08      	ldr	r2, [sp, #32]
 800c810:	4413      	add	r3, r2
 800c812:	42bb      	cmp	r3, r7
 800c814:	d3e1      	bcc.n	800c7da <__gethex+0x1fc>
 800c816:	4618      	mov	r0, r3
 800c818:	9a01      	ldr	r2, [sp, #4]
 800c81a:	9903      	ldr	r1, [sp, #12]
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
 800c81e:	f000 fffb 	bl	800d818 <strncmp>
 800c822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c824:	2800      	cmp	r0, #0
 800c826:	d1d8      	bne.n	800c7da <__gethex+0x1fc>
 800c828:	461e      	mov	r6, r3
 800c82a:	e791      	b.n	800c750 <__gethex+0x172>
 800c82c:	1eb9      	subs	r1, r7, #2
 800c82e:	4628      	mov	r0, r5
 800c830:	f000 fdb8 	bl	800d3a4 <__any_on>
 800c834:	2800      	cmp	r0, #0
 800c836:	d0b2      	beq.n	800c79e <__gethex+0x1c0>
 800c838:	f04f 0a03 	mov.w	sl, #3
 800c83c:	e7b1      	b.n	800c7a2 <__gethex+0x1c4>
 800c83e:	da09      	bge.n	800c854 <__gethex+0x276>
 800c840:	1bf7      	subs	r7, r6, r7
 800c842:	4629      	mov	r1, r5
 800c844:	463a      	mov	r2, r7
 800c846:	9802      	ldr	r0, [sp, #8]
 800c848:	f000 fbce 	bl	800cfe8 <__lshift>
 800c84c:	1be4      	subs	r4, r4, r7
 800c84e:	4605      	mov	r5, r0
 800c850:	f100 0914 	add.w	r9, r0, #20
 800c854:	f04f 0a00 	mov.w	sl, #0
 800c858:	e7a8      	b.n	800c7ac <__gethex+0x1ce>
 800c85a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c85e:	42a0      	cmp	r0, r4
 800c860:	dd6a      	ble.n	800c938 <__gethex+0x35a>
 800c862:	1b04      	subs	r4, r0, r4
 800c864:	42a6      	cmp	r6, r4
 800c866:	dc2e      	bgt.n	800c8c6 <__gethex+0x2e8>
 800c868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d022      	beq.n	800c8b6 <__gethex+0x2d8>
 800c870:	2b03      	cmp	r3, #3
 800c872:	d024      	beq.n	800c8be <__gethex+0x2e0>
 800c874:	2b01      	cmp	r3, #1
 800c876:	d115      	bne.n	800c8a4 <__gethex+0x2c6>
 800c878:	42a6      	cmp	r6, r4
 800c87a:	d113      	bne.n	800c8a4 <__gethex+0x2c6>
 800c87c:	2e01      	cmp	r6, #1
 800c87e:	dc0b      	bgt.n	800c898 <__gethex+0x2ba>
 800c880:	9a06      	ldr	r2, [sp, #24]
 800c882:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	2301      	movs	r3, #1
 800c88a:	612b      	str	r3, [r5, #16]
 800c88c:	f8c9 3000 	str.w	r3, [r9]
 800c890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c892:	2762      	movs	r7, #98	; 0x62
 800c894:	601d      	str	r5, [r3, #0]
 800c896:	e72a      	b.n	800c6ee <__gethex+0x110>
 800c898:	1e71      	subs	r1, r6, #1
 800c89a:	4628      	mov	r0, r5
 800c89c:	f000 fd82 	bl	800d3a4 <__any_on>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d1ed      	bne.n	800c880 <__gethex+0x2a2>
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	9802      	ldr	r0, [sp, #8]
 800c8a8:	f000 f9d2 	bl	800cc50 <_Bfree>
 800c8ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	2750      	movs	r7, #80	; 0x50
 800c8b4:	e71b      	b.n	800c6ee <__gethex+0x110>
 800c8b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0e1      	beq.n	800c880 <__gethex+0x2a2>
 800c8bc:	e7f2      	b.n	800c8a4 <__gethex+0x2c6>
 800c8be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1dd      	bne.n	800c880 <__gethex+0x2a2>
 800c8c4:	e7ee      	b.n	800c8a4 <__gethex+0x2c6>
 800c8c6:	1e67      	subs	r7, r4, #1
 800c8c8:	f1ba 0f00 	cmp.w	sl, #0
 800c8cc:	d131      	bne.n	800c932 <__gethex+0x354>
 800c8ce:	b127      	cbz	r7, 800c8da <__gethex+0x2fc>
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f000 fd66 	bl	800d3a4 <__any_on>
 800c8d8:	4682      	mov	sl, r0
 800c8da:	117a      	asrs	r2, r7, #5
 800c8dc:	2301      	movs	r3, #1
 800c8de:	f007 071f 	and.w	r7, r7, #31
 800c8e2:	fa03 f707 	lsl.w	r7, r3, r7
 800c8e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	421f      	tst	r7, r3
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	bf18      	it	ne
 800c8f2:	f04a 0a02 	orrne.w	sl, sl, #2
 800c8f6:	1b36      	subs	r6, r6, r4
 800c8f8:	f7ff fe22 	bl	800c540 <rshift>
 800c8fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c900:	2702      	movs	r7, #2
 800c902:	f1ba 0f00 	cmp.w	sl, #0
 800c906:	d048      	beq.n	800c99a <__gethex+0x3bc>
 800c908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d015      	beq.n	800c93c <__gethex+0x35e>
 800c910:	2b03      	cmp	r3, #3
 800c912:	d017      	beq.n	800c944 <__gethex+0x366>
 800c914:	2b01      	cmp	r3, #1
 800c916:	d109      	bne.n	800c92c <__gethex+0x34e>
 800c918:	f01a 0f02 	tst.w	sl, #2
 800c91c:	d006      	beq.n	800c92c <__gethex+0x34e>
 800c91e:	f8d9 3000 	ldr.w	r3, [r9]
 800c922:	ea4a 0a03 	orr.w	sl, sl, r3
 800c926:	f01a 0f01 	tst.w	sl, #1
 800c92a:	d10e      	bne.n	800c94a <__gethex+0x36c>
 800c92c:	f047 0710 	orr.w	r7, r7, #16
 800c930:	e033      	b.n	800c99a <__gethex+0x3bc>
 800c932:	f04f 0a01 	mov.w	sl, #1
 800c936:	e7d0      	b.n	800c8da <__gethex+0x2fc>
 800c938:	2701      	movs	r7, #1
 800c93a:	e7e2      	b.n	800c902 <__gethex+0x324>
 800c93c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c93e:	f1c3 0301 	rsb	r3, r3, #1
 800c942:	9315      	str	r3, [sp, #84]	; 0x54
 800c944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c946:	2b00      	cmp	r3, #0
 800c948:	d0f0      	beq.n	800c92c <__gethex+0x34e>
 800c94a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c94e:	f105 0314 	add.w	r3, r5, #20
 800c952:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c956:	eb03 010a 	add.w	r1, r3, sl
 800c95a:	f04f 0c00 	mov.w	ip, #0
 800c95e:	4618      	mov	r0, r3
 800c960:	f853 2b04 	ldr.w	r2, [r3], #4
 800c964:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c968:	d01c      	beq.n	800c9a4 <__gethex+0x3c6>
 800c96a:	3201      	adds	r2, #1
 800c96c:	6002      	str	r2, [r0, #0]
 800c96e:	2f02      	cmp	r7, #2
 800c970:	f105 0314 	add.w	r3, r5, #20
 800c974:	d138      	bne.n	800c9e8 <__gethex+0x40a>
 800c976:	f8d8 2000 	ldr.w	r2, [r8]
 800c97a:	3a01      	subs	r2, #1
 800c97c:	42b2      	cmp	r2, r6
 800c97e:	d10a      	bne.n	800c996 <__gethex+0x3b8>
 800c980:	1171      	asrs	r1, r6, #5
 800c982:	2201      	movs	r2, #1
 800c984:	f006 061f 	and.w	r6, r6, #31
 800c988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c98c:	fa02 f606 	lsl.w	r6, r2, r6
 800c990:	421e      	tst	r6, r3
 800c992:	bf18      	it	ne
 800c994:	4617      	movne	r7, r2
 800c996:	f047 0720 	orr.w	r7, r7, #32
 800c99a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c99c:	601d      	str	r5, [r3, #0]
 800c99e:	9b06      	ldr	r3, [sp, #24]
 800c9a0:	601c      	str	r4, [r3, #0]
 800c9a2:	e6a4      	b.n	800c6ee <__gethex+0x110>
 800c9a4:	4299      	cmp	r1, r3
 800c9a6:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9aa:	d8d8      	bhi.n	800c95e <__gethex+0x380>
 800c9ac:	68ab      	ldr	r3, [r5, #8]
 800c9ae:	4599      	cmp	r9, r3
 800c9b0:	db12      	blt.n	800c9d8 <__gethex+0x3fa>
 800c9b2:	6869      	ldr	r1, [r5, #4]
 800c9b4:	9802      	ldr	r0, [sp, #8]
 800c9b6:	3101      	adds	r1, #1
 800c9b8:	f000 f916 	bl	800cbe8 <_Balloc>
 800c9bc:	692a      	ldr	r2, [r5, #16]
 800c9be:	3202      	adds	r2, #2
 800c9c0:	f105 010c 	add.w	r1, r5, #12
 800c9c4:	4683      	mov	fp, r0
 800c9c6:	0092      	lsls	r2, r2, #2
 800c9c8:	300c      	adds	r0, #12
 800c9ca:	f7fd f9dd 	bl	8009d88 <memcpy>
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	9802      	ldr	r0, [sp, #8]
 800c9d2:	f000 f93d 	bl	800cc50 <_Bfree>
 800c9d6:	465d      	mov	r5, fp
 800c9d8:	692b      	ldr	r3, [r5, #16]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c9e0:	612a      	str	r2, [r5, #16]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	615a      	str	r2, [r3, #20]
 800c9e6:	e7c2      	b.n	800c96e <__gethex+0x390>
 800c9e8:	692a      	ldr	r2, [r5, #16]
 800c9ea:	454a      	cmp	r2, r9
 800c9ec:	dd0b      	ble.n	800ca06 <__gethex+0x428>
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f7ff fda5 	bl	800c540 <rshift>
 800c9f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9fa:	3401      	adds	r4, #1
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	f6ff aed9 	blt.w	800c7b4 <__gethex+0x1d6>
 800ca02:	2701      	movs	r7, #1
 800ca04:	e7c7      	b.n	800c996 <__gethex+0x3b8>
 800ca06:	f016 061f 	ands.w	r6, r6, #31
 800ca0a:	d0fa      	beq.n	800ca02 <__gethex+0x424>
 800ca0c:	449a      	add	sl, r3
 800ca0e:	f1c6 0620 	rsb	r6, r6, #32
 800ca12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ca16:	f000 f9ab 	bl	800cd70 <__hi0bits>
 800ca1a:	42b0      	cmp	r0, r6
 800ca1c:	dbe7      	blt.n	800c9ee <__gethex+0x410>
 800ca1e:	e7f0      	b.n	800ca02 <__gethex+0x424>

0800ca20 <L_shift>:
 800ca20:	f1c2 0208 	rsb	r2, r2, #8
 800ca24:	0092      	lsls	r2, r2, #2
 800ca26:	b570      	push	{r4, r5, r6, lr}
 800ca28:	f1c2 0620 	rsb	r6, r2, #32
 800ca2c:	6843      	ldr	r3, [r0, #4]
 800ca2e:	6804      	ldr	r4, [r0, #0]
 800ca30:	fa03 f506 	lsl.w	r5, r3, r6
 800ca34:	432c      	orrs	r4, r5
 800ca36:	40d3      	lsrs	r3, r2
 800ca38:	6004      	str	r4, [r0, #0]
 800ca3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca3e:	4288      	cmp	r0, r1
 800ca40:	d3f4      	bcc.n	800ca2c <L_shift+0xc>
 800ca42:	bd70      	pop	{r4, r5, r6, pc}

0800ca44 <__match>:
 800ca44:	b530      	push	{r4, r5, lr}
 800ca46:	6803      	ldr	r3, [r0, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4e:	b914      	cbnz	r4, 800ca56 <__match+0x12>
 800ca50:	6003      	str	r3, [r0, #0]
 800ca52:	2001      	movs	r0, #1
 800ca54:	bd30      	pop	{r4, r5, pc}
 800ca56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca5e:	2d19      	cmp	r5, #25
 800ca60:	bf98      	it	ls
 800ca62:	3220      	addls	r2, #32
 800ca64:	42a2      	cmp	r2, r4
 800ca66:	d0f0      	beq.n	800ca4a <__match+0x6>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	e7f3      	b.n	800ca54 <__match+0x10>

0800ca6c <__hexnan>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	680b      	ldr	r3, [r1, #0]
 800ca72:	6801      	ldr	r1, [r0, #0]
 800ca74:	115f      	asrs	r7, r3, #5
 800ca76:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ca7a:	f013 031f 	ands.w	r3, r3, #31
 800ca7e:	b087      	sub	sp, #28
 800ca80:	bf18      	it	ne
 800ca82:	3704      	addne	r7, #4
 800ca84:	2500      	movs	r5, #0
 800ca86:	1f3e      	subs	r6, r7, #4
 800ca88:	4682      	mov	sl, r0
 800ca8a:	4690      	mov	r8, r2
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	f847 5c04 	str.w	r5, [r7, #-4]
 800ca92:	46b1      	mov	r9, r6
 800ca94:	4634      	mov	r4, r6
 800ca96:	9502      	str	r5, [sp, #8]
 800ca98:	46ab      	mov	fp, r5
 800ca9a:	784a      	ldrb	r2, [r1, #1]
 800ca9c:	1c4b      	adds	r3, r1, #1
 800ca9e:	9303      	str	r3, [sp, #12]
 800caa0:	b342      	cbz	r2, 800caf4 <__hexnan+0x88>
 800caa2:	4610      	mov	r0, r2
 800caa4:	9105      	str	r1, [sp, #20]
 800caa6:	9204      	str	r2, [sp, #16]
 800caa8:	f7ff fd84 	bl	800c5b4 <__hexdig_fun>
 800caac:	2800      	cmp	r0, #0
 800caae:	d143      	bne.n	800cb38 <__hexnan+0xcc>
 800cab0:	9a04      	ldr	r2, [sp, #16]
 800cab2:	9905      	ldr	r1, [sp, #20]
 800cab4:	2a20      	cmp	r2, #32
 800cab6:	d818      	bhi.n	800caea <__hexnan+0x7e>
 800cab8:	9b02      	ldr	r3, [sp, #8]
 800caba:	459b      	cmp	fp, r3
 800cabc:	dd13      	ble.n	800cae6 <__hexnan+0x7a>
 800cabe:	454c      	cmp	r4, r9
 800cac0:	d206      	bcs.n	800cad0 <__hexnan+0x64>
 800cac2:	2d07      	cmp	r5, #7
 800cac4:	dc04      	bgt.n	800cad0 <__hexnan+0x64>
 800cac6:	462a      	mov	r2, r5
 800cac8:	4649      	mov	r1, r9
 800caca:	4620      	mov	r0, r4
 800cacc:	f7ff ffa8 	bl	800ca20 <L_shift>
 800cad0:	4544      	cmp	r4, r8
 800cad2:	d944      	bls.n	800cb5e <__hexnan+0xf2>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f1a4 0904 	sub.w	r9, r4, #4
 800cada:	f844 3c04 	str.w	r3, [r4, #-4]
 800cade:	f8cd b008 	str.w	fp, [sp, #8]
 800cae2:	464c      	mov	r4, r9
 800cae4:	461d      	mov	r5, r3
 800cae6:	9903      	ldr	r1, [sp, #12]
 800cae8:	e7d7      	b.n	800ca9a <__hexnan+0x2e>
 800caea:	2a29      	cmp	r2, #41	; 0x29
 800caec:	d14a      	bne.n	800cb84 <__hexnan+0x118>
 800caee:	3102      	adds	r1, #2
 800caf0:	f8ca 1000 	str.w	r1, [sl]
 800caf4:	f1bb 0f00 	cmp.w	fp, #0
 800caf8:	d044      	beq.n	800cb84 <__hexnan+0x118>
 800cafa:	454c      	cmp	r4, r9
 800cafc:	d206      	bcs.n	800cb0c <__hexnan+0xa0>
 800cafe:	2d07      	cmp	r5, #7
 800cb00:	dc04      	bgt.n	800cb0c <__hexnan+0xa0>
 800cb02:	462a      	mov	r2, r5
 800cb04:	4649      	mov	r1, r9
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7ff ff8a 	bl	800ca20 <L_shift>
 800cb0c:	4544      	cmp	r4, r8
 800cb0e:	d928      	bls.n	800cb62 <__hexnan+0xf6>
 800cb10:	4643      	mov	r3, r8
 800cb12:	f854 2b04 	ldr.w	r2, [r4], #4
 800cb16:	f843 2b04 	str.w	r2, [r3], #4
 800cb1a:	42a6      	cmp	r6, r4
 800cb1c:	d2f9      	bcs.n	800cb12 <__hexnan+0xa6>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f843 2b04 	str.w	r2, [r3], #4
 800cb24:	429e      	cmp	r6, r3
 800cb26:	d2fb      	bcs.n	800cb20 <__hexnan+0xb4>
 800cb28:	6833      	ldr	r3, [r6, #0]
 800cb2a:	b91b      	cbnz	r3, 800cb34 <__hexnan+0xc8>
 800cb2c:	4546      	cmp	r6, r8
 800cb2e:	d127      	bne.n	800cb80 <__hexnan+0x114>
 800cb30:	2301      	movs	r3, #1
 800cb32:	6033      	str	r3, [r6, #0]
 800cb34:	2005      	movs	r0, #5
 800cb36:	e026      	b.n	800cb86 <__hexnan+0x11a>
 800cb38:	3501      	adds	r5, #1
 800cb3a:	2d08      	cmp	r5, #8
 800cb3c:	f10b 0b01 	add.w	fp, fp, #1
 800cb40:	dd06      	ble.n	800cb50 <__hexnan+0xe4>
 800cb42:	4544      	cmp	r4, r8
 800cb44:	d9cf      	bls.n	800cae6 <__hexnan+0x7a>
 800cb46:	2300      	movs	r3, #0
 800cb48:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb4c:	2501      	movs	r5, #1
 800cb4e:	3c04      	subs	r4, #4
 800cb50:	6822      	ldr	r2, [r4, #0]
 800cb52:	f000 000f 	and.w	r0, r0, #15
 800cb56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb5a:	6020      	str	r0, [r4, #0]
 800cb5c:	e7c3      	b.n	800cae6 <__hexnan+0x7a>
 800cb5e:	2508      	movs	r5, #8
 800cb60:	e7c1      	b.n	800cae6 <__hexnan+0x7a>
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0df      	beq.n	800cb28 <__hexnan+0xbc>
 800cb68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb6c:	f1c3 0320 	rsb	r3, r3, #32
 800cb70:	fa22 f303 	lsr.w	r3, r2, r3
 800cb74:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cb78:	401a      	ands	r2, r3
 800cb7a:	f847 2c04 	str.w	r2, [r7, #-4]
 800cb7e:	e7d3      	b.n	800cb28 <__hexnan+0xbc>
 800cb80:	3e04      	subs	r6, #4
 800cb82:	e7d1      	b.n	800cb28 <__hexnan+0xbc>
 800cb84:	2004      	movs	r0, #4
 800cb86:	b007      	add	sp, #28
 800cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb8c <__locale_ctype_ptr_l>:
 800cb8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cb90:	4770      	bx	lr

0800cb92 <__localeconv_l>:
 800cb92:	30f0      	adds	r0, #240	; 0xf0
 800cb94:	4770      	bx	lr
	...

0800cb98 <_localeconv_r>:
 800cb98:	4b04      	ldr	r3, [pc, #16]	; (800cbac <_localeconv_r+0x14>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6a18      	ldr	r0, [r3, #32]
 800cb9e:	4b04      	ldr	r3, [pc, #16]	; (800cbb0 <_localeconv_r+0x18>)
 800cba0:	2800      	cmp	r0, #0
 800cba2:	bf08      	it	eq
 800cba4:	4618      	moveq	r0, r3
 800cba6:	30f0      	adds	r0, #240	; 0xf0
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	2000005c 	.word	0x2000005c
 800cbb0:	200000c0 	.word	0x200000c0

0800cbb4 <malloc>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	; (800cbc0 <malloc+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f000 bc71 	b.w	800d4a0 <_malloc_r>
 800cbbe:	bf00      	nop
 800cbc0:	2000005c 	.word	0x2000005c

0800cbc4 <__ascii_mbtowc>:
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	b901      	cbnz	r1, 800cbca <__ascii_mbtowc+0x6>
 800cbc8:	a901      	add	r1, sp, #4
 800cbca:	b142      	cbz	r2, 800cbde <__ascii_mbtowc+0x1a>
 800cbcc:	b14b      	cbz	r3, 800cbe2 <__ascii_mbtowc+0x1e>
 800cbce:	7813      	ldrb	r3, [r2, #0]
 800cbd0:	600b      	str	r3, [r1, #0]
 800cbd2:	7812      	ldrb	r2, [r2, #0]
 800cbd4:	1c10      	adds	r0, r2, #0
 800cbd6:	bf18      	it	ne
 800cbd8:	2001      	movne	r0, #1
 800cbda:	b002      	add	sp, #8
 800cbdc:	4770      	bx	lr
 800cbde:	4610      	mov	r0, r2
 800cbe0:	e7fb      	b.n	800cbda <__ascii_mbtowc+0x16>
 800cbe2:	f06f 0001 	mvn.w	r0, #1
 800cbe6:	e7f8      	b.n	800cbda <__ascii_mbtowc+0x16>

0800cbe8 <_Balloc>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbec:	4604      	mov	r4, r0
 800cbee:	460e      	mov	r6, r1
 800cbf0:	b93d      	cbnz	r5, 800cc02 <_Balloc+0x1a>
 800cbf2:	2010      	movs	r0, #16
 800cbf4:	f7ff ffde 	bl	800cbb4 <malloc>
 800cbf8:	6260      	str	r0, [r4, #36]	; 0x24
 800cbfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbfe:	6005      	str	r5, [r0, #0]
 800cc00:	60c5      	str	r5, [r0, #12]
 800cc02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cc04:	68eb      	ldr	r3, [r5, #12]
 800cc06:	b183      	cbz	r3, 800cc2a <_Balloc+0x42>
 800cc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cc10:	b9b8      	cbnz	r0, 800cc42 <_Balloc+0x5a>
 800cc12:	2101      	movs	r1, #1
 800cc14:	fa01 f506 	lsl.w	r5, r1, r6
 800cc18:	1d6a      	adds	r2, r5, #5
 800cc1a:	0092      	lsls	r2, r2, #2
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fbe2 	bl	800d3e6 <_calloc_r>
 800cc22:	b160      	cbz	r0, 800cc3e <_Balloc+0x56>
 800cc24:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cc28:	e00e      	b.n	800cc48 <_Balloc+0x60>
 800cc2a:	2221      	movs	r2, #33	; 0x21
 800cc2c:	2104      	movs	r1, #4
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f000 fbd9 	bl	800d3e6 <_calloc_r>
 800cc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc36:	60e8      	str	r0, [r5, #12]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e4      	bne.n	800cc08 <_Balloc+0x20>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	6802      	ldr	r2, [r0, #0]
 800cc44:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc4e:	e7f7      	b.n	800cc40 <_Balloc+0x58>

0800cc50 <_Bfree>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cc54:	4606      	mov	r6, r0
 800cc56:	460d      	mov	r5, r1
 800cc58:	b93c      	cbnz	r4, 800cc6a <_Bfree+0x1a>
 800cc5a:	2010      	movs	r0, #16
 800cc5c:	f7ff ffaa 	bl	800cbb4 <malloc>
 800cc60:	6270      	str	r0, [r6, #36]	; 0x24
 800cc62:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc66:	6004      	str	r4, [r0, #0]
 800cc68:	60c4      	str	r4, [r0, #12]
 800cc6a:	b13d      	cbz	r5, 800cc7c <_Bfree+0x2c>
 800cc6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cc6e:	686a      	ldr	r2, [r5, #4]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc76:	6029      	str	r1, [r5, #0]
 800cc78:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}

0800cc7e <__multadd>:
 800cc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc82:	690d      	ldr	r5, [r1, #16]
 800cc84:	461f      	mov	r7, r3
 800cc86:	4606      	mov	r6, r0
 800cc88:	460c      	mov	r4, r1
 800cc8a:	f101 0c14 	add.w	ip, r1, #20
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f8dc 0000 	ldr.w	r0, [ip]
 800cc94:	b281      	uxth	r1, r0
 800cc96:	fb02 7101 	mla	r1, r2, r1, r7
 800cc9a:	0c0f      	lsrs	r7, r1, #16
 800cc9c:	0c00      	lsrs	r0, r0, #16
 800cc9e:	fb02 7000 	mla	r0, r2, r0, r7
 800cca2:	b289      	uxth	r1, r1
 800cca4:	3301      	adds	r3, #1
 800cca6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ccaa:	429d      	cmp	r5, r3
 800ccac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ccb0:	f84c 1b04 	str.w	r1, [ip], #4
 800ccb4:	dcec      	bgt.n	800cc90 <__multadd+0x12>
 800ccb6:	b1d7      	cbz	r7, 800ccee <__multadd+0x70>
 800ccb8:	68a3      	ldr	r3, [r4, #8]
 800ccba:	42ab      	cmp	r3, r5
 800ccbc:	dc12      	bgt.n	800cce4 <__multadd+0x66>
 800ccbe:	6861      	ldr	r1, [r4, #4]
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	3101      	adds	r1, #1
 800ccc4:	f7ff ff90 	bl	800cbe8 <_Balloc>
 800ccc8:	6922      	ldr	r2, [r4, #16]
 800ccca:	3202      	adds	r2, #2
 800cccc:	f104 010c 	add.w	r1, r4, #12
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	0092      	lsls	r2, r2, #2
 800ccd4:	300c      	adds	r0, #12
 800ccd6:	f7fd f857 	bl	8009d88 <memcpy>
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f7ff ffb7 	bl	800cc50 <_Bfree>
 800cce2:	4644      	mov	r4, r8
 800cce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cce8:	3501      	adds	r5, #1
 800ccea:	615f      	str	r7, [r3, #20]
 800ccec:	6125      	str	r5, [r4, #16]
 800ccee:	4620      	mov	r0, r4
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ccf4 <__s2b>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	4615      	mov	r5, r2
 800ccfc:	461f      	mov	r7, r3
 800ccfe:	2209      	movs	r2, #9
 800cd00:	3308      	adds	r3, #8
 800cd02:	4606      	mov	r6, r0
 800cd04:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd08:	2100      	movs	r1, #0
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	db20      	blt.n	800cd52 <__s2b+0x5e>
 800cd10:	4630      	mov	r0, r6
 800cd12:	f7ff ff69 	bl	800cbe8 <_Balloc>
 800cd16:	9b08      	ldr	r3, [sp, #32]
 800cd18:	6143      	str	r3, [r0, #20]
 800cd1a:	2d09      	cmp	r5, #9
 800cd1c:	f04f 0301 	mov.w	r3, #1
 800cd20:	6103      	str	r3, [r0, #16]
 800cd22:	dd19      	ble.n	800cd58 <__s2b+0x64>
 800cd24:	f104 0809 	add.w	r8, r4, #9
 800cd28:	46c1      	mov	r9, r8
 800cd2a:	442c      	add	r4, r5
 800cd2c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cd30:	4601      	mov	r1, r0
 800cd32:	3b30      	subs	r3, #48	; 0x30
 800cd34:	220a      	movs	r2, #10
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7ff ffa1 	bl	800cc7e <__multadd>
 800cd3c:	45a1      	cmp	r9, r4
 800cd3e:	d1f5      	bne.n	800cd2c <__s2b+0x38>
 800cd40:	eb08 0405 	add.w	r4, r8, r5
 800cd44:	3c08      	subs	r4, #8
 800cd46:	1b2d      	subs	r5, r5, r4
 800cd48:	1963      	adds	r3, r4, r5
 800cd4a:	42bb      	cmp	r3, r7
 800cd4c:	db07      	blt.n	800cd5e <__s2b+0x6a>
 800cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd52:	0052      	lsls	r2, r2, #1
 800cd54:	3101      	adds	r1, #1
 800cd56:	e7d9      	b.n	800cd0c <__s2b+0x18>
 800cd58:	340a      	adds	r4, #10
 800cd5a:	2509      	movs	r5, #9
 800cd5c:	e7f3      	b.n	800cd46 <__s2b+0x52>
 800cd5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd62:	4601      	mov	r1, r0
 800cd64:	3b30      	subs	r3, #48	; 0x30
 800cd66:	220a      	movs	r2, #10
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff ff88 	bl	800cc7e <__multadd>
 800cd6e:	e7eb      	b.n	800cd48 <__s2b+0x54>

0800cd70 <__hi0bits>:
 800cd70:	0c02      	lsrs	r2, r0, #16
 800cd72:	0412      	lsls	r2, r2, #16
 800cd74:	4603      	mov	r3, r0
 800cd76:	b9b2      	cbnz	r2, 800cda6 <__hi0bits+0x36>
 800cd78:	0403      	lsls	r3, r0, #16
 800cd7a:	2010      	movs	r0, #16
 800cd7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd80:	bf04      	itt	eq
 800cd82:	021b      	lsleq	r3, r3, #8
 800cd84:	3008      	addeq	r0, #8
 800cd86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd8a:	bf04      	itt	eq
 800cd8c:	011b      	lsleq	r3, r3, #4
 800cd8e:	3004      	addeq	r0, #4
 800cd90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd94:	bf04      	itt	eq
 800cd96:	009b      	lsleq	r3, r3, #2
 800cd98:	3002      	addeq	r0, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	db06      	blt.n	800cdac <__hi0bits+0x3c>
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	d503      	bpl.n	800cdaa <__hi0bits+0x3a>
 800cda2:	3001      	adds	r0, #1
 800cda4:	4770      	bx	lr
 800cda6:	2000      	movs	r0, #0
 800cda8:	e7e8      	b.n	800cd7c <__hi0bits+0xc>
 800cdaa:	2020      	movs	r0, #32
 800cdac:	4770      	bx	lr

0800cdae <__lo0bits>:
 800cdae:	6803      	ldr	r3, [r0, #0]
 800cdb0:	f013 0207 	ands.w	r2, r3, #7
 800cdb4:	4601      	mov	r1, r0
 800cdb6:	d00b      	beq.n	800cdd0 <__lo0bits+0x22>
 800cdb8:	07da      	lsls	r2, r3, #31
 800cdba:	d423      	bmi.n	800ce04 <__lo0bits+0x56>
 800cdbc:	0798      	lsls	r0, r3, #30
 800cdbe:	bf49      	itett	mi
 800cdc0:	085b      	lsrmi	r3, r3, #1
 800cdc2:	089b      	lsrpl	r3, r3, #2
 800cdc4:	2001      	movmi	r0, #1
 800cdc6:	600b      	strmi	r3, [r1, #0]
 800cdc8:	bf5c      	itt	pl
 800cdca:	600b      	strpl	r3, [r1, #0]
 800cdcc:	2002      	movpl	r0, #2
 800cdce:	4770      	bx	lr
 800cdd0:	b298      	uxth	r0, r3
 800cdd2:	b9a8      	cbnz	r0, 800ce00 <__lo0bits+0x52>
 800cdd4:	0c1b      	lsrs	r3, r3, #16
 800cdd6:	2010      	movs	r0, #16
 800cdd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cddc:	bf04      	itt	eq
 800cdde:	0a1b      	lsreq	r3, r3, #8
 800cde0:	3008      	addeq	r0, #8
 800cde2:	071a      	lsls	r2, r3, #28
 800cde4:	bf04      	itt	eq
 800cde6:	091b      	lsreq	r3, r3, #4
 800cde8:	3004      	addeq	r0, #4
 800cdea:	079a      	lsls	r2, r3, #30
 800cdec:	bf04      	itt	eq
 800cdee:	089b      	lsreq	r3, r3, #2
 800cdf0:	3002      	addeq	r0, #2
 800cdf2:	07da      	lsls	r2, r3, #31
 800cdf4:	d402      	bmi.n	800cdfc <__lo0bits+0x4e>
 800cdf6:	085b      	lsrs	r3, r3, #1
 800cdf8:	d006      	beq.n	800ce08 <__lo0bits+0x5a>
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	600b      	str	r3, [r1, #0]
 800cdfe:	4770      	bx	lr
 800ce00:	4610      	mov	r0, r2
 800ce02:	e7e9      	b.n	800cdd8 <__lo0bits+0x2a>
 800ce04:	2000      	movs	r0, #0
 800ce06:	4770      	bx	lr
 800ce08:	2020      	movs	r0, #32
 800ce0a:	4770      	bx	lr

0800ce0c <__i2b>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	460c      	mov	r4, r1
 800ce10:	2101      	movs	r1, #1
 800ce12:	f7ff fee9 	bl	800cbe8 <_Balloc>
 800ce16:	2201      	movs	r2, #1
 800ce18:	6144      	str	r4, [r0, #20]
 800ce1a:	6102      	str	r2, [r0, #16]
 800ce1c:	bd10      	pop	{r4, pc}

0800ce1e <__multiply>:
 800ce1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce22:	4614      	mov	r4, r2
 800ce24:	690a      	ldr	r2, [r1, #16]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	bfb8      	it	lt
 800ce2c:	460b      	movlt	r3, r1
 800ce2e:	4688      	mov	r8, r1
 800ce30:	bfbc      	itt	lt
 800ce32:	46a0      	movlt	r8, r4
 800ce34:	461c      	movlt	r4, r3
 800ce36:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ce3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ce3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce46:	eb07 0609 	add.w	r6, r7, r9
 800ce4a:	42b3      	cmp	r3, r6
 800ce4c:	bfb8      	it	lt
 800ce4e:	3101      	addlt	r1, #1
 800ce50:	f7ff feca 	bl	800cbe8 <_Balloc>
 800ce54:	f100 0514 	add.w	r5, r0, #20
 800ce58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ce5c:	462b      	mov	r3, r5
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4573      	cmp	r3, lr
 800ce62:	d316      	bcc.n	800ce92 <__multiply+0x74>
 800ce64:	f104 0214 	add.w	r2, r4, #20
 800ce68:	f108 0114 	add.w	r1, r8, #20
 800ce6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ce70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	9b00      	ldr	r3, [sp, #0]
 800ce78:	9201      	str	r2, [sp, #4]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d80c      	bhi.n	800ce98 <__multiply+0x7a>
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	dd03      	ble.n	800ce8a <__multiply+0x6c>
 800ce82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d05d      	beq.n	800cf46 <__multiply+0x128>
 800ce8a:	6106      	str	r6, [r0, #16]
 800ce8c:	b003      	add	sp, #12
 800ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce92:	f843 2b04 	str.w	r2, [r3], #4
 800ce96:	e7e3      	b.n	800ce60 <__multiply+0x42>
 800ce98:	f8b2 b000 	ldrh.w	fp, [r2]
 800ce9c:	f1bb 0f00 	cmp.w	fp, #0
 800cea0:	d023      	beq.n	800ceea <__multiply+0xcc>
 800cea2:	4689      	mov	r9, r1
 800cea4:	46ac      	mov	ip, r5
 800cea6:	f04f 0800 	mov.w	r8, #0
 800ceaa:	f859 4b04 	ldr.w	r4, [r9], #4
 800ceae:	f8dc a000 	ldr.w	sl, [ip]
 800ceb2:	b2a3      	uxth	r3, r4
 800ceb4:	fa1f fa8a 	uxth.w	sl, sl
 800ceb8:	fb0b a303 	mla	r3, fp, r3, sl
 800cebc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cec0:	f8dc 4000 	ldr.w	r4, [ip]
 800cec4:	4443      	add	r3, r8
 800cec6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ceca:	fb0b 840a 	mla	r4, fp, sl, r8
 800cece:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ced2:	46e2      	mov	sl, ip
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ceda:	454f      	cmp	r7, r9
 800cedc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cee0:	f84a 3b04 	str.w	r3, [sl], #4
 800cee4:	d82b      	bhi.n	800cf3e <__multiply+0x120>
 800cee6:	f8cc 8004 	str.w	r8, [ip, #4]
 800ceea:	9b01      	ldr	r3, [sp, #4]
 800ceec:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cef0:	3204      	adds	r2, #4
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	d020      	beq.n	800cf3a <__multiply+0x11c>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	4689      	mov	r9, r1
 800cefc:	46a8      	mov	r8, r5
 800cefe:	f04f 0b00 	mov.w	fp, #0
 800cf02:	f8b9 c000 	ldrh.w	ip, [r9]
 800cf06:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cf0a:	fb0a 440c 	mla	r4, sl, ip, r4
 800cf0e:	445c      	add	r4, fp
 800cf10:	46c4      	mov	ip, r8
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cf18:	f84c 3b04 	str.w	r3, [ip], #4
 800cf1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf20:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cf24:	0c1b      	lsrs	r3, r3, #16
 800cf26:	fb0a b303 	mla	r3, sl, r3, fp
 800cf2a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cf2e:	454f      	cmp	r7, r9
 800cf30:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cf34:	d805      	bhi.n	800cf42 <__multiply+0x124>
 800cf36:	f8c8 3004 	str.w	r3, [r8, #4]
 800cf3a:	3504      	adds	r5, #4
 800cf3c:	e79b      	b.n	800ce76 <__multiply+0x58>
 800cf3e:	46d4      	mov	ip, sl
 800cf40:	e7b3      	b.n	800ceaa <__multiply+0x8c>
 800cf42:	46e0      	mov	r8, ip
 800cf44:	e7dd      	b.n	800cf02 <__multiply+0xe4>
 800cf46:	3e01      	subs	r6, #1
 800cf48:	e799      	b.n	800ce7e <__multiply+0x60>
	...

0800cf4c <__pow5mult>:
 800cf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf50:	4615      	mov	r5, r2
 800cf52:	f012 0203 	ands.w	r2, r2, #3
 800cf56:	4606      	mov	r6, r0
 800cf58:	460f      	mov	r7, r1
 800cf5a:	d007      	beq.n	800cf6c <__pow5mult+0x20>
 800cf5c:	3a01      	subs	r2, #1
 800cf5e:	4c21      	ldr	r4, [pc, #132]	; (800cfe4 <__pow5mult+0x98>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf66:	f7ff fe8a 	bl	800cc7e <__multadd>
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	10ad      	asrs	r5, r5, #2
 800cf6e:	d035      	beq.n	800cfdc <__pow5mult+0x90>
 800cf70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf72:	b93c      	cbnz	r4, 800cf84 <__pow5mult+0x38>
 800cf74:	2010      	movs	r0, #16
 800cf76:	f7ff fe1d 	bl	800cbb4 <malloc>
 800cf7a:	6270      	str	r0, [r6, #36]	; 0x24
 800cf7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf80:	6004      	str	r4, [r0, #0]
 800cf82:	60c4      	str	r4, [r0, #12]
 800cf84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf8c:	b94c      	cbnz	r4, 800cfa2 <__pow5mult+0x56>
 800cf8e:	f240 2171 	movw	r1, #625	; 0x271
 800cf92:	4630      	mov	r0, r6
 800cf94:	f7ff ff3a 	bl	800ce0c <__i2b>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	6003      	str	r3, [r0, #0]
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	07eb      	lsls	r3, r5, #31
 800cfa8:	d50a      	bpl.n	800cfc0 <__pow5mult+0x74>
 800cfaa:	4639      	mov	r1, r7
 800cfac:	4622      	mov	r2, r4
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f7ff ff35 	bl	800ce1e <__multiply>
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	4681      	mov	r9, r0
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f7ff fe49 	bl	800cc50 <_Bfree>
 800cfbe:	464f      	mov	r7, r9
 800cfc0:	106d      	asrs	r5, r5, #1
 800cfc2:	d00b      	beq.n	800cfdc <__pow5mult+0x90>
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	b938      	cbnz	r0, 800cfd8 <__pow5mult+0x8c>
 800cfc8:	4622      	mov	r2, r4
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f7ff ff26 	bl	800ce1e <__multiply>
 800cfd2:	6020      	str	r0, [r4, #0]
 800cfd4:	f8c0 8000 	str.w	r8, [r0]
 800cfd8:	4604      	mov	r4, r0
 800cfda:	e7e4      	b.n	800cfa6 <__pow5mult+0x5a>
 800cfdc:	4638      	mov	r0, r7
 800cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe2:	bf00      	nop
 800cfe4:	08010e68 	.word	0x08010e68

0800cfe8 <__lshift>:
 800cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	460c      	mov	r4, r1
 800cfee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cff2:	6923      	ldr	r3, [r4, #16]
 800cff4:	6849      	ldr	r1, [r1, #4]
 800cff6:	eb0a 0903 	add.w	r9, sl, r3
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	4607      	mov	r7, r0
 800cffe:	4616      	mov	r6, r2
 800d000:	f109 0501 	add.w	r5, r9, #1
 800d004:	42ab      	cmp	r3, r5
 800d006:	db32      	blt.n	800d06e <__lshift+0x86>
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff fded 	bl	800cbe8 <_Balloc>
 800d00e:	2300      	movs	r3, #0
 800d010:	4680      	mov	r8, r0
 800d012:	f100 0114 	add.w	r1, r0, #20
 800d016:	461a      	mov	r2, r3
 800d018:	4553      	cmp	r3, sl
 800d01a:	db2b      	blt.n	800d074 <__lshift+0x8c>
 800d01c:	6920      	ldr	r0, [r4, #16]
 800d01e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d022:	f104 0314 	add.w	r3, r4, #20
 800d026:	f016 021f 	ands.w	r2, r6, #31
 800d02a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d02e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d032:	d025      	beq.n	800d080 <__lshift+0x98>
 800d034:	f1c2 0e20 	rsb	lr, r2, #32
 800d038:	2000      	movs	r0, #0
 800d03a:	681e      	ldr	r6, [r3, #0]
 800d03c:	468a      	mov	sl, r1
 800d03e:	4096      	lsls	r6, r2
 800d040:	4330      	orrs	r0, r6
 800d042:	f84a 0b04 	str.w	r0, [sl], #4
 800d046:	f853 0b04 	ldr.w	r0, [r3], #4
 800d04a:	459c      	cmp	ip, r3
 800d04c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d050:	d814      	bhi.n	800d07c <__lshift+0x94>
 800d052:	6048      	str	r0, [r1, #4]
 800d054:	b108      	cbz	r0, 800d05a <__lshift+0x72>
 800d056:	f109 0502 	add.w	r5, r9, #2
 800d05a:	3d01      	subs	r5, #1
 800d05c:	4638      	mov	r0, r7
 800d05e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d062:	4621      	mov	r1, r4
 800d064:	f7ff fdf4 	bl	800cc50 <_Bfree>
 800d068:	4640      	mov	r0, r8
 800d06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06e:	3101      	adds	r1, #1
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	e7c7      	b.n	800d004 <__lshift+0x1c>
 800d074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d078:	3301      	adds	r3, #1
 800d07a:	e7cd      	b.n	800d018 <__lshift+0x30>
 800d07c:	4651      	mov	r1, sl
 800d07e:	e7dc      	b.n	800d03a <__lshift+0x52>
 800d080:	3904      	subs	r1, #4
 800d082:	f853 2b04 	ldr.w	r2, [r3], #4
 800d086:	f841 2f04 	str.w	r2, [r1, #4]!
 800d08a:	459c      	cmp	ip, r3
 800d08c:	d8f9      	bhi.n	800d082 <__lshift+0x9a>
 800d08e:	e7e4      	b.n	800d05a <__lshift+0x72>

0800d090 <__mcmp>:
 800d090:	6903      	ldr	r3, [r0, #16]
 800d092:	690a      	ldr	r2, [r1, #16]
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	b530      	push	{r4, r5, lr}
 800d098:	d10c      	bne.n	800d0b4 <__mcmp+0x24>
 800d09a:	0092      	lsls	r2, r2, #2
 800d09c:	3014      	adds	r0, #20
 800d09e:	3114      	adds	r1, #20
 800d0a0:	1884      	adds	r4, r0, r2
 800d0a2:	4411      	add	r1, r2
 800d0a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0ac:	4295      	cmp	r5, r2
 800d0ae:	d003      	beq.n	800d0b8 <__mcmp+0x28>
 800d0b0:	d305      	bcc.n	800d0be <__mcmp+0x2e>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	bd30      	pop	{r4, r5, pc}
 800d0b8:	42a0      	cmp	r0, r4
 800d0ba:	d3f3      	bcc.n	800d0a4 <__mcmp+0x14>
 800d0bc:	e7fa      	b.n	800d0b4 <__mcmp+0x24>
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0c2:	e7f7      	b.n	800d0b4 <__mcmp+0x24>

0800d0c4 <__mdiff>:
 800d0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	4614      	mov	r4, r2
 800d0d2:	f7ff ffdd 	bl	800d090 <__mcmp>
 800d0d6:	1e06      	subs	r6, r0, #0
 800d0d8:	d108      	bne.n	800d0ec <__mdiff+0x28>
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4638      	mov	r0, r7
 800d0de:	f7ff fd83 	bl	800cbe8 <_Balloc>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ec:	bfa4      	itt	ge
 800d0ee:	4623      	movge	r3, r4
 800d0f0:	462c      	movge	r4, r5
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	6861      	ldr	r1, [r4, #4]
 800d0f6:	bfa6      	itte	ge
 800d0f8:	461d      	movge	r5, r3
 800d0fa:	2600      	movge	r6, #0
 800d0fc:	2601      	movlt	r6, #1
 800d0fe:	f7ff fd73 	bl	800cbe8 <_Balloc>
 800d102:	692b      	ldr	r3, [r5, #16]
 800d104:	60c6      	str	r6, [r0, #12]
 800d106:	6926      	ldr	r6, [r4, #16]
 800d108:	f105 0914 	add.w	r9, r5, #20
 800d10c:	f104 0214 	add.w	r2, r4, #20
 800d110:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d114:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d118:	f100 0514 	add.w	r5, r0, #20
 800d11c:	f04f 0e00 	mov.w	lr, #0
 800d120:	f852 ab04 	ldr.w	sl, [r2], #4
 800d124:	f859 4b04 	ldr.w	r4, [r9], #4
 800d128:	fa1e f18a 	uxtah	r1, lr, sl
 800d12c:	b2a3      	uxth	r3, r4
 800d12e:	1ac9      	subs	r1, r1, r3
 800d130:	0c23      	lsrs	r3, r4, #16
 800d132:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d136:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d13a:	b289      	uxth	r1, r1
 800d13c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d140:	45c8      	cmp	r8, r9
 800d142:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d146:	4694      	mov	ip, r2
 800d148:	f845 3b04 	str.w	r3, [r5], #4
 800d14c:	d8e8      	bhi.n	800d120 <__mdiff+0x5c>
 800d14e:	45bc      	cmp	ip, r7
 800d150:	d304      	bcc.n	800d15c <__mdiff+0x98>
 800d152:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d156:	b183      	cbz	r3, 800d17a <__mdiff+0xb6>
 800d158:	6106      	str	r6, [r0, #16]
 800d15a:	e7c5      	b.n	800d0e8 <__mdiff+0x24>
 800d15c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d160:	fa1e f381 	uxtah	r3, lr, r1
 800d164:	141a      	asrs	r2, r3, #16
 800d166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d170:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d174:	f845 3b04 	str.w	r3, [r5], #4
 800d178:	e7e9      	b.n	800d14e <__mdiff+0x8a>
 800d17a:	3e01      	subs	r6, #1
 800d17c:	e7e9      	b.n	800d152 <__mdiff+0x8e>
	...

0800d180 <__ulp>:
 800d180:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <__ulp+0x4c>)
 800d182:	ee10 2a90 	vmov	r2, s1
 800d186:	401a      	ands	r2, r3
 800d188:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dd04      	ble.n	800d19a <__ulp+0x1a>
 800d190:	2000      	movs	r0, #0
 800d192:	4619      	mov	r1, r3
 800d194:	ec41 0b10 	vmov	d0, r0, r1
 800d198:	4770      	bx	lr
 800d19a:	425b      	negs	r3, r3
 800d19c:	151b      	asrs	r3, r3, #20
 800d19e:	2b13      	cmp	r3, #19
 800d1a0:	f04f 0000 	mov.w	r0, #0
 800d1a4:	f04f 0100 	mov.w	r1, #0
 800d1a8:	dc04      	bgt.n	800d1b4 <__ulp+0x34>
 800d1aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d1ae:	fa42 f103 	asr.w	r1, r2, r3
 800d1b2:	e7ef      	b.n	800d194 <__ulp+0x14>
 800d1b4:	3b14      	subs	r3, #20
 800d1b6:	2b1e      	cmp	r3, #30
 800d1b8:	f04f 0201 	mov.w	r2, #1
 800d1bc:	bfda      	itte	le
 800d1be:	f1c3 031f 	rsble	r3, r3, #31
 800d1c2:	fa02 f303 	lslle.w	r3, r2, r3
 800d1c6:	4613      	movgt	r3, r2
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	e7e3      	b.n	800d194 <__ulp+0x14>
 800d1cc:	7ff00000 	.word	0x7ff00000

0800d1d0 <__b2d>:
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	6905      	ldr	r5, [r0, #16]
 800d1d4:	f100 0714 	add.w	r7, r0, #20
 800d1d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d1dc:	1f2e      	subs	r6, r5, #4
 800d1de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f7ff fdc4 	bl	800cd70 <__hi0bits>
 800d1e8:	f1c0 0320 	rsb	r3, r0, #32
 800d1ec:	280a      	cmp	r0, #10
 800d1ee:	600b      	str	r3, [r1, #0]
 800d1f0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d268 <__b2d+0x98>
 800d1f4:	dc14      	bgt.n	800d220 <__b2d+0x50>
 800d1f6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d1fa:	fa24 f10e 	lsr.w	r1, r4, lr
 800d1fe:	42b7      	cmp	r7, r6
 800d200:	ea41 030c 	orr.w	r3, r1, ip
 800d204:	bf34      	ite	cc
 800d206:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d20a:	2100      	movcs	r1, #0
 800d20c:	3015      	adds	r0, #21
 800d20e:	fa04 f000 	lsl.w	r0, r4, r0
 800d212:	fa21 f10e 	lsr.w	r1, r1, lr
 800d216:	ea40 0201 	orr.w	r2, r0, r1
 800d21a:	ec43 2b10 	vmov	d0, r2, r3
 800d21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d220:	42b7      	cmp	r7, r6
 800d222:	bf3a      	itte	cc
 800d224:	f1a5 0608 	subcc.w	r6, r5, #8
 800d228:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d22c:	2100      	movcs	r1, #0
 800d22e:	380b      	subs	r0, #11
 800d230:	d015      	beq.n	800d25e <__b2d+0x8e>
 800d232:	4084      	lsls	r4, r0
 800d234:	f1c0 0520 	rsb	r5, r0, #32
 800d238:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d23c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d240:	42be      	cmp	r6, r7
 800d242:	fa21 fc05 	lsr.w	ip, r1, r5
 800d246:	ea44 030c 	orr.w	r3, r4, ip
 800d24a:	bf8c      	ite	hi
 800d24c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d250:	2400      	movls	r4, #0
 800d252:	fa01 f000 	lsl.w	r0, r1, r0
 800d256:	40ec      	lsrs	r4, r5
 800d258:	ea40 0204 	orr.w	r2, r0, r4
 800d25c:	e7dd      	b.n	800d21a <__b2d+0x4a>
 800d25e:	ea44 030c 	orr.w	r3, r4, ip
 800d262:	460a      	mov	r2, r1
 800d264:	e7d9      	b.n	800d21a <__b2d+0x4a>
 800d266:	bf00      	nop
 800d268:	3ff00000 	.word	0x3ff00000

0800d26c <__d2b>:
 800d26c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d270:	460e      	mov	r6, r1
 800d272:	2101      	movs	r1, #1
 800d274:	ec59 8b10 	vmov	r8, r9, d0
 800d278:	4615      	mov	r5, r2
 800d27a:	f7ff fcb5 	bl	800cbe8 <_Balloc>
 800d27e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d282:	4607      	mov	r7, r0
 800d284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d288:	bb34      	cbnz	r4, 800d2d8 <__d2b+0x6c>
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	f1b8 0300 	subs.w	r3, r8, #0
 800d290:	d027      	beq.n	800d2e2 <__d2b+0x76>
 800d292:	a802      	add	r0, sp, #8
 800d294:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d298:	f7ff fd89 	bl	800cdae <__lo0bits>
 800d29c:	9900      	ldr	r1, [sp, #0]
 800d29e:	b1f0      	cbz	r0, 800d2de <__d2b+0x72>
 800d2a0:	9a01      	ldr	r2, [sp, #4]
 800d2a2:	f1c0 0320 	rsb	r3, r0, #32
 800d2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2aa:	430b      	orrs	r3, r1
 800d2ac:	40c2      	lsrs	r2, r0
 800d2ae:	617b      	str	r3, [r7, #20]
 800d2b0:	9201      	str	r2, [sp, #4]
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bf14      	ite	ne
 800d2ba:	2102      	movne	r1, #2
 800d2bc:	2101      	moveq	r1, #1
 800d2be:	6139      	str	r1, [r7, #16]
 800d2c0:	b1c4      	cbz	r4, 800d2f4 <__d2b+0x88>
 800d2c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d2c6:	4404      	add	r4, r0
 800d2c8:	6034      	str	r4, [r6, #0]
 800d2ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2ce:	6028      	str	r0, [r5, #0]
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	b003      	add	sp, #12
 800d2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2dc:	e7d5      	b.n	800d28a <__d2b+0x1e>
 800d2de:	6179      	str	r1, [r7, #20]
 800d2e0:	e7e7      	b.n	800d2b2 <__d2b+0x46>
 800d2e2:	a801      	add	r0, sp, #4
 800d2e4:	f7ff fd63 	bl	800cdae <__lo0bits>
 800d2e8:	9b01      	ldr	r3, [sp, #4]
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	6139      	str	r1, [r7, #16]
 800d2f0:	3020      	adds	r0, #32
 800d2f2:	e7e5      	b.n	800d2c0 <__d2b+0x54>
 800d2f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d2f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2fc:	6030      	str	r0, [r6, #0]
 800d2fe:	6918      	ldr	r0, [r3, #16]
 800d300:	f7ff fd36 	bl	800cd70 <__hi0bits>
 800d304:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d308:	e7e1      	b.n	800d2ce <__d2b+0x62>

0800d30a <__ratio>:
 800d30a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30e:	4688      	mov	r8, r1
 800d310:	4669      	mov	r1, sp
 800d312:	4681      	mov	r9, r0
 800d314:	f7ff ff5c 	bl	800d1d0 <__b2d>
 800d318:	a901      	add	r1, sp, #4
 800d31a:	4640      	mov	r0, r8
 800d31c:	ec57 6b10 	vmov	r6, r7, d0
 800d320:	f7ff ff56 	bl	800d1d0 <__b2d>
 800d324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d328:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d32c:	eba3 0c02 	sub.w	ip, r3, r2
 800d330:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d334:	1a9b      	subs	r3, r3, r2
 800d336:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d33a:	ec5b ab10 	vmov	sl, fp, d0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfce      	itee	gt
 800d342:	463a      	movgt	r2, r7
 800d344:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d348:	465a      	movle	r2, fp
 800d34a:	4659      	mov	r1, fp
 800d34c:	463d      	mov	r5, r7
 800d34e:	bfd4      	ite	le
 800d350:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d354:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d358:	4630      	mov	r0, r6
 800d35a:	ee10 2a10 	vmov	r2, s0
 800d35e:	460b      	mov	r3, r1
 800d360:	4629      	mov	r1, r5
 800d362:	f7f3 fa93 	bl	800088c <__aeabi_ddiv>
 800d366:	ec41 0b10 	vmov	d0, r0, r1
 800d36a:	b003      	add	sp, #12
 800d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d370 <__copybits>:
 800d370:	3901      	subs	r1, #1
 800d372:	b510      	push	{r4, lr}
 800d374:	1149      	asrs	r1, r1, #5
 800d376:	6914      	ldr	r4, [r2, #16]
 800d378:	3101      	adds	r1, #1
 800d37a:	f102 0314 	add.w	r3, r2, #20
 800d37e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d382:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d386:	42a3      	cmp	r3, r4
 800d388:	4602      	mov	r2, r0
 800d38a:	d303      	bcc.n	800d394 <__copybits+0x24>
 800d38c:	2300      	movs	r3, #0
 800d38e:	428a      	cmp	r2, r1
 800d390:	d305      	bcc.n	800d39e <__copybits+0x2e>
 800d392:	bd10      	pop	{r4, pc}
 800d394:	f853 2b04 	ldr.w	r2, [r3], #4
 800d398:	f840 2b04 	str.w	r2, [r0], #4
 800d39c:	e7f3      	b.n	800d386 <__copybits+0x16>
 800d39e:	f842 3b04 	str.w	r3, [r2], #4
 800d3a2:	e7f4      	b.n	800d38e <__copybits+0x1e>

0800d3a4 <__any_on>:
 800d3a4:	f100 0214 	add.w	r2, r0, #20
 800d3a8:	6900      	ldr	r0, [r0, #16]
 800d3aa:	114b      	asrs	r3, r1, #5
 800d3ac:	4298      	cmp	r0, r3
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	db11      	blt.n	800d3d6 <__any_on+0x32>
 800d3b2:	dd0a      	ble.n	800d3ca <__any_on+0x26>
 800d3b4:	f011 011f 	ands.w	r1, r1, #31
 800d3b8:	d007      	beq.n	800d3ca <__any_on+0x26>
 800d3ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3be:	fa24 f001 	lsr.w	r0, r4, r1
 800d3c2:	fa00 f101 	lsl.w	r1, r0, r1
 800d3c6:	428c      	cmp	r4, r1
 800d3c8:	d10b      	bne.n	800d3e2 <__any_on+0x3e>
 800d3ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d803      	bhi.n	800d3da <__any_on+0x36>
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	bd10      	pop	{r4, pc}
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	e7f7      	b.n	800d3ca <__any_on+0x26>
 800d3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d0f5      	beq.n	800d3ce <__any_on+0x2a>
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	e7f6      	b.n	800d3d4 <__any_on+0x30>

0800d3e6 <_calloc_r>:
 800d3e6:	b538      	push	{r3, r4, r5, lr}
 800d3e8:	fb02 f401 	mul.w	r4, r2, r1
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	f000 f857 	bl	800d4a0 <_malloc_r>
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	b118      	cbz	r0, 800d3fe <_calloc_r+0x18>
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	f7fc fcd0 	bl	8009d9e <memset>
 800d3fe:	4628      	mov	r0, r5
 800d400:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d404 <_free_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4605      	mov	r5, r0
 800d408:	2900      	cmp	r1, #0
 800d40a:	d045      	beq.n	800d498 <_free_r+0x94>
 800d40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d410:	1f0c      	subs	r4, r1, #4
 800d412:	2b00      	cmp	r3, #0
 800d414:	bfb8      	it	lt
 800d416:	18e4      	addlt	r4, r4, r3
 800d418:	f000 fa36 	bl	800d888 <__malloc_lock>
 800d41c:	4a1f      	ldr	r2, [pc, #124]	; (800d49c <_free_r+0x98>)
 800d41e:	6813      	ldr	r3, [r2, #0]
 800d420:	4610      	mov	r0, r2
 800d422:	b933      	cbnz	r3, 800d432 <_free_r+0x2e>
 800d424:	6063      	str	r3, [r4, #4]
 800d426:	6014      	str	r4, [r2, #0]
 800d428:	4628      	mov	r0, r5
 800d42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d42e:	f000 ba2c 	b.w	800d88a <__malloc_unlock>
 800d432:	42a3      	cmp	r3, r4
 800d434:	d90c      	bls.n	800d450 <_free_r+0x4c>
 800d436:	6821      	ldr	r1, [r4, #0]
 800d438:	1862      	adds	r2, r4, r1
 800d43a:	4293      	cmp	r3, r2
 800d43c:	bf04      	itt	eq
 800d43e:	681a      	ldreq	r2, [r3, #0]
 800d440:	685b      	ldreq	r3, [r3, #4]
 800d442:	6063      	str	r3, [r4, #4]
 800d444:	bf04      	itt	eq
 800d446:	1852      	addeq	r2, r2, r1
 800d448:	6022      	streq	r2, [r4, #0]
 800d44a:	6004      	str	r4, [r0, #0]
 800d44c:	e7ec      	b.n	800d428 <_free_r+0x24>
 800d44e:	4613      	mov	r3, r2
 800d450:	685a      	ldr	r2, [r3, #4]
 800d452:	b10a      	cbz	r2, 800d458 <_free_r+0x54>
 800d454:	42a2      	cmp	r2, r4
 800d456:	d9fa      	bls.n	800d44e <_free_r+0x4a>
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	1858      	adds	r0, r3, r1
 800d45c:	42a0      	cmp	r0, r4
 800d45e:	d10b      	bne.n	800d478 <_free_r+0x74>
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	4401      	add	r1, r0
 800d464:	1858      	adds	r0, r3, r1
 800d466:	4282      	cmp	r2, r0
 800d468:	6019      	str	r1, [r3, #0]
 800d46a:	d1dd      	bne.n	800d428 <_free_r+0x24>
 800d46c:	6810      	ldr	r0, [r2, #0]
 800d46e:	6852      	ldr	r2, [r2, #4]
 800d470:	605a      	str	r2, [r3, #4]
 800d472:	4401      	add	r1, r0
 800d474:	6019      	str	r1, [r3, #0]
 800d476:	e7d7      	b.n	800d428 <_free_r+0x24>
 800d478:	d902      	bls.n	800d480 <_free_r+0x7c>
 800d47a:	230c      	movs	r3, #12
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	e7d3      	b.n	800d428 <_free_r+0x24>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	1821      	adds	r1, r4, r0
 800d484:	428a      	cmp	r2, r1
 800d486:	bf04      	itt	eq
 800d488:	6811      	ldreq	r1, [r2, #0]
 800d48a:	6852      	ldreq	r2, [r2, #4]
 800d48c:	6062      	str	r2, [r4, #4]
 800d48e:	bf04      	itt	eq
 800d490:	1809      	addeq	r1, r1, r0
 800d492:	6021      	streq	r1, [r4, #0]
 800d494:	605c      	str	r4, [r3, #4]
 800d496:	e7c7      	b.n	800d428 <_free_r+0x24>
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop
 800d49c:	20004274 	.word	0x20004274

0800d4a0 <_malloc_r>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	1ccd      	adds	r5, r1, #3
 800d4a4:	f025 0503 	bic.w	r5, r5, #3
 800d4a8:	3508      	adds	r5, #8
 800d4aa:	2d0c      	cmp	r5, #12
 800d4ac:	bf38      	it	cc
 800d4ae:	250c      	movcc	r5, #12
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	db01      	blt.n	800d4ba <_malloc_r+0x1a>
 800d4b6:	42a9      	cmp	r1, r5
 800d4b8:	d903      	bls.n	800d4c2 <_malloc_r+0x22>
 800d4ba:	230c      	movs	r3, #12
 800d4bc:	6033      	str	r3, [r6, #0]
 800d4be:	2000      	movs	r0, #0
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	f000 f9e1 	bl	800d888 <__malloc_lock>
 800d4c6:	4a21      	ldr	r2, [pc, #132]	; (800d54c <_malloc_r+0xac>)
 800d4c8:	6814      	ldr	r4, [r2, #0]
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	b991      	cbnz	r1, 800d4f4 <_malloc_r+0x54>
 800d4ce:	4c20      	ldr	r4, [pc, #128]	; (800d550 <_malloc_r+0xb0>)
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	b91b      	cbnz	r3, 800d4dc <_malloc_r+0x3c>
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f000 f98f 	bl	800d7f8 <_sbrk_r>
 800d4da:	6020      	str	r0, [r4, #0]
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f000 f98a 	bl	800d7f8 <_sbrk_r>
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d124      	bne.n	800d532 <_malloc_r+0x92>
 800d4e8:	230c      	movs	r3, #12
 800d4ea:	6033      	str	r3, [r6, #0]
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f000 f9cc 	bl	800d88a <__malloc_unlock>
 800d4f2:	e7e4      	b.n	800d4be <_malloc_r+0x1e>
 800d4f4:	680b      	ldr	r3, [r1, #0]
 800d4f6:	1b5b      	subs	r3, r3, r5
 800d4f8:	d418      	bmi.n	800d52c <_malloc_r+0x8c>
 800d4fa:	2b0b      	cmp	r3, #11
 800d4fc:	d90f      	bls.n	800d51e <_malloc_r+0x7e>
 800d4fe:	600b      	str	r3, [r1, #0]
 800d500:	50cd      	str	r5, [r1, r3]
 800d502:	18cc      	adds	r4, r1, r3
 800d504:	4630      	mov	r0, r6
 800d506:	f000 f9c0 	bl	800d88a <__malloc_unlock>
 800d50a:	f104 000b 	add.w	r0, r4, #11
 800d50e:	1d23      	adds	r3, r4, #4
 800d510:	f020 0007 	bic.w	r0, r0, #7
 800d514:	1ac3      	subs	r3, r0, r3
 800d516:	d0d3      	beq.n	800d4c0 <_malloc_r+0x20>
 800d518:	425a      	negs	r2, r3
 800d51a:	50e2      	str	r2, [r4, r3]
 800d51c:	e7d0      	b.n	800d4c0 <_malloc_r+0x20>
 800d51e:	428c      	cmp	r4, r1
 800d520:	684b      	ldr	r3, [r1, #4]
 800d522:	bf16      	itet	ne
 800d524:	6063      	strne	r3, [r4, #4]
 800d526:	6013      	streq	r3, [r2, #0]
 800d528:	460c      	movne	r4, r1
 800d52a:	e7eb      	b.n	800d504 <_malloc_r+0x64>
 800d52c:	460c      	mov	r4, r1
 800d52e:	6849      	ldr	r1, [r1, #4]
 800d530:	e7cc      	b.n	800d4cc <_malloc_r+0x2c>
 800d532:	1cc4      	adds	r4, r0, #3
 800d534:	f024 0403 	bic.w	r4, r4, #3
 800d538:	42a0      	cmp	r0, r4
 800d53a:	d005      	beq.n	800d548 <_malloc_r+0xa8>
 800d53c:	1a21      	subs	r1, r4, r0
 800d53e:	4630      	mov	r0, r6
 800d540:	f000 f95a 	bl	800d7f8 <_sbrk_r>
 800d544:	3001      	adds	r0, #1
 800d546:	d0cf      	beq.n	800d4e8 <_malloc_r+0x48>
 800d548:	6025      	str	r5, [r4, #0]
 800d54a:	e7db      	b.n	800d504 <_malloc_r+0x64>
 800d54c:	20004274 	.word	0x20004274
 800d550:	20004278 	.word	0x20004278

0800d554 <__ssputs_r>:
 800d554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	688e      	ldr	r6, [r1, #8]
 800d55a:	429e      	cmp	r6, r3
 800d55c:	4682      	mov	sl, r0
 800d55e:	460c      	mov	r4, r1
 800d560:	4690      	mov	r8, r2
 800d562:	4699      	mov	r9, r3
 800d564:	d837      	bhi.n	800d5d6 <__ssputs_r+0x82>
 800d566:	898a      	ldrh	r2, [r1, #12]
 800d568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d56c:	d031      	beq.n	800d5d2 <__ssputs_r+0x7e>
 800d56e:	6825      	ldr	r5, [r4, #0]
 800d570:	6909      	ldr	r1, [r1, #16]
 800d572:	1a6f      	subs	r7, r5, r1
 800d574:	6965      	ldr	r5, [r4, #20]
 800d576:	2302      	movs	r3, #2
 800d578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d57c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d580:	f109 0301 	add.w	r3, r9, #1
 800d584:	443b      	add	r3, r7
 800d586:	429d      	cmp	r5, r3
 800d588:	bf38      	it	cc
 800d58a:	461d      	movcc	r5, r3
 800d58c:	0553      	lsls	r3, r2, #21
 800d58e:	d530      	bpl.n	800d5f2 <__ssputs_r+0x9e>
 800d590:	4629      	mov	r1, r5
 800d592:	f7ff ff85 	bl	800d4a0 <_malloc_r>
 800d596:	4606      	mov	r6, r0
 800d598:	b950      	cbnz	r0, 800d5b0 <__ssputs_r+0x5c>
 800d59a:	230c      	movs	r3, #12
 800d59c:	f8ca 3000 	str.w	r3, [sl]
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b0:	463a      	mov	r2, r7
 800d5b2:	6921      	ldr	r1, [r4, #16]
 800d5b4:	f7fc fbe8 	bl	8009d88 <memcpy>
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5c2:	81a3      	strh	r3, [r4, #12]
 800d5c4:	6126      	str	r6, [r4, #16]
 800d5c6:	6165      	str	r5, [r4, #20]
 800d5c8:	443e      	add	r6, r7
 800d5ca:	1bed      	subs	r5, r5, r7
 800d5cc:	6026      	str	r6, [r4, #0]
 800d5ce:	60a5      	str	r5, [r4, #8]
 800d5d0:	464e      	mov	r6, r9
 800d5d2:	454e      	cmp	r6, r9
 800d5d4:	d900      	bls.n	800d5d8 <__ssputs_r+0x84>
 800d5d6:	464e      	mov	r6, r9
 800d5d8:	4632      	mov	r2, r6
 800d5da:	4641      	mov	r1, r8
 800d5dc:	6820      	ldr	r0, [r4, #0]
 800d5de:	f000 f93a 	bl	800d856 <memmove>
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	1b9b      	subs	r3, r3, r6
 800d5e6:	60a3      	str	r3, [r4, #8]
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	441e      	add	r6, r3
 800d5ec:	6026      	str	r6, [r4, #0]
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e7dc      	b.n	800d5ac <__ssputs_r+0x58>
 800d5f2:	462a      	mov	r2, r5
 800d5f4:	f000 f94a 	bl	800d88c <_realloc_r>
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d1e2      	bne.n	800d5c4 <__ssputs_r+0x70>
 800d5fe:	6921      	ldr	r1, [r4, #16]
 800d600:	4650      	mov	r0, sl
 800d602:	f7ff feff 	bl	800d404 <_free_r>
 800d606:	e7c8      	b.n	800d59a <__ssputs_r+0x46>

0800d608 <_svfiprintf_r>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	461d      	mov	r5, r3
 800d60e:	898b      	ldrh	r3, [r1, #12]
 800d610:	061f      	lsls	r7, r3, #24
 800d612:	b09d      	sub	sp, #116	; 0x74
 800d614:	4680      	mov	r8, r0
 800d616:	460c      	mov	r4, r1
 800d618:	4616      	mov	r6, r2
 800d61a:	d50f      	bpl.n	800d63c <_svfiprintf_r+0x34>
 800d61c:	690b      	ldr	r3, [r1, #16]
 800d61e:	b96b      	cbnz	r3, 800d63c <_svfiprintf_r+0x34>
 800d620:	2140      	movs	r1, #64	; 0x40
 800d622:	f7ff ff3d 	bl	800d4a0 <_malloc_r>
 800d626:	6020      	str	r0, [r4, #0]
 800d628:	6120      	str	r0, [r4, #16]
 800d62a:	b928      	cbnz	r0, 800d638 <_svfiprintf_r+0x30>
 800d62c:	230c      	movs	r3, #12
 800d62e:	f8c8 3000 	str.w	r3, [r8]
 800d632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d636:	e0c8      	b.n	800d7ca <_svfiprintf_r+0x1c2>
 800d638:	2340      	movs	r3, #64	; 0x40
 800d63a:	6163      	str	r3, [r4, #20]
 800d63c:	2300      	movs	r3, #0
 800d63e:	9309      	str	r3, [sp, #36]	; 0x24
 800d640:	2320      	movs	r3, #32
 800d642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d646:	2330      	movs	r3, #48	; 0x30
 800d648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d64c:	9503      	str	r5, [sp, #12]
 800d64e:	f04f 0b01 	mov.w	fp, #1
 800d652:	4637      	mov	r7, r6
 800d654:	463d      	mov	r5, r7
 800d656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d65a:	b10b      	cbz	r3, 800d660 <_svfiprintf_r+0x58>
 800d65c:	2b25      	cmp	r3, #37	; 0x25
 800d65e:	d13e      	bne.n	800d6de <_svfiprintf_r+0xd6>
 800d660:	ebb7 0a06 	subs.w	sl, r7, r6
 800d664:	d00b      	beq.n	800d67e <_svfiprintf_r+0x76>
 800d666:	4653      	mov	r3, sl
 800d668:	4632      	mov	r2, r6
 800d66a:	4621      	mov	r1, r4
 800d66c:	4640      	mov	r0, r8
 800d66e:	f7ff ff71 	bl	800d554 <__ssputs_r>
 800d672:	3001      	adds	r0, #1
 800d674:	f000 80a4 	beq.w	800d7c0 <_svfiprintf_r+0x1b8>
 800d678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d67a:	4453      	add	r3, sl
 800d67c:	9309      	str	r3, [sp, #36]	; 0x24
 800d67e:	783b      	ldrb	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 809d 	beq.w	800d7c0 <_svfiprintf_r+0x1b8>
 800d686:	2300      	movs	r3, #0
 800d688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	9307      	str	r3, [sp, #28]
 800d694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d698:	931a      	str	r3, [sp, #104]	; 0x68
 800d69a:	462f      	mov	r7, r5
 800d69c:	2205      	movs	r2, #5
 800d69e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d6a2:	4850      	ldr	r0, [pc, #320]	; (800d7e4 <_svfiprintf_r+0x1dc>)
 800d6a4:	f7f2 fdbc 	bl	8000220 <memchr>
 800d6a8:	9b04      	ldr	r3, [sp, #16]
 800d6aa:	b9d0      	cbnz	r0, 800d6e2 <_svfiprintf_r+0xda>
 800d6ac:	06d9      	lsls	r1, r3, #27
 800d6ae:	bf44      	itt	mi
 800d6b0:	2220      	movmi	r2, #32
 800d6b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6b6:	071a      	lsls	r2, r3, #28
 800d6b8:	bf44      	itt	mi
 800d6ba:	222b      	movmi	r2, #43	; 0x2b
 800d6bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6c0:	782a      	ldrb	r2, [r5, #0]
 800d6c2:	2a2a      	cmp	r2, #42	; 0x2a
 800d6c4:	d015      	beq.n	800d6f2 <_svfiprintf_r+0xea>
 800d6c6:	9a07      	ldr	r2, [sp, #28]
 800d6c8:	462f      	mov	r7, r5
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	250a      	movs	r5, #10
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6d4:	3b30      	subs	r3, #48	; 0x30
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d94d      	bls.n	800d776 <_svfiprintf_r+0x16e>
 800d6da:	b1b8      	cbz	r0, 800d70c <_svfiprintf_r+0x104>
 800d6dc:	e00f      	b.n	800d6fe <_svfiprintf_r+0xf6>
 800d6de:	462f      	mov	r7, r5
 800d6e0:	e7b8      	b.n	800d654 <_svfiprintf_r+0x4c>
 800d6e2:	4a40      	ldr	r2, [pc, #256]	; (800d7e4 <_svfiprintf_r+0x1dc>)
 800d6e4:	1a80      	subs	r0, r0, r2
 800d6e6:	fa0b f000 	lsl.w	r0, fp, r0
 800d6ea:	4318      	orrs	r0, r3
 800d6ec:	9004      	str	r0, [sp, #16]
 800d6ee:	463d      	mov	r5, r7
 800d6f0:	e7d3      	b.n	800d69a <_svfiprintf_r+0x92>
 800d6f2:	9a03      	ldr	r2, [sp, #12]
 800d6f4:	1d11      	adds	r1, r2, #4
 800d6f6:	6812      	ldr	r2, [r2, #0]
 800d6f8:	9103      	str	r1, [sp, #12]
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	db01      	blt.n	800d702 <_svfiprintf_r+0xfa>
 800d6fe:	9207      	str	r2, [sp, #28]
 800d700:	e004      	b.n	800d70c <_svfiprintf_r+0x104>
 800d702:	4252      	negs	r2, r2
 800d704:	f043 0302 	orr.w	r3, r3, #2
 800d708:	9207      	str	r2, [sp, #28]
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	783b      	ldrb	r3, [r7, #0]
 800d70e:	2b2e      	cmp	r3, #46	; 0x2e
 800d710:	d10c      	bne.n	800d72c <_svfiprintf_r+0x124>
 800d712:	787b      	ldrb	r3, [r7, #1]
 800d714:	2b2a      	cmp	r3, #42	; 0x2a
 800d716:	d133      	bne.n	800d780 <_svfiprintf_r+0x178>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	1d1a      	adds	r2, r3, #4
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	9203      	str	r2, [sp, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	bfb8      	it	lt
 800d724:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d728:	3702      	adds	r7, #2
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4d2e      	ldr	r5, [pc, #184]	; (800d7e8 <_svfiprintf_r+0x1e0>)
 800d72e:	7839      	ldrb	r1, [r7, #0]
 800d730:	2203      	movs	r2, #3
 800d732:	4628      	mov	r0, r5
 800d734:	f7f2 fd74 	bl	8000220 <memchr>
 800d738:	b138      	cbz	r0, 800d74a <_svfiprintf_r+0x142>
 800d73a:	2340      	movs	r3, #64	; 0x40
 800d73c:	1b40      	subs	r0, r0, r5
 800d73e:	fa03 f000 	lsl.w	r0, r3, r0
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	4303      	orrs	r3, r0
 800d746:	3701      	adds	r7, #1
 800d748:	9304      	str	r3, [sp, #16]
 800d74a:	7839      	ldrb	r1, [r7, #0]
 800d74c:	4827      	ldr	r0, [pc, #156]	; (800d7ec <_svfiprintf_r+0x1e4>)
 800d74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d752:	2206      	movs	r2, #6
 800d754:	1c7e      	adds	r6, r7, #1
 800d756:	f7f2 fd63 	bl	8000220 <memchr>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d038      	beq.n	800d7d0 <_svfiprintf_r+0x1c8>
 800d75e:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <_svfiprintf_r+0x1e8>)
 800d760:	bb13      	cbnz	r3, 800d7a8 <_svfiprintf_r+0x1a0>
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	3307      	adds	r3, #7
 800d766:	f023 0307 	bic.w	r3, r3, #7
 800d76a:	3308      	adds	r3, #8
 800d76c:	9303      	str	r3, [sp, #12]
 800d76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d770:	444b      	add	r3, r9
 800d772:	9309      	str	r3, [sp, #36]	; 0x24
 800d774:	e76d      	b.n	800d652 <_svfiprintf_r+0x4a>
 800d776:	fb05 3202 	mla	r2, r5, r2, r3
 800d77a:	2001      	movs	r0, #1
 800d77c:	460f      	mov	r7, r1
 800d77e:	e7a6      	b.n	800d6ce <_svfiprintf_r+0xc6>
 800d780:	2300      	movs	r3, #0
 800d782:	3701      	adds	r7, #1
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	4619      	mov	r1, r3
 800d788:	250a      	movs	r5, #10
 800d78a:	4638      	mov	r0, r7
 800d78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d790:	3a30      	subs	r2, #48	; 0x30
 800d792:	2a09      	cmp	r2, #9
 800d794:	d903      	bls.n	800d79e <_svfiprintf_r+0x196>
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0c8      	beq.n	800d72c <_svfiprintf_r+0x124>
 800d79a:	9105      	str	r1, [sp, #20]
 800d79c:	e7c6      	b.n	800d72c <_svfiprintf_r+0x124>
 800d79e:	fb05 2101 	mla	r1, r5, r1, r2
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	4607      	mov	r7, r0
 800d7a6:	e7f0      	b.n	800d78a <_svfiprintf_r+0x182>
 800d7a8:	ab03      	add	r3, sp, #12
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	4b11      	ldr	r3, [pc, #68]	; (800d7f4 <_svfiprintf_r+0x1ec>)
 800d7b0:	a904      	add	r1, sp, #16
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7fc fb90 	bl	8009ed8 <_printf_float>
 800d7b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d7bc:	4681      	mov	r9, r0
 800d7be:	d1d6      	bne.n	800d76e <_svfiprintf_r+0x166>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	065b      	lsls	r3, r3, #25
 800d7c4:	f53f af35 	bmi.w	800d632 <_svfiprintf_r+0x2a>
 800d7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7ca:	b01d      	add	sp, #116	; 0x74
 800d7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d0:	ab03      	add	r3, sp, #12
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4b07      	ldr	r3, [pc, #28]	; (800d7f4 <_svfiprintf_r+0x1ec>)
 800d7d8:	a904      	add	r1, sp, #16
 800d7da:	4640      	mov	r0, r8
 800d7dc:	f7fc fe32 	bl	800a444 <_printf_i>
 800d7e0:	e7ea      	b.n	800d7b8 <_svfiprintf_r+0x1b0>
 800d7e2:	bf00      	nop
 800d7e4:	08010e74 	.word	0x08010e74
 800d7e8:	08010e7a 	.word	0x08010e7a
 800d7ec:	08010e7e 	.word	0x08010e7e
 800d7f0:	08009ed9 	.word	0x08009ed9
 800d7f4:	0800d555 	.word	0x0800d555

0800d7f8 <_sbrk_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4c06      	ldr	r4, [pc, #24]	; (800d814 <_sbrk_r+0x1c>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4605      	mov	r5, r0
 800d800:	4608      	mov	r0, r1
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	f7fc f946 	bl	8009a94 <_sbrk>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_sbrk_r+0x1a>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_sbrk_r+0x1a>
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	20004928 	.word	0x20004928

0800d818 <strncmp>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	b16a      	cbz	r2, 800d838 <strncmp+0x20>
 800d81c:	3901      	subs	r1, #1
 800d81e:	1884      	adds	r4, r0, r2
 800d820:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d824:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d828:	4293      	cmp	r3, r2
 800d82a:	d103      	bne.n	800d834 <strncmp+0x1c>
 800d82c:	42a0      	cmp	r0, r4
 800d82e:	d001      	beq.n	800d834 <strncmp+0x1c>
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1f5      	bne.n	800d820 <strncmp+0x8>
 800d834:	1a98      	subs	r0, r3, r2
 800d836:	bd10      	pop	{r4, pc}
 800d838:	4610      	mov	r0, r2
 800d83a:	e7fc      	b.n	800d836 <strncmp+0x1e>

0800d83c <__ascii_wctomb>:
 800d83c:	b149      	cbz	r1, 800d852 <__ascii_wctomb+0x16>
 800d83e:	2aff      	cmp	r2, #255	; 0xff
 800d840:	bf85      	ittet	hi
 800d842:	238a      	movhi	r3, #138	; 0x8a
 800d844:	6003      	strhi	r3, [r0, #0]
 800d846:	700a      	strbls	r2, [r1, #0]
 800d848:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d84c:	bf98      	it	ls
 800d84e:	2001      	movls	r0, #1
 800d850:	4770      	bx	lr
 800d852:	4608      	mov	r0, r1
 800d854:	4770      	bx	lr

0800d856 <memmove>:
 800d856:	4288      	cmp	r0, r1
 800d858:	b510      	push	{r4, lr}
 800d85a:	eb01 0302 	add.w	r3, r1, r2
 800d85e:	d807      	bhi.n	800d870 <memmove+0x1a>
 800d860:	1e42      	subs	r2, r0, #1
 800d862:	4299      	cmp	r1, r3
 800d864:	d00a      	beq.n	800d87c <memmove+0x26>
 800d866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d86a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d86e:	e7f8      	b.n	800d862 <memmove+0xc>
 800d870:	4283      	cmp	r3, r0
 800d872:	d9f5      	bls.n	800d860 <memmove+0xa>
 800d874:	1881      	adds	r1, r0, r2
 800d876:	1ad2      	subs	r2, r2, r3
 800d878:	42d3      	cmn	r3, r2
 800d87a:	d100      	bne.n	800d87e <memmove+0x28>
 800d87c:	bd10      	pop	{r4, pc}
 800d87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d882:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d886:	e7f7      	b.n	800d878 <memmove+0x22>

0800d888 <__malloc_lock>:
 800d888:	4770      	bx	lr

0800d88a <__malloc_unlock>:
 800d88a:	4770      	bx	lr

0800d88c <_realloc_r>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	4607      	mov	r7, r0
 800d890:	4614      	mov	r4, r2
 800d892:	460e      	mov	r6, r1
 800d894:	b921      	cbnz	r1, 800d8a0 <_realloc_r+0x14>
 800d896:	4611      	mov	r1, r2
 800d898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d89c:	f7ff be00 	b.w	800d4a0 <_malloc_r>
 800d8a0:	b922      	cbnz	r2, 800d8ac <_realloc_r+0x20>
 800d8a2:	f7ff fdaf 	bl	800d404 <_free_r>
 800d8a6:	4625      	mov	r5, r4
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ac:	f000 f814 	bl	800d8d8 <_malloc_usable_size_r>
 800d8b0:	42a0      	cmp	r0, r4
 800d8b2:	d20f      	bcs.n	800d8d4 <_realloc_r+0x48>
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	f7ff fdf2 	bl	800d4a0 <_malloc_r>
 800d8bc:	4605      	mov	r5, r0
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d0f2      	beq.n	800d8a8 <_realloc_r+0x1c>
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	f7fc fa5f 	bl	8009d88 <memcpy>
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f7ff fd99 	bl	800d404 <_free_r>
 800d8d2:	e7e9      	b.n	800d8a8 <_realloc_r+0x1c>
 800d8d4:	4635      	mov	r5, r6
 800d8d6:	e7e7      	b.n	800d8a8 <_realloc_r+0x1c>

0800d8d8 <_malloc_usable_size_r>:
 800d8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8dc:	1f18      	subs	r0, r3, #4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfbc      	itt	lt
 800d8e2:	580b      	ldrlt	r3, [r1, r0]
 800d8e4:	18c0      	addlt	r0, r0, r3
 800d8e6:	4770      	bx	lr

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
